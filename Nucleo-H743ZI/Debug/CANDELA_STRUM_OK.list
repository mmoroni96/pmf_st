
CANDELA_STRUM_OK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014174  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0801440c  0801440c  0002440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014948  08014948  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  08014948  08014948  00024948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014950  08014950  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014950  08014950  00024950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014954  08014954  00024954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08014958  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08014968  00030010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  080149c8  00030070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000241a4  240000d0  08014a28  000300d0  2**3
                  ALLOC
 12 ._user_heap_stack 00006004  24024274  08014a28  00034274  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003c79a  00000000  00000000  000300fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000545c  00000000  00000000  0006c898  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002440  00000000  00000000  00071cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002268  00000000  00000000  00074138  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003f008  00000000  00000000  000763a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00021474  00000000  00000000  000b53a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0018d8c7  00000000  00000000  000d681c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002640e3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009f28  00000000  00000000  00264160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080143f4 	.word	0x080143f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080143f4 	.word	0x080143f4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 f95f 	bl	80018a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f869 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fb9f 	bl	8000d28 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fb7d 	bl	8000ce8 <MX_DMA_Init>
  MX_ETH_Init();
 80005ee:	f000 fa01 	bl	80009f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 fafb 	bl	8000bec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 fb45 	bl	8000c84 <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 80005fa:	f000 fa4d 	bl	8000a98 <MX_FDCAN1_Init>
  MX_SDMMC1_SD_Init();
 80005fe:	f000 faaf 	bl	8000b60 <MX_SDMMC1_SD_Init>
  MX_TIM17_Init();
 8000602:	f000 facd 	bl	8000ba0 <MX_TIM17_Init>
  MX_ADC3_Init();
 8000606:	f000 f97f 	bl	8000908 <MX_ADC3_Init>
  MX_FATFS_Init();
 800060a:	f00f fa21 	bl	800fa50 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800060e:	f000 f967 	bl	80008e0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // SD Card Initialization
  char path[] = "DATA_LOG.TXT";
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <main+0xbc>)
 8000614:	463c      	mov	r4, r7
 8000616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000618:	c407      	stmia	r4!, {r0, r1, r2}
 800061a:	7023      	strb	r3, [r4, #0]
  res = f_mount(&SDFatFs, SDPath, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	491e      	ldr	r1, [pc, #120]	; (8000698 <main+0xc0>)
 8000620:	481e      	ldr	r0, [pc, #120]	; (800069c <main+0xc4>)
 8000622:	f012 ff69 	bl	80134f8 <f_mount>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <main+0xc8>)
 800062c:	701a      	strb	r2, [r3, #0]
  res = f_open(&SDFile, &path[0], FA_CREATE_ALWAYS);
 800062e:	463b      	mov	r3, r7
 8000630:	2208      	movs	r2, #8
 8000632:	4619      	mov	r1, r3
 8000634:	481b      	ldr	r0, [pc, #108]	; (80006a4 <main+0xcc>)
 8000636:	f012 ffa5 	bl	8013584 <f_open>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <main+0xc8>)
 8000640:	701a      	strb	r2, [r3, #0]
  res = f_close(&SDFile);
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <main+0xcc>)
 8000644:	f013 fd51 	bl	80140ea <f_close>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <main+0xc8>)
 800064e:	701a      	strb	r2, [r3, #0]
  res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);
 8000650:	463b      	mov	r3, r7
 8000652:	2232      	movs	r2, #50	; 0x32
 8000654:	4619      	mov	r1, r3
 8000656:	4813      	ldr	r0, [pc, #76]	; (80006a4 <main+0xcc>)
 8000658:	f012 ff94 	bl	8013584 <f_open>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <main+0xc8>)
 8000662:	701a      	strb	r2, [r3, #0]
  //f_printf(&SDFile,"Timer, ID, Acc_X, Acc_Y, Acc_Z, Gyr_X, Gyr_Y, Temp\n");
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET,ADC_SINGLE_ENDED);
 8000664:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000668:	2100      	movs	r1, #0
 800066a:	480f      	ldr	r0, [pc, #60]	; (80006a8 <main+0xd0>)
 800066c:	f002 fe6e 	bl	800334c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)analogDmaData, ADC_CONVERTED_DATA_BUFFER_SIZE);
 8000670:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000674:	490d      	ldr	r1, [pc, #52]	; (80006ac <main+0xd4>)
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <main+0xd0>)
 8000678:	f001 fda8 	bl	80021cc <HAL_ADC_Start_DMA>
  // CAN Initialization
  HAL_FDCAN_Start(&hfdcan1);
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <main+0xd8>)
 800067e:	f005 fedb 	bl	8006438 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	480a      	ldr	r0, [pc, #40]	; (80006b0 <main+0xd8>)
 8000688:	f006 f842 	bl	8006710 <HAL_FDCAN_ActivateNotification>

  // TIMER Initialization
  HAL_TIM_Base_Start_IT(&htim17);
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <main+0xdc>)
 800068e:	f00b faaf 	bl	800bbf0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0xba>
 8000694:	0801440c 	.word	0x0801440c
 8000698:	240221dc 	.word	0x240221dc
 800069c:	24001bbc 	.word	0x24001bbc
 80006a0:	240220dc 	.word	0x240220dc
 80006a4:	240221e0 	.word	0x240221e0
 80006a8:	24001b58 	.word	0x24001b58
 80006ac:	24002cdc 	.word	0x24002cdc
 80006b0:	24002bf8 	.word	0x24002bf8
 80006b4:	24000a9c 	.word	0x24000a9c

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0cc      	sub	sp, #304	; 0x130
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006c2:	224c      	movs	r2, #76	; 0x4c
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f013 fe8b 	bl	80143e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f013 fe84 	bl	80143e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4618      	mov	r0, r3
 80006e0:	23bc      	movs	r3, #188	; 0xbc
 80006e2:	461a      	mov	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f013 fe7c 	bl	80143e2 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ea:	2002      	movs	r0, #2
 80006ec:	f007 f844 	bl	8007778 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	4b76      	ldr	r3, [pc, #472]	; (80008d0 <SystemClock_Config+0x218>)
 80006f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fa:	4a75      	ldr	r2, [pc, #468]	; (80008d0 <SystemClock_Config+0x218>)
 80006fc:	f023 0301 	bic.w	r3, r3, #1
 8000700:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000702:	4b73      	ldr	r3, [pc, #460]	; (80008d0 <SystemClock_Config+0x218>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	f003 0201 	and.w	r2, r3, #1
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	4b71      	ldr	r3, [pc, #452]	; (80008d4 <SystemClock_Config+0x21c>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a70      	ldr	r2, [pc, #448]	; (80008d4 <SystemClock_Config+0x21c>)
 8000714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b6e      	ldr	r3, [pc, #440]	; (80008d4 <SystemClock_Config+0x21c>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800072a:	bf00      	nop
 800072c:	4b69      	ldr	r3, [pc, #420]	; (80008d4 <SystemClock_Config+0x21c>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000738:	d1f8      	bne.n	800072c <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800073a:	4b67      	ldr	r3, [pc, #412]	; (80008d8 <SystemClock_Config+0x220>)
 800073c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073e:	f023 0303 	bic.w	r3, r3, #3
 8000742:	4a65      	ldr	r2, [pc, #404]	; (80008d8 <SystemClock_Config+0x220>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074a:	2301      	movs	r3, #1
 800074c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000750:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000754:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	2302      	movs	r3, #2
 8000760:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 32;
 800076a:	2320      	movs	r3, #32
 800076c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000782:	230c      	movs	r3, #12
 8000784:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800079a:	4618      	mov	r0, r3
 800079c:	f007 f836 	bl	800780c <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007a6:	f000 fc91 	bl	80010cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	233f      	movs	r3, #63	; 0x3f
 80007ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2303      	movs	r3, #3
 80007b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c2:	2340      	movs	r3, #64	; 0x40
 80007c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007e0:	2101      	movs	r1, #1
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 fbea 	bl	8007fbc <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 80007ee:	f000 fc6d 	bl	80010cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4a39      	ldr	r2, [pc, #228]	; (80008dc <SystemClock_Config+0x224>)
 80007f8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2201      	movs	r2, #1
 8000800:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2212      	movs	r2, #18
 8000808:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2201      	movs	r2, #1
 8000810:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	2202      	movs	r2, #2
 8000818:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2202      	movs	r2, #2
 8000820:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	22c0      	movs	r2, #192	; 0xc0
 8000828:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	2220      	movs	r2, #32
 8000830:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800083a:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2201      	movs	r2, #1
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	2218      	movs	r2, #24
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	2202      	movs	r2, #2
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2204      	movs	r2, #4
 800085a:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 1;
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2201      	movs	r2, #1
 8000862:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800086c:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2200      	movs	r2, #0
 8000874:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	2200      	movs	r2, #0
 800087c:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	2200      	movs	r2, #0
 8000884:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	2200      	movs	r2, #0
 800088c:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2200      	movs	r2, #0
 8000894:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800089e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	2200      	movs	r2, #0
 80008a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	4618      	mov	r0, r3
 80008b2:	f007 ff07 	bl	80086c4 <HAL_RCCEx_PeriphCLKConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x208>
  {
    Error_Handler();
 80008bc:	f000 fc06 	bl	80010cc <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80008c0:	f006 ff94 	bl	80077ec <HAL_PWREx_EnableUSBVoltageDetector>
}
 80008c4:	bf00      	nop
 80008c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	58000400 	.word	0x58000400
 80008d4:	58024800 	.word	0x58024800
 80008d8:	58024400 	.word	0x58024400
 80008dc:	000d8002 	.word	0x000d8002

080008e0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2013      	movs	r0, #19
 80008ea:	f002 fea0 	bl	800362e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008ee:	2013      	movs	r0, #19
 80008f0:	f002 feb7 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2076      	movs	r0, #118	; 0x76
 80008fa:	f002 fe98 	bl	800362e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80008fe:	2076      	movs	r0, #118	; 0x76
 8000900:	f002 feaf 	bl	8003662 <HAL_NVIC_EnableIRQ>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000920:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000922:	4a31      	ldr	r2, [pc, #196]	; (80009e8 <MX_ADC3_Init+0xe0>)
 8000924:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000928:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800092c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000936:	2201      	movs	r2, #1
 8000938:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <MX_ADC3_Init+0xdc>)
 800093c:	2204      	movs	r2, #4
 800093e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000942:	2200      	movs	r2, #0
 8000944:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000948:	2201      	movs	r2, #1
 800094a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <MX_ADC3_Init+0xdc>)
 800094e:	2202      	movs	r2, #2
 8000950:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000954:	2200      	movs	r2, #0
 8000956:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_ADC3_Init+0xdc>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000966:	2203      	movs	r2, #3
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_ADC3_Init+0xdc>)
 800096c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000970:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000974:	2200      	movs	r2, #0
 8000976:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_ADC3_Init+0xdc>)
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000980:	4818      	ldr	r0, [pc, #96]	; (80009e4 <MX_ADC3_Init+0xdc>)
 8000982:	f001 fa83 	bl	8001e8c <HAL_ADC_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 800098c:	f000 fb9e 	bl	80010cc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_ADC3_Init+0xe4>)
 8000992:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000994:	2306      	movs	r3, #6
 8000996:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800099c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009a2:	2304      	movs	r3, #4
 80009a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_ADC3_Init+0xdc>)
 80009b0:	f001 ff1e 	bl	80027f0 <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 80009ba:	f000 fb87 	bl	80010cc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_ADC3_Init+0xe8>)
 80009c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009c2:	230c      	movs	r3, #12
 80009c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_ADC3_Init+0xdc>)
 80009cc:	f001 ff10 	bl	80027f0 <HAL_ADC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 80009d6:	f000 fb79 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	3720      	adds	r7, #32
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24001b58 	.word	0x24001b58
 80009e8:	58026000 	.word	0x58026000
 80009ec:	2a000400 	.word	0x2a000400
 80009f0:	14f00020 	.word	0x14f00020

080009f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009f8:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_ETH_Init+0x90>)
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <MX_ETH_Init+0x94>)
 80009fc:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	3302      	adds	r3, #2
 8000a16:	22e1      	movs	r2, #225	; 0xe1
 8000a18:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	3303      	adds	r3, #3
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	3305      	adds	r3, #5
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a40:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_ETH_Init+0x98>)
 8000a42:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_ETH_Init+0x9c>)
 8000a48:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a4c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a50:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <MX_ETH_Init+0x90>)
 8000a54:	f004 fef8 	bl	8005848 <HAL_ETH_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 fb35 	bl	80010cc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a62:	2234      	movs	r2, #52	; 0x34
 8000a64:	2100      	movs	r1, #0
 8000a66:	480b      	ldr	r0, [pc, #44]	; (8000a94 <MX_ETH_Init+0xa0>)
 8000a68:	f013 fcbb 	bl	80143e2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_ETH_Init+0xa0>)
 8000a6e:	2221      	movs	r2, #33	; 0x21
 8000a70:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_ETH_Init+0xa0>)
 8000a74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a78:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_ETH_Init+0xa0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2402212c 	.word	0x2402212c
 8000a88:	40028000 	.word	0x40028000
 8000a8c:	24000070 	.word	0x24000070
 8000a90:	24000010 	.word	0x24000010
 8000a94:	2402219c 	.word	0x2402219c

08000a98 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000a9e:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <MX_FDCAN1_Init+0xc4>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000aae:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000ac2:	2205      	movs	r2, #5
 8000ac4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000ace:	220d      	movs	r2, #13
 8000ad0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000ada:	2205      	movs	r2, #5
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000ae6:	220d      	movs	r2, #13
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b04:	2220      	movs	r2, #32
 8000b06:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b16:	2204      	movs	r2, #4
 8000b18:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b22:	2204      	movs	r2, #4
 8000b24:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 8;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b2e:	2208      	movs	r2, #8
 8000b30:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 8;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b34:	2208      	movs	r2, #8
 8000b36:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b40:	2204      	movs	r2, #4
 8000b42:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_FDCAN1_Init+0xc0>)
 8000b46:	f005 fa95 	bl	8006074 <HAL_FDCAN_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b50:	f000 fabc 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	24002bf8 	.word	0x24002bf8
 8000b5c:	4000a000 	.word	0x4000a000

08000b60 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_SDMMC1_SD_Init+0x38>)
 8000b66:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <MX_SDMMC1_SD_Init+0x3c>)
 8000b68:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_SDMMC1_SD_Init+0x38>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_SDMMC1_SD_Init+0x38>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_SDMMC1_SD_Init+0x38>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_SDMMC1_SD_Init+0x38>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 6;
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <MX_SDMMC1_SD_Init+0x38>)
 8000b84:	2206      	movs	r2, #6
 8000b86:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <MX_SDMMC1_SD_Init+0x38>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	24000a1c 	.word	0x24000a1c
 8000b9c:	52007000 	.word	0x52007000

08000ba0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_TIM17_Init+0x44>)
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <MX_TIM17_Init+0x48>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 12799;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_TIM17_Init+0x44>)
 8000bac:	f243 12ff 	movw	r2, #12799	; 0x31ff
 8000bb0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_TIM17_Init+0x44>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 25;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <MX_TIM17_Init+0x44>)
 8000bba:	2219      	movs	r2, #25
 8000bbc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_TIM17_Init+0x44>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_TIM17_Init+0x44>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_TIM17_Init+0x44>)
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_TIM17_Init+0x44>)
 8000bd2:	f00a ffe1 	bl	800bb98 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000bdc:	f000 fa76 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	24000a9c 	.word	0x24000a9c
 8000be8:	40014800 	.word	0x40014800

08000bec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000bf2:	4a23      	ldr	r2, [pc, #140]	; (8000c80 <MX_USART3_UART_Init+0x94>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c36:	f00b fa2f 	bl	800c098 <HAL_UART_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c40:	f000 fa44 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c48:	f00d fd97 	bl	800e77a <HAL_UARTEx_SetTxFifoThreshold>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c52:	f000 fa3b 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c5a:	f00d fdcc 	bl	800e7f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c64:	f000 fa32 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_USART3_UART_Init+0x90>)
 8000c6a:	f00d fd4d 	bl	800e708 <HAL_UARTEx_DisableFifoMode>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f000 fa2a 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	24000588 	.word	0x24000588
 8000c80:	40004800 	.word	0x40004800

08000c84 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8a:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c90:	2209      	movs	r2, #9
 8000c92:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ccc:	f006 fc0b 	bl	80074e6 <HAL_PCD_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cd6:	f000 f9f9 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000614 	.word	0x24000614
 8000ce4:	40080000 	.word	0x40080000

08000ce8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_DMA_Init+0x3c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <MX_DMA_Init+0x3c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_DMA_Init+0x3c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	200b      	movs	r0, #11
 8000d12:	f002 fc8c 	bl	800362e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f002 fca3 	bl	8003662 <HAL_NVIC_EnableIRQ>

}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	58024400 	.word	0x58024400

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b5d      	ldr	r3, [pc, #372]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	4a5b      	ldr	r2, [pc, #364]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4e:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5c:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a54      	ldr	r2, [pc, #336]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000d64:	f043 0320 	orr.w	r3, r3, #32
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7a:	4b4e      	ldr	r3, [pc, #312]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	4a4c      	ldr	r2, [pc, #304]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8a:	4b4a      	ldr	r3, [pc, #296]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b46      	ldr	r3, [pc, #280]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	4a45      	ldr	r2, [pc, #276]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da8:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	4a3d      	ldr	r2, [pc, #244]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd4:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	4a36      	ldr	r2, [pc, #216]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de4:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df2:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	4a2e      	ldr	r2, [pc, #184]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e02:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <MX_GPIO_Init+0x18c>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000e16:	4828      	ldr	r0, [pc, #160]	; (8000eb8 <MX_GPIO_Init+0x190>)
 8000e18:	f006 fb4c 	bl	80074b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2140      	movs	r1, #64	; 0x40
 8000e20:	4826      	ldr	r0, [pc, #152]	; (8000ebc <MX_GPIO_Init+0x194>)
 8000e22:	f006 fb47 	bl	80074b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MX_GPIO_Init+0x198>)
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4822      	ldr	r0, [pc, #136]	; (8000ec4 <MX_GPIO_Init+0x19c>)
 8000e3c:	f006 f972 	bl	8007124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000e40:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <MX_GPIO_Init+0x190>)
 8000e5a:	f006 f963 	bl	8007124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e5e:	2340      	movs	r3, #64	; 0x40
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4811      	ldr	r0, [pc, #68]	; (8000ebc <MX_GPIO_Init+0x194>)
 8000e76:	f006 f955 	bl	8007124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <MX_GPIO_Init+0x194>)
 8000e8e:	f006 f949 	bl	8007124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <MX_GPIO_Init+0x19c>)
 8000ea6:	f006 f93d 	bl	8007124 <HAL_GPIO_Init>

}
 8000eaa:	bf00      	nop
 8000eac:	3730      	adds	r7, #48	; 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020400 	.word	0x58020400
 8000ebc:	58021800 	.word	0x58021800
 8000ec0:	11110000 	.word	0x11110000
 8000ec4:	58020800 	.word	0x58020800

08000ec8 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) == HAL_OK){
 8000ed2:	4b4a      	ldr	r3, [pc, #296]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	; (8001000 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	484a      	ldr	r0, [pc, #296]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x13c>)
 8000eda:	f005 fad9 	bl	8006490 <HAL_FDCAN_GetRxMessage>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f040 8087 	bne.w	8000ff4 <HAL_FDCAN_RxFifo0Callback+0x12c>
		if((RxHeader.Identifier>>5) == 0x00){
 8000ee6:	4b46      	ldr	r3, [pc, #280]	; (8001000 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d12d      	bne.n	8000f4c <HAL_FDCAN_RxFifo0Callback+0x84>
			Dati.ID = (uint8_t)RxHeader.Identifier;
 8000ef0:	4b43      	ldr	r3, [pc, #268]	; (8001000 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b44      	ldr	r3, [pc, #272]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000ef8:	771a      	strb	r2, [r3, #28]
			Dati.Timer = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
 8000efa:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b3e      	ldr	r3, [pc, #248]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f02:	785b      	ldrb	r3, [r3, #1]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	431a      	orrs	r2, r3
 8000f08:	4b3c      	ldr	r3, [pc, #240]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f0a:	789b      	ldrb	r3, [r3, #2]
 8000f0c:	041b      	lsls	r3, r3, #16
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f12:	78db      	ldrb	r3, [r3, #3]
 8000f14:	061b      	lsls	r3, r3, #24
 8000f16:	4313      	orrs	r3, r2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f1c:	619a      	str	r2, [r3, #24]
			Dati.Gir_x = rxData.Data8u[4] | rxData.Data8u[5]<<8;
 8000f1e:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f20:	791b      	ldrb	r3, [r3, #4]
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f26:	795b      	ldrb	r3, [r3, #5]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	4b35      	ldr	r3, [pc, #212]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f32:	80da      	strh	r2, [r3, #6]
			Dati.Gir_y = rxData.Data8u[6] | rxData.Data8u[7]<<8;
 8000f34:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f3c:	79db      	ldrb	r3, [r3, #7]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	4b30      	ldr	r3, [pc, #192]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f48:	811a      	strh	r2, [r3, #8]
		else{
			Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
			Dati.Pres = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
		}
	}
}
 8000f4a:	e053      	b.n	8000ff4 <HAL_FDCAN_RxFifo0Callback+0x12c>
		else if((RxHeader.Identifier>>5) == 0x01){
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	095b      	lsrs	r3, r3, #5
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d134      	bne.n	8000fc0 <HAL_FDCAN_RxFifo0Callback+0xf8>
			Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f64:	771a      	strb	r2, [r3, #28]
			Dati.Acc_x = rxData.Data8u[0] | rxData.Data8u[1]<<8;
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f6e:	785b      	ldrb	r3, [r3, #1]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f7a:	801a      	strh	r2, [r3, #0]
			Dati.Acc_y = rxData.Data8u[2] | rxData.Data8u[3]<<8;
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f7e:	789b      	ldrb	r3, [r3, #2]
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f84:	78db      	ldrb	r3, [r3, #3]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f90:	805a      	strh	r2, [r3, #2]
			Dati.Acc_z = rxData.Data8u[4] | rxData.Data8u[5]<<8;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f94:	791b      	ldrb	r3, [r3, #4]
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f9a:	795b      	ldrb	r3, [r3, #5]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000fa6:	809a      	strh	r2, [r3, #4]
			Dati.T_b = rxData.Data8u[6] | rxData.Data8u[7]<<8;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000faa:	799b      	ldrb	r3, [r3, #6]
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fb0:	79db      	ldrb	r3, [r3, #7]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000fbc:	81da      	strh	r2, [r3, #14]
}
 8000fbe:	e019      	b.n	8000ff4 <HAL_FDCAN_RxFifo0Callback+0x12c>
			Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000fce:	771a      	strb	r2, [r3, #28]
			Dati.Pres = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fd8:	785b      	ldrb	r3, [r3, #1]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fe0:	789b      	ldrb	r3, [r3, #2]
 8000fe2:	041b      	lsls	r3, r3, #16
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fe8:	78db      	ldrb	r3, [r3, #3]
 8000fea:	061b      	lsls	r3, r3, #24
 8000fec:	4313      	orrs	r3, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000ff2:	611a      	str	r2, [r3, #16]
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	24000580 	.word	0x24000580
 8001000:	24022104 	.word	0x24022104
 8001004:	24002bf8 	.word	0x24002bf8
 8001008:	24002c98 	.word	0x24002c98

0800100c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17){ //check if the interrupt comes from TIM17
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d116      	bne.n	800104c <HAL_TIM_PeriodElapsedCallback+0x40>
    	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 800101e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001024:	f006 fa2e 	bl	8007484 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10e      	bne.n	800104c <HAL_TIM_PeriodElapsedCallback+0x40>
    		HAL_TIM_Base_Stop_IT(&htim17);
 800102e:	480b      	ldr	r0, [pc, #44]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001030:	f00a fe08 	bl	800bc44 <HAL_TIM_Base_Stop_IT>
    		//HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
    		res = f_close(&SDFile);
 8001034:	480a      	ldr	r0, [pc, #40]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001036:	f013 f858 	bl	80140ea <f_close>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001040:	701a      	strb	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001048:	f006 fa34 	bl	80074b4 <HAL_GPIO_WritePin>
    	}

    }
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40014800 	.word	0x40014800
 8001058:	58020800 	.word	0x58020800
 800105c:	24000a9c 	.word	0x24000a9c
 8001060:	240221e0 	.word	0x240221e0
 8001064:	240220dc 	.word	0x240220dc
 8001068:	58020400 	.word	0x58020400

0800106c <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	uint32_t result;
	result=f_write(&SDFile,analogDmaData,ADC_CONVERTED_DATA_BUFFER_SIZE/2, &br);
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001076:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800107a:	4906      	ldr	r1, [pc, #24]	; (8001094 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800107e:	f012 fd3c 	bl	8013afa <f_write>
 8001082:	4603      	mov	r3, r0
 8001084:	60fb      	str	r3, [r7, #12]

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	24000adc 	.word	0x24000adc
 8001094:	24002cdc 	.word	0x24002cdc
 8001098:	240221e0 	.word	0x240221e0

0800109c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
uint32_t result;

result=f_write(&SDFile,&analogDmaData[ADC_CONVERTED_DATA_BUFFER_SIZE/2-2],ADC_CONVERTED_DATA_BUFFER_SIZE/2, &br);
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_ADC_ConvCpltCallback+0x24>)
 80010a6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80010aa:	4906      	ldr	r1, [pc, #24]	; (80010c4 <HAL_ADC_ConvCpltCallback+0x28>)
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80010ae:	f012 fd24 	bl	8013afa <f_write>
 80010b2:	4603      	mov	r3, r0
 80010b4:	60fb      	str	r3, [r7, #12]

}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	24000adc 	.word	0x24000adc
 80010c4:	240126d8 	.word	0x240126d8
 80010c8:	240221e0 	.word	0x240221e0

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_MspInit+0x30>)
 80010e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010e8:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_MspInit+0x30>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_MspInit+0x30>)
 80010f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	58024400 	.word	0x58024400

08001110 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a41      	ldr	r2, [pc, #260]	; (8001234 <HAL_ADC_MspInit+0x124>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d17c      	bne.n	800122c <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001132:	4b41      	ldr	r3, [pc, #260]	; (8001238 <HAL_ADC_MspInit+0x128>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	4a3f      	ldr	r2, [pc, #252]	; (8001238 <HAL_ADC_MspInit+0x128>)
 800113a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <HAL_ADC_MspInit+0x128>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <HAL_ADC_MspInit+0x128>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	4a38      	ldr	r2, [pc, #224]	; (8001238 <HAL_ADC_MspInit+0x128>)
 8001158:	f043 0320 	orr.w	r3, r3, #32
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <HAL_ADC_MspInit+0x128>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001166:	f003 0320 	and.w	r3, r3, #32
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <HAL_ADC_MspInit+0x128>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	4a30      	ldr	r2, [pc, #192]	; (8001238 <HAL_ADC_MspInit+0x128>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <HAL_ADC_MspInit+0x128>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration    
    PF3     ------> ADC3_INP5
    PC0     ------> ADC3_INP10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800118c:	2308      	movs	r3, #8
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001190:	2303      	movs	r3, #3
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4827      	ldr	r0, [pc, #156]	; (800123c <HAL_ADC_MspInit+0x12c>)
 80011a0:	f005 ffc0 	bl	8007124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a4:	2301      	movs	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	4822      	ldr	r0, [pc, #136]	; (8001240 <HAL_ADC_MspInit+0x130>)
 80011b8:	f005 ffb4 	bl	8007124 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_ADC_MspInit+0x134>)
 80011be:	4a22      	ldr	r2, [pc, #136]	; (8001248 <HAL_ADC_MspInit+0x138>)
 80011c0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_ADC_MspInit+0x134>)
 80011c4:	2273      	movs	r2, #115	; 0x73
 80011c6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_ADC_MspInit+0x134>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_ADC_MspInit+0x134>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_ADC_MspInit+0x134>)
 80011d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011da:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_ADC_MspInit+0x134>)
 80011de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_ADC_MspInit+0x134>)
 80011e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ea:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_ADC_MspInit+0x134>)
 80011ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_ADC_MspInit+0x134>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_ADC_MspInit+0x134>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001200:	4810      	ldr	r0, [pc, #64]	; (8001244 <HAL_ADC_MspInit+0x134>)
 8001202:	f002 fa49 	bl	8003698 <HAL_DMA_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 800120c:	f7ff ff5e 	bl	80010cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <HAL_ADC_MspInit+0x134>)
 8001214:	64da      	str	r2, [r3, #76]	; 0x4c
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <HAL_ADC_MspInit+0x134>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	207f      	movs	r0, #127	; 0x7f
 8001222:	f002 fa04 	bl	800362e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001226:	207f      	movs	r0, #127	; 0x7f
 8001228:	f002 fa1b 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	58026000 	.word	0x58026000
 8001238:	58024400 	.word	0x58024400
 800123c:	58021400 	.word	0x58021400
 8001240:	58020800 	.word	0x58020800
 8001244:	24000ae0 	.word	0x24000ae0
 8001248:	40020010 	.word	0x40020010

0800124c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a59      	ldr	r2, [pc, #356]	; (80013d0 <HAL_ETH_MspInit+0x184>)
 800126a:	4293      	cmp	r3, r2
 800126c:	f040 80ab 	bne.w	80013c6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001270:	4b58      	ldr	r3, [pc, #352]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 8001272:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001276:	4a57      	ldr	r2, [pc, #348]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 8001278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001280:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 8001282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800128a:	623b      	str	r3, [r7, #32]
 800128c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800128e:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 8001290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001294:	4a4f      	ldr	r2, [pc, #316]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 8001296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800129e:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80012a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80012ac:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80012ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b2:	4a48      	ldr	r2, [pc, #288]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012bc:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80012be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d0:	4a40      	ldr	r2, [pc, #256]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012da:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	4a39      	ldr	r2, [pc, #228]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130c:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 800132c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <HAL_ETH_MspInit+0x188>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001342:	2332      	movs	r3, #50	; 0x32
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001352:	230b      	movs	r3, #11
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	481e      	ldr	r0, [pc, #120]	; (80013d8 <HAL_ETH_MspInit+0x18c>)
 800135e:	f005 fee1 	bl	8007124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001362:	2386      	movs	r3, #134	; 0x86
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001372:	230b      	movs	r3, #11
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	4817      	ldr	r0, [pc, #92]	; (80013dc <HAL_ETH_MspInit+0x190>)
 800137e:	f005 fed1 	bl	8007124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001394:	230b      	movs	r3, #11
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4810      	ldr	r0, [pc, #64]	; (80013e0 <HAL_ETH_MspInit+0x194>)
 80013a0:	f005 fec0 	bl	8007124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b6:	230b      	movs	r3, #11
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <HAL_ETH_MspInit+0x198>)
 80013c2:	f005 feaf 	bl	8007124 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	3738      	adds	r7, #56	; 0x38
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40028000 	.word	0x40028000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020800 	.word	0x58020800
 80013dc:	58020000 	.word	0x58020000
 80013e0:	58020400 	.word	0x58020400
 80013e4:	58021800 	.word	0x58021800

080013e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <HAL_FDCAN_MspInit+0x88>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d12d      	bne.n	8001466 <HAL_FDCAN_MspInit+0x7e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_FDCAN_MspInit+0x8c>)
 800140c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001410:	4a18      	ldr	r2, [pc, #96]	; (8001474 <HAL_FDCAN_MspInit+0x8c>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_FDCAN_MspInit+0x8c>)
 800141c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_FDCAN_MspInit+0x8c>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_FDCAN_MspInit+0x8c>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_FDCAN_MspInit+0x8c>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001446:	2303      	movs	r3, #3
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001456:	2309      	movs	r3, #9
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_FDCAN_MspInit+0x90>)
 8001462:	f005 fe5f 	bl	8007124 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	4000a000 	.word	0x4000a000
 8001474:	58024400 	.word	0x58024400
 8001478:	58020c00 	.word	0x58020c00

0800147c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <HAL_SD_MspInit+0xc8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d14d      	bne.n	800153a <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_SD_MspInit+0xcc>)
 80014a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014a4:	4a28      	ldr	r2, [pc, #160]	; (8001548 <HAL_SD_MspInit+0xcc>)
 80014a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014aa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_SD_MspInit+0xcc>)
 80014b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_SD_MspInit+0xcc>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c2:	4a21      	ldr	r2, [pc, #132]	; (8001548 <HAL_SD_MspInit+0xcc>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <HAL_SD_MspInit+0xcc>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_SD_MspInit+0xcc>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_SD_MspInit+0xcc>)
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_SD_MspInit+0xcc>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80014f8:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800150a:	230c      	movs	r3, #12
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <HAL_SD_MspInit+0xd0>)
 8001516:	f005 fe05 	bl	8007124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800151a:	2304      	movs	r3, #4
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800152a:	230c      	movs	r3, #12
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4806      	ldr	r0, [pc, #24]	; (8001550 <HAL_SD_MspInit+0xd4>)
 8001536:	f005 fdf5 	bl	8007124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	52007000 	.word	0x52007000
 8001548:	58024400 	.word	0x58024400
 800154c:	58020800 	.word	0x58020800
 8001550:	58020c00 	.word	0x58020c00

08001554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_TIM_Base_MspInit+0x3c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10e      	bne.n	8001584 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_TIM_Base_MspInit+0x40>)
 8001568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800156c:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_TIM_Base_MspInit+0x40>)
 800156e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001572:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_TIM_Base_MspInit+0x40>)
 8001578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800157c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40014800 	.word	0x40014800
 8001594:	58024400 	.word	0x58024400

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12e      	bne.n	8001618 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_UART_MspInit+0x8c>)
 80015bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015c0:	4a18      	ldr	r2, [pc, #96]	; (8001624 <HAL_UART_MspInit+0x8c>)
 80015c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_UART_MspInit+0x8c>)
 80015cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_UART_MspInit+0x8c>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015de:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_UART_MspInit+0x8c>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_UART_MspInit+0x8c>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001608:	2307      	movs	r3, #7
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <HAL_UART_MspInit+0x90>)
 8001614:	f005 fd86 	bl	8007124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40004800 	.word	0x40004800
 8001624:	58024400 	.word	0x58024400
 8001628:	58020c00 	.word	0x58020c00

0800162c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <HAL_PCD_MspInit+0xa4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d13b      	bne.n	80016c6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <HAL_PCD_MspInit+0xa8>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_PCD_MspInit+0xa8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_PCD_MspInit+0xa8>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800166c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800167e:	230a      	movs	r3, #10
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4813      	ldr	r0, [pc, #76]	; (80016d8 <HAL_PCD_MspInit+0xac>)
 800168a:	f005 fd4b 	bl	8007124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800168e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <HAL_PCD_MspInit+0xac>)
 80016a4:	f005 fd3e 	bl	8007124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_PCD_MspInit+0xa8>)
 80016aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_PCD_MspInit+0xa8>)
 80016b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_PCD_MspInit+0xa8>)
 80016ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40080000 	.word	0x40080000
 80016d4:	58024400 	.word	0x58024400
 80016d8:	58020000 	.word	0x58020000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 f928 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <DMA1_Stream0_IRQHandler+0x10>)
 800173e:	f002 fd71 	bl	8004224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	24000ae0 	.word	0x24000ae0

0800174c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <FDCAN1_IT0_IRQHandler+0x10>)
 8001752:	f005 f857 	bl	8006804 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	24002bf8 	.word	0x24002bf8

08001760 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <TIM17_IRQHandler+0x10>)
 8001766:	f00a fa98 	bl	800bc9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	24000a9c 	.word	0x24000a9c

08001774 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <ADC3_IRQHandler+0x10>)
 800177a:	f000 fdeb 	bl	8002354 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	24001b58 	.word	0x24001b58

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <SystemInit+0xac>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a28      	ldr	r2, [pc, #160]	; (8001834 <SystemInit+0xac>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <SystemInit+0xb0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a25      	ldr	r2, [pc, #148]	; (8001838 <SystemInit+0xb0>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017a8:	4b23      	ldr	r3, [pc, #140]	; (8001838 <SystemInit+0xb0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <SystemInit+0xb0>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4921      	ldr	r1, [pc, #132]	; (8001838 <SystemInit+0xb0>)
 80017b4:	4b21      	ldr	r3, [pc, #132]	; (800183c <SystemInit+0xb4>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <SystemInit+0xb0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <SystemInit+0xb0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <SystemInit+0xb0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <SystemInit+0xb0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <SystemInit+0xb0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <SystemInit+0xb0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <SystemInit+0xb0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <SystemInit+0xb0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <SystemInit+0xb0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <SystemInit+0xb0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <SystemInit+0xb0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <SystemInit+0xb0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <SystemInit+0xb0>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001806:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <SystemInit+0xb0>)
 800180a:	2200      	movs	r2, #0
 800180c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <SystemInit+0xb8>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <SystemInit+0xbc>)
 8001814:	4013      	ands	r3, r2
 8001816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800181a:	d202      	bcs.n	8001822 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <SystemInit+0xc0>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SystemInit+0xac>)
 8001824:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001828:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00
 8001838:	58024400 	.word	0x58024400
 800183c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001840:	5c001000 	.word	0x5c001000
 8001844:	ffff0000 	.word	0xffff0000
 8001848:	51008108 	.word	0x51008108

0800184c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800184c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001852:	e003      	b.n	800185c <LoopCopyDataInit>

08001854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800185a:	3104      	adds	r1, #4

0800185c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001864:	d3f6      	bcc.n	8001854 <CopyDataInit>
  ldr  r2, =_sbss
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001868:	e002      	b.n	8001870 <LoopFillZerobss>

0800186a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800186a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800186c:	f842 3b04 	str.w	r3, [r2], #4

08001870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001874:	d3f9      	bcc.n	800186a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001876:	f7ff ff87 	bl	8001788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187a:	f012 fd83 	bl	8014384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187e:	f7fe feab 	bl	80005d8 <main>
  bx  lr    
 8001882:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001884:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001888:	08014958 	.word	0x08014958
  ldr  r0, =_sdata
 800188c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001890:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001894:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8001898:	24024274 	.word	0x24024274

0800189c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC_IRQHandler>
	...

080018a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a6:	2003      	movs	r0, #3
 80018a8:	f001 feb6 	bl	8003618 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018ac:	f006 fd3c 	bl	8008328 <HAL_RCC_GetSysClockFreq>
 80018b0:	4601      	mov	r1, r0
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_Init+0x68>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	4a13      	ldr	r2, [pc, #76]	; (800190c <HAL_Init+0x6c>)
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	fa21 f303 	lsr.w	r3, r1, r3
 80018c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_Init+0x68>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_Init+0x6c>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
 80018e0:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <HAL_Init+0x70>)
 80018e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018e4:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <HAL_Init+0x74>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ea:	2000      	movs	r0, #0
 80018ec:	f000 f814 	bl	8001918 <HAL_InitTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e002      	b.n	8001900 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018fa:	f7ff fbef 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	58024400 	.word	0x58024400
 800190c:	080144cc 	.word	0x080144cc
 8001910:	24000004 	.word	0x24000004
 8001914:	24000000 	.word	0x24000000

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_InitTick+0x60>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e021      	b.n	8001970 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_InitTick+0x64>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_InitTick+0x60>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f001 fe9b 	bl	800367e <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f001 fe65 	bl	800362e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	; (8001980 <HAL_InitTick+0x68>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2400000c 	.word	0x2400000c
 800197c:	24000000 	.word	0x24000000
 8001980:	24000008 	.word	0x24000008

08001984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2400000c 	.word	0x2400000c
 80019a8:	240221d0 	.word	0x240221d0

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	240221d0 	.word	0x240221d0

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff ffee 	bl	80019ac <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_Delay+0x40>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ea:	bf00      	nop
 80019ec:	f7ff ffde 	bl	80019ac <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2400000c 	.word	0x2400000c

08001a08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetREVID+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0c1b      	lsrs	r3, r3, #16
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	5c001000 	.word	0x5c001000

08001a20 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a30:	4904      	ldr	r1, [pc, #16]	; (8001a44 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	58000400 	.word	0x58000400

08001a48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	609a      	str	r2, [r3, #8]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	609a      	str	r2, [r3, #8]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ab0:	b490      	push	{r4, r7}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3360      	adds	r3, #96	; 0x60
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	4313      	orrs	r3, r2
 8001ade:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc90      	pop	{r4, r7}
 8001ae8:	4770      	bx	lr

08001aea <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b1c:	b490      	push	{r4, r7}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3360      	adds	r3, #96	; 0x60
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	6023      	str	r3, [r4, #0]
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc90      	pop	{r4, r7}
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b72:	b490      	push	{r4, r7}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3330      	adds	r3, #48	; 0x30
 8001b82:	461a      	mov	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	4413      	add	r3, r2
 8001b90:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b92:	6822      	ldr	r2, [r4, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	211f      	movs	r1, #31
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	0e9b      	lsrs	r3, r3, #26
 8001ba8:	f003 011f 	and.w	r1, r3, #31
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc90      	pop	{r4, r7}
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f023 0203 	bic.w	r2, r3, #3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60da      	str	r2, [r3, #12]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c10:	b490      	push	{r4, r7}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3314      	adds	r3, #20
 8001c20:	461a      	mov	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	0e5b      	lsrs	r3, r3, #25
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c30:	6822      	ldr	r2, [r4, #0]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	0d1b      	lsrs	r3, r3, #20
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	2107      	movs	r1, #7
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	401a      	ands	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	0d1b      	lsrs	r3, r3, #20
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc90      	pop	{r4, r7}
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0318 	and.w	r3, r3, #24
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c84:	40d9      	lsrs	r1, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	400b      	ands	r3, r1
 8001c8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	000fffff 	.word	0x000fffff

08001ca8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6093      	str	r3, [r2, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	5fffffc0 	.word	0x5fffffc0

08001d04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d18:	d101      	bne.n	8001d1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	6fffffc0 	.word	0x6fffffc0

08001d54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d68:	d101      	bne.n	8001d6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <LL_ADC_Enable+0x24>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	7fffffc0 	.word	0x7fffffc0

08001da4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <LL_ADC_Disable+0x24>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	7fffffc0 	.word	0x7fffffc0

08001dcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <LL_ADC_IsEnabled+0x18>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <LL_ADC_IsEnabled+0x1a>
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d101      	bne.n	8001e0a <LL_ADC_IsDisableOngoing+0x18>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <LL_ADC_IsDisableOngoing+0x1a>
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <LL_ADC_REG_StartConversion+0x24>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	f043 0204 	orr.w	r2, r3, #4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	7fffffc0 	.word	0x7fffffc0

08001e40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d101      	bne.n	8001e58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d101      	bne.n	8001e7e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e18e      	b.n	80021c4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff f92b 	bl	8001110 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff19 	bl	8001d04 <LL_ADC_IsDeepPowerDownEnabled>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff feff 	bl	8001ce0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff34 	bl	8001d54 <LL_ADC_IsInternalRegulatorEnabled>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d113      	bne.n	8001f1a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff18 	bl	8001d2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001efc:	4b9a      	ldr	r3, [pc, #616]	; (8002168 <HAL_ADC_Init+0x2dc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	099b      	lsrs	r3, r3, #6
 8001f02:	4a9a      	ldr	r2, [pc, #616]	; (800216c <HAL_ADC_Init+0x2e0>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff18 	bl	8001d54 <LL_ADC_IsInternalRegulatorEnabled>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff78 	bl	8001e40 <LL_ADC_REG_IsConversionOngoing>
 8001f50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 8129 	bne.w	80021b2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 8125 	bne.w	80021b2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f70:	f043 0202 	orr.w	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff25 	bl	8001dcc <LL_ADC_IsEnabled>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d136      	bne.n	8001ff6 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a78      	ldr	r2, [pc, #480]	; (8002170 <HAL_ADC_Init+0x2e4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_ADC_Init+0x110>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a77      	ldr	r2, [pc, #476]	; (8002174 <HAL_ADC_Init+0x2e8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d10e      	bne.n	8001fba <HAL_ADC_Init+0x12e>
 8001f9c:	4874      	ldr	r0, [pc, #464]	; (8002170 <HAL_ADC_Init+0x2e4>)
 8001f9e:	f7ff ff15 	bl	8001dcc <LL_ADC_IsEnabled>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	4873      	ldr	r0, [pc, #460]	; (8002174 <HAL_ADC_Init+0x2e8>)
 8001fa6:	f7ff ff11 	bl	8001dcc <LL_ADC_IsEnabled>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4323      	orrs	r3, r4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2301      	moveq	r3, #1
 8001fb4:	2300      	movne	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	e008      	b.n	8001fcc <HAL_ADC_Init+0x140>
 8001fba:	486f      	ldr	r0, [pc, #444]	; (8002178 <HAL_ADC_Init+0x2ec>)
 8001fbc:	f7ff ff06 	bl	8001dcc <LL_ADC_IsEnabled>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf0c      	ite	eq
 8001fc6:	2301      	moveq	r3, #1
 8001fc8:	2300      	movne	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d012      	beq.n	8001ff6 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a66      	ldr	r2, [pc, #408]	; (8002170 <HAL_ADC_Init+0x2e4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_Init+0x158>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a65      	ldr	r2, [pc, #404]	; (8002174 <HAL_ADC_Init+0x2e8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_Init+0x15c>
 8001fe4:	4a65      	ldr	r2, [pc, #404]	; (800217c <HAL_ADC_Init+0x2f0>)
 8001fe6:	e000      	b.n	8001fea <HAL_ADC_Init+0x15e>
 8001fe8:	4a65      	ldr	r2, [pc, #404]	; (8002180 <HAL_ADC_Init+0x2f4>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f7ff fd29 	bl	8001a48 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001ff6:	f7ff fd07 	bl	8001a08 <HAL_GetREVID>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002000:	429a      	cmp	r2, r3
 8002002:	d914      	bls.n	800202e <HAL_ADC_Init+0x1a2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b10      	cmp	r3, #16
 800200a:	d110      	bne.n	800202e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7d5b      	ldrb	r3, [r3, #21]
 8002010:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002016:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800201c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7f1b      	ldrb	r3, [r3, #28]
 8002022:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002024:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002026:	f043 030c 	orr.w	r3, r3, #12
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	e00d      	b.n	800204a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7d5b      	ldrb	r3, [r3, #21]
 8002032:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002038:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800203e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7f1b      	ldrb	r3, [r3, #28]
 8002044:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7f1b      	ldrb	r3, [r3, #28]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d106      	bne.n	8002060 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	3b01      	subs	r3, #1
 8002058:	045b      	lsls	r3, r3, #17
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	4b40      	ldr	r3, [pc, #256]	; (8002184 <HAL_ADC_Init+0x2f8>)
 8002084:	4013      	ands	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	69b9      	ldr	r1, [r7, #24]
 800208c:	430b      	orrs	r3, r1
 800208e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fed3 	bl	8001e40 <LL_ADC_REG_IsConversionOngoing>
 800209a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fee0 	bl	8001e66 <LL_ADC_INJ_IsConversionOngoing>
 80020a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d14a      	bne.n	8002144 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d147      	bne.n	8002144 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7d1b      	ldrb	r3, [r3, #20]
 80020b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <HAL_ADC_Init+0x2fc>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	69b9      	ldr	r1, [r7, #24]
 80020d2:	430b      	orrs	r3, r1
 80020d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d11b      	bne.n	8002118 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_ADC_Init+0x300>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020f4:	3a01      	subs	r2, #1
 80020f6:	0411      	lsls	r1, r2, #16
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020fc:	4311      	orrs	r1, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002102:	4311      	orrs	r1, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002108:	430a      	orrs	r2, r1
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	e007      	b.n	8002128 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 ffda 	bl	80030f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d121      	bne.n	8002190 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f023 010f 	bic.w	r1, r3, #15
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	1e5a      	subs	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
 8002164:	e01c      	b.n	80021a0 <HAL_ADC_Init+0x314>
 8002166:	bf00      	nop
 8002168:	24000000 	.word	0x24000000
 800216c:	053e2d63 	.word	0x053e2d63
 8002170:	40022000 	.word	0x40022000
 8002174:	40022100 	.word	0x40022100
 8002178:	58026000 	.word	0x58026000
 800217c:	40022300 	.word	0x40022300
 8002180:	58026300 	.word	0x58026300
 8002184:	fff0c003 	.word	0xfff0c003
 8002188:	ffffbffc 	.word	0xffffbffc
 800218c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 020f 	bic.w	r2, r2, #15
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	f023 0303 	bic.w	r3, r3, #3
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
 80021b0:	e007      	b.n	80021c2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	f043 0210 	orr.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3724      	adds	r7, #36	; 0x24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}

080021cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a55      	ldr	r2, [pc, #340]	; (8002334 <HAL_ADC_Start_DMA+0x168>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d004      	beq.n	80021ec <HAL_ADC_Start_DMA+0x20>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a54      	ldr	r2, [pc, #336]	; (8002338 <HAL_ADC_Start_DMA+0x16c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_Start_DMA+0x24>
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_ADC_Start_DMA+0x170>)
 80021ee:	e000      	b.n	80021f2 <HAL_ADC_Start_DMA+0x26>
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_ADC_Start_DMA+0x174>)
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fd58 	bl	8001ca8 <LL_ADC_GetMultimode>
 80021f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fe1e 	bl	8001e40 <LL_ADC_REG_IsConversionOngoing>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 808c 	bne.w	8002324 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_ADC_Start_DMA+0x4e>
 8002216:	2302      	movs	r3, #2
 8002218:	e087      	b.n	800232a <HAL_ADC_Start_DMA+0x15e>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b05      	cmp	r3, #5
 800222c:	d002      	beq.n	8002234 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b09      	cmp	r3, #9
 8002232:	d170      	bne.n	8002316 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fdef 	bl	8002e18 <ADC_Enable>
 800223a:	4603      	mov	r3, r0
 800223c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800223e:	7dfb      	ldrb	r3, [r7, #23]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d163      	bne.n	800230c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002248:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <HAL_ADC_Start_DMA+0x178>)
 800224a:	4013      	ands	r3, r2
 800224c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a37      	ldr	r2, [pc, #220]	; (8002338 <HAL_ADC_Start_DMA+0x16c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d002      	beq.n	8002264 <HAL_ADC_Start_DMA+0x98>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e000      	b.n	8002266 <HAL_ADC_Start_DMA+0x9a>
 8002264:	4b33      	ldr	r3, [pc, #204]	; (8002334 <HAL_ADC_Start_DMA+0x168>)
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	4293      	cmp	r3, r2
 800226c:	d002      	beq.n	8002274 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	f023 0206 	bic.w	r2, r3, #6
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	659a      	str	r2, [r3, #88]	; 0x58
 8002298:	e002      	b.n	80022a0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a4:	4a28      	ldr	r2, [pc, #160]	; (8002348 <HAL_ADC_Start_DMA+0x17c>)
 80022a6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	4a27      	ldr	r2, [pc, #156]	; (800234c <HAL_ADC_Start_DMA+0x180>)
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b4:	4a26      	ldr	r2, [pc, #152]	; (8002350 <HAL_ADC_Start_DMA+0x184>)
 80022b6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	221c      	movs	r2, #28
 80022be:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0210 	orr.w	r2, r2, #16
 80022d6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f7ff fc6e 	bl	8001bc4 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3340      	adds	r3, #64	; 0x40
 80022f2:	4619      	mov	r1, r3
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f001 fd2a 	bl	8003d50 <HAL_DMA_Start_IT>
 80022fc:	4603      	mov	r3, r0
 80022fe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fd87 	bl	8001e18 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800230a:	e00d      	b.n	8002328 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002314:	e008      	b.n	8002328 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002322:	e001      	b.n	8002328 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002324:	2302      	movs	r3, #2
 8002326:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000
 8002338:	40022100 	.word	0x40022100
 800233c:	40022300 	.word	0x40022300
 8002340:	58026300 	.word	0x58026300
 8002344:	fffff0fe 	.word	0xfffff0fe
 8002348:	08002fd1 	.word	0x08002fd1
 800234c:	080030a9 	.word	0x080030a9
 8002350:	080030c5 	.word	0x080030c5

08002354 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a87      	ldr	r2, [pc, #540]	; (8002594 <HAL_ADC_IRQHandler+0x240>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d004      	beq.n	8002384 <HAL_ADC_IRQHandler+0x30>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a86      	ldr	r2, [pc, #536]	; (8002598 <HAL_ADC_IRQHandler+0x244>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_ADC_IRQHandler+0x34>
 8002384:	4b85      	ldr	r3, [pc, #532]	; (800259c <HAL_ADC_IRQHandler+0x248>)
 8002386:	e000      	b.n	800238a <HAL_ADC_IRQHandler+0x36>
 8002388:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <HAL_ADC_IRQHandler+0x24c>)
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fc8c 	bl	8001ca8 <LL_ADC_GetMultimode>
 8002390:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d017      	beq.n	80023cc <HAL_ADC_IRQHandler+0x78>
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d012      	beq.n	80023cc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f001 f850 	bl	8003464 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2202      	movs	r2, #2
 80023ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_ADC_IRQHandler+0x8c>
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8083 	beq.w	80024f2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d07d      	beq.n	80024f2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d105      	bne.n	800240e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fb9a 	bl	8001b4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d062      	beq.n	80024e4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a5d      	ldr	r2, [pc, #372]	; (8002598 <HAL_ADC_IRQHandler+0x244>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d002      	beq.n	800242e <HAL_ADC_IRQHandler+0xda>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e000      	b.n	8002430 <HAL_ADC_IRQHandler+0xdc>
 800242e:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_ADC_IRQHandler+0x240>)
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	4293      	cmp	r3, r2
 8002436:	d008      	beq.n	800244a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b05      	cmp	r3, #5
 8002442:	d002      	beq.n	800244a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b09      	cmp	r3, #9
 8002448:	d104      	bne.n	8002454 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	e00c      	b.n	800246e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a4f      	ldr	r2, [pc, #316]	; (8002598 <HAL_ADC_IRQHandler+0x244>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d002      	beq.n	8002464 <HAL_ADC_IRQHandler+0x110>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	e000      	b.n	8002466 <HAL_ADC_IRQHandler+0x112>
 8002464:	4b4b      	ldr	r3, [pc, #300]	; (8002594 <HAL_ADC_IRQHandler+0x240>)
 8002466:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d135      	bne.n	80024e4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b08      	cmp	r3, #8
 8002484:	d12e      	bne.n	80024e4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fcd8 	bl	8001e40 <LL_ADC_REG_IsConversionOngoing>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11a      	bne.n	80024cc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 020c 	bic.w	r2, r2, #12
 80024a4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d112      	bne.n	80024e4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
 80024ca:	e00b      	b.n	80024e4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f043 0210 	orr.w	r2, r3, #16
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7fe fdd9 	bl	800109c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	220c      	movs	r2, #12
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d004      	beq.n	8002506 <HAL_ADC_IRQHandler+0x1b2>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a0 	beq.w	8002652 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 809a 	beq.w	8002652 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fb55 	bl	8001bea <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002540:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fb00 	bl	8001b4c <LL_ADC_REG_IsTriggerSourceSWStart>
 800254c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_ADC_IRQHandler+0x244>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d002      	beq.n	800255e <HAL_ADC_IRQHandler+0x20a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	e000      	b.n	8002560 <HAL_ADC_IRQHandler+0x20c>
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_ADC_IRQHandler+0x240>)
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4293      	cmp	r3, r2
 8002566:	d008      	beq.n	800257a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b06      	cmp	r3, #6
 8002572:	d002      	beq.n	800257a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b07      	cmp	r3, #7
 8002578:	d104      	bne.n	8002584 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	e014      	b.n	80025ae <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a03      	ldr	r2, [pc, #12]	; (8002598 <HAL_ADC_IRQHandler+0x244>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00a      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x250>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e008      	b.n	80025a6 <HAL_ADC_IRQHandler+0x252>
 8002594:	40022000 	.word	0x40022000
 8002598:	40022100 	.word	0x40022100
 800259c:	40022300 	.word	0x40022300
 80025a0:	58026300 	.word	0x58026300
 80025a4:	4b84      	ldr	r3, [pc, #528]	; (80027b8 <HAL_ADC_IRQHandler+0x464>)
 80025a6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10c      	bne.n	80025ce <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d142      	bne.n	8002644 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03f      	beq.n	8002644 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d13a      	bne.n	8002644 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d133      	bne.n	8002644 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d12e      	bne.n	8002644 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fc3b 	bl	8001e66 <LL_ADC_INJ_IsConversionOngoing>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11a      	bne.n	800262c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002604:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d112      	bne.n	8002644 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
 800262a:	e00b      	b.n	8002644 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	f043 0210 	orr.w	r2, r3, #16
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fee5 	bl	8003414 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2260      	movs	r2, #96	; 0x60
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b00      	cmp	r3, #0
 800265a:	d011      	beq.n	8002680 <HAL_ADC_IRQHandler+0x32c>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8a8 	bl	80027c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d012      	beq.n	80026b0 <HAL_ADC_IRQHandler+0x35c>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00d      	beq.n	80026b0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fecb 	bl	800343c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d012      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x38c>
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 febd 	bl	8003450 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d043      	beq.n	8002772 <HAL_ADC_IRQHandler+0x41e>
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03e      	beq.n	8002772 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80026fc:	2301      	movs	r3, #1
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002700:	e021      	b.n	8002746 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d015      	beq.n	8002734 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <HAL_ADC_IRQHandler+0x464>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_ADC_IRQHandler+0x3c8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a29      	ldr	r2, [pc, #164]	; (80027bc <HAL_ADC_IRQHandler+0x468>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_ADC_IRQHandler+0x3cc>
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_ADC_IRQHandler+0x46c>)
 800271e:	e000      	b.n	8002722 <HAL_ADC_IRQHandler+0x3ce>
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <HAL_ADC_IRQHandler+0x470>)
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff face 	bl	8001cc4 <LL_ADC_GetMultiDMATransfer>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800272e:	2301      	movs	r3, #1
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	e008      	b.n	8002746 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_ADC_IRQHandler+0x3f2>
      {
        overrun_error = 1UL;
 8002742:	2301      	movs	r3, #1
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
      }
      }
    }

    if (overrun_error == 1UL)
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	2b01      	cmp	r3, #1
 800274a:	d10e      	bne.n	800276a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	f043 0202 	orr.w	r2, r3, #2
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f839 	bl	80027dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2210      	movs	r2, #16
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d018      	beq.n	80027ae <HAL_ADC_IRQHandler+0x45a>
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002782:	2b00      	cmp	r3, #0
 8002784:	d013      	beq.n	80027ae <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	f043 0208 	orr.w	r2, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fe3d 	bl	8003428 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027ae:	bf00      	nop
 80027b0:	3728      	adds	r7, #40	; 0x28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40022100 	.word	0x40022100
 80027c0:	40022300 	.word	0x40022300
 80027c4:	58026300 	.word	0x58026300

080027c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b099      	sub	sp, #100	; 0x64
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a99      	ldr	r2, [pc, #612]	; (8002a70 <HAL_ADC_ConfigChannel+0x280>)
 800280a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x2a>
 8002816:	2302      	movs	r3, #2
 8002818:	e2e6      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x5f8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fb0a 	bl	8001e40 <LL_ADC_REG_IsConversionOngoing>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 82cb 	bne.w	8002dca <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800283c:	2b00      	cmp	r3, #0
 800283e:	d108      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x62>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2201      	movs	r2, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	e00f      	b.n	8002872 <HAL_ADC_ConfigChannel+0x82>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	2201      	movs	r2, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	69d1      	ldr	r1, [r2, #28]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	f7ff f970 	bl	8001b72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fad2 	bl	8001e40 <LL_ADC_REG_IsConversionOngoing>
 800289c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fadf 	bl	8001e66 <LL_ADC_INJ_IsConversionOngoing>
 80028a8:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 80b3 	bne.w	8002a18 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 80af 	bne.w	8002a18 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6819      	ldr	r1, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f7ff f9a2 	bl	8001c10 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028cc:	4b69      	ldr	r3, [pc, #420]	; (8002a74 <HAL_ADC_ConfigChannel+0x284>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80028d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028d8:	d10b      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x102>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	e01d      	b.n	800292e <HAL_ADC_ConfigChannel+0x13e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10b      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x128>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	e00a      	b.n	800292e <HAL_ADC_ConfigChannel+0x13e>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d027      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6919      	ldr	r1, [r3, #16]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002946:	f7ff f8b3 	bl	8001ab0 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6919      	ldr	r1, [r3, #16]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	7e5b      	ldrb	r3, [r3, #25]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d102      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x170>
 800295a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800295e:	e000      	b.n	8002962 <HAL_ADC_ConfigChannel+0x172>
 8002960:	2300      	movs	r3, #0
 8002962:	461a      	mov	r2, r3
 8002964:	f7ff f8da 	bl	8001b1c <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6919      	ldr	r1, [r3, #16]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	7e1b      	ldrb	r3, [r3, #24]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d102      	bne.n	800297e <HAL_ADC_ConfigChannel+0x18e>
 8002978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800297c:	e000      	b.n	8002980 <HAL_ADC_ConfigChannel+0x190>
 800297e:	2300      	movs	r3, #0
 8002980:	461a      	mov	r2, r3
 8002982:	f7ff f8b2 	bl	8001aea <LL_ADC_SetDataRightShift>
 8002986:	e047      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	069b      	lsls	r3, r3, #26
 8002998:	429a      	cmp	r2, r3
 800299a:	d107      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029aa:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	069b      	lsls	r3, r3, #26
 80029bc:	429a      	cmp	r2, r3
 80029be:	d107      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029ce:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	069b      	lsls	r3, r3, #26
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d107      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029f2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	069b      	lsls	r3, r3, #26
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d107      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a16:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff f9d5 	bl	8001dcc <LL_ADC_IsEnabled>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f040 81d9 	bne.w	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f7ff f912 	bl	8001c60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <HAL_ADC_ConfigChannel+0x280>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	f040 8101 	bne.w	8002c4a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10f      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x288>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2b09      	cmp	r3, #9
 8002a66:	bf94      	ite	ls
 8002a68:	2301      	movls	r3, #1
 8002a6a:	2300      	movhi	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e016      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x2ae>
 8002a70:	47ff0000 	.word	0x47ff0000
 8002a74:	5c001000 	.word	0x5c001000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2b09      	cmp	r3, #9
 8002a96:	bf94      	ite	ls
 8002a98:	2301      	movls	r3, #1
 8002a9a:	2300      	movhi	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d064      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d107      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x2ce>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	069b      	lsls	r3, r3, #26
 8002ab8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002abc:	e00e      	b.n	8002adc <HAL_ADC_ConfigChannel+0x2ec>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	069b      	lsls	r3, r3, #26
 8002ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x30c>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	e010      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x32e>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	ea42 0103 	orr.w	r1, r2, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10a      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x354>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0e9b      	lsrs	r3, r3, #26
 8002b34:	3301      	adds	r3, #1
 8002b36:	f003 021f 	and.w	r2, r3, #31
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	051b      	lsls	r3, r3, #20
 8002b42:	e011      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x378>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	e069      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	069b      	lsls	r3, r3, #26
 8002b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b86:	e00e      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x3b6>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	61fb      	str	r3, [r7, #28]
  return result;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	069b      	lsls	r3, r3, #26
 8002ba2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x3d6>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0e9b      	lsrs	r3, r3, #26
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	e010      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x3f8>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	617b      	str	r3, [r7, #20]
  return result;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	ea42 0103 	orr.w	r1, r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10d      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x424>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0e9b      	lsrs	r3, r3, #26
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	3b1e      	subs	r3, #30
 8002c0c:	051b      	lsls	r3, r3, #20
 8002c0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c12:	e014      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x44e>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	60fb      	str	r3, [r7, #12]
  return result;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	3b1e      	subs	r3, #30
 8002c38:	051b      	lsls	r3, r3, #20
 8002c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	6892      	ldr	r2, [r2, #8]
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7fe ffe3 	bl	8001c10 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f280 80c4 	bge.w	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_ADC_ConfigChannel+0x600>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0x478>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a64      	ldr	r2, [pc, #400]	; (8002df4 <HAL_ADC_ConfigChannel+0x604>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x47c>
 8002c68:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_ADC_ConfigChannel+0x608>)
 8002c6a:	e000      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x47e>
 8002c6c:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_ADC_ConfigChannel+0x60c>)
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe ff10 	bl	8001a94 <LL_ADC_GetCommonPathInternalCh>
 8002c74:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a5d      	ldr	r2, [pc, #372]	; (8002df0 <HAL_ADC_ConfigChannel+0x600>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_ADC_ConfigChannel+0x49a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a5b      	ldr	r2, [pc, #364]	; (8002df4 <HAL_ADC_ConfigChannel+0x604>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10e      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x4b8>
 8002c8a:	4859      	ldr	r0, [pc, #356]	; (8002df0 <HAL_ADC_ConfigChannel+0x600>)
 8002c8c:	f7ff f89e 	bl	8001dcc <LL_ADC_IsEnabled>
 8002c90:	4604      	mov	r4, r0
 8002c92:	4858      	ldr	r0, [pc, #352]	; (8002df4 <HAL_ADC_ConfigChannel+0x604>)
 8002c94:	f7ff f89a 	bl	8001dcc <LL_ADC_IsEnabled>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4323      	orrs	r3, r4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e008      	b.n	8002cba <HAL_ADC_ConfigChannel+0x4ca>
 8002ca8:	4855      	ldr	r0, [pc, #340]	; (8002e00 <HAL_ADC_ConfigChannel+0x610>)
 8002caa:	f7ff f88f 	bl	8001dcc <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d07b      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a50      	ldr	r2, [pc, #320]	; (8002e04 <HAL_ADC_ConfigChannel+0x614>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d12e      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x536>
 8002cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d129      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_ADC_ConfigChannel+0x610>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d17f      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <HAL_ADC_ConfigChannel+0x600>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_ADC_ConfigChannel+0x500>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a42      	ldr	r2, [pc, #264]	; (8002df4 <HAL_ADC_ConfigChannel+0x604>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x504>
 8002cf0:	4a41      	ldr	r2, [pc, #260]	; (8002df8 <HAL_ADC_ConfigChannel+0x608>)
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x506>
 8002cf4:	4a41      	ldr	r2, [pc, #260]	; (8002dfc <HAL_ADC_ConfigChannel+0x60c>)
 8002cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7fe feb5 	bl	8001a6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d04:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <HAL_ADC_ConfigChannel+0x618>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	4a40      	ldr	r2, [pc, #256]	; (8002e0c <HAL_ADC_ConfigChannel+0x61c>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002d16:	e002      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f9      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d24:	e05a      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a39      	ldr	r2, [pc, #228]	; (8002e10 <HAL_ADC_ConfigChannel+0x620>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d11e      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x57e>
 8002d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d119      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a30      	ldr	r2, [pc, #192]	; (8002e00 <HAL_ADC_ConfigChannel+0x610>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d14b      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <HAL_ADC_ConfigChannel+0x600>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0x568>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a28      	ldr	r2, [pc, #160]	; (8002df4 <HAL_ADC_ConfigChannel+0x604>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x56c>
 8002d58:	4a27      	ldr	r2, [pc, #156]	; (8002df8 <HAL_ADC_ConfigChannel+0x608>)
 8002d5a:	e000      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x56e>
 8002d5c:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <HAL_ADC_ConfigChannel+0x60c>)
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f7fe fe81 	bl	8001a6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d6c:	e036      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a28      	ldr	r2, [pc, #160]	; (8002e14 <HAL_ADC_ConfigChannel+0x624>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d131      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
 8002d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d12c      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_ADC_ConfigChannel+0x610>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d127      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_ADC_ConfigChannel+0x600>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_ADC_ConfigChannel+0x5b0>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <HAL_ADC_ConfigChannel+0x604>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x5b4>
 8002da0:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <HAL_ADC_ConfigChannel+0x608>)
 8002da2:	e000      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x5b6>
 8002da4:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <HAL_ADC_ConfigChannel+0x60c>)
 8002da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f7fe fe5d 	bl	8001a6e <LL_ADC_SetCommonPathInternalCh>
 8002db4:	e012      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	f043 0220 	orr.w	r2, r3, #32
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002dc8:	e008      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002de4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3764      	adds	r7, #100	; 0x64
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd90      	pop	{r4, r7, pc}
 8002df0:	40022000 	.word	0x40022000
 8002df4:	40022100 	.word	0x40022100
 8002df8:	40022300 	.word	0x40022300
 8002dfc:	58026300 	.word	0x58026300
 8002e00:	58026000 	.word	0x58026000
 8002e04:	cb840000 	.word	0xcb840000
 8002e08:	24000000 	.word	0x24000000
 8002e0c:	053e2d63 	.word	0x053e2d63
 8002e10:	c7520000 	.word	0xc7520000
 8002e14:	cfb80000 	.word	0xcfb80000

08002e18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe ffd1 	bl	8001dcc <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d167      	bne.n	8002f00 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <ADC_Enable+0xf4>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	f043 0210 	orr.w	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e053      	b.n	8002f02 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe ff8c 	bl	8001d7c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e64:	f7fe fda2 	bl	80019ac <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a28      	ldr	r2, [pc, #160]	; (8002f10 <ADC_Enable+0xf8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <ADC_Enable+0x66>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <ADC_Enable+0xfc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <ADC_Enable+0x6a>
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <ADC_Enable+0x100>)
 8002e80:	e000      	b.n	8002e84 <ADC_Enable+0x6c>
 8002e82:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <ADC_Enable+0x104>)
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe ff0f 	bl	8001ca8 <LL_ADC_GetMultimode>
 8002e8a:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <ADC_Enable+0xfc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d002      	beq.n	8002e9c <ADC_Enable+0x84>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	e000      	b.n	8002e9e <ADC_Enable+0x86>
 8002e9c:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <ADC_Enable+0xf8>)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d025      	beq.n	8002ef2 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d129      	bne.n	8002f00 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eac:	e021      	b.n	8002ef2 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe ff8a 	bl	8001dcc <LL_ADC_IsEnabled>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d104      	bne.n	8002ec8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe ff5a 	bl	8001d7c <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ec8:	f7fe fd70 	bl	80019ac <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d90d      	bls.n	8002ef2 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e007      	b.n	8002f02 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d1d6      	bne.n	8002eae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	8000003f 	.word	0x8000003f
 8002f10:	40022000 	.word	0x40022000
 8002f14:	40022100 	.word	0x40022100
 8002f18:	40022300 	.word	0x40022300
 8002f1c:	58026300 	.word	0x58026300

08002f20 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe ff60 	bl	8001df2 <LL_ADC_IsDisableOngoing>
 8002f32:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe ff47 	bl	8001dcc <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d040      	beq.n	8002fc6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d13d      	bne.n	8002fc6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 030d 	and.w	r3, r3, #13
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10c      	bne.n	8002f72 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe ff21 	bl	8001da4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2203      	movs	r2, #3
 8002f68:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f6a:	f7fe fd1f 	bl	80019ac <HAL_GetTick>
 8002f6e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f70:	e022      	b.n	8002fb8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f043 0210 	orr.w	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e01c      	b.n	8002fc8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f8e:	f7fe fd0d 	bl	80019ac <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d90d      	bls.n	8002fb8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	f043 0210 	orr.w	r2, r3, #16
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	f043 0201 	orr.w	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e007      	b.n	8002fc8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e3      	bne.n	8002f8e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d14b      	bne.n	8003082 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d021      	beq.n	8003048 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fd9f 	bl	8001b4c <LL_ADC_REG_IsTriggerSourceSWStart>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d032      	beq.n	800307a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d12b      	bne.n	800307a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11f      	bne.n	800307a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	f043 0201 	orr.w	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
 8003046:	e018      	b.n	800307a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d111      	bne.n	800307a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7fe f80e 	bl	800109c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003080:	e00e      	b.n	80030a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff fba4 	bl	80027dc <HAL_ADC_ErrorCallback>
}
 8003094:	e004      	b.n	80030a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7fd ffd8 	bl	800106c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	f043 0204 	orr.w	r2, r3, #4
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff fb76 	bl	80027dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a70      	ldr	r2, [pc, #448]	; (80032c8 <ADC_ConfigureBoostMode+0x1d0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <ADC_ConfigureBoostMode+0x1c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6f      	ldr	r2, [pc, #444]	; (80032cc <ADC_ConfigureBoostMode+0x1d4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d109      	bne.n	8003128 <ADC_ConfigureBoostMode+0x30>
 8003114:	4b6e      	ldr	r3, [pc, #440]	; (80032d0 <ADC_ConfigureBoostMode+0x1d8>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e008      	b.n	800313a <ADC_ConfigureBoostMode+0x42>
 8003128:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <ADC_ConfigureBoostMode+0x1dc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01a      	beq.n	8003174 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800313e:	f005 fa65 	bl	800860c <HAL_RCC_GetHCLKFreq>
 8003142:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800314c:	d006      	beq.n	800315c <ADC_ConfigureBoostMode+0x64>
 800314e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003152:	d00b      	beq.n	800316c <ADC_ConfigureBoostMode+0x74>
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003158:	d000      	beq.n	800315c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800315a:	e05d      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	60fb      	str	r3, [r7, #12]
        break;
 800316a:	e055      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	60fb      	str	r3, [r7, #12]
        break;
 8003172:	e051      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003174:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003178:	f006 f982 	bl	8009480 <HAL_RCCEx_GetPeriphCLKFreq>
 800317c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003186:	d02a      	beq.n	80031de <ADC_ConfigureBoostMode+0xe6>
 8003188:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800318c:	d813      	bhi.n	80031b6 <ADC_ConfigureBoostMode+0xbe>
 800318e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003192:	d024      	beq.n	80031de <ADC_ConfigureBoostMode+0xe6>
 8003194:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003198:	d806      	bhi.n	80031a8 <ADC_ConfigureBoostMode+0xb0>
 800319a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800319e:	d01e      	beq.n	80031de <ADC_ConfigureBoostMode+0xe6>
 80031a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031a4:	d01b      	beq.n	80031de <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80031a6:	e037      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80031a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ac:	d017      	beq.n	80031de <ADC_ConfigureBoostMode+0xe6>
 80031ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031b2:	d014      	beq.n	80031de <ADC_ConfigureBoostMode+0xe6>
        break;
 80031b4:	e030      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80031b6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031ba:	d021      	beq.n	8003200 <ADC_ConfigureBoostMode+0x108>
 80031bc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031c0:	d806      	bhi.n	80031d0 <ADC_ConfigureBoostMode+0xd8>
 80031c2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031c6:	d013      	beq.n	80031f0 <ADC_ConfigureBoostMode+0xf8>
 80031c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031cc:	d014      	beq.n	80031f8 <ADC_ConfigureBoostMode+0x100>
        break;
 80031ce:	e023      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80031d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031d4:	d018      	beq.n	8003208 <ADC_ConfigureBoostMode+0x110>
 80031d6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031da:	d019      	beq.n	8003210 <ADC_ConfigureBoostMode+0x118>
        break;
 80031dc:	e01c      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	0c9b      	lsrs	r3, r3, #18
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	60fb      	str	r3, [r7, #12]
        break;
 80031ee:	e013      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
      break;
 80031f6:	e00f      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	60fb      	str	r3, [r7, #12]
        break;
 80031fe:	e00b      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	099b      	lsrs	r3, r3, #6
 8003204:	60fb      	str	r3, [r7, #12]
        break;
 8003206:	e007      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	09db      	lsrs	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
        break;
 800320e:	e003      	b.n	8003218 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	60fb      	str	r3, [r7, #12]
        break;
 8003216:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003218:	f7fe fbf6 	bl	8001a08 <HAL_GetREVID>
 800321c:	4602      	mov	r2, r0
 800321e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003222:	429a      	cmp	r2, r3
 8003224:	d815      	bhi.n	8003252 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a2b      	ldr	r2, [pc, #172]	; (80032d8 <ADC_ConfigureBoostMode+0x1e0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d908      	bls.n	8003240 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800323c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800323e:	e03e      	b.n	80032be <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	e035      	b.n	80032be <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a20      	ldr	r2, [pc, #128]	; (80032dc <ADC_ConfigureBoostMode+0x1e4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d808      	bhi.n	8003272 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	e025      	b.n	80032be <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <ADC_ConfigureBoostMode+0x1e8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d80a      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328c:	609a      	str	r2, [r3, #8]
}
 800328e:	e016      	b.n	80032be <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <ADC_ConfigureBoostMode+0x1ec>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d80a      	bhi.n	80032ae <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	e007      	b.n	80032be <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032bc:	609a      	str	r2, [r3, #8]
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40022100 	.word	0x40022100
 80032d0:	40022300 	.word	0x40022300
 80032d4:	58026300 	.word	0x58026300
 80032d8:	01312d00 	.word	0x01312d00
 80032dc:	005f5e10 	.word	0x005f5e10
 80032e0:	00bebc20 	.word	0x00bebc20
 80032e4:	017d7840 	.word	0x017d7840

080032e8 <LL_ADC_StartCalibration>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <LL_ADC_StartCalibration+0x38>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003308:	430a      	orrs	r2, r1
 800330a:	4313      	orrs	r3, r2
 800330c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	3ffeffc0 	.word	0x3ffeffc0

08003324 <LL_ADC_IsCalibrationOnGoing>:
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003338:	d101      	bne.n	800333e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_ADCEx_Calibration_Start+0x1e>
 8003366:	2302      	movs	r3, #2
 8003368:	e04c      	b.n	8003404 <HAL_ADCEx_Calibration_Start+0xb8>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff fdd4 	bl	8002f20 <ADC_Disable>
 8003378:	4603      	mov	r3, r0
 800337a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d135      	bne.n	80033ee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003386:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003388:	4013      	ands	r3, r2
 800338a:	f043 0202 	orr.w	r2, r3, #2
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ffa4 	bl	80032e8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033a0:	e014      	b.n	80033cc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	3301      	adds	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4a19      	ldr	r2, [pc, #100]	; (8003410 <HAL_ADCEx_Calibration_Start+0xc4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d90d      	bls.n	80033cc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	f023 0312 	bic.w	r3, r3, #18
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e01b      	b.n	8003404 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffa7 	bl	8003324 <LL_ADC_IsCalibrationOnGoing>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e2      	bne.n	80033a2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	f023 0303 	bic.w	r3, r3, #3
 80033e4:	f043 0201 	orr.w	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	655a      	str	r2, [r3, #84]	; 0x54
 80033ec:	e005      	b.n	80033fa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f043 0210 	orr.w	r2, r3, #16
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	ffffeefd 	.word	0xffffeefd
 8003410:	25c3f7ff 	.word	0x25c3f7ff

08003414 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <__NVIC_SetPriorityGrouping+0x40>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003494:	4013      	ands	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a6:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <__NVIC_SetPriorityGrouping+0x40>)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60d3      	str	r3, [r2, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00
 80034bc:	05fa0000 	.word	0x05fa0000

080034c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <__NVIC_GetPriorityGrouping+0x18>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	f003 0307 	and.w	r3, r3, #7
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	db0b      	blt.n	8003506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	f003 021f 	and.w	r2, r3, #31
 80034f4:	4907      	ldr	r1, [pc, #28]	; (8003514 <__NVIC_EnableIRQ+0x38>)
 80034f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2001      	movs	r0, #1
 80034fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	e000e100 	.word	0xe000e100

08003518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	6039      	str	r1, [r7, #0]
 8003522:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003528:	2b00      	cmp	r3, #0
 800352a:	db0a      	blt.n	8003542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	b2da      	uxtb	r2, r3
 8003530:	490c      	ldr	r1, [pc, #48]	; (8003564 <__NVIC_SetPriority+0x4c>)
 8003532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003536:	0112      	lsls	r2, r2, #4
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	440b      	add	r3, r1
 800353c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003540:	e00a      	b.n	8003558 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4908      	ldr	r1, [pc, #32]	; (8003568 <__NVIC_SetPriority+0x50>)
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	3b04      	subs	r3, #4
 8003550:	0112      	lsls	r2, r2, #4
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	440b      	add	r3, r1
 8003556:	761a      	strb	r2, [r3, #24]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000e100 	.word	0xe000e100
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	; 0x24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f1c3 0307 	rsb	r3, r3, #7
 8003586:	2b04      	cmp	r3, #4
 8003588:	bf28      	it	cs
 800358a:	2304      	movcs	r3, #4
 800358c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3304      	adds	r3, #4
 8003592:	2b06      	cmp	r3, #6
 8003594:	d902      	bls.n	800359c <NVIC_EncodePriority+0x30>
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3b03      	subs	r3, #3
 800359a:	e000      	b.n	800359e <NVIC_EncodePriority+0x32>
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a0:	f04f 32ff 	mov.w	r2, #4294967295
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	401a      	ands	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b4:	f04f 31ff 	mov.w	r1, #4294967295
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	43d9      	mvns	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c4:	4313      	orrs	r3, r2
         );
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3724      	adds	r7, #36	; 0x24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3b01      	subs	r3, #1
 80035e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e4:	d301      	bcc.n	80035ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00f      	b.n	800360a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <SysTick_Config+0x40>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035f2:	210f      	movs	r1, #15
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	f7ff ff8e 	bl	8003518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <SysTick_Config+0x40>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003602:	4b04      	ldr	r3, [pc, #16]	; (8003614 <SysTick_Config+0x40>)
 8003604:	2207      	movs	r2, #7
 8003606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	e000e010 	.word	0xe000e010

08003618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ff29 	bl	8003478 <__NVIC_SetPriorityGrouping>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	4603      	mov	r3, r0
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800363c:	f7ff ff40 	bl	80034c0 <__NVIC_GetPriorityGrouping>
 8003640:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	6978      	ldr	r0, [r7, #20]
 8003648:	f7ff ff90 	bl	800356c <NVIC_EncodePriority>
 800364c:	4602      	mov	r2, r0
 800364e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff5f 	bl	8003518 <__NVIC_SetPriority>
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800366c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff33 	bl	80034dc <__NVIC_EnableIRQ>
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ffa4 	bl	80035d4 <SysTick_Config>
 800368c:	4603      	mov	r3, r0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80036a0:	f7fe f984 	bl	80019ac <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e316      	b.n	8003cde <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a66      	ldr	r2, [pc, #408]	; (8003850 <HAL_DMA_Init+0x1b8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d04a      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a65      	ldr	r2, [pc, #404]	; (8003854 <HAL_DMA_Init+0x1bc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d045      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a63      	ldr	r2, [pc, #396]	; (8003858 <HAL_DMA_Init+0x1c0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d040      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a62      	ldr	r2, [pc, #392]	; (800385c <HAL_DMA_Init+0x1c4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d03b      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a60      	ldr	r2, [pc, #384]	; (8003860 <HAL_DMA_Init+0x1c8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d036      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a5f      	ldr	r2, [pc, #380]	; (8003864 <HAL_DMA_Init+0x1cc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d031      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a5d      	ldr	r2, [pc, #372]	; (8003868 <HAL_DMA_Init+0x1d0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02c      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a5c      	ldr	r2, [pc, #368]	; (800386c <HAL_DMA_Init+0x1d4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d027      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a5a      	ldr	r2, [pc, #360]	; (8003870 <HAL_DMA_Init+0x1d8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d022      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a59      	ldr	r2, [pc, #356]	; (8003874 <HAL_DMA_Init+0x1dc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d01d      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a57      	ldr	r2, [pc, #348]	; (8003878 <HAL_DMA_Init+0x1e0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d018      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a56      	ldr	r2, [pc, #344]	; (800387c <HAL_DMA_Init+0x1e4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a54      	ldr	r2, [pc, #336]	; (8003880 <HAL_DMA_Init+0x1e8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00e      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a53      	ldr	r2, [pc, #332]	; (8003884 <HAL_DMA_Init+0x1ec>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a51      	ldr	r2, [pc, #324]	; (8003888 <HAL_DMA_Init+0x1f0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_DMA_Init+0xb8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a50      	ldr	r2, [pc, #320]	; (800388c <HAL_DMA_Init+0x1f4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_DMA_Init+0xbc>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_DMA_Init+0xbe>
 8003754:	2300      	movs	r3, #0
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 813b 	beq.w	80039d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a37      	ldr	r2, [pc, #220]	; (8003850 <HAL_DMA_Init+0x1b8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d04a      	beq.n	800380c <HAL_DMA_Init+0x174>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a36      	ldr	r2, [pc, #216]	; (8003854 <HAL_DMA_Init+0x1bc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d045      	beq.n	800380c <HAL_DMA_Init+0x174>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a34      	ldr	r2, [pc, #208]	; (8003858 <HAL_DMA_Init+0x1c0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d040      	beq.n	800380c <HAL_DMA_Init+0x174>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a33      	ldr	r2, [pc, #204]	; (800385c <HAL_DMA_Init+0x1c4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d03b      	beq.n	800380c <HAL_DMA_Init+0x174>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a31      	ldr	r2, [pc, #196]	; (8003860 <HAL_DMA_Init+0x1c8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d036      	beq.n	800380c <HAL_DMA_Init+0x174>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a30      	ldr	r2, [pc, #192]	; (8003864 <HAL_DMA_Init+0x1cc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d031      	beq.n	800380c <HAL_DMA_Init+0x174>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a2e      	ldr	r2, [pc, #184]	; (8003868 <HAL_DMA_Init+0x1d0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d02c      	beq.n	800380c <HAL_DMA_Init+0x174>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a2d      	ldr	r2, [pc, #180]	; (800386c <HAL_DMA_Init+0x1d4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d027      	beq.n	800380c <HAL_DMA_Init+0x174>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2b      	ldr	r2, [pc, #172]	; (8003870 <HAL_DMA_Init+0x1d8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d022      	beq.n	800380c <HAL_DMA_Init+0x174>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <HAL_DMA_Init+0x1dc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d01d      	beq.n	800380c <HAL_DMA_Init+0x174>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a28      	ldr	r2, [pc, #160]	; (8003878 <HAL_DMA_Init+0x1e0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d018      	beq.n	800380c <HAL_DMA_Init+0x174>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a27      	ldr	r2, [pc, #156]	; (800387c <HAL_DMA_Init+0x1e4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <HAL_DMA_Init+0x174>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a25      	ldr	r2, [pc, #148]	; (8003880 <HAL_DMA_Init+0x1e8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00e      	beq.n	800380c <HAL_DMA_Init+0x174>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a24      	ldr	r2, [pc, #144]	; (8003884 <HAL_DMA_Init+0x1ec>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_DMA_Init+0x174>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <HAL_DMA_Init+0x1f0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_DMA_Init+0x174>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a21      	ldr	r2, [pc, #132]	; (800388c <HAL_DMA_Init+0x1f4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d108      	bne.n	800381e <HAL_DMA_Init+0x186>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e007      	b.n	800382e <HAL_DMA_Init+0x196>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800382e:	e02f      	b.n	8003890 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003830:	f7fe f8bc 	bl	80019ac <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b05      	cmp	r3, #5
 800383c:	d928      	bls.n	8003890 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2203      	movs	r2, #3
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e246      	b.n	8003cde <HAL_DMA_Init+0x646>
 8003850:	40020010 	.word	0x40020010
 8003854:	40020028 	.word	0x40020028
 8003858:	40020040 	.word	0x40020040
 800385c:	40020058 	.word	0x40020058
 8003860:	40020070 	.word	0x40020070
 8003864:	40020088 	.word	0x40020088
 8003868:	400200a0 	.word	0x400200a0
 800386c:	400200b8 	.word	0x400200b8
 8003870:	40020410 	.word	0x40020410
 8003874:	40020428 	.word	0x40020428
 8003878:	40020440 	.word	0x40020440
 800387c:	40020458 	.word	0x40020458
 8003880:	40020470 	.word	0x40020470
 8003884:	40020488 	.word	0x40020488
 8003888:	400204a0 	.word	0x400204a0
 800388c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1c8      	bne.n	8003830 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4b83      	ldr	r3, [pc, #524]	; (8003ab8 <HAL_DMA_Init+0x420>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80038b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d107      	bne.n	80038f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	4313      	orrs	r3, r2
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80038f4:	4b71      	ldr	r3, [pc, #452]	; (8003abc <HAL_DMA_Init+0x424>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b71      	ldr	r3, [pc, #452]	; (8003ac0 <HAL_DMA_Init+0x428>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003900:	d328      	bcc.n	8003954 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b28      	cmp	r3, #40	; 0x28
 8003908:	d903      	bls.n	8003912 <HAL_DMA_Init+0x27a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b2e      	cmp	r3, #46	; 0x2e
 8003910:	d917      	bls.n	8003942 <HAL_DMA_Init+0x2aa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b3e      	cmp	r3, #62	; 0x3e
 8003918:	d903      	bls.n	8003922 <HAL_DMA_Init+0x28a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b42      	cmp	r3, #66	; 0x42
 8003920:	d90f      	bls.n	8003942 <HAL_DMA_Init+0x2aa>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b46      	cmp	r3, #70	; 0x46
 8003928:	d903      	bls.n	8003932 <HAL_DMA_Init+0x29a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b48      	cmp	r3, #72	; 0x48
 8003930:	d907      	bls.n	8003942 <HAL_DMA_Init+0x2aa>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b4e      	cmp	r3, #78	; 0x4e
 8003938:	d905      	bls.n	8003946 <HAL_DMA_Init+0x2ae>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b52      	cmp	r3, #82	; 0x52
 8003940:	d801      	bhi.n	8003946 <HAL_DMA_Init+0x2ae>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_DMA_Init+0x2b0>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003952:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0307 	bic.w	r3, r3, #7
 800396a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b04      	cmp	r3, #4
 800397c:	d117      	bne.n	80039ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00e      	beq.n	80039ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f001 fdcf 	bl	8005534 <DMA_CheckFifoParam>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2240      	movs	r2, #64	; 0x40
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e197      	b.n	8003cde <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f001 fd0a 	bl	80053d0 <DMA_CalcBaseAndBitshift>
 80039bc:	4603      	mov	r3, r0
 80039be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	223f      	movs	r2, #63	; 0x3f
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	e0cd      	b.n	8003b6e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a3b      	ldr	r2, [pc, #236]	; (8003ac4 <HAL_DMA_Init+0x42c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d022      	beq.n	8003a22 <HAL_DMA_Init+0x38a>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a39      	ldr	r2, [pc, #228]	; (8003ac8 <HAL_DMA_Init+0x430>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01d      	beq.n	8003a22 <HAL_DMA_Init+0x38a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a38      	ldr	r2, [pc, #224]	; (8003acc <HAL_DMA_Init+0x434>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d018      	beq.n	8003a22 <HAL_DMA_Init+0x38a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a36      	ldr	r2, [pc, #216]	; (8003ad0 <HAL_DMA_Init+0x438>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_DMA_Init+0x38a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a35      	ldr	r2, [pc, #212]	; (8003ad4 <HAL_DMA_Init+0x43c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00e      	beq.n	8003a22 <HAL_DMA_Init+0x38a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a33      	ldr	r2, [pc, #204]	; (8003ad8 <HAL_DMA_Init+0x440>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d009      	beq.n	8003a22 <HAL_DMA_Init+0x38a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a32      	ldr	r2, [pc, #200]	; (8003adc <HAL_DMA_Init+0x444>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_DMA_Init+0x38a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a30      	ldr	r2, [pc, #192]	; (8003ae0 <HAL_DMA_Init+0x448>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_DMA_Init+0x38e>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_DMA_Init+0x390>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8097 	beq.w	8003b5c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a24      	ldr	r2, [pc, #144]	; (8003ac4 <HAL_DMA_Init+0x42c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d021      	beq.n	8003a7c <HAL_DMA_Init+0x3e4>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <HAL_DMA_Init+0x430>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01c      	beq.n	8003a7c <HAL_DMA_Init+0x3e4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a21      	ldr	r2, [pc, #132]	; (8003acc <HAL_DMA_Init+0x434>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d017      	beq.n	8003a7c <HAL_DMA_Init+0x3e4>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <HAL_DMA_Init+0x438>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d012      	beq.n	8003a7c <HAL_DMA_Init+0x3e4>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <HAL_DMA_Init+0x43c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00d      	beq.n	8003a7c <HAL_DMA_Init+0x3e4>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1c      	ldr	r2, [pc, #112]	; (8003ad8 <HAL_DMA_Init+0x440>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d008      	beq.n	8003a7c <HAL_DMA_Init+0x3e4>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <HAL_DMA_Init+0x444>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <HAL_DMA_Init+0x3e4>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a19      	ldr	r2, [pc, #100]	; (8003ae0 <HAL_DMA_Init+0x448>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_DMA_Init+0x44c>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d020      	beq.n	8003ae8 <HAL_DMA_Init+0x450>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b80      	cmp	r3, #128	; 0x80
 8003aac:	d102      	bne.n	8003ab4 <HAL_DMA_Init+0x41c>
 8003aae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ab2:	e01a      	b.n	8003aea <HAL_DMA_Init+0x452>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e018      	b.n	8003aea <HAL_DMA_Init+0x452>
 8003ab8:	fe10803f 	.word	0xfe10803f
 8003abc:	5c001000 	.word	0x5c001000
 8003ac0:	ffff0000 	.word	0xffff0000
 8003ac4:	58025408 	.word	0x58025408
 8003ac8:	5802541c 	.word	0x5802541c
 8003acc:	58025430 	.word	0x58025430
 8003ad0:	58025444 	.word	0x58025444
 8003ad4:	58025458 	.word	0x58025458
 8003ad8:	5802546c 	.word	0x5802546c
 8003adc:	58025480 	.word	0x58025480
 8003ae0:	58025494 	.word	0x58025494
 8003ae4:	fffe000f 	.word	0xfffe000f
 8003ae8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68d2      	ldr	r2, [r2, #12]
 8003aee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003af0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003af8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b6e      	ldr	r3, [pc, #440]	; (8003ce8 <HAL_DMA_Init+0x650>)
 8003b30:	4413      	add	r3, r2
 8003b32:	4a6e      	ldr	r2, [pc, #440]	; (8003cec <HAL_DMA_Init+0x654>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	009a      	lsls	r2, r3, #2
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f001 fc45 	bl	80053d0 <DMA_CalcBaseAndBitshift>
 8003b46:	4603      	mov	r3, r0
 8003b48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2201      	movs	r2, #1
 8003b54:	409a      	lsls	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	e008      	b.n	8003b6e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2203      	movs	r2, #3
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0b7      	b.n	8003cde <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a5f      	ldr	r2, [pc, #380]	; (8003cf0 <HAL_DMA_Init+0x658>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d072      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a5d      	ldr	r2, [pc, #372]	; (8003cf4 <HAL_DMA_Init+0x65c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d06d      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5c      	ldr	r2, [pc, #368]	; (8003cf8 <HAL_DMA_Init+0x660>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d068      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5a      	ldr	r2, [pc, #360]	; (8003cfc <HAL_DMA_Init+0x664>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d063      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a59      	ldr	r2, [pc, #356]	; (8003d00 <HAL_DMA_Init+0x668>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d05e      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a57      	ldr	r2, [pc, #348]	; (8003d04 <HAL_DMA_Init+0x66c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d059      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a56      	ldr	r2, [pc, #344]	; (8003d08 <HAL_DMA_Init+0x670>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d054      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a54      	ldr	r2, [pc, #336]	; (8003d0c <HAL_DMA_Init+0x674>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d04f      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a53      	ldr	r2, [pc, #332]	; (8003d10 <HAL_DMA_Init+0x678>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d04a      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a51      	ldr	r2, [pc, #324]	; (8003d14 <HAL_DMA_Init+0x67c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d045      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a50      	ldr	r2, [pc, #320]	; (8003d18 <HAL_DMA_Init+0x680>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d040      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a4e      	ldr	r2, [pc, #312]	; (8003d1c <HAL_DMA_Init+0x684>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d03b      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a4d      	ldr	r2, [pc, #308]	; (8003d20 <HAL_DMA_Init+0x688>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d036      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a4b      	ldr	r2, [pc, #300]	; (8003d24 <HAL_DMA_Init+0x68c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d031      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a4a      	ldr	r2, [pc, #296]	; (8003d28 <HAL_DMA_Init+0x690>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d02c      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a48      	ldr	r2, [pc, #288]	; (8003d2c <HAL_DMA_Init+0x694>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d027      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a47      	ldr	r2, [pc, #284]	; (8003d30 <HAL_DMA_Init+0x698>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d022      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a45      	ldr	r2, [pc, #276]	; (8003d34 <HAL_DMA_Init+0x69c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01d      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a44      	ldr	r2, [pc, #272]	; (8003d38 <HAL_DMA_Init+0x6a0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d018      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a42      	ldr	r2, [pc, #264]	; (8003d3c <HAL_DMA_Init+0x6a4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a41      	ldr	r2, [pc, #260]	; (8003d40 <HAL_DMA_Init+0x6a8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00e      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a3f      	ldr	r2, [pc, #252]	; (8003d44 <HAL_DMA_Init+0x6ac>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a3e      	ldr	r2, [pc, #248]	; (8003d48 <HAL_DMA_Init+0x6b0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <HAL_DMA_Init+0x5c6>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <HAL_DMA_Init+0x6b4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d101      	bne.n	8003c62 <HAL_DMA_Init+0x5ca>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_DMA_Init+0x5cc>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d032      	beq.n	8003cce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f001 fcdf 	bl	800562c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d102      	bne.n	8003c7c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d010      	beq.n	8003cbc <HAL_DMA_Init+0x624>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d80c      	bhi.n	8003cbc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f001 fd5c 	bl	8005760 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	e008      	b.n	8003cce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	a7fdabf8 	.word	0xa7fdabf8
 8003cec:	cccccccd 	.word	0xcccccccd
 8003cf0:	40020010 	.word	0x40020010
 8003cf4:	40020028 	.word	0x40020028
 8003cf8:	40020040 	.word	0x40020040
 8003cfc:	40020058 	.word	0x40020058
 8003d00:	40020070 	.word	0x40020070
 8003d04:	40020088 	.word	0x40020088
 8003d08:	400200a0 	.word	0x400200a0
 8003d0c:	400200b8 	.word	0x400200b8
 8003d10:	40020410 	.word	0x40020410
 8003d14:	40020428 	.word	0x40020428
 8003d18:	40020440 	.word	0x40020440
 8003d1c:	40020458 	.word	0x40020458
 8003d20:	40020470 	.word	0x40020470
 8003d24:	40020488 	.word	0x40020488
 8003d28:	400204a0 	.word	0x400204a0
 8003d2c:	400204b8 	.word	0x400204b8
 8003d30:	58025408 	.word	0x58025408
 8003d34:	5802541c 	.word	0x5802541c
 8003d38:	58025430 	.word	0x58025430
 8003d3c:	58025444 	.word	0x58025444
 8003d40:	58025458 	.word	0x58025458
 8003d44:	5802546c 	.word	0x5802546c
 8003d48:	58025480 	.word	0x58025480
 8003d4c:	58025494 	.word	0x58025494

08003d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e226      	b.n	80041ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_DMA_Start_IT+0x2a>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e21f      	b.n	80041ba <HAL_DMA_Start_IT+0x46a>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	f040 820a 	bne.w	80041a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a68      	ldr	r2, [pc, #416]	; (8003f44 <HAL_DMA_Start_IT+0x1f4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d04a      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a66      	ldr	r2, [pc, #408]	; (8003f48 <HAL_DMA_Start_IT+0x1f8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d045      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a65      	ldr	r2, [pc, #404]	; (8003f4c <HAL_DMA_Start_IT+0x1fc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d040      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a63      	ldr	r2, [pc, #396]	; (8003f50 <HAL_DMA_Start_IT+0x200>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d03b      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a62      	ldr	r2, [pc, #392]	; (8003f54 <HAL_DMA_Start_IT+0x204>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d036      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a60      	ldr	r2, [pc, #384]	; (8003f58 <HAL_DMA_Start_IT+0x208>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d031      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a5f      	ldr	r2, [pc, #380]	; (8003f5c <HAL_DMA_Start_IT+0x20c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d02c      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a5d      	ldr	r2, [pc, #372]	; (8003f60 <HAL_DMA_Start_IT+0x210>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d027      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a5c      	ldr	r2, [pc, #368]	; (8003f64 <HAL_DMA_Start_IT+0x214>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d022      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5a      	ldr	r2, [pc, #360]	; (8003f68 <HAL_DMA_Start_IT+0x218>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01d      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a59      	ldr	r2, [pc, #356]	; (8003f6c <HAL_DMA_Start_IT+0x21c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d018      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a57      	ldr	r2, [pc, #348]	; (8003f70 <HAL_DMA_Start_IT+0x220>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a56      	ldr	r2, [pc, #344]	; (8003f74 <HAL_DMA_Start_IT+0x224>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a54      	ldr	r2, [pc, #336]	; (8003f78 <HAL_DMA_Start_IT+0x228>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a53      	ldr	r2, [pc, #332]	; (8003f7c <HAL_DMA_Start_IT+0x22c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_DMA_Start_IT+0xee>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a51      	ldr	r2, [pc, #324]	; (8003f80 <HAL_DMA_Start_IT+0x230>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d108      	bne.n	8003e50 <HAL_DMA_Start_IT+0x100>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e007      	b.n	8003e60 <HAL_DMA_Start_IT+0x110>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f001 f906 	bl	8005078 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a34      	ldr	r2, [pc, #208]	; (8003f44 <HAL_DMA_Start_IT+0x1f4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d04a      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a33      	ldr	r2, [pc, #204]	; (8003f48 <HAL_DMA_Start_IT+0x1f8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d045      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a31      	ldr	r2, [pc, #196]	; (8003f4c <HAL_DMA_Start_IT+0x1fc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d040      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a30      	ldr	r2, [pc, #192]	; (8003f50 <HAL_DMA_Start_IT+0x200>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d03b      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2e      	ldr	r2, [pc, #184]	; (8003f54 <HAL_DMA_Start_IT+0x204>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d036      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2d      	ldr	r2, [pc, #180]	; (8003f58 <HAL_DMA_Start_IT+0x208>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d031      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <HAL_DMA_Start_IT+0x20c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d02c      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <HAL_DMA_Start_IT+0x210>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d027      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <HAL_DMA_Start_IT+0x214>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d022      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <HAL_DMA_Start_IT+0x218>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d01d      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a25      	ldr	r2, [pc, #148]	; (8003f6c <HAL_DMA_Start_IT+0x21c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d018      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a24      	ldr	r2, [pc, #144]	; (8003f70 <HAL_DMA_Start_IT+0x220>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d013      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_DMA_Start_IT+0x224>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00e      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <HAL_DMA_Start_IT+0x228>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_DMA_Start_IT+0x22c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <HAL_DMA_Start_IT+0x1bc>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_DMA_Start_IT+0x230>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_DMA_Start_IT+0x1c0>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <HAL_DMA_Start_IT+0x1c2>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d036      	beq.n	8003f84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 021e 	bic.w	r2, r3, #30
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0216 	orr.w	r2, r2, #22
 8003f28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d03e      	beq.n	8003fb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0208 	orr.w	r2, r2, #8
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e035      	b.n	8003fb0 <HAL_DMA_Start_IT+0x260>
 8003f44:	40020010 	.word	0x40020010
 8003f48:	40020028 	.word	0x40020028
 8003f4c:	40020040 	.word	0x40020040
 8003f50:	40020058 	.word	0x40020058
 8003f54:	40020070 	.word	0x40020070
 8003f58:	40020088 	.word	0x40020088
 8003f5c:	400200a0 	.word	0x400200a0
 8003f60:	400200b8 	.word	0x400200b8
 8003f64:	40020410 	.word	0x40020410
 8003f68:	40020428 	.word	0x40020428
 8003f6c:	40020440 	.word	0x40020440
 8003f70:	40020458 	.word	0x40020458
 8003f74:	40020470 	.word	0x40020470
 8003f78:	40020488 	.word	0x40020488
 8003f7c:	400204a0 	.word	0x400204a0
 8003f80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 020e 	bic.w	r2, r3, #14
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 020a 	orr.w	r2, r2, #10
 8003f96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0204 	orr.w	r2, r2, #4
 8003fae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a83      	ldr	r2, [pc, #524]	; (80041c4 <HAL_DMA_Start_IT+0x474>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d072      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a82      	ldr	r2, [pc, #520]	; (80041c8 <HAL_DMA_Start_IT+0x478>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d06d      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a80      	ldr	r2, [pc, #512]	; (80041cc <HAL_DMA_Start_IT+0x47c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d068      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a7f      	ldr	r2, [pc, #508]	; (80041d0 <HAL_DMA_Start_IT+0x480>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d063      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a7d      	ldr	r2, [pc, #500]	; (80041d4 <HAL_DMA_Start_IT+0x484>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d05e      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a7c      	ldr	r2, [pc, #496]	; (80041d8 <HAL_DMA_Start_IT+0x488>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d059      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a7a      	ldr	r2, [pc, #488]	; (80041dc <HAL_DMA_Start_IT+0x48c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d054      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a79      	ldr	r2, [pc, #484]	; (80041e0 <HAL_DMA_Start_IT+0x490>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d04f      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a77      	ldr	r2, [pc, #476]	; (80041e4 <HAL_DMA_Start_IT+0x494>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d04a      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a76      	ldr	r2, [pc, #472]	; (80041e8 <HAL_DMA_Start_IT+0x498>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d045      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a74      	ldr	r2, [pc, #464]	; (80041ec <HAL_DMA_Start_IT+0x49c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d040      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a73      	ldr	r2, [pc, #460]	; (80041f0 <HAL_DMA_Start_IT+0x4a0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d03b      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a71      	ldr	r2, [pc, #452]	; (80041f4 <HAL_DMA_Start_IT+0x4a4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d036      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a70      	ldr	r2, [pc, #448]	; (80041f8 <HAL_DMA_Start_IT+0x4a8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d031      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a6e      	ldr	r2, [pc, #440]	; (80041fc <HAL_DMA_Start_IT+0x4ac>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d02c      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a6d      	ldr	r2, [pc, #436]	; (8004200 <HAL_DMA_Start_IT+0x4b0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d027      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a6b      	ldr	r2, [pc, #428]	; (8004204 <HAL_DMA_Start_IT+0x4b4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d022      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a6a      	ldr	r2, [pc, #424]	; (8004208 <HAL_DMA_Start_IT+0x4b8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d01d      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a68      	ldr	r2, [pc, #416]	; (800420c <HAL_DMA_Start_IT+0x4bc>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d018      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a67      	ldr	r2, [pc, #412]	; (8004210 <HAL_DMA_Start_IT+0x4c0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d013      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a65      	ldr	r2, [pc, #404]	; (8004214 <HAL_DMA_Start_IT+0x4c4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00e      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a64      	ldr	r2, [pc, #400]	; (8004218 <HAL_DMA_Start_IT+0x4c8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d009      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a62      	ldr	r2, [pc, #392]	; (800421c <HAL_DMA_Start_IT+0x4cc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_DMA_Start_IT+0x350>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a61      	ldr	r2, [pc, #388]	; (8004220 <HAL_DMA_Start_IT+0x4d0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_DMA_Start_IT+0x354>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <HAL_DMA_Start_IT+0x356>
 80040a4:	2300      	movs	r3, #0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01a      	beq.n	80040e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a37      	ldr	r2, [pc, #220]	; (80041c4 <HAL_DMA_Start_IT+0x474>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d04a      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a36      	ldr	r2, [pc, #216]	; (80041c8 <HAL_DMA_Start_IT+0x478>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d045      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a34      	ldr	r2, [pc, #208]	; (80041cc <HAL_DMA_Start_IT+0x47c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d040      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a33      	ldr	r2, [pc, #204]	; (80041d0 <HAL_DMA_Start_IT+0x480>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d03b      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a31      	ldr	r2, [pc, #196]	; (80041d4 <HAL_DMA_Start_IT+0x484>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d036      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a30      	ldr	r2, [pc, #192]	; (80041d8 <HAL_DMA_Start_IT+0x488>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d031      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2e      	ldr	r2, [pc, #184]	; (80041dc <HAL_DMA_Start_IT+0x48c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d02c      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2d      	ldr	r2, [pc, #180]	; (80041e0 <HAL_DMA_Start_IT+0x490>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d027      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <HAL_DMA_Start_IT+0x494>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2a      	ldr	r2, [pc, #168]	; (80041e8 <HAL_DMA_Start_IT+0x498>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d01d      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a28      	ldr	r2, [pc, #160]	; (80041ec <HAL_DMA_Start_IT+0x49c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a27      	ldr	r2, [pc, #156]	; (80041f0 <HAL_DMA_Start_IT+0x4a0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a25      	ldr	r2, [pc, #148]	; (80041f4 <HAL_DMA_Start_IT+0x4a4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a24      	ldr	r2, [pc, #144]	; (80041f8 <HAL_DMA_Start_IT+0x4a8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a22      	ldr	r2, [pc, #136]	; (80041fc <HAL_DMA_Start_IT+0x4ac>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_DMA_Start_IT+0x430>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a21      	ldr	r2, [pc, #132]	; (8004200 <HAL_DMA_Start_IT+0x4b0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <HAL_DMA_Start_IT+0x442>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e012      	b.n	80041b8 <HAL_DMA_Start_IT+0x468>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e009      	b.n	80041b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40020010 	.word	0x40020010
 80041c8:	40020028 	.word	0x40020028
 80041cc:	40020040 	.word	0x40020040
 80041d0:	40020058 	.word	0x40020058
 80041d4:	40020070 	.word	0x40020070
 80041d8:	40020088 	.word	0x40020088
 80041dc:	400200a0 	.word	0x400200a0
 80041e0:	400200b8 	.word	0x400200b8
 80041e4:	40020410 	.word	0x40020410
 80041e8:	40020428 	.word	0x40020428
 80041ec:	40020440 	.word	0x40020440
 80041f0:	40020458 	.word	0x40020458
 80041f4:	40020470 	.word	0x40020470
 80041f8:	40020488 	.word	0x40020488
 80041fc:	400204a0 	.word	0x400204a0
 8004200:	400204b8 	.word	0x400204b8
 8004204:	58025408 	.word	0x58025408
 8004208:	5802541c 	.word	0x5802541c
 800420c:	58025430 	.word	0x58025430
 8004210:	58025444 	.word	0x58025444
 8004214:	58025458 	.word	0x58025458
 8004218:	5802546c 	.word	0x5802546c
 800421c:	58025480 	.word	0x58025480
 8004220:	58025494 	.word	0x58025494

08004224 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	; 0x28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004230:	4b67      	ldr	r3, [pc, #412]	; (80043d0 <HAL_DMA_IRQHandler+0x1ac>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a67      	ldr	r2, [pc, #412]	; (80043d4 <HAL_DMA_IRQHandler+0x1b0>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	0a9b      	lsrs	r3, r3, #10
 800423c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a5f      	ldr	r2, [pc, #380]	; (80043d8 <HAL_DMA_IRQHandler+0x1b4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d04a      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a5d      	ldr	r2, [pc, #372]	; (80043dc <HAL_DMA_IRQHandler+0x1b8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d045      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a5c      	ldr	r2, [pc, #368]	; (80043e0 <HAL_DMA_IRQHandler+0x1bc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d040      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a5a      	ldr	r2, [pc, #360]	; (80043e4 <HAL_DMA_IRQHandler+0x1c0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d03b      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a59      	ldr	r2, [pc, #356]	; (80043e8 <HAL_DMA_IRQHandler+0x1c4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d036      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a57      	ldr	r2, [pc, #348]	; (80043ec <HAL_DMA_IRQHandler+0x1c8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d031      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a56      	ldr	r2, [pc, #344]	; (80043f0 <HAL_DMA_IRQHandler+0x1cc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d02c      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a54      	ldr	r2, [pc, #336]	; (80043f4 <HAL_DMA_IRQHandler+0x1d0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d027      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a53      	ldr	r2, [pc, #332]	; (80043f8 <HAL_DMA_IRQHandler+0x1d4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d022      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a51      	ldr	r2, [pc, #324]	; (80043fc <HAL_DMA_IRQHandler+0x1d8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01d      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a50      	ldr	r2, [pc, #320]	; (8004400 <HAL_DMA_IRQHandler+0x1dc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d018      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a4e      	ldr	r2, [pc, #312]	; (8004404 <HAL_DMA_IRQHandler+0x1e0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a4d      	ldr	r2, [pc, #308]	; (8004408 <HAL_DMA_IRQHandler+0x1e4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00e      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a4b      	ldr	r2, [pc, #300]	; (800440c <HAL_DMA_IRQHandler+0x1e8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d009      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a4a      	ldr	r2, [pc, #296]	; (8004410 <HAL_DMA_IRQHandler+0x1ec>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xd2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a48      	ldr	r2, [pc, #288]	; (8004414 <HAL_DMA_IRQHandler+0x1f0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d101      	bne.n	80042fa <HAL_DMA_IRQHandler+0xd6>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_DMA_IRQHandler+0xd8>
 80042fa:	2300      	movs	r3, #0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 842b 	beq.w	8004b58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2208      	movs	r2, #8
 800430c:	409a      	lsls	r2, r3
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80a2 	beq.w	800445c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2e      	ldr	r2, [pc, #184]	; (80043d8 <HAL_DMA_IRQHandler+0x1b4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d04a      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2d      	ldr	r2, [pc, #180]	; (80043dc <HAL_DMA_IRQHandler+0x1b8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d045      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2b      	ldr	r2, [pc, #172]	; (80043e0 <HAL_DMA_IRQHandler+0x1bc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d040      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2a      	ldr	r2, [pc, #168]	; (80043e4 <HAL_DMA_IRQHandler+0x1c0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d03b      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a28      	ldr	r2, [pc, #160]	; (80043e8 <HAL_DMA_IRQHandler+0x1c4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d036      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a27      	ldr	r2, [pc, #156]	; (80043ec <HAL_DMA_IRQHandler+0x1c8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d031      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <HAL_DMA_IRQHandler+0x1cc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d02c      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a24      	ldr	r2, [pc, #144]	; (80043f4 <HAL_DMA_IRQHandler+0x1d0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d027      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <HAL_DMA_IRQHandler+0x1d4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d022      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a21      	ldr	r2, [pc, #132]	; (80043fc <HAL_DMA_IRQHandler+0x1d8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d01d      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <HAL_DMA_IRQHandler+0x1dc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d018      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <HAL_DMA_IRQHandler+0x1e0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d013      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <HAL_DMA_IRQHandler+0x1e4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00e      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1b      	ldr	r2, [pc, #108]	; (800440c <HAL_DMA_IRQHandler+0x1e8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a19      	ldr	r2, [pc, #100]	; (8004410 <HAL_DMA_IRQHandler+0x1ec>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x194>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a18      	ldr	r2, [pc, #96]	; (8004414 <HAL_DMA_IRQHandler+0x1f0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d12f      	bne.n	8004418 <HAL_DMA_IRQHandler+0x1f4>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bf14      	ite	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	2300      	moveq	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	e02e      	b.n	800442c <HAL_DMA_IRQHandler+0x208>
 80043ce:	bf00      	nop
 80043d0:	24000000 	.word	0x24000000
 80043d4:	1b4e81b5 	.word	0x1b4e81b5
 80043d8:	40020010 	.word	0x40020010
 80043dc:	40020028 	.word	0x40020028
 80043e0:	40020040 	.word	0x40020040
 80043e4:	40020058 	.word	0x40020058
 80043e8:	40020070 	.word	0x40020070
 80043ec:	40020088 	.word	0x40020088
 80043f0:	400200a0 	.word	0x400200a0
 80043f4:	400200b8 	.word	0x400200b8
 80043f8:	40020410 	.word	0x40020410
 80043fc:	40020428 	.word	0x40020428
 8004400:	40020440 	.word	0x40020440
 8004404:	40020458 	.word	0x40020458
 8004408:	40020470 	.word	0x40020470
 800440c:	40020488 	.word	0x40020488
 8004410:	400204a0 	.word	0x400204a0
 8004414:	400204b8 	.word	0x400204b8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	bf14      	ite	ne
 8004426:	2301      	movne	r3, #1
 8004428:	2300      	moveq	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d015      	beq.n	800445c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0204 	bic.w	r2, r2, #4
 800443e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	2208      	movs	r2, #8
 800444a:	409a      	lsls	r2, r3
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f043 0201 	orr.w	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	fa22 f303 	lsr.w	r3, r2, r3
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d06e      	beq.n	8004550 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a69      	ldr	r2, [pc, #420]	; (800461c <HAL_DMA_IRQHandler+0x3f8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d04a      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a67      	ldr	r2, [pc, #412]	; (8004620 <HAL_DMA_IRQHandler+0x3fc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d045      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a66      	ldr	r2, [pc, #408]	; (8004624 <HAL_DMA_IRQHandler+0x400>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d040      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a64      	ldr	r2, [pc, #400]	; (8004628 <HAL_DMA_IRQHandler+0x404>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d03b      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a63      	ldr	r2, [pc, #396]	; (800462c <HAL_DMA_IRQHandler+0x408>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d036      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a61      	ldr	r2, [pc, #388]	; (8004630 <HAL_DMA_IRQHandler+0x40c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d031      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a60      	ldr	r2, [pc, #384]	; (8004634 <HAL_DMA_IRQHandler+0x410>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d02c      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a5e      	ldr	r2, [pc, #376]	; (8004638 <HAL_DMA_IRQHandler+0x414>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d027      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a5d      	ldr	r2, [pc, #372]	; (800463c <HAL_DMA_IRQHandler+0x418>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d022      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a5b      	ldr	r2, [pc, #364]	; (8004640 <HAL_DMA_IRQHandler+0x41c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d01d      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a5a      	ldr	r2, [pc, #360]	; (8004644 <HAL_DMA_IRQHandler+0x420>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d018      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a58      	ldr	r2, [pc, #352]	; (8004648 <HAL_DMA_IRQHandler+0x424>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a57      	ldr	r2, [pc, #348]	; (800464c <HAL_DMA_IRQHandler+0x428>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00e      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a55      	ldr	r2, [pc, #340]	; (8004650 <HAL_DMA_IRQHandler+0x42c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a54      	ldr	r2, [pc, #336]	; (8004654 <HAL_DMA_IRQHandler+0x430>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_DMA_IRQHandler+0x2ee>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a52      	ldr	r2, [pc, #328]	; (8004658 <HAL_DMA_IRQHandler+0x434>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10a      	bne.n	8004528 <HAL_DMA_IRQHandler+0x304>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf14      	ite	ne
 8004520:	2301      	movne	r3, #1
 8004522:	2300      	moveq	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e003      	b.n	8004530 <HAL_DMA_IRQHandler+0x30c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00d      	beq.n	8004550 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	2201      	movs	r2, #1
 800453e:	409a      	lsls	r2, r3
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	f043 0202 	orr.w	r2, r3, #2
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	2204      	movs	r2, #4
 800455a:	409a      	lsls	r2, r3
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 808f 	beq.w	8004684 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2c      	ldr	r2, [pc, #176]	; (800461c <HAL_DMA_IRQHandler+0x3f8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d04a      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <HAL_DMA_IRQHandler+0x3fc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d045      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a29      	ldr	r2, [pc, #164]	; (8004624 <HAL_DMA_IRQHandler+0x400>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d040      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a27      	ldr	r2, [pc, #156]	; (8004628 <HAL_DMA_IRQHandler+0x404>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d03b      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a26      	ldr	r2, [pc, #152]	; (800462c <HAL_DMA_IRQHandler+0x408>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d036      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a24      	ldr	r2, [pc, #144]	; (8004630 <HAL_DMA_IRQHandler+0x40c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d031      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a23      	ldr	r2, [pc, #140]	; (8004634 <HAL_DMA_IRQHandler+0x410>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d02c      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a21      	ldr	r2, [pc, #132]	; (8004638 <HAL_DMA_IRQHandler+0x414>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d027      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a20      	ldr	r2, [pc, #128]	; (800463c <HAL_DMA_IRQHandler+0x418>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d022      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1e      	ldr	r2, [pc, #120]	; (8004640 <HAL_DMA_IRQHandler+0x41c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d01d      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <HAL_DMA_IRQHandler+0x420>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d018      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1b      	ldr	r2, [pc, #108]	; (8004648 <HAL_DMA_IRQHandler+0x424>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1a      	ldr	r2, [pc, #104]	; (800464c <HAL_DMA_IRQHandler+0x428>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00e      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a18      	ldr	r2, [pc, #96]	; (8004650 <HAL_DMA_IRQHandler+0x42c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a17      	ldr	r2, [pc, #92]	; (8004654 <HAL_DMA_IRQHandler+0x430>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3e2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a15      	ldr	r2, [pc, #84]	; (8004658 <HAL_DMA_IRQHandler+0x434>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d12a      	bne.n	800465c <HAL_DMA_IRQHandler+0x438>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	e023      	b.n	8004664 <HAL_DMA_IRQHandler+0x440>
 800461c:	40020010 	.word	0x40020010
 8004620:	40020028 	.word	0x40020028
 8004624:	40020040 	.word	0x40020040
 8004628:	40020058 	.word	0x40020058
 800462c:	40020070 	.word	0x40020070
 8004630:	40020088 	.word	0x40020088
 8004634:	400200a0 	.word	0x400200a0
 8004638:	400200b8 	.word	0x400200b8
 800463c:	40020410 	.word	0x40020410
 8004640:	40020428 	.word	0x40020428
 8004644:	40020440 	.word	0x40020440
 8004648:	40020458 	.word	0x40020458
 800464c:	40020470 	.word	0x40020470
 8004650:	40020488 	.word	0x40020488
 8004654:	400204a0 	.word	0x400204a0
 8004658:	400204b8 	.word	0x400204b8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2204      	movs	r2, #4
 8004672:	409a      	lsls	r2, r3
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	f043 0204 	orr.w	r2, r3, #4
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	2210      	movs	r2, #16
 800468e:	409a      	lsls	r2, r3
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a6 	beq.w	80047e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a85      	ldr	r2, [pc, #532]	; (80048b4 <HAL_DMA_IRQHandler+0x690>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d04a      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a83      	ldr	r2, [pc, #524]	; (80048b8 <HAL_DMA_IRQHandler+0x694>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d045      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a82      	ldr	r2, [pc, #520]	; (80048bc <HAL_DMA_IRQHandler+0x698>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d040      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a80      	ldr	r2, [pc, #512]	; (80048c0 <HAL_DMA_IRQHandler+0x69c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d03b      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a7f      	ldr	r2, [pc, #508]	; (80048c4 <HAL_DMA_IRQHandler+0x6a0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d036      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a7d      	ldr	r2, [pc, #500]	; (80048c8 <HAL_DMA_IRQHandler+0x6a4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a7c      	ldr	r2, [pc, #496]	; (80048cc <HAL_DMA_IRQHandler+0x6a8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d02c      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a7a      	ldr	r2, [pc, #488]	; (80048d0 <HAL_DMA_IRQHandler+0x6ac>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d027      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a79      	ldr	r2, [pc, #484]	; (80048d4 <HAL_DMA_IRQHandler+0x6b0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d022      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a77      	ldr	r2, [pc, #476]	; (80048d8 <HAL_DMA_IRQHandler+0x6b4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01d      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a76      	ldr	r2, [pc, #472]	; (80048dc <HAL_DMA_IRQHandler+0x6b8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a74      	ldr	r2, [pc, #464]	; (80048e0 <HAL_DMA_IRQHandler+0x6bc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a73      	ldr	r2, [pc, #460]	; (80048e4 <HAL_DMA_IRQHandler+0x6c0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a71      	ldr	r2, [pc, #452]	; (80048e8 <HAL_DMA_IRQHandler+0x6c4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a70      	ldr	r2, [pc, #448]	; (80048ec <HAL_DMA_IRQHandler+0x6c8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_DMA_IRQHandler+0x516>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a6e      	ldr	r2, [pc, #440]	; (80048f0 <HAL_DMA_IRQHandler+0x6cc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d10a      	bne.n	8004750 <HAL_DMA_IRQHandler+0x52c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e009      	b.n	8004764 <HAL_DMA_IRQHandler+0x540>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d03e      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	2210      	movs	r2, #16
 8004772:	409a      	lsls	r2, r3
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d018      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d108      	bne.n	80047a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d024      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
 80047a4:	e01f      	b.n	80047e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01b      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
 80047b6:	e016      	b.n	80047e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0208 	bic.w	r2, r2, #8
 80047d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	2220      	movs	r2, #32
 80047f0:	409a      	lsls	r2, r3
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 8110 	beq.w	8004a1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a2c      	ldr	r2, [pc, #176]	; (80048b4 <HAL_DMA_IRQHandler+0x690>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d04a      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a2b      	ldr	r2, [pc, #172]	; (80048b8 <HAL_DMA_IRQHandler+0x694>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d045      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a29      	ldr	r2, [pc, #164]	; (80048bc <HAL_DMA_IRQHandler+0x698>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d040      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a28      	ldr	r2, [pc, #160]	; (80048c0 <HAL_DMA_IRQHandler+0x69c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d03b      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a26      	ldr	r2, [pc, #152]	; (80048c4 <HAL_DMA_IRQHandler+0x6a0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d036      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a25      	ldr	r2, [pc, #148]	; (80048c8 <HAL_DMA_IRQHandler+0x6a4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d031      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a23      	ldr	r2, [pc, #140]	; (80048cc <HAL_DMA_IRQHandler+0x6a8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02c      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a22      	ldr	r2, [pc, #136]	; (80048d0 <HAL_DMA_IRQHandler+0x6ac>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d027      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a20      	ldr	r2, [pc, #128]	; (80048d4 <HAL_DMA_IRQHandler+0x6b0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d022      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1f      	ldr	r2, [pc, #124]	; (80048d8 <HAL_DMA_IRQHandler+0x6b4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d01d      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <HAL_DMA_IRQHandler+0x6b8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d018      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1c      	ldr	r2, [pc, #112]	; (80048e0 <HAL_DMA_IRQHandler+0x6bc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <HAL_DMA_IRQHandler+0x6c0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <HAL_DMA_IRQHandler+0x6c4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a17      	ldr	r2, [pc, #92]	; (80048ec <HAL_DMA_IRQHandler+0x6c8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_DMA_IRQHandler+0x678>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <HAL_DMA_IRQHandler+0x6cc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d12b      	bne.n	80048f4 <HAL_DMA_IRQHandler+0x6d0>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf14      	ite	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2300      	moveq	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e02a      	b.n	8004908 <HAL_DMA_IRQHandler+0x6e4>
 80048b2:	bf00      	nop
 80048b4:	40020010 	.word	0x40020010
 80048b8:	40020028 	.word	0x40020028
 80048bc:	40020040 	.word	0x40020040
 80048c0:	40020058 	.word	0x40020058
 80048c4:	40020070 	.word	0x40020070
 80048c8:	40020088 	.word	0x40020088
 80048cc:	400200a0 	.word	0x400200a0
 80048d0:	400200b8 	.word	0x400200b8
 80048d4:	40020410 	.word	0x40020410
 80048d8:	40020428 	.word	0x40020428
 80048dc:	40020440 	.word	0x40020440
 80048e0:	40020458 	.word	0x40020458
 80048e4:	40020470 	.word	0x40020470
 80048e8:	40020488 	.word	0x40020488
 80048ec:	400204a0 	.word	0x400204a0
 80048f0:	400204b8 	.word	0x400204b8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bf14      	ite	ne
 8004902:	2301      	movne	r3, #1
 8004904:	2300      	moveq	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8087 	beq.w	8004a1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	2220      	movs	r2, #32
 8004918:	409a      	lsls	r2, r3
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b04      	cmp	r3, #4
 8004928:	d139      	bne.n	800499e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0216 	bic.w	r2, r2, #22
 8004938:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004948:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <HAL_DMA_IRQHandler+0x736>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0208 	bic.w	r2, r2, #8
 8004968:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	223f      	movs	r2, #63	; 0x3f
 8004974:	409a      	lsls	r2, r3
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 834a 	beq.w	8005028 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4798      	blx	r3
          }
          return;
 800499c:	e344      	b.n	8005028 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d018      	beq.n	80049de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d108      	bne.n	80049cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d02c      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
 80049ca:	e027      	b.n	8004a1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d023      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
 80049dc:	e01e      	b.n	8004a1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10f      	bne.n	8004a0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0210 	bic.w	r2, r2, #16
 80049fa:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8306 	beq.w	8005032 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8088 	beq.w	8004b44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2204      	movs	r2, #4
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a7a      	ldr	r2, [pc, #488]	; (8004c2c <HAL_DMA_IRQHandler+0xa08>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d04a      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a79      	ldr	r2, [pc, #484]	; (8004c30 <HAL_DMA_IRQHandler+0xa0c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d045      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a77      	ldr	r2, [pc, #476]	; (8004c34 <HAL_DMA_IRQHandler+0xa10>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d040      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a76      	ldr	r2, [pc, #472]	; (8004c38 <HAL_DMA_IRQHandler+0xa14>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d03b      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a74      	ldr	r2, [pc, #464]	; (8004c3c <HAL_DMA_IRQHandler+0xa18>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d036      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a73      	ldr	r2, [pc, #460]	; (8004c40 <HAL_DMA_IRQHandler+0xa1c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d031      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a71      	ldr	r2, [pc, #452]	; (8004c44 <HAL_DMA_IRQHandler+0xa20>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02c      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a70      	ldr	r2, [pc, #448]	; (8004c48 <HAL_DMA_IRQHandler+0xa24>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d027      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6e      	ldr	r2, [pc, #440]	; (8004c4c <HAL_DMA_IRQHandler+0xa28>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d022      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a6d      	ldr	r2, [pc, #436]	; (8004c50 <HAL_DMA_IRQHandler+0xa2c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d01d      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a6b      	ldr	r2, [pc, #428]	; (8004c54 <HAL_DMA_IRQHandler+0xa30>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d018      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a6a      	ldr	r2, [pc, #424]	; (8004c58 <HAL_DMA_IRQHandler+0xa34>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a68      	ldr	r2, [pc, #416]	; (8004c5c <HAL_DMA_IRQHandler+0xa38>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00e      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a67      	ldr	r2, [pc, #412]	; (8004c60 <HAL_DMA_IRQHandler+0xa3c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d009      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a65      	ldr	r2, [pc, #404]	; (8004c64 <HAL_DMA_IRQHandler+0xa40>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_DMA_IRQHandler+0x8b8>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a64      	ldr	r2, [pc, #400]	; (8004c68 <HAL_DMA_IRQHandler+0xa44>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d108      	bne.n	8004aee <HAL_DMA_IRQHandler+0x8ca>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	e007      	b.n	8004afe <HAL_DMA_IRQHandler+0x8da>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0201 	bic.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d307      	bcc.n	8004b1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f2      	bne.n	8004afe <HAL_DMA_IRQHandler+0x8da>
 8004b18:	e000      	b.n	8004b1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004b1a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2203      	movs	r2, #3
 8004b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004b3a:	e003      	b.n	8004b44 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8272 	beq.w	8005032 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
 8004b56:	e26c      	b.n	8005032 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a43      	ldr	r2, [pc, #268]	; (8004c6c <HAL_DMA_IRQHandler+0xa48>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d022      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x984>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a42      	ldr	r2, [pc, #264]	; (8004c70 <HAL_DMA_IRQHandler+0xa4c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x984>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a40      	ldr	r2, [pc, #256]	; (8004c74 <HAL_DMA_IRQHandler+0xa50>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x984>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a3f      	ldr	r2, [pc, #252]	; (8004c78 <HAL_DMA_IRQHandler+0xa54>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x984>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a3d      	ldr	r2, [pc, #244]	; (8004c7c <HAL_DMA_IRQHandler+0xa58>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x984>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	; (8004c80 <HAL_DMA_IRQHandler+0xa5c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x984>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3a      	ldr	r2, [pc, #232]	; (8004c84 <HAL_DMA_IRQHandler+0xa60>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x984>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a39      	ldr	r2, [pc, #228]	; (8004c88 <HAL_DMA_IRQHandler+0xa64>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_DMA_IRQHandler+0x988>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <HAL_DMA_IRQHandler+0x98a>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 823f 	beq.w	8005032 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80cd 	beq.w	8004d6c <HAL_DMA_IRQHandler+0xb48>
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80c7 	beq.w	8004d6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2204      	movs	r2, #4
 8004be8:	409a      	lsls	r2, r3
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d049      	beq.n	8004c8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8210 	beq.w	800502c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c14:	e20a      	b.n	800502c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8206 	beq.w	800502c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c28:	e200      	b.n	800502c <HAL_DMA_IRQHandler+0xe08>
 8004c2a:	bf00      	nop
 8004c2c:	40020010 	.word	0x40020010
 8004c30:	40020028 	.word	0x40020028
 8004c34:	40020040 	.word	0x40020040
 8004c38:	40020058 	.word	0x40020058
 8004c3c:	40020070 	.word	0x40020070
 8004c40:	40020088 	.word	0x40020088
 8004c44:	400200a0 	.word	0x400200a0
 8004c48:	400200b8 	.word	0x400200b8
 8004c4c:	40020410 	.word	0x40020410
 8004c50:	40020428 	.word	0x40020428
 8004c54:	40020440 	.word	0x40020440
 8004c58:	40020458 	.word	0x40020458
 8004c5c:	40020470 	.word	0x40020470
 8004c60:	40020488 	.word	0x40020488
 8004c64:	400204a0 	.word	0x400204a0
 8004c68:	400204b8 	.word	0x400204b8
 8004c6c:	58025408 	.word	0x58025408
 8004c70:	5802541c 	.word	0x5802541c
 8004c74:	58025430 	.word	0x58025430
 8004c78:	58025444 	.word	0x58025444
 8004c7c:	58025458 	.word	0x58025458
 8004c80:	5802546c 	.word	0x5802546c
 8004c84:	58025480 	.word	0x58025480
 8004c88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d160      	bne.n	8004d58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a8c      	ldr	r2, [pc, #560]	; (8004ecc <HAL_DMA_IRQHandler+0xca8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d04a      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a8a      	ldr	r2, [pc, #552]	; (8004ed0 <HAL_DMA_IRQHandler+0xcac>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d045      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a89      	ldr	r2, [pc, #548]	; (8004ed4 <HAL_DMA_IRQHandler+0xcb0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d040      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a87      	ldr	r2, [pc, #540]	; (8004ed8 <HAL_DMA_IRQHandler+0xcb4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d03b      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a86      	ldr	r2, [pc, #536]	; (8004edc <HAL_DMA_IRQHandler+0xcb8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d036      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a84      	ldr	r2, [pc, #528]	; (8004ee0 <HAL_DMA_IRQHandler+0xcbc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d031      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a83      	ldr	r2, [pc, #524]	; (8004ee4 <HAL_DMA_IRQHandler+0xcc0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d02c      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a81      	ldr	r2, [pc, #516]	; (8004ee8 <HAL_DMA_IRQHandler+0xcc4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d027      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a80      	ldr	r2, [pc, #512]	; (8004eec <HAL_DMA_IRQHandler+0xcc8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a7e      	ldr	r2, [pc, #504]	; (8004ef0 <HAL_DMA_IRQHandler+0xccc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a7d      	ldr	r2, [pc, #500]	; (8004ef4 <HAL_DMA_IRQHandler+0xcd0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a7b      	ldr	r2, [pc, #492]	; (8004ef8 <HAL_DMA_IRQHandler+0xcd4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a7a      	ldr	r2, [pc, #488]	; (8004efc <HAL_DMA_IRQHandler+0xcd8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a78      	ldr	r2, [pc, #480]	; (8004f00 <HAL_DMA_IRQHandler+0xcdc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a77      	ldr	r2, [pc, #476]	; (8004f04 <HAL_DMA_IRQHandler+0xce0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xb12>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a75      	ldr	r2, [pc, #468]	; (8004f08 <HAL_DMA_IRQHandler+0xce4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d108      	bne.n	8004d48 <HAL_DMA_IRQHandler+0xb24>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0208 	bic.w	r2, r2, #8
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e007      	b.n	8004d58 <HAL_DMA_IRQHandler+0xb34>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0204 	bic.w	r2, r2, #4
 8004d56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8165 	beq.w	800502c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d6a:	e15f      	b.n	800502c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d70:	f003 031f 	and.w	r3, r3, #31
 8004d74:	2202      	movs	r2, #2
 8004d76:	409a      	lsls	r2, r3
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80c5 	beq.w	8004f0c <HAL_DMA_IRQHandler+0xce8>
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80bf 	beq.w	8004f0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2202      	movs	r2, #2
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d018      	beq.n	8004dda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 813a 	beq.w	8005030 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dc4:	e134      	b.n	8005030 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8130 	beq.w	8005030 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dd8:	e12a      	b.n	8005030 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d168      	bne.n	8004eb6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a38      	ldr	r2, [pc, #224]	; (8004ecc <HAL_DMA_IRQHandler+0xca8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d04a      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a37      	ldr	r2, [pc, #220]	; (8004ed0 <HAL_DMA_IRQHandler+0xcac>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d045      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a35      	ldr	r2, [pc, #212]	; (8004ed4 <HAL_DMA_IRQHandler+0xcb0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d040      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a34      	ldr	r2, [pc, #208]	; (8004ed8 <HAL_DMA_IRQHandler+0xcb4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d03b      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a32      	ldr	r2, [pc, #200]	; (8004edc <HAL_DMA_IRQHandler+0xcb8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d036      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a31      	ldr	r2, [pc, #196]	; (8004ee0 <HAL_DMA_IRQHandler+0xcbc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d031      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a2f      	ldr	r2, [pc, #188]	; (8004ee4 <HAL_DMA_IRQHandler+0xcc0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d02c      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a2e      	ldr	r2, [pc, #184]	; (8004ee8 <HAL_DMA_IRQHandler+0xcc4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d027      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2c      	ldr	r2, [pc, #176]	; (8004eec <HAL_DMA_IRQHandler+0xcc8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d022      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2b      	ldr	r2, [pc, #172]	; (8004ef0 <HAL_DMA_IRQHandler+0xccc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d01d      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a29      	ldr	r2, [pc, #164]	; (8004ef4 <HAL_DMA_IRQHandler+0xcd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d018      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a28      	ldr	r2, [pc, #160]	; (8004ef8 <HAL_DMA_IRQHandler+0xcd4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a26      	ldr	r2, [pc, #152]	; (8004efc <HAL_DMA_IRQHandler+0xcd8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a25      	ldr	r2, [pc, #148]	; (8004f00 <HAL_DMA_IRQHandler+0xcdc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a23      	ldr	r2, [pc, #140]	; (8004f04 <HAL_DMA_IRQHandler+0xce0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xc60>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a22      	ldr	r2, [pc, #136]	; (8004f08 <HAL_DMA_IRQHandler+0xce4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d108      	bne.n	8004e96 <HAL_DMA_IRQHandler+0xc72>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0214 	bic.w	r2, r2, #20
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	e007      	b.n	8004ea6 <HAL_DMA_IRQHandler+0xc82>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 020a 	bic.w	r2, r2, #10
 8004ea4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80b8 	beq.w	8005030 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ec8:	e0b2      	b.n	8005030 <HAL_DMA_IRQHandler+0xe0c>
 8004eca:	bf00      	nop
 8004ecc:	40020010 	.word	0x40020010
 8004ed0:	40020028 	.word	0x40020028
 8004ed4:	40020040 	.word	0x40020040
 8004ed8:	40020058 	.word	0x40020058
 8004edc:	40020070 	.word	0x40020070
 8004ee0:	40020088 	.word	0x40020088
 8004ee4:	400200a0 	.word	0x400200a0
 8004ee8:	400200b8 	.word	0x400200b8
 8004eec:	40020410 	.word	0x40020410
 8004ef0:	40020428 	.word	0x40020428
 8004ef4:	40020440 	.word	0x40020440
 8004ef8:	40020458 	.word	0x40020458
 8004efc:	40020470 	.word	0x40020470
 8004f00:	40020488 	.word	0x40020488
 8004f04:	400204a0 	.word	0x400204a0
 8004f08:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	2208      	movs	r2, #8
 8004f16:	409a      	lsls	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8088 	beq.w	8005032 <HAL_DMA_IRQHandler+0xe0e>
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8082 	beq.w	8005032 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a41      	ldr	r2, [pc, #260]	; (8005038 <HAL_DMA_IRQHandler+0xe14>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d04a      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3f      	ldr	r2, [pc, #252]	; (800503c <HAL_DMA_IRQHandler+0xe18>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d045      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3e      	ldr	r2, [pc, #248]	; (8005040 <HAL_DMA_IRQHandler+0xe1c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d040      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3c      	ldr	r2, [pc, #240]	; (8005044 <HAL_DMA_IRQHandler+0xe20>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d03b      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a3b      	ldr	r2, [pc, #236]	; (8005048 <HAL_DMA_IRQHandler+0xe24>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d036      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a39      	ldr	r2, [pc, #228]	; (800504c <HAL_DMA_IRQHandler+0xe28>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d031      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a38      	ldr	r2, [pc, #224]	; (8005050 <HAL_DMA_IRQHandler+0xe2c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d02c      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a36      	ldr	r2, [pc, #216]	; (8005054 <HAL_DMA_IRQHandler+0xe30>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d027      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a35      	ldr	r2, [pc, #212]	; (8005058 <HAL_DMA_IRQHandler+0xe34>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d022      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a33      	ldr	r2, [pc, #204]	; (800505c <HAL_DMA_IRQHandler+0xe38>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01d      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a32      	ldr	r2, [pc, #200]	; (8005060 <HAL_DMA_IRQHandler+0xe3c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d018      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a30      	ldr	r2, [pc, #192]	; (8005064 <HAL_DMA_IRQHandler+0xe40>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <HAL_DMA_IRQHandler+0xe44>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00e      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2d      	ldr	r2, [pc, #180]	; (800506c <HAL_DMA_IRQHandler+0xe48>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d009      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2c      	ldr	r2, [pc, #176]	; (8005070 <HAL_DMA_IRQHandler+0xe4c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d004      	beq.n	8004fce <HAL_DMA_IRQHandler+0xdaa>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <HAL_DMA_IRQHandler+0xe50>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d108      	bne.n	8004fe0 <HAL_DMA_IRQHandler+0xdbc>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 021c 	bic.w	r2, r2, #28
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e007      	b.n	8004ff0 <HAL_DMA_IRQHandler+0xdcc>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 020e 	bic.w	r2, r2, #14
 8004fee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	4798      	blx	r3
 8005026:	e004      	b.n	8005032 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005028:	bf00      	nop
 800502a:	e002      	b.n	8005032 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800502c:	bf00      	nop
 800502e:	e000      	b.n	8005032 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005030:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005032:	3728      	adds	r7, #40	; 0x28
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40020010 	.word	0x40020010
 800503c:	40020028 	.word	0x40020028
 8005040:	40020040 	.word	0x40020040
 8005044:	40020058 	.word	0x40020058
 8005048:	40020070 	.word	0x40020070
 800504c:	40020088 	.word	0x40020088
 8005050:	400200a0 	.word	0x400200a0
 8005054:	400200b8 	.word	0x400200b8
 8005058:	40020410 	.word	0x40020410
 800505c:	40020428 	.word	0x40020428
 8005060:	40020440 	.word	0x40020440
 8005064:	40020458 	.word	0x40020458
 8005068:	40020470 	.word	0x40020470
 800506c:	40020488 	.word	0x40020488
 8005070:	400204a0 	.word	0x400204a0
 8005074:	400204b8 	.word	0x400204b8

08005078 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a84      	ldr	r2, [pc, #528]	; (80052a8 <DMA_SetConfig+0x230>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d072      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a82      	ldr	r2, [pc, #520]	; (80052ac <DMA_SetConfig+0x234>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d06d      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a81      	ldr	r2, [pc, #516]	; (80052b0 <DMA_SetConfig+0x238>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d068      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a7f      	ldr	r2, [pc, #508]	; (80052b4 <DMA_SetConfig+0x23c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d063      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a7e      	ldr	r2, [pc, #504]	; (80052b8 <DMA_SetConfig+0x240>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d05e      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a7c      	ldr	r2, [pc, #496]	; (80052bc <DMA_SetConfig+0x244>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d059      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a7b      	ldr	r2, [pc, #492]	; (80052c0 <DMA_SetConfig+0x248>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d054      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a79      	ldr	r2, [pc, #484]	; (80052c4 <DMA_SetConfig+0x24c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d04f      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a78      	ldr	r2, [pc, #480]	; (80052c8 <DMA_SetConfig+0x250>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d04a      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a76      	ldr	r2, [pc, #472]	; (80052cc <DMA_SetConfig+0x254>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d045      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a75      	ldr	r2, [pc, #468]	; (80052d0 <DMA_SetConfig+0x258>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d040      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a73      	ldr	r2, [pc, #460]	; (80052d4 <DMA_SetConfig+0x25c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d03b      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a72      	ldr	r2, [pc, #456]	; (80052d8 <DMA_SetConfig+0x260>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d036      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a70      	ldr	r2, [pc, #448]	; (80052dc <DMA_SetConfig+0x264>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d031      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6f      	ldr	r2, [pc, #444]	; (80052e0 <DMA_SetConfig+0x268>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d02c      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a6d      	ldr	r2, [pc, #436]	; (80052e4 <DMA_SetConfig+0x26c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d027      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a6c      	ldr	r2, [pc, #432]	; (80052e8 <DMA_SetConfig+0x270>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d022      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a6a      	ldr	r2, [pc, #424]	; (80052ec <DMA_SetConfig+0x274>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01d      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a69      	ldr	r2, [pc, #420]	; (80052f0 <DMA_SetConfig+0x278>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d018      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a67      	ldr	r2, [pc, #412]	; (80052f4 <DMA_SetConfig+0x27c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a66      	ldr	r2, [pc, #408]	; (80052f8 <DMA_SetConfig+0x280>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a64      	ldr	r2, [pc, #400]	; (80052fc <DMA_SetConfig+0x284>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d009      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a63      	ldr	r2, [pc, #396]	; (8005300 <DMA_SetConfig+0x288>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a61      	ldr	r2, [pc, #388]	; (8005304 <DMA_SetConfig+0x28c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d101      	bne.n	8005186 <DMA_SetConfig+0x10e>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <DMA_SetConfig+0x110>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00d      	beq.n	80051a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005194:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a3e      	ldr	r2, [pc, #248]	; (80052a8 <DMA_SetConfig+0x230>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d04a      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a3d      	ldr	r2, [pc, #244]	; (80052ac <DMA_SetConfig+0x234>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d045      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a3b      	ldr	r2, [pc, #236]	; (80052b0 <DMA_SetConfig+0x238>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d040      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a3a      	ldr	r2, [pc, #232]	; (80052b4 <DMA_SetConfig+0x23c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d03b      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a38      	ldr	r2, [pc, #224]	; (80052b8 <DMA_SetConfig+0x240>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d036      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a37      	ldr	r2, [pc, #220]	; (80052bc <DMA_SetConfig+0x244>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d031      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a35      	ldr	r2, [pc, #212]	; (80052c0 <DMA_SetConfig+0x248>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d02c      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a34      	ldr	r2, [pc, #208]	; (80052c4 <DMA_SetConfig+0x24c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d027      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a32      	ldr	r2, [pc, #200]	; (80052c8 <DMA_SetConfig+0x250>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a31      	ldr	r2, [pc, #196]	; (80052cc <DMA_SetConfig+0x254>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d01d      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2f      	ldr	r2, [pc, #188]	; (80052d0 <DMA_SetConfig+0x258>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2e      	ldr	r2, [pc, #184]	; (80052d4 <DMA_SetConfig+0x25c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a2c      	ldr	r2, [pc, #176]	; (80052d8 <DMA_SetConfig+0x260>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2b      	ldr	r2, [pc, #172]	; (80052dc <DMA_SetConfig+0x264>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <DMA_SetConfig+0x268>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <DMA_SetConfig+0x26c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d101      	bne.n	800524c <DMA_SetConfig+0x1d4>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <DMA_SetConfig+0x1d6>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d05a      	beq.n	8005308 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	223f      	movs	r2, #63	; 0x3f
 800525c:	409a      	lsls	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005270:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d108      	bne.n	8005294 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005292:	e087      	b.n	80053a4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]
}
 80052a4:	e07e      	b.n	80053a4 <DMA_SetConfig+0x32c>
 80052a6:	bf00      	nop
 80052a8:	40020010 	.word	0x40020010
 80052ac:	40020028 	.word	0x40020028
 80052b0:	40020040 	.word	0x40020040
 80052b4:	40020058 	.word	0x40020058
 80052b8:	40020070 	.word	0x40020070
 80052bc:	40020088 	.word	0x40020088
 80052c0:	400200a0 	.word	0x400200a0
 80052c4:	400200b8 	.word	0x400200b8
 80052c8:	40020410 	.word	0x40020410
 80052cc:	40020428 	.word	0x40020428
 80052d0:	40020440 	.word	0x40020440
 80052d4:	40020458 	.word	0x40020458
 80052d8:	40020470 	.word	0x40020470
 80052dc:	40020488 	.word	0x40020488
 80052e0:	400204a0 	.word	0x400204a0
 80052e4:	400204b8 	.word	0x400204b8
 80052e8:	58025408 	.word	0x58025408
 80052ec:	5802541c 	.word	0x5802541c
 80052f0:	58025430 	.word	0x58025430
 80052f4:	58025444 	.word	0x58025444
 80052f8:	58025458 	.word	0x58025458
 80052fc:	5802546c 	.word	0x5802546c
 8005300:	58025480 	.word	0x58025480
 8005304:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a28      	ldr	r2, [pc, #160]	; (80053b0 <DMA_SetConfig+0x338>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d022      	beq.n	8005358 <DMA_SetConfig+0x2e0>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a27      	ldr	r2, [pc, #156]	; (80053b4 <DMA_SetConfig+0x33c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d01d      	beq.n	8005358 <DMA_SetConfig+0x2e0>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a25      	ldr	r2, [pc, #148]	; (80053b8 <DMA_SetConfig+0x340>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d018      	beq.n	8005358 <DMA_SetConfig+0x2e0>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a24      	ldr	r2, [pc, #144]	; (80053bc <DMA_SetConfig+0x344>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <DMA_SetConfig+0x2e0>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a22      	ldr	r2, [pc, #136]	; (80053c0 <DMA_SetConfig+0x348>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <DMA_SetConfig+0x2e0>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a21      	ldr	r2, [pc, #132]	; (80053c4 <DMA_SetConfig+0x34c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d009      	beq.n	8005358 <DMA_SetConfig+0x2e0>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <DMA_SetConfig+0x350>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <DMA_SetConfig+0x2e0>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <DMA_SetConfig+0x354>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d101      	bne.n	800535c <DMA_SetConfig+0x2e4>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <DMA_SetConfig+0x2e6>
 800535c:	2300      	movs	r3, #0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d020      	beq.n	80053a4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	2201      	movs	r2, #1
 800536c:	409a      	lsls	r2, r3
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d108      	bne.n	8005394 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	60da      	str	r2, [r3, #12]
}
 8005392:	e007      	b.n	80053a4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	60da      	str	r2, [r3, #12]
}
 80053a4:	bf00      	nop
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	58025408 	.word	0x58025408
 80053b4:	5802541c 	.word	0x5802541c
 80053b8:	58025430 	.word	0x58025430
 80053bc:	58025444 	.word	0x58025444
 80053c0:	58025458 	.word	0x58025458
 80053c4:	5802546c 	.word	0x5802546c
 80053c8:	58025480 	.word	0x58025480
 80053cc:	58025494 	.word	0x58025494

080053d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a42      	ldr	r2, [pc, #264]	; (80054e8 <DMA_CalcBaseAndBitshift+0x118>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d04a      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a41      	ldr	r2, [pc, #260]	; (80054ec <DMA_CalcBaseAndBitshift+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d045      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3f      	ldr	r2, [pc, #252]	; (80054f0 <DMA_CalcBaseAndBitshift+0x120>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d040      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3e      	ldr	r2, [pc, #248]	; (80054f4 <DMA_CalcBaseAndBitshift+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d03b      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3c      	ldr	r2, [pc, #240]	; (80054f8 <DMA_CalcBaseAndBitshift+0x128>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d036      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3b      	ldr	r2, [pc, #236]	; (80054fc <DMA_CalcBaseAndBitshift+0x12c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d031      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a39      	ldr	r2, [pc, #228]	; (8005500 <DMA_CalcBaseAndBitshift+0x130>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d02c      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a38      	ldr	r2, [pc, #224]	; (8005504 <DMA_CalcBaseAndBitshift+0x134>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d027      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a36      	ldr	r2, [pc, #216]	; (8005508 <DMA_CalcBaseAndBitshift+0x138>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d022      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a35      	ldr	r2, [pc, #212]	; (800550c <DMA_CalcBaseAndBitshift+0x13c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d01d      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a33      	ldr	r2, [pc, #204]	; (8005510 <DMA_CalcBaseAndBitshift+0x140>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d018      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a32      	ldr	r2, [pc, #200]	; (8005514 <DMA_CalcBaseAndBitshift+0x144>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a30      	ldr	r2, [pc, #192]	; (8005518 <DMA_CalcBaseAndBitshift+0x148>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2f      	ldr	r2, [pc, #188]	; (800551c <DMA_CalcBaseAndBitshift+0x14c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2d      	ldr	r2, [pc, #180]	; (8005520 <DMA_CalcBaseAndBitshift+0x150>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2c      	ldr	r2, [pc, #176]	; (8005524 <DMA_CalcBaseAndBitshift+0x154>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d101      	bne.n	800547c <DMA_CalcBaseAndBitshift+0xac>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <DMA_CalcBaseAndBitshift+0xae>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d024      	beq.n	80054cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	3b10      	subs	r3, #16
 800548a:	4a27      	ldr	r2, [pc, #156]	; (8005528 <DMA_CalcBaseAndBitshift+0x158>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	4a24      	ldr	r2, [pc, #144]	; (800552c <DMA_CalcBaseAndBitshift+0x15c>)
 800549c:	5cd3      	ldrb	r3, [r2, r3]
 800549e:	461a      	mov	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d908      	bls.n	80054bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	4b1f      	ldr	r3, [pc, #124]	; (8005530 <DMA_CalcBaseAndBitshift+0x160>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	1d1a      	adds	r2, r3, #4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	659a      	str	r2, [r3, #88]	; 0x58
 80054ba:	e00d      	b.n	80054d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <DMA_CalcBaseAndBitshift+0x160>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6593      	str	r3, [r2, #88]	; 0x58
 80054ca:	e005      	b.n	80054d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40020010 	.word	0x40020010
 80054ec:	40020028 	.word	0x40020028
 80054f0:	40020040 	.word	0x40020040
 80054f4:	40020058 	.word	0x40020058
 80054f8:	40020070 	.word	0x40020070
 80054fc:	40020088 	.word	0x40020088
 8005500:	400200a0 	.word	0x400200a0
 8005504:	400200b8 	.word	0x400200b8
 8005508:	40020410 	.word	0x40020410
 800550c:	40020428 	.word	0x40020428
 8005510:	40020440 	.word	0x40020440
 8005514:	40020458 	.word	0x40020458
 8005518:	40020470 	.word	0x40020470
 800551c:	40020488 	.word	0x40020488
 8005520:	400204a0 	.word	0x400204a0
 8005524:	400204b8 	.word	0x400204b8
 8005528:	aaaaaaab 	.word	0xaaaaaaab
 800552c:	080144dc 	.word	0x080144dc
 8005530:	fffffc00 	.word	0xfffffc00

08005534 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d120      	bne.n	800558a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	2b03      	cmp	r3, #3
 800554e:	d858      	bhi.n	8005602 <DMA_CheckFifoParam+0xce>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <DMA_CheckFifoParam+0x24>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	08005569 	.word	0x08005569
 800555c:	0800557b 	.word	0x0800557b
 8005560:	08005569 	.word	0x08005569
 8005564:	08005603 	.word	0x08005603
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d048      	beq.n	8005606 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005578:	e045      	b.n	8005606 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005582:	d142      	bne.n	800560a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005588:	e03f      	b.n	800560a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005592:	d123      	bne.n	80055dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	2b03      	cmp	r3, #3
 800559a:	d838      	bhi.n	800560e <DMA_CheckFifoParam+0xda>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <DMA_CheckFifoParam+0x70>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055b5 	.word	0x080055b5
 80055a8:	080055bb 	.word	0x080055bb
 80055ac:	080055b5 	.word	0x080055b5
 80055b0:	080055cd 	.word	0x080055cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	73fb      	strb	r3, [r7, #15]
        break;
 80055b8:	e030      	b.n	800561c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d025      	beq.n	8005612 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055ca:	e022      	b.n	8005612 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055d4:	d11f      	bne.n	8005616 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055da:	e01c      	b.n	8005616 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d902      	bls.n	80055ea <DMA_CheckFifoParam+0xb6>
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d003      	beq.n	80055f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80055e8:	e018      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	73fb      	strb	r3, [r7, #15]
        break;
 80055ee:	e015      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00e      	beq.n	800561a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005600:	e00b      	b.n	800561a <DMA_CheckFifoParam+0xe6>
        break;
 8005602:	bf00      	nop
 8005604:	e00a      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        break;
 8005606:	bf00      	nop
 8005608:	e008      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        break;
 800560a:	bf00      	nop
 800560c:	e006      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        break;
 800560e:	bf00      	nop
 8005610:	e004      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        break;
 8005612:	bf00      	nop
 8005614:	e002      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        break;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <DMA_CheckFifoParam+0xe8>
    break;
 800561a:	bf00      	nop
    }
  }

  return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop

0800562c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a38      	ldr	r2, [pc, #224]	; (8005720 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a36      	ldr	r2, [pc, #216]	; (8005724 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01d      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a35      	ldr	r2, [pc, #212]	; (8005728 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a33      	ldr	r2, [pc, #204]	; (800572c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a32      	ldr	r2, [pc, #200]	; (8005730 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a30      	ldr	r2, [pc, #192]	; (8005734 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2f      	ldr	r2, [pc, #188]	; (8005738 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2d      	ldr	r2, [pc, #180]	; (800573c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01a      	beq.n	80056ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	3b08      	subs	r3, #8
 800569c:	4a28      	ldr	r2, [pc, #160]	; (8005740 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	091b      	lsrs	r3, r3, #4
 80056a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4b26      	ldr	r3, [pc, #152]	; (8005744 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a24      	ldr	r2, [pc, #144]	; (8005748 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80056b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2201      	movs	r2, #1
 80056c2:	409a      	lsls	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80056c8:	e024      	b.n	8005714 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	3b10      	subs	r3, #16
 80056d2:	4a1e      	ldr	r2, [pc, #120]	; (800574c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4a1c      	ldr	r2, [pc, #112]	; (8005750 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d806      	bhi.n	80056f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4a1b      	ldr	r2, [pc, #108]	; (8005754 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d902      	bls.n	80056f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3308      	adds	r3, #8
 80056f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4b18      	ldr	r3, [pc, #96]	; (8005758 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a16      	ldr	r2, [pc, #88]	; (800575c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005704:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2201      	movs	r2, #1
 800570e:	409a      	lsls	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	58025408 	.word	0x58025408
 8005724:	5802541c 	.word	0x5802541c
 8005728:	58025430 	.word	0x58025430
 800572c:	58025444 	.word	0x58025444
 8005730:	58025458 	.word	0x58025458
 8005734:	5802546c 	.word	0x5802546c
 8005738:	58025480 	.word	0x58025480
 800573c:	58025494 	.word	0x58025494
 8005740:	cccccccd 	.word	0xcccccccd
 8005744:	16009600 	.word	0x16009600
 8005748:	58025880 	.word	0x58025880
 800574c:	aaaaaaab 	.word	0xaaaaaaab
 8005750:	400204b8 	.word	0x400204b8
 8005754:	4002040f 	.word	0x4002040f
 8005758:	10008200 	.word	0x10008200
 800575c:	40020880 	.word	0x40020880

08005760 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d04a      	beq.n	800580c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d847      	bhi.n	800580c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a25      	ldr	r2, [pc, #148]	; (8005818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d022      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a24      	ldr	r2, [pc, #144]	; (800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d01d      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a22      	ldr	r2, [pc, #136]	; (8005820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d018      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a21      	ldr	r2, [pc, #132]	; (8005824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a1f      	ldr	r2, [pc, #124]	; (8005828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a1e      	ldr	r2, [pc, #120]	; (800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d009      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1c      	ldr	r2, [pc, #112]	; (8005830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1b      	ldr	r2, [pc, #108]	; (8005834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d101      	bne.n	80057d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4b17      	ldr	r3, [pc, #92]	; (8005838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	461a      	mov	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a15      	ldr	r2, [pc, #84]	; (800583c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80057e8:	671a      	str	r2, [r3, #112]	; 0x70
 80057ea:	e009      	b.n	8005800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4b14      	ldr	r3, [pc, #80]	; (8005840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	461a      	mov	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a11      	ldr	r2, [pc, #68]	; (8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80057fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3b01      	subs	r3, #1
 8005804:	2201      	movs	r2, #1
 8005806:	409a      	lsls	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	58025408 	.word	0x58025408
 800581c:	5802541c 	.word	0x5802541c
 8005820:	58025430 	.word	0x58025430
 8005824:	58025444 	.word	0x58025444
 8005828:	58025458 	.word	0x58025458
 800582c:	5802546c 	.word	0x5802546c
 8005830:	58025480 	.word	0x58025480
 8005834:	58025494 	.word	0x58025494
 8005838:	1600963f 	.word	0x1600963f
 800583c:	58025940 	.word	0x58025940
 8005840:	1000823f 	.word	0x1000823f
 8005844:	40020940 	.word	0x40020940

08005848 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e0c6      	b.n	80059e8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fb fcf2 	bl	800124c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2223      	movs	r2, #35	; 0x23
 800586c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586e:	4b60      	ldr	r3, [pc, #384]	; (80059f0 <HAL_ETH_Init+0x1a8>)
 8005870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005874:	4a5e      	ldr	r2, [pc, #376]	; (80059f0 <HAL_ETH_Init+0x1a8>)
 8005876:	f043 0302 	orr.w	r3, r3, #2
 800587a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800587e:	4b5c      	ldr	r3, [pc, #368]	; (80059f0 <HAL_ETH_Init+0x1a8>)
 8005880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	7a1b      	ldrb	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d103      	bne.n	800589c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005894:	2000      	movs	r0, #0
 8005896:	f7fc f8c3 	bl	8001a20 <HAL_SYSCFG_ETHInterfaceSelect>
 800589a:	e003      	b.n	80058a4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800589c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80058a0:	f7fc f8be 	bl	8001a20 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058bc:	f7fc f876 	bl	80019ac <HAL_GetTick>
 80058c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80058c2:	e00f      	b.n	80058e4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80058c4:	f7fc f872 	bl	80019ac <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80058d2:	d907      	bls.n	80058e4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2204      	movs	r2, #4
 80058d8:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	22e0      	movs	r2, #224	; 0xe0
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e081      	b.n	80059e8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e6      	bne.n	80058c4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fac0 	bl	8005e7c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80058fc:	f002 fe86 	bl	800860c <HAL_RCC_GetHCLKFreq>
 8005900:	4602      	mov	r2, r0
 8005902:	4b3c      	ldr	r3, [pc, #240]	; (80059f4 <HAL_ETH_Init+0x1ac>)
 8005904:	fba3 2302 	umull	r2, r3, r3, r2
 8005908:	0c9a      	lsrs	r2, r3, #18
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3a01      	subs	r2, #1
 8005910:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fa13 	bl	8005d40 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005930:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005934:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	22e0      	movs	r2, #224	; 0xe0
 800594c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e04a      	b.n	80059e8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	f241 1308 	movw	r3, #4360	; 0x1108
 800595a:	4413      	add	r3, r2
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <HAL_ETH_Init+0x1b0>)
 8005960:	4013      	ands	r3, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6952      	ldr	r2, [r2, #20]
 8005966:	0052      	lsls	r2, r2, #1
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	6809      	ldr	r1, [r1, #0]
 800596c:	431a      	orrs	r2, r3
 800596e:	f241 1308 	movw	r3, #4360	; 0x1108
 8005972:	440b      	add	r3, r1
 8005974:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fad8 	bl	8005f2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fb1c 	bl	8005fba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	3305      	adds	r3, #5
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	021a      	lsls	r2, r3, #8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	3304      	adds	r3, #4
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	4619      	mov	r1, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	3303      	adds	r3, #3
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	061a      	lsls	r2, r3, #24
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	3302      	adds	r3, #2
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	041b      	lsls	r3, r3, #16
 80059b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	3301      	adds	r3, #1
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80059c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80059ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80059d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2210      	movs	r2, #16
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2210      	movs	r2, #16
 80059e4:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	58024400 	.word	0x58024400
 80059f4:	431bde83 	.word	0x431bde83
 80059f8:	ffff8001 	.word	0xffff8001

080059fc <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005a0e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	791b      	ldrb	r3, [r3, #4]
 8005a14:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005a16:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	7b1b      	ldrb	r3, [r3, #12]
 8005a1c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005a1e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	7b5b      	ldrb	r3, [r3, #13]
 8005a24:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a26:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	7b9b      	ldrb	r3, [r3, #14]
 8005a2c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	7bdb      	ldrb	r3, [r3, #15]
 8005a34:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a36:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	7c12      	ldrb	r2, [r2, #16]
 8005a3c:	2a00      	cmp	r2, #0
 8005a3e:	d102      	bne.n	8005a46 <ETH_SetMACConfig+0x4a>
 8005a40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a44:	e000      	b.n	8005a48 <ETH_SetMACConfig+0x4c>
 8005a46:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a48:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	7c52      	ldrb	r2, [r2, #17]
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	d102      	bne.n	8005a58 <ETH_SetMACConfig+0x5c>
 8005a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a56:	e000      	b.n	8005a5a <ETH_SetMACConfig+0x5e>
 8005a58:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a5a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	7c9b      	ldrb	r3, [r3, #18]
 8005a60:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005a62:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005a68:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005a6e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	7f1b      	ldrb	r3, [r3, #28]
 8005a74:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005a76:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	7f5b      	ldrb	r3, [r3, #29]
 8005a7c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005a7e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	7f92      	ldrb	r2, [r2, #30]
 8005a84:	2a00      	cmp	r2, #0
 8005a86:	d102      	bne.n	8005a8e <ETH_SetMACConfig+0x92>
 8005a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a8c:	e000      	b.n	8005a90 <ETH_SetMACConfig+0x94>
 8005a8e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005a90:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	7fdb      	ldrb	r3, [r3, #31]
 8005a96:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005a98:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005aa0:	2a00      	cmp	r2, #0
 8005aa2:	d102      	bne.n	8005aaa <ETH_SetMACConfig+0xae>
 8005aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aa8:	e000      	b.n	8005aac <ETH_SetMACConfig+0xb0>
 8005aaa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005aac:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005ab2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aba:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005abc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	4b56      	ldr	r3, [pc, #344]	; (8005c28 <ETH_SetMACConfig+0x22c>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	68f9      	ldr	r1, [r7, #12]
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ae6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005ae8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005af0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005af2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005afa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005afc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005b04:	2a00      	cmp	r2, #0
 8005b06:	d102      	bne.n	8005b0e <ETH_SetMACConfig+0x112>
 8005b08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b0c:	e000      	b.n	8005b10 <ETH_SetMACConfig+0x114>
 8005b0e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005b10:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	4b42      	ldr	r3, [pc, #264]	; (8005c2c <ETH_SetMACConfig+0x230>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b34:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	4b3a      	ldr	r3, [pc, #232]	; (8005c30 <ETH_SetMACConfig+0x234>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	68f9      	ldr	r1, [r7, #12]
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b58:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b5e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	d101      	bne.n	8005b6e <ETH_SetMACConfig+0x172>
 8005b6a:	2280      	movs	r2, #128	; 0x80
 8005b6c:	e000      	b.n	8005b70 <ETH_SetMACConfig+0x174>
 8005b6e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005b70:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b76:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b82:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005b86:	4013      	ands	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	68f9      	ldr	r1, [r7, #12]
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005b98:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005ba0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bae:	f023 0103 	bic.w	r1, r3, #3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005bc6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	d101      	bne.n	8005bea <ETH_SetMACConfig+0x1ee>
 8005be6:	2240      	movs	r2, #64	; 0x40
 8005be8:	e000      	b.n	8005bec <ETH_SetMACConfig+0x1f0>
 8005bea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005bec:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005bf4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005bf6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005bfe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005c0c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005c1c:	bf00      	nop
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	00048083 	.word	0x00048083
 8005c2c:	c0f88000 	.word	0xc0f88000
 8005c30:	fffffef0 	.word	0xfffffef0

08005c34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <ETH_SetDMAConfig+0xf8>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	6809      	ldr	r1, [r1, #0]
 8005c54:	431a      	orrs	r2, r3
 8005c56:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005c5a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	791b      	ldrb	r3, [r3, #4]
 8005c60:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005c66:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	7b1b      	ldrb	r3, [r3, #12]
 8005c6c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	f241 0304 	movw	r3, #4100	; 0x1004
 8005c7a:	4413      	add	r3, r2
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b2c      	ldr	r3, [pc, #176]	; (8005d30 <ETH_SetDMAConfig+0xfc>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6811      	ldr	r1, [r2, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	f241 0304 	movw	r3, #4100	; 0x1004
 8005c8e:	440b      	add	r3, r1
 8005c90:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	7b5b      	ldrb	r3, [r3, #13]
 8005c96:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b22      	ldr	r3, [pc, #136]	; (8005d34 <ETH_SetDMAConfig+0x100>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6811      	ldr	r1, [r2, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005cba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	7d1b      	ldrb	r3, [r3, #20]
 8005cc4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005cc6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	7f5b      	ldrb	r3, [r3, #29]
 8005ccc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	f241 1304 	movw	r3, #4356	; 0x1104
 8005cda:	4413      	add	r3, r2
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <ETH_SetDMAConfig+0x104>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6811      	ldr	r1, [r2, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	f241 1304 	movw	r3, #4356	; 0x1104
 8005cee:	440b      	add	r3, r1
 8005cf0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	7f1b      	ldrb	r3, [r3, #28]
 8005cf6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	f241 1308 	movw	r3, #4360	; 0x1108
 8005d08:	4413      	add	r3, r2
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <ETH_SetDMAConfig+0x108>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6811      	ldr	r1, [r2, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	f241 1308 	movw	r3, #4360	; 0x1108
 8005d1c:	440b      	add	r3, r1
 8005d1e:	601a      	str	r2, [r3, #0]
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	ffff87fd 	.word	0xffff87fd
 8005d30:	ffff2ffe 	.word	0xffff2ffe
 8005d34:	fffec000 	.word	0xfffec000
 8005d38:	ffc0efef 	.word	0xffc0efef
 8005d3c:	7fc0ffff 	.word	0x7fc0ffff

08005d40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b0a4      	sub	sp, #144	; 0x90
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005d64:	2301      	movs	r3, #1
 8005d66:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005d98:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005d9c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005da4:	2300      	movs	r3, #0
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005dd8:	2320      	movs	r3, #32
 8005dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005dea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005df4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff fde6 	bl	80059fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005e34:	2301      	movs	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005e4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005e50:	2300      	movs	r3, #0
 8005e52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005e54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005e60:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005e66:	f107 0308 	add.w	r3, r7, #8
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff fee1 	bl	8005c34 <ETH_SetDMAConfig>
}
 8005e72:	bf00      	nop
 8005e74:	3790      	adds	r7, #144	; 0x90
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005e96:	f002 fbb9 	bl	800860c <HAL_RCC_GetHCLKFreq>
 8005e9a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d908      	bls.n	8005eb6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a1d      	ldr	r2, [pc, #116]	; (8005f1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d804      	bhi.n	8005eb6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e027      	b.n	8005f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d908      	bls.n	8005ed0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d804      	bhi.n	8005ed0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e01a      	b.n	8005f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a13      	ldr	r2, [pc, #76]	; (8005f20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d903      	bls.n	8005ee0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4a12      	ldr	r2, [pc, #72]	; (8005f24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d911      	bls.n	8005f04 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4a10      	ldr	r2, [pc, #64]	; (8005f24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d908      	bls.n	8005efa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4a0f      	ldr	r2, [pc, #60]	; (8005f28 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d804      	bhi.n	8005efa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	e005      	b.n	8005f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	e000      	b.n	8005f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005f04:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	01312cff 	.word	0x01312cff
 8005f1c:	02160ebf 	.word	0x02160ebf
 8005f20:	039386ff 	.word	0x039386ff
 8005f24:	05f5e0ff 	.word	0x05f5e0ff
 8005f28:	08f0d17f 	.word	0x08f0d17f

08005f2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e01d      	b.n	8005f76 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68d9      	ldr	r1, [r3, #12]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4613      	mov	r3, r2
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	4413      	add	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	440b      	add	r3, r1
 8005f4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2200      	movs	r2, #0
 8005f56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2200      	movs	r2, #0
 8005f62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	3206      	adds	r2, #6
 8005f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d9de      	bls.n	8005f3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	f241 132c 	movw	r3, #4396	; 0x112c
 8005f8a:	4413      	add	r3, r2
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68d9      	ldr	r1, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	f241 1314 	movw	r3, #4372	; 0x1114
 8005f9c:	4413      	add	r3, r2
 8005f9e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005fac:	601a      	str	r2, [r3, #0]
}
 8005fae:	bf00      	nop
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e024      	b.n	8006012 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6919      	ldr	r1, [r3, #16]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	440b      	add	r3, r1
 8005fd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	330a      	adds	r3, #10
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3301      	adds	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d9d7      	bls.n	8005fc8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	f241 1330 	movw	r3, #4400	; 0x1130
 800603e:	4413      	add	r3, r2
 8006040:	2203      	movs	r2, #3
 8006042:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6919      	ldr	r1, [r3, #16]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	f241 131c 	movw	r3, #4380	; 0x111c
 8006050:	4413      	add	r3, r2
 8006052:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	f241 1328 	movw	r3, #4392	; 0x1128
 8006064:	4413      	add	r3, r2
 8006066:	6019      	str	r1, [r3, #0]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b098      	sub	sp, #96	; 0x60
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800607c:	4a84      	ldr	r2, [pc, #528]	; (8006290 <HAL_FDCAN_Init+0x21c>)
 800607e:	f107 030c 	add.w	r3, r7, #12
 8006082:	4611      	mov	r1, r2
 8006084:	224c      	movs	r2, #76	; 0x4c
 8006086:	4618      	mov	r0, r3
 8006088:	f00e f9a0 	bl	80143cc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e1ca      	b.n	800642c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a7e      	ldr	r2, [pc, #504]	; (8006294 <HAL_FDCAN_Init+0x220>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d106      	bne.n	80060ae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fb f990 	bl	80013e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0210 	bic.w	r2, r2, #16
 80060d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060d8:	f7fb fc68 	bl	80019ac <HAL_GetTick>
 80060dc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80060de:	e014      	b.n	800610a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80060e0:	f7fb fc64 	bl	80019ac <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b0a      	cmp	r3, #10
 80060ec:	d90d      	bls.n	800610a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060f4:	f043 0201 	orr.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2203      	movs	r2, #3
 8006102:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e190      	b.n	800642c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b08      	cmp	r3, #8
 8006116:	d0e3      	beq.n	80060e0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006128:	f7fb fc40 	bl	80019ac <HAL_GetTick>
 800612c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800612e:	e014      	b.n	800615a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006130:	f7fb fc3c 	bl	80019ac <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b0a      	cmp	r3, #10
 800613c:	d90d      	bls.n	800615a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006144:	f043 0201 	orr.w	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2203      	movs	r2, #3
 8006152:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e168      	b.n	800642c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0e3      	beq.n	8006130 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0202 	orr.w	r2, r2, #2
 8006176:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7c1b      	ldrb	r3, [r3, #16]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d108      	bne.n	8006192 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800618e:	619a      	str	r2, [r3, #24]
 8006190:	e007      	b.n	80061a2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699a      	ldr	r2, [r3, #24]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	7c5b      	ldrb	r3, [r3, #17]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d108      	bne.n	80061bc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699a      	ldr	r2, [r3, #24]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b8:	619a      	str	r2, [r3, #24]
 80061ba:	e007      	b.n	80061cc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	7c9b      	ldrb	r3, [r3, #18]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d108      	bne.n	80061e6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061e2:	619a      	str	r2, [r3, #24]
 80061e4:	e007      	b.n	80061f6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061f4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800621a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0210 	bic.w	r2, r2, #16
 800622a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d108      	bne.n	8006246 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0204 	orr.w	r2, r2, #4
 8006242:	619a      	str	r2, [r3, #24]
 8006244:	e030      	b.n	80062a8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d02c      	beq.n	80062a8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d020      	beq.n	8006298 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006264:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0210 	orr.w	r2, r2, #16
 8006274:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	2b03      	cmp	r3, #3
 800627c:	d114      	bne.n	80062a8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0220 	orr.w	r2, r2, #32
 800628c:	619a      	str	r2, [r3, #24]
 800628e:	e00b      	b.n	80062a8 <HAL_FDCAN_Init+0x234>
 8006290:	0801441c 	.word	0x0801441c
 8006294:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0220 	orr.w	r2, r2, #32
 80062a6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80062b8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80062c0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80062d0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80062d2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062dc:	d115      	bne.n	800630a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	3b01      	subs	r3, #1
 80062ea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80062ec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	3b01      	subs	r3, #1
 80062f4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80062f6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	3b01      	subs	r3, #1
 8006300:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006306:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006308:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006330:	4413      	add	r3, r2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d012      	beq.n	800635c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800633e:	f023 0107 	bic.w	r1, r3, #7
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800634c:	4413      	add	r3, r2
 800634e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d012      	beq.n	800638a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800636c:	f023 0107 	bic.w	r1, r3, #7
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800637a:	4413      	add	r3, r2
 800637c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800638e:	2b00      	cmp	r3, #0
 8006390:	d013      	beq.n	80063ba <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800639a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80063a8:	4413      	add	r3, r2
 80063aa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80063ae:	011a      	lsls	r2, r3, #4
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d013      	beq.n	80063ea <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80063ca:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80063d8:	4413      	add	r3, r2
 80063da:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80063de:	021a      	lsls	r2, r3, #8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a11      	ldr	r2, [pc, #68]	; (8006434 <HAL_FDCAN_Init+0x3c0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d107      	bne.n	8006404 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f022 0203 	bic.w	r2, r2, #3
 8006402:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fcfb 	bl	8006e18 <FDCAN_CalcultateRamBlockAddresses>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006428:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800642c:	4618      	mov	r0, r3
 800642e:	3760      	adds	r7, #96	; 0x60
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	4000a000 	.word	0x4000a000

08006438 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	d111      	bne.n	8006470 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0201 	bic.w	r2, r2, #1
 8006462:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	e008      	b.n	8006482 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006476:	f043 0204 	orr.w	r2, r3, #4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
  }
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006490:	b480      	push	{r7}
 8006492:	b08b      	sub	sp, #44	; 0x2c
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80064a8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80064aa:	7efb      	ldrb	r3, [r7, #27]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	f040 811d 	bne.w	80066ec <HAL_FDCAN_GetRxMessage+0x25c>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d136      	bne.n	8006526 <HAL_FDCAN_GetRxMessage+0x96>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064c0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d109      	bne.n	80064dc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064ce:	f043 0220 	orr.w	r2, r3, #32
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e110      	b.n	80066fe <HAL_FDCAN_GetRxMessage+0x26e>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0fe      	b.n	80066fe <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800650e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006518:	69f9      	ldr	r1, [r7, #28]
 800651a:	fb01 f303 	mul.w	r3, r1, r3
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
 8006524:	e052      	b.n	80065cc <HAL_FDCAN_GetRxMessage+0x13c>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b41      	cmp	r3, #65	; 0x41
 800652a:	d136      	bne.n	800659a <HAL_FDCAN_GetRxMessage+0x10a>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006534:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d109      	bne.n	8006550 <HAL_FDCAN_GetRxMessage+0xc0>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006542:	f043 0220 	orr.w	r2, r3, #32
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0d6      	b.n	80066fe <HAL_FDCAN_GetRxMessage+0x26e>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <HAL_FDCAN_GetRxMessage+0xe4>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006566:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e0c4      	b.n	80066fe <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800657c:	0a1b      	lsrs	r3, r3, #8
 800657e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006582:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658c:	69f9      	ldr	r1, [r7, #28]
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
 8006598:	e018      	b.n	80065cc <HAL_FDCAN_GetRxMessage+0x13c>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d309      	bcc.n	80065b8 <HAL_FDCAN_GetRxMessage+0x128>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065aa:	f043 0220 	orr.w	r2, r3, #32
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e0a2      	b.n	80066fe <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c0:	68b9      	ldr	r1, [r7, #8]
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d107      	bne.n	80065f0 <HAL_FDCAN_GetRxMessage+0x160>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	0c9b      	lsrs	r3, r3, #18
 80065e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e005      	b.n	80065fc <HAL_FDCAN_GetRxMessage+0x16c>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	3304      	adds	r3, #4
 8006618:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	0e1b      	lsrs	r3, r3, #24
 800664e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	0fda      	lsrs	r2, r3, #31
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	3304      	adds	r3, #4
 8006664:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800666a:	2300      	movs	r3, #0
 800666c:	623b      	str	r3, [r7, #32]
 800666e:	e00a      	b.n	8006686 <HAL_FDCAN_GetRxMessage+0x1f6>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	441a      	add	r2, r3
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	440b      	add	r3, r1
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	3301      	adds	r3, #1
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	0c1b      	lsrs	r3, r3, #16
 800668c:	4a1f      	ldr	r2, [pc, #124]	; (800670c <HAL_FDCAN_GetRxMessage+0x27c>)
 800668e:	5cd3      	ldrb	r3, [r2, r3]
 8006690:	461a      	mov	r2, r3
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	4293      	cmp	r3, r2
 8006696:	d3eb      	bcc.n	8006670 <HAL_FDCAN_GetRxMessage+0x1e0>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d105      	bne.n	80066aa <HAL_FDCAN_GetRxMessage+0x21a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80066a8:	e01e      	b.n	80066e8 <HAL_FDCAN_GetRxMessage+0x258>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b41      	cmp	r3, #65	; 0x41
 80066ae:	d105      	bne.n	80066bc <HAL_FDCAN_GetRxMessage+0x22c>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80066ba:	e015      	b.n	80066e8 <HAL_FDCAN_GetRxMessage+0x258>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b1f      	cmp	r3, #31
 80066c0:	d808      	bhi.n	80066d4 <HAL_FDCAN_GetRxMessage+0x244>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2101      	movs	r1, #1
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	fa01 f202 	lsl.w	r2, r1, r2
 80066ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80066d2:	e009      	b.n	80066e8 <HAL_FDCAN_GetRxMessage+0x258>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 021f 	and.w	r2, r3, #31
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2101      	movs	r1, #1
 80066e0:	fa01 f202 	lsl.w	r2, r1, r2
 80066e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	e008      	b.n	80066fe <HAL_FDCAN_GetRxMessage+0x26e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066f2:	f043 0208 	orr.w	r2, r3, #8
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
  }
}
 80066fe:	4618      	mov	r0, r3
 8006700:	372c      	adds	r7, #44	; 0x2c
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	080144e4 	.word	0x080144e4

08006710 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006722:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006724:	7dfb      	ldrb	r3, [r7, #23]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d002      	beq.n	8006730 <HAL_FDCAN_ActivateNotification+0x20>
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d155      	bne.n	80067dc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4013      	ands	r3, r2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d108      	bne.n	8006750 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	65da      	str	r2, [r3, #92]	; 0x5c
 800674e:	e014      	b.n	800677a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4013      	ands	r3, r2
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	429a      	cmp	r2, r3
 800675e:	d108      	bne.n	8006772 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0202 	orr.w	r2, r2, #2
 800676e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006770:	e003      	b.n	800677a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2203      	movs	r2, #3
 8006778:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006780:	2b00      	cmp	r3, #0
 8006782:	d009      	beq.n	8006798 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	430a      	orrs	r2, r1
 8006794:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <HAL_FDCAN_ActivateNotification+0xec>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	6812      	ldr	r2, [r2, #0]
 80067c6:	430b      	orrs	r3, r1
 80067c8:	6553      	str	r3, [r2, #84]	; 0x54
 80067ca:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <HAL_FDCAN_ActivateNotification+0xf0>)
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	0f9b      	lsrs	r3, r3, #30
 80067d2:	490b      	ldr	r1, [pc, #44]	; (8006800 <HAL_FDCAN_ActivateNotification+0xf0>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	e008      	b.n	80067ee <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067e2:	f043 0202 	orr.w	r2, r3, #2
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
  }
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	3fcfffff 	.word	0x3fcfffff
 8006800:	4000a800 	.word	0x4000a800

08006804 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b092      	sub	sp, #72	; 0x48
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800680c:	4b90      	ldr	r3, [pc, #576]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	079b      	lsls	r3, r3, #30
 8006812:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006814:	4b8e      	ldr	r3, [pc, #568]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	079b      	lsls	r3, r3, #30
 800681a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800681c:	4013      	ands	r3, r2
 800681e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006826:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800682a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006834:	4013      	ands	r3, r2
 8006836:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800684c:	4013      	ands	r3, r2
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800685a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006864:	4013      	ands	r3, r2
 8006866:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800687c:	4013      	ands	r3, r2
 800687e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006886:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800688a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006894:	4013      	ands	r3, r2
 8006896:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d011      	beq.n	80068ca <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068bc:	651a      	str	r2, [r3, #80]	; 0x50
 80068be:	4b64      	ldr	r3, [pc, #400]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fa5a 	bl	8006d7e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01e      	beq.n	8006916 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d017      	beq.n	8006916 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80068f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068fa:	4013      	ands	r3, r2
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006906:	651a      	str	r2, [r3, #80]	; 0x50
 8006908:	4b51      	ldr	r3, [pc, #324]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 800690a:	2200      	movs	r2, #0
 800690c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800690e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fa0b 	bl	8006d2c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00d      	beq.n	8006938 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006922:	4b4c      	ldr	r3, [pc, #304]	; (8006a54 <HAL_FDCAN_IRQHandler+0x250>)
 8006924:	400b      	ands	r3, r1
 8006926:	6513      	str	r3, [r2, #80]	; 0x50
 8006928:	4a49      	ldr	r2, [pc, #292]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 800692a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692c:	0f9b      	lsrs	r3, r3, #30
 800692e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006930:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9c4 	bl	8006cc0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006944:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <HAL_FDCAN_IRQHandler+0x250>)
 8006946:	400b      	ands	r3, r1
 8006948:	6513      	str	r3, [r2, #80]	; 0x50
 800694a:	4a41      	ldr	r2, [pc, #260]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 800694c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800694e:	0f9b      	lsrs	r3, r3, #30
 8006950:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f9be 	bl	8006cd6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800695a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00d      	beq.n	800697c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006966:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <HAL_FDCAN_IRQHandler+0x250>)
 8006968:	400b      	ands	r3, r1
 800696a:	6513      	str	r3, [r2, #80]	; 0x50
 800696c:	4a38      	ldr	r2, [pc, #224]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 800696e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006970:	0f9b      	lsrs	r3, r3, #30
 8006972:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fa faa6 	bl	8000ec8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006988:	4b32      	ldr	r3, [pc, #200]	; (8006a54 <HAL_FDCAN_IRQHandler+0x250>)
 800698a:	400b      	ands	r3, r1
 800698c:	6513      	str	r3, [r2, #80]	; 0x50
 800698e:	4a30      	ldr	r2, [pc, #192]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	0f9b      	lsrs	r3, r3, #30
 8006994:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f9a7 	bl	8006cec <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d011      	beq.n	80069d0 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c2:	651a      	str	r2, [r3, #80]	; 0x50
 80069c4:	4b22      	ldr	r3, [pc, #136]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f999 	bl	8006d02 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01e      	beq.n	8006a1c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d017      	beq.n	8006a1c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a00:	4013      	ands	r3, r2
 8006a02:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a0c:	651a      	str	r2, [r3, #80]	; 0x50
 8006a0e:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f97d 	bl	8006d16 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d016      	beq.n	8006a58 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00f      	beq.n	8006a58 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006a40:	651a      	str	r2, [r3, #80]	; 0x50
 8006a42:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <HAL_FDCAN_IRQHandler+0x24c>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f97a 	bl	8006d42 <HAL_FDCAN_RxBufferNewMessageCallback>
 8006a4e:	e003      	b.n	8006a58 <HAL_FDCAN_IRQHandler+0x254>
 8006a50:	4000a800 	.word	0x4000a800
 8006a54:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d011      	beq.n	8006a8a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00a      	beq.n	8006a8a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a7c:	651a      	str	r2, [r3, #80]	; 0x50
 8006a7e:	4b8d      	ldr	r3, [pc, #564]	; (8006cb4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f966 	bl	8006d56 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d011      	beq.n	8006abc <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006aae:	651a      	str	r2, [r3, #80]	; 0x50
 8006ab0:	4b80      	ldr	r3, [pc, #512]	; (8006cb4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f957 	bl	8006d6a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d016      	beq.n	8006af8 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00f      	beq.n	8006af8 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ae0:	651a      	str	r2, [r3, #80]	; 0x50
 8006ae2:	4b74      	ldr	r3, [pc, #464]	; (8006cb4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00d      	beq.n	8006b1a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b04:	4b6c      	ldr	r3, [pc, #432]	; (8006cb8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006b06:	400b      	ands	r3, r1
 8006b08:	6513      	str	r3, [r2, #80]	; 0x50
 8006b0a:	4a6a      	ldr	r2, [pc, #424]	; (8006cb4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	0f9b      	lsrs	r3, r3, #30
 8006b10:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f946 	bl	8006da6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d011      	beq.n	8006b44 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b26:	4b64      	ldr	r3, [pc, #400]	; (8006cb8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006b28:	400b      	ands	r3, r1
 8006b2a:	6513      	str	r3, [r2, #80]	; 0x50
 8006b2c:	4a61      	ldr	r2, [pc, #388]	; (8006cb4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	0f9b      	lsrs	r3, r3, #30
 8006b32:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a5c      	ldr	r2, [pc, #368]	; (8006cbc <HAL_FDCAN_IRQHandler+0x4b8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	f040 80a6 	bne.w	8006c9c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 809e 	beq.w	8006c9c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b74:	4013      	ands	r3, r2
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b82:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	6a3a      	ldr	r2, [r7, #32]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006b9a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006bb2:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006bca:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f8e7 	bl	8006dbc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d007      	beq.n	8006c04 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	6a3a      	ldr	r2, [r7, #32]
 8006bfa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006bfc:	6a39      	ldr	r1, [r7, #32]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f8e7 	bl	8006dd2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01b      	beq.n	8006c4a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d014      	beq.n	8006c4a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c26:	0c1b      	lsrs	r3, r3, #16
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c36:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2240      	movs	r2, #64	; 0x40
 8006c3e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	6939      	ldr	r1, [r7, #16]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f8cf 	bl	8006de8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006c58:	69f9      	ldr	r1, [r7, #28]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f8d0 	bl	8006e00 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f873 	bl	8006d92 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006cac:	bf00      	nop
 8006cae:	3748      	adds	r7, #72	; 0x48
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	4000a800 	.word	0x4000a800
 8006cb8:	3fcfffff 	.word	0x3fcfffff
 8006cbc:	4000a000 	.word	0x4000a000

08006cc0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e24:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006e2e:	4ba7      	ldr	r3, [pc, #668]	; (80070cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	0091      	lsls	r1, r2, #2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	430b      	orrs	r3, r1
 8006e3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e48:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	041a      	lsls	r2, r3, #16
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	4413      	add	r3, r2
 8006e64:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e6e:	4b97      	ldr	r3, [pc, #604]	; (80070cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	0091      	lsls	r1, r2, #2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	430b      	orrs	r3, r1
 8006e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e88:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e90:	041a      	lsls	r2, r3, #16
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006eb0:	4b86      	ldr	r3, [pc, #536]	; (80070cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	0091      	lsls	r1, r2, #2
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eca:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	041a      	lsls	r2, r3, #16
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ee6:	fb02 f303 	mul.w	r3, r2, r3
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	4413      	add	r3, r2
 8006eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006ef8:	4b74      	ldr	r3, [pc, #464]	; (80070cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006efa:	4013      	ands	r3, r2
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	0091      	lsls	r1, r2, #2
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	430b      	orrs	r3, r1
 8006f06:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f12:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1a:	041a      	lsls	r2, r3, #16
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006f2e:	fb02 f303 	mul.w	r3, r2, r3
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	4413      	add	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006f40:	4b62      	ldr	r3, [pc, #392]	; (80070cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f42:	4013      	ands	r3, r2
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	0091      	lsls	r1, r2, #2
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6812      	ldr	r2, [r2, #0]
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006f5a:	fb02 f303 	mul.w	r3, r2, r3
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006f6c:	4b57      	ldr	r3, [pc, #348]	; (80070cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f6e:	4013      	ands	r3, r2
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	0091      	lsls	r1, r2, #2
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f86:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8e:	041a      	lsls	r2, r3, #16
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006fae:	4b47      	ldr	r3, [pc, #284]	; (80070cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	0091      	lsls	r1, r2, #2
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6812      	ldr	r2, [r2, #0]
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006fc8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd0:	041a      	lsls	r2, r3, #16
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006fe4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fec:	061a      	lsls	r2, r3, #24
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ffc:	4b34      	ldr	r3, [pc, #208]	; (80070d0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006ffe:	4413      	add	r3, r2
 8007000:	009a      	lsls	r2, r3, #2
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	441a      	add	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	441a      	add	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007032:	fb01 f303 	mul.w	r3, r1, r3
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	441a      	add	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800704a:	fb01 f303 	mul.w	r3, r1, r3
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	441a      	add	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007062:	fb01 f303 	mul.w	r3, r1, r3
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	441a      	add	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007092:	fb01 f303 	mul.w	r3, r1, r3
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	441a      	add	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	441a      	add	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c2:	4a04      	ldr	r2, [pc, #16]	; (80070d4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d915      	bls.n	80070f4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80070c8:	e006      	b.n	80070d8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80070ca:	bf00      	nop
 80070cc:	ffff0003 	.word	0xffff0003
 80070d0:	10002b00 	.word	0x10002b00
 80070d4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070de:	f043 0220 	orr.w	r2, r3, #32
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2203      	movs	r2, #3
 80070ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e010      	b.n	8007116 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	e005      	b.n	8007108 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3304      	adds	r3, #4
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	429a      	cmp	r2, r3
 8007112:	d3f3      	bcc.n	80070fc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop

08007124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007124:	b480      	push	{r7}
 8007126:	b089      	sub	sp, #36	; 0x24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800712e:	2300      	movs	r3, #0
 8007130:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007132:	4b89      	ldr	r3, [pc, #548]	; (8007358 <HAL_GPIO_Init+0x234>)
 8007134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007136:	e194      	b.n	8007462 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	2101      	movs	r1, #1
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	fa01 f303 	lsl.w	r3, r1, r3
 8007144:	4013      	ands	r3, r2
 8007146:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 8186 	beq.w	800745c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d00b      	beq.n	8007170 <HAL_GPIO_Init+0x4c>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b02      	cmp	r3, #2
 800715e:	d007      	beq.n	8007170 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007164:	2b11      	cmp	r3, #17
 8007166:	d003      	beq.n	8007170 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2b12      	cmp	r3, #18
 800716e:	d130      	bne.n	80071d2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	2203      	movs	r2, #3
 800717c:	fa02 f303 	lsl.w	r3, r2, r3
 8007180:	43db      	mvns	r3, r3
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	4013      	ands	r3, r2
 8007186:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	fa02 f303 	lsl.w	r3, r2, r3
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	4313      	orrs	r3, r2
 8007198:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80071a6:	2201      	movs	r2, #1
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	fa02 f303 	lsl.w	r3, r2, r3
 80071ae:	43db      	mvns	r3, r3
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	4013      	ands	r3, r2
 80071b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	091b      	lsrs	r3, r3, #4
 80071bc:	f003 0201 	and.w	r2, r3, #1
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	fa02 f303 	lsl.w	r3, r2, r3
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	2203      	movs	r2, #3
 80071de:	fa02 f303 	lsl.w	r3, r2, r3
 80071e2:	43db      	mvns	r3, r3
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	4013      	ands	r3, r2
 80071e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d003      	beq.n	8007212 <HAL_GPIO_Init+0xee>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b12      	cmp	r3, #18
 8007210:	d123      	bne.n	800725a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	08da      	lsrs	r2, r3, #3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3208      	adds	r2, #8
 800721a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	220f      	movs	r2, #15
 800722a:	fa02 f303 	lsl.w	r3, r2, r3
 800722e:	43db      	mvns	r3, r3
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	4013      	ands	r3, r2
 8007234:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	fa02 f303 	lsl.w	r3, r2, r3
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	4313      	orrs	r3, r2
 800724a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	08da      	lsrs	r2, r3, #3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3208      	adds	r2, #8
 8007254:	69b9      	ldr	r1, [r7, #24]
 8007256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	2203      	movs	r2, #3
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43db      	mvns	r3, r3
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	4013      	ands	r3, r2
 8007270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f003 0203 	and.w	r2, r3, #3
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	fa02 f303 	lsl.w	r3, r2, r3
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	4313      	orrs	r3, r2
 8007286:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 80e0 	beq.w	800745c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800729c:	4b2f      	ldr	r3, [pc, #188]	; (800735c <HAL_GPIO_Init+0x238>)
 800729e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072a2:	4a2e      	ldr	r2, [pc, #184]	; (800735c <HAL_GPIO_Init+0x238>)
 80072a4:	f043 0302 	orr.w	r3, r3, #2
 80072a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80072ac:	4b2b      	ldr	r3, [pc, #172]	; (800735c <HAL_GPIO_Init+0x238>)
 80072ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80072ba:	4a29      	ldr	r2, [pc, #164]	; (8007360 <HAL_GPIO_Init+0x23c>)
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	089b      	lsrs	r3, r3, #2
 80072c0:	3302      	adds	r3, #2
 80072c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	220f      	movs	r2, #15
 80072d2:	fa02 f303 	lsl.w	r3, r2, r3
 80072d6:	43db      	mvns	r3, r3
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	4013      	ands	r3, r2
 80072dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a20      	ldr	r2, [pc, #128]	; (8007364 <HAL_GPIO_Init+0x240>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d052      	beq.n	800738c <HAL_GPIO_Init+0x268>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a1f      	ldr	r2, [pc, #124]	; (8007368 <HAL_GPIO_Init+0x244>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d031      	beq.n	8007352 <HAL_GPIO_Init+0x22e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a1e      	ldr	r2, [pc, #120]	; (800736c <HAL_GPIO_Init+0x248>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d02b      	beq.n	800734e <HAL_GPIO_Init+0x22a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a1d      	ldr	r2, [pc, #116]	; (8007370 <HAL_GPIO_Init+0x24c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d025      	beq.n	800734a <HAL_GPIO_Init+0x226>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <HAL_GPIO_Init+0x250>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01f      	beq.n	8007346 <HAL_GPIO_Init+0x222>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a1b      	ldr	r2, [pc, #108]	; (8007378 <HAL_GPIO_Init+0x254>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d019      	beq.n	8007342 <HAL_GPIO_Init+0x21e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a1a      	ldr	r2, [pc, #104]	; (800737c <HAL_GPIO_Init+0x258>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d013      	beq.n	800733e <HAL_GPIO_Init+0x21a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a19      	ldr	r2, [pc, #100]	; (8007380 <HAL_GPIO_Init+0x25c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00d      	beq.n	800733a <HAL_GPIO_Init+0x216>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a18      	ldr	r2, [pc, #96]	; (8007384 <HAL_GPIO_Init+0x260>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d007      	beq.n	8007336 <HAL_GPIO_Init+0x212>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a17      	ldr	r2, [pc, #92]	; (8007388 <HAL_GPIO_Init+0x264>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d101      	bne.n	8007332 <HAL_GPIO_Init+0x20e>
 800732e:	2309      	movs	r3, #9
 8007330:	e02d      	b.n	800738e <HAL_GPIO_Init+0x26a>
 8007332:	230a      	movs	r3, #10
 8007334:	e02b      	b.n	800738e <HAL_GPIO_Init+0x26a>
 8007336:	2308      	movs	r3, #8
 8007338:	e029      	b.n	800738e <HAL_GPIO_Init+0x26a>
 800733a:	2307      	movs	r3, #7
 800733c:	e027      	b.n	800738e <HAL_GPIO_Init+0x26a>
 800733e:	2306      	movs	r3, #6
 8007340:	e025      	b.n	800738e <HAL_GPIO_Init+0x26a>
 8007342:	2305      	movs	r3, #5
 8007344:	e023      	b.n	800738e <HAL_GPIO_Init+0x26a>
 8007346:	2304      	movs	r3, #4
 8007348:	e021      	b.n	800738e <HAL_GPIO_Init+0x26a>
 800734a:	2303      	movs	r3, #3
 800734c:	e01f      	b.n	800738e <HAL_GPIO_Init+0x26a>
 800734e:	2302      	movs	r3, #2
 8007350:	e01d      	b.n	800738e <HAL_GPIO_Init+0x26a>
 8007352:	2301      	movs	r3, #1
 8007354:	e01b      	b.n	800738e <HAL_GPIO_Init+0x26a>
 8007356:	bf00      	nop
 8007358:	58000080 	.word	0x58000080
 800735c:	58024400 	.word	0x58024400
 8007360:	58000400 	.word	0x58000400
 8007364:	58020000 	.word	0x58020000
 8007368:	58020400 	.word	0x58020400
 800736c:	58020800 	.word	0x58020800
 8007370:	58020c00 	.word	0x58020c00
 8007374:	58021000 	.word	0x58021000
 8007378:	58021400 	.word	0x58021400
 800737c:	58021800 	.word	0x58021800
 8007380:	58021c00 	.word	0x58021c00
 8007384:	58022000 	.word	0x58022000
 8007388:	58022400 	.word	0x58022400
 800738c:	2300      	movs	r3, #0
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	f002 0203 	and.w	r2, r2, #3
 8007394:	0092      	lsls	r2, r2, #2
 8007396:	4093      	lsls	r3, r2
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	4313      	orrs	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800739e:	4938      	ldr	r1, [pc, #224]	; (8007480 <HAL_GPIO_Init+0x35c>)
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	089b      	lsrs	r3, r3, #2
 80073a4:	3302      	adds	r3, #2
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	43db      	mvns	r3, r3
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	4013      	ands	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	43db      	mvns	r3, r3
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	4013      	ands	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	43db      	mvns	r3, r3
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	4013      	ands	r3, r2
 8007410:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800742e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	43db      	mvns	r3, r3
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	4013      	ands	r3, r2
 800743e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4313      	orrs	r3, r2
 8007452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	3301      	adds	r3, #1
 8007460:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	f47f ae63 	bne.w	8007138 <HAL_GPIO_Init+0x14>
  }
}
 8007472:	bf00      	nop
 8007474:	3724      	adds	r7, #36	; 0x24
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	58000400 	.word	0x58000400

08007484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	887b      	ldrh	r3, [r7, #2]
 8007496:	4013      	ands	r3, r2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
 80074a0:	e001      	b.n	80074a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	807b      	strh	r3, [r7, #2]
 80074c0:	4613      	mov	r3, r2
 80074c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074c4:	787b      	ldrb	r3, [r7, #1]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074ca:	887a      	ldrh	r2, [r7, #2]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80074d0:	e003      	b.n	80074da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80074d2:	887b      	ldrh	r3, [r7, #2]
 80074d4:	041a      	lsls	r2, r3, #16
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	619a      	str	r2, [r3, #24]
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80074e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e8:	b08f      	sub	sp, #60	; 0x3c
 80074ea:	af0a      	add	r7, sp, #40	; 0x28
 80074ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e116      	b.n	8007726 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fa f88a 	bl	800162c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2203      	movs	r2, #3
 800751c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f008 f842 	bl	800f5c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	603b      	str	r3, [r7, #0]
 8007542:	687e      	ldr	r6, [r7, #4]
 8007544:	466d      	mov	r5, sp
 8007546:	f106 0410 	add.w	r4, r6, #16
 800754a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800754c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800754e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007552:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007556:	e885 0003 	stmia.w	r5, {r0, r1}
 800755a:	1d33      	adds	r3, r6, #4
 800755c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800755e:	6838      	ldr	r0, [r7, #0]
 8007560:	f007 ffcc 	bl	800f4fc <USB_CoreInit>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2202      	movs	r2, #2
 800756e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e0d7      	b.n	8007726 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2100      	movs	r1, #0
 800757c:	4618      	mov	r0, r3
 800757e:	f008 f830 	bl	800f5e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
 8007586:	e04a      	b.n	800761e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007588:	7bfa      	ldrb	r2, [r7, #15]
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4613      	mov	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	1a9b      	subs	r3, r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	333d      	adds	r3, #61	; 0x3d
 8007598:	2201      	movs	r2, #1
 800759a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800759c:	7bfa      	ldrb	r2, [r7, #15]
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4613      	mov	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	333c      	adds	r3, #60	; 0x3c
 80075ac:	7bfa      	ldrb	r2, [r7, #15]
 80075ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80075b0:	7bfa      	ldrb	r2, [r7, #15]
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	b298      	uxth	r0, r3
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	4613      	mov	r3, r2
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	440b      	add	r3, r1
 80075c2:	3342      	adds	r3, #66	; 0x42
 80075c4:	4602      	mov	r2, r0
 80075c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80075c8:	7bfa      	ldrb	r2, [r7, #15]
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	1a9b      	subs	r3, r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	333f      	adds	r3, #63	; 0x3f
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80075dc:	7bfa      	ldrb	r2, [r7, #15]
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4613      	mov	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	3344      	adds	r3, #68	; 0x44
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80075f0:	7bfa      	ldrb	r2, [r7, #15]
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	4613      	mov	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	1a9b      	subs	r3, r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	3348      	adds	r3, #72	; 0x48
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007604:	7bfa      	ldrb	r2, [r7, #15]
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	4613      	mov	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	1a9b      	subs	r3, r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	3350      	adds	r3, #80	; 0x50
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	3301      	adds	r3, #1
 800761c:	73fb      	strb	r3, [r7, #15]
 800761e:	7bfa      	ldrb	r2, [r7, #15]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	429a      	cmp	r2, r3
 8007626:	d3af      	bcc.n	8007588 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]
 800762c:	e044      	b.n	80076b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800762e:	7bfa      	ldrb	r2, [r7, #15]
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4613      	mov	r3, r2
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	1a9b      	subs	r3, r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007644:	7bfa      	ldrb	r2, [r7, #15]
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	4613      	mov	r3, r2
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	1a9b      	subs	r3, r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	440b      	add	r3, r1
 8007652:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007656:	7bfa      	ldrb	r2, [r7, #15]
 8007658:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800765a:	7bfa      	ldrb	r2, [r7, #15]
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	4613      	mov	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	1a9b      	subs	r3, r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	440b      	add	r3, r1
 8007668:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007670:	7bfa      	ldrb	r2, [r7, #15]
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	4613      	mov	r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	1a9b      	subs	r3, r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007686:	7bfa      	ldrb	r2, [r7, #15]
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	1a9b      	subs	r3, r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800769c:	7bfa      	ldrb	r2, [r7, #15]
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	4613      	mov	r3, r2
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	440b      	add	r3, r1
 80076aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	3301      	adds	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
 80076b8:	7bfa      	ldrb	r2, [r7, #15]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d3b5      	bcc.n	800762e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	687e      	ldr	r6, [r7, #4]
 80076ca:	466d      	mov	r5, sp
 80076cc:	f106 0410 	add.w	r4, r6, #16
 80076d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80076dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80076e0:	1d33      	adds	r3, r6, #4
 80076e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076e4:	6838      	ldr	r0, [r7, #0]
 80076e6:	f007 ffa7 	bl	800f638 <USB_DevInit>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e014      	b.n	8007726 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b01      	cmp	r3, #1
 8007712:	d102      	bne.n	800771a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f80b 	bl	8007730 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f008 f949 	bl	800f9b6 <USB_DevDisconnect>

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007730 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800775e:	4b05      	ldr	r3, [pc, #20]	; (8007774 <HAL_PCDEx_ActivateLPM+0x44>)
 8007760:	4313      	orrs	r3, r2
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	10000003 	.word	0x10000003

08007778 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007780:	4b19      	ldr	r3, [pc, #100]	; (80077e8 <HAL_PWREx_ConfigSupply+0x70>)
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b04      	cmp	r3, #4
 800778a:	d00a      	beq.n	80077a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800778c:	4b16      	ldr	r3, [pc, #88]	; (80077e8 <HAL_PWREx_ConfigSupply+0x70>)
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	d001      	beq.n	800779e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e01f      	b.n	80077de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	e01d      	b.n	80077de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80077a2:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <HAL_PWREx_ConfigSupply+0x70>)
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f023 0207 	bic.w	r2, r3, #7
 80077aa:	490f      	ldr	r1, [pc, #60]	; (80077e8 <HAL_PWREx_ConfigSupply+0x70>)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80077b2:	f7fa f8fb 	bl	80019ac <HAL_GetTick>
 80077b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077b8:	e009      	b.n	80077ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80077ba:	f7fa f8f7 	bl	80019ac <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077c8:	d901      	bls.n	80077ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e007      	b.n	80077de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077ce:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <HAL_PWREx_ConfigSupply+0x70>)
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077da:	d1ee      	bne.n	80077ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	58024800 	.word	0x58024800

080077ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80077f0:	4b05      	ldr	r3, [pc, #20]	; (8007808 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	4a04      	ldr	r2, [pc, #16]	; (8007808 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80077f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077fa:	60d3      	str	r3, [r2, #12]
}
 80077fc:	bf00      	nop
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	58024800 	.word	0x58024800

0800780c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	; 0x30
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e3c4      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 8087 	beq.w	800793a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800782c:	4ba2      	ldr	r3, [pc, #648]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007836:	4ba0      	ldr	r3, [pc, #640]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783e:	2b10      	cmp	r3, #16
 8007840:	d007      	beq.n	8007852 <HAL_RCC_OscConfig+0x46>
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	2b18      	cmp	r3, #24
 8007846:	d110      	bne.n	800786a <HAL_RCC_OscConfig+0x5e>
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d10b      	bne.n	800786a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007852:	4b99      	ldr	r3, [pc, #612]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d06c      	beq.n	8007938 <HAL_RCC_OscConfig+0x12c>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d168      	bne.n	8007938 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e39e      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007872:	d106      	bne.n	8007882 <HAL_RCC_OscConfig+0x76>
 8007874:	4b90      	ldr	r3, [pc, #576]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a8f      	ldr	r2, [pc, #572]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 800787a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	e02e      	b.n	80078e0 <HAL_RCC_OscConfig+0xd4>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10c      	bne.n	80078a4 <HAL_RCC_OscConfig+0x98>
 800788a:	4b8b      	ldr	r3, [pc, #556]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a8a      	ldr	r2, [pc, #552]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	4b88      	ldr	r3, [pc, #544]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a87      	ldr	r2, [pc, #540]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 800789c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	e01d      	b.n	80078e0 <HAL_RCC_OscConfig+0xd4>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078ac:	d10c      	bne.n	80078c8 <HAL_RCC_OscConfig+0xbc>
 80078ae:	4b82      	ldr	r3, [pc, #520]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a81      	ldr	r2, [pc, #516]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	4b7f      	ldr	r3, [pc, #508]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a7e      	ldr	r2, [pc, #504]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	e00b      	b.n	80078e0 <HAL_RCC_OscConfig+0xd4>
 80078c8:	4b7b      	ldr	r3, [pc, #492]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a7a      	ldr	r2, [pc, #488]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80078ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078d2:	6013      	str	r3, [r2, #0]
 80078d4:	4b78      	ldr	r3, [pc, #480]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a77      	ldr	r2, [pc, #476]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80078da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d013      	beq.n	8007910 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e8:	f7fa f860 	bl	80019ac <HAL_GetTick>
 80078ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078f0:	f7fa f85c 	bl	80019ac <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b64      	cmp	r3, #100	; 0x64
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e352      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007902:	4b6d      	ldr	r3, [pc, #436]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f0      	beq.n	80078f0 <HAL_RCC_OscConfig+0xe4>
 800790e:	e014      	b.n	800793a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007910:	f7fa f84c 	bl	80019ac <HAL_GetTick>
 8007914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007916:	e008      	b.n	800792a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007918:	f7fa f848 	bl	80019ac <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b64      	cmp	r3, #100	; 0x64
 8007924:	d901      	bls.n	800792a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e33e      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800792a:	4b63      	ldr	r3, [pc, #396]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1f0      	bne.n	8007918 <HAL_RCC_OscConfig+0x10c>
 8007936:	e000      	b.n	800793a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8092 	beq.w	8007a6c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007948:	4b5b      	ldr	r3, [pc, #364]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007950:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007952:	4b59      	ldr	r3, [pc, #356]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d007      	beq.n	800796e <HAL_RCC_OscConfig+0x162>
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	2b18      	cmp	r3, #24
 8007962:	d12d      	bne.n	80079c0 <HAL_RCC_OscConfig+0x1b4>
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d128      	bne.n	80079c0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800796e:	4b52      	ldr	r3, [pc, #328]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0304 	and.w	r3, r3, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <HAL_RCC_OscConfig+0x17a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e310      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007986:	f7fa f83f 	bl	8001a08 <HAL_GetREVID>
 800798a:	4602      	mov	r2, r0
 800798c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007990:	429a      	cmp	r2, r3
 8007992:	d80a      	bhi.n	80079aa <HAL_RCC_OscConfig+0x19e>
 8007994:	4b48      	ldr	r3, [pc, #288]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	031b      	lsls	r3, r3, #12
 80079a2:	4945      	ldr	r1, [pc, #276]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079a8:	e060      	b.n	8007a6c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079aa:	4b43      	ldr	r3, [pc, #268]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	061b      	lsls	r3, r3, #24
 80079b8:	493f      	ldr	r1, [pc, #252]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079be:	e055      	b.n	8007a6c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d038      	beq.n	8007a3a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079c8:	4b3b      	ldr	r3, [pc, #236]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f023 0219 	bic.w	r2, r3, #25
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	4938      	ldr	r1, [pc, #224]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079da:	f7f9 ffe7 	bl	80019ac <HAL_GetTick>
 80079de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079e0:	e008      	b.n	80079f4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079e2:	f7f9 ffe3 	bl	80019ac <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d901      	bls.n	80079f4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e2d9      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079f4:	4b30      	ldr	r3, [pc, #192]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0f0      	beq.n	80079e2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a00:	f7fa f802 	bl	8001a08 <HAL_GetREVID>
 8007a04:	4602      	mov	r2, r0
 8007a06:	f241 0303 	movw	r3, #4099	; 0x1003
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d80a      	bhi.n	8007a24 <HAL_RCC_OscConfig+0x218>
 8007a0e:	4b2a      	ldr	r3, [pc, #168]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	031b      	lsls	r3, r3, #12
 8007a1c:	4926      	ldr	r1, [pc, #152]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	604b      	str	r3, [r1, #4]
 8007a22:	e023      	b.n	8007a6c <HAL_RCC_OscConfig+0x260>
 8007a24:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	061b      	lsls	r3, r3, #24
 8007a32:	4921      	ldr	r1, [pc, #132]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	604b      	str	r3, [r1, #4]
 8007a38:	e018      	b.n	8007a6c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a3a:	4b1f      	ldr	r3, [pc, #124]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1e      	ldr	r2, [pc, #120]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007a40:	f023 0301 	bic.w	r3, r3, #1
 8007a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a46:	f7f9 ffb1 	bl	80019ac <HAL_GetTick>
 8007a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a4c:	e008      	b.n	8007a60 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a4e:	f7f9 ffad 	bl	80019ac <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d901      	bls.n	8007a60 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e2a3      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a60:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f0      	bne.n	8007a4e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0310 	and.w	r3, r3, #16
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 8091 	beq.w	8007b9c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a84:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a88:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d007      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x294>
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b18      	cmp	r3, #24
 8007a94:	d12f      	bne.n	8007af6 <HAL_RCC_OscConfig+0x2ea>
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f003 0303 	and.w	r3, r3, #3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d12a      	bne.n	8007af6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007aa0:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <HAL_RCC_OscConfig+0x2ac>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d007      	beq.n	8007abc <HAL_RCC_OscConfig+0x2b0>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	2b80      	cmp	r3, #128	; 0x80
 8007ab2:	d003      	beq.n	8007abc <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e277      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
 8007ab8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007abc:	f7f9 ffa4 	bl	8001a08 <HAL_GetREVID>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	f241 0303 	movw	r3, #4099	; 0x1003
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d80a      	bhi.n	8007ae0 <HAL_RCC_OscConfig+0x2d4>
 8007aca:	4ba2      	ldr	r3, [pc, #648]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	069b      	lsls	r3, r3, #26
 8007ad8:	499e      	ldr	r1, [pc, #632]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ade:	e05d      	b.n	8007b9c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ae0:	4b9c      	ldr	r3, [pc, #624]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	061b      	lsls	r3, r3, #24
 8007aee:	4999      	ldr	r1, [pc, #612]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007af4:	e052      	b.n	8007b9c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d035      	beq.n	8007b6a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007afe:	4b95      	ldr	r3, [pc, #596]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a94      	ldr	r2, [pc, #592]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0a:	f7f9 ff4f 	bl	80019ac <HAL_GetTick>
 8007b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b10:	e008      	b.n	8007b24 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007b12:	f7f9 ff4b 	bl	80019ac <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e241      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b24:	4b8b      	ldr	r3, [pc, #556]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0f0      	beq.n	8007b12 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b30:	f7f9 ff6a 	bl	8001a08 <HAL_GetREVID>
 8007b34:	4602      	mov	r2, r0
 8007b36:	f241 0303 	movw	r3, #4099	; 0x1003
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d80a      	bhi.n	8007b54 <HAL_RCC_OscConfig+0x348>
 8007b3e:	4b85      	ldr	r3, [pc, #532]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	069b      	lsls	r3, r3, #26
 8007b4c:	4981      	ldr	r1, [pc, #516]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	604b      	str	r3, [r1, #4]
 8007b52:	e023      	b.n	8007b9c <HAL_RCC_OscConfig+0x390>
 8007b54:	4b7f      	ldr	r3, [pc, #508]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	061b      	lsls	r3, r3, #24
 8007b62:	497c      	ldr	r1, [pc, #496]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60cb      	str	r3, [r1, #12]
 8007b68:	e018      	b.n	8007b9c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b6a:	4b7a      	ldr	r3, [pc, #488]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a79      	ldr	r2, [pc, #484]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b76:	f7f9 ff19 	bl	80019ac <HAL_GetTick>
 8007b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b7c:	e008      	b.n	8007b90 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007b7e:	f7f9 ff15 	bl	80019ac <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d901      	bls.n	8007b90 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e20b      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b90:	4b70      	ldr	r3, [pc, #448]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1f0      	bne.n	8007b7e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d036      	beq.n	8007c16 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d019      	beq.n	8007be4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bb0:	4b68      	ldr	r3, [pc, #416]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb4:	4a67      	ldr	r2, [pc, #412]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007bb6:	f043 0301 	orr.w	r3, r3, #1
 8007bba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bbc:	f7f9 fef6 	bl	80019ac <HAL_GetTick>
 8007bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bc4:	f7f9 fef2 	bl	80019ac <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e1e8      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007bd6:	4b5f      	ldr	r3, [pc, #380]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0f0      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x3b8>
 8007be2:	e018      	b.n	8007c16 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007be4:	4b5b      	ldr	r3, [pc, #364]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be8:	4a5a      	ldr	r2, [pc, #360]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007bea:	f023 0301 	bic.w	r3, r3, #1
 8007bee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf0:	f7f9 fedc 	bl	80019ac <HAL_GetTick>
 8007bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bf8:	f7f9 fed8 	bl	80019ac <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e1ce      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c0a:	4b52      	ldr	r3, [pc, #328]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f0      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d036      	beq.n	8007c90 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d019      	beq.n	8007c5e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c2a:	4b4a      	ldr	r3, [pc, #296]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a49      	ldr	r2, [pc, #292]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c36:	f7f9 feb9 	bl	80019ac <HAL_GetTick>
 8007c3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c3c:	e008      	b.n	8007c50 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007c3e:	f7f9 feb5 	bl	80019ac <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d901      	bls.n	8007c50 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e1ab      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c50:	4b40      	ldr	r3, [pc, #256]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0f0      	beq.n	8007c3e <HAL_RCC_OscConfig+0x432>
 8007c5c:	e018      	b.n	8007c90 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c5e:	4b3d      	ldr	r3, [pc, #244]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a3c      	ldr	r2, [pc, #240]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c6a:	f7f9 fe9f 	bl	80019ac <HAL_GetTick>
 8007c6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007c72:	f7f9 fe9b 	bl	80019ac <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e191      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c84:	4b33      	ldr	r3, [pc, #204]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1f0      	bne.n	8007c72 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8086 	beq.w	8007daa <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c9e:	4b2e      	ldr	r3, [pc, #184]	; (8007d58 <HAL_RCC_OscConfig+0x54c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a2d      	ldr	r2, [pc, #180]	; (8007d58 <HAL_RCC_OscConfig+0x54c>)
 8007ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007caa:	f7f9 fe7f 	bl	80019ac <HAL_GetTick>
 8007cae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cb0:	e008      	b.n	8007cc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007cb2:	f7f9 fe7b 	bl	80019ac <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b64      	cmp	r3, #100	; 0x64
 8007cbe:	d901      	bls.n	8007cc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e171      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cc4:	4b24      	ldr	r3, [pc, #144]	; (8007d58 <HAL_RCC_OscConfig+0x54c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f0      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d106      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x4da>
 8007cd8:	4b1e      	ldr	r3, [pc, #120]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cdc:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007cde:	f043 0301 	orr.w	r3, r3, #1
 8007ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ce4:	e02d      	b.n	8007d42 <HAL_RCC_OscConfig+0x536>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10c      	bne.n	8007d08 <HAL_RCC_OscConfig+0x4fc>
 8007cee:	4b19      	ldr	r3, [pc, #100]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf2:	4a18      	ldr	r2, [pc, #96]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cfa:	4b16      	ldr	r3, [pc, #88]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007d00:	f023 0304 	bic.w	r3, r3, #4
 8007d04:	6713      	str	r3, [r2, #112]	; 0x70
 8007d06:	e01c      	b.n	8007d42 <HAL_RCC_OscConfig+0x536>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	2b05      	cmp	r3, #5
 8007d0e:	d10c      	bne.n	8007d2a <HAL_RCC_OscConfig+0x51e>
 8007d10:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d14:	4a0f      	ldr	r2, [pc, #60]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007d16:	f043 0304 	orr.w	r3, r3, #4
 8007d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d20:	4a0c      	ldr	r2, [pc, #48]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007d22:	f043 0301 	orr.w	r3, r3, #1
 8007d26:	6713      	str	r3, [r2, #112]	; 0x70
 8007d28:	e00b      	b.n	8007d42 <HAL_RCC_OscConfig+0x536>
 8007d2a:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2e:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007d30:	f023 0301 	bic.w	r3, r3, #1
 8007d34:	6713      	str	r3, [r2, #112]	; 0x70
 8007d36:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3a:	4a06      	ldr	r2, [pc, #24]	; (8007d54 <HAL_RCC_OscConfig+0x548>)
 8007d3c:	f023 0304 	bic.w	r3, r3, #4
 8007d40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d01a      	beq.n	8007d80 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d4a:	f7f9 fe2f 	bl	80019ac <HAL_GetTick>
 8007d4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d50:	e00f      	b.n	8007d72 <HAL_RCC_OscConfig+0x566>
 8007d52:	bf00      	nop
 8007d54:	58024400 	.word	0x58024400
 8007d58:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d5c:	f7f9 fe26 	bl	80019ac <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e11a      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d72:	4b8f      	ldr	r3, [pc, #572]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0ee      	beq.n	8007d5c <HAL_RCC_OscConfig+0x550>
 8007d7e:	e014      	b.n	8007daa <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d80:	f7f9 fe14 	bl	80019ac <HAL_GetTick>
 8007d84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d86:	e00a      	b.n	8007d9e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d88:	f7f9 fe10 	bl	80019ac <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e104      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d9e:	4b84      	ldr	r3, [pc, #528]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1ee      	bne.n	8007d88 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 80f9 	beq.w	8007fa6 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007db4:	4b7e      	ldr	r3, [pc, #504]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dbc:	2b18      	cmp	r3, #24
 8007dbe:	f000 80b4 	beq.w	8007f2a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	f040 8095 	bne.w	8007ef6 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dcc:	4b78      	ldr	r3, [pc, #480]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a77      	ldr	r2, [pc, #476]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd8:	f7f9 fde8 	bl	80019ac <HAL_GetTick>
 8007ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dde:	e008      	b.n	8007df2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007de0:	f7f9 fde4 	bl	80019ac <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d901      	bls.n	8007df2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e0da      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007df2:	4b6f      	ldr	r3, [pc, #444]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1f0      	bne.n	8007de0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dfe:	4b6c      	ldr	r3, [pc, #432]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e02:	4b6c      	ldr	r3, [pc, #432]	; (8007fb4 <HAL_RCC_OscConfig+0x7a8>)
 8007e04:	4013      	ands	r3, r2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e0e:	0112      	lsls	r2, r2, #4
 8007e10:	430a      	orrs	r2, r1
 8007e12:	4967      	ldr	r1, [pc, #412]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	628b      	str	r3, [r1, #40]	; 0x28
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e26:	3b01      	subs	r3, #1
 8007e28:	025b      	lsls	r3, r3, #9
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e32:	3b01      	subs	r3, #1
 8007e34:	041b      	lsls	r3, r3, #16
 8007e36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e40:	3b01      	subs	r3, #1
 8007e42:	061b      	lsls	r3, r3, #24
 8007e44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e48:	4959      	ldr	r1, [pc, #356]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007e4e:	4b58      	ldr	r3, [pc, #352]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	4a57      	ldr	r2, [pc, #348]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e54:	f023 0301 	bic.w	r3, r3, #1
 8007e58:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e5a:	4b55      	ldr	r3, [pc, #340]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e5e:	4b56      	ldr	r3, [pc, #344]	; (8007fb8 <HAL_RCC_OscConfig+0x7ac>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e66:	00d2      	lsls	r2, r2, #3
 8007e68:	4951      	ldr	r1, [pc, #324]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e6e:	4b50      	ldr	r3, [pc, #320]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	f023 020c 	bic.w	r2, r3, #12
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	494d      	ldr	r1, [pc, #308]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007e80:	4b4b      	ldr	r3, [pc, #300]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	f023 0202 	bic.w	r2, r3, #2
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8c:	4948      	ldr	r1, [pc, #288]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e92:	4b47      	ldr	r3, [pc, #284]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	4a46      	ldr	r2, [pc, #280]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9e:	4b44      	ldr	r3, [pc, #272]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	4a43      	ldr	r2, [pc, #268]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007eaa:	4b41      	ldr	r3, [pc, #260]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	4a40      	ldr	r2, [pc, #256]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007eb6:	4b3e      	ldr	r3, [pc, #248]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	4a3d      	ldr	r2, [pc, #244]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007ebc:	f043 0301 	orr.w	r3, r3, #1
 8007ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ec2:	4b3b      	ldr	r3, [pc, #236]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a3a      	ldr	r2, [pc, #232]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ece:	f7f9 fd6d 	bl	80019ac <HAL_GetTick>
 8007ed2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ed4:	e008      	b.n	8007ee8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ed6:	f7f9 fd69 	bl	80019ac <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d901      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e05f      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ee8:	4b31      	ldr	r3, [pc, #196]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0f0      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x6ca>
 8007ef4:	e057      	b.n	8007fa6 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ef6:	4b2e      	ldr	r3, [pc, #184]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a2d      	ldr	r2, [pc, #180]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007efc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f02:	f7f9 fd53 	bl	80019ac <HAL_GetTick>
 8007f06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f08:	e008      	b.n	8007f1c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f0a:	f7f9 fd4f 	bl	80019ac <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d901      	bls.n	8007f1c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e045      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f1c:	4b24      	ldr	r3, [pc, #144]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1f0      	bne.n	8007f0a <HAL_RCC_OscConfig+0x6fe>
 8007f28:	e03d      	b.n	8007fa6 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f2a:	4b21      	ldr	r3, [pc, #132]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f30:	4b1f      	ldr	r3, [pc, #124]	; (8007fb0 <HAL_RCC_OscConfig+0x7a4>)
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d031      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f003 0203 	and.w	r2, r3, #3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d12a      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	091b      	lsrs	r3, r3, #4
 8007f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d122      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f66:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d11a      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	0a5b      	lsrs	r3, r3, #9
 8007f70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f78:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d111      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	0c1b      	lsrs	r3, r3, #16
 8007f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d108      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	0e1b      	lsrs	r3, r3, #24
 8007f94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d001      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3730      	adds	r7, #48	; 0x30
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	58024400 	.word	0x58024400
 8007fb4:	fffffc0c 	.word	0xfffffc0c
 8007fb8:	ffff0007 	.word	0xffff0007

08007fbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e19c      	b.n	800830a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fd0:	4b8a      	ldr	r3, [pc, #552]	; (80081fc <HAL_RCC_ClockConfig+0x240>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 030f 	and.w	r3, r3, #15
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d910      	bls.n	8008000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fde:	4b87      	ldr	r3, [pc, #540]	; (80081fc <HAL_RCC_ClockConfig+0x240>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f023 020f 	bic.w	r2, r3, #15
 8007fe6:	4985      	ldr	r1, [pc, #532]	; (80081fc <HAL_RCC_ClockConfig+0x240>)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fee:	4b83      	ldr	r3, [pc, #524]	; (80081fc <HAL_RCC_ClockConfig+0x240>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d001      	beq.n	8008000 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e184      	b.n	800830a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d010      	beq.n	800802e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691a      	ldr	r2, [r3, #16]
 8008010:	4b7b      	ldr	r3, [pc, #492]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008018:	429a      	cmp	r2, r3
 800801a:	d908      	bls.n	800802e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800801c:	4b78      	ldr	r3, [pc, #480]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	4975      	ldr	r1, [pc, #468]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800802a:	4313      	orrs	r3, r2
 800802c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	d010      	beq.n	800805c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695a      	ldr	r2, [r3, #20]
 800803e:	4b70      	ldr	r3, [pc, #448]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008046:	429a      	cmp	r2, r3
 8008048:	d908      	bls.n	800805c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800804a:	4b6d      	ldr	r3, [pc, #436]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	496a      	ldr	r1, [pc, #424]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 8008058:	4313      	orrs	r3, r2
 800805a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	2b00      	cmp	r3, #0
 8008066:	d010      	beq.n	800808a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699a      	ldr	r2, [r3, #24]
 800806c:	4b64      	ldr	r3, [pc, #400]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008074:	429a      	cmp	r2, r3
 8008076:	d908      	bls.n	800808a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008078:	4b61      	ldr	r3, [pc, #388]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	495e      	ldr	r1, [pc, #376]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 8008086:	4313      	orrs	r3, r2
 8008088:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0320 	and.w	r3, r3, #32
 8008092:	2b00      	cmp	r3, #0
 8008094:	d010      	beq.n	80080b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69da      	ldr	r2, [r3, #28]
 800809a:	4b59      	ldr	r3, [pc, #356]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d908      	bls.n	80080b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80080a6:	4b56      	ldr	r3, [pc, #344]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	4953      	ldr	r1, [pc, #332]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0302 	and.w	r3, r3, #2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d010      	beq.n	80080e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	4b4d      	ldr	r3, [pc, #308]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	f003 030f 	and.w	r3, r3, #15
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d908      	bls.n	80080e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080d4:	4b4a      	ldr	r3, [pc, #296]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	f023 020f 	bic.w	r2, r3, #15
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	4947      	ldr	r1, [pc, #284]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d055      	beq.n	800819e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80080f2:	4b43      	ldr	r3, [pc, #268]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	4940      	ldr	r1, [pc, #256]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 8008100:	4313      	orrs	r3, r2
 8008102:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d107      	bne.n	800811c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800810c:	4b3c      	ldr	r3, [pc, #240]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d121      	bne.n	800815c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e0f6      	b.n	800830a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b03      	cmp	r3, #3
 8008122:	d107      	bne.n	8008134 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008124:	4b36      	ldr	r3, [pc, #216]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d115      	bne.n	800815c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e0ea      	b.n	800830a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d107      	bne.n	800814c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800813c:	4b30      	ldr	r3, [pc, #192]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008144:	2b00      	cmp	r3, #0
 8008146:	d109      	bne.n	800815c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e0de      	b.n	800830a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800814c:	4b2c      	ldr	r3, [pc, #176]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e0d6      	b.n	800830a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800815c:	4b28      	ldr	r3, [pc, #160]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	f023 0207 	bic.w	r2, r3, #7
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	4925      	ldr	r1, [pc, #148]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800816a:	4313      	orrs	r3, r2
 800816c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800816e:	f7f9 fc1d 	bl	80019ac <HAL_GetTick>
 8008172:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008174:	e00a      	b.n	800818c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008176:	f7f9 fc19 	bl	80019ac <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	f241 3288 	movw	r2, #5000	; 0x1388
 8008184:	4293      	cmp	r3, r2
 8008186:	d901      	bls.n	800818c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e0be      	b.n	800830a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800818c:	4b1c      	ldr	r3, [pc, #112]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	429a      	cmp	r2, r3
 800819c:	d1eb      	bne.n	8008176 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d010      	beq.n	80081cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	4b14      	ldr	r3, [pc, #80]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d208      	bcs.n	80081cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081ba:	4b11      	ldr	r3, [pc, #68]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	f023 020f 	bic.w	r2, r3, #15
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	490e      	ldr	r1, [pc, #56]	; (8008200 <HAL_RCC_ClockConfig+0x244>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80081cc:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <HAL_RCC_ClockConfig+0x240>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d214      	bcs.n	8008204 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081da:	4b08      	ldr	r3, [pc, #32]	; (80081fc <HAL_RCC_ClockConfig+0x240>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f023 020f 	bic.w	r2, r3, #15
 80081e2:	4906      	ldr	r1, [pc, #24]	; (80081fc <HAL_RCC_ClockConfig+0x240>)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ea:	4b04      	ldr	r3, [pc, #16]	; (80081fc <HAL_RCC_ClockConfig+0x240>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d005      	beq.n	8008204 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e086      	b.n	800830a <HAL_RCC_ClockConfig+0x34e>
 80081fc:	52002000 	.word	0x52002000
 8008200:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d010      	beq.n	8008232 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	4b3f      	ldr	r3, [pc, #252]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800821c:	429a      	cmp	r2, r3
 800821e:	d208      	bcs.n	8008232 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008220:	4b3c      	ldr	r3, [pc, #240]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	4939      	ldr	r1, [pc, #228]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 800822e:	4313      	orrs	r3, r2
 8008230:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b00      	cmp	r3, #0
 800823c:	d010      	beq.n	8008260 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	695a      	ldr	r2, [r3, #20]
 8008242:	4b34      	ldr	r3, [pc, #208]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800824a:	429a      	cmp	r2, r3
 800824c:	d208      	bcs.n	8008260 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800824e:	4b31      	ldr	r3, [pc, #196]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	492e      	ldr	r1, [pc, #184]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 800825c:	4313      	orrs	r3, r2
 800825e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0310 	and.w	r3, r3, #16
 8008268:	2b00      	cmp	r3, #0
 800826a:	d010      	beq.n	800828e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699a      	ldr	r2, [r3, #24]
 8008270:	4b28      	ldr	r3, [pc, #160]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008278:	429a      	cmp	r2, r3
 800827a:	d208      	bcs.n	800828e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800827c:	4b25      	ldr	r3, [pc, #148]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	4922      	ldr	r1, [pc, #136]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 800828a:	4313      	orrs	r3, r2
 800828c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	d010      	beq.n	80082bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69da      	ldr	r2, [r3, #28]
 800829e:	4b1d      	ldr	r3, [pc, #116]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d208      	bcs.n	80082bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80082aa:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	4917      	ldr	r1, [pc, #92]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80082bc:	f000 f834 	bl	8008328 <HAL_RCC_GetSysClockFreq>
 80082c0:	4601      	mov	r1, r0
 80082c2:	4b14      	ldr	r3, [pc, #80]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	0a1b      	lsrs	r3, r3, #8
 80082c8:	f003 030f 	and.w	r3, r3, #15
 80082cc:	4a12      	ldr	r2, [pc, #72]	; (8008318 <HAL_RCC_ClockConfig+0x35c>)
 80082ce:	5cd3      	ldrb	r3, [r2, r3]
 80082d0:	f003 031f 	and.w	r3, r3, #31
 80082d4:	fa21 f303 	lsr.w	r3, r1, r3
 80082d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082da:	4b0e      	ldr	r3, [pc, #56]	; (8008314 <HAL_RCC_ClockConfig+0x358>)
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	4a0d      	ldr	r2, [pc, #52]	; (8008318 <HAL_RCC_ClockConfig+0x35c>)
 80082e4:	5cd3      	ldrb	r3, [r2, r3]
 80082e6:	f003 031f 	and.w	r3, r3, #31
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	fa22 f303 	lsr.w	r3, r2, r3
 80082f0:	4a0a      	ldr	r2, [pc, #40]	; (800831c <HAL_RCC_ClockConfig+0x360>)
 80082f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082f4:	4a0a      	ldr	r2, [pc, #40]	; (8008320 <HAL_RCC_ClockConfig+0x364>)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80082fa:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <HAL_RCC_ClockConfig+0x368>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7f9 fb0a 	bl	8001918 <HAL_InitTick>
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	58024400 	.word	0x58024400
 8008318:	080144cc 	.word	0x080144cc
 800831c:	24000004 	.word	0x24000004
 8008320:	24000000 	.word	0x24000000
 8008324:	24000008 	.word	0x24000008

08008328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008328:	b480      	push	{r7}
 800832a:	b089      	sub	sp, #36	; 0x24
 800832c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800832e:	4baf      	ldr	r3, [pc, #700]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008336:	2b18      	cmp	r3, #24
 8008338:	f200 814e 	bhi.w	80085d8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800833c:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <HAL_RCC_GetSysClockFreq+0x1c>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	080083a9 	.word	0x080083a9
 8008348:	080085d9 	.word	0x080085d9
 800834c:	080085d9 	.word	0x080085d9
 8008350:	080085d9 	.word	0x080085d9
 8008354:	080085d9 	.word	0x080085d9
 8008358:	080085d9 	.word	0x080085d9
 800835c:	080085d9 	.word	0x080085d9
 8008360:	080085d9 	.word	0x080085d9
 8008364:	080083cf 	.word	0x080083cf
 8008368:	080085d9 	.word	0x080085d9
 800836c:	080085d9 	.word	0x080085d9
 8008370:	080085d9 	.word	0x080085d9
 8008374:	080085d9 	.word	0x080085d9
 8008378:	080085d9 	.word	0x080085d9
 800837c:	080085d9 	.word	0x080085d9
 8008380:	080085d9 	.word	0x080085d9
 8008384:	080083d5 	.word	0x080083d5
 8008388:	080085d9 	.word	0x080085d9
 800838c:	080085d9 	.word	0x080085d9
 8008390:	080085d9 	.word	0x080085d9
 8008394:	080085d9 	.word	0x080085d9
 8008398:	080085d9 	.word	0x080085d9
 800839c:	080085d9 	.word	0x080085d9
 80083a0:	080085d9 	.word	0x080085d9
 80083a4:	080083db 	.word	0x080083db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083a8:	4b90      	ldr	r3, [pc, #576]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d009      	beq.n	80083c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083b4:	4b8d      	ldr	r3, [pc, #564]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	08db      	lsrs	r3, r3, #3
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	4a8c      	ldr	r2, [pc, #560]	; (80085f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80083c0:	fa22 f303 	lsr.w	r3, r2, r3
 80083c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80083c6:	e10a      	b.n	80085de <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80083c8:	4b89      	ldr	r3, [pc, #548]	; (80085f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80083ca:	61bb      	str	r3, [r7, #24]
    break;
 80083cc:	e107      	b.n	80085de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80083ce:	4b89      	ldr	r3, [pc, #548]	; (80085f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80083d0:	61bb      	str	r3, [r7, #24]
    break;
 80083d2:	e104      	b.n	80085de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80083d4:	4b88      	ldr	r3, [pc, #544]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80083d6:	61bb      	str	r3, [r7, #24]
    break;
 80083d8:	e101      	b.n	80085de <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083da:	4b84      	ldr	r3, [pc, #528]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80083e4:	4b81      	ldr	r3, [pc, #516]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e8:	091b      	lsrs	r3, r3, #4
 80083ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80083f0:	4b7e      	ldr	r3, [pc, #504]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80083fa:	4b7c      	ldr	r3, [pc, #496]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fe:	08db      	lsrs	r3, r3, #3
 8008400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	fb02 f303 	mul.w	r3, r2, r3
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008412:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80da 	beq.w	80085d2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d05a      	beq.n	80084da <HAL_RCC_GetSysClockFreq+0x1b2>
 8008424:	2b01      	cmp	r3, #1
 8008426:	d302      	bcc.n	800842e <HAL_RCC_GetSysClockFreq+0x106>
 8008428:	2b02      	cmp	r3, #2
 800842a:	d078      	beq.n	800851e <HAL_RCC_GetSysClockFreq+0x1f6>
 800842c:	e099      	b.n	8008562 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800842e:	4b6f      	ldr	r3, [pc, #444]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	d02d      	beq.n	8008496 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800843a:	4b6c      	ldr	r3, [pc, #432]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	08db      	lsrs	r3, r3, #3
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	4a6a      	ldr	r2, [pc, #424]	; (80085f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008446:	fa22 f303 	lsr.w	r3, r2, r3
 800844a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008464:	4b61      	ldr	r3, [pc, #388]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846c:	ee07 3a90 	vmov	s15, r3
 8008470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008474:	ed97 6a02 	vldr	s12, [r7, #8]
 8008478:	eddf 5a60 	vldr	s11, [pc, #384]	; 80085fc <HAL_RCC_GetSysClockFreq+0x2d4>
 800847c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800848c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008490:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008494:	e087      	b.n	80085a6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	ee07 3a90 	vmov	s15, r3
 800849c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008600 <HAL_RCC_GetSysClockFreq+0x2d8>
 80084a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a8:	4b50      	ldr	r3, [pc, #320]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80084bc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80085fc <HAL_RCC_GetSysClockFreq+0x2d4>
 80084c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084d8:	e065      	b.n	80085a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	ee07 3a90 	vmov	s15, r3
 80084e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8008604 <HAL_RCC_GetSysClockFreq+0x2dc>
 80084e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ec:	4b3f      	ldr	r3, [pc, #252]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8008500:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80085fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8008504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800850c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008518:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800851c:	e043      	b.n	80085a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008528:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008608 <HAL_RCC_GetSysClockFreq+0x2e0>
 800852c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008530:	4b2e      	ldr	r3, [pc, #184]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008540:	ed97 6a02 	vldr	s12, [r7, #8]
 8008544:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80085fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8008548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800854c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800855c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008560:	e021      	b.n	80085a6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008604 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008574:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008584:	ed97 6a02 	vldr	s12, [r7, #8]
 8008588:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80085fc <HAL_RCC_GetSysClockFreq+0x2d4>
 800858c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800859c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085a4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80085a6:	4b11      	ldr	r3, [pc, #68]	; (80085ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	0a5b      	lsrs	r3, r3, #9
 80085ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b0:	3301      	adds	r3, #1
 80085b2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085be:	edd7 6a07 	vldr	s13, [r7, #28]
 80085c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ca:	ee17 3a90 	vmov	r3, s15
 80085ce:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80085d0:	e005      	b.n	80085de <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61bb      	str	r3, [r7, #24]
    break;
 80085d6:	e002      	b.n	80085de <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80085d8:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80085da:	61bb      	str	r3, [r7, #24]
    break;
 80085dc:	bf00      	nop
  }

  return sysclockfreq;
 80085de:	69bb      	ldr	r3, [r7, #24]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3724      	adds	r7, #36	; 0x24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	58024400 	.word	0x58024400
 80085f0:	03d09000 	.word	0x03d09000
 80085f4:	003d0900 	.word	0x003d0900
 80085f8:	007a1200 	.word	0x007a1200
 80085fc:	46000000 	.word	0x46000000
 8008600:	4c742400 	.word	0x4c742400
 8008604:	4a742400 	.word	0x4a742400
 8008608:	4af42400 	.word	0x4af42400

0800860c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008612:	f7ff fe89 	bl	8008328 <HAL_RCC_GetSysClockFreq>
 8008616:	4601      	mov	r1, r0
 8008618:	4b10      	ldr	r3, [pc, #64]	; (800865c <HAL_RCC_GetHCLKFreq+0x50>)
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	0a1b      	lsrs	r3, r3, #8
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	4a0f      	ldr	r2, [pc, #60]	; (8008660 <HAL_RCC_GetHCLKFreq+0x54>)
 8008624:	5cd3      	ldrb	r3, [r2, r3]
 8008626:	f003 031f 	and.w	r3, r3, #31
 800862a:	fa21 f303 	lsr.w	r3, r1, r3
 800862e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008630:	4b0a      	ldr	r3, [pc, #40]	; (800865c <HAL_RCC_GetHCLKFreq+0x50>)
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	f003 030f 	and.w	r3, r3, #15
 8008638:	4a09      	ldr	r2, [pc, #36]	; (8008660 <HAL_RCC_GetHCLKFreq+0x54>)
 800863a:	5cd3      	ldrb	r3, [r2, r3]
 800863c:	f003 031f 	and.w	r3, r3, #31
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	fa22 f303 	lsr.w	r3, r2, r3
 8008646:	4a07      	ldr	r2, [pc, #28]	; (8008664 <HAL_RCC_GetHCLKFreq+0x58>)
 8008648:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800864a:	4a07      	ldr	r2, [pc, #28]	; (8008668 <HAL_RCC_GetHCLKFreq+0x5c>)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <HAL_RCC_GetHCLKFreq+0x58>)
 8008652:	681b      	ldr	r3, [r3, #0]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	58024400 	.word	0x58024400
 8008660:	080144cc 	.word	0x080144cc
 8008664:	24000004 	.word	0x24000004
 8008668:	24000000 	.word	0x24000000

0800866c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008670:	f7ff ffcc 	bl	800860c <HAL_RCC_GetHCLKFreq>
 8008674:	4601      	mov	r1, r0
 8008676:	4b06      	ldr	r3, [pc, #24]	; (8008690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	091b      	lsrs	r3, r3, #4
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	4a04      	ldr	r2, [pc, #16]	; (8008694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008682:	5cd3      	ldrb	r3, [r2, r3]
 8008684:	f003 031f 	and.w	r3, r3, #31
 8008688:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800868c:	4618      	mov	r0, r3
 800868e:	bd80      	pop	{r7, pc}
 8008690:	58024400 	.word	0x58024400
 8008694:	080144cc 	.word	0x080144cc

08008698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800869c:	f7ff ffb6 	bl	800860c <HAL_RCC_GetHCLKFreq>
 80086a0:	4601      	mov	r1, r0
 80086a2:	4b06      	ldr	r3, [pc, #24]	; (80086bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	0a1b      	lsrs	r3, r3, #8
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	4a04      	ldr	r2, [pc, #16]	; (80086c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80086ae:	5cd3      	ldrb	r3, [r2, r3]
 80086b0:	f003 031f 	and.w	r3, r3, #31
 80086b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	58024400 	.word	0x58024400
 80086c0:	080144cc 	.word	0x080144cc

080086c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086cc:	2300      	movs	r3, #0
 80086ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086d0:	2300      	movs	r3, #0
 80086d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d03d      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e8:	d013      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80086ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086ee:	d802      	bhi.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d007      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80086f4:	e01f      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80086f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086fa:	d013      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80086fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008700:	d01c      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008702:	e018      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008704:	4baf      	ldr	r3, [pc, #700]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	4aae      	ldr	r2, [pc, #696]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800870a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800870e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008710:	e015      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3304      	adds	r3, #4
 8008716:	2102      	movs	r1, #2
 8008718:	4618      	mov	r0, r3
 800871a:	f001 fd23 	bl	800a164 <RCCEx_PLL2_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008722:	e00c      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3324      	adds	r3, #36	; 0x24
 8008728:	2102      	movs	r1, #2
 800872a:	4618      	mov	r0, r3
 800872c:	f001 fdcc 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008734:	e003      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	75fb      	strb	r3, [r7, #23]
      break;
 800873a:	e000      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800873c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d109      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008744:	4b9f      	ldr	r3, [pc, #636]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008750:	499c      	ldr	r1, [pc, #624]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008752:	4313      	orrs	r3, r2
 8008754:	650b      	str	r3, [r1, #80]	; 0x50
 8008756:	e001      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008764:	2b00      	cmp	r3, #0
 8008766:	d03d      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876c:	2b04      	cmp	r3, #4
 800876e:	d826      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	0800878d 	.word	0x0800878d
 800877c:	0800879b 	.word	0x0800879b
 8008780:	080087ad 	.word	0x080087ad
 8008784:	080087c5 	.word	0x080087c5
 8008788:	080087c5 	.word	0x080087c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878c:	4b8d      	ldr	r3, [pc, #564]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	4a8c      	ldr	r2, [pc, #560]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008798:	e015      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3304      	adds	r3, #4
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 fcdf 	bl	800a164 <RCCEx_PLL2_Config>
 80087a6:	4603      	mov	r3, r0
 80087a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087aa:	e00c      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3324      	adds	r3, #36	; 0x24
 80087b0:	2100      	movs	r1, #0
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 fd88 	bl	800a2c8 <RCCEx_PLL3_Config>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087bc:	e003      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	75fb      	strb	r3, [r7, #23]
      break;
 80087c2:	e000      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80087c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d109      	bne.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087cc:	4b7d      	ldr	r3, [pc, #500]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d0:	f023 0207 	bic.w	r2, r3, #7
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d8:	497a      	ldr	r1, [pc, #488]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	650b      	str	r3, [r1, #80]	; 0x50
 80087de:	e001      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d03e      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f4:	2b80      	cmp	r3, #128	; 0x80
 80087f6:	d01c      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80087f8:	2b80      	cmp	r3, #128	; 0x80
 80087fa:	d804      	bhi.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d008      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008800:	2b40      	cmp	r3, #64	; 0x40
 8008802:	d00d      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008804:	e01e      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008806:	2bc0      	cmp	r3, #192	; 0xc0
 8008808:	d01f      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800880a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800880e:	d01e      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008810:	e018      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008812:	4b6c      	ldr	r3, [pc, #432]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	4a6b      	ldr	r2, [pc, #428]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800881c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800881e:	e017      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3304      	adds	r3, #4
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f001 fc9c 	bl	800a164 <RCCEx_PLL2_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008830:	e00e      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3324      	adds	r3, #36	; 0x24
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f001 fd45 	bl	800a2c8 <RCCEx_PLL3_Config>
 800883e:	4603      	mov	r3, r0
 8008840:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008842:	e005      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	75fb      	strb	r3, [r7, #23]
      break;
 8008848:	e002      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800884a:	bf00      	nop
 800884c:	e000      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800884e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008856:	4b5b      	ldr	r3, [pc, #364]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008862:	4958      	ldr	r1, [pc, #352]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008864:	4313      	orrs	r3, r2
 8008866:	650b      	str	r3, [r1, #80]	; 0x50
 8008868:	e001      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008876:	2b00      	cmp	r3, #0
 8008878:	d044      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008884:	d01f      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800888a:	d805      	bhi.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00a      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008894:	d00e      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8008896:	e01f      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008898:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800889c:	d01f      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800889e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088a2:	d01e      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80088a4:	e018      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a6:	4b47      	ldr	r3, [pc, #284]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088aa:	4a46      	ldr	r2, [pc, #280]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088b2:	e017      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3304      	adds	r3, #4
 80088b8:	2100      	movs	r1, #0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 fc52 	bl	800a164 <RCCEx_PLL2_Config>
 80088c0:	4603      	mov	r3, r0
 80088c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80088c4:	e00e      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3324      	adds	r3, #36	; 0x24
 80088ca:	2100      	movs	r1, #0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 fcfb 	bl	800a2c8 <RCCEx_PLL3_Config>
 80088d2:	4603      	mov	r3, r0
 80088d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088d6:	e005      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
      break;
 80088dc:	e002      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80088de:	bf00      	nop
 80088e0:	e000      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80088e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80088ea:	4b36      	ldr	r3, [pc, #216]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088f8:	4932      	ldr	r1, [pc, #200]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	658b      	str	r3, [r1, #88]	; 0x58
 80088fe:	e001      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800890c:	2b00      	cmp	r3, #0
 800890e:	d044      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008916:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800891a:	d01f      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800891c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008920:	d805      	bhi.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8008926:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800892a:	d00e      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800892c:	e01f      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800892e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008932:	d01f      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008938:	d01e      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800893a:	e018      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800893c:	4b21      	ldr	r3, [pc, #132]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	4a20      	ldr	r2, [pc, #128]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008948:	e017      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3304      	adds	r3, #4
 800894e:	2100      	movs	r1, #0
 8008950:	4618      	mov	r0, r3
 8008952:	f001 fc07 	bl	800a164 <RCCEx_PLL2_Config>
 8008956:	4603      	mov	r3, r0
 8008958:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800895a:	e00e      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3324      	adds	r3, #36	; 0x24
 8008960:	2100      	movs	r1, #0
 8008962:	4618      	mov	r0, r3
 8008964:	f001 fcb0 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008968:	4603      	mov	r3, r0
 800896a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800896c:	e005      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	75fb      	strb	r3, [r7, #23]
      break;
 8008972:	e002      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008974:	bf00      	nop
 8008976:	e000      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008980:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008984:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800898e:	490d      	ldr	r1, [pc, #52]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008990:	4313      	orrs	r3, r2
 8008992:	658b      	str	r3, [r1, #88]	; 0x58
 8008994:	e001      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008996:	7dfb      	ldrb	r3, [r7, #23]
 8008998:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d035      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089aa:	2b10      	cmp	r3, #16
 80089ac:	d00c      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80089ae:	2b10      	cmp	r3, #16
 80089b0:	d802      	bhi.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d01b      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80089b6:	e017      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80089b8:	2b20      	cmp	r3, #32
 80089ba:	d00c      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80089bc:	2b30      	cmp	r3, #48	; 0x30
 80089be:	d018      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80089c0:	e012      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80089c2:	bf00      	nop
 80089c4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c8:	4baf      	ldr	r3, [pc, #700]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	4aae      	ldr	r2, [pc, #696]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80089ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80089d4:	e00e      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3304      	adds	r3, #4
 80089da:	2102      	movs	r1, #2
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 fbc1 	bl	800a164 <RCCEx_PLL2_Config>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80089e6:	e005      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	75fb      	strb	r3, [r7, #23]
      break;
 80089ec:	e002      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80089ee:	bf00      	nop
 80089f0:	e000      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80089f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d109      	bne.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80089fa:	4ba3      	ldr	r3, [pc, #652]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80089fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a06:	49a0      	ldr	r1, [pc, #640]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a0c:	e001      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d042      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a26:	d01f      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a2c:	d805      	bhi.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8008a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a36:	d00e      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008a38:	e01f      	b.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008a3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a3e:	d01f      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a44:	d01e      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008a46:	e018      	b.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a48:	4b8f      	ldr	r3, [pc, #572]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	4a8e      	ldr	r2, [pc, #568]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a54:	e017      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 fb81 	bl	800a164 <RCCEx_PLL2_Config>
 8008a62:	4603      	mov	r3, r0
 8008a64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a66:	e00e      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3324      	adds	r3, #36	; 0x24
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f001 fc2a 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008a74:	4603      	mov	r3, r0
 8008a76:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a78:	e005      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a7e:	e002      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008a80:	bf00      	nop
 8008a82:	e000      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d109      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a8c:	4b7e      	ldr	r3, [pc, #504]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a90:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a98:	497b      	ldr	r1, [pc, #492]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	650b      	str	r3, [r1, #80]	; 0x50
 8008a9e:	e001      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d042      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ab8:	d01b      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008abe:	d805      	bhi.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d022      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac8:	d00a      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008aca:	e01b      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008acc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ad0:	d01d      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8008ad2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ad6:	d01c      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008ad8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008adc:	d01b      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008ade:	e011      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 fb3c 	bl	800a164 <RCCEx_PLL2_Config>
 8008aec:	4603      	mov	r3, r0
 8008aee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008af0:	e012      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3324      	adds	r3, #36	; 0x24
 8008af6:	2101      	movs	r1, #1
 8008af8:	4618      	mov	r0, r3
 8008afa:	f001 fbe5 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008afe:	4603      	mov	r3, r0
 8008b00:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b02:	e009      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	75fb      	strb	r3, [r7, #23]
      break;
 8008b08:	e006      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b0a:	bf00      	nop
 8008b0c:	e004      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b0e:	bf00      	nop
 8008b10:	e002      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b12:	bf00      	nop
 8008b14:	e000      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d109      	bne.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008b1e:	4b5a      	ldr	r3, [pc, #360]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b22:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b2a:	4957      	ldr	r1, [pc, #348]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	650b      	str	r3, [r1, #80]	; 0x50
 8008b30:	e001      	b.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b32:	7dfb      	ldrb	r3, [r7, #23]
 8008b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d044      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b4c:	d01b      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b52:	d805      	bhi.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d022      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b5c:	d00a      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008b5e:	e01b      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b64:	d01d      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b6a:	d01c      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008b6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b70:	d01b      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008b72:	e011      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3304      	adds	r3, #4
 8008b78:	2101      	movs	r1, #1
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f001 faf2 	bl	800a164 <RCCEx_PLL2_Config>
 8008b80:	4603      	mov	r3, r0
 8008b82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008b84:	e012      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3324      	adds	r3, #36	; 0x24
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 fb9b 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008b92:	4603      	mov	r3, r0
 8008b94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008b96:	e009      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b9c:	e006      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008b9e:	bf00      	nop
 8008ba0:	e004      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008ba2:	bf00      	nop
 8008ba4:	e002      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008ba6:	bf00      	nop
 8008ba8:	e000      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10a      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008bb2:	4b35      	ldr	r3, [pc, #212]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bc0:	4931      	ldr	r1, [pc, #196]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	658b      	str	r3, [r1, #88]	; 0x58
 8008bc6:	e001      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d02d      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008be0:	d005      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008be6:	d009      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d013      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008bec:	e00f      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bee:	4b26      	ldr	r3, [pc, #152]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	4a25      	ldr	r2, [pc, #148]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008bfa:	e00c      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	2101      	movs	r1, #1
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 faae 	bl	800a164 <RCCEx_PLL2_Config>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c0c:	e003      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	75fb      	strb	r3, [r7, #23]
      break;
 8008c12:	e000      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d109      	bne.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c1c:	4b1a      	ldr	r3, [pc, #104]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c28:	4917      	ldr	r1, [pc, #92]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	650b      	str	r3, [r1, #80]	; 0x50
 8008c2e:	e001      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d035      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d81b      	bhi.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008c48:	a201      	add	r2, pc, #4	; (adr r2, 8008c50 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008c8d 	.word	0x08008c8d
 8008c54:	08008c61 	.word	0x08008c61
 8008c58:	08008c6f 	.word	0x08008c6f
 8008c5c:	08008c8d 	.word	0x08008c8d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c60:	4b09      	ldr	r3, [pc, #36]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	4a08      	ldr	r2, [pc, #32]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008c6c:	e00f      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3304      	adds	r3, #4
 8008c72:	2102      	movs	r1, #2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 fa75 	bl	800a164 <RCCEx_PLL2_Config>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008c7e:	e006      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	75fb      	strb	r3, [r7, #23]
      break;
 8008c84:	e003      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8008c86:	bf00      	nop
 8008c88:	58024400 	.word	0x58024400
      break;
 8008c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d109      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008c94:	4bba      	ldr	r3, [pc, #744]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c98:	f023 0203 	bic.w	r2, r3, #3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca0:	49b7      	ldr	r1, [pc, #732]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ca6:	e001      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8086 	beq.w	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cba:	4bb2      	ldr	r3, [pc, #712]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4ab1      	ldr	r2, [pc, #708]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cc6:	f7f8 fe71 	bl	80019ac <HAL_GetTick>
 8008cca:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ccc:	e009      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cce:	f7f8 fe6d 	bl	80019ac <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	2b64      	cmp	r3, #100	; 0x64
 8008cda:	d902      	bls.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	75fb      	strb	r3, [r7, #23]
        break;
 8008ce0:	e005      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ce2:	4ba8      	ldr	r3, [pc, #672]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0ef      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d166      	bne.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008cf4:	4ba2      	ldr	r3, [pc, #648]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008cf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cfe:	4053      	eors	r3, r2
 8008d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d013      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d08:	4b9d      	ldr	r3, [pc, #628]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d10:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d12:	4b9b      	ldr	r3, [pc, #620]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d16:	4a9a      	ldr	r2, [pc, #616]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d1c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d1e:	4b98      	ldr	r3, [pc, #608]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d22:	4a97      	ldr	r2, [pc, #604]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d28:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d2a:	4a95      	ldr	r2, [pc, #596]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d3a:	d115      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d3c:	f7f8 fe36 	bl	80019ac <HAL_GetTick>
 8008d40:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d42:	e00b      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d44:	f7f8 fe32 	bl	80019ac <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d902      	bls.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	75fb      	strb	r3, [r7, #23]
            break;
 8008d5a:	e005      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d5c:	4b88      	ldr	r3, [pc, #544]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0ed      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d126      	bne.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d7c:	d10d      	bne.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008d7e:	4b80      	ldr	r3, [pc, #512]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d8c:	0919      	lsrs	r1, r3, #4
 8008d8e:	4b7e      	ldr	r3, [pc, #504]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008d90:	400b      	ands	r3, r1
 8008d92:	497b      	ldr	r1, [pc, #492]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	610b      	str	r3, [r1, #16]
 8008d98:	e005      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008d9a:	4b79      	ldr	r3, [pc, #484]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	4a78      	ldr	r2, [pc, #480]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008da0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008da4:	6113      	str	r3, [r2, #16]
 8008da6:	4b76      	ldr	r3, [pc, #472]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008da8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008db4:	4972      	ldr	r1, [pc, #456]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	670b      	str	r3, [r1, #112]	; 0x70
 8008dba:	e004      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	75bb      	strb	r3, [r7, #22]
 8008dc0:	e001      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
 8008dc4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d07d      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dd6:	2b28      	cmp	r3, #40	; 0x28
 8008dd8:	d866      	bhi.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008dda:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008eaf 	.word	0x08008eaf
 8008de4:	08008ea9 	.word	0x08008ea9
 8008de8:	08008ea9 	.word	0x08008ea9
 8008dec:	08008ea9 	.word	0x08008ea9
 8008df0:	08008ea9 	.word	0x08008ea9
 8008df4:	08008ea9 	.word	0x08008ea9
 8008df8:	08008ea9 	.word	0x08008ea9
 8008dfc:	08008ea9 	.word	0x08008ea9
 8008e00:	08008e85 	.word	0x08008e85
 8008e04:	08008ea9 	.word	0x08008ea9
 8008e08:	08008ea9 	.word	0x08008ea9
 8008e0c:	08008ea9 	.word	0x08008ea9
 8008e10:	08008ea9 	.word	0x08008ea9
 8008e14:	08008ea9 	.word	0x08008ea9
 8008e18:	08008ea9 	.word	0x08008ea9
 8008e1c:	08008ea9 	.word	0x08008ea9
 8008e20:	08008e97 	.word	0x08008e97
 8008e24:	08008ea9 	.word	0x08008ea9
 8008e28:	08008ea9 	.word	0x08008ea9
 8008e2c:	08008ea9 	.word	0x08008ea9
 8008e30:	08008ea9 	.word	0x08008ea9
 8008e34:	08008ea9 	.word	0x08008ea9
 8008e38:	08008ea9 	.word	0x08008ea9
 8008e3c:	08008ea9 	.word	0x08008ea9
 8008e40:	08008eaf 	.word	0x08008eaf
 8008e44:	08008ea9 	.word	0x08008ea9
 8008e48:	08008ea9 	.word	0x08008ea9
 8008e4c:	08008ea9 	.word	0x08008ea9
 8008e50:	08008ea9 	.word	0x08008ea9
 8008e54:	08008ea9 	.word	0x08008ea9
 8008e58:	08008ea9 	.word	0x08008ea9
 8008e5c:	08008ea9 	.word	0x08008ea9
 8008e60:	08008eaf 	.word	0x08008eaf
 8008e64:	08008ea9 	.word	0x08008ea9
 8008e68:	08008ea9 	.word	0x08008ea9
 8008e6c:	08008ea9 	.word	0x08008ea9
 8008e70:	08008ea9 	.word	0x08008ea9
 8008e74:	08008ea9 	.word	0x08008ea9
 8008e78:	08008ea9 	.word	0x08008ea9
 8008e7c:	08008ea9 	.word	0x08008ea9
 8008e80:	08008eaf 	.word	0x08008eaf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3304      	adds	r3, #4
 8008e88:	2101      	movs	r1, #1
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 f96a 	bl	800a164 <RCCEx_PLL2_Config>
 8008e90:	4603      	mov	r3, r0
 8008e92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008e94:	e00c      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3324      	adds	r3, #36	; 0x24
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 fa13 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ea6:	e003      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8008eac:	e000      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008eb6:	4b32      	ldr	r3, [pc, #200]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ec2:	492f      	ldr	r1, [pc, #188]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	654b      	str	r3, [r1, #84]	; 0x54
 8008ec8:	e001      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0302 	and.w	r3, r3, #2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d037      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ede:	2b05      	cmp	r3, #5
 8008ee0:	d820      	bhi.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008ee2:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f2b 	.word	0x08008f2b
 8008eec:	08008f01 	.word	0x08008f01
 8008ef0:	08008f13 	.word	0x08008f13
 8008ef4:	08008f2b 	.word	0x08008f2b
 8008ef8:	08008f2b 	.word	0x08008f2b
 8008efc:	08008f2b 	.word	0x08008f2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3304      	adds	r3, #4
 8008f04:	2101      	movs	r1, #1
 8008f06:	4618      	mov	r0, r3
 8008f08:	f001 f92c 	bl	800a164 <RCCEx_PLL2_Config>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f10:	e00c      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	3324      	adds	r3, #36	; 0x24
 8008f16:	2101      	movs	r1, #1
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f001 f9d5 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f22:	e003      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	75fb      	strb	r3, [r7, #23]
      break;
 8008f28:	e000      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d109      	bne.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008f32:	4b13      	ldr	r3, [pc, #76]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f36:	f023 0207 	bic.w	r2, r3, #7
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f3e:	4910      	ldr	r1, [pc, #64]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	654b      	str	r3, [r1, #84]	; 0x54
 8008f44:	e001      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0304 	and.w	r3, r3, #4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d040      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f5c:	2b05      	cmp	r3, #5
 8008f5e:	d827      	bhi.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008f60:	a201      	add	r2, pc, #4	; (adr r2, 8008f68 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	08008fb7 	.word	0x08008fb7
 8008f6c:	08008f8d 	.word	0x08008f8d
 8008f70:	08008f9f 	.word	0x08008f9f
 8008f74:	08008fb7 	.word	0x08008fb7
 8008f78:	08008fb7 	.word	0x08008fb7
 8008f7c:	08008fb7 	.word	0x08008fb7
 8008f80:	58024400 	.word	0x58024400
 8008f84:	58024800 	.word	0x58024800
 8008f88:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	2101      	movs	r1, #1
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 f8e6 	bl	800a164 <RCCEx_PLL2_Config>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008f9c:	e00c      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3324      	adds	r3, #36	; 0x24
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f001 f98f 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008faa:	4603      	mov	r3, r0
 8008fac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008fae:	e003      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8008fb4:	e000      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8008fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10a      	bne.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008fbe:	4bb2      	ldr	r3, [pc, #712]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc2:	f023 0207 	bic.w	r2, r3, #7
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fcc:	49ae      	ldr	r1, [pc, #696]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	658b      	str	r3, [r1, #88]	; 0x58
 8008fd2:	e001      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0320 	and.w	r3, r3, #32
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d044      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fee:	d01b      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff4:	d805      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d022      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ffe:	d00a      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009000:	e01b      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009006:	d01d      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800900c:	d01c      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800900e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009012:	d01b      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009014:	e011      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3304      	adds	r3, #4
 800901a:	2100      	movs	r1, #0
 800901c:	4618      	mov	r0, r3
 800901e:	f001 f8a1 	bl	800a164 <RCCEx_PLL2_Config>
 8009022:	4603      	mov	r3, r0
 8009024:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009026:	e012      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	3324      	adds	r3, #36	; 0x24
 800902c:	2102      	movs	r1, #2
 800902e:	4618      	mov	r0, r3
 8009030:	f001 f94a 	bl	800a2c8 <RCCEx_PLL3_Config>
 8009034:	4603      	mov	r3, r0
 8009036:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009038:	e009      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	75fb      	strb	r3, [r7, #23]
      break;
 800903e:	e006      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009040:	bf00      	nop
 8009042:	e004      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009044:	bf00      	nop
 8009046:	e002      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009048:	bf00      	nop
 800904a:	e000      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800904c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009054:	4b8c      	ldr	r3, [pc, #560]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009058:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009062:	4989      	ldr	r1, [pc, #548]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009064:	4313      	orrs	r3, r2
 8009066:	654b      	str	r3, [r1, #84]	; 0x54
 8009068:	e001      	b.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009076:	2b00      	cmp	r3, #0
 8009078:	d044      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009084:	d01b      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800908a:	d805      	bhi.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d022      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009094:	d00a      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009096:	e01b      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800909c:	d01d      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800909e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80090a2:	d01c      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80090a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090a8:	d01b      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80090aa:	e011      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3304      	adds	r3, #4
 80090b0:	2100      	movs	r1, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f001 f856 	bl	800a164 <RCCEx_PLL2_Config>
 80090b8:	4603      	mov	r3, r0
 80090ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80090bc:	e012      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3324      	adds	r3, #36	; 0x24
 80090c2:	2102      	movs	r1, #2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 f8ff 	bl	800a2c8 <RCCEx_PLL3_Config>
 80090ca:	4603      	mov	r3, r0
 80090cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80090ce:	e009      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	75fb      	strb	r3, [r7, #23]
      break;
 80090d4:	e006      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80090d6:	bf00      	nop
 80090d8:	e004      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80090da:	bf00      	nop
 80090dc:	e002      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80090de:	bf00      	nop
 80090e0:	e000      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80090e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090ea:	4b67      	ldr	r3, [pc, #412]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80090ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090f8:	4963      	ldr	r1, [pc, #396]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	658b      	str	r3, [r1, #88]	; 0x58
 80090fe:	e001      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910c:	2b00      	cmp	r3, #0
 800910e:	d044      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800911a:	d01b      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800911c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009120:	d805      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d022      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800912a:	d00a      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800912c:	e01b      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800912e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009132:	d01d      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009134:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009138:	d01c      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800913a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800913e:	d01b      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8009140:	e011      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3304      	adds	r3, #4
 8009146:	2100      	movs	r1, #0
 8009148:	4618      	mov	r0, r3
 800914a:	f001 f80b 	bl	800a164 <RCCEx_PLL2_Config>
 800914e:	4603      	mov	r3, r0
 8009150:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009152:	e012      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3324      	adds	r3, #36	; 0x24
 8009158:	2102      	movs	r1, #2
 800915a:	4618      	mov	r0, r3
 800915c:	f001 f8b4 	bl	800a2c8 <RCCEx_PLL3_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009164:	e009      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	75fb      	strb	r3, [r7, #23]
      break;
 800916a:	e006      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800916c:	bf00      	nop
 800916e:	e004      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009170:	bf00      	nop
 8009172:	e002      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009174:	bf00      	nop
 8009176:	e000      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10a      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009180:	4b41      	ldr	r3, [pc, #260]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009184:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800918e:	493e      	ldr	r1, [pc, #248]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009190:	4313      	orrs	r3, r2
 8009192:	658b      	str	r3, [r1, #88]	; 0x58
 8009194:	e001      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0308 	and.w	r3, r3, #8
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d01a      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b0:	d10a      	bne.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	3324      	adds	r3, #36	; 0x24
 80091b6:	2102      	movs	r1, #2
 80091b8:	4618      	mov	r0, r3
 80091ba:	f001 f885 	bl	800a2c8 <RCCEx_PLL3_Config>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80091c8:	4b2f      	ldr	r3, [pc, #188]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80091ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091d6:	492c      	ldr	r1, [pc, #176]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01a      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091f2:	d10a      	bne.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3324      	adds	r3, #36	; 0x24
 80091f8:	2102      	movs	r1, #2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 f864 	bl	800a2c8 <RCCEx_PLL3_Config>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800920a:	4b1f      	ldr	r3, [pc, #124]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800920c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009218:	491b      	ldr	r1, [pc, #108]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800921a:	4313      	orrs	r3, r2
 800921c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d032      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009234:	d00d      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8009236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800923a:	d016      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800923c:	2b00      	cmp	r3, #0
 800923e:	d111      	bne.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	2100      	movs	r1, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f000 ff8c 	bl	800a164 <RCCEx_PLL2_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009250:	e00c      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3324      	adds	r3, #36	; 0x24
 8009256:	2102      	movs	r1, #2
 8009258:	4618      	mov	r0, r3
 800925a:	f001 f835 	bl	800a2c8 <RCCEx_PLL3_Config>
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009262:	e003      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	75fb      	strb	r3, [r7, #23]
      break;
 8009268:	e000      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800926a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10c      	bne.n	800928c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009272:	4b05      	ldr	r3, [pc, #20]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009276:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009280:	4901      	ldr	r1, [pc, #4]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009282:	4313      	orrs	r3, r2
 8009284:	658b      	str	r3, [r1, #88]	; 0x58
 8009286:	e003      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009288:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928c:	7dfb      	ldrb	r3, [r7, #23]
 800928e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d02f      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092a6:	d00c      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80092a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092ac:	d015      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80092ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092b2:	d10f      	bne.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092b4:	4b71      	ldr	r3, [pc, #452]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	4a70      	ldr	r2, [pc, #448]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80092ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80092c0:	e00c      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3324      	adds	r3, #36	; 0x24
 80092c6:	2101      	movs	r1, #1
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fffd 	bl	800a2c8 <RCCEx_PLL3_Config>
 80092ce:	4603      	mov	r3, r0
 80092d0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80092d2:	e003      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	75fb      	strb	r3, [r7, #23]
      break;
 80092d8:	e000      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80092da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10a      	bne.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092e2:	4b66      	ldr	r3, [pc, #408]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80092e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f0:	4962      	ldr	r1, [pc, #392]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	654b      	str	r3, [r1, #84]	; 0x54
 80092f6:	e001      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
 80092fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d029      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930c:	2b00      	cmp	r3, #0
 800930e:	d003      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009314:	d007      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009316:	e00f      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009318:	4b58      	ldr	r3, [pc, #352]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	4a57      	ldr	r2, [pc, #348]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800931e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009322:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009324:	e00b      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3304      	adds	r3, #4
 800932a:	2102      	movs	r1, #2
 800932c:	4618      	mov	r0, r3
 800932e:	f000 ff19 	bl	800a164 <RCCEx_PLL2_Config>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009336:	e002      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
      break;
 800933c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d109      	bne.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009344:	4b4d      	ldr	r3, [pc, #308]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009350:	494a      	ldr	r1, [pc, #296]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009352:	4313      	orrs	r3, r2
 8009354:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009356:	e001      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00a      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3324      	adds	r3, #36	; 0x24
 800936c:	2102      	movs	r1, #2
 800936e:	4618      	mov	r0, r3
 8009370:	f000 ffaa 	bl	800a2c8 <RCCEx_PLL3_Config>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d02f      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800938e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009392:	d00c      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009398:	d802      	bhi.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800939a:	2b00      	cmp	r3, #0
 800939c:	d011      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800939e:	e00d      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80093a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a4:	d00f      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80093a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093aa:	d00e      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80093ac:	e006      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093ae:	4b33      	ldr	r3, [pc, #204]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b2:	4a32      	ldr	r2, [pc, #200]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80093ba:	e007      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	75fb      	strb	r3, [r7, #23]
      break;
 80093c0:	e004      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80093c2:	bf00      	nop
 80093c4:	e002      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80093c6:	bf00      	nop
 80093c8:	e000      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80093ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093d2:	4b2a      	ldr	r3, [pc, #168]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093de:	4927      	ldr	r1, [pc, #156]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093e0:	4313      	orrs	r3, r2
 80093e2:	654b      	str	r3, [r1, #84]	; 0x54
 80093e4:	e001      	b.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d008      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80093f6:	4b21      	ldr	r3, [pc, #132]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009402:	491e      	ldr	r1, [pc, #120]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009404:	4313      	orrs	r3, r2
 8009406:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d008      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009414:	4b19      	ldr	r3, [pc, #100]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009418:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009420:	4916      	ldr	r1, [pc, #88]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009422:	4313      	orrs	r3, r2
 8009424:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00d      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009432:	4b12      	ldr	r3, [pc, #72]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	4a11      	ldr	r2, [pc, #68]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800943c:	6113      	str	r3, [r2, #16]
 800943e:	4b0f      	ldr	r3, [pc, #60]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009440:	691a      	ldr	r2, [r3, #16]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009448:	490c      	ldr	r1, [pc, #48]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800944a:	4313      	orrs	r3, r2
 800944c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	da08      	bge.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009456:	4b09      	ldr	r3, [pc, #36]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800945a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009462:	4906      	ldr	r1, [pc, #24]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009464:	4313      	orrs	r3, r2
 8009466:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009468:	7dbb      	ldrb	r3, [r7, #22]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	e000      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	58024400 	.word	0x58024400

08009480 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b090      	sub	sp, #64	; 0x40
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948e:	d150      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009490:	4ba1      	ldr	r3, [pc, #644]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009494:	f003 0307 	and.w	r3, r3, #7
 8009498:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	2b04      	cmp	r3, #4
 800949e:	d844      	bhi.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80094a0:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80094a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a6:	bf00      	nop
 80094a8:	080094bd 	.word	0x080094bd
 80094ac:	080094cd 	.word	0x080094cd
 80094b0:	080094dd 	.word	0x080094dd
 80094b4:	08009525 	.word	0x08009525
 80094b8:	080094ed 	.word	0x080094ed
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fd03 	bl	8009ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ca:	e241      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094cc:	f107 0318 	add.w	r3, r7, #24
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 fa63 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094da:	e239      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094dc:	f107 030c 	add.w	r3, r7, #12
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 fba7 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ea:	e231      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094ec:	4b8a      	ldr	r3, [pc, #552]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80094ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80094f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d102      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80094fc:	4b87      	ldr	r3, [pc, #540]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009500:	e226      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009508:	d102      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800950a:	4b85      	ldr	r3, [pc, #532]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800950e:	e21f      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009516:	d102      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8009518:	4b82      	ldr	r3, [pc, #520]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800951c:	e218      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009522:	e215      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009524:	4b80      	ldr	r3, [pc, #512]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009528:	e212      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800952e:	bf00      	nop
 8009530:	e20e      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009538:	d14f      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800953a:	4b77      	ldr	r3, [pc, #476]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800953c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800953e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009542:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	2b80      	cmp	r3, #128	; 0x80
 8009548:	d01c      	beq.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800954a:	2b80      	cmp	r3, #128	; 0x80
 800954c:	d804      	bhi.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d008      	beq.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8009552:	2b40      	cmp	r3, #64	; 0x40
 8009554:	d00e      	beq.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009556:	e03c      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8009558:	2bc0      	cmp	r3, #192	; 0xc0
 800955a:	d037      	beq.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800955c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009560:	d018      	beq.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8009562:	e036      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009568:	4618      	mov	r0, r3
 800956a:	f000 fcaf 	bl	8009ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009572:	e1ed      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009574:	f107 0318 	add.w	r3, r7, #24
 8009578:	4618      	mov	r0, r3
 800957a:	f000 fa0f 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009582:	e1e5      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009584:	f107 030c 	add.w	r3, r7, #12
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fb53 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009592:	e1dd      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009594:	4b60      	ldr	r3, [pc, #384]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009598:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800959c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800959e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d102      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80095a4:	4b5d      	ldr	r3, [pc, #372]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80095a8:	e1d2      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80095aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095b0:	d102      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80095b2:	4b5b      	ldr	r3, [pc, #364]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095b6:	e1cb      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80095b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095be:	d102      	bne.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80095c0:	4b58      	ldr	r3, [pc, #352]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80095c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095c4:	e1c4      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ca:	e1c1      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80095cc:	4b56      	ldr	r3, [pc, #344]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095d0:	e1be      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095d6:	bf00      	nop
 80095d8:	e1ba      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095e0:	d153      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80095e2:	4b4d      	ldr	r3, [pc, #308]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80095e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80095ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80095ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095f2:	d01f      	beq.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80095f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095f8:	d805      	bhi.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00a      	beq.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80095fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009602:	d00f      	beq.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8009604:	e03d      	b.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8009606:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800960a:	d037      	beq.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800960c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009610:	d018      	beq.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8009612:	e036      	b.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009618:	4618      	mov	r0, r3
 800961a:	f000 fc57 	bl	8009ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009622:	e195      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009624:	f107 0318 	add.w	r3, r7, #24
 8009628:	4618      	mov	r0, r3
 800962a:	f000 f9b7 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009632:	e18d      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009634:	f107 030c 	add.w	r3, r7, #12
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fafb 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009642:	e185      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009644:	4b34      	ldr	r3, [pc, #208]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800964c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800964e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009650:	2b00      	cmp	r3, #0
 8009652:	d102      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009654:	4b31      	ldr	r3, [pc, #196]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009656:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009658:	e17a      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800965a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009660:	d102      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8009662:	4b2f      	ldr	r3, [pc, #188]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009666:	e173      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800966e:	d102      	bne.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8009670:	4b2c      	ldr	r3, [pc, #176]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009674:	e16c      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800967a:	e169      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800967c:	4b2a      	ldr	r3, [pc, #168]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009680:	e166      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009686:	bf00      	nop
 8009688:	e162      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009690:	d15d      	bne.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009692:	4b21      	ldr	r3, [pc, #132]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009696:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800969a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800969c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096a2:	d01f      	beq.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80096a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096a8:	d805      	bhi.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80096ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096b2:	d00f      	beq.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80096b4:	e047      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80096b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80096ba:	d041      	beq.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80096bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096c0:	d018      	beq.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80096c2:	e040      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 fbff 	bl	8009ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096d2:	e13d      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096d4:	f107 0318 	add.w	r3, r7, #24
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 f95f 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096e2:	e135      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096e4:	f107 030c 	add.w	r3, r7, #12
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 faa3 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096f2:	e12d      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80096f4:	4b08      	ldr	r3, [pc, #32]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80096f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096fc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80096fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009700:	2b00      	cmp	r3, #0
 8009702:	d102      	bne.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009704:	4b05      	ldr	r3, [pc, #20]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009708:	e122      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800970a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009710:	d10c      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8009712:	4b03      	ldr	r3, [pc, #12]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009716:	e11b      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009718:	58024400 	.word	0x58024400
 800971c:	03d09000 	.word	0x03d09000
 8009720:	003d0900 	.word	0x003d0900
 8009724:	007a1200 	.word	0x007a1200
 8009728:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800972c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009732:	d102      	bne.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8009734:	4b89      	ldr	r3, [pc, #548]	; (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009736:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009738:	e10a      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800973e:	e107      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009740:	4b87      	ldr	r3, [pc, #540]	; (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009744:	e104      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800974a:	bf00      	nop
 800974c:	e100      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009754:	d153      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009756:	4b83      	ldr	r3, [pc, #524]	; (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800975a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800975e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009766:	d01f      	beq.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800976c:	d805      	bhi.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8009772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009776:	d00f      	beq.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8009778:	e03d      	b.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800977a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800977e:	d037      	beq.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8009780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009784:	d018      	beq.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009786:	e036      	b.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fb9d 	bl	8009ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009796:	e0db      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009798:	f107 0318 	add.w	r3, r7, #24
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f8fd 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a6:	e0d3      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a8:	f107 030c 	add.w	r3, r7, #12
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fa41 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097b6:	e0cb      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80097b8:	4b6a      	ldr	r3, [pc, #424]	; (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80097ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097c0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80097c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d102      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80097c8:	4b67      	ldr	r3, [pc, #412]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80097ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80097cc:	e0c0      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80097ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097d4:	d102      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80097d6:	4b65      	ldr	r3, [pc, #404]	; (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80097d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097da:	e0b9      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80097dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e2:	d102      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80097e4:	4b5d      	ldr	r3, [pc, #372]	; (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097e8:	e0b2      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ee:	e0af      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80097f0:	4b5b      	ldr	r3, [pc, #364]	; (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80097f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097f4:	e0ac      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097fa:	bf00      	nop
 80097fc:	e0a8      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009804:	d13d      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009806:	4b57      	ldr	r3, [pc, #348]	; (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800980e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009816:	d00c      	beq.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800981c:	d011      	beq.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800981e:	2b00      	cmp	r3, #0
 8009820:	d12b      	bne.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009822:	f107 0318 	add.w	r3, r7, #24
 8009826:	4618      	mov	r0, r3
 8009828:	f000 f8b8 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009830:	e08e      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009832:	f107 030c 	add.w	r3, r7, #12
 8009836:	4618      	mov	r0, r3
 8009838:	f000 f9fc 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009840:	e086      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009842:	4b48      	ldr	r3, [pc, #288]	; (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800984a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800984c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800984e:	2b00      	cmp	r3, #0
 8009850:	d102      	bne.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009852:	4b45      	ldr	r3, [pc, #276]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009854:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009856:	e07b      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800985e:	d102      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8009860:	4b42      	ldr	r3, [pc, #264]	; (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009864:	e074      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800986c:	d102      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800986e:	4b3b      	ldr	r3, [pc, #236]	; (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009872:	e06d      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009878:	e06a      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800987e:	bf00      	nop
 8009880:	e066      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009888:	d11f      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800988a:	4b36      	ldr	r3, [pc, #216]	; (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800988c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800988e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009892:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800989a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800989e:	d008      	beq.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80098a0:	e00f      	b.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fb10 	bl	8009ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098b0:	e04e      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098b2:	f107 0318 	add.w	r3, r7, #24
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f870 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098c0:	e046      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098c6:	bf00      	nop
 80098c8:	e042      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098d0:	d13c      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80098d2:	4b24      	ldr	r3, [pc, #144]	; (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80098d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80098da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e2:	d01e      	beq.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80098e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e8:	d805      	bhi.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00d      	beq.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80098ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098f2:	d00e      	beq.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80098f4:	e026      	b.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80098f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098fa:	d01d      	beq.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80098fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009900:	d01d      	beq.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009902:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009906:	d014      	beq.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009908:	e01c      	b.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800990a:	f000 f831 	bl	8009970 <HAL_RCCEx_GetD3PCLK1Freq>
 800990e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009910:	e01e      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009912:	f107 0318 	add.w	r3, r7, #24
 8009916:	4618      	mov	r0, r3
 8009918:	f000 f840 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009920:	e016      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009922:	f107 030c 	add.w	r3, r7, #12
 8009926:	4618      	mov	r0, r3
 8009928:	f000 f984 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009930:	e00e      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8009932:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009936:	e00b      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8009938:	4b0c      	ldr	r3, [pc, #48]	; (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800993a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800993c:	e008      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800993e:	4b07      	ldr	r3, [pc, #28]	; (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009942:	e005      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009948:	bf00      	nop
 800994a:	e001      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800994c:	2300      	movs	r3, #0
 800994e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009952:	4618      	mov	r0, r3
 8009954:	3740      	adds	r7, #64	; 0x40
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	007a1200 	.word	0x007a1200
 8009960:	00bb8000 	.word	0x00bb8000
 8009964:	58024400 	.word	0x58024400
 8009968:	03d09000 	.word	0x03d09000
 800996c:	003d0900 	.word	0x003d0900

08009970 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009974:	f7fe fe4a 	bl	800860c <HAL_RCC_GetHCLKFreq>
 8009978:	4601      	mov	r1, r0
 800997a:	4b06      	ldr	r3, [pc, #24]	; (8009994 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	091b      	lsrs	r3, r3, #4
 8009980:	f003 0307 	and.w	r3, r3, #7
 8009984:	4a04      	ldr	r2, [pc, #16]	; (8009998 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009986:	5cd3      	ldrb	r3, [r2, r3]
 8009988:	f003 031f 	and.w	r3, r3, #31
 800998c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009990:	4618      	mov	r0, r3
 8009992:	bd80      	pop	{r7, pc}
 8009994:	58024400 	.word	0x58024400
 8009998:	080144cc 	.word	0x080144cc

0800999c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800999c:	b480      	push	{r7}
 800999e:	b089      	sub	sp, #36	; 0x24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099a4:	4b9d      	ldr	r3, [pc, #628]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80099a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a8:	f003 0303 	and.w	r3, r3, #3
 80099ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80099ae:	4b9b      	ldr	r3, [pc, #620]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b2:	0b1b      	lsrs	r3, r3, #12
 80099b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099ba:	4b98      	ldr	r3, [pc, #608]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80099bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099be:	091b      	lsrs	r3, r3, #4
 80099c0:	f003 0301 	and.w	r3, r3, #1
 80099c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099c6:	4b95      	ldr	r3, [pc, #596]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80099c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ca:	08db      	lsrs	r3, r3, #3
 80099cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	fb02 f303 	mul.w	r3, r2, r3
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 810a 	beq.w	8009bfe <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d05a      	beq.n	8009aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d302      	bcc.n	80099fa <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d078      	beq.n	8009aea <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80099f8:	e099      	b.n	8009b2e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099fa:	4b88      	ldr	r3, [pc, #544]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0320 	and.w	r3, r3, #32
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d02d      	beq.n	8009a62 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a06:	4b85      	ldr	r3, [pc, #532]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	08db      	lsrs	r3, r3, #3
 8009a0c:	f003 0303 	and.w	r3, r3, #3
 8009a10:	4a83      	ldr	r2, [pc, #524]	; (8009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8009a12:	fa22 f303 	lsr.w	r3, r2, r3
 8009a16:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	ee07 3a90 	vmov	s15, r3
 8009a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a30:	4b7a      	ldr	r3, [pc, #488]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a38:	ee07 3a90 	vmov	s15, r3
 8009a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a40:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a44:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009c24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a60:	e087      	b.n	8009b72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	ee07 3a90 	vmov	s15, r3
 8009a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a74:	4b69      	ldr	r3, [pc, #420]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7c:	ee07 3a90 	vmov	s15, r3
 8009a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a84:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a88:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009c24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009aa4:	e065      	b.n	8009b72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	ee07 3a90 	vmov	s15, r3
 8009aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ab8:	4b58      	ldr	r3, [pc, #352]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac0:	ee07 3a90 	vmov	s15, r3
 8009ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ac8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009acc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009c24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ae8:	e043      	b.n	8009b72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	ee07 3a90 	vmov	s15, r3
 8009af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afc:	4b47      	ldr	r3, [pc, #284]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b04:	ee07 3a90 	vmov	s15, r3
 8009b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b10:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009c24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b2c:	e021      	b.n	8009b72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	ee07 3a90 	vmov	s15, r3
 8009b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b38:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b40:	4b36      	ldr	r3, [pc, #216]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b48:	ee07 3a90 	vmov	s15, r3
 8009b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b50:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b54:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009c24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009b58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b70:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009b72:	4b2a      	ldr	r3, [pc, #168]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b76:	0a5b      	lsrs	r3, r3, #9
 8009b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b7c:	ee07 3a90 	vmov	s15, r3
 8009b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b98:	ee17 2a90 	vmov	r2, s15
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009ba0:	4b1e      	ldr	r3, [pc, #120]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba4:	0c1b      	lsrs	r3, r3, #16
 8009ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bc6:	ee17 2a90 	vmov	r2, s15
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009bce:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	0e1b      	lsrs	r3, r3, #24
 8009bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd8:	ee07 3a90 	vmov	s15, r3
 8009bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bf4:	ee17 2a90 	vmov	r2, s15
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009bfc:	e008      	b.n	8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	609a      	str	r2, [r3, #8]
}
 8009c10:	bf00      	nop
 8009c12:	3724      	adds	r7, #36	; 0x24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	03d09000 	.word	0x03d09000
 8009c24:	46000000 	.word	0x46000000
 8009c28:	4c742400 	.word	0x4c742400
 8009c2c:	4a742400 	.word	0x4a742400
 8009c30:	4af42400 	.word	0x4af42400

08009c34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b089      	sub	sp, #36	; 0x24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c3c:	4b9d      	ldr	r3, [pc, #628]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c40:	f003 0303 	and.w	r3, r3, #3
 8009c44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009c46:	4b9b      	ldr	r3, [pc, #620]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4a:	0d1b      	lsrs	r3, r3, #20
 8009c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c52:	4b98      	ldr	r3, [pc, #608]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	0a1b      	lsrs	r3, r3, #8
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c5e:	4b95      	ldr	r3, [pc, #596]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c62:	08db      	lsrs	r3, r3, #3
 8009c64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	fb02 f303 	mul.w	r3, r2, r3
 8009c6e:	ee07 3a90 	vmov	s15, r3
 8009c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 810a 	beq.w	8009e96 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d05a      	beq.n	8009d3e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d302      	bcc.n	8009c92 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d078      	beq.n	8009d82 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009c90:	e099      	b.n	8009dc6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c92:	4b88      	ldr	r3, [pc, #544]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d02d      	beq.n	8009cfa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c9e:	4b85      	ldr	r3, [pc, #532]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	08db      	lsrs	r3, r3, #3
 8009ca4:	f003 0303 	and.w	r3, r3, #3
 8009ca8:	4a83      	ldr	r2, [pc, #524]	; (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009caa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cae:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	ee07 3a90 	vmov	s15, r3
 8009cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc8:	4b7a      	ldr	r3, [pc, #488]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd0:	ee07 3a90 	vmov	s15, r3
 8009cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cdc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009ebc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009cf8:	e087      	b.n	8009e0a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	ee07 3a90 	vmov	s15, r3
 8009d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d04:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0c:	4b69      	ldr	r3, [pc, #420]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d14:	ee07 3a90 	vmov	s15, r3
 8009d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d20:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009ebc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d3c:	e065      	b.n	8009e0a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	ee07 3a90 	vmov	s15, r3
 8009d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d48:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d50:	4b58      	ldr	r3, [pc, #352]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d58:	ee07 3a90 	vmov	s15, r3
 8009d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d60:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d64:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009ebc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d80:	e043      	b.n	8009e0a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	ee07 3a90 	vmov	s15, r3
 8009d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009d90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d94:	4b47      	ldr	r3, [pc, #284]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9c:	ee07 3a90 	vmov	s15, r3
 8009da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009ebc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dc4:	e021      	b.n	8009e0a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	ee07 3a90 	vmov	s15, r3
 8009dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd8:	4b36      	ldr	r3, [pc, #216]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de0:	ee07 3a90 	vmov	s15, r3
 8009de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dec:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009ebc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e08:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e0a:	4b2a      	ldr	r3, [pc, #168]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	0a5b      	lsrs	r3, r3, #9
 8009e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e14:	ee07 3a90 	vmov	s15, r3
 8009e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e30:	ee17 2a90 	vmov	r2, s15
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009e38:	4b1e      	ldr	r3, [pc, #120]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3c:	0c1b      	lsrs	r3, r3, #16
 8009e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e5e:	ee17 2a90 	vmov	r2, s15
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009e66:	4b13      	ldr	r3, [pc, #76]	; (8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6a:	0e1b      	lsrs	r3, r3, #24
 8009e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e8c:	ee17 2a90 	vmov	r2, s15
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009e94:	e008      	b.n	8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	609a      	str	r2, [r3, #8]
}
 8009ea8:	bf00      	nop
 8009eaa:	3724      	adds	r7, #36	; 0x24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	58024400 	.word	0x58024400
 8009eb8:	03d09000 	.word	0x03d09000
 8009ebc:	46000000 	.word	0x46000000
 8009ec0:	4c742400 	.word	0x4c742400
 8009ec4:	4a742400 	.word	0x4a742400
 8009ec8:	4af42400 	.word	0x4af42400

08009ecc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b089      	sub	sp, #36	; 0x24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ed4:	4b9d      	ldr	r3, [pc, #628]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed8:	f003 0303 	and.w	r3, r3, #3
 8009edc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009ede:	4b9b      	ldr	r3, [pc, #620]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee2:	091b      	lsrs	r3, r3, #4
 8009ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ee8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009eea:	4b98      	ldr	r3, [pc, #608]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ef4:	4b95      	ldr	r3, [pc, #596]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef8:	08db      	lsrs	r3, r3, #3
 8009efa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	fb02 f303 	mul.w	r3, r2, r3
 8009f04:	ee07 3a90 	vmov	s15, r3
 8009f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f000 810a 	beq.w	800a12c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d05a      	beq.n	8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d302      	bcc.n	8009f28 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d078      	beq.n	800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8009f26:	e099      	b.n	800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f28:	4b88      	ldr	r3, [pc, #544]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0320 	and.w	r3, r3, #32
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d02d      	beq.n	8009f90 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f34:	4b85      	ldr	r3, [pc, #532]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	08db      	lsrs	r3, r3, #3
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	4a84      	ldr	r2, [pc, #528]	; (800a150 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
 8009f44:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	ee07 3a90 	vmov	s15, r3
 8009f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f5e:	4b7b      	ldr	r3, [pc, #492]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f8e:	e087      	b.n	800a0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	ee07 3a90 	vmov	s15, r3
 8009f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fa2:	4b6a      	ldr	r3, [pc, #424]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fd2:	e065      	b.n	800a0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	ee07 3a90 	vmov	s15, r3
 8009fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe6:	4b59      	ldr	r3, [pc, #356]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fee:	ee07 3a90 	vmov	s15, r3
 8009ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ffa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a016:	e043      	b.n	800a0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02a:	4b48      	ldr	r3, [pc, #288]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a04a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a056:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a05a:	e021      	b.n	800a0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	ee07 3a90 	vmov	s15, r3
 800a062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a066:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06e:	4b37      	ldr	r3, [pc, #220]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a082:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a09e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a0a0:	4b2a      	ldr	r3, [pc, #168]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a4:	0a5b      	lsrs	r3, r3, #9
 800a0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0aa:	ee07 3a90 	vmov	s15, r3
 800a0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0c6:	ee17 2a90 	vmov	r2, s15
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a0ce:	4b1f      	ldr	r3, [pc, #124]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d2:	0c1b      	lsrs	r3, r3, #16
 800a0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d8:	ee07 3a90 	vmov	s15, r3
 800a0dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f4:	ee17 2a90 	vmov	r2, s15
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a0fc:	4b13      	ldr	r3, [pc, #76]	; (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a100:	0e1b      	lsrs	r3, r3, #24
 800a102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a112:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a116:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a11e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a122:	ee17 2a90 	vmov	r2, s15
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a12a:	e008      	b.n	800a13e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	609a      	str	r2, [r3, #8]
}
 800a13e:	bf00      	nop
 800a140:	3724      	adds	r7, #36	; 0x24
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	58024400 	.word	0x58024400
 800a150:	03d09000 	.word	0x03d09000
 800a154:	46000000 	.word	0x46000000
 800a158:	4c742400 	.word	0x4c742400
 800a15c:	4a742400 	.word	0x4a742400
 800a160:	4af42400 	.word	0x4af42400

0800a164 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a172:	4b53      	ldr	r3, [pc, #332]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a176:	f003 0303 	and.w	r3, r3, #3
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d101      	bne.n	800a182 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e099      	b.n	800a2b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a182:	4b4f      	ldr	r3, [pc, #316]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a4e      	ldr	r2, [pc, #312]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a188:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a18c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a18e:	f7f7 fc0d 	bl	80019ac <HAL_GetTick>
 800a192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a194:	e008      	b.n	800a1a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a196:	f7f7 fc09 	bl	80019ac <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d901      	bls.n	800a1a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e086      	b.n	800a2b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1a8:	4b45      	ldr	r3, [pc, #276]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1f0      	bne.n	800a196 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1b4:	4b42      	ldr	r3, [pc, #264]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	031b      	lsls	r3, r3, #12
 800a1c2:	493f      	ldr	r1, [pc, #252]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	628b      	str	r3, [r1, #40]	; 0x28
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	025b      	lsls	r3, r3, #9
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	041b      	lsls	r3, r3, #16
 800a1e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	061b      	lsls	r3, r3, #24
 800a1f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1f8:	4931      	ldr	r1, [pc, #196]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a1fe:	4b30      	ldr	r3, [pc, #192]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a202:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	492d      	ldr	r1, [pc, #180]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a210:	4b2b      	ldr	r3, [pc, #172]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a214:	f023 0220 	bic.w	r2, r3, #32
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	4928      	ldr	r1, [pc, #160]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a222:	4b27      	ldr	r3, [pc, #156]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a226:	4a26      	ldr	r2, [pc, #152]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a228:	f023 0310 	bic.w	r3, r3, #16
 800a22c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a22e:	4b24      	ldr	r3, [pc, #144]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a232:	4b24      	ldr	r3, [pc, #144]	; (800a2c4 <RCCEx_PLL2_Config+0x160>)
 800a234:	4013      	ands	r3, r2
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	69d2      	ldr	r2, [r2, #28]
 800a23a:	00d2      	lsls	r2, r2, #3
 800a23c:	4920      	ldr	r1, [pc, #128]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a23e:	4313      	orrs	r3, r2
 800a240:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a242:	4b1f      	ldr	r3, [pc, #124]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a246:	4a1e      	ldr	r2, [pc, #120]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a248:	f043 0310 	orr.w	r3, r3, #16
 800a24c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d106      	bne.n	800a262 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a254:	4b1a      	ldr	r3, [pc, #104]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	4a19      	ldr	r2, [pc, #100]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a25a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a25e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a260:	e00f      	b.n	800a282 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d106      	bne.n	800a276 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a268:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	4a14      	ldr	r2, [pc, #80]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a26e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a272:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a274:	e005      	b.n	800a282 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a276:	4b12      	ldr	r3, [pc, #72]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27a:	4a11      	ldr	r2, [pc, #68]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a27c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a280:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a282:	4b0f      	ldr	r3, [pc, #60]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a0e      	ldr	r2, [pc, #56]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a288:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a28c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a28e:	f7f7 fb8d 	bl	80019ac <HAL_GetTick>
 800a292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a294:	e008      	b.n	800a2a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a296:	f7f7 fb89 	bl	80019ac <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d901      	bls.n	800a2a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e006      	b.n	800a2b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2a8:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d0f0      	beq.n	800a296 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	58024400 	.word	0x58024400
 800a2c4:	ffff0007 	.word	0xffff0007

0800a2c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2d6:	4b53      	ldr	r3, [pc, #332]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2da:	f003 0303 	and.w	r3, r3, #3
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d101      	bne.n	800a2e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e099      	b.n	800a41a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a2e6:	4b4f      	ldr	r3, [pc, #316]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a4e      	ldr	r2, [pc, #312]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a2ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2f2:	f7f7 fb5b 	bl	80019ac <HAL_GetTick>
 800a2f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2f8:	e008      	b.n	800a30c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a2fa:	f7f7 fb57 	bl	80019ac <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	2b02      	cmp	r3, #2
 800a306:	d901      	bls.n	800a30c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e086      	b.n	800a41a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a30c:	4b45      	ldr	r3, [pc, #276]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1f0      	bne.n	800a2fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a318:	4b42      	ldr	r3, [pc, #264]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	051b      	lsls	r3, r3, #20
 800a326:	493f      	ldr	r1, [pc, #252]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a328:	4313      	orrs	r3, r2
 800a32a:	628b      	str	r3, [r1, #40]	; 0x28
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	3b01      	subs	r3, #1
 800a332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	025b      	lsls	r3, r3, #9
 800a33e:	b29b      	uxth	r3, r3
 800a340:	431a      	orrs	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	3b01      	subs	r3, #1
 800a348:	041b      	lsls	r3, r3, #16
 800a34a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	3b01      	subs	r3, #1
 800a356:	061b      	lsls	r3, r3, #24
 800a358:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a35c:	4931      	ldr	r1, [pc, #196]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a362:	4b30      	ldr	r3, [pc, #192]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a366:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	492d      	ldr	r1, [pc, #180]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a370:	4313      	orrs	r3, r2
 800a372:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a374:	4b2b      	ldr	r3, [pc, #172]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a378:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	4928      	ldr	r1, [pc, #160]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a382:	4313      	orrs	r3, r2
 800a384:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a386:	4b27      	ldr	r3, [pc, #156]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	4a26      	ldr	r2, [pc, #152]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a38c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a390:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a392:	4b24      	ldr	r3, [pc, #144]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a396:	4b24      	ldr	r3, [pc, #144]	; (800a428 <RCCEx_PLL3_Config+0x160>)
 800a398:	4013      	ands	r3, r2
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	69d2      	ldr	r2, [r2, #28]
 800a39e:	00d2      	lsls	r2, r2, #3
 800a3a0:	4920      	ldr	r1, [pc, #128]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3a6:	4b1f      	ldr	r3, [pc, #124]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	4a1e      	ldr	r2, [pc, #120]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d106      	bne.n	800a3c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3b8:	4b1a      	ldr	r3, [pc, #104]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	4a19      	ldr	r2, [pc, #100]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a3c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3c4:	e00f      	b.n	800a3e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d106      	bne.n	800a3da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a3cc:	4b15      	ldr	r3, [pc, #84]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	4a14      	ldr	r2, [pc, #80]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a3d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3d8:	e005      	b.n	800a3e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a3da:	4b12      	ldr	r3, [pc, #72]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3de:	4a11      	ldr	r2, [pc, #68]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a3e6:	4b0f      	ldr	r3, [pc, #60]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a0e      	ldr	r2, [pc, #56]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3f2:	f7f7 fadb 	bl	80019ac <HAL_GetTick>
 800a3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3f8:	e008      	b.n	800a40c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a3fa:	f7f7 fad7 	bl	80019ac <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	d901      	bls.n	800a40c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e006      	b.n	800a41a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a40c:	4b05      	ldr	r3, [pc, #20]	; (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0f0      	beq.n	800a3fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	58024400 	.word	0x58024400
 800a428:	ffff0007 	.word	0xffff0007

0800a42c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b08a      	sub	sp, #40	; 0x28
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e07c      	b.n	800a538 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10c      	bne.n	800a464 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7f7 f80c 	bl	800147c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2203      	movs	r2, #3
 800a468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f867 	bl	800a540 <HAL_SD_InitCard>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e05d      	b.n	800a538 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a47c:	f107 0308 	add.w	r3, r7, #8
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fdb8 	bl	800aff8 <HAL_SD_GetCardStatus>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e052      	b.n	800a538 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a492:	7e3b      	ldrb	r3, [r7, #24]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a498:	7e7b      	ldrb	r3, [r7, #25]
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d10a      	bne.n	800a4bc <HAL_SD_Init+0x90>
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d102      	bne.n	800a4b2 <HAL_SD_Init+0x86>
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d004      	beq.n	800a4bc <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4b8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a4ba:	e00b      	b.n	800a4d4 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d104      	bne.n	800a4ce <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4ca:	65da      	str	r2, [r3, #92]	; 0x5c
 800a4cc:	e002      	b.n	800a4d4 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fe6e 	bl	800b1bc <HAL_SD_ConfigWideBusOperation>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e026      	b.n	800a538 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a4ea:	f7f7 fa5f 	bl	80019ac <HAL_GetTick>
 800a4ee:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a4f0:	e011      	b.n	800a516 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800a4f2:	f7f7 fa5b 	bl	80019ac <HAL_GetTick>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a500:	d109      	bne.n	800a516 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a508:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e010      	b.n	800a538 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fefa 	bl	800b310 <HAL_SD_GetCardState>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d1e7      	bne.n	800a4f2 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3728      	adds	r7, #40	; 0x28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a540:	b5b0      	push	{r4, r5, r7, lr}
 800a542:	b08e      	sub	sp, #56	; 0x38
 800a544:	af04      	add	r7, sp, #16
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a548:	2300      	movs	r3, #0
 800a54a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a54c:	2300      	movs	r3, #0
 800a54e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a550:	2300      	movs	r3, #0
 800a552:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a558:	23fa      	movs	r3, #250	; 0xfa
 800a55a:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	2b02      	cmp	r3, #2
 800a562:	d107      	bne.n	800a574 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f042 0210 	orr.w	r2, r2, #16
 800a572:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681d      	ldr	r5, [r3, #0]
 800a578:	466c      	mov	r4, sp
 800a57a:	f107 0314 	add.w	r3, r7, #20
 800a57e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a586:	f107 0308 	add.w	r3, r7, #8
 800a58a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a58c:	4628      	mov	r0, r5
 800a58e:	f004 f9d9 	bl	800e944 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4618      	mov	r0, r3
 800a598:	f004 fa1c 	bl	800e9d4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 800a59c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a5a0:	f7fe ff6e 	bl	8009480 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	4b2d      	ldr	r3, [pc, #180]	; (800a65c <HAL_SD_InitCard+0x11c>)
 800a5a8:	fba3 2302 	umull	r2, r3, r3, r2
 800a5ac:	095b      	lsrs	r3, r3, #5
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d008      	beq.n	800a5c8 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a5b6:	4a2a      	ldr	r2, [pc, #168]	; (800a660 <HAL_SD_InitCard+0x120>)
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5be:	3301      	adds	r3, #1
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7f7 f9ff 	bl	80019c4 <HAL_Delay>
 800a5c6:	e002      	b.n	800a5ce <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 800a5c8:	2002      	movs	r0, #2
 800a5ca:	f7f7 f9fb 	bl	80019c4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 ff7c 	bl	800b4cc <SD_PowerON>
 800a5d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e02e      	b.n	800a652 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 feab 	bl	800b350 <SD_InitCard>
 800a5fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00b      	beq.n	800a61a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	431a      	orrs	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e01b      	b.n	800a652 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a622:	4618      	mov	r0, r3
 800a624:	f004 fa6c 	bl	800eb00 <SDMMC_CmdBlockLength>
 800a628:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00f      	beq.n	800a650 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a0b      	ldr	r2, [pc, #44]	; (800a664 <HAL_SD_InitCard+0x124>)
 800a636:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	431a      	orrs	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e000      	b.n	800a652 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3728      	adds	r7, #40	; 0x28
 800a656:	46bd      	mov	sp, r7
 800a658:	bdb0      	pop	{r4, r5, r7, pc}
 800a65a:	bf00      	nop
 800a65c:	10624dd3 	.word	0x10624dd3
 800a660:	00012110 	.word	0x00012110
 800a664:	1fe00fff 	.word	0x1fe00fff

0800a668 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b092      	sub	sp, #72	; 0x48
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a676:	f7f7 f999 	bl	80019ac <HAL_GetTick>
 800a67a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d107      	bne.n	800a69a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e167      	b.n	800a96a <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	f040 815a 	bne.w	800a95c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a6ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	441a      	add	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d907      	bls.n	800a6cc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e14e      	b.n	800a96a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d002      	beq.n	800a6ea <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	025b      	lsls	r3, r3, #9
 800a6e8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a6ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ee:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	025b      	lsls	r3, r3, #9
 800a6f4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a6f6:	2390      	movs	r3, #144	; 0x90
 800a6f8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a702:	2300      	movs	r3, #0
 800a704:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f107 0214 	add.w	r2, r7, #20
 800a70e:	4611      	mov	r1, r2
 800a710:	4618      	mov	r0, r3
 800a712:	f004 f9c9 	bl	800eaa8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68da      	ldr	r2, [r3, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a724:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d90a      	bls.n	800a742 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2202      	movs	r2, #2
 800a730:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a738:	4618      	mov	r0, r3
 800a73a:	f004 fa27 	bl	800eb8c <SDMMC_CmdReadMultiBlock>
 800a73e:	6478      	str	r0, [r7, #68]	; 0x44
 800a740:	e009      	b.n	800a756 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2201      	movs	r2, #1
 800a746:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a74e:	4618      	mov	r0, r3
 800a750:	f004 f9f9 	bl	800eb46 <SDMMC_CmdReadSingleBlock>
 800a754:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d012      	beq.n	800a782 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a84      	ldr	r2, [pc, #528]	; (800a974 <HAL_SD_ReadBlocks+0x30c>)
 800a762:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a76a:	431a      	orrs	r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e0f3      	b.n	800a96a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a786:	e058      	b.n	800a83a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d033      	beq.n	800a7fe <HAL_SD_ReadBlocks+0x196>
 800a796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a798:	2b1f      	cmp	r3, #31
 800a79a:	d930      	bls.n	800a7fe <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a79c:	2300      	movs	r3, #0
 800a79e:	643b      	str	r3, [r7, #64]	; 0x40
 800a7a0:	e027      	b.n	800a7f2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f004 f8f6 	bl	800e998 <SDMMC_ReadFIFO>
 800a7ac:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7be:	0a1b      	lsrs	r3, r3, #8
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ce:	0c1b      	lsrs	r3, r3, #16
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d8:	3301      	adds	r3, #1
 800a7da:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7de:	0e1b      	lsrs	r3, r3, #24
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800a7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	643b      	str	r3, [r7, #64]	; 0x40
 800a7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7f4:	2b07      	cmp	r3, #7
 800a7f6:	d9d4      	bls.n	800a7a2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fa:	3b20      	subs	r3, #32
 800a7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a7fe:	f7f7 f8d5 	bl	80019ac <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d902      	bls.n	800a814 <HAL_SD_ReadBlocks+0x1ac>
 800a80e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a810:	2b00      	cmp	r3, #0
 800a812:	d112      	bne.n	800a83a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a56      	ldr	r2, [pc, #344]	; (800a974 <HAL_SD_ReadBlocks+0x30c>)
 800a81a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a820:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a836:	2303      	movs	r3, #3
 800a838:	e097      	b.n	800a96a <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a840:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a844:	2b00      	cmp	r3, #0
 800a846:	d09f      	beq.n	800a788 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68da      	ldr	r2, [r3, #12]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a856:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a862:	2b00      	cmp	r3, #0
 800a864:	d022      	beq.n	800a8ac <HAL_SD_ReadBlocks+0x244>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d91f      	bls.n	800a8ac <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a870:	2b03      	cmp	r3, #3
 800a872:	d01b      	beq.n	800a8ac <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4618      	mov	r0, r3
 800a87a:	f004 f9f1 	bl	800ec60 <SDMMC_CmdStopTransfer>
 800a87e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a882:	2b00      	cmp	r3, #0
 800a884:	d012      	beq.n	800a8ac <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a3a      	ldr	r2, [pc, #232]	; (800a974 <HAL_SD_ReadBlocks+0x30c>)
 800a88c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a894:	431a      	orrs	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e05e      	b.n	800a96a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b2:	f003 0308 	and.w	r3, r3, #8
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d012      	beq.n	800a8e0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a2d      	ldr	r2, [pc, #180]	; (800a974 <HAL_SD_ReadBlocks+0x30c>)
 800a8c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c6:	f043 0208 	orr.w	r2, r3, #8
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e044      	b.n	800a96a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e6:	f003 0302 	and.w	r3, r3, #2
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d012      	beq.n	800a914 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a20      	ldr	r2, [pc, #128]	; (800a974 <HAL_SD_ReadBlocks+0x30c>)
 800a8f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fa:	f043 0202 	orr.w	r2, r3, #2
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e02a      	b.n	800a96a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a91a:	f003 0320 	and.w	r3, r3, #32
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d012      	beq.n	800a948 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a13      	ldr	r2, [pc, #76]	; (800a974 <HAL_SD_ReadBlocks+0x30c>)
 800a928:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92e:	f043 0220 	orr.w	r2, r3, #32
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e010      	b.n	800a96a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a0a      	ldr	r2, [pc, #40]	; (800a978 <HAL_SD_ReadBlocks+0x310>)
 800a94e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	e006      	b.n	800a96a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a960:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
  }
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3748      	adds	r7, #72	; 0x48
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	1fe00fff 	.word	0x1fe00fff
 800a978:	18000f3a 	.word	0x18000f3a

0800a97c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b092      	sub	sp, #72	; 0x48
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a98a:	f7f7 f80f 	bl	80019ac <HAL_GetTick>
 800a98e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d107      	bne.n	800a9ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e16b      	b.n	800ac86 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	f040 815e 	bne.w	800ac78 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a9c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	441a      	add	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d907      	bls.n	800a9e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e152      	b.n	800ac86 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2203      	movs	r2, #3
 800a9e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d002      	beq.n	800a9fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	025b      	lsls	r3, r3, #9
 800a9fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800aa02:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	025b      	lsls	r3, r3, #9
 800aa08:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800aa0a:	2390      	movs	r3, #144	; 0x90
 800aa0c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800aa16:	2300      	movs	r3, #0
 800aa18:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f107 0218 	add.w	r2, r7, #24
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f004 f83f 	bl	800eaa8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68da      	ldr	r2, [r3, #12]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa38:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d90a      	bls.n	800aa56 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2220      	movs	r2, #32
 800aa44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f004 f8e3 	bl	800ec18 <SDMMC_CmdWriteMultiBlock>
 800aa52:	6478      	str	r0, [r7, #68]	; 0x44
 800aa54:	e009      	b.n	800aa6a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2210      	movs	r2, #16
 800aa5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa62:	4618      	mov	r0, r3
 800aa64:	f004 f8b5 	bl	800ebd2 <SDMMC_CmdWriteSingleBlock>
 800aa68:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d012      	beq.n	800aa96 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a86      	ldr	r2, [pc, #536]	; (800ac90 <HAL_SD_WriteBlocks+0x314>)
 800aa76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e0f7      	b.n	800ac86 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800aa9a:	e05c      	b.n	800ab56 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d037      	beq.n	800ab1a <HAL_SD_WriteBlocks+0x19e>
 800aaaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaac:	2b1f      	cmp	r3, #31
 800aaae:	d934      	bls.n	800ab1a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800aab0:	2300      	movs	r3, #0
 800aab2:	643b      	str	r3, [r7, #64]	; 0x40
 800aab4:	e02b      	b.n	800ab0e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800aab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800aabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aabe:	3301      	adds	r3, #1
 800aac0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800aac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	021a      	lsls	r2, r3, #8
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800aace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad0:	3301      	adds	r3, #1
 800aad2:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800aad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	041a      	lsls	r2, r3, #16
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	4313      	orrs	r3, r2
 800aade:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800aae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae2:	3301      	adds	r3, #1
 800aae4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800aae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	061a      	lsls	r2, r3, #24
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800aaf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f107 0214 	add.w	r2, r7, #20
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f003 ff55 	bl	800e9b2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800ab08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	643b      	str	r3, [r7, #64]	; 0x40
 800ab0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab10:	2b07      	cmp	r3, #7
 800ab12:	d9d0      	bls.n	800aab6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ab14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab16:	3b20      	subs	r3, #32
 800ab18:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ab1a:	f7f6 ff47 	bl	80019ac <HAL_GetTick>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d902      	bls.n	800ab30 <HAL_SD_WriteBlocks+0x1b4>
 800ab2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d112      	bne.n	800ab56 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a56      	ldr	r2, [pc, #344]	; (800ac90 <HAL_SD_WriteBlocks+0x314>)
 800ab36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e097      	b.n	800ac86 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab5c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d09b      	beq.n	800aa9c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68da      	ldr	r2, [r3, #12]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab72:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d022      	beq.n	800abc8 <HAL_SD_WriteBlocks+0x24c>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d91f      	bls.n	800abc8 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d01b      	beq.n	800abc8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f004 f863 	bl	800ec60 <SDMMC_CmdStopTransfer>
 800ab9a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ab9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d012      	beq.n	800abc8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a3a      	ldr	r2, [pc, #232]	; (800ac90 <HAL_SD_WriteBlocks+0x314>)
 800aba8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abb0:	431a      	orrs	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e05e      	b.n	800ac86 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abce:	f003 0308 	and.w	r3, r3, #8
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d012      	beq.n	800abfc <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a2d      	ldr	r2, [pc, #180]	; (800ac90 <HAL_SD_WriteBlocks+0x314>)
 800abdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe2:	f043 0208 	orr.w	r2, r3, #8
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2201      	movs	r2, #1
 800abee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e044      	b.n	800ac86 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d012      	beq.n	800ac30 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a20      	ldr	r2, [pc, #128]	; (800ac90 <HAL_SD_WriteBlocks+0x314>)
 800ac10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	f043 0202 	orr.w	r2, r3, #2
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e02a      	b.n	800ac86 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac36:	f003 0310 	and.w	r3, r3, #16
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d012      	beq.n	800ac64 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a13      	ldr	r2, [pc, #76]	; (800ac90 <HAL_SD_WriteBlocks+0x314>)
 800ac44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4a:	f043 0210 	orr.w	r2, r3, #16
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e010      	b.n	800ac86 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a0a      	ldr	r2, [pc, #40]	; (800ac94 <HAL_SD_WriteBlocks+0x318>)
 800ac6a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	e006      	b.n	800ac86 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
  }
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3748      	adds	r7, #72	; 0x48
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	1fe00fff 	.word	0x1fe00fff
 800ac94:	18000f3a 	.word	0x18000f3a

0800ac98 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800aca2:	bf00      	nop
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
	...

0800acb0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acbe:	0f9b      	lsrs	r3, r3, #30
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acca:	0e9b      	lsrs	r3, r3, #26
 800accc:	b2db      	uxtb	r3, r3
 800acce:	f003 030f 	and.w	r3, r3, #15
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acdc:	0e1b      	lsrs	r3, r3, #24
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	f003 0303 	and.w	r3, r3, #3
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acee:	0c1b      	lsrs	r3, r3, #16
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acfa:	0a1b      	lsrs	r3, r3, #8
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad10:	0d1b      	lsrs	r3, r3, #20
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad1c:	0c1b      	lsrs	r3, r3, #16
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	f003 030f 	and.w	r3, r3, #15
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad2e:	0bdb      	lsrs	r3, r3, #15
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad40:	0b9b      	lsrs	r3, r3, #14
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad52:	0b5b      	lsrs	r3, r3, #13
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad64:	0b1b      	lsrs	r3, r3, #12
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	b2da      	uxtb	r2, r3
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2200      	movs	r2, #0
 800ad76:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d163      	bne.n	800ae48 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad84:	009a      	lsls	r2, r3, #2
 800ad86:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ad90:	0f92      	lsrs	r2, r2, #30
 800ad92:	431a      	orrs	r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad9c:	0edb      	lsrs	r3, r3, #27
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	f003 0307 	and.w	r3, r3, #7
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adae:	0e1b      	lsrs	r3, r3, #24
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	f003 0307 	and.w	r3, r3, #7
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adc0:	0d5b      	lsrs	r3, r3, #21
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	f003 0307 	and.w	r3, r3, #7
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800add2:	0c9b      	lsrs	r3, r3, #18
 800add4:	b2db      	uxtb	r3, r3
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	b2da      	uxtb	r2, r3
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ade4:	0bdb      	lsrs	r3, r3, #15
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	f003 0307 	and.w	r3, r3, #7
 800adec:	b2da      	uxtb	r2, r3
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	7e1b      	ldrb	r3, [r3, #24]
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	3302      	adds	r3, #2
 800ae08:	2201      	movs	r2, #1
 800ae0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ae12:	fb02 f203 	mul.w	r2, r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	7a1b      	ldrb	r3, [r3, #8]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	f003 030f 	and.w	r3, r3, #15
 800ae24:	2201      	movs	r2, #1
 800ae26:	409a      	lsls	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ae34:	0a52      	lsrs	r2, r2, #9
 800ae36:	fb02 f203 	mul.w	r2, r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae44:	659a      	str	r2, [r3, #88]	; 0x58
 800ae46:	e031      	b.n	800aeac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d11d      	bne.n	800ae8c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae54:	041b      	lsls	r3, r3, #16
 800ae56:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae5e:	0c1b      	lsrs	r3, r3, #16
 800ae60:	431a      	orrs	r2, r3
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	029a      	lsls	r2, r3, #10
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae80:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	659a      	str	r2, [r3, #88]	; 0x58
 800ae8a:	e00f      	b.n	800aeac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a58      	ldr	r2, [pc, #352]	; (800aff4 <HAL_SD_GetCardCSD+0x344>)
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e09d      	b.n	800afe8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aeb0:	0b9b      	lsrs	r3, r3, #14
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	f003 0301 	and.w	r3, r3, #1
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aec2:	09db      	lsrs	r3, r3, #7
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee4:	0fdb      	lsrs	r3, r3, #31
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef0:	0f5b      	lsrs	r3, r3, #29
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	f003 0303 	and.w	r3, r3, #3
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af02:	0e9b      	lsrs	r3, r3, #26
 800af04:	b2db      	uxtb	r3, r3
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af14:	0d9b      	lsrs	r3, r3, #22
 800af16:	b2db      	uxtb	r3, r3
 800af18:	f003 030f 	and.w	r3, r3, #15
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af26:	0d5b      	lsrs	r3, r3, #21
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af42:	0c1b      	lsrs	r3, r3, #16
 800af44:	b2db      	uxtb	r3, r3
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af56:	0bdb      	lsrs	r3, r3, #15
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	f003 0301 	and.w	r3, r3, #1
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af6a:	0b9b      	lsrs	r3, r3, #14
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	b2da      	uxtb	r2, r3
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af7e:	0b5b      	lsrs	r3, r3, #13
 800af80:	b2db      	uxtb	r3, r3
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	b2da      	uxtb	r2, r3
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af92:	0b1b      	lsrs	r3, r3, #12
 800af94:	b2db      	uxtb	r3, r3
 800af96:	f003 0301 	and.w	r3, r3, #1
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afa6:	0a9b      	lsrs	r3, r3, #10
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afba:	0a1b      	lsrs	r3, r3, #8
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	f003 0303 	and.w	r3, r3, #3
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afce:	085b      	lsrs	r3, r3, #1
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2201      	movs	r2, #1
 800afe2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr
 800aff4:	1fe00fff 	.word	0x1fe00fff

0800aff8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b094      	sub	sp, #80	; 0x50
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b008:	f107 0308 	add.w	r3, r7, #8
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fb64 	bl	800b6dc <SD_SendSDStatus>
 800b014:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d011      	beq.n	800b040 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a4f      	ldr	r2, [pc, #316]	; (800b160 <HAL_SD_GetCardStatus+0x168>)
 800b022:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b02a:	431a      	orrs	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b03e:	e070      	b.n	800b122 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	099b      	lsrs	r3, r3, #6
 800b044:	b2db      	uxtb	r3, r3
 800b046:	f003 0303 	and.w	r3, r3, #3
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	095b      	lsrs	r3, r3, #5
 800b054:	b2db      	uxtb	r3, r3
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	0a1b      	lsrs	r3, r3, #8
 800b064:	b29b      	uxth	r3, r3
 800b066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	0e1b      	lsrs	r3, r3, #24
 800b070:	b29b      	uxth	r3, r3
 800b072:	4313      	orrs	r3, r2
 800b074:	b29a      	uxth	r2, r3
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	061a      	lsls	r2, r3, #24
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	021b      	lsls	r3, r3, #8
 800b082:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b086:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	0a1b      	lsrs	r3, r3, #8
 800b08c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b090:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	0e1b      	lsrs	r3, r3, #24
 800b096:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	0a1b      	lsrs	r3, r3, #8
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	0d1b      	lsrs	r3, r3, #20
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	f003 030f 	and.w	r3, r3, #15
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	0c1b      	lsrs	r3, r3, #16
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	0a9b      	lsrs	r3, r3, #10
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	0a1b      	lsrs	r3, r3, #8
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	f003 0303 	and.w	r3, r3, #3
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	091b      	lsrs	r3, r3, #4
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	f003 030f 	and.w	r3, r3, #15
 800b104:	b2da      	uxtb	r2, r3
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	f003 030f 	and.w	r3, r3, #15
 800b112:	b2da      	uxtb	r2, r3
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	0e1b      	lsrs	r3, r3, #24
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b12a:	4618      	mov	r0, r3
 800b12c:	f003 fce8 	bl	800eb00 <SDMMC_CmdBlockLength>
 800b130:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00d      	beq.n	800b154 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a08      	ldr	r2, [pc, #32]	; (800b160 <HAL_SD_GetCardStatus+0x168>)
 800b13e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b144:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800b154:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3750      	adds	r7, #80	; 0x50
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	1fe00fff 	.word	0x1fe00fff

0800b164 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b1bc:	b5b0      	push	{r4, r5, r7, lr}
 800b1be:	b08e      	sub	sp, #56	; 0x38
 800b1c0:	af04      	add	r7, sp, #16
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2203      	movs	r2, #3
 800b1d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d8:	2b03      	cmp	r3, #3
 800b1da:	d02e      	beq.n	800b23a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1e2:	d106      	bne.n	800b1f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	639a      	str	r2, [r3, #56]	; 0x38
 800b1f0:	e029      	b.n	800b246 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1f8:	d10a      	bne.n	800b210 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fb66 	bl	800b8cc <SD_WideBus_Enable>
 800b200:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	431a      	orrs	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	639a      	str	r2, [r3, #56]	; 0x38
 800b20e:	e01a      	b.n	800b246 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d10a      	bne.n	800b22c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fba3 	bl	800b962 <SD_WideBus_Disable>
 800b21c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	431a      	orrs	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	639a      	str	r2, [r3, #56]	; 0x38
 800b22a:	e00c      	b.n	800b246 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b230:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	639a      	str	r2, [r3, #56]	; 0x38
 800b238:	e005      	b.n	800b246 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d007      	beq.n	800b25e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a2e      	ldr	r2, [pc, #184]	; (800b30c <HAL_SD_ConfigWideBusOperation+0x150>)
 800b254:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b25c:	e034      	b.n	800b2c8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d903      	bls.n	800b284 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	695b      	ldr	r3, [r3, #20]
 800b280:	61bb      	str	r3, [r7, #24]
 800b282:	e012      	b.n	800b2aa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b28c:	d103      	bne.n	800b296 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	61bb      	str	r3, [r7, #24]
 800b294:	e009      	b.n	800b2aa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b29a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b29e:	d102      	bne.n	800b2a6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	61bb      	str	r3, [r7, #24]
 800b2a4:	e001      	b.n	800b2aa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800b2a6:	2304      	movs	r3, #4
 800b2a8:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681d      	ldr	r5, [r3, #0]
 800b2ae:	466c      	mov	r4, sp
 800b2b0:	f107 0314 	add.w	r3, r7, #20
 800b2b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b2bc:	f107 0308 	add.w	r3, r7, #8
 800b2c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f003 fb3e 	bl	800e944 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f003 fc15 	bl	800eb00 <SDMMC_CmdBlockLength>
 800b2d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00c      	beq.n	800b2f8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a0a      	ldr	r2, [pc, #40]	; (800b30c <HAL_SD_ConfigWideBusOperation+0x150>)
 800b2e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	431a      	orrs	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b304:	4618      	mov	r0, r3
 800b306:	3728      	adds	r7, #40	; 0x28
 800b308:	46bd      	mov	sp, r7
 800b30a:	bdb0      	pop	{r4, r5, r7, pc}
 800b30c:	1fe00fff 	.word	0x1fe00fff

0800b310 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b31c:	f107 030c 	add.w	r3, r7, #12
 800b320:	4619      	mov	r1, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 faaa 	bl	800b87c <SD_SendStatus>
 800b328:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d005      	beq.n	800b33c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	431a      	orrs	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	0a5b      	lsrs	r3, r3, #9
 800b340:	f003 030f 	and.w	r3, r3, #15
 800b344:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b346:	693b      	ldr	r3, [r7, #16]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b350:	b590      	push	{r4, r7, lr}
 800b352:	b091      	sub	sp, #68	; 0x44
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b358:	2301      	movs	r3, #1
 800b35a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f003 fb48 	bl	800e9f6 <SDMMC_GetPowerState>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b36c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b370:	e0a8      	b.n	800b4c4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b376:	2b03      	cmp	r3, #3
 800b378:	d02e      	beq.n	800b3d8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4618      	mov	r0, r3
 800b380:	f003 fd94 	bl	800eeac <SDMMC_CmdSendCID>
 800b384:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <SD_InitCard+0x40>
    {
      return errorstate;
 800b38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b38e:	e099      	b.n	800b4c4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2100      	movs	r1, #0
 800b396:	4618      	mov	r0, r3
 800b398:	f003 fb73 	bl	800ea82 <SDMMC_GetResponse>
 800b39c:	4602      	mov	r2, r0
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2104      	movs	r1, #4
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f003 fb6a 	bl	800ea82 <SDMMC_GetResponse>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2108      	movs	r1, #8
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f003 fb61 	bl	800ea82 <SDMMC_GetResponse>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	210c      	movs	r1, #12
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f003 fb58 	bl	800ea82 <SDMMC_GetResponse>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3dc:	2b03      	cmp	r3, #3
 800b3de:	d00d      	beq.n	800b3fc <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f107 020e 	add.w	r2, r7, #14
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f003 fd9d 	bl	800ef2a <SDMMC_CmdSetRelAdd>
 800b3f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d001      	beq.n	800b3fc <SD_InitCard+0xac>
    {
      return errorstate;
 800b3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fa:	e063      	b.n	800b4c4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b400:	2b03      	cmp	r3, #3
 800b402:	d036      	beq.n	800b472 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b404:	89fb      	ldrh	r3, [r7, #14]
 800b406:	461a      	mov	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b414:	041b      	lsls	r3, r3, #16
 800b416:	4619      	mov	r1, r3
 800b418:	4610      	mov	r0, r2
 800b41a:	f003 fd66 	bl	800eeea <SDMMC_CmdSendCSD>
 800b41e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <SD_InitCard+0xda>
    {
      return errorstate;
 800b426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b428:	e04c      	b.n	800b4c4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2100      	movs	r1, #0
 800b430:	4618      	mov	r0, r3
 800b432:	f003 fb26 	bl	800ea82 <SDMMC_GetResponse>
 800b436:	4602      	mov	r2, r0
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2104      	movs	r1, #4
 800b442:	4618      	mov	r0, r3
 800b444:	f003 fb1d 	bl	800ea82 <SDMMC_GetResponse>
 800b448:	4602      	mov	r2, r0
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2108      	movs	r1, #8
 800b454:	4618      	mov	r0, r3
 800b456:	f003 fb14 	bl	800ea82 <SDMMC_GetResponse>
 800b45a:	4602      	mov	r2, r0
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	210c      	movs	r1, #12
 800b466:	4618      	mov	r0, r3
 800b468:	f003 fb0b 	bl	800ea82 <SDMMC_GetResponse>
 800b46c:	4602      	mov	r2, r0
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2104      	movs	r1, #4
 800b478:	4618      	mov	r0, r3
 800b47a:	f003 fb02 	bl	800ea82 <SDMMC_GetResponse>
 800b47e:	4603      	mov	r3, r0
 800b480:	0d1a      	lsrs	r2, r3, #20
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b486:	f107 0310 	add.w	r3, r7, #16
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff fc0f 	bl	800acb0 <HAL_SD_GetCardCSD>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b498:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b49c:	e012      	b.n	800b4c4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6819      	ldr	r1, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4a6:	041b      	lsls	r3, r3, #16
 800b4a8:	f04f 0400 	mov.w	r4, #0
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	4623      	mov	r3, r4
 800b4b0:	4608      	mov	r0, r1
 800b4b2:	f003 fc11 	bl	800ecd8 <SDMMC_CmdSelDesel>
 800b4b6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <SD_InitCard+0x172>
  {
    return errorstate;
 800b4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c0:	e000      	b.n	800b4c4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3744      	adds	r7, #68	; 0x44
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd90      	pop	{r4, r7, pc}

0800b4cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	61fb      	str	r3, [r7, #28]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800b4e0:	f7f6 fa64 	bl	80019ac <HAL_GetTick>
 800b4e4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f003 fc18 	bl	800ed20 <SDMMC_CmdGoIdleState>
 800b4f0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <SD_PowerON+0x30>
  {
    return errorstate;
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	e0e9      	b.n	800b6d0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4618      	mov	r0, r3
 800b502:	f003 fc2b 	bl	800ed5c <SDMMC_CmdOperCond>
 800b506:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00d      	beq.n	800b52a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	f003 fc01 	bl	800ed20 <SDMMC_CmdGoIdleState>
 800b51e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d004      	beq.n	800b530 <SD_PowerON+0x64>
    {
      return errorstate;
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	e0d2      	b.n	800b6d0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b534:	2b01      	cmp	r3, #1
 800b536:	d137      	bne.n	800b5a8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2100      	movs	r1, #0
 800b53e:	4618      	mov	r0, r3
 800b540:	f003 fc2c 	bl	800ed9c <SDMMC_CmdAppCommand>
 800b544:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d02d      	beq.n	800b5a8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b54c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b550:	e0be      	b.n	800b6d0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2100      	movs	r1, #0
 800b558:	4618      	mov	r0, r3
 800b55a:	f003 fc1f 	bl	800ed9c <SDMMC_CmdAppCommand>
 800b55e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <SD_PowerON+0x9e>
    {
      return errorstate;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	e0b2      	b.n	800b6d0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	495a      	ldr	r1, [pc, #360]	; (800b6d8 <SD_PowerON+0x20c>)
 800b570:	4618      	mov	r0, r3
 800b572:	f003 fc36 	bl	800ede2 <SDMMC_CmdAppOperCommand>
 800b576:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d002      	beq.n	800b584 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b57e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b582:	e0a5      	b.n	800b6d0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2100      	movs	r1, #0
 800b58a:	4618      	mov	r0, r3
 800b58c:	f003 fa79 	bl	800ea82 <SDMMC_GetResponse>
 800b590:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	0fdb      	lsrs	r3, r3, #31
 800b596:	2b01      	cmp	r3, #1
 800b598:	d101      	bne.n	800b59e <SD_PowerON+0xd2>
 800b59a:	2301      	movs	r3, #1
 800b59c:	e000      	b.n	800b5a0 <SD_PowerON+0xd4>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	61bb      	str	r3, [r7, #24]

    count++;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d802      	bhi.n	800b5b8 <SD_PowerON+0xec>
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0cc      	beq.n	800b552 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d902      	bls.n	800b5c8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b5c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5c6:	e083      	b.n	800b6d0 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d07d      	beq.n	800b6ce <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d176      	bne.n	800b6ce <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d071      	beq.n	800b6ce <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5f0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f042 0208 	orr.w	r2, r2, #8
 800b600:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4618      	mov	r0, r3
 800b608:	f003 fcf6 	bl	800eff8 <SDMMC_CmdVoltageSwitch>
 800b60c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00c      	beq.n	800b62e <SD_PowerON+0x162>
        {
          return errorstate;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	e05b      	b.n	800b6d0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b618:	f7f6 f9c8 	bl	80019ac <HAL_GetTick>
 800b61c:	4602      	mov	r2, r0
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b626:	d102      	bne.n	800b62e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800b628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b62c:	e050      	b.n	800b6d0 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b638:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b63c:	d1ec      	bne.n	800b618 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b646:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b656:	d002      	beq.n	800b65e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800b658:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b65c:	e038      	b.n	800b6d0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800b65e:	2001      	movs	r0, #1
 800b660:	f7ff fb1a 	bl	800ac98 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f042 0204 	orr.w	r2, r2, #4
 800b672:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b674:	e00a      	b.n	800b68c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b676:	f7f6 f999 	bl	80019ac <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b684:	d102      	bne.n	800b68c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800b686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b68a:	e021      	b.n	800b6d0 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b69a:	d1ec      	bne.n	800b676 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b6a4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6b4:	d102      	bne.n	800b6bc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b6b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6ba:	e009      	b.n	800b6d0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2213      	movs	r2, #19
 800b6c2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6cc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3720      	adds	r7, #32
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	c1100000 	.word	0xc1100000

0800b6dc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08c      	sub	sp, #48	; 0x30
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b6e6:	f7f6 f961 	bl	80019ac <HAL_GetTick>
 800b6ea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f003 f9c3 	bl	800ea82 <SDMMC_GetResponse>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b706:	d102      	bne.n	800b70e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b70c:	e0b0      	b.n	800b870 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2140      	movs	r1, #64	; 0x40
 800b714:	4618      	mov	r0, r3
 800b716:	f003 f9f3 	bl	800eb00 <SDMMC_CmdBlockLength>
 800b71a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d005      	beq.n	800b72e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	e0a0      	b.n	800b870 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b736:	041b      	lsls	r3, r3, #16
 800b738:	4619      	mov	r1, r3
 800b73a:	4610      	mov	r0, r2
 800b73c:	f003 fb2e 	bl	800ed9c <SDMMC_CmdAppCommand>
 800b740:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d005      	beq.n	800b754 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	e08d      	b.n	800b870 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b754:	f04f 33ff 	mov.w	r3, #4294967295
 800b758:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b75a:	2340      	movs	r3, #64	; 0x40
 800b75c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b75e:	2360      	movs	r3, #96	; 0x60
 800b760:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b762:	2302      	movs	r3, #2
 800b764:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b766:	2300      	movs	r3, #0
 800b768:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b76a:	2301      	movs	r3, #1
 800b76c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f107 0208 	add.w	r2, r7, #8
 800b776:	4611      	mov	r1, r2
 800b778:	4618      	mov	r0, r3
 800b77a:	f003 f995 	bl	800eaa8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4618      	mov	r0, r3
 800b784:	f003 fc16 	bl	800efb4 <SDMMC_CmdStatusRegister>
 800b788:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d02b      	beq.n	800b7e8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b798:	6a3b      	ldr	r3, [r7, #32]
 800b79a:	e069      	b.n	800b870 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d013      	beq.n	800b7d2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7ae:	e00d      	b.n	800b7cc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f003 f8ef 	bl	800e998 <SDMMC_ReadFIFO>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	601a      	str	r2, [r3, #0]
        pData++;
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800b7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	2b07      	cmp	r3, #7
 800b7d0:	d9ee      	bls.n	800b7b0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b7d2:	f7f6 f8eb 	bl	80019ac <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e0:	d102      	bne.n	800b7e8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b7e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7e6:	e043      	b.n	800b870 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0d2      	beq.n	800b79c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fc:	f003 0308 	and.w	r3, r3, #8
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b804:	2308      	movs	r3, #8
 800b806:	e033      	b.n	800b870 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80e:	f003 0302 	and.w	r3, r3, #2
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b816:	2302      	movs	r3, #2
 800b818:	e02a      	b.n	800b870 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b820:	f003 0320 	and.w	r3, r3, #32
 800b824:	2b00      	cmp	r3, #0
 800b826:	d017      	beq.n	800b858 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b828:	2320      	movs	r3, #32
 800b82a:	e021      	b.n	800b870 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4618      	mov	r0, r3
 800b832:	f003 f8b1 	bl	800e998 <SDMMC_ReadFIFO>
 800b836:	4602      	mov	r2, r0
 800b838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83a:	601a      	str	r2, [r3, #0]
    pData++;
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	3304      	adds	r3, #4
 800b840:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b842:	f7f6 f8b3 	bl	80019ac <HAL_GetTick>
 800b846:	4602      	mov	r2, r0
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b850:	d102      	bne.n	800b858 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b852:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b856:	e00b      	b.n	800b870 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e2      	bne.n	800b82c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a03      	ldr	r2, [pc, #12]	; (800b878 <SD_SendSDStatus+0x19c>)
 800b86c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3730      	adds	r7, #48	; 0x30
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	18000f3a 	.word	0x18000f3a

0800b87c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b88c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b890:	e018      	b.n	800b8c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b89a:	041b      	lsls	r3, r3, #16
 800b89c:	4619      	mov	r1, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	f003 fb65 	bl	800ef6e <SDMMC_CmdSendStatus>
 800b8a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d001      	beq.n	800b8b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	e009      	b.n	800b8c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f003 f8e3 	bl	800ea82 <SDMMC_GetResponse>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60fb      	str	r3, [r7, #12]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f003 f8cd 	bl	800ea82 <SDMMC_GetResponse>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8f2:	d102      	bne.n	800b8fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b8f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8f8:	e02f      	b.n	800b95a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b8fa:	f107 030c 	add.w	r3, r7, #12
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f879 	bl	800b9f8 <SD_FindSCR>
 800b906:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	e023      	b.n	800b95a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d01c      	beq.n	800b956 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b924:	041b      	lsls	r3, r3, #16
 800b926:	4619      	mov	r1, r3
 800b928:	4610      	mov	r0, r2
 800b92a:	f003 fa37 	bl	800ed9c <SDMMC_CmdAppCommand>
 800b92e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	e00f      	b.n	800b95a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2102      	movs	r1, #2
 800b940:	4618      	mov	r0, r3
 800b942:	f003 fa6e 	bl	800ee22 <SDMMC_CmdBusWidth>
 800b946:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	e003      	b.n	800b95a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b952:	2300      	movs	r3, #0
 800b954:	e001      	b.n	800b95a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b956:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b086      	sub	sp, #24
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b96a:	2300      	movs	r3, #0
 800b96c:	60fb      	str	r3, [r7, #12]
 800b96e:	2300      	movs	r3, #0
 800b970:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2100      	movs	r1, #0
 800b978:	4618      	mov	r0, r3
 800b97a:	f003 f882 	bl	800ea82 <SDMMC_GetResponse>
 800b97e:	4603      	mov	r3, r0
 800b980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b984:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b988:	d102      	bne.n	800b990 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b98a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b98e:	e02f      	b.n	800b9f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b990:	f107 030c 	add.w	r3, r7, #12
 800b994:	4619      	mov	r1, r3
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f82e 	bl	800b9f8 <SD_FindSCR>
 800b99c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	e023      	b.n	800b9f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d01c      	beq.n	800b9ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ba:	041b      	lsls	r3, r3, #16
 800b9bc:	4619      	mov	r1, r3
 800b9be:	4610      	mov	r0, r2
 800b9c0:	f003 f9ec 	bl	800ed9c <SDMMC_CmdAppCommand>
 800b9c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	e00f      	b.n	800b9f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f003 fa23 	bl	800ee22 <SDMMC_CmdBusWidth>
 800b9dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	e003      	b.n	800b9f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	e001      	b.n	800b9f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b9ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08e      	sub	sp, #56	; 0x38
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba02:	f7f5 ffd3 	bl	80019ac <HAL_GetTick>
 800ba06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	60bb      	str	r3, [r7, #8]
 800ba10:	2300      	movs	r3, #0
 800ba12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2108      	movs	r1, #8
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f003 f86e 	bl	800eb00 <SDMMC_CmdBlockLength>
 800ba24:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ba2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2e:	e0ad      	b.n	800bb8c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba38:	041b      	lsls	r3, r3, #16
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	f003 f9ad 	bl	800ed9c <SDMMC_CmdAppCommand>
 800ba42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <SD_FindSCR+0x56>
  {
    return errorstate;
 800ba4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4c:	e09e      	b.n	800bb8c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ba4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ba54:	2308      	movs	r3, #8
 800ba56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ba58:	2330      	movs	r3, #48	; 0x30
 800ba5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ba64:	2301      	movs	r3, #1
 800ba66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f107 0210 	add.w	r2, r7, #16
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f003 f818 	bl	800eaa8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f003 f9f3 	bl	800ee68 <SDMMC_CmdSendSCR>
 800ba82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d027      	beq.n	800bada <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ba8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8c:	e07e      	b.n	800bb8c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d113      	bne.n	800bac4 <SD_FindSCR+0xcc>
 800ba9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d110      	bne.n	800bac4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f002 ff76 	bl	800e998 <SDMMC_ReadFIFO>
 800baac:	4603      	mov	r3, r0
 800baae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f002 ff6f 	bl	800e998 <SDMMC_ReadFIFO>
 800baba:	4603      	mov	r3, r0
 800babc:	60fb      	str	r3, [r7, #12]
      index++;
 800babe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac0:	3301      	adds	r3, #1
 800bac2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bac4:	f7f5 ff72 	bl	80019ac <HAL_GetTick>
 800bac8:	4602      	mov	r2, r0
 800baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad2:	d102      	bne.n	800bada <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bad8:	e058      	b.n	800bb8c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bae0:	f240 532a 	movw	r3, #1322	; 0x52a
 800bae4:	4013      	ands	r3, r2
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0d1      	beq.n	800ba8e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf0:	f003 0308 	and.w	r3, r3, #8
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d005      	beq.n	800bb04 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2208      	movs	r2, #8
 800bafe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bb00:	2308      	movs	r3, #8
 800bb02:	e043      	b.n	800bb8c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0a:	f003 0302 	and.w	r3, r3, #2
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d005      	beq.n	800bb1e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2202      	movs	r2, #2
 800bb18:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	e036      	b.n	800bb8c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb24:	f003 0320 	and.w	r3, r3, #32
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d005      	beq.n	800bb38 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2220      	movs	r2, #32
 800bb32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bb34:	2320      	movs	r3, #32
 800bb36:	e029      	b.n	800bb8c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a15      	ldr	r2, [pc, #84]	; (800bb94 <SD_FindSCR+0x19c>)
 800bb3e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	061a      	lsls	r2, r3, #24
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	021b      	lsls	r3, r3, #8
 800bb48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	0a1b      	lsrs	r3, r3, #8
 800bb52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bb56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	0e1b      	lsrs	r3, r3, #24
 800bb5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb60:	601a      	str	r2, [r3, #0]
    scr++;
 800bb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb64:	3304      	adds	r3, #4
 800bb66:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	061a      	lsls	r2, r3, #24
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	021b      	lsls	r3, r3, #8
 800bb70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	0a1b      	lsrs	r3, r3, #8
 800bb7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bb7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	0e1b      	lsrs	r3, r3, #24
 800bb84:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3738      	adds	r7, #56	; 0x38
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	18000f3a 	.word	0x18000f3a

0800bb98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e01d      	b.n	800bbe6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d106      	bne.n	800bbc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f7f5 fcc8 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	f000 f9a6 	bl	800bf28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
	...

0800bbf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68da      	ldr	r2, [r3, #12]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f042 0201 	orr.w	r2, r2, #1
 800bc06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689a      	ldr	r2, [r3, #8]
 800bc0e:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <HAL_TIM_Base_Start_IT+0x50>)
 800bc10:	4013      	ands	r3, r2
 800bc12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2b06      	cmp	r3, #6
 800bc18:	d00b      	beq.n	800bc32 <HAL_TIM_Base_Start_IT+0x42>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc20:	d007      	beq.n	800bc32 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f042 0201 	orr.w	r2, r2, #1
 800bc30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	00010007 	.word	0x00010007

0800bc44 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68da      	ldr	r2, [r3, #12]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f022 0201 	bic.w	r2, r2, #1
 800bc5a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6a1a      	ldr	r2, [r3, #32]
 800bc62:	f241 1311 	movw	r3, #4369	; 0x1111
 800bc66:	4013      	ands	r3, r2
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10f      	bne.n	800bc8c <HAL_TIM_Base_Stop_IT+0x48>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6a1a      	ldr	r2, [r3, #32]
 800bc72:	f240 4344 	movw	r3, #1092	; 0x444
 800bc76:	4013      	ands	r3, r2
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d107      	bne.n	800bc8c <HAL_TIM_Base_Stop_IT+0x48>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f022 0201 	bic.w	r2, r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b082      	sub	sp, #8
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	f003 0302 	and.w	r3, r3, #2
 800bcac:	2b02      	cmp	r3, #2
 800bcae:	d122      	bne.n	800bcf6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	f003 0302 	and.w	r3, r3, #2
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d11b      	bne.n	800bcf6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f06f 0202 	mvn.w	r2, #2
 800bcc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	699b      	ldr	r3, [r3, #24]
 800bcd4:	f003 0303 	and.w	r3, r3, #3
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d003      	beq.n	800bce4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f905 	bl	800beec <HAL_TIM_IC_CaptureCallback>
 800bce2:	e005      	b.n	800bcf0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 f8f7 	bl	800bed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f908 	bl	800bf00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	f003 0304 	and.w	r3, r3, #4
 800bd00:	2b04      	cmp	r3, #4
 800bd02:	d122      	bne.n	800bd4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	f003 0304 	and.w	r3, r3, #4
 800bd0e:	2b04      	cmp	r3, #4
 800bd10:	d11b      	bne.n	800bd4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f06f 0204 	mvn.w	r2, #4
 800bd1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d003      	beq.n	800bd38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 f8db 	bl	800beec <HAL_TIM_IC_CaptureCallback>
 800bd36:	e005      	b.n	800bd44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 f8cd 	bl	800bed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f8de 	bl	800bf00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	f003 0308 	and.w	r3, r3, #8
 800bd54:	2b08      	cmp	r3, #8
 800bd56:	d122      	bne.n	800bd9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	f003 0308 	and.w	r3, r3, #8
 800bd62:	2b08      	cmp	r3, #8
 800bd64:	d11b      	bne.n	800bd9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f06f 0208 	mvn.w	r2, #8
 800bd6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2204      	movs	r2, #4
 800bd74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	69db      	ldr	r3, [r3, #28]
 800bd7c:	f003 0303 	and.w	r3, r3, #3
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d003      	beq.n	800bd8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f8b1 	bl	800beec <HAL_TIM_IC_CaptureCallback>
 800bd8a:	e005      	b.n	800bd98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f8a3 	bl	800bed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f8b4 	bl	800bf00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	f003 0310 	and.w	r3, r3, #16
 800bda8:	2b10      	cmp	r3, #16
 800bdaa:	d122      	bne.n	800bdf2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	f003 0310 	and.w	r3, r3, #16
 800bdb6:	2b10      	cmp	r3, #16
 800bdb8:	d11b      	bne.n	800bdf2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f06f 0210 	mvn.w	r2, #16
 800bdc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2208      	movs	r2, #8
 800bdc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	69db      	ldr	r3, [r3, #28]
 800bdd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 f887 	bl	800beec <HAL_TIM_IC_CaptureCallback>
 800bdde:	e005      	b.n	800bdec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 f879 	bl	800bed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f88a 	bl	800bf00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d10e      	bne.n	800be1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d107      	bne.n	800be1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f06f 0201 	mvn.w	r2, #1
 800be16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7f5 f8f7 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be28:	2b80      	cmp	r3, #128	; 0x80
 800be2a:	d10e      	bne.n	800be4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be36:	2b80      	cmp	r3, #128	; 0x80
 800be38:	d107      	bne.n	800be4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f913 	bl	800c070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be58:	d10e      	bne.n	800be78 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be64:	2b80      	cmp	r3, #128	; 0x80
 800be66:	d107      	bne.n	800be78 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800be70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f906 	bl	800c084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be82:	2b40      	cmp	r3, #64	; 0x40
 800be84:	d10e      	bne.n	800bea4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be90:	2b40      	cmp	r3, #64	; 0x40
 800be92:	d107      	bne.n	800bea4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800be9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f838 	bl	800bf14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	f003 0320 	and.w	r3, r3, #32
 800beae:	2b20      	cmp	r3, #32
 800beb0:	d10e      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	f003 0320 	and.w	r3, r3, #32
 800bebc:	2b20      	cmp	r3, #32
 800bebe:	d107      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f06f 0220 	mvn.w	r2, #32
 800bec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f8c6 	bl	800c05c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bed0:	bf00      	nop
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4a40      	ldr	r2, [pc, #256]	; (800c03c <TIM_Base_SetConfig+0x114>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d013      	beq.n	800bf68 <TIM_Base_SetConfig+0x40>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf46:	d00f      	beq.n	800bf68 <TIM_Base_SetConfig+0x40>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a3d      	ldr	r2, [pc, #244]	; (800c040 <TIM_Base_SetConfig+0x118>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d00b      	beq.n	800bf68 <TIM_Base_SetConfig+0x40>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a3c      	ldr	r2, [pc, #240]	; (800c044 <TIM_Base_SetConfig+0x11c>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d007      	beq.n	800bf68 <TIM_Base_SetConfig+0x40>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a3b      	ldr	r2, [pc, #236]	; (800c048 <TIM_Base_SetConfig+0x120>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d003      	beq.n	800bf68 <TIM_Base_SetConfig+0x40>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a3a      	ldr	r2, [pc, #232]	; (800c04c <TIM_Base_SetConfig+0x124>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d108      	bne.n	800bf7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a2f      	ldr	r2, [pc, #188]	; (800c03c <TIM_Base_SetConfig+0x114>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d01f      	beq.n	800bfc2 <TIM_Base_SetConfig+0x9a>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf88:	d01b      	beq.n	800bfc2 <TIM_Base_SetConfig+0x9a>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4a2c      	ldr	r2, [pc, #176]	; (800c040 <TIM_Base_SetConfig+0x118>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d017      	beq.n	800bfc2 <TIM_Base_SetConfig+0x9a>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a2b      	ldr	r2, [pc, #172]	; (800c044 <TIM_Base_SetConfig+0x11c>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d013      	beq.n	800bfc2 <TIM_Base_SetConfig+0x9a>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4a2a      	ldr	r2, [pc, #168]	; (800c048 <TIM_Base_SetConfig+0x120>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d00f      	beq.n	800bfc2 <TIM_Base_SetConfig+0x9a>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4a29      	ldr	r2, [pc, #164]	; (800c04c <TIM_Base_SetConfig+0x124>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d00b      	beq.n	800bfc2 <TIM_Base_SetConfig+0x9a>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4a28      	ldr	r2, [pc, #160]	; (800c050 <TIM_Base_SetConfig+0x128>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d007      	beq.n	800bfc2 <TIM_Base_SetConfig+0x9a>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a27      	ldr	r2, [pc, #156]	; (800c054 <TIM_Base_SetConfig+0x12c>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d003      	beq.n	800bfc2 <TIM_Base_SetConfig+0x9a>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a26      	ldr	r2, [pc, #152]	; (800c058 <TIM_Base_SetConfig+0x130>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d108      	bne.n	800bfd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	695b      	ldr	r3, [r3, #20]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4a10      	ldr	r2, [pc, #64]	; (800c03c <TIM_Base_SetConfig+0x114>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d00f      	beq.n	800c020 <TIM_Base_SetConfig+0xf8>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4a12      	ldr	r2, [pc, #72]	; (800c04c <TIM_Base_SetConfig+0x124>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d00b      	beq.n	800c020 <TIM_Base_SetConfig+0xf8>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4a11      	ldr	r2, [pc, #68]	; (800c050 <TIM_Base_SetConfig+0x128>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d007      	beq.n	800c020 <TIM_Base_SetConfig+0xf8>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4a10      	ldr	r2, [pc, #64]	; (800c054 <TIM_Base_SetConfig+0x12c>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d003      	beq.n	800c020 <TIM_Base_SetConfig+0xf8>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a0f      	ldr	r2, [pc, #60]	; (800c058 <TIM_Base_SetConfig+0x130>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d103      	bne.n	800c028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	691a      	ldr	r2, [r3, #16]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	615a      	str	r2, [r3, #20]
}
 800c02e:	bf00      	nop
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	40010000 	.word	0x40010000
 800c040:	40000400 	.word	0x40000400
 800c044:	40000800 	.word	0x40000800
 800c048:	40000c00 	.word	0x40000c00
 800c04c:	40010400 	.word	0x40010400
 800c050:	40014000 	.word	0x40014000
 800c054:	40014400 	.word	0x40014400
 800c058:	40014800 	.word	0x40014800

0800c05c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e042      	b.n	800c130 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d106      	bne.n	800c0c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f7f5 fa6b 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2224      	movs	r2, #36	; 0x24
 800c0c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f022 0201 	bic.w	r2, r2, #1
 800c0d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f82c 	bl	800c138 <UART_SetConfig>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d101      	bne.n	800c0ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e022      	b.n	800c130 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d002      	beq.n	800c0f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f002 f99e 	bl	800e434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689a      	ldr	r2, [r3, #8]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f042 0201 	orr.w	r2, r2, #1
 800c126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f002 fa25 	bl	800e578 <UART_CheckIdleState>
 800c12e:	4603      	mov	r3, r0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c138:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c13c:	b090      	sub	sp, #64	; 0x40
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c142:	2300      	movs	r3, #0
 800c144:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800c14c:	2300      	movs	r3, #0
 800c14e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	689a      	ldr	r2, [r3, #8]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	431a      	orrs	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	695b      	ldr	r3, [r3, #20]
 800c15e:	431a      	orrs	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	69db      	ldr	r3, [r3, #28]
 800c164:	4313      	orrs	r3, r2
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c16c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c16e:	4313      	orrs	r3, r2
 800c170:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	4bc1      	ldr	r3, [pc, #772]	; (800c480 <UART_SetConfig+0x348>)
 800c17a:	4013      	ands	r3, r2
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	6812      	ldr	r2, [r2, #0]
 800c180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c182:	430b      	orrs	r3, r1
 800c184:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	68da      	ldr	r2, [r3, #12]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	430a      	orrs	r2, r1
 800c19a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4ab7      	ldr	r2, [pc, #732]	; (800c484 <UART_SetConfig+0x34c>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d004      	beq.n	800c1b6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a1b      	ldr	r3, [r3, #32]
 800c1b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	689a      	ldr	r2, [r3, #8]
 800c1bc:	4bb2      	ldr	r3, [pc, #712]	; (800c488 <UART_SetConfig+0x350>)
 800c1be:	4013      	ands	r3, r2
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	6812      	ldr	r2, [r2, #0]
 800c1c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1c6:	430b      	orrs	r3, r1
 800c1c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d0:	f023 010f 	bic.w	r1, r3, #15
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4aa9      	ldr	r2, [pc, #676]	; (800c48c <UART_SetConfig+0x354>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d177      	bne.n	800c2da <UART_SetConfig+0x1a2>
 800c1ea:	4ba9      	ldr	r3, [pc, #676]	; (800c490 <UART_SetConfig+0x358>)
 800c1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1f2:	2b28      	cmp	r3, #40	; 0x28
 800c1f4:	d86c      	bhi.n	800c2d0 <UART_SetConfig+0x198>
 800c1f6:	a201      	add	r2, pc, #4	; (adr r2, 800c1fc <UART_SetConfig+0xc4>)
 800c1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fc:	0800c2a1 	.word	0x0800c2a1
 800c200:	0800c2d1 	.word	0x0800c2d1
 800c204:	0800c2d1 	.word	0x0800c2d1
 800c208:	0800c2d1 	.word	0x0800c2d1
 800c20c:	0800c2d1 	.word	0x0800c2d1
 800c210:	0800c2d1 	.word	0x0800c2d1
 800c214:	0800c2d1 	.word	0x0800c2d1
 800c218:	0800c2d1 	.word	0x0800c2d1
 800c21c:	0800c2a9 	.word	0x0800c2a9
 800c220:	0800c2d1 	.word	0x0800c2d1
 800c224:	0800c2d1 	.word	0x0800c2d1
 800c228:	0800c2d1 	.word	0x0800c2d1
 800c22c:	0800c2d1 	.word	0x0800c2d1
 800c230:	0800c2d1 	.word	0x0800c2d1
 800c234:	0800c2d1 	.word	0x0800c2d1
 800c238:	0800c2d1 	.word	0x0800c2d1
 800c23c:	0800c2b1 	.word	0x0800c2b1
 800c240:	0800c2d1 	.word	0x0800c2d1
 800c244:	0800c2d1 	.word	0x0800c2d1
 800c248:	0800c2d1 	.word	0x0800c2d1
 800c24c:	0800c2d1 	.word	0x0800c2d1
 800c250:	0800c2d1 	.word	0x0800c2d1
 800c254:	0800c2d1 	.word	0x0800c2d1
 800c258:	0800c2d1 	.word	0x0800c2d1
 800c25c:	0800c2b9 	.word	0x0800c2b9
 800c260:	0800c2d1 	.word	0x0800c2d1
 800c264:	0800c2d1 	.word	0x0800c2d1
 800c268:	0800c2d1 	.word	0x0800c2d1
 800c26c:	0800c2d1 	.word	0x0800c2d1
 800c270:	0800c2d1 	.word	0x0800c2d1
 800c274:	0800c2d1 	.word	0x0800c2d1
 800c278:	0800c2d1 	.word	0x0800c2d1
 800c27c:	0800c2c1 	.word	0x0800c2c1
 800c280:	0800c2d1 	.word	0x0800c2d1
 800c284:	0800c2d1 	.word	0x0800c2d1
 800c288:	0800c2d1 	.word	0x0800c2d1
 800c28c:	0800c2d1 	.word	0x0800c2d1
 800c290:	0800c2d1 	.word	0x0800c2d1
 800c294:	0800c2d1 	.word	0x0800c2d1
 800c298:	0800c2d1 	.word	0x0800c2d1
 800c29c:	0800c2c9 	.word	0x0800c2c9
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2a6:	e233      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c2a8:	2304      	movs	r3, #4
 800c2aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2ae:	e22f      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c2b0:	2308      	movs	r3, #8
 800c2b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2b6:	e22b      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c2b8:	2310      	movs	r3, #16
 800c2ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2be:	e227      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c2c0:	2320      	movs	r3, #32
 800c2c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2c6:	e223      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c2c8:	2340      	movs	r3, #64	; 0x40
 800c2ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2ce:	e21f      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c2d0:	2380      	movs	r3, #128	; 0x80
 800c2d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2d6:	bf00      	nop
 800c2d8:	e21a      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a6d      	ldr	r2, [pc, #436]	; (800c494 <UART_SetConfig+0x35c>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d132      	bne.n	800c34a <UART_SetConfig+0x212>
 800c2e4:	4b6a      	ldr	r3, [pc, #424]	; (800c490 <UART_SetConfig+0x358>)
 800c2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e8:	f003 0307 	and.w	r3, r3, #7
 800c2ec:	2b05      	cmp	r3, #5
 800c2ee:	d827      	bhi.n	800c340 <UART_SetConfig+0x208>
 800c2f0:	a201      	add	r2, pc, #4	; (adr r2, 800c2f8 <UART_SetConfig+0x1c0>)
 800c2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f6:	bf00      	nop
 800c2f8:	0800c311 	.word	0x0800c311
 800c2fc:	0800c319 	.word	0x0800c319
 800c300:	0800c321 	.word	0x0800c321
 800c304:	0800c329 	.word	0x0800c329
 800c308:	0800c331 	.word	0x0800c331
 800c30c:	0800c339 	.word	0x0800c339
 800c310:	2300      	movs	r3, #0
 800c312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c316:	e1fb      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c318:	2304      	movs	r3, #4
 800c31a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c31e:	e1f7      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c320:	2308      	movs	r3, #8
 800c322:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c326:	e1f3      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c328:	2310      	movs	r3, #16
 800c32a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c32e:	e1ef      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c330:	2320      	movs	r3, #32
 800c332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c336:	e1eb      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c338:	2340      	movs	r3, #64	; 0x40
 800c33a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c33e:	e1e7      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c340:	2380      	movs	r3, #128	; 0x80
 800c342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c346:	bf00      	nop
 800c348:	e1e2      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a52      	ldr	r2, [pc, #328]	; (800c498 <UART_SetConfig+0x360>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d132      	bne.n	800c3ba <UART_SetConfig+0x282>
 800c354:	4b4e      	ldr	r3, [pc, #312]	; (800c490 <UART_SetConfig+0x358>)
 800c356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c358:	f003 0307 	and.w	r3, r3, #7
 800c35c:	2b05      	cmp	r3, #5
 800c35e:	d827      	bhi.n	800c3b0 <UART_SetConfig+0x278>
 800c360:	a201      	add	r2, pc, #4	; (adr r2, 800c368 <UART_SetConfig+0x230>)
 800c362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c366:	bf00      	nop
 800c368:	0800c381 	.word	0x0800c381
 800c36c:	0800c389 	.word	0x0800c389
 800c370:	0800c391 	.word	0x0800c391
 800c374:	0800c399 	.word	0x0800c399
 800c378:	0800c3a1 	.word	0x0800c3a1
 800c37c:	0800c3a9 	.word	0x0800c3a9
 800c380:	2300      	movs	r3, #0
 800c382:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c386:	e1c3      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c388:	2304      	movs	r3, #4
 800c38a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c38e:	e1bf      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c390:	2308      	movs	r3, #8
 800c392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c396:	e1bb      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c398:	2310      	movs	r3, #16
 800c39a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c39e:	e1b7      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c3a0:	2320      	movs	r3, #32
 800c3a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3a6:	e1b3      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c3a8:	2340      	movs	r3, #64	; 0x40
 800c3aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3ae:	e1af      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c3b0:	2380      	movs	r3, #128	; 0x80
 800c3b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3b6:	bf00      	nop
 800c3b8:	e1aa      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a37      	ldr	r2, [pc, #220]	; (800c49c <UART_SetConfig+0x364>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d132      	bne.n	800c42a <UART_SetConfig+0x2f2>
 800c3c4:	4b32      	ldr	r3, [pc, #200]	; (800c490 <UART_SetConfig+0x358>)
 800c3c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3c8:	f003 0307 	and.w	r3, r3, #7
 800c3cc:	2b05      	cmp	r3, #5
 800c3ce:	d827      	bhi.n	800c420 <UART_SetConfig+0x2e8>
 800c3d0:	a201      	add	r2, pc, #4	; (adr r2, 800c3d8 <UART_SetConfig+0x2a0>)
 800c3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d6:	bf00      	nop
 800c3d8:	0800c3f1 	.word	0x0800c3f1
 800c3dc:	0800c3f9 	.word	0x0800c3f9
 800c3e0:	0800c401 	.word	0x0800c401
 800c3e4:	0800c409 	.word	0x0800c409
 800c3e8:	0800c411 	.word	0x0800c411
 800c3ec:	0800c419 	.word	0x0800c419
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3f6:	e18b      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c3f8:	2304      	movs	r3, #4
 800c3fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3fe:	e187      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c400:	2308      	movs	r3, #8
 800c402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c406:	e183      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c408:	2310      	movs	r3, #16
 800c40a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c40e:	e17f      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c410:	2320      	movs	r3, #32
 800c412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c416:	e17b      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c418:	2340      	movs	r3, #64	; 0x40
 800c41a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c41e:	e177      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c420:	2380      	movs	r3, #128	; 0x80
 800c422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c426:	bf00      	nop
 800c428:	e172      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a1c      	ldr	r2, [pc, #112]	; (800c4a0 <UART_SetConfig+0x368>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d144      	bne.n	800c4be <UART_SetConfig+0x386>
 800c434:	4b16      	ldr	r3, [pc, #88]	; (800c490 <UART_SetConfig+0x358>)
 800c436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c438:	f003 0307 	and.w	r3, r3, #7
 800c43c:	2b05      	cmp	r3, #5
 800c43e:	d839      	bhi.n	800c4b4 <UART_SetConfig+0x37c>
 800c440:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <UART_SetConfig+0x310>)
 800c442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c446:	bf00      	nop
 800c448:	0800c461 	.word	0x0800c461
 800c44c:	0800c469 	.word	0x0800c469
 800c450:	0800c471 	.word	0x0800c471
 800c454:	0800c479 	.word	0x0800c479
 800c458:	0800c4a5 	.word	0x0800c4a5
 800c45c:	0800c4ad 	.word	0x0800c4ad
 800c460:	2300      	movs	r3, #0
 800c462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c466:	e153      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c468:	2304      	movs	r3, #4
 800c46a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c46e:	e14f      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c470:	2308      	movs	r3, #8
 800c472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c476:	e14b      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c478:	2310      	movs	r3, #16
 800c47a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c47e:	e147      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c480:	cfff69f3 	.word	0xcfff69f3
 800c484:	58000c00 	.word	0x58000c00
 800c488:	11fff4ff 	.word	0x11fff4ff
 800c48c:	40011000 	.word	0x40011000
 800c490:	58024400 	.word	0x58024400
 800c494:	40004400 	.word	0x40004400
 800c498:	40004800 	.word	0x40004800
 800c49c:	40004c00 	.word	0x40004c00
 800c4a0:	40005000 	.word	0x40005000
 800c4a4:	2320      	movs	r3, #32
 800c4a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4aa:	e131      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c4ac:	2340      	movs	r3, #64	; 0x40
 800c4ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4b2:	e12d      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c4b4:	2380      	movs	r3, #128	; 0x80
 800c4b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4ba:	bf00      	nop
 800c4bc:	e128      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4ac3      	ldr	r2, [pc, #780]	; (800c7d0 <UART_SetConfig+0x698>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d178      	bne.n	800c5ba <UART_SetConfig+0x482>
 800c4c8:	4bc2      	ldr	r3, [pc, #776]	; (800c7d4 <UART_SetConfig+0x69c>)
 800c4ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4d0:	2b28      	cmp	r3, #40	; 0x28
 800c4d2:	d86d      	bhi.n	800c5b0 <UART_SetConfig+0x478>
 800c4d4:	a201      	add	r2, pc, #4	; (adr r2, 800c4dc <UART_SetConfig+0x3a4>)
 800c4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4da:	bf00      	nop
 800c4dc:	0800c581 	.word	0x0800c581
 800c4e0:	0800c5b1 	.word	0x0800c5b1
 800c4e4:	0800c5b1 	.word	0x0800c5b1
 800c4e8:	0800c5b1 	.word	0x0800c5b1
 800c4ec:	0800c5b1 	.word	0x0800c5b1
 800c4f0:	0800c5b1 	.word	0x0800c5b1
 800c4f4:	0800c5b1 	.word	0x0800c5b1
 800c4f8:	0800c5b1 	.word	0x0800c5b1
 800c4fc:	0800c589 	.word	0x0800c589
 800c500:	0800c5b1 	.word	0x0800c5b1
 800c504:	0800c5b1 	.word	0x0800c5b1
 800c508:	0800c5b1 	.word	0x0800c5b1
 800c50c:	0800c5b1 	.word	0x0800c5b1
 800c510:	0800c5b1 	.word	0x0800c5b1
 800c514:	0800c5b1 	.word	0x0800c5b1
 800c518:	0800c5b1 	.word	0x0800c5b1
 800c51c:	0800c591 	.word	0x0800c591
 800c520:	0800c5b1 	.word	0x0800c5b1
 800c524:	0800c5b1 	.word	0x0800c5b1
 800c528:	0800c5b1 	.word	0x0800c5b1
 800c52c:	0800c5b1 	.word	0x0800c5b1
 800c530:	0800c5b1 	.word	0x0800c5b1
 800c534:	0800c5b1 	.word	0x0800c5b1
 800c538:	0800c5b1 	.word	0x0800c5b1
 800c53c:	0800c599 	.word	0x0800c599
 800c540:	0800c5b1 	.word	0x0800c5b1
 800c544:	0800c5b1 	.word	0x0800c5b1
 800c548:	0800c5b1 	.word	0x0800c5b1
 800c54c:	0800c5b1 	.word	0x0800c5b1
 800c550:	0800c5b1 	.word	0x0800c5b1
 800c554:	0800c5b1 	.word	0x0800c5b1
 800c558:	0800c5b1 	.word	0x0800c5b1
 800c55c:	0800c5a1 	.word	0x0800c5a1
 800c560:	0800c5b1 	.word	0x0800c5b1
 800c564:	0800c5b1 	.word	0x0800c5b1
 800c568:	0800c5b1 	.word	0x0800c5b1
 800c56c:	0800c5b1 	.word	0x0800c5b1
 800c570:	0800c5b1 	.word	0x0800c5b1
 800c574:	0800c5b1 	.word	0x0800c5b1
 800c578:	0800c5b1 	.word	0x0800c5b1
 800c57c:	0800c5a9 	.word	0x0800c5a9
 800c580:	2301      	movs	r3, #1
 800c582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c586:	e0c3      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c588:	2304      	movs	r3, #4
 800c58a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c58e:	e0bf      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c590:	2308      	movs	r3, #8
 800c592:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c596:	e0bb      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c598:	2310      	movs	r3, #16
 800c59a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c59e:	e0b7      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c5a0:	2320      	movs	r3, #32
 800c5a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c5a6:	e0b3      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c5a8:	2340      	movs	r3, #64	; 0x40
 800c5aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c5ae:	e0af      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c5b0:	2380      	movs	r3, #128	; 0x80
 800c5b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c5b6:	bf00      	nop
 800c5b8:	e0aa      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a86      	ldr	r2, [pc, #536]	; (800c7d8 <UART_SetConfig+0x6a0>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d132      	bne.n	800c62a <UART_SetConfig+0x4f2>
 800c5c4:	4b83      	ldr	r3, [pc, #524]	; (800c7d4 <UART_SetConfig+0x69c>)
 800c5c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5c8:	f003 0307 	and.w	r3, r3, #7
 800c5cc:	2b05      	cmp	r3, #5
 800c5ce:	d827      	bhi.n	800c620 <UART_SetConfig+0x4e8>
 800c5d0:	a201      	add	r2, pc, #4	; (adr r2, 800c5d8 <UART_SetConfig+0x4a0>)
 800c5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d6:	bf00      	nop
 800c5d8:	0800c5f1 	.word	0x0800c5f1
 800c5dc:	0800c5f9 	.word	0x0800c5f9
 800c5e0:	0800c601 	.word	0x0800c601
 800c5e4:	0800c609 	.word	0x0800c609
 800c5e8:	0800c611 	.word	0x0800c611
 800c5ec:	0800c619 	.word	0x0800c619
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c5f6:	e08b      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c5f8:	2304      	movs	r3, #4
 800c5fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c5fe:	e087      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c600:	2308      	movs	r3, #8
 800c602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c606:	e083      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c608:	2310      	movs	r3, #16
 800c60a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c60e:	e07f      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c610:	2320      	movs	r3, #32
 800c612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c616:	e07b      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c618:	2340      	movs	r3, #64	; 0x40
 800c61a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c61e:	e077      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c620:	2380      	movs	r3, #128	; 0x80
 800c622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c626:	bf00      	nop
 800c628:	e072      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a6b      	ldr	r2, [pc, #428]	; (800c7dc <UART_SetConfig+0x6a4>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d132      	bne.n	800c69a <UART_SetConfig+0x562>
 800c634:	4b67      	ldr	r3, [pc, #412]	; (800c7d4 <UART_SetConfig+0x69c>)
 800c636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c638:	f003 0307 	and.w	r3, r3, #7
 800c63c:	2b05      	cmp	r3, #5
 800c63e:	d827      	bhi.n	800c690 <UART_SetConfig+0x558>
 800c640:	a201      	add	r2, pc, #4	; (adr r2, 800c648 <UART_SetConfig+0x510>)
 800c642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c646:	bf00      	nop
 800c648:	0800c661 	.word	0x0800c661
 800c64c:	0800c669 	.word	0x0800c669
 800c650:	0800c671 	.word	0x0800c671
 800c654:	0800c679 	.word	0x0800c679
 800c658:	0800c681 	.word	0x0800c681
 800c65c:	0800c689 	.word	0x0800c689
 800c660:	2300      	movs	r3, #0
 800c662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c666:	e053      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c668:	2304      	movs	r3, #4
 800c66a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c66e:	e04f      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c670:	2308      	movs	r3, #8
 800c672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c676:	e04b      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c678:	2310      	movs	r3, #16
 800c67a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c67e:	e047      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c680:	2320      	movs	r3, #32
 800c682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c686:	e043      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c688:	2340      	movs	r3, #64	; 0x40
 800c68a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c68e:	e03f      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c690:	2380      	movs	r3, #128	; 0x80
 800c692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c696:	bf00      	nop
 800c698:	e03a      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a50      	ldr	r2, [pc, #320]	; (800c7e0 <UART_SetConfig+0x6a8>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d132      	bne.n	800c70a <UART_SetConfig+0x5d2>
 800c6a4:	4b4b      	ldr	r3, [pc, #300]	; (800c7d4 <UART_SetConfig+0x69c>)
 800c6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6a8:	f003 0307 	and.w	r3, r3, #7
 800c6ac:	2b05      	cmp	r3, #5
 800c6ae:	d827      	bhi.n	800c700 <UART_SetConfig+0x5c8>
 800c6b0:	a201      	add	r2, pc, #4	; (adr r2, 800c6b8 <UART_SetConfig+0x580>)
 800c6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b6:	bf00      	nop
 800c6b8:	0800c6d1 	.word	0x0800c6d1
 800c6bc:	0800c6d9 	.word	0x0800c6d9
 800c6c0:	0800c6e1 	.word	0x0800c6e1
 800c6c4:	0800c6e9 	.word	0x0800c6e9
 800c6c8:	0800c6f1 	.word	0x0800c6f1
 800c6cc:	0800c6f9 	.word	0x0800c6f9
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6d6:	e01b      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c6d8:	2304      	movs	r3, #4
 800c6da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6de:	e017      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6e6:	e013      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c6e8:	2310      	movs	r3, #16
 800c6ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6ee:	e00f      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c6f0:	2320      	movs	r3, #32
 800c6f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6f6:	e00b      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c6f8:	2340      	movs	r3, #64	; 0x40
 800c6fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6fe:	e007      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c700:	2380      	movs	r3, #128	; 0x80
 800c702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c706:	bf00      	nop
 800c708:	e002      	b.n	800c710 <UART_SetConfig+0x5d8>
 800c70a:	2380      	movs	r3, #128	; 0x80
 800c70c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a32      	ldr	r2, [pc, #200]	; (800c7e0 <UART_SetConfig+0x6a8>)
 800c716:	4293      	cmp	r3, r2
 800c718:	f040 86f7 	bne.w	800d50a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c71c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c720:	2b08      	cmp	r3, #8
 800c722:	f000 80c0 	beq.w	800c8a6 <UART_SetConfig+0x76e>
 800c726:	2b08      	cmp	r3, #8
 800c728:	dc04      	bgt.n	800c734 <UART_SetConfig+0x5fc>
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d00c      	beq.n	800c748 <UART_SetConfig+0x610>
 800c72e:	2b04      	cmp	r3, #4
 800c730:	d065      	beq.n	800c7fe <UART_SetConfig+0x6c6>
 800c732:	e27a      	b.n	800cc2a <UART_SetConfig+0xaf2>
 800c734:	2b20      	cmp	r3, #32
 800c736:	f000 81b0 	beq.w	800ca9a <UART_SetConfig+0x962>
 800c73a:	2b40      	cmp	r3, #64	; 0x40
 800c73c:	f000 821e 	beq.w	800cb7c <UART_SetConfig+0xa44>
 800c740:	2b10      	cmp	r3, #16
 800c742:	f000 8104 	beq.w	800c94e <UART_SetConfig+0x816>
 800c746:	e270      	b.n	800cc2a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c748:	f7fd f912 	bl	8009970 <HAL_RCCEx_GetD3PCLK1Freq>
 800c74c:	4602      	mov	r2, r0
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c752:	2b00      	cmp	r3, #0
 800c754:	d04e      	beq.n	800c7f4 <UART_SetConfig+0x6bc>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d048      	beq.n	800c7f0 <UART_SetConfig+0x6b8>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c762:	2b02      	cmp	r3, #2
 800c764:	d042      	beq.n	800c7ec <UART_SetConfig+0x6b4>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76a:	2b03      	cmp	r3, #3
 800c76c:	d03c      	beq.n	800c7e8 <UART_SetConfig+0x6b0>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c772:	2b04      	cmp	r3, #4
 800c774:	d036      	beq.n	800c7e4 <UART_SetConfig+0x6ac>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77a:	2b05      	cmp	r3, #5
 800c77c:	d026      	beq.n	800c7cc <UART_SetConfig+0x694>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c782:	2b06      	cmp	r3, #6
 800c784:	d020      	beq.n	800c7c8 <UART_SetConfig+0x690>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78a:	2b07      	cmp	r3, #7
 800c78c:	d01a      	beq.n	800c7c4 <UART_SetConfig+0x68c>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c792:	2b08      	cmp	r3, #8
 800c794:	d014      	beq.n	800c7c0 <UART_SetConfig+0x688>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79a:	2b09      	cmp	r3, #9
 800c79c:	d00e      	beq.n	800c7bc <UART_SetConfig+0x684>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a2:	2b0a      	cmp	r3, #10
 800c7a4:	d008      	beq.n	800c7b8 <UART_SetConfig+0x680>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7aa:	2b0b      	cmp	r3, #11
 800c7ac:	d102      	bne.n	800c7b4 <UART_SetConfig+0x67c>
 800c7ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7b2:	e020      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e01e      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7b8:	2380      	movs	r3, #128	; 0x80
 800c7ba:	e01c      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7bc:	2340      	movs	r3, #64	; 0x40
 800c7be:	e01a      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7c0:	2320      	movs	r3, #32
 800c7c2:	e018      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7c4:	2310      	movs	r3, #16
 800c7c6:	e016      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7c8:	230c      	movs	r3, #12
 800c7ca:	e014      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7cc:	230a      	movs	r3, #10
 800c7ce:	e012      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7d0:	40011400 	.word	0x40011400
 800c7d4:	58024400 	.word	0x58024400
 800c7d8:	40007800 	.word	0x40007800
 800c7dc:	40007c00 	.word	0x40007c00
 800c7e0:	58000c00 	.word	0x58000c00
 800c7e4:	2308      	movs	r3, #8
 800c7e6:	e006      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7e8:	2306      	movs	r3, #6
 800c7ea:	e004      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7ec:	2304      	movs	r3, #4
 800c7ee:	e002      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	e000      	b.n	800c7f6 <UART_SetConfig+0x6be>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7fc:	e219      	b.n	800cc32 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7fe:	f107 0318 	add.w	r3, r7, #24
 800c802:	4618      	mov	r0, r3
 800c804:	f7fd f8ca 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c808:	69fa      	ldr	r2, [r7, #28]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d044      	beq.n	800c89c <UART_SetConfig+0x764>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c816:	2b01      	cmp	r3, #1
 800c818:	d03e      	beq.n	800c898 <UART_SetConfig+0x760>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d038      	beq.n	800c894 <UART_SetConfig+0x75c>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c826:	2b03      	cmp	r3, #3
 800c828:	d032      	beq.n	800c890 <UART_SetConfig+0x758>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82e:	2b04      	cmp	r3, #4
 800c830:	d02c      	beq.n	800c88c <UART_SetConfig+0x754>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c836:	2b05      	cmp	r3, #5
 800c838:	d026      	beq.n	800c888 <UART_SetConfig+0x750>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83e:	2b06      	cmp	r3, #6
 800c840:	d020      	beq.n	800c884 <UART_SetConfig+0x74c>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c846:	2b07      	cmp	r3, #7
 800c848:	d01a      	beq.n	800c880 <UART_SetConfig+0x748>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84e:	2b08      	cmp	r3, #8
 800c850:	d014      	beq.n	800c87c <UART_SetConfig+0x744>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c856:	2b09      	cmp	r3, #9
 800c858:	d00e      	beq.n	800c878 <UART_SetConfig+0x740>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85e:	2b0a      	cmp	r3, #10
 800c860:	d008      	beq.n	800c874 <UART_SetConfig+0x73c>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c866:	2b0b      	cmp	r3, #11
 800c868:	d102      	bne.n	800c870 <UART_SetConfig+0x738>
 800c86a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c86e:	e016      	b.n	800c89e <UART_SetConfig+0x766>
 800c870:	2301      	movs	r3, #1
 800c872:	e014      	b.n	800c89e <UART_SetConfig+0x766>
 800c874:	2380      	movs	r3, #128	; 0x80
 800c876:	e012      	b.n	800c89e <UART_SetConfig+0x766>
 800c878:	2340      	movs	r3, #64	; 0x40
 800c87a:	e010      	b.n	800c89e <UART_SetConfig+0x766>
 800c87c:	2320      	movs	r3, #32
 800c87e:	e00e      	b.n	800c89e <UART_SetConfig+0x766>
 800c880:	2310      	movs	r3, #16
 800c882:	e00c      	b.n	800c89e <UART_SetConfig+0x766>
 800c884:	230c      	movs	r3, #12
 800c886:	e00a      	b.n	800c89e <UART_SetConfig+0x766>
 800c888:	230a      	movs	r3, #10
 800c88a:	e008      	b.n	800c89e <UART_SetConfig+0x766>
 800c88c:	2308      	movs	r3, #8
 800c88e:	e006      	b.n	800c89e <UART_SetConfig+0x766>
 800c890:	2306      	movs	r3, #6
 800c892:	e004      	b.n	800c89e <UART_SetConfig+0x766>
 800c894:	2304      	movs	r3, #4
 800c896:	e002      	b.n	800c89e <UART_SetConfig+0x766>
 800c898:	2302      	movs	r3, #2
 800c89a:	e000      	b.n	800c89e <UART_SetConfig+0x766>
 800c89c:	2301      	movs	r3, #1
 800c89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8a4:	e1c5      	b.n	800cc32 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8a6:	f107 030c 	add.w	r3, r7, #12
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fd f9c2 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d044      	beq.n	800c944 <UART_SetConfig+0x80c>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d03e      	beq.n	800c940 <UART_SetConfig+0x808>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d038      	beq.n	800c93c <UART_SetConfig+0x804>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d032      	beq.n	800c938 <UART_SetConfig+0x800>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d6:	2b04      	cmp	r3, #4
 800c8d8:	d02c      	beq.n	800c934 <UART_SetConfig+0x7fc>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8de:	2b05      	cmp	r3, #5
 800c8e0:	d026      	beq.n	800c930 <UART_SetConfig+0x7f8>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e6:	2b06      	cmp	r3, #6
 800c8e8:	d020      	beq.n	800c92c <UART_SetConfig+0x7f4>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ee:	2b07      	cmp	r3, #7
 800c8f0:	d01a      	beq.n	800c928 <UART_SetConfig+0x7f0>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f6:	2b08      	cmp	r3, #8
 800c8f8:	d014      	beq.n	800c924 <UART_SetConfig+0x7ec>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fe:	2b09      	cmp	r3, #9
 800c900:	d00e      	beq.n	800c920 <UART_SetConfig+0x7e8>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	2b0a      	cmp	r3, #10
 800c908:	d008      	beq.n	800c91c <UART_SetConfig+0x7e4>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90e:	2b0b      	cmp	r3, #11
 800c910:	d102      	bne.n	800c918 <UART_SetConfig+0x7e0>
 800c912:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c916:	e016      	b.n	800c946 <UART_SetConfig+0x80e>
 800c918:	2301      	movs	r3, #1
 800c91a:	e014      	b.n	800c946 <UART_SetConfig+0x80e>
 800c91c:	2380      	movs	r3, #128	; 0x80
 800c91e:	e012      	b.n	800c946 <UART_SetConfig+0x80e>
 800c920:	2340      	movs	r3, #64	; 0x40
 800c922:	e010      	b.n	800c946 <UART_SetConfig+0x80e>
 800c924:	2320      	movs	r3, #32
 800c926:	e00e      	b.n	800c946 <UART_SetConfig+0x80e>
 800c928:	2310      	movs	r3, #16
 800c92a:	e00c      	b.n	800c946 <UART_SetConfig+0x80e>
 800c92c:	230c      	movs	r3, #12
 800c92e:	e00a      	b.n	800c946 <UART_SetConfig+0x80e>
 800c930:	230a      	movs	r3, #10
 800c932:	e008      	b.n	800c946 <UART_SetConfig+0x80e>
 800c934:	2308      	movs	r3, #8
 800c936:	e006      	b.n	800c946 <UART_SetConfig+0x80e>
 800c938:	2306      	movs	r3, #6
 800c93a:	e004      	b.n	800c946 <UART_SetConfig+0x80e>
 800c93c:	2304      	movs	r3, #4
 800c93e:	e002      	b.n	800c946 <UART_SetConfig+0x80e>
 800c940:	2302      	movs	r3, #2
 800c942:	e000      	b.n	800c946 <UART_SetConfig+0x80e>
 800c944:	2301      	movs	r3, #1
 800c946:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c94c:	e171      	b.n	800cc32 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c94e:	4b7a      	ldr	r3, [pc, #488]	; (800cb38 <UART_SetConfig+0xa00>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 0320 	and.w	r3, r3, #32
 800c956:	2b00      	cmp	r3, #0
 800c958:	d054      	beq.n	800ca04 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c95a:	4b77      	ldr	r3, [pc, #476]	; (800cb38 <UART_SetConfig+0xa00>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	08db      	lsrs	r3, r3, #3
 800c960:	f003 0303 	and.w	r3, r3, #3
 800c964:	4a75      	ldr	r2, [pc, #468]	; (800cb3c <UART_SetConfig+0xa04>)
 800c966:	40da      	lsrs	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d044      	beq.n	800c9fa <UART_SetConfig+0x8c2>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c974:	2b01      	cmp	r3, #1
 800c976:	d03e      	beq.n	800c9f6 <UART_SetConfig+0x8be>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d038      	beq.n	800c9f2 <UART_SetConfig+0x8ba>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c984:	2b03      	cmp	r3, #3
 800c986:	d032      	beq.n	800c9ee <UART_SetConfig+0x8b6>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	d02c      	beq.n	800c9ea <UART_SetConfig+0x8b2>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c994:	2b05      	cmp	r3, #5
 800c996:	d026      	beq.n	800c9e6 <UART_SetConfig+0x8ae>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99c:	2b06      	cmp	r3, #6
 800c99e:	d020      	beq.n	800c9e2 <UART_SetConfig+0x8aa>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a4:	2b07      	cmp	r3, #7
 800c9a6:	d01a      	beq.n	800c9de <UART_SetConfig+0x8a6>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ac:	2b08      	cmp	r3, #8
 800c9ae:	d014      	beq.n	800c9da <UART_SetConfig+0x8a2>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b4:	2b09      	cmp	r3, #9
 800c9b6:	d00e      	beq.n	800c9d6 <UART_SetConfig+0x89e>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9bc:	2b0a      	cmp	r3, #10
 800c9be:	d008      	beq.n	800c9d2 <UART_SetConfig+0x89a>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c4:	2b0b      	cmp	r3, #11
 800c9c6:	d102      	bne.n	800c9ce <UART_SetConfig+0x896>
 800c9c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9cc:	e016      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e014      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9d2:	2380      	movs	r3, #128	; 0x80
 800c9d4:	e012      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9d6:	2340      	movs	r3, #64	; 0x40
 800c9d8:	e010      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9da:	2320      	movs	r3, #32
 800c9dc:	e00e      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9de:	2310      	movs	r3, #16
 800c9e0:	e00c      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9e2:	230c      	movs	r3, #12
 800c9e4:	e00a      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9e6:	230a      	movs	r3, #10
 800c9e8:	e008      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9ea:	2308      	movs	r3, #8
 800c9ec:	e006      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9ee:	2306      	movs	r3, #6
 800c9f0:	e004      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9f2:	2304      	movs	r3, #4
 800c9f4:	e002      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9f6:	2302      	movs	r3, #2
 800c9f8:	e000      	b.n	800c9fc <UART_SetConfig+0x8c4>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800ca02:	e116      	b.n	800cc32 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d043      	beq.n	800ca94 <UART_SetConfig+0x95c>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d03d      	beq.n	800ca90 <UART_SetConfig+0x958>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	d037      	beq.n	800ca8c <UART_SetConfig+0x954>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca20:	2b03      	cmp	r3, #3
 800ca22:	d031      	beq.n	800ca88 <UART_SetConfig+0x950>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca28:	2b04      	cmp	r3, #4
 800ca2a:	d02b      	beq.n	800ca84 <UART_SetConfig+0x94c>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca30:	2b05      	cmp	r3, #5
 800ca32:	d025      	beq.n	800ca80 <UART_SetConfig+0x948>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca38:	2b06      	cmp	r3, #6
 800ca3a:	d01f      	beq.n	800ca7c <UART_SetConfig+0x944>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca40:	2b07      	cmp	r3, #7
 800ca42:	d019      	beq.n	800ca78 <UART_SetConfig+0x940>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca48:	2b08      	cmp	r3, #8
 800ca4a:	d013      	beq.n	800ca74 <UART_SetConfig+0x93c>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca50:	2b09      	cmp	r3, #9
 800ca52:	d00d      	beq.n	800ca70 <UART_SetConfig+0x938>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca58:	2b0a      	cmp	r3, #10
 800ca5a:	d007      	beq.n	800ca6c <UART_SetConfig+0x934>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca60:	2b0b      	cmp	r3, #11
 800ca62:	d101      	bne.n	800ca68 <UART_SetConfig+0x930>
 800ca64:	4b36      	ldr	r3, [pc, #216]	; (800cb40 <UART_SetConfig+0xa08>)
 800ca66:	e016      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca68:	4b34      	ldr	r3, [pc, #208]	; (800cb3c <UART_SetConfig+0xa04>)
 800ca6a:	e014      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca6c:	4b35      	ldr	r3, [pc, #212]	; (800cb44 <UART_SetConfig+0xa0c>)
 800ca6e:	e012      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca70:	4b35      	ldr	r3, [pc, #212]	; (800cb48 <UART_SetConfig+0xa10>)
 800ca72:	e010      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca74:	4b35      	ldr	r3, [pc, #212]	; (800cb4c <UART_SetConfig+0xa14>)
 800ca76:	e00e      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca78:	4b35      	ldr	r3, [pc, #212]	; (800cb50 <UART_SetConfig+0xa18>)
 800ca7a:	e00c      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca7c:	4b35      	ldr	r3, [pc, #212]	; (800cb54 <UART_SetConfig+0xa1c>)
 800ca7e:	e00a      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca80:	4b35      	ldr	r3, [pc, #212]	; (800cb58 <UART_SetConfig+0xa20>)
 800ca82:	e008      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca84:	4b35      	ldr	r3, [pc, #212]	; (800cb5c <UART_SetConfig+0xa24>)
 800ca86:	e006      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca88:	4b35      	ldr	r3, [pc, #212]	; (800cb60 <UART_SetConfig+0xa28>)
 800ca8a:	e004      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca8c:	4b35      	ldr	r3, [pc, #212]	; (800cb64 <UART_SetConfig+0xa2c>)
 800ca8e:	e002      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca90:	4b35      	ldr	r3, [pc, #212]	; (800cb68 <UART_SetConfig+0xa30>)
 800ca92:	e000      	b.n	800ca96 <UART_SetConfig+0x95e>
 800ca94:	4b29      	ldr	r3, [pc, #164]	; (800cb3c <UART_SetConfig+0xa04>)
 800ca96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca98:	e0cb      	b.n	800cc32 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d046      	beq.n	800cb30 <UART_SetConfig+0x9f8>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d040      	beq.n	800cb2c <UART_SetConfig+0x9f4>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d03a      	beq.n	800cb28 <UART_SetConfig+0x9f0>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab6:	2b03      	cmp	r3, #3
 800cab8:	d034      	beq.n	800cb24 <UART_SetConfig+0x9ec>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabe:	2b04      	cmp	r3, #4
 800cac0:	d02e      	beq.n	800cb20 <UART_SetConfig+0x9e8>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac6:	2b05      	cmp	r3, #5
 800cac8:	d028      	beq.n	800cb1c <UART_SetConfig+0x9e4>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cace:	2b06      	cmp	r3, #6
 800cad0:	d022      	beq.n	800cb18 <UART_SetConfig+0x9e0>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad6:	2b07      	cmp	r3, #7
 800cad8:	d01c      	beq.n	800cb14 <UART_SetConfig+0x9dc>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cade:	2b08      	cmp	r3, #8
 800cae0:	d016      	beq.n	800cb10 <UART_SetConfig+0x9d8>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae6:	2b09      	cmp	r3, #9
 800cae8:	d00f      	beq.n	800cb0a <UART_SetConfig+0x9d2>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caee:	2b0a      	cmp	r3, #10
 800caf0:	d008      	beq.n	800cb04 <UART_SetConfig+0x9cc>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf6:	2b0b      	cmp	r3, #11
 800caf8:	d102      	bne.n	800cb00 <UART_SetConfig+0x9c8>
 800cafa:	f643 5309 	movw	r3, #15625	; 0x3d09
 800cafe:	e018      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb00:	4b13      	ldr	r3, [pc, #76]	; (800cb50 <UART_SetConfig+0xa18>)
 800cb02:	e016      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb04:	f647 2312 	movw	r3, #31250	; 0x7a12
 800cb08:	e013      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb0a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800cb0e:	e010      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb10:	4b16      	ldr	r3, [pc, #88]	; (800cb6c <UART_SetConfig+0xa34>)
 800cb12:	e00e      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb14:	4b0a      	ldr	r3, [pc, #40]	; (800cb40 <UART_SetConfig+0xa08>)
 800cb16:	e00c      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb18:	4b15      	ldr	r3, [pc, #84]	; (800cb70 <UART_SetConfig+0xa38>)
 800cb1a:	e00a      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb1c:	4b15      	ldr	r3, [pc, #84]	; (800cb74 <UART_SetConfig+0xa3c>)
 800cb1e:	e008      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb20:	4b08      	ldr	r3, [pc, #32]	; (800cb44 <UART_SetConfig+0xa0c>)
 800cb22:	e006      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb24:	4b14      	ldr	r3, [pc, #80]	; (800cb78 <UART_SetConfig+0xa40>)
 800cb26:	e004      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb28:	4b07      	ldr	r3, [pc, #28]	; (800cb48 <UART_SetConfig+0xa10>)
 800cb2a:	e002      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb2c:	4b07      	ldr	r3, [pc, #28]	; (800cb4c <UART_SetConfig+0xa14>)
 800cb2e:	e000      	b.n	800cb32 <UART_SetConfig+0x9fa>
 800cb30:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <UART_SetConfig+0xa18>)
 800cb32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb34:	e07d      	b.n	800cc32 <UART_SetConfig+0xafa>
 800cb36:	bf00      	nop
 800cb38:	58024400 	.word	0x58024400
 800cb3c:	03d09000 	.word	0x03d09000
 800cb40:	0003d090 	.word	0x0003d090
 800cb44:	0007a120 	.word	0x0007a120
 800cb48:	000f4240 	.word	0x000f4240
 800cb4c:	001e8480 	.word	0x001e8480
 800cb50:	003d0900 	.word	0x003d0900
 800cb54:	00516155 	.word	0x00516155
 800cb58:	0061a800 	.word	0x0061a800
 800cb5c:	007a1200 	.word	0x007a1200
 800cb60:	00a2c2aa 	.word	0x00a2c2aa
 800cb64:	00f42400 	.word	0x00f42400
 800cb68:	01e84800 	.word	0x01e84800
 800cb6c:	0001e848 	.word	0x0001e848
 800cb70:	00051615 	.word	0x00051615
 800cb74:	00061a80 	.word	0x00061a80
 800cb78:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d04e      	beq.n	800cc22 <UART_SetConfig+0xaea>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d047      	beq.n	800cc1c <UART_SetConfig+0xae4>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d040      	beq.n	800cc16 <UART_SetConfig+0xade>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb98:	2b03      	cmp	r3, #3
 800cb9a:	d039      	beq.n	800cc10 <UART_SetConfig+0xad8>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	d032      	beq.n	800cc0a <UART_SetConfig+0xad2>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba8:	2b05      	cmp	r3, #5
 800cbaa:	d02b      	beq.n	800cc04 <UART_SetConfig+0xacc>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb0:	2b06      	cmp	r3, #6
 800cbb2:	d024      	beq.n	800cbfe <UART_SetConfig+0xac6>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb8:	2b07      	cmp	r3, #7
 800cbba:	d01d      	beq.n	800cbf8 <UART_SetConfig+0xac0>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc0:	2b08      	cmp	r3, #8
 800cbc2:	d016      	beq.n	800cbf2 <UART_SetConfig+0xaba>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc8:	2b09      	cmp	r3, #9
 800cbca:	d00f      	beq.n	800cbec <UART_SetConfig+0xab4>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd0:	2b0a      	cmp	r3, #10
 800cbd2:	d008      	beq.n	800cbe6 <UART_SetConfig+0xaae>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd8:	2b0b      	cmp	r3, #11
 800cbda:	d101      	bne.n	800cbe0 <UART_SetConfig+0xaa8>
 800cbdc:	2380      	movs	r3, #128	; 0x80
 800cbde:	e022      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cbe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbe4:	e01f      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cbe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbea:	e01c      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cbec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbf0:	e019      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cbf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbf6:	e016      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cbf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbfc:	e013      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cbfe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800cc02:	e010      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cc04:	f640 43cc 	movw	r3, #3276	; 0xccc
 800cc08:	e00d      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cc0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc0e:	e00a      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cc10:	f241 5355 	movw	r3, #5461	; 0x1555
 800cc14:	e007      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cc16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc1a:	e004      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cc1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cc20:	e001      	b.n	800cc26 <UART_SetConfig+0xaee>
 800cc22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc28:	e003      	b.n	800cc32 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800cc30:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f001 83e8 	beq.w	800e40a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	005b      	lsls	r3, r3, #1
 800cc42:	4413      	add	r3, r2
 800cc44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d305      	bcc.n	800cc56 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d904      	bls.n	800cc60 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5c:	f001 bbd5 	b.w	800e40a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800cc60:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cc64:	2b08      	cmp	r3, #8
 800cc66:	f000 8154 	beq.w	800cf12 <UART_SetConfig+0xdda>
 800cc6a:	2b08      	cmp	r3, #8
 800cc6c:	dc06      	bgt.n	800cc7c <UART_SetConfig+0xb44>
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d00f      	beq.n	800cc92 <UART_SetConfig+0xb5a>
 800cc72:	2b04      	cmp	r3, #4
 800cc74:	f000 80ac 	beq.w	800cdd0 <UART_SetConfig+0xc98>
 800cc78:	f000 bc30 	b.w	800d4dc <UART_SetConfig+0x13a4>
 800cc7c:	2b20      	cmp	r3, #32
 800cc7e:	f000 832d 	beq.w	800d2dc <UART_SetConfig+0x11a4>
 800cc82:	2b40      	cmp	r3, #64	; 0x40
 800cc84:	f000 83a5 	beq.w	800d3d2 <UART_SetConfig+0x129a>
 800cc88:	2b10      	cmp	r3, #16
 800cc8a:	f000 81e3 	beq.w	800d054 <UART_SetConfig+0xf1c>
 800cc8e:	f000 bc25 	b.w	800d4dc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cc92:	f7fc fe6d 	bl	8009970 <HAL_RCCEx_GetD3PCLK1Freq>
 800cc96:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f04f 0100 	mov.w	r1, #0
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d067      	beq.n	800cd78 <UART_SetConfig+0xc40>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d05e      	beq.n	800cd6e <UART_SetConfig+0xc36>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d055      	beq.n	800cd64 <UART_SetConfig+0xc2c>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	2b03      	cmp	r3, #3
 800ccbe:	d04c      	beq.n	800cd5a <UART_SetConfig+0xc22>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc4:	2b04      	cmp	r3, #4
 800ccc6:	d043      	beq.n	800cd50 <UART_SetConfig+0xc18>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cccc:	2b05      	cmp	r3, #5
 800ccce:	d03a      	beq.n	800cd46 <UART_SetConfig+0xc0e>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd4:	2b06      	cmp	r3, #6
 800ccd6:	d031      	beq.n	800cd3c <UART_SetConfig+0xc04>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccdc:	2b07      	cmp	r3, #7
 800ccde:	d028      	beq.n	800cd32 <UART_SetConfig+0xbfa>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce4:	2b08      	cmp	r3, #8
 800cce6:	d01f      	beq.n	800cd28 <UART_SetConfig+0xbf0>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	2b09      	cmp	r3, #9
 800ccee:	d016      	beq.n	800cd1e <UART_SetConfig+0xbe6>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf4:	2b0a      	cmp	r3, #10
 800ccf6:	d00d      	beq.n	800cd14 <UART_SetConfig+0xbdc>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfc:	2b0b      	cmp	r3, #11
 800ccfe:	d104      	bne.n	800cd0a <UART_SetConfig+0xbd2>
 800cd00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd04:	f04f 0400 	mov.w	r4, #0
 800cd08:	e03a      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd0a:	f04f 0301 	mov.w	r3, #1
 800cd0e:	f04f 0400 	mov.w	r4, #0
 800cd12:	e035      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd14:	f04f 0380 	mov.w	r3, #128	; 0x80
 800cd18:	f04f 0400 	mov.w	r4, #0
 800cd1c:	e030      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cd22:	f04f 0400 	mov.w	r4, #0
 800cd26:	e02b      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd28:	f04f 0320 	mov.w	r3, #32
 800cd2c:	f04f 0400 	mov.w	r4, #0
 800cd30:	e026      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd32:	f04f 0310 	mov.w	r3, #16
 800cd36:	f04f 0400 	mov.w	r4, #0
 800cd3a:	e021      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd3c:	f04f 030c 	mov.w	r3, #12
 800cd40:	f04f 0400 	mov.w	r4, #0
 800cd44:	e01c      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd46:	f04f 030a 	mov.w	r3, #10
 800cd4a:	f04f 0400 	mov.w	r4, #0
 800cd4e:	e017      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd50:	f04f 0308 	mov.w	r3, #8
 800cd54:	f04f 0400 	mov.w	r4, #0
 800cd58:	e012      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd5a:	f04f 0306 	mov.w	r3, #6
 800cd5e:	f04f 0400 	mov.w	r4, #0
 800cd62:	e00d      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd64:	f04f 0304 	mov.w	r3, #4
 800cd68:	f04f 0400 	mov.w	r4, #0
 800cd6c:	e008      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd6e:	f04f 0302 	mov.w	r3, #2
 800cd72:	f04f 0400 	mov.w	r4, #0
 800cd76:	e003      	b.n	800cd80 <UART_SetConfig+0xc48>
 800cd78:	f04f 0301 	mov.w	r3, #1
 800cd7c:	f04f 0400 	mov.w	r4, #0
 800cd80:	461a      	mov	r2, r3
 800cd82:	4623      	mov	r3, r4
 800cd84:	f7f3 faa8 	bl	80002d8 <__aeabi_uldivmod>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	460c      	mov	r4, r1
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	4622      	mov	r2, r4
 800cd90:	f04f 0300 	mov.w	r3, #0
 800cd94:	f04f 0400 	mov.w	r4, #0
 800cd98:	0214      	lsls	r4, r2, #8
 800cd9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cd9e:	020b      	lsls	r3, r1, #8
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	6852      	ldr	r2, [r2, #4]
 800cda4:	0852      	lsrs	r2, r2, #1
 800cda6:	4611      	mov	r1, r2
 800cda8:	f04f 0200 	mov.w	r2, #0
 800cdac:	eb13 0b01 	adds.w	fp, r3, r1
 800cdb0:	eb44 0c02 	adc.w	ip, r4, r2
 800cdb4:	4658      	mov	r0, fp
 800cdb6:	4661      	mov	r1, ip
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	f04f 0400 	mov.w	r4, #0
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	4623      	mov	r3, r4
 800cdc4:	f7f3 fa88 	bl	80002d8 <__aeabi_uldivmod>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cdce:	e389      	b.n	800d4e4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdd0:	f107 0318 	add.w	r3, r7, #24
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fc fde1 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f04f 0100 	mov.w	r1, #0
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d067      	beq.n	800ceba <UART_SetConfig+0xd82>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d05e      	beq.n	800ceb0 <UART_SetConfig+0xd78>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d055      	beq.n	800cea6 <UART_SetConfig+0xd6e>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d04c      	beq.n	800ce9c <UART_SetConfig+0xd64>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce06:	2b04      	cmp	r3, #4
 800ce08:	d043      	beq.n	800ce92 <UART_SetConfig+0xd5a>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0e:	2b05      	cmp	r3, #5
 800ce10:	d03a      	beq.n	800ce88 <UART_SetConfig+0xd50>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce16:	2b06      	cmp	r3, #6
 800ce18:	d031      	beq.n	800ce7e <UART_SetConfig+0xd46>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1e:	2b07      	cmp	r3, #7
 800ce20:	d028      	beq.n	800ce74 <UART_SetConfig+0xd3c>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce26:	2b08      	cmp	r3, #8
 800ce28:	d01f      	beq.n	800ce6a <UART_SetConfig+0xd32>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce2e:	2b09      	cmp	r3, #9
 800ce30:	d016      	beq.n	800ce60 <UART_SetConfig+0xd28>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce36:	2b0a      	cmp	r3, #10
 800ce38:	d00d      	beq.n	800ce56 <UART_SetConfig+0xd1e>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3e:	2b0b      	cmp	r3, #11
 800ce40:	d104      	bne.n	800ce4c <UART_SetConfig+0xd14>
 800ce42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce46:	f04f 0400 	mov.w	r4, #0
 800ce4a:	e03a      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ce4c:	f04f 0301 	mov.w	r3, #1
 800ce50:	f04f 0400 	mov.w	r4, #0
 800ce54:	e035      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ce56:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ce5a:	f04f 0400 	mov.w	r4, #0
 800ce5e:	e030      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ce60:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ce64:	f04f 0400 	mov.w	r4, #0
 800ce68:	e02b      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ce6a:	f04f 0320 	mov.w	r3, #32
 800ce6e:	f04f 0400 	mov.w	r4, #0
 800ce72:	e026      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ce74:	f04f 0310 	mov.w	r3, #16
 800ce78:	f04f 0400 	mov.w	r4, #0
 800ce7c:	e021      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ce7e:	f04f 030c 	mov.w	r3, #12
 800ce82:	f04f 0400 	mov.w	r4, #0
 800ce86:	e01c      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ce88:	f04f 030a 	mov.w	r3, #10
 800ce8c:	f04f 0400 	mov.w	r4, #0
 800ce90:	e017      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ce92:	f04f 0308 	mov.w	r3, #8
 800ce96:	f04f 0400 	mov.w	r4, #0
 800ce9a:	e012      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ce9c:	f04f 0306 	mov.w	r3, #6
 800cea0:	f04f 0400 	mov.w	r4, #0
 800cea4:	e00d      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800cea6:	f04f 0304 	mov.w	r3, #4
 800ceaa:	f04f 0400 	mov.w	r4, #0
 800ceae:	e008      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ceb0:	f04f 0302 	mov.w	r3, #2
 800ceb4:	f04f 0400 	mov.w	r4, #0
 800ceb8:	e003      	b.n	800cec2 <UART_SetConfig+0xd8a>
 800ceba:	f04f 0301 	mov.w	r3, #1
 800cebe:	f04f 0400 	mov.w	r4, #0
 800cec2:	461a      	mov	r2, r3
 800cec4:	4623      	mov	r3, r4
 800cec6:	f7f3 fa07 	bl	80002d8 <__aeabi_uldivmod>
 800ceca:	4603      	mov	r3, r0
 800cecc:	460c      	mov	r4, r1
 800cece:	4619      	mov	r1, r3
 800ced0:	4622      	mov	r2, r4
 800ced2:	f04f 0300 	mov.w	r3, #0
 800ced6:	f04f 0400 	mov.w	r4, #0
 800ceda:	0214      	lsls	r4, r2, #8
 800cedc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cee0:	020b      	lsls	r3, r1, #8
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	6852      	ldr	r2, [r2, #4]
 800cee6:	0852      	lsrs	r2, r2, #1
 800cee8:	4611      	mov	r1, r2
 800ceea:	f04f 0200 	mov.w	r2, #0
 800ceee:	eb13 0b01 	adds.w	fp, r3, r1
 800cef2:	eb44 0c02 	adc.w	ip, r4, r2
 800cef6:	4658      	mov	r0, fp
 800cef8:	4661      	mov	r1, ip
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	f04f 0400 	mov.w	r4, #0
 800cf02:	461a      	mov	r2, r3
 800cf04:	4623      	mov	r3, r4
 800cf06:	f7f3 f9e7 	bl	80002d8 <__aeabi_uldivmod>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	460c      	mov	r4, r1
 800cf0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf10:	e2e8      	b.n	800d4e4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf12:	f107 030c 	add.w	r3, r7, #12
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fc fe8c 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f04f 0100 	mov.w	r1, #0
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d067      	beq.n	800cffc <UART_SetConfig+0xec4>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d05e      	beq.n	800cff2 <UART_SetConfig+0xeba>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d055      	beq.n	800cfe8 <UART_SetConfig+0xeb0>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf40:	2b03      	cmp	r3, #3
 800cf42:	d04c      	beq.n	800cfde <UART_SetConfig+0xea6>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf48:	2b04      	cmp	r3, #4
 800cf4a:	d043      	beq.n	800cfd4 <UART_SetConfig+0xe9c>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf50:	2b05      	cmp	r3, #5
 800cf52:	d03a      	beq.n	800cfca <UART_SetConfig+0xe92>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf58:	2b06      	cmp	r3, #6
 800cf5a:	d031      	beq.n	800cfc0 <UART_SetConfig+0xe88>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf60:	2b07      	cmp	r3, #7
 800cf62:	d028      	beq.n	800cfb6 <UART_SetConfig+0xe7e>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf68:	2b08      	cmp	r3, #8
 800cf6a:	d01f      	beq.n	800cfac <UART_SetConfig+0xe74>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf70:	2b09      	cmp	r3, #9
 800cf72:	d016      	beq.n	800cfa2 <UART_SetConfig+0xe6a>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf78:	2b0a      	cmp	r3, #10
 800cf7a:	d00d      	beq.n	800cf98 <UART_SetConfig+0xe60>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf80:	2b0b      	cmp	r3, #11
 800cf82:	d104      	bne.n	800cf8e <UART_SetConfig+0xe56>
 800cf84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf88:	f04f 0400 	mov.w	r4, #0
 800cf8c:	e03a      	b.n	800d004 <UART_SetConfig+0xecc>
 800cf8e:	f04f 0301 	mov.w	r3, #1
 800cf92:	f04f 0400 	mov.w	r4, #0
 800cf96:	e035      	b.n	800d004 <UART_SetConfig+0xecc>
 800cf98:	f04f 0380 	mov.w	r3, #128	; 0x80
 800cf9c:	f04f 0400 	mov.w	r4, #0
 800cfa0:	e030      	b.n	800d004 <UART_SetConfig+0xecc>
 800cfa2:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cfa6:	f04f 0400 	mov.w	r4, #0
 800cfaa:	e02b      	b.n	800d004 <UART_SetConfig+0xecc>
 800cfac:	f04f 0320 	mov.w	r3, #32
 800cfb0:	f04f 0400 	mov.w	r4, #0
 800cfb4:	e026      	b.n	800d004 <UART_SetConfig+0xecc>
 800cfb6:	f04f 0310 	mov.w	r3, #16
 800cfba:	f04f 0400 	mov.w	r4, #0
 800cfbe:	e021      	b.n	800d004 <UART_SetConfig+0xecc>
 800cfc0:	f04f 030c 	mov.w	r3, #12
 800cfc4:	f04f 0400 	mov.w	r4, #0
 800cfc8:	e01c      	b.n	800d004 <UART_SetConfig+0xecc>
 800cfca:	f04f 030a 	mov.w	r3, #10
 800cfce:	f04f 0400 	mov.w	r4, #0
 800cfd2:	e017      	b.n	800d004 <UART_SetConfig+0xecc>
 800cfd4:	f04f 0308 	mov.w	r3, #8
 800cfd8:	f04f 0400 	mov.w	r4, #0
 800cfdc:	e012      	b.n	800d004 <UART_SetConfig+0xecc>
 800cfde:	f04f 0306 	mov.w	r3, #6
 800cfe2:	f04f 0400 	mov.w	r4, #0
 800cfe6:	e00d      	b.n	800d004 <UART_SetConfig+0xecc>
 800cfe8:	f04f 0304 	mov.w	r3, #4
 800cfec:	f04f 0400 	mov.w	r4, #0
 800cff0:	e008      	b.n	800d004 <UART_SetConfig+0xecc>
 800cff2:	f04f 0302 	mov.w	r3, #2
 800cff6:	f04f 0400 	mov.w	r4, #0
 800cffa:	e003      	b.n	800d004 <UART_SetConfig+0xecc>
 800cffc:	f04f 0301 	mov.w	r3, #1
 800d000:	f04f 0400 	mov.w	r4, #0
 800d004:	461a      	mov	r2, r3
 800d006:	4623      	mov	r3, r4
 800d008:	f7f3 f966 	bl	80002d8 <__aeabi_uldivmod>
 800d00c:	4603      	mov	r3, r0
 800d00e:	460c      	mov	r4, r1
 800d010:	4619      	mov	r1, r3
 800d012:	4622      	mov	r2, r4
 800d014:	f04f 0300 	mov.w	r3, #0
 800d018:	f04f 0400 	mov.w	r4, #0
 800d01c:	0214      	lsls	r4, r2, #8
 800d01e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d022:	020b      	lsls	r3, r1, #8
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	6852      	ldr	r2, [r2, #4]
 800d028:	0852      	lsrs	r2, r2, #1
 800d02a:	4611      	mov	r1, r2
 800d02c:	f04f 0200 	mov.w	r2, #0
 800d030:	eb13 0b01 	adds.w	fp, r3, r1
 800d034:	eb44 0c02 	adc.w	ip, r4, r2
 800d038:	4658      	mov	r0, fp
 800d03a:	4661      	mov	r1, ip
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	f04f 0400 	mov.w	r4, #0
 800d044:	461a      	mov	r2, r3
 800d046:	4623      	mov	r3, r4
 800d048:	f7f3 f946 	bl	80002d8 <__aeabi_uldivmod>
 800d04c:	4603      	mov	r3, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d052:	e247      	b.n	800d4e4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d054:	4b96      	ldr	r3, [pc, #600]	; (800d2b0 <UART_SetConfig+0x1178>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f003 0320 	and.w	r3, r3, #32
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f000 80a3 	beq.w	800d1a8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d062:	4b93      	ldr	r3, [pc, #588]	; (800d2b0 <UART_SetConfig+0x1178>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	08db      	lsrs	r3, r3, #3
 800d068:	f003 0303 	and.w	r3, r3, #3
 800d06c:	4a91      	ldr	r2, [pc, #580]	; (800d2b4 <UART_SetConfig+0x117c>)
 800d06e:	fa22 f303 	lsr.w	r3, r2, r3
 800d072:	4618      	mov	r0, r3
 800d074:	f04f 0100 	mov.w	r1, #0
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d067      	beq.n	800d150 <UART_SetConfig+0x1018>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d084:	2b01      	cmp	r3, #1
 800d086:	d05e      	beq.n	800d146 <UART_SetConfig+0x100e>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	d055      	beq.n	800d13c <UART_SetConfig+0x1004>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d094:	2b03      	cmp	r3, #3
 800d096:	d04c      	beq.n	800d132 <UART_SetConfig+0xffa>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09c:	2b04      	cmp	r3, #4
 800d09e:	d043      	beq.n	800d128 <UART_SetConfig+0xff0>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a4:	2b05      	cmp	r3, #5
 800d0a6:	d03a      	beq.n	800d11e <UART_SetConfig+0xfe6>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ac:	2b06      	cmp	r3, #6
 800d0ae:	d031      	beq.n	800d114 <UART_SetConfig+0xfdc>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b4:	2b07      	cmp	r3, #7
 800d0b6:	d028      	beq.n	800d10a <UART_SetConfig+0xfd2>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0bc:	2b08      	cmp	r3, #8
 800d0be:	d01f      	beq.n	800d100 <UART_SetConfig+0xfc8>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c4:	2b09      	cmp	r3, #9
 800d0c6:	d016      	beq.n	800d0f6 <UART_SetConfig+0xfbe>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0cc:	2b0a      	cmp	r3, #10
 800d0ce:	d00d      	beq.n	800d0ec <UART_SetConfig+0xfb4>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d4:	2b0b      	cmp	r3, #11
 800d0d6:	d104      	bne.n	800d0e2 <UART_SetConfig+0xfaa>
 800d0d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0dc:	f04f 0400 	mov.w	r4, #0
 800d0e0:	e03a      	b.n	800d158 <UART_SetConfig+0x1020>
 800d0e2:	f04f 0301 	mov.w	r3, #1
 800d0e6:	f04f 0400 	mov.w	r4, #0
 800d0ea:	e035      	b.n	800d158 <UART_SetConfig+0x1020>
 800d0ec:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d0f0:	f04f 0400 	mov.w	r4, #0
 800d0f4:	e030      	b.n	800d158 <UART_SetConfig+0x1020>
 800d0f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d0fa:	f04f 0400 	mov.w	r4, #0
 800d0fe:	e02b      	b.n	800d158 <UART_SetConfig+0x1020>
 800d100:	f04f 0320 	mov.w	r3, #32
 800d104:	f04f 0400 	mov.w	r4, #0
 800d108:	e026      	b.n	800d158 <UART_SetConfig+0x1020>
 800d10a:	f04f 0310 	mov.w	r3, #16
 800d10e:	f04f 0400 	mov.w	r4, #0
 800d112:	e021      	b.n	800d158 <UART_SetConfig+0x1020>
 800d114:	f04f 030c 	mov.w	r3, #12
 800d118:	f04f 0400 	mov.w	r4, #0
 800d11c:	e01c      	b.n	800d158 <UART_SetConfig+0x1020>
 800d11e:	f04f 030a 	mov.w	r3, #10
 800d122:	f04f 0400 	mov.w	r4, #0
 800d126:	e017      	b.n	800d158 <UART_SetConfig+0x1020>
 800d128:	f04f 0308 	mov.w	r3, #8
 800d12c:	f04f 0400 	mov.w	r4, #0
 800d130:	e012      	b.n	800d158 <UART_SetConfig+0x1020>
 800d132:	f04f 0306 	mov.w	r3, #6
 800d136:	f04f 0400 	mov.w	r4, #0
 800d13a:	e00d      	b.n	800d158 <UART_SetConfig+0x1020>
 800d13c:	f04f 0304 	mov.w	r3, #4
 800d140:	f04f 0400 	mov.w	r4, #0
 800d144:	e008      	b.n	800d158 <UART_SetConfig+0x1020>
 800d146:	f04f 0302 	mov.w	r3, #2
 800d14a:	f04f 0400 	mov.w	r4, #0
 800d14e:	e003      	b.n	800d158 <UART_SetConfig+0x1020>
 800d150:	f04f 0301 	mov.w	r3, #1
 800d154:	f04f 0400 	mov.w	r4, #0
 800d158:	461a      	mov	r2, r3
 800d15a:	4623      	mov	r3, r4
 800d15c:	f7f3 f8bc 	bl	80002d8 <__aeabi_uldivmod>
 800d160:	4603      	mov	r3, r0
 800d162:	460c      	mov	r4, r1
 800d164:	4619      	mov	r1, r3
 800d166:	4622      	mov	r2, r4
 800d168:	f04f 0300 	mov.w	r3, #0
 800d16c:	f04f 0400 	mov.w	r4, #0
 800d170:	0214      	lsls	r4, r2, #8
 800d172:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d176:	020b      	lsls	r3, r1, #8
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	6852      	ldr	r2, [r2, #4]
 800d17c:	0852      	lsrs	r2, r2, #1
 800d17e:	4611      	mov	r1, r2
 800d180:	f04f 0200 	mov.w	r2, #0
 800d184:	eb13 0b01 	adds.w	fp, r3, r1
 800d188:	eb44 0c02 	adc.w	ip, r4, r2
 800d18c:	4658      	mov	r0, fp
 800d18e:	4661      	mov	r1, ip
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	f04f 0400 	mov.w	r4, #0
 800d198:	461a      	mov	r2, r3
 800d19a:	4623      	mov	r3, r4
 800d19c:	f7f3 f89c 	bl	80002d8 <__aeabi_uldivmod>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800d1a6:	e19d      	b.n	800d4e4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d05b      	beq.n	800d268 <UART_SetConfig+0x1130>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d053      	beq.n	800d260 <UART_SetConfig+0x1128>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d04b      	beq.n	800d258 <UART_SetConfig+0x1120>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c4:	2b03      	cmp	r3, #3
 800d1c6:	d043      	beq.n	800d250 <UART_SetConfig+0x1118>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1cc:	2b04      	cmp	r3, #4
 800d1ce:	d03b      	beq.n	800d248 <UART_SetConfig+0x1110>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d4:	2b05      	cmp	r3, #5
 800d1d6:	d033      	beq.n	800d240 <UART_SetConfig+0x1108>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1dc:	2b06      	cmp	r3, #6
 800d1de:	d02b      	beq.n	800d238 <UART_SetConfig+0x1100>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	2b07      	cmp	r3, #7
 800d1e6:	d023      	beq.n	800d230 <UART_SetConfig+0x10f8>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ec:	2b08      	cmp	r3, #8
 800d1ee:	d01b      	beq.n	800d228 <UART_SetConfig+0x10f0>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f4:	2b09      	cmp	r3, #9
 800d1f6:	d013      	beq.n	800d220 <UART_SetConfig+0x10e8>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fc:	2b0a      	cmp	r3, #10
 800d1fe:	d00b      	beq.n	800d218 <UART_SetConfig+0x10e0>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d204:	2b0b      	cmp	r3, #11
 800d206:	d103      	bne.n	800d210 <UART_SetConfig+0x10d8>
 800d208:	4b2a      	ldr	r3, [pc, #168]	; (800d2b4 <UART_SetConfig+0x117c>)
 800d20a:	f04f 0400 	mov.w	r4, #0
 800d20e:	e02e      	b.n	800d26e <UART_SetConfig+0x1136>
 800d210:	4b29      	ldr	r3, [pc, #164]	; (800d2b8 <UART_SetConfig+0x1180>)
 800d212:	f04f 0403 	mov.w	r4, #3
 800d216:	e02a      	b.n	800d26e <UART_SetConfig+0x1136>
 800d218:	4b28      	ldr	r3, [pc, #160]	; (800d2bc <UART_SetConfig+0x1184>)
 800d21a:	f04f 0400 	mov.w	r4, #0
 800d21e:	e026      	b.n	800d26e <UART_SetConfig+0x1136>
 800d220:	4b27      	ldr	r3, [pc, #156]	; (800d2c0 <UART_SetConfig+0x1188>)
 800d222:	f04f 0400 	mov.w	r4, #0
 800d226:	e022      	b.n	800d26e <UART_SetConfig+0x1136>
 800d228:	4b26      	ldr	r3, [pc, #152]	; (800d2c4 <UART_SetConfig+0x118c>)
 800d22a:	f04f 0400 	mov.w	r4, #0
 800d22e:	e01e      	b.n	800d26e <UART_SetConfig+0x1136>
 800d230:	4b25      	ldr	r3, [pc, #148]	; (800d2c8 <UART_SetConfig+0x1190>)
 800d232:	f04f 0400 	mov.w	r4, #0
 800d236:	e01a      	b.n	800d26e <UART_SetConfig+0x1136>
 800d238:	a419      	add	r4, pc, #100	; (adr r4, 800d2a0 <UART_SetConfig+0x1168>)
 800d23a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d23e:	e016      	b.n	800d26e <UART_SetConfig+0x1136>
 800d240:	4b22      	ldr	r3, [pc, #136]	; (800d2cc <UART_SetConfig+0x1194>)
 800d242:	f04f 0400 	mov.w	r4, #0
 800d246:	e012      	b.n	800d26e <UART_SetConfig+0x1136>
 800d248:	4b21      	ldr	r3, [pc, #132]	; (800d2d0 <UART_SetConfig+0x1198>)
 800d24a:	f04f 0400 	mov.w	r4, #0
 800d24e:	e00e      	b.n	800d26e <UART_SetConfig+0x1136>
 800d250:	a415      	add	r4, pc, #84	; (adr r4, 800d2a8 <UART_SetConfig+0x1170>)
 800d252:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d256:	e00a      	b.n	800d26e <UART_SetConfig+0x1136>
 800d258:	4b1e      	ldr	r3, [pc, #120]	; (800d2d4 <UART_SetConfig+0x119c>)
 800d25a:	f04f 0400 	mov.w	r4, #0
 800d25e:	e006      	b.n	800d26e <UART_SetConfig+0x1136>
 800d260:	4b1d      	ldr	r3, [pc, #116]	; (800d2d8 <UART_SetConfig+0x11a0>)
 800d262:	f04f 0401 	mov.w	r4, #1
 800d266:	e002      	b.n	800d26e <UART_SetConfig+0x1136>
 800d268:	4b13      	ldr	r3, [pc, #76]	; (800d2b8 <UART_SetConfig+0x1180>)
 800d26a:	f04f 0403 	mov.w	r4, #3
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	6852      	ldr	r2, [r2, #4]
 800d272:	0852      	lsrs	r2, r2, #1
 800d274:	4611      	mov	r1, r2
 800d276:	f04f 0200 	mov.w	r2, #0
 800d27a:	eb13 0b01 	adds.w	fp, r3, r1
 800d27e:	eb44 0c02 	adc.w	ip, r4, r2
 800d282:	4658      	mov	r0, fp
 800d284:	4661      	mov	r1, ip
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	f04f 0400 	mov.w	r4, #0
 800d28e:	461a      	mov	r2, r3
 800d290:	4623      	mov	r3, r4
 800d292:	f7f3 f821 	bl	80002d8 <__aeabi_uldivmod>
 800d296:	4603      	mov	r3, r0
 800d298:	460c      	mov	r4, r1
 800d29a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d29c:	e122      	b.n	800d4e4 <UART_SetConfig+0x13ac>
 800d29e:	bf00      	nop
 800d2a0:	51615500 	.word	0x51615500
 800d2a4:	00000000 	.word	0x00000000
 800d2a8:	a2c2aa00 	.word	0xa2c2aa00
 800d2ac:	00000000 	.word	0x00000000
 800d2b0:	58024400 	.word	0x58024400
 800d2b4:	03d09000 	.word	0x03d09000
 800d2b8:	d0900000 	.word	0xd0900000
 800d2bc:	07a12000 	.word	0x07a12000
 800d2c0:	0f424000 	.word	0x0f424000
 800d2c4:	1e848000 	.word	0x1e848000
 800d2c8:	3d090000 	.word	0x3d090000
 800d2cc:	61a80000 	.word	0x61a80000
 800d2d0:	7a120000 	.word	0x7a120000
 800d2d4:	f4240000 	.word	0xf4240000
 800d2d8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d05b      	beq.n	800d39c <UART_SetConfig+0x1264>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d053      	beq.n	800d394 <UART_SetConfig+0x125c>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	d04b      	beq.n	800d38c <UART_SetConfig+0x1254>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f8:	2b03      	cmp	r3, #3
 800d2fa:	d043      	beq.n	800d384 <UART_SetConfig+0x124c>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d300:	2b04      	cmp	r3, #4
 800d302:	d03b      	beq.n	800d37c <UART_SetConfig+0x1244>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d308:	2b05      	cmp	r3, #5
 800d30a:	d033      	beq.n	800d374 <UART_SetConfig+0x123c>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d310:	2b06      	cmp	r3, #6
 800d312:	d02b      	beq.n	800d36c <UART_SetConfig+0x1234>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d318:	2b07      	cmp	r3, #7
 800d31a:	d023      	beq.n	800d364 <UART_SetConfig+0x122c>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d320:	2b08      	cmp	r3, #8
 800d322:	d01b      	beq.n	800d35c <UART_SetConfig+0x1224>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d328:	2b09      	cmp	r3, #9
 800d32a:	d013      	beq.n	800d354 <UART_SetConfig+0x121c>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d330:	2b0a      	cmp	r3, #10
 800d332:	d00b      	beq.n	800d34c <UART_SetConfig+0x1214>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d338:	2b0b      	cmp	r3, #11
 800d33a:	d103      	bne.n	800d344 <UART_SetConfig+0x120c>
 800d33c:	4bc0      	ldr	r3, [pc, #768]	; (800d640 <UART_SetConfig+0x1508>)
 800d33e:	f04f 0400 	mov.w	r4, #0
 800d342:	e02e      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d344:	4bbf      	ldr	r3, [pc, #764]	; (800d644 <UART_SetConfig+0x150c>)
 800d346:	f04f 0400 	mov.w	r4, #0
 800d34a:	e02a      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d34c:	4bbe      	ldr	r3, [pc, #760]	; (800d648 <UART_SetConfig+0x1510>)
 800d34e:	f04f 0400 	mov.w	r4, #0
 800d352:	e026      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d354:	4bbd      	ldr	r3, [pc, #756]	; (800d64c <UART_SetConfig+0x1514>)
 800d356:	f04f 0400 	mov.w	r4, #0
 800d35a:	e022      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d35c:	4bbc      	ldr	r3, [pc, #752]	; (800d650 <UART_SetConfig+0x1518>)
 800d35e:	f04f 0400 	mov.w	r4, #0
 800d362:	e01e      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d364:	4bbb      	ldr	r3, [pc, #748]	; (800d654 <UART_SetConfig+0x151c>)
 800d366:	f04f 0400 	mov.w	r4, #0
 800d36a:	e01a      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d36c:	a4b0      	add	r4, pc, #704	; (adr r4, 800d630 <UART_SetConfig+0x14f8>)
 800d36e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d372:	e016      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d374:	4bb8      	ldr	r3, [pc, #736]	; (800d658 <UART_SetConfig+0x1520>)
 800d376:	f04f 0400 	mov.w	r4, #0
 800d37a:	e012      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d37c:	4bb7      	ldr	r3, [pc, #732]	; (800d65c <UART_SetConfig+0x1524>)
 800d37e:	f04f 0400 	mov.w	r4, #0
 800d382:	e00e      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d384:	a4ac      	add	r4, pc, #688	; (adr r4, 800d638 <UART_SetConfig+0x1500>)
 800d386:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d38a:	e00a      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d38c:	4bb4      	ldr	r3, [pc, #720]	; (800d660 <UART_SetConfig+0x1528>)
 800d38e:	f04f 0400 	mov.w	r4, #0
 800d392:	e006      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d394:	4bb3      	ldr	r3, [pc, #716]	; (800d664 <UART_SetConfig+0x152c>)
 800d396:	f04f 0400 	mov.w	r4, #0
 800d39a:	e002      	b.n	800d3a2 <UART_SetConfig+0x126a>
 800d39c:	4ba9      	ldr	r3, [pc, #676]	; (800d644 <UART_SetConfig+0x150c>)
 800d39e:	f04f 0400 	mov.w	r4, #0
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	6852      	ldr	r2, [r2, #4]
 800d3a6:	0852      	lsrs	r2, r2, #1
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	f04f 0200 	mov.w	r2, #0
 800d3ae:	eb13 0b01 	adds.w	fp, r3, r1
 800d3b2:	eb44 0c02 	adc.w	ip, r4, r2
 800d3b6:	4658      	mov	r0, fp
 800d3b8:	4661      	mov	r1, ip
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	f04f 0400 	mov.w	r4, #0
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	4623      	mov	r3, r4
 800d3c6:	f7f2 ff87 	bl	80002d8 <__aeabi_uldivmod>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	460c      	mov	r4, r1
 800d3ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d3d0:	e088      	b.n	800d4e4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d064      	beq.n	800d4a4 <UART_SetConfig+0x136c>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d05b      	beq.n	800d49a <UART_SetConfig+0x1362>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e6:	2b02      	cmp	r3, #2
 800d3e8:	d052      	beq.n	800d490 <UART_SetConfig+0x1358>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ee:	2b03      	cmp	r3, #3
 800d3f0:	d04a      	beq.n	800d488 <UART_SetConfig+0x1350>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f6:	2b04      	cmp	r3, #4
 800d3f8:	d041      	beq.n	800d47e <UART_SetConfig+0x1346>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fe:	2b05      	cmp	r3, #5
 800d400:	d039      	beq.n	800d476 <UART_SetConfig+0x133e>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d406:	2b06      	cmp	r3, #6
 800d408:	d031      	beq.n	800d46e <UART_SetConfig+0x1336>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40e:	2b07      	cmp	r3, #7
 800d410:	d028      	beq.n	800d464 <UART_SetConfig+0x132c>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d416:	2b08      	cmp	r3, #8
 800d418:	d01f      	beq.n	800d45a <UART_SetConfig+0x1322>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41e:	2b09      	cmp	r3, #9
 800d420:	d016      	beq.n	800d450 <UART_SetConfig+0x1318>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d426:	2b0a      	cmp	r3, #10
 800d428:	d00d      	beq.n	800d446 <UART_SetConfig+0x130e>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42e:	2b0b      	cmp	r3, #11
 800d430:	d104      	bne.n	800d43c <UART_SetConfig+0x1304>
 800d432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d436:	f04f 0400 	mov.w	r4, #0
 800d43a:	e037      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d43c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d440:	f04f 0400 	mov.w	r4, #0
 800d444:	e032      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d44a:	f04f 0400 	mov.w	r4, #0
 800d44e:	e02d      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d454:	f04f 0400 	mov.w	r4, #0
 800d458:	e028      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d45a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d45e:	f04f 0400 	mov.w	r4, #0
 800d462:	e023      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d464:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d468:	f04f 0400 	mov.w	r4, #0
 800d46c:	e01e      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d46e:	4b7e      	ldr	r3, [pc, #504]	; (800d668 <UART_SetConfig+0x1530>)
 800d470:	f04f 0400 	mov.w	r4, #0
 800d474:	e01a      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d476:	4b7d      	ldr	r3, [pc, #500]	; (800d66c <UART_SetConfig+0x1534>)
 800d478:	f04f 0400 	mov.w	r4, #0
 800d47c:	e016      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d47e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d482:	f04f 0400 	mov.w	r4, #0
 800d486:	e011      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d488:	4b79      	ldr	r3, [pc, #484]	; (800d670 <UART_SetConfig+0x1538>)
 800d48a:	f04f 0400 	mov.w	r4, #0
 800d48e:	e00d      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d490:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d494:	f04f 0400 	mov.w	r4, #0
 800d498:	e008      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d49a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d49e:	f04f 0400 	mov.w	r4, #0
 800d4a2:	e003      	b.n	800d4ac <UART_SetConfig+0x1374>
 800d4a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d4a8:	f04f 0400 	mov.w	r4, #0
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	6852      	ldr	r2, [r2, #4]
 800d4b0:	0852      	lsrs	r2, r2, #1
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	f04f 0200 	mov.w	r2, #0
 800d4b8:	eb13 0b01 	adds.w	fp, r3, r1
 800d4bc:	eb44 0c02 	adc.w	ip, r4, r2
 800d4c0:	4658      	mov	r0, fp
 800d4c2:	4661      	mov	r1, ip
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	f04f 0400 	mov.w	r4, #0
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	4623      	mov	r3, r4
 800d4d0:	f7f2 ff02 	bl	80002d8 <__aeabi_uldivmod>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d4da:	e003      	b.n	800d4e4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800d4e2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4ea:	d309      	bcc.n	800d500 <UART_SetConfig+0x13c8>
 800d4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4f2:	d205      	bcs.n	800d500 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4fa:	60da      	str	r2, [r3, #12]
 800d4fc:	f000 bf85 	b.w	800e40a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800d500:	2301      	movs	r3, #1
 800d502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d506:	f000 bf80 	b.w	800e40a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	69db      	ldr	r3, [r3, #28]
 800d50e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d512:	f040 83da 	bne.w	800dcca <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800d516:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d51a:	2b40      	cmp	r3, #64	; 0x40
 800d51c:	f200 83b3 	bhi.w	800dc86 <UART_SetConfig+0x1b4e>
 800d520:	a201      	add	r2, pc, #4	; (adr r2, 800d528 <UART_SetConfig+0x13f0>)
 800d522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d526:	bf00      	nop
 800d528:	0800d675 	.word	0x0800d675
 800d52c:	0800d72d 	.word	0x0800d72d
 800d530:	0800dc87 	.word	0x0800dc87
 800d534:	0800dc87 	.word	0x0800dc87
 800d538:	0800d7e5 	.word	0x0800d7e5
 800d53c:	0800dc87 	.word	0x0800dc87
 800d540:	0800dc87 	.word	0x0800dc87
 800d544:	0800dc87 	.word	0x0800dc87
 800d548:	0800d8a1 	.word	0x0800d8a1
 800d54c:	0800dc87 	.word	0x0800dc87
 800d550:	0800dc87 	.word	0x0800dc87
 800d554:	0800dc87 	.word	0x0800dc87
 800d558:	0800dc87 	.word	0x0800dc87
 800d55c:	0800dc87 	.word	0x0800dc87
 800d560:	0800dc87 	.word	0x0800dc87
 800d564:	0800dc87 	.word	0x0800dc87
 800d568:	0800d95d 	.word	0x0800d95d
 800d56c:	0800dc87 	.word	0x0800dc87
 800d570:	0800dc87 	.word	0x0800dc87
 800d574:	0800dc87 	.word	0x0800dc87
 800d578:	0800dc87 	.word	0x0800dc87
 800d57c:	0800dc87 	.word	0x0800dc87
 800d580:	0800dc87 	.word	0x0800dc87
 800d584:	0800dc87 	.word	0x0800dc87
 800d588:	0800dc87 	.word	0x0800dc87
 800d58c:	0800dc87 	.word	0x0800dc87
 800d590:	0800dc87 	.word	0x0800dc87
 800d594:	0800dc87 	.word	0x0800dc87
 800d598:	0800dc87 	.word	0x0800dc87
 800d59c:	0800dc87 	.word	0x0800dc87
 800d5a0:	0800dc87 	.word	0x0800dc87
 800d5a4:	0800dc87 	.word	0x0800dc87
 800d5a8:	0800dacf 	.word	0x0800dacf
 800d5ac:	0800dc87 	.word	0x0800dc87
 800d5b0:	0800dc87 	.word	0x0800dc87
 800d5b4:	0800dc87 	.word	0x0800dc87
 800d5b8:	0800dc87 	.word	0x0800dc87
 800d5bc:	0800dc87 	.word	0x0800dc87
 800d5c0:	0800dc87 	.word	0x0800dc87
 800d5c4:	0800dc87 	.word	0x0800dc87
 800d5c8:	0800dc87 	.word	0x0800dc87
 800d5cc:	0800dc87 	.word	0x0800dc87
 800d5d0:	0800dc87 	.word	0x0800dc87
 800d5d4:	0800dc87 	.word	0x0800dc87
 800d5d8:	0800dc87 	.word	0x0800dc87
 800d5dc:	0800dc87 	.word	0x0800dc87
 800d5e0:	0800dc87 	.word	0x0800dc87
 800d5e4:	0800dc87 	.word	0x0800dc87
 800d5e8:	0800dc87 	.word	0x0800dc87
 800d5ec:	0800dc87 	.word	0x0800dc87
 800d5f0:	0800dc87 	.word	0x0800dc87
 800d5f4:	0800dc87 	.word	0x0800dc87
 800d5f8:	0800dc87 	.word	0x0800dc87
 800d5fc:	0800dc87 	.word	0x0800dc87
 800d600:	0800dc87 	.word	0x0800dc87
 800d604:	0800dc87 	.word	0x0800dc87
 800d608:	0800dc87 	.word	0x0800dc87
 800d60c:	0800dc87 	.word	0x0800dc87
 800d610:	0800dc87 	.word	0x0800dc87
 800d614:	0800dc87 	.word	0x0800dc87
 800d618:	0800dc87 	.word	0x0800dc87
 800d61c:	0800dc87 	.word	0x0800dc87
 800d620:	0800dc87 	.word	0x0800dc87
 800d624:	0800dc87 	.word	0x0800dc87
 800d628:	0800dbc5 	.word	0x0800dbc5
 800d62c:	f3af 8000 	nop.w
 800d630:	05161500 	.word	0x05161500
 800d634:	00000000 	.word	0x00000000
 800d638:	0a2c2a00 	.word	0x0a2c2a00
 800d63c:	00000000 	.word	0x00000000
 800d640:	003d0900 	.word	0x003d0900
 800d644:	3d090000 	.word	0x3d090000
 800d648:	007a1200 	.word	0x007a1200
 800d64c:	00f42400 	.word	0x00f42400
 800d650:	01e84800 	.word	0x01e84800
 800d654:	03d09000 	.word	0x03d09000
 800d658:	061a8000 	.word	0x061a8000
 800d65c:	07a12000 	.word	0x07a12000
 800d660:	0f424000 	.word	0x0f424000
 800d664:	1e848000 	.word	0x1e848000
 800d668:	000aaa00 	.word	0x000aaa00
 800d66c:	000ccc00 	.word	0x000ccc00
 800d670:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d674:	f7fa fffa 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 800d678:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d044      	beq.n	800d70c <UART_SetConfig+0x15d4>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d686:	2b01      	cmp	r3, #1
 800d688:	d03e      	beq.n	800d708 <UART_SetConfig+0x15d0>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d038      	beq.n	800d704 <UART_SetConfig+0x15cc>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d696:	2b03      	cmp	r3, #3
 800d698:	d032      	beq.n	800d700 <UART_SetConfig+0x15c8>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d69e:	2b04      	cmp	r3, #4
 800d6a0:	d02c      	beq.n	800d6fc <UART_SetConfig+0x15c4>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a6:	2b05      	cmp	r3, #5
 800d6a8:	d026      	beq.n	800d6f8 <UART_SetConfig+0x15c0>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ae:	2b06      	cmp	r3, #6
 800d6b0:	d020      	beq.n	800d6f4 <UART_SetConfig+0x15bc>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b6:	2b07      	cmp	r3, #7
 800d6b8:	d01a      	beq.n	800d6f0 <UART_SetConfig+0x15b8>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6be:	2b08      	cmp	r3, #8
 800d6c0:	d014      	beq.n	800d6ec <UART_SetConfig+0x15b4>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c6:	2b09      	cmp	r3, #9
 800d6c8:	d00e      	beq.n	800d6e8 <UART_SetConfig+0x15b0>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ce:	2b0a      	cmp	r3, #10
 800d6d0:	d008      	beq.n	800d6e4 <UART_SetConfig+0x15ac>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d6:	2b0b      	cmp	r3, #11
 800d6d8:	d102      	bne.n	800d6e0 <UART_SetConfig+0x15a8>
 800d6da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6de:	e016      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e014      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d6e4:	2380      	movs	r3, #128	; 0x80
 800d6e6:	e012      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d6e8:	2340      	movs	r3, #64	; 0x40
 800d6ea:	e010      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d6ec:	2320      	movs	r3, #32
 800d6ee:	e00e      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d6f0:	2310      	movs	r3, #16
 800d6f2:	e00c      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d6f4:	230c      	movs	r3, #12
 800d6f6:	e00a      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d6f8:	230a      	movs	r3, #10
 800d6fa:	e008      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d6fc:	2308      	movs	r3, #8
 800d6fe:	e006      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d700:	2306      	movs	r3, #6
 800d702:	e004      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d704:	2304      	movs	r3, #4
 800d706:	e002      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d708:	2302      	movs	r3, #2
 800d70a:	e000      	b.n	800d70e <UART_SetConfig+0x15d6>
 800d70c:	2301      	movs	r3, #1
 800d70e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d710:	fbb2 f3f3 	udiv	r3, r2, r3
 800d714:	005a      	lsls	r2, r3, #1
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	085b      	lsrs	r3, r3, #1
 800d71c:	441a      	add	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	fbb2 f3f3 	udiv	r3, r2, r3
 800d726:	b29b      	uxth	r3, r3
 800d728:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d72a:	e2b0      	b.n	800dc8e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d72c:	f7fa ffb4 	bl	8008698 <HAL_RCC_GetPCLK2Freq>
 800d730:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d736:	2b00      	cmp	r3, #0
 800d738:	d044      	beq.n	800d7c4 <UART_SetConfig+0x168c>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d03e      	beq.n	800d7c0 <UART_SetConfig+0x1688>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d746:	2b02      	cmp	r3, #2
 800d748:	d038      	beq.n	800d7bc <UART_SetConfig+0x1684>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74e:	2b03      	cmp	r3, #3
 800d750:	d032      	beq.n	800d7b8 <UART_SetConfig+0x1680>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d756:	2b04      	cmp	r3, #4
 800d758:	d02c      	beq.n	800d7b4 <UART_SetConfig+0x167c>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75e:	2b05      	cmp	r3, #5
 800d760:	d026      	beq.n	800d7b0 <UART_SetConfig+0x1678>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d766:	2b06      	cmp	r3, #6
 800d768:	d020      	beq.n	800d7ac <UART_SetConfig+0x1674>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76e:	2b07      	cmp	r3, #7
 800d770:	d01a      	beq.n	800d7a8 <UART_SetConfig+0x1670>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d776:	2b08      	cmp	r3, #8
 800d778:	d014      	beq.n	800d7a4 <UART_SetConfig+0x166c>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77e:	2b09      	cmp	r3, #9
 800d780:	d00e      	beq.n	800d7a0 <UART_SetConfig+0x1668>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d786:	2b0a      	cmp	r3, #10
 800d788:	d008      	beq.n	800d79c <UART_SetConfig+0x1664>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78e:	2b0b      	cmp	r3, #11
 800d790:	d102      	bne.n	800d798 <UART_SetConfig+0x1660>
 800d792:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d796:	e016      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d798:	2301      	movs	r3, #1
 800d79a:	e014      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d79c:	2380      	movs	r3, #128	; 0x80
 800d79e:	e012      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d7a0:	2340      	movs	r3, #64	; 0x40
 800d7a2:	e010      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d7a4:	2320      	movs	r3, #32
 800d7a6:	e00e      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d7a8:	2310      	movs	r3, #16
 800d7aa:	e00c      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d7ac:	230c      	movs	r3, #12
 800d7ae:	e00a      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d7b0:	230a      	movs	r3, #10
 800d7b2:	e008      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d7b4:	2308      	movs	r3, #8
 800d7b6:	e006      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d7b8:	2306      	movs	r3, #6
 800d7ba:	e004      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d7bc:	2304      	movs	r3, #4
 800d7be:	e002      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	e000      	b.n	800d7c6 <UART_SetConfig+0x168e>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7cc:	005a      	lsls	r2, r3, #1
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	085b      	lsrs	r3, r3, #1
 800d7d4:	441a      	add	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d7e2:	e254      	b.n	800dc8e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7e4:	f107 0318 	add.w	r3, r7, #24
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fc f8d7 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7ee:	69fa      	ldr	r2, [r7, #28]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d044      	beq.n	800d882 <UART_SetConfig+0x174a>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d03e      	beq.n	800d87e <UART_SetConfig+0x1746>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d804:	2b02      	cmp	r3, #2
 800d806:	d038      	beq.n	800d87a <UART_SetConfig+0x1742>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80c:	2b03      	cmp	r3, #3
 800d80e:	d032      	beq.n	800d876 <UART_SetConfig+0x173e>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d814:	2b04      	cmp	r3, #4
 800d816:	d02c      	beq.n	800d872 <UART_SetConfig+0x173a>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81c:	2b05      	cmp	r3, #5
 800d81e:	d026      	beq.n	800d86e <UART_SetConfig+0x1736>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d824:	2b06      	cmp	r3, #6
 800d826:	d020      	beq.n	800d86a <UART_SetConfig+0x1732>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82c:	2b07      	cmp	r3, #7
 800d82e:	d01a      	beq.n	800d866 <UART_SetConfig+0x172e>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d834:	2b08      	cmp	r3, #8
 800d836:	d014      	beq.n	800d862 <UART_SetConfig+0x172a>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83c:	2b09      	cmp	r3, #9
 800d83e:	d00e      	beq.n	800d85e <UART_SetConfig+0x1726>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d844:	2b0a      	cmp	r3, #10
 800d846:	d008      	beq.n	800d85a <UART_SetConfig+0x1722>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84c:	2b0b      	cmp	r3, #11
 800d84e:	d102      	bne.n	800d856 <UART_SetConfig+0x171e>
 800d850:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d854:	e016      	b.n	800d884 <UART_SetConfig+0x174c>
 800d856:	2301      	movs	r3, #1
 800d858:	e014      	b.n	800d884 <UART_SetConfig+0x174c>
 800d85a:	2380      	movs	r3, #128	; 0x80
 800d85c:	e012      	b.n	800d884 <UART_SetConfig+0x174c>
 800d85e:	2340      	movs	r3, #64	; 0x40
 800d860:	e010      	b.n	800d884 <UART_SetConfig+0x174c>
 800d862:	2320      	movs	r3, #32
 800d864:	e00e      	b.n	800d884 <UART_SetConfig+0x174c>
 800d866:	2310      	movs	r3, #16
 800d868:	e00c      	b.n	800d884 <UART_SetConfig+0x174c>
 800d86a:	230c      	movs	r3, #12
 800d86c:	e00a      	b.n	800d884 <UART_SetConfig+0x174c>
 800d86e:	230a      	movs	r3, #10
 800d870:	e008      	b.n	800d884 <UART_SetConfig+0x174c>
 800d872:	2308      	movs	r3, #8
 800d874:	e006      	b.n	800d884 <UART_SetConfig+0x174c>
 800d876:	2306      	movs	r3, #6
 800d878:	e004      	b.n	800d884 <UART_SetConfig+0x174c>
 800d87a:	2304      	movs	r3, #4
 800d87c:	e002      	b.n	800d884 <UART_SetConfig+0x174c>
 800d87e:	2302      	movs	r3, #2
 800d880:	e000      	b.n	800d884 <UART_SetConfig+0x174c>
 800d882:	2301      	movs	r3, #1
 800d884:	fbb2 f3f3 	udiv	r3, r2, r3
 800d888:	005a      	lsls	r2, r3, #1
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	085b      	lsrs	r3, r3, #1
 800d890:	441a      	add	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	fbb2 f3f3 	udiv	r3, r2, r3
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d89e:	e1f6      	b.n	800dc8e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8a0:	f107 030c 	add.w	r3, r7, #12
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fc f9c5 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8aa:	693a      	ldr	r2, [r7, #16]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d044      	beq.n	800d93e <UART_SetConfig+0x1806>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d03e      	beq.n	800d93a <UART_SetConfig+0x1802>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	d038      	beq.n	800d936 <UART_SetConfig+0x17fe>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	2b03      	cmp	r3, #3
 800d8ca:	d032      	beq.n	800d932 <UART_SetConfig+0x17fa>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d0:	2b04      	cmp	r3, #4
 800d8d2:	d02c      	beq.n	800d92e <UART_SetConfig+0x17f6>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d8:	2b05      	cmp	r3, #5
 800d8da:	d026      	beq.n	800d92a <UART_SetConfig+0x17f2>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e0:	2b06      	cmp	r3, #6
 800d8e2:	d020      	beq.n	800d926 <UART_SetConfig+0x17ee>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e8:	2b07      	cmp	r3, #7
 800d8ea:	d01a      	beq.n	800d922 <UART_SetConfig+0x17ea>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f0:	2b08      	cmp	r3, #8
 800d8f2:	d014      	beq.n	800d91e <UART_SetConfig+0x17e6>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f8:	2b09      	cmp	r3, #9
 800d8fa:	d00e      	beq.n	800d91a <UART_SetConfig+0x17e2>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d900:	2b0a      	cmp	r3, #10
 800d902:	d008      	beq.n	800d916 <UART_SetConfig+0x17de>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d908:	2b0b      	cmp	r3, #11
 800d90a:	d102      	bne.n	800d912 <UART_SetConfig+0x17da>
 800d90c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d910:	e016      	b.n	800d940 <UART_SetConfig+0x1808>
 800d912:	2301      	movs	r3, #1
 800d914:	e014      	b.n	800d940 <UART_SetConfig+0x1808>
 800d916:	2380      	movs	r3, #128	; 0x80
 800d918:	e012      	b.n	800d940 <UART_SetConfig+0x1808>
 800d91a:	2340      	movs	r3, #64	; 0x40
 800d91c:	e010      	b.n	800d940 <UART_SetConfig+0x1808>
 800d91e:	2320      	movs	r3, #32
 800d920:	e00e      	b.n	800d940 <UART_SetConfig+0x1808>
 800d922:	2310      	movs	r3, #16
 800d924:	e00c      	b.n	800d940 <UART_SetConfig+0x1808>
 800d926:	230c      	movs	r3, #12
 800d928:	e00a      	b.n	800d940 <UART_SetConfig+0x1808>
 800d92a:	230a      	movs	r3, #10
 800d92c:	e008      	b.n	800d940 <UART_SetConfig+0x1808>
 800d92e:	2308      	movs	r3, #8
 800d930:	e006      	b.n	800d940 <UART_SetConfig+0x1808>
 800d932:	2306      	movs	r3, #6
 800d934:	e004      	b.n	800d940 <UART_SetConfig+0x1808>
 800d936:	2304      	movs	r3, #4
 800d938:	e002      	b.n	800d940 <UART_SetConfig+0x1808>
 800d93a:	2302      	movs	r3, #2
 800d93c:	e000      	b.n	800d940 <UART_SetConfig+0x1808>
 800d93e:	2301      	movs	r3, #1
 800d940:	fbb2 f3f3 	udiv	r3, r2, r3
 800d944:	005a      	lsls	r2, r3, #1
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	085b      	lsrs	r3, r3, #1
 800d94c:	441a      	add	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	fbb2 f3f3 	udiv	r3, r2, r3
 800d956:	b29b      	uxth	r3, r3
 800d958:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d95a:	e198      	b.n	800dc8e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d95c:	4b87      	ldr	r3, [pc, #540]	; (800db7c <UART_SetConfig+0x1a44>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f003 0320 	and.w	r3, r3, #32
 800d964:	2b00      	cmp	r3, #0
 800d966:	d05e      	beq.n	800da26 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d968:	4b84      	ldr	r3, [pc, #528]	; (800db7c <UART_SetConfig+0x1a44>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	08db      	lsrs	r3, r3, #3
 800d96e:	f003 0303 	and.w	r3, r3, #3
 800d972:	4a83      	ldr	r2, [pc, #524]	; (800db80 <UART_SetConfig+0x1a48>)
 800d974:	40da      	lsrs	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d044      	beq.n	800da08 <UART_SetConfig+0x18d0>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d982:	2b01      	cmp	r3, #1
 800d984:	d03e      	beq.n	800da04 <UART_SetConfig+0x18cc>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	d038      	beq.n	800da00 <UART_SetConfig+0x18c8>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d992:	2b03      	cmp	r3, #3
 800d994:	d032      	beq.n	800d9fc <UART_SetConfig+0x18c4>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d99a:	2b04      	cmp	r3, #4
 800d99c:	d02c      	beq.n	800d9f8 <UART_SetConfig+0x18c0>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a2:	2b05      	cmp	r3, #5
 800d9a4:	d026      	beq.n	800d9f4 <UART_SetConfig+0x18bc>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9aa:	2b06      	cmp	r3, #6
 800d9ac:	d020      	beq.n	800d9f0 <UART_SetConfig+0x18b8>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b2:	2b07      	cmp	r3, #7
 800d9b4:	d01a      	beq.n	800d9ec <UART_SetConfig+0x18b4>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ba:	2b08      	cmp	r3, #8
 800d9bc:	d014      	beq.n	800d9e8 <UART_SetConfig+0x18b0>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c2:	2b09      	cmp	r3, #9
 800d9c4:	d00e      	beq.n	800d9e4 <UART_SetConfig+0x18ac>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ca:	2b0a      	cmp	r3, #10
 800d9cc:	d008      	beq.n	800d9e0 <UART_SetConfig+0x18a8>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d2:	2b0b      	cmp	r3, #11
 800d9d4:	d102      	bne.n	800d9dc <UART_SetConfig+0x18a4>
 800d9d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9da:	e016      	b.n	800da0a <UART_SetConfig+0x18d2>
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e014      	b.n	800da0a <UART_SetConfig+0x18d2>
 800d9e0:	2380      	movs	r3, #128	; 0x80
 800d9e2:	e012      	b.n	800da0a <UART_SetConfig+0x18d2>
 800d9e4:	2340      	movs	r3, #64	; 0x40
 800d9e6:	e010      	b.n	800da0a <UART_SetConfig+0x18d2>
 800d9e8:	2320      	movs	r3, #32
 800d9ea:	e00e      	b.n	800da0a <UART_SetConfig+0x18d2>
 800d9ec:	2310      	movs	r3, #16
 800d9ee:	e00c      	b.n	800da0a <UART_SetConfig+0x18d2>
 800d9f0:	230c      	movs	r3, #12
 800d9f2:	e00a      	b.n	800da0a <UART_SetConfig+0x18d2>
 800d9f4:	230a      	movs	r3, #10
 800d9f6:	e008      	b.n	800da0a <UART_SetConfig+0x18d2>
 800d9f8:	2308      	movs	r3, #8
 800d9fa:	e006      	b.n	800da0a <UART_SetConfig+0x18d2>
 800d9fc:	2306      	movs	r3, #6
 800d9fe:	e004      	b.n	800da0a <UART_SetConfig+0x18d2>
 800da00:	2304      	movs	r3, #4
 800da02:	e002      	b.n	800da0a <UART_SetConfig+0x18d2>
 800da04:	2302      	movs	r3, #2
 800da06:	e000      	b.n	800da0a <UART_SetConfig+0x18d2>
 800da08:	2301      	movs	r3, #1
 800da0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da0e:	005a      	lsls	r2, r3, #1
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	085b      	lsrs	r3, r3, #1
 800da16:	441a      	add	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da20:	b29b      	uxth	r3, r3
 800da22:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800da24:	e133      	b.n	800dc8e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d043      	beq.n	800dab6 <UART_SetConfig+0x197e>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da32:	2b01      	cmp	r3, #1
 800da34:	d03d      	beq.n	800dab2 <UART_SetConfig+0x197a>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d037      	beq.n	800daae <UART_SetConfig+0x1976>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da42:	2b03      	cmp	r3, #3
 800da44:	d031      	beq.n	800daaa <UART_SetConfig+0x1972>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4a:	2b04      	cmp	r3, #4
 800da4c:	d02b      	beq.n	800daa6 <UART_SetConfig+0x196e>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da52:	2b05      	cmp	r3, #5
 800da54:	d025      	beq.n	800daa2 <UART_SetConfig+0x196a>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5a:	2b06      	cmp	r3, #6
 800da5c:	d01f      	beq.n	800da9e <UART_SetConfig+0x1966>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da62:	2b07      	cmp	r3, #7
 800da64:	d019      	beq.n	800da9a <UART_SetConfig+0x1962>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6a:	2b08      	cmp	r3, #8
 800da6c:	d013      	beq.n	800da96 <UART_SetConfig+0x195e>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da72:	2b09      	cmp	r3, #9
 800da74:	d00d      	beq.n	800da92 <UART_SetConfig+0x195a>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7a:	2b0a      	cmp	r3, #10
 800da7c:	d007      	beq.n	800da8e <UART_SetConfig+0x1956>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da82:	2b0b      	cmp	r3, #11
 800da84:	d101      	bne.n	800da8a <UART_SetConfig+0x1952>
 800da86:	4b3f      	ldr	r3, [pc, #252]	; (800db84 <UART_SetConfig+0x1a4c>)
 800da88:	e016      	b.n	800dab8 <UART_SetConfig+0x1980>
 800da8a:	4b3f      	ldr	r3, [pc, #252]	; (800db88 <UART_SetConfig+0x1a50>)
 800da8c:	e014      	b.n	800dab8 <UART_SetConfig+0x1980>
 800da8e:	4b3f      	ldr	r3, [pc, #252]	; (800db8c <UART_SetConfig+0x1a54>)
 800da90:	e012      	b.n	800dab8 <UART_SetConfig+0x1980>
 800da92:	4b3f      	ldr	r3, [pc, #252]	; (800db90 <UART_SetConfig+0x1a58>)
 800da94:	e010      	b.n	800dab8 <UART_SetConfig+0x1980>
 800da96:	4b3f      	ldr	r3, [pc, #252]	; (800db94 <UART_SetConfig+0x1a5c>)
 800da98:	e00e      	b.n	800dab8 <UART_SetConfig+0x1980>
 800da9a:	4b3f      	ldr	r3, [pc, #252]	; (800db98 <UART_SetConfig+0x1a60>)
 800da9c:	e00c      	b.n	800dab8 <UART_SetConfig+0x1980>
 800da9e:	4b3f      	ldr	r3, [pc, #252]	; (800db9c <UART_SetConfig+0x1a64>)
 800daa0:	e00a      	b.n	800dab8 <UART_SetConfig+0x1980>
 800daa2:	4b3f      	ldr	r3, [pc, #252]	; (800dba0 <UART_SetConfig+0x1a68>)
 800daa4:	e008      	b.n	800dab8 <UART_SetConfig+0x1980>
 800daa6:	4b3f      	ldr	r3, [pc, #252]	; (800dba4 <UART_SetConfig+0x1a6c>)
 800daa8:	e006      	b.n	800dab8 <UART_SetConfig+0x1980>
 800daaa:	4b3f      	ldr	r3, [pc, #252]	; (800dba8 <UART_SetConfig+0x1a70>)
 800daac:	e004      	b.n	800dab8 <UART_SetConfig+0x1980>
 800daae:	4b3f      	ldr	r3, [pc, #252]	; (800dbac <UART_SetConfig+0x1a74>)
 800dab0:	e002      	b.n	800dab8 <UART_SetConfig+0x1980>
 800dab2:	4b33      	ldr	r3, [pc, #204]	; (800db80 <UART_SetConfig+0x1a48>)
 800dab4:	e000      	b.n	800dab8 <UART_SetConfig+0x1980>
 800dab6:	4b34      	ldr	r3, [pc, #208]	; (800db88 <UART_SetConfig+0x1a50>)
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	6852      	ldr	r2, [r2, #4]
 800dabc:	0852      	lsrs	r2, r2, #1
 800dabe:	441a      	add	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dac8:	b29b      	uxth	r3, r3
 800daca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dacc:	e0df      	b.n	800dc8e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d045      	beq.n	800db62 <UART_SetConfig+0x1a2a>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d03f      	beq.n	800db5e <UART_SetConfig+0x1a26>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d039      	beq.n	800db5a <UART_SetConfig+0x1a22>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daea:	2b03      	cmp	r3, #3
 800daec:	d033      	beq.n	800db56 <UART_SetConfig+0x1a1e>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf2:	2b04      	cmp	r3, #4
 800daf4:	d02d      	beq.n	800db52 <UART_SetConfig+0x1a1a>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafa:	2b05      	cmp	r3, #5
 800dafc:	d027      	beq.n	800db4e <UART_SetConfig+0x1a16>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db02:	2b06      	cmp	r3, #6
 800db04:	d021      	beq.n	800db4a <UART_SetConfig+0x1a12>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0a:	2b07      	cmp	r3, #7
 800db0c:	d01b      	beq.n	800db46 <UART_SetConfig+0x1a0e>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db12:	2b08      	cmp	r3, #8
 800db14:	d015      	beq.n	800db42 <UART_SetConfig+0x1a0a>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db1a:	2b09      	cmp	r3, #9
 800db1c:	d00f      	beq.n	800db3e <UART_SetConfig+0x1a06>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db22:	2b0a      	cmp	r3, #10
 800db24:	d008      	beq.n	800db38 <UART_SetConfig+0x1a00>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db2a:	2b0b      	cmp	r3, #11
 800db2c:	d102      	bne.n	800db34 <UART_SetConfig+0x19fc>
 800db2e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800db32:	e017      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db34:	4b18      	ldr	r3, [pc, #96]	; (800db98 <UART_SetConfig+0x1a60>)
 800db36:	e015      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db38:	f24f 4324 	movw	r3, #62500	; 0xf424
 800db3c:	e012      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db3e:	4b1c      	ldr	r3, [pc, #112]	; (800dbb0 <UART_SetConfig+0x1a78>)
 800db40:	e010      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db42:	4b1c      	ldr	r3, [pc, #112]	; (800dbb4 <UART_SetConfig+0x1a7c>)
 800db44:	e00e      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db46:	4b0f      	ldr	r3, [pc, #60]	; (800db84 <UART_SetConfig+0x1a4c>)
 800db48:	e00c      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db4a:	4b1b      	ldr	r3, [pc, #108]	; (800dbb8 <UART_SetConfig+0x1a80>)
 800db4c:	e00a      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db4e:	4b1b      	ldr	r3, [pc, #108]	; (800dbbc <UART_SetConfig+0x1a84>)
 800db50:	e008      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db52:	4b0e      	ldr	r3, [pc, #56]	; (800db8c <UART_SetConfig+0x1a54>)
 800db54:	e006      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db56:	4b1a      	ldr	r3, [pc, #104]	; (800dbc0 <UART_SetConfig+0x1a88>)
 800db58:	e004      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db5a:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <UART_SetConfig+0x1a58>)
 800db5c:	e002      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db5e:	4b0d      	ldr	r3, [pc, #52]	; (800db94 <UART_SetConfig+0x1a5c>)
 800db60:	e000      	b.n	800db64 <UART_SetConfig+0x1a2c>
 800db62:	4b0d      	ldr	r3, [pc, #52]	; (800db98 <UART_SetConfig+0x1a60>)
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	6852      	ldr	r2, [r2, #4]
 800db68:	0852      	lsrs	r2, r2, #1
 800db6a:	441a      	add	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	fbb2 f3f3 	udiv	r3, r2, r3
 800db74:	b29b      	uxth	r3, r3
 800db76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800db78:	e089      	b.n	800dc8e <UART_SetConfig+0x1b56>
 800db7a:	bf00      	nop
 800db7c:	58024400 	.word	0x58024400
 800db80:	03d09000 	.word	0x03d09000
 800db84:	0007a120 	.word	0x0007a120
 800db88:	07a12000 	.word	0x07a12000
 800db8c:	000f4240 	.word	0x000f4240
 800db90:	001e8480 	.word	0x001e8480
 800db94:	003d0900 	.word	0x003d0900
 800db98:	007a1200 	.word	0x007a1200
 800db9c:	00a2c2aa 	.word	0x00a2c2aa
 800dba0:	00c35000 	.word	0x00c35000
 800dba4:	00f42400 	.word	0x00f42400
 800dba8:	01458554 	.word	0x01458554
 800dbac:	01e84800 	.word	0x01e84800
 800dbb0:	0001e848 	.word	0x0001e848
 800dbb4:	0003d090 	.word	0x0003d090
 800dbb8:	000a2c2a 	.word	0x000a2c2a
 800dbbc:	000c3500 	.word	0x000c3500
 800dbc0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d04f      	beq.n	800dc6c <UART_SetConfig+0x1b34>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d048      	beq.n	800dc66 <UART_SetConfig+0x1b2e>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d041      	beq.n	800dc60 <UART_SetConfig+0x1b28>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe0:	2b03      	cmp	r3, #3
 800dbe2:	d03a      	beq.n	800dc5a <UART_SetConfig+0x1b22>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe8:	2b04      	cmp	r3, #4
 800dbea:	d033      	beq.n	800dc54 <UART_SetConfig+0x1b1c>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf0:	2b05      	cmp	r3, #5
 800dbf2:	d02c      	beq.n	800dc4e <UART_SetConfig+0x1b16>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf8:	2b06      	cmp	r3, #6
 800dbfa:	d025      	beq.n	800dc48 <UART_SetConfig+0x1b10>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc00:	2b07      	cmp	r3, #7
 800dc02:	d01e      	beq.n	800dc42 <UART_SetConfig+0x1b0a>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc08:	2b08      	cmp	r3, #8
 800dc0a:	d017      	beq.n	800dc3c <UART_SetConfig+0x1b04>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc10:	2b09      	cmp	r3, #9
 800dc12:	d010      	beq.n	800dc36 <UART_SetConfig+0x1afe>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc18:	2b0a      	cmp	r3, #10
 800dc1a:	d009      	beq.n	800dc30 <UART_SetConfig+0x1af8>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc20:	2b0b      	cmp	r3, #11
 800dc22:	d102      	bne.n	800dc2a <UART_SetConfig+0x1af2>
 800dc24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc28:	e022      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dc2e:	e01f      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc34:	e01c      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc3a:	e019      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc40:	e016      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc46:	e013      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc48:	f241 5354 	movw	r3, #5460	; 0x1554
 800dc4c:	e010      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc4e:	f641 1398 	movw	r3, #6552	; 0x1998
 800dc52:	e00d      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc58:	e00a      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc5a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800dc5e:	e007      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc64:	e004      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc6a:	e001      	b.n	800dc70 <UART_SetConfig+0x1b38>
 800dc6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	6852      	ldr	r2, [r2, #4]
 800dc74:	0852      	lsrs	r2, r2, #1
 800dc76:	441a      	add	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dc84:	e003      	b.n	800dc8e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800dc8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc90:	2b0f      	cmp	r3, #15
 800dc92:	d916      	bls.n	800dcc2 <UART_SetConfig+0x1b8a>
 800dc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc9a:	d212      	bcs.n	800dcc2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	f023 030f 	bic.w	r3, r3, #15
 800dca4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca8:	085b      	lsrs	r3, r3, #1
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	f003 0307 	and.w	r3, r3, #7
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dcbe:	60da      	str	r2, [r3, #12]
 800dcc0:	e3a3      	b.n	800e40a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcc8:	e39f      	b.n	800e40a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800dcca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dcce:	2b40      	cmp	r3, #64	; 0x40
 800dcd0:	f200 8388 	bhi.w	800e3e4 <UART_SetConfig+0x22ac>
 800dcd4:	a201      	add	r2, pc, #4	; (adr r2, 800dcdc <UART_SetConfig+0x1ba4>)
 800dcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcda:	bf00      	nop
 800dcdc:	0800dde1 	.word	0x0800dde1
 800dce0:	0800de97 	.word	0x0800de97
 800dce4:	0800e3e5 	.word	0x0800e3e5
 800dce8:	0800e3e5 	.word	0x0800e3e5
 800dcec:	0800df4d 	.word	0x0800df4d
 800dcf0:	0800e3e5 	.word	0x0800e3e5
 800dcf4:	0800e3e5 	.word	0x0800e3e5
 800dcf8:	0800e3e5 	.word	0x0800e3e5
 800dcfc:	0800e007 	.word	0x0800e007
 800dd00:	0800e3e5 	.word	0x0800e3e5
 800dd04:	0800e3e5 	.word	0x0800e3e5
 800dd08:	0800e3e5 	.word	0x0800e3e5
 800dd0c:	0800e3e5 	.word	0x0800e3e5
 800dd10:	0800e3e5 	.word	0x0800e3e5
 800dd14:	0800e3e5 	.word	0x0800e3e5
 800dd18:	0800e3e5 	.word	0x0800e3e5
 800dd1c:	0800e0c1 	.word	0x0800e0c1
 800dd20:	0800e3e5 	.word	0x0800e3e5
 800dd24:	0800e3e5 	.word	0x0800e3e5
 800dd28:	0800e3e5 	.word	0x0800e3e5
 800dd2c:	0800e3e5 	.word	0x0800e3e5
 800dd30:	0800e3e5 	.word	0x0800e3e5
 800dd34:	0800e3e5 	.word	0x0800e3e5
 800dd38:	0800e3e5 	.word	0x0800e3e5
 800dd3c:	0800e3e5 	.word	0x0800e3e5
 800dd40:	0800e3e5 	.word	0x0800e3e5
 800dd44:	0800e3e5 	.word	0x0800e3e5
 800dd48:	0800e3e5 	.word	0x0800e3e5
 800dd4c:	0800e3e5 	.word	0x0800e3e5
 800dd50:	0800e3e5 	.word	0x0800e3e5
 800dd54:	0800e3e5 	.word	0x0800e3e5
 800dd58:	0800e3e5 	.word	0x0800e3e5
 800dd5c:	0800e231 	.word	0x0800e231
 800dd60:	0800e3e5 	.word	0x0800e3e5
 800dd64:	0800e3e5 	.word	0x0800e3e5
 800dd68:	0800e3e5 	.word	0x0800e3e5
 800dd6c:	0800e3e5 	.word	0x0800e3e5
 800dd70:	0800e3e5 	.word	0x0800e3e5
 800dd74:	0800e3e5 	.word	0x0800e3e5
 800dd78:	0800e3e5 	.word	0x0800e3e5
 800dd7c:	0800e3e5 	.word	0x0800e3e5
 800dd80:	0800e3e5 	.word	0x0800e3e5
 800dd84:	0800e3e5 	.word	0x0800e3e5
 800dd88:	0800e3e5 	.word	0x0800e3e5
 800dd8c:	0800e3e5 	.word	0x0800e3e5
 800dd90:	0800e3e5 	.word	0x0800e3e5
 800dd94:	0800e3e5 	.word	0x0800e3e5
 800dd98:	0800e3e5 	.word	0x0800e3e5
 800dd9c:	0800e3e5 	.word	0x0800e3e5
 800dda0:	0800e3e5 	.word	0x0800e3e5
 800dda4:	0800e3e5 	.word	0x0800e3e5
 800dda8:	0800e3e5 	.word	0x0800e3e5
 800ddac:	0800e3e5 	.word	0x0800e3e5
 800ddb0:	0800e3e5 	.word	0x0800e3e5
 800ddb4:	0800e3e5 	.word	0x0800e3e5
 800ddb8:	0800e3e5 	.word	0x0800e3e5
 800ddbc:	0800e3e5 	.word	0x0800e3e5
 800ddc0:	0800e3e5 	.word	0x0800e3e5
 800ddc4:	0800e3e5 	.word	0x0800e3e5
 800ddc8:	0800e3e5 	.word	0x0800e3e5
 800ddcc:	0800e3e5 	.word	0x0800e3e5
 800ddd0:	0800e3e5 	.word	0x0800e3e5
 800ddd4:	0800e3e5 	.word	0x0800e3e5
 800ddd8:	0800e3e5 	.word	0x0800e3e5
 800dddc:	0800e325 	.word	0x0800e325
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dde0:	f7fa fc44 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 800dde4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d044      	beq.n	800de78 <UART_SetConfig+0x1d40>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d03e      	beq.n	800de74 <UART_SetConfig+0x1d3c>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d038      	beq.n	800de70 <UART_SetConfig+0x1d38>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de02:	2b03      	cmp	r3, #3
 800de04:	d032      	beq.n	800de6c <UART_SetConfig+0x1d34>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de0a:	2b04      	cmp	r3, #4
 800de0c:	d02c      	beq.n	800de68 <UART_SetConfig+0x1d30>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de12:	2b05      	cmp	r3, #5
 800de14:	d026      	beq.n	800de64 <UART_SetConfig+0x1d2c>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1a:	2b06      	cmp	r3, #6
 800de1c:	d020      	beq.n	800de60 <UART_SetConfig+0x1d28>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de22:	2b07      	cmp	r3, #7
 800de24:	d01a      	beq.n	800de5c <UART_SetConfig+0x1d24>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2a:	2b08      	cmp	r3, #8
 800de2c:	d014      	beq.n	800de58 <UART_SetConfig+0x1d20>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de32:	2b09      	cmp	r3, #9
 800de34:	d00e      	beq.n	800de54 <UART_SetConfig+0x1d1c>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3a:	2b0a      	cmp	r3, #10
 800de3c:	d008      	beq.n	800de50 <UART_SetConfig+0x1d18>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de42:	2b0b      	cmp	r3, #11
 800de44:	d102      	bne.n	800de4c <UART_SetConfig+0x1d14>
 800de46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de4a:	e016      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de4c:	2301      	movs	r3, #1
 800de4e:	e014      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de50:	2380      	movs	r3, #128	; 0x80
 800de52:	e012      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de54:	2340      	movs	r3, #64	; 0x40
 800de56:	e010      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de58:	2320      	movs	r3, #32
 800de5a:	e00e      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de5c:	2310      	movs	r3, #16
 800de5e:	e00c      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de60:	230c      	movs	r3, #12
 800de62:	e00a      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de64:	230a      	movs	r3, #10
 800de66:	e008      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de68:	2308      	movs	r3, #8
 800de6a:	e006      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de6c:	2306      	movs	r3, #6
 800de6e:	e004      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de70:	2304      	movs	r3, #4
 800de72:	e002      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de74:	2302      	movs	r3, #2
 800de76:	e000      	b.n	800de7a <UART_SetConfig+0x1d42>
 800de78:	2301      	movs	r3, #1
 800de7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de7c:	fbb2 f2f3 	udiv	r2, r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	085b      	lsrs	r3, r3, #1
 800de86:	441a      	add	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800de90:	b29b      	uxth	r3, r3
 800de92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800de94:	e2aa      	b.n	800e3ec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de96:	f7fa fbff 	bl	8008698 <HAL_RCC_GetPCLK2Freq>
 800de9a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d044      	beq.n	800df2e <UART_SetConfig+0x1df6>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d03e      	beq.n	800df2a <UART_SetConfig+0x1df2>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb0:	2b02      	cmp	r3, #2
 800deb2:	d038      	beq.n	800df26 <UART_SetConfig+0x1dee>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb8:	2b03      	cmp	r3, #3
 800deba:	d032      	beq.n	800df22 <UART_SetConfig+0x1dea>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec0:	2b04      	cmp	r3, #4
 800dec2:	d02c      	beq.n	800df1e <UART_SetConfig+0x1de6>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec8:	2b05      	cmp	r3, #5
 800deca:	d026      	beq.n	800df1a <UART_SetConfig+0x1de2>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded0:	2b06      	cmp	r3, #6
 800ded2:	d020      	beq.n	800df16 <UART_SetConfig+0x1dde>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded8:	2b07      	cmp	r3, #7
 800deda:	d01a      	beq.n	800df12 <UART_SetConfig+0x1dda>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee0:	2b08      	cmp	r3, #8
 800dee2:	d014      	beq.n	800df0e <UART_SetConfig+0x1dd6>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee8:	2b09      	cmp	r3, #9
 800deea:	d00e      	beq.n	800df0a <UART_SetConfig+0x1dd2>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def0:	2b0a      	cmp	r3, #10
 800def2:	d008      	beq.n	800df06 <UART_SetConfig+0x1dce>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def8:	2b0b      	cmp	r3, #11
 800defa:	d102      	bne.n	800df02 <UART_SetConfig+0x1dca>
 800defc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df00:	e016      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df02:	2301      	movs	r3, #1
 800df04:	e014      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df06:	2380      	movs	r3, #128	; 0x80
 800df08:	e012      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df0a:	2340      	movs	r3, #64	; 0x40
 800df0c:	e010      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df0e:	2320      	movs	r3, #32
 800df10:	e00e      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df12:	2310      	movs	r3, #16
 800df14:	e00c      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df16:	230c      	movs	r3, #12
 800df18:	e00a      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df1a:	230a      	movs	r3, #10
 800df1c:	e008      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df1e:	2308      	movs	r3, #8
 800df20:	e006      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df22:	2306      	movs	r3, #6
 800df24:	e004      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df26:	2304      	movs	r3, #4
 800df28:	e002      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df2a:	2302      	movs	r3, #2
 800df2c:	e000      	b.n	800df30 <UART_SetConfig+0x1df8>
 800df2e:	2301      	movs	r3, #1
 800df30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df32:	fbb2 f2f3 	udiv	r2, r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	085b      	lsrs	r3, r3, #1
 800df3c:	441a      	add	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	fbb2 f3f3 	udiv	r3, r2, r3
 800df46:	b29b      	uxth	r3, r3
 800df48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800df4a:	e24f      	b.n	800e3ec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df4c:	f107 0318 	add.w	r3, r7, #24
 800df50:	4618      	mov	r0, r3
 800df52:	f7fb fd23 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df56:	69fa      	ldr	r2, [r7, #28]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d044      	beq.n	800dfea <UART_SetConfig+0x1eb2>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df64:	2b01      	cmp	r3, #1
 800df66:	d03e      	beq.n	800dfe6 <UART_SetConfig+0x1eae>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6c:	2b02      	cmp	r3, #2
 800df6e:	d038      	beq.n	800dfe2 <UART_SetConfig+0x1eaa>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df74:	2b03      	cmp	r3, #3
 800df76:	d032      	beq.n	800dfde <UART_SetConfig+0x1ea6>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7c:	2b04      	cmp	r3, #4
 800df7e:	d02c      	beq.n	800dfda <UART_SetConfig+0x1ea2>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df84:	2b05      	cmp	r3, #5
 800df86:	d026      	beq.n	800dfd6 <UART_SetConfig+0x1e9e>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8c:	2b06      	cmp	r3, #6
 800df8e:	d020      	beq.n	800dfd2 <UART_SetConfig+0x1e9a>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df94:	2b07      	cmp	r3, #7
 800df96:	d01a      	beq.n	800dfce <UART_SetConfig+0x1e96>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df9c:	2b08      	cmp	r3, #8
 800df9e:	d014      	beq.n	800dfca <UART_SetConfig+0x1e92>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa4:	2b09      	cmp	r3, #9
 800dfa6:	d00e      	beq.n	800dfc6 <UART_SetConfig+0x1e8e>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfac:	2b0a      	cmp	r3, #10
 800dfae:	d008      	beq.n	800dfc2 <UART_SetConfig+0x1e8a>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb4:	2b0b      	cmp	r3, #11
 800dfb6:	d102      	bne.n	800dfbe <UART_SetConfig+0x1e86>
 800dfb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfbc:	e016      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e014      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfc2:	2380      	movs	r3, #128	; 0x80
 800dfc4:	e012      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfc6:	2340      	movs	r3, #64	; 0x40
 800dfc8:	e010      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfca:	2320      	movs	r3, #32
 800dfcc:	e00e      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfce:	2310      	movs	r3, #16
 800dfd0:	e00c      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfd2:	230c      	movs	r3, #12
 800dfd4:	e00a      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfd6:	230a      	movs	r3, #10
 800dfd8:	e008      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfda:	2308      	movs	r3, #8
 800dfdc:	e006      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfde:	2306      	movs	r3, #6
 800dfe0:	e004      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfe2:	2304      	movs	r3, #4
 800dfe4:	e002      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	e000      	b.n	800dfec <UART_SetConfig+0x1eb4>
 800dfea:	2301      	movs	r3, #1
 800dfec:	fbb2 f2f3 	udiv	r2, r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	085b      	lsrs	r3, r3, #1
 800dff6:	441a      	add	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e000:	b29b      	uxth	r3, r3
 800e002:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e004:	e1f2      	b.n	800e3ec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e006:	f107 030c 	add.w	r3, r7, #12
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fb fe12 	bl	8009c34 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e010:	693a      	ldr	r2, [r7, #16]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e016:	2b00      	cmp	r3, #0
 800e018:	d044      	beq.n	800e0a4 <UART_SetConfig+0x1f6c>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d03e      	beq.n	800e0a0 <UART_SetConfig+0x1f68>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e026:	2b02      	cmp	r3, #2
 800e028:	d038      	beq.n	800e09c <UART_SetConfig+0x1f64>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d032      	beq.n	800e098 <UART_SetConfig+0x1f60>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e036:	2b04      	cmp	r3, #4
 800e038:	d02c      	beq.n	800e094 <UART_SetConfig+0x1f5c>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03e:	2b05      	cmp	r3, #5
 800e040:	d026      	beq.n	800e090 <UART_SetConfig+0x1f58>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	2b06      	cmp	r3, #6
 800e048:	d020      	beq.n	800e08c <UART_SetConfig+0x1f54>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04e:	2b07      	cmp	r3, #7
 800e050:	d01a      	beq.n	800e088 <UART_SetConfig+0x1f50>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e056:	2b08      	cmp	r3, #8
 800e058:	d014      	beq.n	800e084 <UART_SetConfig+0x1f4c>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05e:	2b09      	cmp	r3, #9
 800e060:	d00e      	beq.n	800e080 <UART_SetConfig+0x1f48>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e066:	2b0a      	cmp	r3, #10
 800e068:	d008      	beq.n	800e07c <UART_SetConfig+0x1f44>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06e:	2b0b      	cmp	r3, #11
 800e070:	d102      	bne.n	800e078 <UART_SetConfig+0x1f40>
 800e072:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e076:	e016      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e078:	2301      	movs	r3, #1
 800e07a:	e014      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e07c:	2380      	movs	r3, #128	; 0x80
 800e07e:	e012      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e080:	2340      	movs	r3, #64	; 0x40
 800e082:	e010      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e084:	2320      	movs	r3, #32
 800e086:	e00e      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e088:	2310      	movs	r3, #16
 800e08a:	e00c      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e08c:	230c      	movs	r3, #12
 800e08e:	e00a      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e090:	230a      	movs	r3, #10
 800e092:	e008      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e094:	2308      	movs	r3, #8
 800e096:	e006      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e098:	2306      	movs	r3, #6
 800e09a:	e004      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e09c:	2304      	movs	r3, #4
 800e09e:	e002      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	e000      	b.n	800e0a6 <UART_SetConfig+0x1f6e>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	fbb2 f2f3 	udiv	r2, r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	085b      	lsrs	r3, r3, #1
 800e0b0:	441a      	add	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e0be:	e195      	b.n	800e3ec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0c0:	4b87      	ldr	r3, [pc, #540]	; (800e2e0 <UART_SetConfig+0x21a8>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f003 0320 	and.w	r3, r3, #32
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d05d      	beq.n	800e188 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0cc:	4b84      	ldr	r3, [pc, #528]	; (800e2e0 <UART_SetConfig+0x21a8>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	08db      	lsrs	r3, r3, #3
 800e0d2:	f003 0303 	and.w	r3, r3, #3
 800e0d6:	4a83      	ldr	r2, [pc, #524]	; (800e2e4 <UART_SetConfig+0x21ac>)
 800e0d8:	40da      	lsrs	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d044      	beq.n	800e16c <UART_SetConfig+0x2034>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d03e      	beq.n	800e168 <UART_SetConfig+0x2030>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d038      	beq.n	800e164 <UART_SetConfig+0x202c>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d032      	beq.n	800e160 <UART_SetConfig+0x2028>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	2b04      	cmp	r3, #4
 800e100:	d02c      	beq.n	800e15c <UART_SetConfig+0x2024>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e106:	2b05      	cmp	r3, #5
 800e108:	d026      	beq.n	800e158 <UART_SetConfig+0x2020>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10e:	2b06      	cmp	r3, #6
 800e110:	d020      	beq.n	800e154 <UART_SetConfig+0x201c>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e116:	2b07      	cmp	r3, #7
 800e118:	d01a      	beq.n	800e150 <UART_SetConfig+0x2018>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11e:	2b08      	cmp	r3, #8
 800e120:	d014      	beq.n	800e14c <UART_SetConfig+0x2014>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e126:	2b09      	cmp	r3, #9
 800e128:	d00e      	beq.n	800e148 <UART_SetConfig+0x2010>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12e:	2b0a      	cmp	r3, #10
 800e130:	d008      	beq.n	800e144 <UART_SetConfig+0x200c>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e136:	2b0b      	cmp	r3, #11
 800e138:	d102      	bne.n	800e140 <UART_SetConfig+0x2008>
 800e13a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e13e:	e016      	b.n	800e16e <UART_SetConfig+0x2036>
 800e140:	2301      	movs	r3, #1
 800e142:	e014      	b.n	800e16e <UART_SetConfig+0x2036>
 800e144:	2380      	movs	r3, #128	; 0x80
 800e146:	e012      	b.n	800e16e <UART_SetConfig+0x2036>
 800e148:	2340      	movs	r3, #64	; 0x40
 800e14a:	e010      	b.n	800e16e <UART_SetConfig+0x2036>
 800e14c:	2320      	movs	r3, #32
 800e14e:	e00e      	b.n	800e16e <UART_SetConfig+0x2036>
 800e150:	2310      	movs	r3, #16
 800e152:	e00c      	b.n	800e16e <UART_SetConfig+0x2036>
 800e154:	230c      	movs	r3, #12
 800e156:	e00a      	b.n	800e16e <UART_SetConfig+0x2036>
 800e158:	230a      	movs	r3, #10
 800e15a:	e008      	b.n	800e16e <UART_SetConfig+0x2036>
 800e15c:	2308      	movs	r3, #8
 800e15e:	e006      	b.n	800e16e <UART_SetConfig+0x2036>
 800e160:	2306      	movs	r3, #6
 800e162:	e004      	b.n	800e16e <UART_SetConfig+0x2036>
 800e164:	2304      	movs	r3, #4
 800e166:	e002      	b.n	800e16e <UART_SetConfig+0x2036>
 800e168:	2302      	movs	r3, #2
 800e16a:	e000      	b.n	800e16e <UART_SetConfig+0x2036>
 800e16c:	2301      	movs	r3, #1
 800e16e:	fbb2 f2f3 	udiv	r2, r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	085b      	lsrs	r3, r3, #1
 800e178:	441a      	add	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e182:	b29b      	uxth	r3, r3
 800e184:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800e186:	e131      	b.n	800e3ec <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d043      	beq.n	800e218 <UART_SetConfig+0x20e0>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e194:	2b01      	cmp	r3, #1
 800e196:	d03d      	beq.n	800e214 <UART_SetConfig+0x20dc>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	d037      	beq.n	800e210 <UART_SetConfig+0x20d8>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a4:	2b03      	cmp	r3, #3
 800e1a6:	d031      	beq.n	800e20c <UART_SetConfig+0x20d4>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ac:	2b04      	cmp	r3, #4
 800e1ae:	d02b      	beq.n	800e208 <UART_SetConfig+0x20d0>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b4:	2b05      	cmp	r3, #5
 800e1b6:	d025      	beq.n	800e204 <UART_SetConfig+0x20cc>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1bc:	2b06      	cmp	r3, #6
 800e1be:	d01f      	beq.n	800e200 <UART_SetConfig+0x20c8>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c4:	2b07      	cmp	r3, #7
 800e1c6:	d019      	beq.n	800e1fc <UART_SetConfig+0x20c4>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1cc:	2b08      	cmp	r3, #8
 800e1ce:	d013      	beq.n	800e1f8 <UART_SetConfig+0x20c0>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d4:	2b09      	cmp	r3, #9
 800e1d6:	d00d      	beq.n	800e1f4 <UART_SetConfig+0x20bc>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1dc:	2b0a      	cmp	r3, #10
 800e1de:	d007      	beq.n	800e1f0 <UART_SetConfig+0x20b8>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e4:	2b0b      	cmp	r3, #11
 800e1e6:	d101      	bne.n	800e1ec <UART_SetConfig+0x20b4>
 800e1e8:	4b3f      	ldr	r3, [pc, #252]	; (800e2e8 <UART_SetConfig+0x21b0>)
 800e1ea:	e016      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e1ec:	4b3d      	ldr	r3, [pc, #244]	; (800e2e4 <UART_SetConfig+0x21ac>)
 800e1ee:	e014      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e1f0:	4b3e      	ldr	r3, [pc, #248]	; (800e2ec <UART_SetConfig+0x21b4>)
 800e1f2:	e012      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e1f4:	4b3e      	ldr	r3, [pc, #248]	; (800e2f0 <UART_SetConfig+0x21b8>)
 800e1f6:	e010      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e1f8:	4b3e      	ldr	r3, [pc, #248]	; (800e2f4 <UART_SetConfig+0x21bc>)
 800e1fa:	e00e      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e1fc:	4b3e      	ldr	r3, [pc, #248]	; (800e2f8 <UART_SetConfig+0x21c0>)
 800e1fe:	e00c      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e200:	4b3e      	ldr	r3, [pc, #248]	; (800e2fc <UART_SetConfig+0x21c4>)
 800e202:	e00a      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e204:	4b3e      	ldr	r3, [pc, #248]	; (800e300 <UART_SetConfig+0x21c8>)
 800e206:	e008      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e208:	4b3e      	ldr	r3, [pc, #248]	; (800e304 <UART_SetConfig+0x21cc>)
 800e20a:	e006      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e20c:	4b3e      	ldr	r3, [pc, #248]	; (800e308 <UART_SetConfig+0x21d0>)
 800e20e:	e004      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e210:	4b3e      	ldr	r3, [pc, #248]	; (800e30c <UART_SetConfig+0x21d4>)
 800e212:	e002      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e214:	4b3e      	ldr	r3, [pc, #248]	; (800e310 <UART_SetConfig+0x21d8>)
 800e216:	e000      	b.n	800e21a <UART_SetConfig+0x20e2>
 800e218:	4b32      	ldr	r3, [pc, #200]	; (800e2e4 <UART_SetConfig+0x21ac>)
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	6852      	ldr	r2, [r2, #4]
 800e21e:	0852      	lsrs	r2, r2, #1
 800e220:	441a      	add	r2, r3
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	fbb2 f3f3 	udiv	r3, r2, r3
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e22e:	e0dd      	b.n	800e3ec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e234:	2b00      	cmp	r3, #0
 800e236:	d046      	beq.n	800e2c6 <UART_SetConfig+0x218e>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d040      	beq.n	800e2c2 <UART_SetConfig+0x218a>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e244:	2b02      	cmp	r3, #2
 800e246:	d03a      	beq.n	800e2be <UART_SetConfig+0x2186>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24c:	2b03      	cmp	r3, #3
 800e24e:	d034      	beq.n	800e2ba <UART_SetConfig+0x2182>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e254:	2b04      	cmp	r3, #4
 800e256:	d02e      	beq.n	800e2b6 <UART_SetConfig+0x217e>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25c:	2b05      	cmp	r3, #5
 800e25e:	d028      	beq.n	800e2b2 <UART_SetConfig+0x217a>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e264:	2b06      	cmp	r3, #6
 800e266:	d022      	beq.n	800e2ae <UART_SetConfig+0x2176>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26c:	2b07      	cmp	r3, #7
 800e26e:	d01c      	beq.n	800e2aa <UART_SetConfig+0x2172>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e274:	2b08      	cmp	r3, #8
 800e276:	d016      	beq.n	800e2a6 <UART_SetConfig+0x216e>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27c:	2b09      	cmp	r3, #9
 800e27e:	d00f      	beq.n	800e2a0 <UART_SetConfig+0x2168>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e284:	2b0a      	cmp	r3, #10
 800e286:	d008      	beq.n	800e29a <UART_SetConfig+0x2162>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28c:	2b0b      	cmp	r3, #11
 800e28e:	d102      	bne.n	800e296 <UART_SetConfig+0x215e>
 800e290:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e294:	e018      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e296:	4b18      	ldr	r3, [pc, #96]	; (800e2f8 <UART_SetConfig+0x21c0>)
 800e298:	e016      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e29a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e29e:	e013      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e2a0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e2a4:	e010      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e2a6:	4b1b      	ldr	r3, [pc, #108]	; (800e314 <UART_SetConfig+0x21dc>)
 800e2a8:	e00e      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e2aa:	4b0f      	ldr	r3, [pc, #60]	; (800e2e8 <UART_SetConfig+0x21b0>)
 800e2ac:	e00c      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e2ae:	4b1a      	ldr	r3, [pc, #104]	; (800e318 <UART_SetConfig+0x21e0>)
 800e2b0:	e00a      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e2b2:	4b1a      	ldr	r3, [pc, #104]	; (800e31c <UART_SetConfig+0x21e4>)
 800e2b4:	e008      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e2b6:	4b0d      	ldr	r3, [pc, #52]	; (800e2ec <UART_SetConfig+0x21b4>)
 800e2b8:	e006      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e2ba:	4b19      	ldr	r3, [pc, #100]	; (800e320 <UART_SetConfig+0x21e8>)
 800e2bc:	e004      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e2be:	4b0c      	ldr	r3, [pc, #48]	; (800e2f0 <UART_SetConfig+0x21b8>)
 800e2c0:	e002      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e2c2:	4b0c      	ldr	r3, [pc, #48]	; (800e2f4 <UART_SetConfig+0x21bc>)
 800e2c4:	e000      	b.n	800e2c8 <UART_SetConfig+0x2190>
 800e2c6:	4b0c      	ldr	r3, [pc, #48]	; (800e2f8 <UART_SetConfig+0x21c0>)
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	6852      	ldr	r2, [r2, #4]
 800e2cc:	0852      	lsrs	r2, r2, #1
 800e2ce:	441a      	add	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e2dc:	e086      	b.n	800e3ec <UART_SetConfig+0x22b4>
 800e2de:	bf00      	nop
 800e2e0:	58024400 	.word	0x58024400
 800e2e4:	03d09000 	.word	0x03d09000
 800e2e8:	0003d090 	.word	0x0003d090
 800e2ec:	0007a120 	.word	0x0007a120
 800e2f0:	000f4240 	.word	0x000f4240
 800e2f4:	001e8480 	.word	0x001e8480
 800e2f8:	003d0900 	.word	0x003d0900
 800e2fc:	00516155 	.word	0x00516155
 800e300:	0061a800 	.word	0x0061a800
 800e304:	007a1200 	.word	0x007a1200
 800e308:	00a2c2aa 	.word	0x00a2c2aa
 800e30c:	00f42400 	.word	0x00f42400
 800e310:	01e84800 	.word	0x01e84800
 800e314:	0001e848 	.word	0x0001e848
 800e318:	00051615 	.word	0x00051615
 800e31c:	00061a80 	.word	0x00061a80
 800e320:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d04e      	beq.n	800e3ca <UART_SetConfig+0x2292>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e330:	2b01      	cmp	r3, #1
 800e332:	d047      	beq.n	800e3c4 <UART_SetConfig+0x228c>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e338:	2b02      	cmp	r3, #2
 800e33a:	d040      	beq.n	800e3be <UART_SetConfig+0x2286>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e340:	2b03      	cmp	r3, #3
 800e342:	d039      	beq.n	800e3b8 <UART_SetConfig+0x2280>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e348:	2b04      	cmp	r3, #4
 800e34a:	d032      	beq.n	800e3b2 <UART_SetConfig+0x227a>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e350:	2b05      	cmp	r3, #5
 800e352:	d02b      	beq.n	800e3ac <UART_SetConfig+0x2274>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e358:	2b06      	cmp	r3, #6
 800e35a:	d024      	beq.n	800e3a6 <UART_SetConfig+0x226e>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e360:	2b07      	cmp	r3, #7
 800e362:	d01d      	beq.n	800e3a0 <UART_SetConfig+0x2268>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e368:	2b08      	cmp	r3, #8
 800e36a:	d016      	beq.n	800e39a <UART_SetConfig+0x2262>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e370:	2b09      	cmp	r3, #9
 800e372:	d00f      	beq.n	800e394 <UART_SetConfig+0x225c>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e378:	2b0a      	cmp	r3, #10
 800e37a:	d008      	beq.n	800e38e <UART_SetConfig+0x2256>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e380:	2b0b      	cmp	r3, #11
 800e382:	d101      	bne.n	800e388 <UART_SetConfig+0x2250>
 800e384:	2380      	movs	r3, #128	; 0x80
 800e386:	e022      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e38c:	e01f      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e38e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e392:	e01c      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e394:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e398:	e019      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e39e:	e016      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e3a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3a4:	e013      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e3a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800e3aa:	e010      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e3ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 800e3b0:	e00d      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e3b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3b6:	e00a      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e3b8:	f241 5355 	movw	r3, #5461	; 0x1555
 800e3bc:	e007      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e3be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e3c2:	e004      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e3c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e3c8:	e001      	b.n	800e3ce <UART_SetConfig+0x2296>
 800e3ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	6852      	ldr	r2, [r2, #4]
 800e3d2:	0852      	lsrs	r2, r2, #1
 800e3d4:	441a      	add	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3e2:	e003      	b.n	800e3ec <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800e3ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ee:	2b0f      	cmp	r3, #15
 800e3f0:	d908      	bls.n	800e404 <UART_SetConfig+0x22cc>
 800e3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3f8:	d204      	bcs.n	800e404 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e400:	60da      	str	r2, [r3, #12]
 800e402:	e002      	b.n	800e40a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2201      	movs	r2, #1
 800e40e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2201      	movs	r2, #1
 800e416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800e426:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3740      	adds	r7, #64	; 0x40
 800e42e:	46bd      	mov	sp, r7
 800e430:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800e434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e440:	f003 0301 	and.w	r3, r3, #1
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00a      	beq.n	800e45e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	430a      	orrs	r2, r1
 800e45c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e462:	f003 0302 	and.w	r3, r3, #2
 800e466:	2b00      	cmp	r3, #0
 800e468:	d00a      	beq.n	800e480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	430a      	orrs	r2, r1
 800e47e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e484:	f003 0304 	and.w	r3, r3, #4
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00a      	beq.n	800e4a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	430a      	orrs	r2, r1
 800e4a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a6:	f003 0308 	and.w	r3, r3, #8
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00a      	beq.n	800e4c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	430a      	orrs	r2, r1
 800e4c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c8:	f003 0310 	and.w	r3, r3, #16
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00a      	beq.n	800e4e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	689b      	ldr	r3, [r3, #8]
 800e4d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	430a      	orrs	r2, r1
 800e4e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ea:	f003 0320 	and.w	r3, r3, #32
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00a      	beq.n	800e508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	430a      	orrs	r2, r1
 800e506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e510:	2b00      	cmp	r3, #0
 800e512:	d01a      	beq.n	800e54a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	430a      	orrs	r2, r1
 800e528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e52e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e532:	d10a      	bne.n	800e54a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	430a      	orrs	r2, r1
 800e548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00a      	beq.n	800e56c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	430a      	orrs	r2, r1
 800e56a:	605a      	str	r2, [r3, #4]
  }
}
 800e56c:	bf00      	nop
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b086      	sub	sp, #24
 800e57c:	af02      	add	r7, sp, #8
 800e57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e588:	f7f3 fa10 	bl	80019ac <HAL_GetTick>
 800e58c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f003 0308 	and.w	r3, r3, #8
 800e598:	2b08      	cmp	r3, #8
 800e59a:	d10e      	bne.n	800e5ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e59c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 f82c 	bl	800e608 <UART_WaitOnFlagUntilTimeout>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5b6:	2303      	movs	r3, #3
 800e5b8:	e022      	b.n	800e600 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 0304 	and.w	r3, r3, #4
 800e5c4:	2b04      	cmp	r3, #4
 800e5c6:	d10e      	bne.n	800e5e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 f816 	bl	800e608 <UART_WaitOnFlagUntilTimeout>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5e2:	2303      	movs	r3, #3
 800e5e4:	e00c      	b.n	800e600 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2220      	movs	r2, #32
 800e5ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2220      	movs	r2, #32
 800e5f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	603b      	str	r3, [r7, #0]
 800e614:	4613      	mov	r3, r2
 800e616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e618:	e062      	b.n	800e6e0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e620:	d05e      	beq.n	800e6e0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e622:	f7f3 f9c3 	bl	80019ac <HAL_GetTick>
 800e626:	4602      	mov	r2, r0
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	69ba      	ldr	r2, [r7, #24]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d302      	bcc.n	800e638 <UART_WaitOnFlagUntilTimeout+0x30>
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d11d      	bne.n	800e674 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e646:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	689a      	ldr	r2, [r3, #8]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f022 0201 	bic.w	r2, r2, #1
 800e656:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2220      	movs	r2, #32
 800e65c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2220      	movs	r2, #32
 800e664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2200      	movs	r2, #0
 800e66c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e670:	2303      	movs	r3, #3
 800e672:	e045      	b.n	800e700 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f003 0304 	and.w	r3, r3, #4
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d02e      	beq.n	800e6e0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	69db      	ldr	r3, [r3, #28]
 800e688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e68c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e690:	d126      	bne.n	800e6e0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e69a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e6aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	689a      	ldr	r2, [r3, #8]
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f022 0201 	bic.w	r2, r2, #1
 800e6ba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2220      	movs	r2, #32
 800e6c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2220      	movs	r2, #32
 800e6c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2220      	movs	r2, #32
 800e6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800e6dc:	2303      	movs	r3, #3
 800e6de:	e00f      	b.n	800e700 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	69da      	ldr	r2, [r3, #28]
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	bf0c      	ite	eq
 800e6f0:	2301      	moveq	r3, #1
 800e6f2:	2300      	movne	r3, #0
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d08d      	beq.n	800e61a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e716:	2b01      	cmp	r3, #1
 800e718:	d101      	bne.n	800e71e <HAL_UARTEx_DisableFifoMode+0x16>
 800e71a:	2302      	movs	r3, #2
 800e71c:	e027      	b.n	800e76e <HAL_UARTEx_DisableFifoMode+0x66>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2201      	movs	r2, #1
 800e722:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2224      	movs	r2, #36	; 0x24
 800e72a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f022 0201 	bic.w	r2, r2, #1
 800e744:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e74c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2220      	movs	r2, #32
 800e760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e76c:	2300      	movs	r3, #0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3714      	adds	r7, #20
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr

0800e77a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b084      	sub	sp, #16
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
 800e782:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d101      	bne.n	800e792 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e78e:	2302      	movs	r3, #2
 800e790:	e02d      	b.n	800e7ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2201      	movs	r2, #1
 800e796:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2224      	movs	r2, #36	; 0x24
 800e79e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f022 0201 	bic.w	r2, r2, #1
 800e7b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	683a      	ldr	r2, [r7, #0]
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 f850 	bl	800e874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2220      	movs	r2, #32
 800e7e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e7ec:	2300      	movs	r3, #0
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
 800e7fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e806:	2b01      	cmp	r3, #1
 800e808:	d101      	bne.n	800e80e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e80a:	2302      	movs	r3, #2
 800e80c:	e02d      	b.n	800e86a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2201      	movs	r2, #1
 800e812:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2224      	movs	r2, #36	; 0x24
 800e81a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f022 0201 	bic.w	r2, r2, #1
 800e834:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	689b      	ldr	r3, [r3, #8]
 800e83c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	683a      	ldr	r2, [r7, #0]
 800e846:	430a      	orrs	r2, r1
 800e848:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f812 	bl	800e874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2220      	movs	r2, #32
 800e85c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e874:	b480      	push	{r7}
 800e876:	b089      	sub	sp, #36	; 0x24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800e87c:	4a2f      	ldr	r2, [pc, #188]	; (800e93c <UARTEx_SetNbDataToProcess+0xc8>)
 800e87e:	f107 0314 	add.w	r3, r7, #20
 800e882:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e886:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800e88a:	4a2d      	ldr	r2, [pc, #180]	; (800e940 <UARTEx_SetNbDataToProcess+0xcc>)
 800e88c:	f107 030c 	add.w	r3, r7, #12
 800e890:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e894:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d108      	bne.n	800e8b2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e8b0:	e03d      	b.n	800e92e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e8b2:	2308      	movs	r3, #8
 800e8b4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e8b6:	2308      	movs	r3, #8
 800e8b8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	689b      	ldr	r3, [r3, #8]
 800e8c0:	0e5b      	lsrs	r3, r3, #25
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	f003 0307 	and.w	r3, r3, #7
 800e8c8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	0f5b      	lsrs	r3, r3, #29
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	f003 0307 	and.w	r3, r3, #7
 800e8d8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800e8da:	7fbb      	ldrb	r3, [r7, #30]
 800e8dc:	7f3a      	ldrb	r2, [r7, #28]
 800e8de:	f107 0120 	add.w	r1, r7, #32
 800e8e2:	440a      	add	r2, r1
 800e8e4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e8e8:	fb02 f303 	mul.w	r3, r2, r3
 800e8ec:	7f3a      	ldrb	r2, [r7, #28]
 800e8ee:	f107 0120 	add.w	r1, r7, #32
 800e8f2:	440a      	add	r2, r1
 800e8f4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e8f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800e904:	7ffb      	ldrb	r3, [r7, #31]
 800e906:	7f7a      	ldrb	r2, [r7, #29]
 800e908:	f107 0120 	add.w	r1, r7, #32
 800e90c:	440a      	add	r2, r1
 800e90e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e912:	fb02 f303 	mul.w	r3, r2, r3
 800e916:	7f7a      	ldrb	r2, [r7, #29]
 800e918:	f107 0120 	add.w	r1, r7, #32
 800e91c:	440a      	add	r2, r1
 800e91e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e922:	fb93 f3f2 	sdiv	r3, r3, r2
 800e926:	b29a      	uxth	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e92e:	bf00      	nop
 800e930:	3724      	adds	r7, #36	; 0x24
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	08014468 	.word	0x08014468
 800e940:	08014470 	.word	0x08014470

0800e944 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e944:	b084      	sub	sp, #16
 800e946:	b480      	push	{r7}
 800e948:	b085      	sub	sp, #20
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
 800e94e:	f107 001c 	add.w	r0, r7, #28
 800e952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e95a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800e95c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e95e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800e962:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e964:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800e966:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800e96a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	4313      	orrs	r3, r2
 800e970:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	4b07      	ldr	r3, [pc, #28]	; (800e994 <SDMMC_Init+0x50>)
 800e978:	4013      	ands	r3, r2
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	431a      	orrs	r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e982:	2300      	movs	r3, #0
}
 800e984:	4618      	mov	r0, r3
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	b004      	add	sp, #16
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop
 800e994:	ffc02c00 	.word	0xffc02c00

0800e998 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	370c      	adds	r7, #12
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e9b2:	b480      	push	{r7}
 800e9b4:	b083      	sub	sp, #12
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
 800e9ba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e9c6:	2300      	movs	r3, #0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f043 0203 	orr.w	r2, r3, #3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	370c      	adds	r7, #12
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr

0800e9f6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e9f6:	b480      	push	{r7}
 800e9f8:	b083      	sub	sp, #12
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f003 0303 	and.w	r3, r3, #3
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	370c      	adds	r7, #12
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr
	...

0800ea14 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ea32:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ea38:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ea3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	4313      	orrs	r3, r2
 800ea44:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	68da      	ldr	r2, [r3, #12]
 800ea4a:	4b06      	ldr	r3, [pc, #24]	; (800ea64 <SDMMC_SendCommand+0x50>)
 800ea4c:	4013      	ands	r3, r2
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	431a      	orrs	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3714      	adds	r7, #20
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr
 800ea64:	fffee0c0 	.word	0xfffee0c0

0800ea68 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	691b      	ldr	r3, [r3, #16]
 800ea74:	b2db      	uxtb	r3, r3
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	370c      	adds	r7, #12
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ea82:	b480      	push	{r7}
 800ea84:	b085      	sub	sp, #20
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
 800ea8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	3314      	adds	r3, #20
 800ea90:	461a      	mov	r2, r3
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	4413      	add	r3, r2
 800ea96:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3714      	adds	r7, #20
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b085      	sub	sp, #20
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eab2:	2300      	movs	r3, #0
 800eab4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	685a      	ldr	r2, [r3, #4]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eace:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ead4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800eada:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	4313      	orrs	r3, r2
 800eae0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	431a      	orrs	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800eaf2:	2300      	movs	r3, #0

}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3714      	adds	r7, #20
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b088      	sub	sp, #32
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800eb0e:	2310      	movs	r3, #16
 800eb10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb22:	f107 0308 	add.w	r3, r7, #8
 800eb26:	4619      	mov	r1, r3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7ff ff73 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800eb2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb32:	2110      	movs	r1, #16
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 faab 	bl	800f090 <SDMMC_GetCmdResp1>
 800eb3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb3c:	69fb      	ldr	r3, [r7, #28]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3720      	adds	r7, #32
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b088      	sub	sp, #32
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800eb54:	2311      	movs	r3, #17
 800eb56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb68:	f107 0308 	add.w	r3, r7, #8
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f7ff ff50 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800eb74:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb78:	2111      	movs	r1, #17
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 fa88 	bl	800f090 <SDMMC_GetCmdResp1>
 800eb80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb82:	69fb      	ldr	r3, [r7, #28]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3720      	adds	r7, #32
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b088      	sub	sp, #32
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800eb9a:	2312      	movs	r3, #18
 800eb9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eba4:	2300      	movs	r3, #0
 800eba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebae:	f107 0308 	add.w	r3, r7, #8
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7ff ff2d 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ebba:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebbe:	2112      	movs	r1, #18
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 fa65 	bl	800f090 <SDMMC_GetCmdResp1>
 800ebc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebc8:	69fb      	ldr	r3, [r7, #28]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3720      	adds	r7, #32
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b088      	sub	sp, #32
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
 800ebda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ebe0:	2318      	movs	r3, #24
 800ebe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebea:	2300      	movs	r3, #0
 800ebec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebf4:	f107 0308 	add.w	r3, r7, #8
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7ff ff0a 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ec00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec04:	2118      	movs	r1, #24
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 fa42 	bl	800f090 <SDMMC_GetCmdResp1>
 800ec0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec0e:	69fb      	ldr	r3, [r7, #28]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3720      	adds	r7, #32
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b088      	sub	sp, #32
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ec26:	2319      	movs	r3, #25
 800ec28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec30:	2300      	movs	r3, #0
 800ec32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec3a:	f107 0308 	add.w	r3, r7, #8
 800ec3e:	4619      	mov	r1, r3
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7ff fee7 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ec46:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec4a:	2119      	movs	r1, #25
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 fa1f 	bl	800f090 <SDMMC_GetCmdResp1>
 800ec52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec54:	69fb      	ldr	r3, [r7, #28]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3720      	adds	r7, #32
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
	...

0800ec60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b088      	sub	sp, #32
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ec6c:	230c      	movs	r3, #12
 800ec6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec76:	2300      	movs	r3, #0
 800ec78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec7e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec98:	f107 0308 	add.w	r3, r7, #8
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7ff feb8 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800eca4:	4a0b      	ldr	r2, [pc, #44]	; (800ecd4 <SDMMC_CmdStopTransfer+0x74>)
 800eca6:	210c      	movs	r1, #12
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 f9f1 	bl	800f090 <SDMMC_GetCmdResp1>
 800ecae:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ecc2:	d101      	bne.n	800ecc8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ecc8:	69fb      	ldr	r3, [r7, #28]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3720      	adds	r7, #32
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	05f5e100 	.word	0x05f5e100

0800ecd8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b08a      	sub	sp, #40	; 0x28
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ece8:	2307      	movs	r3, #7
 800ecea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecf0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecfa:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ecfc:	f107 0310 	add.w	r3, r7, #16
 800ed00:	4619      	mov	r1, r3
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f7ff fe86 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ed08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed0c:	2107      	movs	r1, #7
 800ed0e:	68f8      	ldr	r0, [r7, #12]
 800ed10:	f000 f9be 	bl	800f090 <SDMMC_GetCmdResp1>
 800ed14:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ed16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3728      	adds	r7, #40	; 0x28
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b088      	sub	sp, #32
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ed30:	2300      	movs	r3, #0
 800ed32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed34:	2300      	movs	r3, #0
 800ed36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed3e:	f107 0308 	add.w	r3, r7, #8
 800ed42:	4619      	mov	r1, r3
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7ff fe65 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f000 f976 	bl	800f03c <SDMMC_GetCmdError>
 800ed50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed52:	69fb      	ldr	r3, [r7, #28]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3720      	adds	r7, #32
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b088      	sub	sp, #32
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ed64:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ed68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ed6a:	2308      	movs	r3, #8
 800ed6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed74:	2300      	movs	r3, #0
 800ed76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed7e:	f107 0308 	add.w	r3, r7, #8
 800ed82:	4619      	mov	r1, r3
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7ff fe45 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f000 fb6a 	bl	800f464 <SDMMC_GetCmdResp7>
 800ed90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed92:	69fb      	ldr	r3, [r7, #28]
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3720      	adds	r7, #32
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b088      	sub	sp, #32
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800edaa:	2337      	movs	r3, #55	; 0x37
 800edac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edb4:	2300      	movs	r3, #0
 800edb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edbe:	f107 0308 	add.w	r3, r7, #8
 800edc2:	4619      	mov	r1, r3
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f7ff fe25 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800edca:	f241 3288 	movw	r2, #5000	; 0x1388
 800edce:	2137      	movs	r1, #55	; 0x37
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 f95d 	bl	800f090 <SDMMC_GetCmdResp1>
 800edd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edd8:	69fb      	ldr	r3, [r7, #28]
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3720      	adds	r7, #32
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b088      	sub	sp, #32
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
 800edea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800edf0:	2329      	movs	r3, #41	; 0x29
 800edf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edfa:	2300      	movs	r3, #0
 800edfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee04:	f107 0308 	add.w	r3, r7, #8
 800ee08:	4619      	mov	r1, r3
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f7ff fe02 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 fa75 	bl	800f300 <SDMMC_GetCmdResp3>
 800ee16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee18:	69fb      	ldr	r3, [r7, #28]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3720      	adds	r7, #32
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b088      	sub	sp, #32
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ee30:	2306      	movs	r3, #6
 800ee32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee44:	f107 0308 	add.w	r3, r7, #8
 800ee48:	4619      	mov	r1, r3
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7ff fde2 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ee50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee54:	2106      	movs	r1, #6
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f91a 	bl	800f090 <SDMMC_GetCmdResp1>
 800ee5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee5e:	69fb      	ldr	r3, [r7, #28]
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3720      	adds	r7, #32
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b088      	sub	sp, #32
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ee70:	2300      	movs	r3, #0
 800ee72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ee74:	2333      	movs	r3, #51	; 0x33
 800ee76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee88:	f107 0308 	add.w	r3, r7, #8
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f7ff fdc0 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ee94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee98:	2133      	movs	r1, #51	; 0x33
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f8f8 	bl	800f090 <SDMMC_GetCmdResp1>
 800eea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eea2:	69fb      	ldr	r3, [r7, #28]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3720      	adds	r7, #32
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b088      	sub	sp, #32
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800eeb8:	2302      	movs	r3, #2
 800eeba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800eebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800eec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eec2:	2300      	movs	r3, #0
 800eec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eeca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eecc:	f107 0308 	add.w	r3, r7, #8
 800eed0:	4619      	mov	r1, r3
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7ff fd9e 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 f9c9 	bl	800f270 <SDMMC_GetCmdResp2>
 800eede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eee0:	69fb      	ldr	r3, [r7, #28]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3720      	adds	r7, #32
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b088      	sub	sp, #32
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
 800eef2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800eef8:	2309      	movs	r3, #9
 800eefa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800eefc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ef00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef02:	2300      	movs	r3, #0
 800ef04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef0c:	f107 0308 	add.w	r3, r7, #8
 800ef10:	4619      	mov	r1, r3
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7ff fd7e 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 f9a9 	bl	800f270 <SDMMC_GetCmdResp2>
 800ef1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef20:	69fb      	ldr	r3, [r7, #28]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3720      	adds	r7, #32
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b088      	sub	sp, #32
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
 800ef32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ef34:	2300      	movs	r3, #0
 800ef36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ef38:	2303      	movs	r3, #3
 800ef3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef42:	2300      	movs	r3, #0
 800ef44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef4c:	f107 0308 	add.w	r3, r7, #8
 800ef50:	4619      	mov	r1, r3
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7ff fd5e 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ef58:	683a      	ldr	r2, [r7, #0]
 800ef5a:	2103      	movs	r1, #3
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 fa0b 	bl	800f378 <SDMMC_GetCmdResp6>
 800ef62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef64:	69fb      	ldr	r3, [r7, #28]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3720      	adds	r7, #32
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b088      	sub	sp, #32
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
 800ef76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ef7c:	230d      	movs	r3, #13
 800ef7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef86:	2300      	movs	r3, #0
 800ef88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef90:	f107 0308 	add.w	r3, r7, #8
 800ef94:	4619      	mov	r1, r3
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f7ff fd3c 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ef9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800efa0:	210d      	movs	r1, #13
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 f874 	bl	800f090 <SDMMC_GetCmdResp1>
 800efa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efaa:	69fb      	ldr	r3, [r7, #28]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3720      	adds	r7, #32
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b088      	sub	sp, #32
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800efbc:	2300      	movs	r3, #0
 800efbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800efc0:	230d      	movs	r3, #13
 800efc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efca:	2300      	movs	r3, #0
 800efcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efd4:	f107 0308 	add.w	r3, r7, #8
 800efd8:	4619      	mov	r1, r3
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7ff fd1a 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800efe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800efe4:	210d      	movs	r1, #13
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 f852 	bl	800f090 <SDMMC_GetCmdResp1>
 800efec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efee:	69fb      	ldr	r3, [r7, #28]
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3720      	adds	r7, #32
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b088      	sub	sp, #32
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800f000:	2300      	movs	r3, #0
 800f002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800f004:	230b      	movs	r3, #11
 800f006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f00c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f00e:	2300      	movs	r3, #0
 800f010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f016:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f018:	f107 0308 	add.w	r3, r7, #8
 800f01c:	4619      	mov	r1, r3
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f7ff fcf8 	bl	800ea14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800f024:	f241 3288 	movw	r2, #5000	; 0x1388
 800f028:	210b      	movs	r1, #11
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 f830 	bl	800f090 <SDMMC_GetCmdResp1>
 800f030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f032:	69fb      	ldr	r3, [r7, #28]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3720      	adds	r7, #32
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f03c:	b490      	push	{r4, r7}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f044:	4b0f      	ldr	r3, [pc, #60]	; (800f084 <SDMMC_GetCmdError+0x48>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a0f      	ldr	r2, [pc, #60]	; (800f088 <SDMMC_GetCmdError+0x4c>)
 800f04a:	fba2 2303 	umull	r2, r3, r2, r3
 800f04e:	0a5b      	lsrs	r3, r3, #9
 800f050:	f241 3288 	movw	r2, #5000	; 0x1388
 800f054:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f058:	4623      	mov	r3, r4
 800f05a:	1e5c      	subs	r4, r3, #1
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d102      	bne.n	800f066 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f064:	e009      	b.n	800f07a <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d0f2      	beq.n	800f058 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4a05      	ldr	r2, [pc, #20]	; (800f08c <SDMMC_GetCmdError+0x50>)
 800f076:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800f078:	2300      	movs	r3, #0
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3708      	adds	r7, #8
 800f07e:	46bd      	mov	sp, r7
 800f080:	bc90      	pop	{r4, r7}
 800f082:	4770      	bx	lr
 800f084:	24000000 	.word	0x24000000
 800f088:	10624dd3 	.word	0x10624dd3
 800f08c:	002000c5 	.word	0x002000c5

0800f090 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f090:	b590      	push	{r4, r7, lr}
 800f092:	b087      	sub	sp, #28
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	460b      	mov	r3, r1
 800f09a:	607a      	str	r2, [r7, #4]
 800f09c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f09e:	4b6f      	ldr	r3, [pc, #444]	; (800f25c <SDMMC_GetCmdResp1+0x1cc>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4a6f      	ldr	r2, [pc, #444]	; (800f260 <SDMMC_GetCmdResp1+0x1d0>)
 800f0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800f0a8:	0a5b      	lsrs	r3, r3, #9
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f0b0:	4623      	mov	r3, r4
 800f0b2:	1e5c      	subs	r4, r3, #1
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d102      	bne.n	800f0be <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f0bc:	e0c9      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0c2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800f0c4:	697a      	ldr	r2, [r7, #20]
 800f0c6:	4b67      	ldr	r3, [pc, #412]	; (800f264 <SDMMC_GetCmdResp1+0x1d4>)
 800f0c8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d0f0      	beq.n	800f0b0 <SDMMC_GetCmdResp1+0x20>
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1eb      	bne.n	800f0b0 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0dc:	f003 0304 	and.w	r3, r3, #4
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d004      	beq.n	800f0ee <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2204      	movs	r2, #4
 800f0e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f0ea:	2304      	movs	r3, #4
 800f0ec:	e0b1      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0f2:	f003 0301 	and.w	r3, r3, #1
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d004      	beq.n	800f104 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f100:	2301      	movs	r3, #1
 800f102:	e0a6      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	4a58      	ldr	r2, [pc, #352]	; (800f268 <SDMMC_GetCmdResp1+0x1d8>)
 800f108:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f7ff fcac 	bl	800ea68 <SDMMC_GetCommandResponse>
 800f110:	4603      	mov	r3, r0
 800f112:	461a      	mov	r2, r3
 800f114:	7afb      	ldrb	r3, [r7, #11]
 800f116:	4293      	cmp	r3, r2
 800f118:	d001      	beq.n	800f11e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f11a:	2301      	movs	r3, #1
 800f11c:	e099      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f11e:	2100      	movs	r1, #0
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f7ff fcae 	bl	800ea82 <SDMMC_GetResponse>
 800f126:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f128:	693a      	ldr	r2, [r7, #16]
 800f12a:	4b50      	ldr	r3, [pc, #320]	; (800f26c <SDMMC_GetCmdResp1+0x1dc>)
 800f12c:	4013      	ands	r3, r2
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d101      	bne.n	800f136 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800f132:	2300      	movs	r3, #0
 800f134:	e08d      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	da02      	bge.n	800f142 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f13c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f140:	e087      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d001      	beq.n	800f150 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f14c:	2340      	movs	r3, #64	; 0x40
 800f14e:	e080      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f15a:	2380      	movs	r3, #128	; 0x80
 800f15c:	e079      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f164:	2b00      	cmp	r3, #0
 800f166:	d002      	beq.n	800f16e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f16c:	e071      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f17c:	e069      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f184:	2b00      	cmp	r3, #0
 800f186:	d002      	beq.n	800f18e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f18c:	e061      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f194:	2b00      	cmp	r3, #0
 800f196:	d002      	beq.n	800f19e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f19c:	e059      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d002      	beq.n	800f1ae <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f1a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f1ac:	e051      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d002      	beq.n	800f1be <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f1b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f1bc:	e049      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d002      	beq.n	800f1ce <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f1c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f1cc:	e041      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800f1d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1dc:	e039      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d002      	beq.n	800f1ee <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f1e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f1ec:	e031      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d002      	beq.n	800f1fe <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f1f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f1fc:	e029      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f208:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f20c:	e021      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f214:	2b00      	cmp	r3, #0
 800f216:	d002      	beq.n	800f21e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f218:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f21c:	e019      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f224:	2b00      	cmp	r3, #0
 800f226:	d002      	beq.n	800f22e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f228:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f22c:	e011      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f234:	2b00      	cmp	r3, #0
 800f236:	d002      	beq.n	800f23e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f238:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f23c:	e009      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	f003 0308 	and.w	r3, r3, #8
 800f244:	2b00      	cmp	r3, #0
 800f246:	d002      	beq.n	800f24e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f248:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f24c:	e001      	b.n	800f252 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f24e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f252:	4618      	mov	r0, r3
 800f254:	371c      	adds	r7, #28
 800f256:	46bd      	mov	sp, r7
 800f258:	bd90      	pop	{r4, r7, pc}
 800f25a:	bf00      	nop
 800f25c:	24000000 	.word	0x24000000
 800f260:	10624dd3 	.word	0x10624dd3
 800f264:	00200045 	.word	0x00200045
 800f268:	002000c5 	.word	0x002000c5
 800f26c:	fdffe008 	.word	0xfdffe008

0800f270 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f270:	b490      	push	{r4, r7}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f278:	4b1e      	ldr	r3, [pc, #120]	; (800f2f4 <SDMMC_GetCmdResp2+0x84>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a1e      	ldr	r2, [pc, #120]	; (800f2f8 <SDMMC_GetCmdResp2+0x88>)
 800f27e:	fba2 2303 	umull	r2, r3, r2, r3
 800f282:	0a5b      	lsrs	r3, r3, #9
 800f284:	f241 3288 	movw	r2, #5000	; 0x1388
 800f288:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f28c:	4623      	mov	r3, r4
 800f28e:	1e5c      	subs	r4, r3, #1
 800f290:	2b00      	cmp	r3, #0
 800f292:	d102      	bne.n	800f29a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f298:	e026      	b.n	800f2e8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f29e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0f0      	beq.n	800f28c <SDMMC_GetCmdResp2+0x1c>
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d1eb      	bne.n	800f28c <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2b8:	f003 0304 	and.w	r3, r3, #4
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d004      	beq.n	800f2ca <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2204      	movs	r2, #4
 800f2c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f2c6:	2304      	movs	r3, #4
 800f2c8:	e00e      	b.n	800f2e8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ce:	f003 0301 	and.w	r3, r3, #1
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d004      	beq.n	800f2e0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2201      	movs	r2, #1
 800f2da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e003      	b.n	800f2e8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4a06      	ldr	r2, [pc, #24]	; (800f2fc <SDMMC_GetCmdResp2+0x8c>)
 800f2e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bc90      	pop	{r4, r7}
 800f2f0:	4770      	bx	lr
 800f2f2:	bf00      	nop
 800f2f4:	24000000 	.word	0x24000000
 800f2f8:	10624dd3 	.word	0x10624dd3
 800f2fc:	002000c5 	.word	0x002000c5

0800f300 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f300:	b490      	push	{r4, r7}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f308:	4b18      	ldr	r3, [pc, #96]	; (800f36c <SDMMC_GetCmdResp3+0x6c>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a18      	ldr	r2, [pc, #96]	; (800f370 <SDMMC_GetCmdResp3+0x70>)
 800f30e:	fba2 2303 	umull	r2, r3, r2, r3
 800f312:	0a5b      	lsrs	r3, r3, #9
 800f314:	f241 3288 	movw	r2, #5000	; 0x1388
 800f318:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f31c:	4623      	mov	r3, r4
 800f31e:	1e5c      	subs	r4, r3, #1
 800f320:	2b00      	cmp	r3, #0
 800f322:	d102      	bne.n	800f32a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f328:	e01b      	b.n	800f362 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f32e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f336:	2b00      	cmp	r3, #0
 800f338:	d0f0      	beq.n	800f31c <SDMMC_GetCmdResp3+0x1c>
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f340:	2b00      	cmp	r3, #0
 800f342:	d1eb      	bne.n	800f31c <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d004      	beq.n	800f35a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2204      	movs	r2, #4
 800f354:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f356:	2304      	movs	r3, #4
 800f358:	e003      	b.n	800f362 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4a05      	ldr	r2, [pc, #20]	; (800f374 <SDMMC_GetCmdResp3+0x74>)
 800f35e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f360:	2300      	movs	r3, #0
}
 800f362:	4618      	mov	r0, r3
 800f364:	3710      	adds	r7, #16
 800f366:	46bd      	mov	sp, r7
 800f368:	bc90      	pop	{r4, r7}
 800f36a:	4770      	bx	lr
 800f36c:	24000000 	.word	0x24000000
 800f370:	10624dd3 	.word	0x10624dd3
 800f374:	002000c5 	.word	0x002000c5

0800f378 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f378:	b590      	push	{r4, r7, lr}
 800f37a:	b087      	sub	sp, #28
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	460b      	mov	r3, r1
 800f382:	607a      	str	r2, [r7, #4]
 800f384:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f386:	4b34      	ldr	r3, [pc, #208]	; (800f458 <SDMMC_GetCmdResp6+0xe0>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4a34      	ldr	r2, [pc, #208]	; (800f45c <SDMMC_GetCmdResp6+0xe4>)
 800f38c:	fba2 2303 	umull	r2, r3, r2, r3
 800f390:	0a5b      	lsrs	r3, r3, #9
 800f392:	f241 3288 	movw	r2, #5000	; 0x1388
 800f396:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f39a:	4623      	mov	r3, r4
 800f39c:	1e5c      	subs	r4, r3, #1
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d102      	bne.n	800f3a8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f3a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f3a6:	e052      	b.n	800f44e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ac:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0f0      	beq.n	800f39a <SDMMC_GetCmdResp6+0x22>
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d1eb      	bne.n	800f39a <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3c6:	f003 0304 	and.w	r3, r3, #4
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d004      	beq.n	800f3d8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2204      	movs	r2, #4
 800f3d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3d4:	2304      	movs	r3, #4
 800f3d6:	e03a      	b.n	800f44e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3dc:	f003 0301 	and.w	r3, r3, #1
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d004      	beq.n	800f3ee <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e02f      	b.n	800f44e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f3ee:	68f8      	ldr	r0, [r7, #12]
 800f3f0:	f7ff fb3a 	bl	800ea68 <SDMMC_GetCommandResponse>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	7afb      	ldrb	r3, [r7, #11]
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d001      	beq.n	800f402 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3fe:	2301      	movs	r3, #1
 800f400:	e025      	b.n	800f44e <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	4a16      	ldr	r2, [pc, #88]	; (800f460 <SDMMC_GetCmdResp6+0xe8>)
 800f406:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f408:	2100      	movs	r1, #0
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f7ff fb39 	bl	800ea82 <SDMMC_GetResponse>
 800f410:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d106      	bne.n	800f42a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	0c1b      	lsrs	r3, r3, #16
 800f420:	b29a      	uxth	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f426:	2300      	movs	r3, #0
 800f428:	e011      	b.n	800f44e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f430:	2b00      	cmp	r3, #0
 800f432:	d002      	beq.n	800f43a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f438:	e009      	b.n	800f44e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f440:	2b00      	cmp	r3, #0
 800f442:	d002      	beq.n	800f44a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f448:	e001      	b.n	800f44e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f44a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f44e:	4618      	mov	r0, r3
 800f450:	371c      	adds	r7, #28
 800f452:	46bd      	mov	sp, r7
 800f454:	bd90      	pop	{r4, r7, pc}
 800f456:	bf00      	nop
 800f458:	24000000 	.word	0x24000000
 800f45c:	10624dd3 	.word	0x10624dd3
 800f460:	002000c5 	.word	0x002000c5

0800f464 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f464:	b490      	push	{r4, r7}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f46c:	4b21      	ldr	r3, [pc, #132]	; (800f4f4 <SDMMC_GetCmdResp7+0x90>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4a21      	ldr	r2, [pc, #132]	; (800f4f8 <SDMMC_GetCmdResp7+0x94>)
 800f472:	fba2 2303 	umull	r2, r3, r2, r3
 800f476:	0a5b      	lsrs	r3, r3, #9
 800f478:	f241 3288 	movw	r2, #5000	; 0x1388
 800f47c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f480:	4623      	mov	r3, r4
 800f482:	1e5c      	subs	r4, r3, #1
 800f484:	2b00      	cmp	r3, #0
 800f486:	d102      	bne.n	800f48e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f48c:	e02c      	b.n	800f4e8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f492:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d0f0      	beq.n	800f480 <SDMMC_GetCmdResp7+0x1c>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d1eb      	bne.n	800f480 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ac:	f003 0304 	and.w	r3, r3, #4
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d004      	beq.n	800f4be <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2204      	movs	r2, #4
 800f4b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f4ba:	2304      	movs	r3, #4
 800f4bc:	e014      	b.n	800f4e8 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4c2:	f003 0301 	and.w	r3, r3, #1
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d004      	beq.n	800f4d4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	e009      	b.n	800f4e8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d002      	beq.n	800f4e6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2240      	movs	r2, #64	; 0x40
 800f4e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f4e6:	2300      	movs	r3, #0

}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3710      	adds	r7, #16
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bc90      	pop	{r4, r7}
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
 800f4f4:	24000000 	.word	0x24000000
 800f4f8:	10624dd3 	.word	0x10624dd3

0800f4fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f4fc:	b084      	sub	sp, #16
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b084      	sub	sp, #16
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	f107 001c 	add.w	r0, r7, #28
 800f50a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f510:	2b01      	cmp	r3, #1
 800f512:	d120      	bne.n	800f556 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f518:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	68da      	ldr	r2, [r3, #12]
 800f524:	4b25      	ldr	r3, [pc, #148]	; (800f5bc <USB_CoreInit+0xc0>)
 800f526:	4013      	ands	r3, r2
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d105      	bne.n	800f54a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 fa4c 	bl	800f9e8 <USB_CoreReset>
 800f550:	4603      	mov	r3, r0
 800f552:	73fb      	strb	r3, [r7, #15]
 800f554:	e01a      	b.n	800f58c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 fa40 	bl	800f9e8 <USB_CoreReset>
 800f568:	4603      	mov	r3, r0
 800f56a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d106      	bne.n	800f580 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f576:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	639a      	str	r2, [r3, #56]	; 0x38
 800f57e:	e005      	b.n	800f58c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f584:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d10b      	bne.n	800f5aa <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	689b      	ldr	r3, [r3, #8]
 800f596:	f043 0206 	orr.w	r2, r3, #6
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	f043 0220 	orr.w	r2, r3, #32
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5b6:	b004      	add	sp, #16
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop
 800f5bc:	ffbdffbf 	.word	0xffbdffbf

0800f5c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	689b      	ldr	r3, [r3, #8]
 800f5cc:	f023 0201 	bic.w	r2, r3, #1
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5d4:	2300      	movs	r3, #0
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	370c      	adds	r7, #12
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e0:	4770      	bx	lr

0800f5e2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b082      	sub	sp, #8
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	68db      	ldr	r3, [r3, #12]
 800f5f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f5fa:	78fb      	ldrb	r3, [r7, #3]
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d106      	bne.n	800f60e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	60da      	str	r2, [r3, #12]
 800f60c:	e00b      	b.n	800f626 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f60e:	78fb      	ldrb	r3, [r7, #3]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d106      	bne.n	800f622 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	60da      	str	r2, [r3, #12]
 800f620:	e001      	b.n	800f626 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f622:	2301      	movs	r3, #1
 800f624:	e003      	b.n	800f62e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f626:	2032      	movs	r0, #50	; 0x32
 800f628:	f7f2 f9cc 	bl	80019c4 <HAL_Delay>

  return HAL_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3708      	adds	r7, #8
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
	...

0800f638 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f638:	b084      	sub	sp, #16
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b086      	sub	sp, #24
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f64a:	2300      	movs	r3, #0
 800f64c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f652:	2300      	movs	r3, #0
 800f654:	613b      	str	r3, [r7, #16]
 800f656:	e009      	b.n	800f66c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	3340      	adds	r3, #64	; 0x40
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	4413      	add	r3, r2
 800f662:	2200      	movs	r2, #0
 800f664:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	3301      	adds	r3, #1
 800f66a:	613b      	str	r3, [r7, #16]
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	2b0e      	cmp	r3, #14
 800f670:	d9f2      	bls.n	800f658 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f674:	2b00      	cmp	r3, #0
 800f676:	d11c      	bne.n	800f6b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	68fa      	ldr	r2, [r7, #12]
 800f682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f686:	f043 0302 	orr.w	r3, r3, #2
 800f68a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f690:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	601a      	str	r2, [r3, #0]
 800f6b0:	e005      	b.n	800f6be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d8:	461a      	mov	r2, r3
 800f6da:	680b      	ldr	r3, [r1, #0]
 800f6dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d10c      	bne.n	800f6fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d104      	bne.n	800f6f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 f949 	bl	800f984 <USB_SetDevSpeed>
 800f6f2:	e008      	b.n	800f706 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f6f4:	2101      	movs	r1, #1
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f944 	bl	800f984 <USB_SetDevSpeed>
 800f6fc:	e003      	b.n	800f706 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f6fe:	2103      	movs	r1, #3
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 f93f 	bl	800f984 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f706:	2110      	movs	r1, #16
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 f8f3 	bl	800f8f4 <USB_FlushTxFifo>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d001      	beq.n	800f718 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f714:	2301      	movs	r3, #1
 800f716:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 f911 	bl	800f940 <USB_FlushRxFifo>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d001      	beq.n	800f728 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f724:	2301      	movs	r3, #1
 800f726:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f72e:	461a      	mov	r2, r3
 800f730:	2300      	movs	r3, #0
 800f732:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f73a:	461a      	mov	r2, r3
 800f73c:	2300      	movs	r3, #0
 800f73e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f746:	461a      	mov	r2, r3
 800f748:	2300      	movs	r3, #0
 800f74a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f74c:	2300      	movs	r3, #0
 800f74e:	613b      	str	r3, [r7, #16]
 800f750:	e043      	b.n	800f7da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	015a      	lsls	r2, r3, #5
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	4413      	add	r3, r2
 800f75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f768:	d118      	bne.n	800f79c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d10a      	bne.n	800f786 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	4413      	add	r3, r2
 800f778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f77c:	461a      	mov	r2, r3
 800f77e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	e013      	b.n	800f7ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	015a      	lsls	r2, r3, #5
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	4413      	add	r3, r2
 800f78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f792:	461a      	mov	r2, r3
 800f794:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f798:	6013      	str	r3, [r2, #0]
 800f79a:	e008      	b.n	800f7ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	015a      	lsls	r2, r3, #5
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	015a      	lsls	r2, r3, #5
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	2300      	movs	r3, #0
 800f7be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	015a      	lsls	r2, r3, #5
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f7d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	613b      	str	r3, [r7, #16]
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	693a      	ldr	r2, [r7, #16]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d3b7      	bcc.n	800f752 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	613b      	str	r3, [r7, #16]
 800f7e6:	e043      	b.n	800f870 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	015a      	lsls	r2, r3, #5
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7fe:	d118      	bne.n	800f832 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10a      	bne.n	800f81c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	015a      	lsls	r2, r3, #5
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	4413      	add	r3, r2
 800f80e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f812:	461a      	mov	r2, r3
 800f814:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	e013      	b.n	800f844 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	015a      	lsls	r2, r3, #5
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	4413      	add	r3, r2
 800f824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f828:	461a      	mov	r2, r3
 800f82a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f82e:	6013      	str	r3, [r2, #0]
 800f830:	e008      	b.n	800f844 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	015a      	lsls	r2, r3, #5
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	4413      	add	r3, r2
 800f83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f83e:	461a      	mov	r2, r3
 800f840:	2300      	movs	r3, #0
 800f842:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	015a      	lsls	r2, r3, #5
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	4413      	add	r3, r2
 800f84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f850:	461a      	mov	r2, r3
 800f852:	2300      	movs	r3, #0
 800f854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	015a      	lsls	r2, r3, #5
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	4413      	add	r3, r2
 800f85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f862:	461a      	mov	r2, r3
 800f864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f868:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	3301      	adds	r3, #1
 800f86e:	613b      	str	r3, [r7, #16]
 800f870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f872:	693a      	ldr	r2, [r7, #16]
 800f874:	429a      	cmp	r2, r3
 800f876:	d3b7      	bcc.n	800f7e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f87e:	691b      	ldr	r3, [r3, #16]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f88a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f898:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d105      	bne.n	800f8ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	f043 0210 	orr.w	r2, r3, #16
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	699a      	ldr	r2, [r3, #24]
 800f8b0:	4b0e      	ldr	r3, [pc, #56]	; (800f8ec <USB_DevInit+0x2b4>)
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d005      	beq.n	800f8ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	699b      	ldr	r3, [r3, #24]
 800f8c2:	f043 0208 	orr.w	r2, r3, #8
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d105      	bne.n	800f8dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	699a      	ldr	r2, [r3, #24]
 800f8d4:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <USB_DevInit+0x2b8>)
 800f8d6:	4313      	orrs	r3, r2
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f8dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3718      	adds	r7, #24
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f8e8:	b004      	add	sp, #16
 800f8ea:	4770      	bx	lr
 800f8ec:	803c3800 	.word	0x803c3800
 800f8f0:	40000004 	.word	0x40000004

0800f8f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f8fe:	2300      	movs	r3, #0
 800f900:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	019b      	lsls	r3, r3, #6
 800f906:	f043 0220 	orr.w	r2, r3, #32
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	3301      	adds	r3, #1
 800f912:	60fb      	str	r3, [r7, #12]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	4a09      	ldr	r2, [pc, #36]	; (800f93c <USB_FlushTxFifo+0x48>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d901      	bls.n	800f920 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f91c:	2303      	movs	r3, #3
 800f91e:	e006      	b.n	800f92e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	691b      	ldr	r3, [r3, #16]
 800f924:	f003 0320 	and.w	r3, r3, #32
 800f928:	2b20      	cmp	r3, #32
 800f92a:	d0f0      	beq.n	800f90e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f92c:	2300      	movs	r3, #0
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3714      	adds	r7, #20
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	00030d40 	.word	0x00030d40

0800f940 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f940:	b480      	push	{r7}
 800f942:	b085      	sub	sp, #20
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f948:	2300      	movs	r3, #0
 800f94a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2210      	movs	r2, #16
 800f950:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	3301      	adds	r3, #1
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	4a09      	ldr	r2, [pc, #36]	; (800f980 <USB_FlushRxFifo+0x40>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d901      	bls.n	800f964 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f960:	2303      	movs	r3, #3
 800f962:	e006      	b.n	800f972 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	691b      	ldr	r3, [r3, #16]
 800f968:	f003 0310 	and.w	r3, r3, #16
 800f96c:	2b10      	cmp	r3, #16
 800f96e:	d0f0      	beq.n	800f952 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f970:	2300      	movs	r3, #0
}
 800f972:	4618      	mov	r0, r3
 800f974:	3714      	adds	r7, #20
 800f976:	46bd      	mov	sp, r7
 800f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97c:	4770      	bx	lr
 800f97e:	bf00      	nop
 800f980:	00030d40 	.word	0x00030d40

0800f984 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f984:	b480      	push	{r7}
 800f986:	b085      	sub	sp, #20
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	460b      	mov	r3, r1
 800f98e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	78fb      	ldrb	r3, [r7, #3]
 800f99e:	68f9      	ldr	r1, [r7, #12]
 800f9a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f9a8:	2300      	movs	r3, #0
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3714      	adds	r7, #20
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr

0800f9b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b084      	sub	sp, #16
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	68fa      	ldr	r2, [r7, #12]
 800f9cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9d0:	f043 0302 	orr.w	r3, r3, #2
 800f9d4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f9d6:	2003      	movs	r0, #3
 800f9d8:	f7f1 fff4 	bl	80019c4 <HAL_Delay>

  return HAL_OK;
 800f9dc:	2300      	movs	r3, #0
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
	...

0800f9e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b085      	sub	sp, #20
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	60fb      	str	r3, [r7, #12]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	4a13      	ldr	r2, [pc, #76]	; (800fa4c <USB_CoreReset+0x64>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d901      	bls.n	800fa06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fa02:	2303      	movs	r3, #3
 800fa04:	e01b      	b.n	800fa3e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	daf2      	bge.n	800f9f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	f043 0201 	orr.w	r2, r3, #1
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	3301      	adds	r3, #1
 800fa22:	60fb      	str	r3, [r7, #12]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	4a09      	ldr	r2, [pc, #36]	; (800fa4c <USB_CoreReset+0x64>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d901      	bls.n	800fa30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fa2c:	2303      	movs	r3, #3
 800fa2e:	e006      	b.n	800fa3e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	691b      	ldr	r3, [r3, #16]
 800fa34:	f003 0301 	and.w	r3, r3, #1
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d0f0      	beq.n	800fa1e <USB_CoreReset+0x36>

  return HAL_OK;
 800fa3c:	2300      	movs	r3, #0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3714      	adds	r7, #20
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr
 800fa4a:	bf00      	nop
 800fa4c:	00030d40 	.word	0x00030d40

0800fa50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fa54:	4904      	ldr	r1, [pc, #16]	; (800fa68 <MX_FATFS_Init+0x18>)
 800fa56:	4805      	ldr	r0, [pc, #20]	; (800fa6c <MX_FATFS_Init+0x1c>)
 800fa58:	f004 fbbe 	bl	80141d8 <FATFS_LinkDriver>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	461a      	mov	r2, r3
 800fa60:	4b03      	ldr	r3, [pc, #12]	; (800fa70 <MX_FATFS_Init+0x20>)
 800fa62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800fa64:	bf00      	nop
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	240221dc 	.word	0x240221dc
 800fa6c:	080144f4 	.word	0x080144f4
 800fa70:	240221d8 	.word	0x240221d8

0800fa74 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fa74:	b480      	push	{r7}
 800fa76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fa78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fa8e:	f000 f86b 	bl	800fb68 <BSP_SD_IsDetected>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d001      	beq.n	800fa9c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fa98:	2302      	movs	r3, #2
 800fa9a:	e005      	b.n	800faa8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fa9c:	4804      	ldr	r0, [pc, #16]	; (800fab0 <BSP_SD_Init+0x2c>)
 800fa9e:	f7fa fcc5 	bl	800a42c <HAL_SD_Init>
 800faa2:	4603      	mov	r3, r0
 800faa4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800faa6:	79fb      	ldrb	r3, [r7, #7]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	24000a1c 	.word	0x24000a1c

0800fab4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b088      	sub	sp, #32
 800fab8:	af02      	add	r7, sp, #8
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
 800fac0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fac2:	2300      	movs	r3, #0
 800fac4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	9300      	str	r3, [sp, #0]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	68ba      	ldr	r2, [r7, #8]
 800face:	68f9      	ldr	r1, [r7, #12]
 800fad0:	4806      	ldr	r0, [pc, #24]	; (800faec <BSP_SD_ReadBlocks+0x38>)
 800fad2:	f7fa fdc9 	bl	800a668 <HAL_SD_ReadBlocks>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d001      	beq.n	800fae0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fadc:	2301      	movs	r3, #1
 800fade:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800fae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3718      	adds	r7, #24
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	24000a1c 	.word	0x24000a1c

0800faf0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b088      	sub	sp, #32
 800faf4:	af02      	add	r7, sp, #8
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
 800fafc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fafe:	2300      	movs	r3, #0
 800fb00:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	9300      	str	r3, [sp, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	68ba      	ldr	r2, [r7, #8]
 800fb0a:	68f9      	ldr	r1, [r7, #12]
 800fb0c:	4806      	ldr	r0, [pc, #24]	; (800fb28 <BSP_SD_WriteBlocks+0x38>)
 800fb0e:	f7fa ff35 	bl	800a97c <HAL_SD_WriteBlocks>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d001      	beq.n	800fb1c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800fb1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3718      	adds	r7, #24
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	24000a1c 	.word	0x24000a1c

0800fb2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fb30:	4805      	ldr	r0, [pc, #20]	; (800fb48 <BSP_SD_GetCardState+0x1c>)
 800fb32:	f7fb fbed 	bl	800b310 <HAL_SD_GetCardState>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b04      	cmp	r3, #4
 800fb3a:	bf14      	ite	ne
 800fb3c:	2301      	movne	r3, #1
 800fb3e:	2300      	moveq	r3, #0
 800fb40:	b2db      	uxtb	r3, r3
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	24000a1c 	.word	0x24000a1c

0800fb4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fb54:	6879      	ldr	r1, [r7, #4]
 800fb56:	4803      	ldr	r0, [pc, #12]	; (800fb64 <BSP_SD_GetCardInfo+0x18>)
 800fb58:	f7fb fb04 	bl	800b164 <HAL_SD_GetCardInfo>
}
 800fb5c:	bf00      	nop
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	24000a1c 	.word	0x24000a1c

0800fb68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800fb72:	f000 f80b 	bl	800fb8c <BSP_PlatformIsDetected>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d101      	bne.n	800fb80 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fb80:	79fb      	ldrb	r3, [r7, #7]
 800fb82:	b2db      	uxtb	r3, r3
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fb92:	2301      	movs	r3, #1
 800fb94:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fb96:	2180      	movs	r1, #128	; 0x80
 800fb98:	4806      	ldr	r0, [pc, #24]	; (800fbb4 <BSP_PlatformIsDetected+0x28>)
 800fb9a:	f7f7 fc73 	bl	8007484 <HAL_GPIO_ReadPin>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800fba4:	2300      	movs	r3, #0
 800fba6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800fba8:	79fb      	ldrb	r3, [r7, #7]
}  
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	58020800 	.word	0x58020800

0800fbb8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fbc2:	4b0b      	ldr	r3, [pc, #44]	; (800fbf0 <SD_CheckStatus+0x38>)
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fbc8:	f7ff ffb0 	bl	800fb2c <BSP_SD_GetCardState>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d107      	bne.n	800fbe2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fbd2:	4b07      	ldr	r3, [pc, #28]	; (800fbf0 <SD_CheckStatus+0x38>)
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	f023 0301 	bic.w	r3, r3, #1
 800fbdc:	b2da      	uxtb	r2, r3
 800fbde:	4b04      	ldr	r3, [pc, #16]	; (800fbf0 <SD_CheckStatus+0x38>)
 800fbe0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fbe2:	4b03      	ldr	r3, [pc, #12]	; (800fbf0 <SD_CheckStatus+0x38>)
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	b2db      	uxtb	r3, r3
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3708      	adds	r7, #8
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	2400000d 	.word	0x2400000d

0800fbf4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800fbfe:	4b0b      	ldr	r3, [pc, #44]	; (800fc2c <SD_initialize+0x38>)
 800fc00:	2201      	movs	r2, #1
 800fc02:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fc04:	f7ff ff3e 	bl	800fa84 <BSP_SD_Init>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d107      	bne.n	800fc1e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800fc0e:	79fb      	ldrb	r3, [r7, #7]
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7ff ffd1 	bl	800fbb8 <SD_CheckStatus>
 800fc16:	4603      	mov	r3, r0
 800fc18:	461a      	mov	r2, r3
 800fc1a:	4b04      	ldr	r3, [pc, #16]	; (800fc2c <SD_initialize+0x38>)
 800fc1c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fc1e:	4b03      	ldr	r3, [pc, #12]	; (800fc2c <SD_initialize+0x38>)
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	b2db      	uxtb	r3, r3
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3708      	adds	r7, #8
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	2400000d 	.word	0x2400000d

0800fc30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	4603      	mov	r3, r0
 800fc38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fc3a:	79fb      	ldrb	r3, [r7, #7]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7ff ffbb 	bl	800fbb8 <SD_CheckStatus>
 800fc42:	4603      	mov	r3, r0
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b086      	sub	sp, #24
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60b9      	str	r1, [r7, #8]
 800fc54:	607a      	str	r2, [r7, #4]
 800fc56:	603b      	str	r3, [r7, #0]
 800fc58:	4603      	mov	r3, r0
 800fc5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800fc60:	f04f 33ff 	mov.w	r3, #4294967295
 800fc64:	683a      	ldr	r2, [r7, #0]
 800fc66:	6879      	ldr	r1, [r7, #4]
 800fc68:	68b8      	ldr	r0, [r7, #8]
 800fc6a:	f7ff ff23 	bl	800fab4 <BSP_SD_ReadBlocks>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d107      	bne.n	800fc84 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fc74:	bf00      	nop
 800fc76:	f7ff ff59 	bl	800fb2c <BSP_SD_GetCardState>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d1fa      	bne.n	800fc76 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800fc80:	2300      	movs	r3, #0
 800fc82:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800fc84:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3718      	adds	r7, #24
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b086      	sub	sp, #24
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]
 800fc98:	603b      	str	r3, [r7, #0]
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fc9e:	2301      	movs	r3, #1
 800fca0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800fca2:	f04f 33ff 	mov.w	r3, #4294967295
 800fca6:	683a      	ldr	r2, [r7, #0]
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	68b8      	ldr	r0, [r7, #8]
 800fcac:	f7ff ff20 	bl	800faf0 <BSP_SD_WriteBlocks>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d107      	bne.n	800fcc6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800fcb6:	bf00      	nop
 800fcb8:	f7ff ff38 	bl	800fb2c <BSP_SD_GetCardState>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d1fa      	bne.n	800fcb8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800fcc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3718      	adds	r7, #24
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b08c      	sub	sp, #48	; 0x30
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	603a      	str	r2, [r7, #0]
 800fcda:	71fb      	strb	r3, [r7, #7]
 800fcdc:	460b      	mov	r3, r1
 800fcde:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fce0:	2301      	movs	r3, #1
 800fce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fce6:	4b25      	ldr	r3, [pc, #148]	; (800fd7c <SD_ioctl+0xac>)
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	f003 0301 	and.w	r3, r3, #1
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <SD_ioctl+0x28>
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	e03c      	b.n	800fd72 <SD_ioctl+0xa2>

  switch (cmd)
 800fcf8:	79bb      	ldrb	r3, [r7, #6]
 800fcfa:	2b03      	cmp	r3, #3
 800fcfc:	d834      	bhi.n	800fd68 <SD_ioctl+0x98>
 800fcfe:	a201      	add	r2, pc, #4	; (adr r2, 800fd04 <SD_ioctl+0x34>)
 800fd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd04:	0800fd15 	.word	0x0800fd15
 800fd08:	0800fd1d 	.word	0x0800fd1d
 800fd0c:	0800fd35 	.word	0x0800fd35
 800fd10:	0800fd4f 	.word	0x0800fd4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fd14:	2300      	movs	r3, #0
 800fd16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fd1a:	e028      	b.n	800fd6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd1c:	f107 0308 	add.w	r3, r7, #8
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7ff ff13 	bl	800fb4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fd26:	6a3a      	ldr	r2, [r7, #32]
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fd32:	e01c      	b.n	800fd6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd34:	f107 0308 	add.w	r3, r7, #8
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7ff ff07 	bl	800fb4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd40:	b29a      	uxth	r2, r3
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fd46:	2300      	movs	r3, #0
 800fd48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fd4c:	e00f      	b.n	800fd6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd4e:	f107 0308 	add.w	r3, r7, #8
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7ff fefa 	bl	800fb4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5a:	0a5a      	lsrs	r2, r3, #9
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fd60:	2300      	movs	r3, #0
 800fd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fd66:	e002      	b.n	800fd6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fd68:	2304      	movs	r3, #4
 800fd6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800fd6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3730      	adds	r7, #48	; 0x30
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	2400000d 	.word	0x2400000d

0800fd80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	4603      	mov	r3, r0
 800fd88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fd8a:	79fb      	ldrb	r3, [r7, #7]
 800fd8c:	4a08      	ldr	r2, [pc, #32]	; (800fdb0 <disk_status+0x30>)
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	4413      	add	r3, r2
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	79fa      	ldrb	r2, [r7, #7]
 800fd98:	4905      	ldr	r1, [pc, #20]	; (800fdb0 <disk_status+0x30>)
 800fd9a:	440a      	add	r2, r1
 800fd9c:	7a12      	ldrb	r2, [r2, #8]
 800fd9e:	4610      	mov	r0, r2
 800fda0:	4798      	blx	r3
 800fda2:	4603      	mov	r3, r0
 800fda4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3710      	adds	r7, #16
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	24000574 	.word	0x24000574

0800fdb4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b084      	sub	sp, #16
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	4603      	mov	r3, r0
 800fdbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fdc2:	79fb      	ldrb	r3, [r7, #7]
 800fdc4:	4a0d      	ldr	r2, [pc, #52]	; (800fdfc <disk_initialize+0x48>)
 800fdc6:	5cd3      	ldrb	r3, [r2, r3]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d111      	bne.n	800fdf0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fdcc:	79fb      	ldrb	r3, [r7, #7]
 800fdce:	4a0b      	ldr	r2, [pc, #44]	; (800fdfc <disk_initialize+0x48>)
 800fdd0:	2101      	movs	r1, #1
 800fdd2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fdd4:	79fb      	ldrb	r3, [r7, #7]
 800fdd6:	4a09      	ldr	r2, [pc, #36]	; (800fdfc <disk_initialize+0x48>)
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	4413      	add	r3, r2
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	79fa      	ldrb	r2, [r7, #7]
 800fde2:	4906      	ldr	r1, [pc, #24]	; (800fdfc <disk_initialize+0x48>)
 800fde4:	440a      	add	r2, r1
 800fde6:	7a12      	ldrb	r2, [r2, #8]
 800fde8:	4610      	mov	r0, r2
 800fdea:	4798      	blx	r3
 800fdec:	4603      	mov	r3, r0
 800fdee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fdf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3710      	adds	r7, #16
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	24000574 	.word	0x24000574

0800fe00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fe00:	b590      	push	{r4, r7, lr}
 800fe02:	b087      	sub	sp, #28
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	60b9      	str	r1, [r7, #8]
 800fe08:	607a      	str	r2, [r7, #4]
 800fe0a:	603b      	str	r3, [r7, #0]
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fe10:	7bfb      	ldrb	r3, [r7, #15]
 800fe12:	4a0a      	ldr	r2, [pc, #40]	; (800fe3c <disk_read+0x3c>)
 800fe14:	009b      	lsls	r3, r3, #2
 800fe16:	4413      	add	r3, r2
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	689c      	ldr	r4, [r3, #8]
 800fe1c:	7bfb      	ldrb	r3, [r7, #15]
 800fe1e:	4a07      	ldr	r2, [pc, #28]	; (800fe3c <disk_read+0x3c>)
 800fe20:	4413      	add	r3, r2
 800fe22:	7a18      	ldrb	r0, [r3, #8]
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	68b9      	ldr	r1, [r7, #8]
 800fe2a:	47a0      	blx	r4
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	75fb      	strb	r3, [r7, #23]
  return res;
 800fe30:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	371c      	adds	r7, #28
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd90      	pop	{r4, r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	24000574 	.word	0x24000574

0800fe40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fe40:	b590      	push	{r4, r7, lr}
 800fe42:	b087      	sub	sp, #28
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60b9      	str	r1, [r7, #8]
 800fe48:	607a      	str	r2, [r7, #4]
 800fe4a:	603b      	str	r3, [r7, #0]
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fe50:	7bfb      	ldrb	r3, [r7, #15]
 800fe52:	4a0a      	ldr	r2, [pc, #40]	; (800fe7c <disk_write+0x3c>)
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	4413      	add	r3, r2
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	68dc      	ldr	r4, [r3, #12]
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
 800fe5e:	4a07      	ldr	r2, [pc, #28]	; (800fe7c <disk_write+0x3c>)
 800fe60:	4413      	add	r3, r2
 800fe62:	7a18      	ldrb	r0, [r3, #8]
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	687a      	ldr	r2, [r7, #4]
 800fe68:	68b9      	ldr	r1, [r7, #8]
 800fe6a:	47a0      	blx	r4
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	75fb      	strb	r3, [r7, #23]
  return res;
 800fe70:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	371c      	adds	r7, #28
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd90      	pop	{r4, r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	24000574 	.word	0x24000574

0800fe80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	4603      	mov	r3, r0
 800fe88:	603a      	str	r2, [r7, #0]
 800fe8a:	71fb      	strb	r3, [r7, #7]
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fe90:	79fb      	ldrb	r3, [r7, #7]
 800fe92:	4a09      	ldr	r2, [pc, #36]	; (800feb8 <disk_ioctl+0x38>)
 800fe94:	009b      	lsls	r3, r3, #2
 800fe96:	4413      	add	r3, r2
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	691b      	ldr	r3, [r3, #16]
 800fe9c:	79fa      	ldrb	r2, [r7, #7]
 800fe9e:	4906      	ldr	r1, [pc, #24]	; (800feb8 <disk_ioctl+0x38>)
 800fea0:	440a      	add	r2, r1
 800fea2:	7a10      	ldrb	r0, [r2, #8]
 800fea4:	79b9      	ldrb	r1, [r7, #6]
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	4798      	blx	r3
 800feaa:	4603      	mov	r3, r0
 800feac:	73fb      	strb	r3, [r7, #15]
  return res;
 800feae:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3710      	adds	r7, #16
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	24000574 	.word	0x24000574

0800febc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	3301      	adds	r3, #1
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fecc:	89fb      	ldrh	r3, [r7, #14]
 800fece:	021b      	lsls	r3, r3, #8
 800fed0:	b21a      	sxth	r2, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	b21b      	sxth	r3, r3
 800fed8:	4313      	orrs	r3, r2
 800feda:	b21b      	sxth	r3, r3
 800fedc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fede:	89fb      	ldrh	r3, [r7, #14]
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	3303      	adds	r3, #3
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	021b      	lsls	r3, r3, #8
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	3202      	adds	r2, #2
 800ff04:	7812      	ldrb	r2, [r2, #0]
 800ff06:	4313      	orrs	r3, r2
 800ff08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	021b      	lsls	r3, r3, #8
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	3201      	adds	r2, #1
 800ff12:	7812      	ldrb	r2, [r2, #0]
 800ff14:	4313      	orrs	r3, r2
 800ff16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	021b      	lsls	r3, r3, #8
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	7812      	ldrb	r2, [r2, #0]
 800ff20:	4313      	orrs	r3, r2
 800ff22:	60fb      	str	r3, [r7, #12]
	return rv;
 800ff24:	68fb      	ldr	r3, [r7, #12]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3714      	adds	r7, #20
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr

0800ff32 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800ff32:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800ff36:	b085      	sub	sp, #20
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	3307      	adds	r3, #7
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	f04f 0400 	mov.w	r4, #0
 800ff48:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800ff4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ff50:	f04f 0b00 	mov.w	fp, #0
 800ff54:	f04f 0c00 	mov.w	ip, #0
 800ff58:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800ff5c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800ff60:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	3206      	adds	r2, #6
 800ff68:	7812      	ldrb	r2, [r2, #0]
 800ff6a:	b2d1      	uxtb	r1, r2
 800ff6c:	f04f 0200 	mov.w	r2, #0
 800ff70:	ea4b 0301 	orr.w	r3, fp, r1
 800ff74:	ea4c 0402 	orr.w	r4, ip, r2
 800ff78:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800ff7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ff80:	f04f 0b00 	mov.w	fp, #0
 800ff84:	f04f 0c00 	mov.w	ip, #0
 800ff88:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800ff8c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800ff90:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	3205      	adds	r2, #5
 800ff98:	7812      	ldrb	r2, [r2, #0]
 800ff9a:	b2d1      	uxtb	r1, r2
 800ff9c:	f04f 0200 	mov.w	r2, #0
 800ffa0:	ea4b 0301 	orr.w	r3, fp, r1
 800ffa4:	ea4c 0402 	orr.w	r4, ip, r2
 800ffa8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800ffac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ffb0:	f04f 0b00 	mov.w	fp, #0
 800ffb4:	f04f 0c00 	mov.w	ip, #0
 800ffb8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800ffbc:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800ffc0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	3204      	adds	r2, #4
 800ffc8:	7812      	ldrb	r2, [r2, #0]
 800ffca:	b2d1      	uxtb	r1, r2
 800ffcc:	f04f 0200 	mov.w	r2, #0
 800ffd0:	ea4b 0301 	orr.w	r3, fp, r1
 800ffd4:	ea4c 0402 	orr.w	r4, ip, r2
 800ffd8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800ffdc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ffe0:	f04f 0b00 	mov.w	fp, #0
 800ffe4:	f04f 0c00 	mov.w	ip, #0
 800ffe8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800ffec:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fff0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	3203      	adds	r2, #3
 800fff8:	7812      	ldrb	r2, [r2, #0]
 800fffa:	b2d1      	uxtb	r1, r2
 800fffc:	f04f 0200 	mov.w	r2, #0
 8010000:	ea4b 0301 	orr.w	r3, fp, r1
 8010004:	ea4c 0402 	orr.w	r4, ip, r2
 8010008:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 801000c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010010:	f04f 0b00 	mov.w	fp, #0
 8010014:	f04f 0c00 	mov.w	ip, #0
 8010018:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 801001c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010020:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	3202      	adds	r2, #2
 8010028:	7812      	ldrb	r2, [r2, #0]
 801002a:	b2d1      	uxtb	r1, r2
 801002c:	f04f 0200 	mov.w	r2, #0
 8010030:	ea4b 0301 	orr.w	r3, fp, r1
 8010034:	ea4c 0402 	orr.w	r4, ip, r2
 8010038:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 801003c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010040:	f04f 0b00 	mov.w	fp, #0
 8010044:	f04f 0c00 	mov.w	ip, #0
 8010048:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 801004c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010050:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	3201      	adds	r2, #1
 8010058:	7812      	ldrb	r2, [r2, #0]
 801005a:	b2d1      	uxtb	r1, r2
 801005c:	f04f 0200 	mov.w	r2, #0
 8010060:	ea4b 0301 	orr.w	r3, fp, r1
 8010064:	ea4c 0402 	orr.w	r4, ip, r2
 8010068:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 801006c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010070:	f04f 0b00 	mov.w	fp, #0
 8010074:	f04f 0c00 	mov.w	ip, #0
 8010078:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 801007c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010080:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	7812      	ldrb	r2, [r2, #0]
 8010088:	b2d1      	uxtb	r1, r2
 801008a:	f04f 0200 	mov.w	r2, #0
 801008e:	ea4b 0301 	orr.w	r3, fp, r1
 8010092:	ea4c 0402 	orr.w	r4, ip, r2
 8010096:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 801009a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	4621      	mov	r1, r4
 80100a2:	3714      	adds	r7, #20
 80100a4:	46bd      	mov	sp, r7
 80100a6:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80100aa:	4770      	bx	lr

080100ac <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	460b      	mov	r3, r1
 80100b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	1c5a      	adds	r2, r3, #1
 80100bc:	607a      	str	r2, [r7, #4]
 80100be:	887a      	ldrh	r2, [r7, #2]
 80100c0:	b2d2      	uxtb	r2, r2
 80100c2:	701a      	strb	r2, [r3, #0]
 80100c4:	887b      	ldrh	r3, [r7, #2]
 80100c6:	0a1b      	lsrs	r3, r3, #8
 80100c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	1c5a      	adds	r2, r3, #1
 80100ce:	607a      	str	r2, [r7, #4]
 80100d0:	887a      	ldrh	r2, [r7, #2]
 80100d2:	b2d2      	uxtb	r2, r2
 80100d4:	701a      	strb	r2, [r3, #0]
}
 80100d6:	bf00      	nop
 80100d8:	370c      	adds	r7, #12
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr

080100e2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80100e2:	b480      	push	{r7}
 80100e4:	b083      	sub	sp, #12
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
 80100ea:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	1c5a      	adds	r2, r3, #1
 80100f0:	607a      	str	r2, [r7, #4]
 80100f2:	683a      	ldr	r2, [r7, #0]
 80100f4:	b2d2      	uxtb	r2, r2
 80100f6:	701a      	strb	r2, [r3, #0]
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	0a1b      	lsrs	r3, r3, #8
 80100fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	1c5a      	adds	r2, r3, #1
 8010102:	607a      	str	r2, [r7, #4]
 8010104:	683a      	ldr	r2, [r7, #0]
 8010106:	b2d2      	uxtb	r2, r2
 8010108:	701a      	strb	r2, [r3, #0]
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	0a1b      	lsrs	r3, r3, #8
 801010e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	1c5a      	adds	r2, r3, #1
 8010114:	607a      	str	r2, [r7, #4]
 8010116:	683a      	ldr	r2, [r7, #0]
 8010118:	b2d2      	uxtb	r2, r2
 801011a:	701a      	strb	r2, [r3, #0]
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	0a1b      	lsrs	r3, r3, #8
 8010120:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	1c5a      	adds	r2, r3, #1
 8010126:	607a      	str	r2, [r7, #4]
 8010128:	683a      	ldr	r2, [r7, #0]
 801012a:	b2d2      	uxtb	r2, r2
 801012c:	701a      	strb	r2, [r3, #0]
}
 801012e:	bf00      	nop
 8010130:	370c      	adds	r7, #12
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr

0801013a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 801013a:	b490      	push	{r4, r7}
 801013c:	b084      	sub	sp, #16
 801013e:	af00      	add	r7, sp, #0
 8010140:	60f8      	str	r0, [r7, #12]
 8010142:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	1c5a      	adds	r2, r3, #1
 801014a:	60fa      	str	r2, [r7, #12]
 801014c:	783a      	ldrb	r2, [r7, #0]
 801014e:	701a      	strb	r2, [r3, #0]
 8010150:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010154:	f04f 0300 	mov.w	r3, #0
 8010158:	f04f 0400 	mov.w	r4, #0
 801015c:	0a0b      	lsrs	r3, r1, #8
 801015e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010162:	0a14      	lsrs	r4, r2, #8
 8010164:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	1c5a      	adds	r2, r3, #1
 801016c:	60fa      	str	r2, [r7, #12]
 801016e:	783a      	ldrb	r2, [r7, #0]
 8010170:	701a      	strb	r2, [r3, #0]
 8010172:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010176:	f04f 0300 	mov.w	r3, #0
 801017a:	f04f 0400 	mov.w	r4, #0
 801017e:	0a0b      	lsrs	r3, r1, #8
 8010180:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010184:	0a14      	lsrs	r4, r2, #8
 8010186:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	1c5a      	adds	r2, r3, #1
 801018e:	60fa      	str	r2, [r7, #12]
 8010190:	783a      	ldrb	r2, [r7, #0]
 8010192:	701a      	strb	r2, [r3, #0]
 8010194:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010198:	f04f 0300 	mov.w	r3, #0
 801019c:	f04f 0400 	mov.w	r4, #0
 80101a0:	0a0b      	lsrs	r3, r1, #8
 80101a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80101a6:	0a14      	lsrs	r4, r2, #8
 80101a8:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	1c5a      	adds	r2, r3, #1
 80101b0:	60fa      	str	r2, [r7, #12]
 80101b2:	783a      	ldrb	r2, [r7, #0]
 80101b4:	701a      	strb	r2, [r3, #0]
 80101b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80101ba:	f04f 0300 	mov.w	r3, #0
 80101be:	f04f 0400 	mov.w	r4, #0
 80101c2:	0a0b      	lsrs	r3, r1, #8
 80101c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80101c8:	0a14      	lsrs	r4, r2, #8
 80101ca:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	1c5a      	adds	r2, r3, #1
 80101d2:	60fa      	str	r2, [r7, #12]
 80101d4:	783a      	ldrb	r2, [r7, #0]
 80101d6:	701a      	strb	r2, [r3, #0]
 80101d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80101dc:	f04f 0300 	mov.w	r3, #0
 80101e0:	f04f 0400 	mov.w	r4, #0
 80101e4:	0a0b      	lsrs	r3, r1, #8
 80101e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80101ea:	0a14      	lsrs	r4, r2, #8
 80101ec:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	1c5a      	adds	r2, r3, #1
 80101f4:	60fa      	str	r2, [r7, #12]
 80101f6:	783a      	ldrb	r2, [r7, #0]
 80101f8:	701a      	strb	r2, [r3, #0]
 80101fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80101fe:	f04f 0300 	mov.w	r3, #0
 8010202:	f04f 0400 	mov.w	r4, #0
 8010206:	0a0b      	lsrs	r3, r1, #8
 8010208:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801020c:	0a14      	lsrs	r4, r2, #8
 801020e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	1c5a      	adds	r2, r3, #1
 8010216:	60fa      	str	r2, [r7, #12]
 8010218:	783a      	ldrb	r2, [r7, #0]
 801021a:	701a      	strb	r2, [r3, #0]
 801021c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010220:	f04f 0300 	mov.w	r3, #0
 8010224:	f04f 0400 	mov.w	r4, #0
 8010228:	0a0b      	lsrs	r3, r1, #8
 801022a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801022e:	0a14      	lsrs	r4, r2, #8
 8010230:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	1c5a      	adds	r2, r3, #1
 8010238:	60fa      	str	r2, [r7, #12]
 801023a:	783a      	ldrb	r2, [r7, #0]
 801023c:	701a      	strb	r2, [r3, #0]
}
 801023e:	bf00      	nop
 8010240:	3710      	adds	r7, #16
 8010242:	46bd      	mov	sp, r7
 8010244:	bc90      	pop	{r4, r7}
 8010246:	4770      	bx	lr

08010248 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010248:	b480      	push	{r7}
 801024a:	b087      	sub	sp, #28
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d00d      	beq.n	801027e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010262:	693a      	ldr	r2, [r7, #16]
 8010264:	1c53      	adds	r3, r2, #1
 8010266:	613b      	str	r3, [r7, #16]
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	1c59      	adds	r1, r3, #1
 801026c:	6179      	str	r1, [r7, #20]
 801026e:	7812      	ldrb	r2, [r2, #0]
 8010270:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	3b01      	subs	r3, #1
 8010276:	607b      	str	r3, [r7, #4]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1f1      	bne.n	8010262 <mem_cpy+0x1a>
	}
}
 801027e:	bf00      	nop
 8010280:	371c      	adds	r7, #28
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr

0801028a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801028a:	b480      	push	{r7}
 801028c:	b087      	sub	sp, #28
 801028e:	af00      	add	r7, sp, #0
 8010290:	60f8      	str	r0, [r7, #12]
 8010292:	60b9      	str	r1, [r7, #8]
 8010294:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	1c5a      	adds	r2, r3, #1
 801029e:	617a      	str	r2, [r7, #20]
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	b2d2      	uxtb	r2, r2
 80102a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	607b      	str	r3, [r7, #4]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1f3      	bne.n	801029a <mem_set+0x10>
}
 80102b2:	bf00      	nop
 80102b4:	371c      	adds	r7, #28
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr

080102be <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80102be:	b480      	push	{r7}
 80102c0:	b089      	sub	sp, #36	; 0x24
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	60f8      	str	r0, [r7, #12]
 80102c6:	60b9      	str	r1, [r7, #8]
 80102c8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	61fb      	str	r3, [r7, #28]
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80102d2:	2300      	movs	r3, #0
 80102d4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	1c5a      	adds	r2, r3, #1
 80102da:	61fa      	str	r2, [r7, #28]
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	4619      	mov	r1, r3
 80102e0:	69bb      	ldr	r3, [r7, #24]
 80102e2:	1c5a      	adds	r2, r3, #1
 80102e4:	61ba      	str	r2, [r7, #24]
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	1acb      	subs	r3, r1, r3
 80102ea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	3b01      	subs	r3, #1
 80102f0:	607b      	str	r3, [r7, #4]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d002      	beq.n	80102fe <mem_cmp+0x40>
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d0eb      	beq.n	80102d6 <mem_cmp+0x18>

	return r;
 80102fe:	697b      	ldr	r3, [r7, #20]
}
 8010300:	4618      	mov	r0, r3
 8010302:	3724      	adds	r7, #36	; 0x24
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr

0801030c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801030c:	b480      	push	{r7}
 801030e:	b083      	sub	sp, #12
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010316:	e002      	b.n	801031e <chk_chr+0x12>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	3301      	adds	r3, #1
 801031c:	607b      	str	r3, [r7, #4]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d005      	beq.n	8010332 <chk_chr+0x26>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	461a      	mov	r2, r3
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	4293      	cmp	r3, r2
 8010330:	d1f2      	bne.n	8010318 <chk_chr+0xc>
	return *str;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	781b      	ldrb	r3, [r3, #0]
}
 8010336:	4618      	mov	r0, r3
 8010338:	370c      	adds	r7, #12
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr
	...

08010344 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010344:	b480      	push	{r7}
 8010346:	b085      	sub	sp, #20
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801034e:	2300      	movs	r3, #0
 8010350:	60bb      	str	r3, [r7, #8]
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	60fb      	str	r3, [r7, #12]
 8010356:	e029      	b.n	80103ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010358:	4a27      	ldr	r2, [pc, #156]	; (80103f8 <chk_lock+0xb4>)
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	011b      	lsls	r3, r3, #4
 801035e:	4413      	add	r3, r2
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d01d      	beq.n	80103a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010366:	4a24      	ldr	r2, [pc, #144]	; (80103f8 <chk_lock+0xb4>)
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	011b      	lsls	r3, r3, #4
 801036c:	4413      	add	r3, r2
 801036e:	681a      	ldr	r2, [r3, #0]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	429a      	cmp	r2, r3
 8010376:	d116      	bne.n	80103a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010378:	4a1f      	ldr	r2, [pc, #124]	; (80103f8 <chk_lock+0xb4>)
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	011b      	lsls	r3, r3, #4
 801037e:	4413      	add	r3, r2
 8010380:	3304      	adds	r3, #4
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010388:	429a      	cmp	r2, r3
 801038a:	d10c      	bne.n	80103a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801038c:	4a1a      	ldr	r2, [pc, #104]	; (80103f8 <chk_lock+0xb4>)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	011b      	lsls	r3, r3, #4
 8010392:	4413      	add	r3, r2
 8010394:	3308      	adds	r3, #8
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 801039c:	429a      	cmp	r2, r3
 801039e:	d102      	bne.n	80103a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80103a0:	e007      	b.n	80103b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80103a2:	2301      	movs	r3, #1
 80103a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	3301      	adds	r3, #1
 80103aa:	60fb      	str	r3, [r7, #12]
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2b01      	cmp	r3, #1
 80103b0:	d9d2      	bls.n	8010358 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	d109      	bne.n	80103cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d102      	bne.n	80103c4 <chk_lock+0x80>
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	2b02      	cmp	r3, #2
 80103c2:	d101      	bne.n	80103c8 <chk_lock+0x84>
 80103c4:	2300      	movs	r3, #0
 80103c6:	e010      	b.n	80103ea <chk_lock+0xa6>
 80103c8:	2312      	movs	r3, #18
 80103ca:	e00e      	b.n	80103ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d108      	bne.n	80103e4 <chk_lock+0xa0>
 80103d2:	4a09      	ldr	r2, [pc, #36]	; (80103f8 <chk_lock+0xb4>)
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	011b      	lsls	r3, r3, #4
 80103d8:	4413      	add	r3, r2
 80103da:	330c      	adds	r3, #12
 80103dc:	881b      	ldrh	r3, [r3, #0]
 80103de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103e2:	d101      	bne.n	80103e8 <chk_lock+0xa4>
 80103e4:	2310      	movs	r3, #16
 80103e6:	e000      	b.n	80103ea <chk_lock+0xa6>
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3714      	adds	r7, #20
 80103ee:	46bd      	mov	sp, r7
 80103f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f4:	4770      	bx	lr
 80103f6:	bf00      	nop
 80103f8:	240000f4 	.word	0x240000f4

080103fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010402:	2300      	movs	r3, #0
 8010404:	607b      	str	r3, [r7, #4]
 8010406:	e002      	b.n	801040e <enq_lock+0x12>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	3301      	adds	r3, #1
 801040c:	607b      	str	r3, [r7, #4]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2b01      	cmp	r3, #1
 8010412:	d806      	bhi.n	8010422 <enq_lock+0x26>
 8010414:	4a09      	ldr	r2, [pc, #36]	; (801043c <enq_lock+0x40>)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	011b      	lsls	r3, r3, #4
 801041a:	4413      	add	r3, r2
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d1f2      	bne.n	8010408 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2b02      	cmp	r3, #2
 8010426:	bf14      	ite	ne
 8010428:	2301      	movne	r3, #1
 801042a:	2300      	moveq	r3, #0
 801042c:	b2db      	uxtb	r3, r3
}
 801042e:	4618      	mov	r0, r3
 8010430:	370c      	adds	r7, #12
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop
 801043c:	240000f4 	.word	0x240000f4

08010440 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801044a:	2300      	movs	r3, #0
 801044c:	60fb      	str	r3, [r7, #12]
 801044e:	e01f      	b.n	8010490 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010450:	4a41      	ldr	r2, [pc, #260]	; (8010558 <inc_lock+0x118>)
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	011b      	lsls	r3, r3, #4
 8010456:	4413      	add	r3, r2
 8010458:	681a      	ldr	r2, [r3, #0]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	429a      	cmp	r2, r3
 8010460:	d113      	bne.n	801048a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010462:	4a3d      	ldr	r2, [pc, #244]	; (8010558 <inc_lock+0x118>)
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	011b      	lsls	r3, r3, #4
 8010468:	4413      	add	r3, r2
 801046a:	3304      	adds	r3, #4
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010472:	429a      	cmp	r2, r3
 8010474:	d109      	bne.n	801048a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010476:	4a38      	ldr	r2, [pc, #224]	; (8010558 <inc_lock+0x118>)
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	011b      	lsls	r3, r3, #4
 801047c:	4413      	add	r3, r2
 801047e:	3308      	adds	r3, #8
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8010486:	429a      	cmp	r2, r3
 8010488:	d006      	beq.n	8010498 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	3301      	adds	r3, #1
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2b01      	cmp	r3, #1
 8010494:	d9dc      	bls.n	8010450 <inc_lock+0x10>
 8010496:	e000      	b.n	801049a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010498:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2b02      	cmp	r3, #2
 801049e:	d132      	bne.n	8010506 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80104a0:	2300      	movs	r3, #0
 80104a2:	60fb      	str	r3, [r7, #12]
 80104a4:	e002      	b.n	80104ac <inc_lock+0x6c>
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	3301      	adds	r3, #1
 80104aa:	60fb      	str	r3, [r7, #12]
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d806      	bhi.n	80104c0 <inc_lock+0x80>
 80104b2:	4a29      	ldr	r2, [pc, #164]	; (8010558 <inc_lock+0x118>)
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	011b      	lsls	r3, r3, #4
 80104b8:	4413      	add	r3, r2
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d1f2      	bne.n	80104a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2b02      	cmp	r3, #2
 80104c4:	d101      	bne.n	80104ca <inc_lock+0x8a>
 80104c6:	2300      	movs	r3, #0
 80104c8:	e040      	b.n	801054c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	4922      	ldr	r1, [pc, #136]	; (8010558 <inc_lock+0x118>)
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	011b      	lsls	r3, r3, #4
 80104d4:	440b      	add	r3, r1
 80104d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	689a      	ldr	r2, [r3, #8]
 80104dc:	491e      	ldr	r1, [pc, #120]	; (8010558 <inc_lock+0x118>)
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	011b      	lsls	r3, r3, #4
 80104e2:	440b      	add	r3, r1
 80104e4:	3304      	adds	r3, #4
 80104e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80104ec:	491a      	ldr	r1, [pc, #104]	; (8010558 <inc_lock+0x118>)
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	011b      	lsls	r3, r3, #4
 80104f2:	440b      	add	r3, r1
 80104f4:	3308      	adds	r3, #8
 80104f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80104f8:	4a17      	ldr	r2, [pc, #92]	; (8010558 <inc_lock+0x118>)
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	011b      	lsls	r3, r3, #4
 80104fe:	4413      	add	r3, r2
 8010500:	330c      	adds	r3, #12
 8010502:	2200      	movs	r2, #0
 8010504:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d009      	beq.n	8010520 <inc_lock+0xe0>
 801050c:	4a12      	ldr	r2, [pc, #72]	; (8010558 <inc_lock+0x118>)
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	011b      	lsls	r3, r3, #4
 8010512:	4413      	add	r3, r2
 8010514:	330c      	adds	r3, #12
 8010516:	881b      	ldrh	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d001      	beq.n	8010520 <inc_lock+0xe0>
 801051c:	2300      	movs	r3, #0
 801051e:	e015      	b.n	801054c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d108      	bne.n	8010538 <inc_lock+0xf8>
 8010526:	4a0c      	ldr	r2, [pc, #48]	; (8010558 <inc_lock+0x118>)
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	011b      	lsls	r3, r3, #4
 801052c:	4413      	add	r3, r2
 801052e:	330c      	adds	r3, #12
 8010530:	881b      	ldrh	r3, [r3, #0]
 8010532:	3301      	adds	r3, #1
 8010534:	b29a      	uxth	r2, r3
 8010536:	e001      	b.n	801053c <inc_lock+0xfc>
 8010538:	f44f 7280 	mov.w	r2, #256	; 0x100
 801053c:	4906      	ldr	r1, [pc, #24]	; (8010558 <inc_lock+0x118>)
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	011b      	lsls	r3, r3, #4
 8010542:	440b      	add	r3, r1
 8010544:	330c      	adds	r3, #12
 8010546:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	3301      	adds	r3, #1
}
 801054c:	4618      	mov	r0, r3
 801054e:	3714      	adds	r7, #20
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr
 8010558:	240000f4 	.word	0x240000f4

0801055c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801055c:	b480      	push	{r7}
 801055e:	b085      	sub	sp, #20
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	3b01      	subs	r3, #1
 8010568:	607b      	str	r3, [r7, #4]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2b01      	cmp	r3, #1
 801056e:	d825      	bhi.n	80105bc <dec_lock+0x60>
		n = Files[i].ctr;
 8010570:	4a17      	ldr	r2, [pc, #92]	; (80105d0 <dec_lock+0x74>)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	011b      	lsls	r3, r3, #4
 8010576:	4413      	add	r3, r2
 8010578:	330c      	adds	r3, #12
 801057a:	881b      	ldrh	r3, [r3, #0]
 801057c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801057e:	89fb      	ldrh	r3, [r7, #14]
 8010580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010584:	d101      	bne.n	801058a <dec_lock+0x2e>
 8010586:	2300      	movs	r3, #0
 8010588:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801058a:	89fb      	ldrh	r3, [r7, #14]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d002      	beq.n	8010596 <dec_lock+0x3a>
 8010590:	89fb      	ldrh	r3, [r7, #14]
 8010592:	3b01      	subs	r3, #1
 8010594:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010596:	4a0e      	ldr	r2, [pc, #56]	; (80105d0 <dec_lock+0x74>)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	011b      	lsls	r3, r3, #4
 801059c:	4413      	add	r3, r2
 801059e:	330c      	adds	r3, #12
 80105a0:	89fa      	ldrh	r2, [r7, #14]
 80105a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80105a4:	89fb      	ldrh	r3, [r7, #14]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d105      	bne.n	80105b6 <dec_lock+0x5a>
 80105aa:	4a09      	ldr	r2, [pc, #36]	; (80105d0 <dec_lock+0x74>)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	011b      	lsls	r3, r3, #4
 80105b0:	4413      	add	r3, r2
 80105b2:	2200      	movs	r2, #0
 80105b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80105b6:	2300      	movs	r3, #0
 80105b8:	737b      	strb	r3, [r7, #13]
 80105ba:	e001      	b.n	80105c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80105bc:	2302      	movs	r3, #2
 80105be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80105c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3714      	adds	r7, #20
 80105c6:	46bd      	mov	sp, r7
 80105c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105cc:	4770      	bx	lr
 80105ce:	bf00      	nop
 80105d0:	240000f4 	.word	0x240000f4

080105d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80105d4:	b480      	push	{r7}
 80105d6:	b085      	sub	sp, #20
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80105dc:	2300      	movs	r3, #0
 80105de:	60fb      	str	r3, [r7, #12]
 80105e0:	e010      	b.n	8010604 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80105e2:	4a0d      	ldr	r2, [pc, #52]	; (8010618 <clear_lock+0x44>)
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	011b      	lsls	r3, r3, #4
 80105e8:	4413      	add	r3, r2
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d105      	bne.n	80105fe <clear_lock+0x2a>
 80105f2:	4a09      	ldr	r2, [pc, #36]	; (8010618 <clear_lock+0x44>)
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	011b      	lsls	r3, r3, #4
 80105f8:	4413      	add	r3, r2
 80105fa:	2200      	movs	r2, #0
 80105fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	3301      	adds	r3, #1
 8010602:	60fb      	str	r3, [r7, #12]
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2b01      	cmp	r3, #1
 8010608:	d9eb      	bls.n	80105e2 <clear_lock+0xe>
	}
}
 801060a:	bf00      	nop
 801060c:	3714      	adds	r7, #20
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop
 8010618:	240000f4 	.word	0x240000f4

0801061c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b086      	sub	sp, #24
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010624:	2300      	movs	r3, #0
 8010626:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	78db      	ldrb	r3, [r3, #3]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d034      	beq.n	801069a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010634:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	7858      	ldrb	r0, [r3, #1]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010640:	2301      	movs	r3, #1
 8010642:	697a      	ldr	r2, [r7, #20]
 8010644:	f7ff fbfc 	bl	800fe40 <disk_write>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d002      	beq.n	8010654 <sync_window+0x38>
			res = FR_DISK_ERR;
 801064e:	2301      	movs	r3, #1
 8010650:	73fb      	strb	r3, [r7, #15]
 8010652:	e022      	b.n	801069a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2200      	movs	r2, #0
 8010658:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801065e:	697a      	ldr	r2, [r7, #20]
 8010660:	1ad2      	subs	r2, r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010666:	429a      	cmp	r2, r3
 8010668:	d217      	bcs.n	801069a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	789b      	ldrb	r3, [r3, #2]
 801066e:	613b      	str	r3, [r7, #16]
 8010670:	e010      	b.n	8010694 <sync_window+0x78>
					wsect += fs->fsize;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010676:	697a      	ldr	r2, [r7, #20]
 8010678:	4413      	add	r3, r2
 801067a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	7858      	ldrb	r0, [r3, #1]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010686:	2301      	movs	r3, #1
 8010688:	697a      	ldr	r2, [r7, #20]
 801068a:	f7ff fbd9 	bl	800fe40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	3b01      	subs	r3, #1
 8010692:	613b      	str	r3, [r7, #16]
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	2b01      	cmp	r3, #1
 8010698:	d8eb      	bhi.n	8010672 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801069a:	7bfb      	ldrb	r3, [r7, #15]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3718      	adds	r7, #24
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80106ae:	2300      	movs	r3, #0
 80106b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b6:	683a      	ldr	r2, [r7, #0]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d01b      	beq.n	80106f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f7ff ffad 	bl	801061c <sync_window>
 80106c2:	4603      	mov	r3, r0
 80106c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d113      	bne.n	80106f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	7858      	ldrb	r0, [r3, #1]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80106d6:	2301      	movs	r3, #1
 80106d8:	683a      	ldr	r2, [r7, #0]
 80106da:	f7ff fb91 	bl	800fe00 <disk_read>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d004      	beq.n	80106ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80106e4:	f04f 33ff 	mov.w	r3, #4294967295
 80106e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80106ea:	2301      	movs	r3, #1
 80106ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	683a      	ldr	r2, [r7, #0]
 80106f2:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80106f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
	...

08010700 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7ff ff87 	bl	801061c <sync_window>
 801070e:	4603      	mov	r3, r0
 8010710:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010712:	7bfb      	ldrb	r3, [r7, #15]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d159      	bne.n	80107cc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	781b      	ldrb	r3, [r3, #0]
 801071c:	2b03      	cmp	r3, #3
 801071e:	d149      	bne.n	80107b4 <sync_fs+0xb4>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	791b      	ldrb	r3, [r3, #4]
 8010724:	2b01      	cmp	r3, #1
 8010726:	d145      	bne.n	80107b4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	899b      	ldrh	r3, [r3, #12]
 8010732:	461a      	mov	r2, r3
 8010734:	2100      	movs	r1, #0
 8010736:	f7ff fda8 	bl	801028a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	333c      	adds	r3, #60	; 0x3c
 801073e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010742:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010746:	4618      	mov	r0, r3
 8010748:	f7ff fcb0 	bl	80100ac <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	333c      	adds	r3, #60	; 0x3c
 8010750:	4921      	ldr	r1, [pc, #132]	; (80107d8 <sync_fs+0xd8>)
 8010752:	4618      	mov	r0, r3
 8010754:	f7ff fcc5 	bl	80100e2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	333c      	adds	r3, #60	; 0x3c
 801075c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010760:	491e      	ldr	r1, [pc, #120]	; (80107dc <sync_fs+0xdc>)
 8010762:	4618      	mov	r0, r3
 8010764:	f7ff fcbd 	bl	80100e2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	333c      	adds	r3, #60	; 0x3c
 801076c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	69db      	ldr	r3, [r3, #28]
 8010774:	4619      	mov	r1, r3
 8010776:	4610      	mov	r0, r2
 8010778:	f7ff fcb3 	bl	80100e2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	333c      	adds	r3, #60	; 0x3c
 8010780:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	699b      	ldr	r3, [r3, #24]
 8010788:	4619      	mov	r1, r3
 801078a:	4610      	mov	r0, r2
 801078c:	f7ff fca9 	bl	80100e2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010794:	1c5a      	adds	r2, r3, #1
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	7858      	ldrb	r0, [r3, #1]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107a8:	2301      	movs	r3, #1
 80107aa:	f7ff fb49 	bl	800fe40 <disk_write>
			fs->fsi_flag = 0;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	785b      	ldrb	r3, [r3, #1]
 80107b8:	2200      	movs	r2, #0
 80107ba:	2100      	movs	r1, #0
 80107bc:	4618      	mov	r0, r3
 80107be:	f7ff fb5f 	bl	800fe80 <disk_ioctl>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d001      	beq.n	80107cc <sync_fs+0xcc>
 80107c8:	2301      	movs	r3, #1
 80107ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80107cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3710      	adds	r7, #16
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	41615252 	.word	0x41615252
 80107dc:	61417272 	.word	0x61417272

080107e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b083      	sub	sp, #12
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	3b02      	subs	r3, #2
 80107ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6a1b      	ldr	r3, [r3, #32]
 80107f4:	3b02      	subs	r3, #2
 80107f6:	683a      	ldr	r2, [r7, #0]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d301      	bcc.n	8010800 <clust2sect+0x20>
 80107fc:	2300      	movs	r3, #0
 80107fe:	e008      	b.n	8010812 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	895b      	ldrh	r3, [r3, #10]
 8010804:	461a      	mov	r2, r3
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	fb03 f202 	mul.w	r2, r3, r2
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010810:	4413      	add	r3, r2
}
 8010812:	4618      	mov	r0, r3
 8010814:	370c      	adds	r7, #12
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr
	...

08010820 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010820:	b590      	push	{r4, r7, lr}
 8010822:	b089      	sub	sp, #36	; 0x24
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	2b01      	cmp	r3, #1
 8010834:	d904      	bls.n	8010840 <get_fat+0x20>
 8010836:	69bb      	ldr	r3, [r7, #24]
 8010838:	6a1b      	ldr	r3, [r3, #32]
 801083a:	683a      	ldr	r2, [r7, #0]
 801083c:	429a      	cmp	r2, r3
 801083e:	d302      	bcc.n	8010846 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010840:	2301      	movs	r3, #1
 8010842:	61fb      	str	r3, [r7, #28]
 8010844:	e13a      	b.n	8010abc <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010846:	f04f 33ff 	mov.w	r3, #4294967295
 801084a:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 801084c:	69bb      	ldr	r3, [r7, #24]
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	3b01      	subs	r3, #1
 8010852:	2b03      	cmp	r3, #3
 8010854:	f200 8126 	bhi.w	8010aa4 <get_fat+0x284>
 8010858:	a201      	add	r2, pc, #4	; (adr r2, 8010860 <get_fat+0x40>)
 801085a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801085e:	bf00      	nop
 8010860:	08010871 	.word	0x08010871
 8010864:	0801091f 	.word	0x0801091f
 8010868:	0801096b 	.word	0x0801096b
 801086c:	080109bb 	.word	0x080109bb
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	60fb      	str	r3, [r7, #12]
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	085b      	lsrs	r3, r3, #1
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	4413      	add	r3, r2
 801087c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010882:	69bb      	ldr	r3, [r7, #24]
 8010884:	899b      	ldrh	r3, [r3, #12]
 8010886:	4619      	mov	r1, r3
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	fbb3 f3f1 	udiv	r3, r3, r1
 801088e:	4413      	add	r3, r2
 8010890:	4619      	mov	r1, r3
 8010892:	69b8      	ldr	r0, [r7, #24]
 8010894:	f7ff ff06 	bl	80106a4 <move_window>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	f040 8105 	bne.w	8010aaa <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	1c5a      	adds	r2, r3, #1
 80108a4:	60fa      	str	r2, [r7, #12]
 80108a6:	69ba      	ldr	r2, [r7, #24]
 80108a8:	8992      	ldrh	r2, [r2, #12]
 80108aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80108ae:	fb02 f201 	mul.w	r2, r2, r1
 80108b2:	1a9b      	subs	r3, r3, r2
 80108b4:	69ba      	ldr	r2, [r7, #24]
 80108b6:	4413      	add	r3, r2
 80108b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	899b      	ldrh	r3, [r3, #12]
 80108c6:	4619      	mov	r1, r3
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80108ce:	4413      	add	r3, r2
 80108d0:	4619      	mov	r1, r3
 80108d2:	69b8      	ldr	r0, [r7, #24]
 80108d4:	f7ff fee6 	bl	80106a4 <move_window>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f040 80e7 	bne.w	8010aae <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80108e0:	69bb      	ldr	r3, [r7, #24]
 80108e2:	899b      	ldrh	r3, [r3, #12]
 80108e4:	461a      	mov	r2, r3
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80108ec:	fb02 f201 	mul.w	r2, r2, r1
 80108f0:	1a9b      	subs	r3, r3, r2
 80108f2:	69ba      	ldr	r2, [r7, #24]
 80108f4:	4413      	add	r3, r2
 80108f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108fa:	021b      	lsls	r3, r3, #8
 80108fc:	461a      	mov	r2, r3
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	4313      	orrs	r3, r2
 8010902:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	f003 0301 	and.w	r3, r3, #1
 801090a:	2b00      	cmp	r3, #0
 801090c:	d002      	beq.n	8010914 <get_fat+0xf4>
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	091b      	lsrs	r3, r3, #4
 8010912:	e002      	b.n	801091a <get_fat+0xfa>
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801091a:	61fb      	str	r3, [r7, #28]
			break;
 801091c:	e0ce      	b.n	8010abc <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010922:	69bb      	ldr	r3, [r7, #24]
 8010924:	899b      	ldrh	r3, [r3, #12]
 8010926:	085b      	lsrs	r3, r3, #1
 8010928:	b29b      	uxth	r3, r3
 801092a:	4619      	mov	r1, r3
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010932:	4413      	add	r3, r2
 8010934:	4619      	mov	r1, r3
 8010936:	69b8      	ldr	r0, [r7, #24]
 8010938:	f7ff feb4 	bl	80106a4 <move_window>
 801093c:	4603      	mov	r3, r0
 801093e:	2b00      	cmp	r3, #0
 8010940:	f040 80b7 	bne.w	8010ab2 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	005b      	lsls	r3, r3, #1
 801094e:	69ba      	ldr	r2, [r7, #24]
 8010950:	8992      	ldrh	r2, [r2, #12]
 8010952:	fbb3 f0f2 	udiv	r0, r3, r2
 8010956:	fb02 f200 	mul.w	r2, r2, r0
 801095a:	1a9b      	subs	r3, r3, r2
 801095c:	440b      	add	r3, r1
 801095e:	4618      	mov	r0, r3
 8010960:	f7ff faac 	bl	800febc <ld_word>
 8010964:	4603      	mov	r3, r0
 8010966:	61fb      	str	r3, [r7, #28]
			break;
 8010968:	e0a8      	b.n	8010abc <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801096a:	69bb      	ldr	r3, [r7, #24]
 801096c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801096e:	69bb      	ldr	r3, [r7, #24]
 8010970:	899b      	ldrh	r3, [r3, #12]
 8010972:	089b      	lsrs	r3, r3, #2
 8010974:	b29b      	uxth	r3, r3
 8010976:	4619      	mov	r1, r3
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	fbb3 f3f1 	udiv	r3, r3, r1
 801097e:	4413      	add	r3, r2
 8010980:	4619      	mov	r1, r3
 8010982:	69b8      	ldr	r0, [r7, #24]
 8010984:	f7ff fe8e 	bl	80106a4 <move_window>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	f040 8093 	bne.w	8010ab6 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010990:	69bb      	ldr	r3, [r7, #24]
 8010992:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	69ba      	ldr	r2, [r7, #24]
 801099c:	8992      	ldrh	r2, [r2, #12]
 801099e:	fbb3 f0f2 	udiv	r0, r3, r2
 80109a2:	fb02 f200 	mul.w	r2, r2, r0
 80109a6:	1a9b      	subs	r3, r3, r2
 80109a8:	440b      	add	r3, r1
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7ff fa9e 	bl	800feec <ld_dword>
 80109b0:	4603      	mov	r3, r0
 80109b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80109b6:	61fb      	str	r3, [r7, #28]
			break;
 80109b8:	e080      	b.n	8010abc <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80109c0:	4323      	orrs	r3, r4
 80109c2:	d06f      	beq.n	8010aa4 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	683a      	ldr	r2, [r7, #0]
 80109ca:	1ad3      	subs	r3, r2, r3
 80109cc:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80109d4:	f113 30ff 	adds.w	r0, r3, #4294967295
 80109d8:	f144 31ff 	adc.w	r1, r4, #4294967295
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	899b      	ldrh	r3, [r3, #12]
 80109e0:	b29b      	uxth	r3, r3
 80109e2:	f04f 0400 	mov.w	r4, #0
 80109e6:	461a      	mov	r2, r3
 80109e8:	4623      	mov	r3, r4
 80109ea:	f7ef fc75 	bl	80002d8 <__aeabi_uldivmod>
 80109ee:	4603      	mov	r3, r0
 80109f0:	460c      	mov	r4, r1
 80109f2:	461a      	mov	r2, r3
 80109f4:	69bb      	ldr	r3, [r7, #24]
 80109f6:	895b      	ldrh	r3, [r3, #10]
 80109f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80109fc:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	79db      	ldrb	r3, [r3, #7]
 8010a02:	2b02      	cmp	r3, #2
 8010a04:	d10e      	bne.n	8010a24 <get_fat+0x204>
					if (cofs <= clen) {
 8010a06:	697a      	ldr	r2, [r7, #20]
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d80a      	bhi.n	8010a24 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8010a0e:	697a      	ldr	r2, [r7, #20]
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d002      	beq.n	8010a1c <get_fat+0x1fc>
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	3301      	adds	r3, #1
 8010a1a:	e001      	b.n	8010a20 <get_fat+0x200>
 8010a1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010a20:	61fb      	str	r3, [r7, #28]
						break;
 8010a22:	e04b      	b.n	8010abc <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	79db      	ldrb	r3, [r3, #7]
 8010a28:	2b03      	cmp	r3, #3
 8010a2a:	d108      	bne.n	8010a3e <get_fat+0x21e>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	699b      	ldr	r3, [r3, #24]
 8010a30:	697a      	ldr	r2, [r7, #20]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d203      	bcs.n	8010a3e <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	3301      	adds	r3, #1
 8010a3a:	61fb      	str	r3, [r7, #28]
					break;
 8010a3c:	e03e      	b.n	8010abc <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	79db      	ldrb	r3, [r3, #7]
 8010a42:	2b02      	cmp	r3, #2
 8010a44:	d02e      	beq.n	8010aa4 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	69db      	ldr	r3, [r3, #28]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d003      	beq.n	8010a56 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8010a4e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010a52:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8010a54:	e032      	b.n	8010abc <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010a56:	69bb      	ldr	r3, [r7, #24]
 8010a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	899b      	ldrh	r3, [r3, #12]
 8010a5e:	089b      	lsrs	r3, r3, #2
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	4619      	mov	r1, r3
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a6a:	4413      	add	r3, r2
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	69b8      	ldr	r0, [r7, #24]
 8010a70:	f7ff fe18 	bl	80106a4 <move_window>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d11f      	bne.n	8010aba <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	69ba      	ldr	r2, [r7, #24]
 8010a86:	8992      	ldrh	r2, [r2, #12]
 8010a88:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a8c:	fb02 f200 	mul.w	r2, r2, r0
 8010a90:	1a9b      	subs	r3, r3, r2
 8010a92:	440b      	add	r3, r1
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7ff fa29 	bl	800feec <ld_dword>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010aa0:	61fb      	str	r3, [r7, #28]
					break;
 8010aa2:	e00b      	b.n	8010abc <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	61fb      	str	r3, [r7, #28]
 8010aa8:	e008      	b.n	8010abc <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010aaa:	bf00      	nop
 8010aac:	e006      	b.n	8010abc <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010aae:	bf00      	nop
 8010ab0:	e004      	b.n	8010abc <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010ab2:	bf00      	nop
 8010ab4:	e002      	b.n	8010abc <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ab6:	bf00      	nop
 8010ab8:	e000      	b.n	8010abc <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010aba:	bf00      	nop
		}
	}

	return val;
 8010abc:	69fb      	ldr	r3, [r7, #28]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3724      	adds	r7, #36	; 0x24
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd90      	pop	{r4, r7, pc}
 8010ac6:	bf00      	nop

08010ac8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010ac8:	b590      	push	{r4, r7, lr}
 8010aca:	b089      	sub	sp, #36	; 0x24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010ad4:	2302      	movs	r3, #2
 8010ad6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	2b01      	cmp	r3, #1
 8010adc:	f240 8111 	bls.w	8010d02 <put_fat+0x23a>
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	6a1b      	ldr	r3, [r3, #32]
 8010ae4:	68ba      	ldr	r2, [r7, #8]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	f080 810b 	bcs.w	8010d02 <put_fat+0x23a>
		switch (fs->fs_type) {
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	3b01      	subs	r3, #1
 8010af2:	2b03      	cmp	r3, #3
 8010af4:	f200 8105 	bhi.w	8010d02 <put_fat+0x23a>
 8010af8:	a201      	add	r2, pc, #4	; (adr r2, 8010b00 <put_fat+0x38>)
 8010afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010afe:	bf00      	nop
 8010b00:	08010b11 	.word	0x08010b11
 8010b04:	08010c15 	.word	0x08010c15
 8010b08:	08010c6b 	.word	0x08010c6b
 8010b0c:	08010c6b 	.word	0x08010c6b
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	61bb      	str	r3, [r7, #24]
 8010b14:	69bb      	ldr	r3, [r7, #24]
 8010b16:	085b      	lsrs	r3, r3, #1
 8010b18:	69ba      	ldr	r2, [r7, #24]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	899b      	ldrh	r3, [r3, #12]
 8010b26:	4619      	mov	r1, r3
 8010b28:	69bb      	ldr	r3, [r7, #24]
 8010b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b2e:	4413      	add	r3, r2
 8010b30:	4619      	mov	r1, r3
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f7ff fdb6 	bl	80106a4 <move_window>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b3c:	7ffb      	ldrb	r3, [r7, #31]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f040 80d8 	bne.w	8010cf4 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010b4a:	69bb      	ldr	r3, [r7, #24]
 8010b4c:	1c5a      	adds	r2, r3, #1
 8010b4e:	61ba      	str	r2, [r7, #24]
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	8992      	ldrh	r2, [r2, #12]
 8010b54:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b58:	fb02 f200 	mul.w	r2, r2, r0
 8010b5c:	1a9b      	subs	r3, r3, r2
 8010b5e:	440b      	add	r3, r1
 8010b60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	f003 0301 	and.w	r3, r3, #1
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d00d      	beq.n	8010b88 <put_fat+0xc0>
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	b25b      	sxtb	r3, r3
 8010b72:	f003 030f 	and.w	r3, r3, #15
 8010b76:	b25a      	sxtb	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	011b      	lsls	r3, r3, #4
 8010b7e:	b25b      	sxtb	r3, r3
 8010b80:	4313      	orrs	r3, r2
 8010b82:	b25b      	sxtb	r3, r3
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	e001      	b.n	8010b8c <put_fat+0xc4>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	697a      	ldr	r2, [r7, #20]
 8010b8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2201      	movs	r2, #1
 8010b94:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	899b      	ldrh	r3, [r3, #12]
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ba6:	4413      	add	r3, r2
 8010ba8:	4619      	mov	r1, r3
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	f7ff fd7a 	bl	80106a4 <move_window>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010bb4:	7ffb      	ldrb	r3, [r7, #31]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	f040 809e 	bne.w	8010cf8 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	899b      	ldrh	r3, [r3, #12]
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	69bb      	ldr	r3, [r7, #24]
 8010bca:	fbb3 f0f2 	udiv	r0, r3, r2
 8010bce:	fb02 f200 	mul.w	r2, r2, r0
 8010bd2:	1a9b      	subs	r3, r3, r2
 8010bd4:	440b      	add	r3, r1
 8010bd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	f003 0301 	and.w	r3, r3, #1
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d003      	beq.n	8010bea <put_fat+0x122>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	091b      	lsrs	r3, r3, #4
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	e00e      	b.n	8010c08 <put_fat+0x140>
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	b25b      	sxtb	r3, r3
 8010bf0:	f023 030f 	bic.w	r3, r3, #15
 8010bf4:	b25a      	sxtb	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	0a1b      	lsrs	r3, r3, #8
 8010bfa:	b25b      	sxtb	r3, r3
 8010bfc:	f003 030f 	and.w	r3, r3, #15
 8010c00:	b25b      	sxtb	r3, r3
 8010c02:	4313      	orrs	r3, r2
 8010c04:	b25b      	sxtb	r3, r3
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	697a      	ldr	r2, [r7, #20]
 8010c0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	2201      	movs	r2, #1
 8010c10:	70da      	strb	r2, [r3, #3]
			break;
 8010c12:	e076      	b.n	8010d02 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	899b      	ldrh	r3, [r3, #12]
 8010c1c:	085b      	lsrs	r3, r3, #1
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	4619      	mov	r1, r3
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c28:	4413      	add	r3, r2
 8010c2a:	4619      	mov	r1, r3
 8010c2c:	68f8      	ldr	r0, [r7, #12]
 8010c2e:	f7ff fd39 	bl	80106a4 <move_window>
 8010c32:	4603      	mov	r3, r0
 8010c34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c36:	7ffb      	ldrb	r3, [r7, #31]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d15f      	bne.n	8010cfc <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	005b      	lsls	r3, r3, #1
 8010c46:	68fa      	ldr	r2, [r7, #12]
 8010c48:	8992      	ldrh	r2, [r2, #12]
 8010c4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c4e:	fb02 f200 	mul.w	r2, r2, r0
 8010c52:	1a9b      	subs	r3, r3, r2
 8010c54:	440b      	add	r3, r1
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	b292      	uxth	r2, r2
 8010c5a:	4611      	mov	r1, r2
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff fa25 	bl	80100ac <st_word>
			fs->wflag = 1;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2201      	movs	r2, #1
 8010c66:	70da      	strb	r2, [r3, #3]
			break;
 8010c68:	e04b      	b.n	8010d02 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	899b      	ldrh	r3, [r3, #12]
 8010c72:	089b      	lsrs	r3, r3, #2
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	4619      	mov	r1, r3
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c7e:	4413      	add	r3, r2
 8010c80:	4619      	mov	r1, r3
 8010c82:	68f8      	ldr	r0, [r7, #12]
 8010c84:	f7ff fd0e 	bl	80106a4 <move_window>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c8c:	7ffb      	ldrb	r3, [r7, #31]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d136      	bne.n	8010d00 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	2b04      	cmp	r3, #4
 8010c98:	d017      	beq.n	8010cca <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	68fa      	ldr	r2, [r7, #12]
 8010cac:	8992      	ldrh	r2, [r2, #12]
 8010cae:	fbb3 f0f2 	udiv	r0, r3, r2
 8010cb2:	fb02 f200 	mul.w	r2, r2, r0
 8010cb6:	1a9b      	subs	r3, r3, r2
 8010cb8:	440b      	add	r3, r1
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7ff f916 	bl	800feec <ld_dword>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010cc6:	4323      	orrs	r3, r4
 8010cc8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	68fa      	ldr	r2, [r7, #12]
 8010cd6:	8992      	ldrh	r2, [r2, #12]
 8010cd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8010cdc:	fb02 f200 	mul.w	r2, r2, r0
 8010ce0:	1a9b      	subs	r3, r3, r2
 8010ce2:	440b      	add	r3, r1
 8010ce4:	6879      	ldr	r1, [r7, #4]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f7ff f9fb 	bl	80100e2 <st_dword>
			fs->wflag = 1;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2201      	movs	r2, #1
 8010cf0:	70da      	strb	r2, [r3, #3]
			break;
 8010cf2:	e006      	b.n	8010d02 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010cf4:	bf00      	nop
 8010cf6:	e004      	b.n	8010d02 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010cf8:	bf00      	nop
 8010cfa:	e002      	b.n	8010d02 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010cfc:	bf00      	nop
 8010cfe:	e000      	b.n	8010d02 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010d00:	bf00      	nop
		}
	}
	return res;
 8010d02:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3724      	adds	r7, #36	; 0x24
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd90      	pop	{r4, r7, pc}

08010d0c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b08a      	sub	sp, #40	; 0x28
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	60b9      	str	r1, [r7, #8]
 8010d16:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	3b02      	subs	r3, #2
 8010d1c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	6a1b      	ldr	r3, [r3, #32]
 8010d22:	3b02      	subs	r3, #2
 8010d24:	68ba      	ldr	r2, [r7, #8]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d301      	bcc.n	8010d2e <find_bitmap+0x22>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	61fb      	str	r3, [r7, #28]
 8010d32:	69fb      	ldr	r3, [r7, #28]
 8010d34:	61bb      	str	r3, [r7, #24]
 8010d36:	2300      	movs	r3, #0
 8010d38:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	08db      	lsrs	r3, r3, #3
 8010d42:	68f9      	ldr	r1, [r7, #12]
 8010d44:	8989      	ldrh	r1, [r1, #12]
 8010d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d4a:	4413      	add	r3, r2
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f7ff fca8 	bl	80106a4 <move_window>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d002      	beq.n	8010d60 <find_bitmap+0x54>
 8010d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d5e:	e058      	b.n	8010e12 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8010d60:	69fb      	ldr	r3, [r7, #28]
 8010d62:	08db      	lsrs	r3, r3, #3
 8010d64:	68fa      	ldr	r2, [r7, #12]
 8010d66:	8992      	ldrh	r2, [r2, #12]
 8010d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d6c:	fb02 f201 	mul.w	r2, r2, r1
 8010d70:	1a9b      	subs	r3, r3, r2
 8010d72:	623b      	str	r3, [r7, #32]
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	f003 0307 	and.w	r3, r3, #7
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8010d84:	68fa      	ldr	r2, [r7, #12]
 8010d86:	6a3b      	ldr	r3, [r7, #32]
 8010d88:	4413      	add	r3, r2
 8010d8a:	333c      	adds	r3, #60	; 0x3c
 8010d8c:	781a      	ldrb	r2, [r3, #0]
 8010d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d92:	4013      	ands	r3, r2
 8010d94:	74fb      	strb	r3, [r7, #19]
 8010d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d9a:	005b      	lsls	r3, r3, #1
 8010d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	3301      	adds	r3, #1
 8010da4:	61fb      	str	r3, [r7, #28]
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	6a1b      	ldr	r3, [r3, #32]
 8010daa:	3b02      	subs	r3, #2
 8010dac:	69fa      	ldr	r2, [r7, #28]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d307      	bcc.n	8010dc2 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8010db2:	2300      	movs	r3, #0
 8010db4:	61fb      	str	r3, [r7, #28]
 8010db6:	2300      	movs	r3, #0
 8010db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	899b      	ldrh	r3, [r3, #12]
 8010dc0:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8010dc2:	7cfb      	ldrb	r3, [r7, #19]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d109      	bne.n	8010ddc <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	3301      	adds	r3, #1
 8010dcc:	617b      	str	r3, [r7, #20]
 8010dce:	697a      	ldr	r2, [r7, #20]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d106      	bne.n	8010de4 <find_bitmap+0xd8>
 8010dd6:	69bb      	ldr	r3, [r7, #24]
 8010dd8:	3302      	adds	r3, #2
 8010dda:	e01a      	b.n	8010e12 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	61bb      	str	r3, [r7, #24]
 8010de0:	2300      	movs	r3, #0
 8010de2:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8010de4:	69fa      	ldr	r2, [r7, #28]
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d101      	bne.n	8010df0 <find_bitmap+0xe4>
 8010dec:	2300      	movs	r3, #0
 8010dee:	e010      	b.n	8010e12 <find_bitmap+0x106>
			} while (bm);
 8010df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d1c5      	bne.n	8010d84 <find_bitmap+0x78>
			bm = 1;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8010dfe:	6a3b      	ldr	r3, [r7, #32]
 8010e00:	3301      	adds	r3, #1
 8010e02:	623b      	str	r3, [r7, #32]
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	899b      	ldrh	r3, [r3, #12]
 8010e08:	461a      	mov	r2, r3
 8010e0a:	6a3b      	ldr	r3, [r7, #32]
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d3b9      	bcc.n	8010d84 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010e10:	e793      	b.n	8010d3a <find_bitmap+0x2e>
	}
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3728      	adds	r7, #40	; 0x28
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b088      	sub	sp, #32
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	60f8      	str	r0, [r7, #12]
 8010e22:	60b9      	str	r1, [r7, #8]
 8010e24:	607a      	str	r2, [r7, #4]
 8010e26:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	3b02      	subs	r3, #2
 8010e2c:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	08db      	lsrs	r3, r3, #3
 8010e36:	68f9      	ldr	r1, [r7, #12]
 8010e38:	8989      	ldrh	r1, [r1, #12]
 8010e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e3e:	4413      	add	r3, r2
 8010e40:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	08db      	lsrs	r3, r3, #3
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	8992      	ldrh	r2, [r2, #12]
 8010e4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e4e:	fb02 f201 	mul.w	r2, r2, r1
 8010e52:	1a9b      	subs	r3, r3, r2
 8010e54:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	f003 0307 	and.w	r3, r3, #7
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8010e62:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	1c5a      	adds	r2, r3, #1
 8010e68:	617a      	str	r2, [r7, #20]
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	68f8      	ldr	r0, [r7, #12]
 8010e6e:	f7ff fc19 	bl	80106a4 <move_window>
 8010e72:	4603      	mov	r3, r0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d001      	beq.n	8010e7c <change_bitmap+0x62>
 8010e78:	2301      	movs	r3, #1
 8010e7a:	e03f      	b.n	8010efc <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8010e7c:	68fa      	ldr	r2, [r7, #12]
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	4413      	add	r3, r2
 8010e82:	333c      	adds	r3, #60	; 0x3c
 8010e84:	781a      	ldrb	r2, [r3, #0]
 8010e86:	7ffb      	ldrb	r3, [r7, #31]
 8010e88:	4013      	ands	r3, r2
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	bf14      	ite	ne
 8010e90:	2301      	movne	r3, #1
 8010e92:	2300      	moveq	r3, #0
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	461a      	mov	r2, r3
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d101      	bne.n	8010ea2 <change_bitmap+0x88>
 8010e9e:	2302      	movs	r3, #2
 8010ea0:	e02c      	b.n	8010efc <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8010ea2:	68fa      	ldr	r2, [r7, #12]
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	4413      	add	r3, r2
 8010ea8:	333c      	adds	r3, #60	; 0x3c
 8010eaa:	781a      	ldrb	r2, [r3, #0]
 8010eac:	7ffb      	ldrb	r3, [r7, #31]
 8010eae:	4053      	eors	r3, r2
 8010eb0:	b2d9      	uxtb	r1, r3
 8010eb2:	68fa      	ldr	r2, [r7, #12]
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	4413      	add	r3, r2
 8010eb8:	333c      	adds	r3, #60	; 0x3c
 8010eba:	460a      	mov	r2, r1
 8010ebc:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	3b01      	subs	r3, #1
 8010ec8:	607b      	str	r3, [r7, #4]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d101      	bne.n	8010ed4 <change_bitmap+0xba>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	e013      	b.n	8010efc <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8010ed4:	7ffb      	ldrb	r3, [r7, #31]
 8010ed6:	005b      	lsls	r3, r3, #1
 8010ed8:	77fb      	strb	r3, [r7, #31]
 8010eda:	7ffb      	ldrb	r3, [r7, #31]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d1cd      	bne.n	8010e7c <change_bitmap+0x62>
			bm = 1;
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8010ee4:	69bb      	ldr	r3, [r7, #24]
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	61bb      	str	r3, [r7, #24]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	899b      	ldrh	r3, [r3, #12]
 8010eee:	461a      	mov	r2, r3
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d3c2      	bcc.n	8010e7c <change_bitmap+0x62>
		i = 0;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010efa:	e7b3      	b.n	8010e64 <change_bitmap+0x4a>
	}
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3720      	adds	r7, #32
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b086      	sub	sp, #24
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	79db      	ldrb	r3, [r3, #7]
 8010f10:	2b03      	cmp	r3, #3
 8010f12:	d121      	bne.n	8010f58 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	689b      	ldr	r3, [r3, #8]
 8010f18:	617b      	str	r3, [r7, #20]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	699b      	ldr	r3, [r3, #24]
 8010f1e:	613b      	str	r3, [r7, #16]
 8010f20:	e014      	b.n	8010f4c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6818      	ldr	r0, [r3, #0]
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	6979      	ldr	r1, [r7, #20]
 8010f2e:	f7ff fdcb 	bl	8010ac8 <put_fat>
 8010f32:	4603      	mov	r3, r0
 8010f34:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8010f36:	7bfb      	ldrb	r3, [r7, #15]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d001      	beq.n	8010f40 <fill_first_frag+0x3c>
 8010f3c:	7bfb      	ldrb	r3, [r7, #15]
 8010f3e:	e00c      	b.n	8010f5a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	3301      	adds	r3, #1
 8010f44:	617b      	str	r3, [r7, #20]
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	3b01      	subs	r3, #1
 8010f4a:	613b      	str	r3, [r7, #16]
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1e7      	bne.n	8010f22 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2200      	movs	r2, #0
 8010f56:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8010f58:	2300      	movs	r3, #0
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3718      	adds	r7, #24
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}

08010f62 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b086      	sub	sp, #24
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	60f8      	str	r0, [r7, #12]
 8010f6a:	60b9      	str	r1, [r7, #8]
 8010f6c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010f6e:	e020      	b.n	8010fb2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	6818      	ldr	r0, [r3, #0]
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	69db      	ldr	r3, [r3, #28]
 8010f78:	68ba      	ldr	r2, [r7, #8]
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	1c59      	adds	r1, r3, #1
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	69db      	ldr	r3, [r3, #28]
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d905      	bls.n	8010f92 <fill_last_frag+0x30>
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	69db      	ldr	r3, [r3, #28]
 8010f8a:	68ba      	ldr	r2, [r7, #8]
 8010f8c:	1ad3      	subs	r3, r2, r3
 8010f8e:	3302      	adds	r3, #2
 8010f90:	e000      	b.n	8010f94 <fill_last_frag+0x32>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	461a      	mov	r2, r3
 8010f96:	f7ff fd97 	bl	8010ac8 <put_fat>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8010f9e:	7dfb      	ldrb	r3, [r7, #23]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d001      	beq.n	8010fa8 <fill_last_frag+0x46>
 8010fa4:	7dfb      	ldrb	r3, [r7, #23]
 8010fa6:	e009      	b.n	8010fbc <fill_last_frag+0x5a>
		obj->n_frag--;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	69db      	ldr	r3, [r3, #28]
 8010fac:	1e5a      	subs	r2, r3, #1
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	69db      	ldr	r3, [r3, #28]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d1da      	bne.n	8010f70 <fill_last_frag+0xe>
	}
	return FR_OK;
 8010fba:	2300      	movs	r3, #0
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3718      	adds	r7, #24
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b08a      	sub	sp, #40	; 0x28
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	d904      	bls.n	8010ff2 <remove_chain+0x2e>
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	6a1b      	ldr	r3, [r3, #32]
 8010fec:	68ba      	ldr	r2, [r7, #8]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d301      	bcc.n	8010ff6 <remove_chain+0x32>
 8010ff2:	2302      	movs	r3, #2
 8010ff4:	e096      	b.n	8011124 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d014      	beq.n	8011026 <remove_chain+0x62>
 8010ffc:	69bb      	ldr	r3, [r7, #24]
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	2b04      	cmp	r3, #4
 8011002:	d103      	bne.n	801100c <remove_chain+0x48>
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	79db      	ldrb	r3, [r3, #7]
 8011008:	2b02      	cmp	r3, #2
 801100a:	d00c      	beq.n	8011026 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801100c:	f04f 32ff 	mov.w	r2, #4294967295
 8011010:	6879      	ldr	r1, [r7, #4]
 8011012:	69b8      	ldr	r0, [r7, #24]
 8011014:	f7ff fd58 	bl	8010ac8 <put_fat>
 8011018:	4603      	mov	r3, r0
 801101a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801101c:	7ffb      	ldrb	r3, [r7, #31]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d001      	beq.n	8011026 <remove_chain+0x62>
 8011022:	7ffb      	ldrb	r3, [r7, #31]
 8011024:	e07e      	b.n	8011124 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011026:	68b9      	ldr	r1, [r7, #8]
 8011028:	68f8      	ldr	r0, [r7, #12]
 801102a:	f7ff fbf9 	bl	8010820 <get_fat>
 801102e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d055      	beq.n	80110e2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	2b01      	cmp	r3, #1
 801103a:	d101      	bne.n	8011040 <remove_chain+0x7c>
 801103c:	2302      	movs	r3, #2
 801103e:	e071      	b.n	8011124 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011046:	d101      	bne.n	801104c <remove_chain+0x88>
 8011048:	2301      	movs	r3, #1
 801104a:	e06b      	b.n	8011124 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 801104c:	69bb      	ldr	r3, [r7, #24]
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	2b04      	cmp	r3, #4
 8011052:	d00b      	beq.n	801106c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011054:	2200      	movs	r2, #0
 8011056:	68b9      	ldr	r1, [r7, #8]
 8011058:	69b8      	ldr	r0, [r7, #24]
 801105a:	f7ff fd35 	bl	8010ac8 <put_fat>
 801105e:	4603      	mov	r3, r0
 8011060:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011062:	7ffb      	ldrb	r3, [r7, #31]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d001      	beq.n	801106c <remove_chain+0xa8>
 8011068:	7ffb      	ldrb	r3, [r7, #31]
 801106a:	e05b      	b.n	8011124 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801106c:	69bb      	ldr	r3, [r7, #24]
 801106e:	69da      	ldr	r2, [r3, #28]
 8011070:	69bb      	ldr	r3, [r7, #24]
 8011072:	6a1b      	ldr	r3, [r3, #32]
 8011074:	3b02      	subs	r3, #2
 8011076:	429a      	cmp	r2, r3
 8011078:	d20b      	bcs.n	8011092 <remove_chain+0xce>
			fs->free_clst++;
 801107a:	69bb      	ldr	r3, [r7, #24]
 801107c:	69db      	ldr	r3, [r3, #28]
 801107e:	1c5a      	adds	r2, r3, #1
 8011080:	69bb      	ldr	r3, [r7, #24]
 8011082:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8011084:	69bb      	ldr	r3, [r7, #24]
 8011086:	791b      	ldrb	r3, [r3, #4]
 8011088:	f043 0301 	orr.w	r3, r3, #1
 801108c:	b2da      	uxtb	r2, r3
 801108e:	69bb      	ldr	r3, [r7, #24]
 8011090:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8011092:	6a3b      	ldr	r3, [r7, #32]
 8011094:	3301      	adds	r3, #1
 8011096:	697a      	ldr	r2, [r7, #20]
 8011098:	429a      	cmp	r2, r3
 801109a:	d102      	bne.n	80110a2 <remove_chain+0xde>
			ecl = nxt;
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	623b      	str	r3, [r7, #32]
 80110a0:	e017      	b.n	80110d2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80110a2:	69bb      	ldr	r3, [r7, #24]
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	2b04      	cmp	r3, #4
 80110a8:	d10f      	bne.n	80110ca <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80110aa:	6a3a      	ldr	r2, [r7, #32]
 80110ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ae:	1ad3      	subs	r3, r2, r3
 80110b0:	1c5a      	adds	r2, r3, #1
 80110b2:	2300      	movs	r3, #0
 80110b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110b6:	69b8      	ldr	r0, [r7, #24]
 80110b8:	f7ff feaf 	bl	8010e1a <change_bitmap>
 80110bc:	4603      	mov	r3, r0
 80110be:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80110c0:	7ffb      	ldrb	r3, [r7, #31]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d001      	beq.n	80110ca <remove_chain+0x106>
 80110c6:	7ffb      	ldrb	r3, [r7, #31]
 80110c8:	e02c      	b.n	8011124 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	623b      	str	r3, [r7, #32]
 80110ce:	6a3b      	ldr	r3, [r7, #32]
 80110d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	6a1b      	ldr	r3, [r3, #32]
 80110da:	68ba      	ldr	r2, [r7, #8]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d3a2      	bcc.n	8011026 <remove_chain+0x62>
 80110e0:	e000      	b.n	80110e4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80110e2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 80110e4:	69bb      	ldr	r3, [r7, #24]
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	2b04      	cmp	r3, #4
 80110ea:	d11a      	bne.n	8011122 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d103      	bne.n	80110fa <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	2200      	movs	r2, #0
 80110f6:	71da      	strb	r2, [r3, #7]
 80110f8:	e013      	b.n	8011122 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	79db      	ldrb	r3, [r3, #7]
 80110fe:	2b03      	cmp	r3, #3
 8011100:	d10f      	bne.n	8011122 <remove_chain+0x15e>
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	689b      	ldr	r3, [r3, #8]
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	429a      	cmp	r2, r3
 801110a:	d30a      	bcc.n	8011122 <remove_chain+0x15e>
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	689a      	ldr	r2, [r3, #8]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	699b      	ldr	r3, [r3, #24]
 8011114:	4413      	add	r3, r2
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	429a      	cmp	r2, r3
 801111a:	d802      	bhi.n	8011122 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2202      	movs	r2, #2
 8011120:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8011122:	2300      	movs	r3, #0
}
 8011124:	4618      	mov	r0, r3
 8011126:	3728      	adds	r7, #40	; 0x28
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b088      	sub	sp, #32
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d10d      	bne.n	801115e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	699b      	ldr	r3, [r3, #24]
 8011146:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011148:	69bb      	ldr	r3, [r7, #24]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d004      	beq.n	8011158 <create_chain+0x2c>
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	6a1b      	ldr	r3, [r3, #32]
 8011152:	69ba      	ldr	r2, [r7, #24]
 8011154:	429a      	cmp	r2, r3
 8011156:	d31b      	bcc.n	8011190 <create_chain+0x64>
 8011158:	2301      	movs	r3, #1
 801115a:	61bb      	str	r3, [r7, #24]
 801115c:	e018      	b.n	8011190 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801115e:	6839      	ldr	r1, [r7, #0]
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f7ff fb5d 	bl	8010820 <get_fat>
 8011166:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2b01      	cmp	r3, #1
 801116c:	d801      	bhi.n	8011172 <create_chain+0x46>
 801116e:	2301      	movs	r3, #1
 8011170:	e0d9      	b.n	8011326 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011178:	d101      	bne.n	801117e <create_chain+0x52>
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	e0d3      	b.n	8011326 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	6a1b      	ldr	r3, [r3, #32]
 8011182:	68fa      	ldr	r2, [r7, #12]
 8011184:	429a      	cmp	r2, r3
 8011186:	d201      	bcs.n	801118c <create_chain+0x60>
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	e0cc      	b.n	8011326 <create_chain+0x1fa>
		scl = clst;
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	2b04      	cmp	r3, #4
 8011196:	d164      	bne.n	8011262 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8011198:	2201      	movs	r2, #1
 801119a:	69b9      	ldr	r1, [r7, #24]
 801119c:	6938      	ldr	r0, [r7, #16]
 801119e:	f7ff fdb5 	bl	8010d0c <find_bitmap>
 80111a2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d003      	beq.n	80111b2 <create_chain+0x86>
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b0:	d101      	bne.n	80111b6 <create_chain+0x8a>
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	e0b7      	b.n	8011326 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80111b6:	2301      	movs	r3, #1
 80111b8:	2201      	movs	r2, #1
 80111ba:	69f9      	ldr	r1, [r7, #28]
 80111bc:	6938      	ldr	r0, [r7, #16]
 80111be:	f7ff fe2c 	bl	8010e1a <change_bitmap>
 80111c2:	4603      	mov	r3, r0
 80111c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80111c6:	7dfb      	ldrb	r3, [r7, #23]
 80111c8:	2b02      	cmp	r3, #2
 80111ca:	d101      	bne.n	80111d0 <create_chain+0xa4>
 80111cc:	2301      	movs	r3, #1
 80111ce:	e0aa      	b.n	8011326 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80111d0:	7dfb      	ldrb	r3, [r7, #23]
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d102      	bne.n	80111dc <create_chain+0xb0>
 80111d6:	f04f 33ff 	mov.w	r3, #4294967295
 80111da:	e0a4      	b.n	8011326 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d103      	bne.n	80111ea <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2202      	movs	r2, #2
 80111e6:	71da      	strb	r2, [r3, #7]
 80111e8:	e011      	b.n	801120e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	79db      	ldrb	r3, [r3, #7]
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	d10d      	bne.n	801120e <create_chain+0xe2>
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	3301      	adds	r3, #1
 80111f6:	69fa      	ldr	r2, [r7, #28]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d008      	beq.n	801120e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	689b      	ldr	r3, [r3, #8]
 8011200:	69ba      	ldr	r2, [r7, #24]
 8011202:	1ad2      	subs	r2, r2, r3
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2203      	movs	r2, #3
 801120c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	79db      	ldrb	r3, [r3, #7]
 8011212:	2b02      	cmp	r3, #2
 8011214:	d064      	beq.n	80112e0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	3301      	adds	r3, #1
 801121a:	69fa      	ldr	r2, [r7, #28]
 801121c:	429a      	cmp	r2, r3
 801121e:	d10b      	bne.n	8011238 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	69db      	ldr	r3, [r3, #28]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d003      	beq.n	8011230 <create_chain+0x104>
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	69db      	ldr	r3, [r3, #28]
 801122c:	3301      	adds	r3, #1
 801122e:	e000      	b.n	8011232 <create_chain+0x106>
 8011230:	2302      	movs	r3, #2
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	61d3      	str	r3, [r2, #28]
 8011236:	e053      	b.n	80112e0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	69db      	ldr	r3, [r3, #28]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d102      	bne.n	8011246 <create_chain+0x11a>
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2201      	movs	r2, #1
 8011244:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8011246:	69fa      	ldr	r2, [r7, #28]
 8011248:	6839      	ldr	r1, [r7, #0]
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f7ff fe89 	bl	8010f62 <fill_last_frag>
 8011250:	4603      	mov	r3, r0
 8011252:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8011254:	7dfb      	ldrb	r3, [r7, #23]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d142      	bne.n	80112e0 <create_chain+0x1b4>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2201      	movs	r2, #1
 801125e:	61da      	str	r2, [r3, #28]
 8011260:	e03e      	b.n	80112e0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011262:	69bb      	ldr	r3, [r7, #24]
 8011264:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011266:	69fb      	ldr	r3, [r7, #28]
 8011268:	3301      	adds	r3, #1
 801126a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	6a1b      	ldr	r3, [r3, #32]
 8011270:	69fa      	ldr	r2, [r7, #28]
 8011272:	429a      	cmp	r2, r3
 8011274:	d307      	bcc.n	8011286 <create_chain+0x15a>
				ncl = 2;
 8011276:	2302      	movs	r3, #2
 8011278:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801127a:	69fa      	ldr	r2, [r7, #28]
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	429a      	cmp	r2, r3
 8011280:	d901      	bls.n	8011286 <create_chain+0x15a>
 8011282:	2300      	movs	r3, #0
 8011284:	e04f      	b.n	8011326 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011286:	69f9      	ldr	r1, [r7, #28]
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f7ff fac9 	bl	8010820 <get_fat>
 801128e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d00e      	beq.n	80112b4 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2b01      	cmp	r3, #1
 801129a:	d003      	beq.n	80112a4 <create_chain+0x178>
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112a2:	d101      	bne.n	80112a8 <create_chain+0x17c>
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	e03e      	b.n	8011326 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 80112a8:	69fa      	ldr	r2, [r7, #28]
 80112aa:	69bb      	ldr	r3, [r7, #24]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d1da      	bne.n	8011266 <create_chain+0x13a>
 80112b0:	2300      	movs	r3, #0
 80112b2:	e038      	b.n	8011326 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 80112b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80112b6:	f04f 32ff 	mov.w	r2, #4294967295
 80112ba:	69f9      	ldr	r1, [r7, #28]
 80112bc:	6938      	ldr	r0, [r7, #16]
 80112be:	f7ff fc03 	bl	8010ac8 <put_fat>
 80112c2:	4603      	mov	r3, r0
 80112c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80112c6:	7dfb      	ldrb	r3, [r7, #23]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d109      	bne.n	80112e0 <create_chain+0x1b4>
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d006      	beq.n	80112e0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80112d2:	69fa      	ldr	r2, [r7, #28]
 80112d4:	6839      	ldr	r1, [r7, #0]
 80112d6:	6938      	ldr	r0, [r7, #16]
 80112d8:	f7ff fbf6 	bl	8010ac8 <put_fat>
 80112dc:	4603      	mov	r3, r0
 80112de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80112e0:	7dfb      	ldrb	r3, [r7, #23]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d116      	bne.n	8011314 <create_chain+0x1e8>
		fs->last_clst = ncl;
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	69fa      	ldr	r2, [r7, #28]
 80112ea:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	69da      	ldr	r2, [r3, #28]
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	6a1b      	ldr	r3, [r3, #32]
 80112f4:	3b02      	subs	r3, #2
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d804      	bhi.n	8011304 <create_chain+0x1d8>
 80112fa:	693b      	ldr	r3, [r7, #16]
 80112fc:	69db      	ldr	r3, [r3, #28]
 80112fe:	1e5a      	subs	r2, r3, #1
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	791b      	ldrb	r3, [r3, #4]
 8011308:	f043 0301 	orr.w	r3, r3, #1
 801130c:	b2da      	uxtb	r2, r3
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	711a      	strb	r2, [r3, #4]
 8011312:	e007      	b.n	8011324 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011314:	7dfb      	ldrb	r3, [r7, #23]
 8011316:	2b01      	cmp	r3, #1
 8011318:	d102      	bne.n	8011320 <create_chain+0x1f4>
 801131a:	f04f 33ff 	mov.w	r3, #4294967295
 801131e:	e000      	b.n	8011322 <create_chain+0x1f6>
 8011320:	2301      	movs	r3, #1
 8011322:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011324:	69fb      	ldr	r3, [r7, #28]
}
 8011326:	4618      	mov	r0, r3
 8011328:	3720      	adds	r7, #32
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}

0801132e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801132e:	b590      	push	{r4, r7, lr}
 8011330:	b089      	sub	sp, #36	; 0x24
 8011332:	af00      	add	r7, sp, #0
 8011334:	60f8      	str	r0, [r7, #12]
 8011336:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011344:	3304      	adds	r3, #4
 8011346:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	899b      	ldrh	r3, [r3, #12]
 801134c:	b29b      	uxth	r3, r3
 801134e:	f04f 0400 	mov.w	r4, #0
 8011352:	461a      	mov	r2, r3
 8011354:	4623      	mov	r3, r4
 8011356:	e9d7 0100 	ldrd	r0, r1, [r7]
 801135a:	f7ee ffbd 	bl	80002d8 <__aeabi_uldivmod>
 801135e:	4603      	mov	r3, r0
 8011360:	460c      	mov	r4, r1
 8011362:	4618      	mov	r0, r3
 8011364:	4621      	mov	r1, r4
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	895b      	ldrh	r3, [r3, #10]
 801136a:	b29b      	uxth	r3, r3
 801136c:	f04f 0400 	mov.w	r4, #0
 8011370:	461a      	mov	r2, r3
 8011372:	4623      	mov	r3, r4
 8011374:	f7ee ffb0 	bl	80002d8 <__aeabi_uldivmod>
 8011378:	4603      	mov	r3, r0
 801137a:	460c      	mov	r4, r1
 801137c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	1d1a      	adds	r2, r3, #4
 8011382:	61ba      	str	r2, [r7, #24]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d101      	bne.n	8011392 <clmt_clust+0x64>
 801138e:	2300      	movs	r3, #0
 8011390:	e010      	b.n	80113b4 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 8011392:	69fa      	ldr	r2, [r7, #28]
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	429a      	cmp	r2, r3
 8011398:	d307      	bcc.n	80113aa <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 801139a:	69fa      	ldr	r2, [r7, #28]
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	61fb      	str	r3, [r7, #28]
 80113a2:	69bb      	ldr	r3, [r7, #24]
 80113a4:	3304      	adds	r3, #4
 80113a6:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80113a8:	e7e9      	b.n	801137e <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 80113aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	69fb      	ldr	r3, [r7, #28]
 80113b2:	4413      	add	r3, r2
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3724      	adds	r7, #36	; 0x24
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd90      	pop	{r4, r7, pc}

080113bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b086      	sub	sp, #24
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	2b04      	cmp	r3, #4
 80113d2:	d102      	bne.n	80113da <dir_sdi+0x1e>
 80113d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113d8:	e001      	b.n	80113de <dir_sdi+0x22>
 80113da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d904      	bls.n	80113ee <dir_sdi+0x32>
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	f003 031f 	and.w	r3, r3, #31
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d001      	beq.n	80113f2 <dir_sdi+0x36>
		return FR_INT_ERR;
 80113ee:	2302      	movs	r3, #2
 80113f0:	e074      	b.n	80114dc <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	683a      	ldr	r2, [r7, #0]
 80113f6:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	689b      	ldr	r3, [r3, #8]
 80113fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d109      	bne.n	8011418 <dir_sdi+0x5c>
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	2b02      	cmp	r3, #2
 801140a:	d905      	bls.n	8011418 <dir_sdi+0x5c>
		clst = fs->dirbase;
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011410:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2200      	movs	r2, #0
 8011416:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d10c      	bne.n	8011438 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	095b      	lsrs	r3, r3, #5
 8011422:	693a      	ldr	r2, [r7, #16]
 8011424:	8912      	ldrh	r2, [r2, #8]
 8011426:	4293      	cmp	r3, r2
 8011428:	d301      	bcc.n	801142e <dir_sdi+0x72>
 801142a:	2302      	movs	r3, #2
 801142c:	e056      	b.n	80114dc <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	639a      	str	r2, [r3, #56]	; 0x38
 8011436:	e02d      	b.n	8011494 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	895b      	ldrh	r3, [r3, #10]
 801143c:	461a      	mov	r2, r3
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	899b      	ldrh	r3, [r3, #12]
 8011442:	fb03 f302 	mul.w	r3, r3, r2
 8011446:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011448:	e019      	b.n	801147e <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6979      	ldr	r1, [r7, #20]
 801144e:	4618      	mov	r0, r3
 8011450:	f7ff f9e6 	bl	8010820 <get_fat>
 8011454:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801145c:	d101      	bne.n	8011462 <dir_sdi+0xa6>
 801145e:	2301      	movs	r3, #1
 8011460:	e03c      	b.n	80114dc <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	2b01      	cmp	r3, #1
 8011466:	d904      	bls.n	8011472 <dir_sdi+0xb6>
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	6a1b      	ldr	r3, [r3, #32]
 801146c:	697a      	ldr	r2, [r7, #20]
 801146e:	429a      	cmp	r2, r3
 8011470:	d301      	bcc.n	8011476 <dir_sdi+0xba>
 8011472:	2302      	movs	r3, #2
 8011474:	e032      	b.n	80114dc <dir_sdi+0x120>
			ofs -= csz;
 8011476:	683a      	ldr	r2, [r7, #0]
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	1ad3      	subs	r3, r2, r3
 801147c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801147e:	683a      	ldr	r2, [r7, #0]
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	429a      	cmp	r2, r3
 8011484:	d2e1      	bcs.n	801144a <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8011486:	6979      	ldr	r1, [r7, #20]
 8011488:	6938      	ldr	r0, [r7, #16]
 801148a:	f7ff f9a9 	bl	80107e0 <clust2sect>
 801148e:	4602      	mov	r2, r0
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	697a      	ldr	r2, [r7, #20]
 8011498:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d101      	bne.n	80114a6 <dir_sdi+0xea>
 80114a2:	2302      	movs	r3, #2
 80114a4:	e01a      	b.n	80114dc <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	899b      	ldrh	r3, [r3, #12]
 80114ae:	4619      	mov	r1, r3
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80114b6:	441a      	add	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	899b      	ldrh	r3, [r3, #12]
 80114c6:	461a      	mov	r2, r3
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80114ce:	fb02 f200 	mul.w	r2, r2, r0
 80114d2:	1a9b      	subs	r3, r3, r2
 80114d4:	18ca      	adds	r2, r1, r3
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80114da:	2300      	movs	r3, #0
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3718      	adds	r7, #24
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b086      	sub	sp, #24
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114f8:	3320      	adds	r3, #32
 80114fa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011500:	2b00      	cmp	r3, #0
 8011502:	d00b      	beq.n	801151c <dir_next+0x38>
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	2b04      	cmp	r3, #4
 801150a:	d102      	bne.n	8011512 <dir_next+0x2e>
 801150c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011510:	e001      	b.n	8011516 <dir_next+0x32>
 8011512:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	429a      	cmp	r2, r3
 801151a:	d801      	bhi.n	8011520 <dir_next+0x3c>
 801151c:	2304      	movs	r3, #4
 801151e:	e0c3      	b.n	80116a8 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	899b      	ldrh	r3, [r3, #12]
 8011524:	461a      	mov	r2, r3
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	fbb3 f1f2 	udiv	r1, r3, r2
 801152c:	fb02 f201 	mul.w	r2, r2, r1
 8011530:	1a9b      	subs	r3, r3, r2
 8011532:	2b00      	cmp	r3, #0
 8011534:	f040 80a5 	bne.w	8011682 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801153c:	1c5a      	adds	r2, r3, #1
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011546:	2b00      	cmp	r3, #0
 8011548:	d10b      	bne.n	8011562 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	095b      	lsrs	r3, r3, #5
 801154e:	68fa      	ldr	r2, [r7, #12]
 8011550:	8912      	ldrh	r2, [r2, #8]
 8011552:	4293      	cmp	r3, r2
 8011554:	f0c0 8095 	bcc.w	8011682 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2200      	movs	r2, #0
 801155c:	639a      	str	r2, [r3, #56]	; 0x38
 801155e:	2304      	movs	r3, #4
 8011560:	e0a2      	b.n	80116a8 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	899b      	ldrh	r3, [r3, #12]
 8011566:	461a      	mov	r2, r3
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	fbb3 f3f2 	udiv	r3, r3, r2
 801156e:	68fa      	ldr	r2, [r7, #12]
 8011570:	8952      	ldrh	r2, [r2, #10]
 8011572:	3a01      	subs	r2, #1
 8011574:	4013      	ands	r3, r2
 8011576:	2b00      	cmp	r3, #0
 8011578:	f040 8083 	bne.w	8011682 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801157c:	687a      	ldr	r2, [r7, #4]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011582:	4619      	mov	r1, r3
 8011584:	4610      	mov	r0, r2
 8011586:	f7ff f94b 	bl	8010820 <get_fat>
 801158a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	2b01      	cmp	r3, #1
 8011590:	d801      	bhi.n	8011596 <dir_next+0xb2>
 8011592:	2302      	movs	r3, #2
 8011594:	e088      	b.n	80116a8 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801159c:	d101      	bne.n	80115a2 <dir_next+0xbe>
 801159e:	2301      	movs	r3, #1
 80115a0:	e082      	b.n	80116a8 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	6a1b      	ldr	r3, [r3, #32]
 80115a6:	697a      	ldr	r2, [r7, #20]
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d360      	bcc.n	801166e <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d104      	bne.n	80115bc <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	639a      	str	r2, [r3, #56]	; 0x38
 80115b8:	2304      	movs	r3, #4
 80115ba:	e075      	b.n	80116a8 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80115bc:	687a      	ldr	r2, [r7, #4]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115c2:	4619      	mov	r1, r3
 80115c4:	4610      	mov	r0, r2
 80115c6:	f7ff fdb1 	bl	801112c <create_chain>
 80115ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d101      	bne.n	80115d6 <dir_next+0xf2>
 80115d2:	2307      	movs	r3, #7
 80115d4:	e068      	b.n	80116a8 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d101      	bne.n	80115e0 <dir_next+0xfc>
 80115dc:	2302      	movs	r3, #2
 80115de:	e063      	b.n	80116a8 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e6:	d101      	bne.n	80115ec <dir_next+0x108>
 80115e8:	2301      	movs	r3, #1
 80115ea:	e05d      	b.n	80116a8 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	79db      	ldrb	r3, [r3, #7]
 80115f0:	f043 0304 	orr.w	r3, r3, #4
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f7ff f80e 	bl	801061c <sync_window>
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	d001      	beq.n	801160a <dir_next+0x126>
 8011606:	2301      	movs	r3, #1
 8011608:	e04e      	b.n	80116a8 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	899b      	ldrh	r3, [r3, #12]
 8011614:	461a      	mov	r2, r3
 8011616:	2100      	movs	r1, #0
 8011618:	f7fe fe37 	bl	801028a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801161c:	2300      	movs	r3, #0
 801161e:	613b      	str	r3, [r7, #16]
 8011620:	6979      	ldr	r1, [r7, #20]
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	f7ff f8dc 	bl	80107e0 <clust2sect>
 8011628:	4602      	mov	r2, r0
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	639a      	str	r2, [r3, #56]	; 0x38
 801162e:	e012      	b.n	8011656 <dir_next+0x172>
						fs->wflag = 1;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2201      	movs	r2, #1
 8011634:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011636:	68f8      	ldr	r0, [r7, #12]
 8011638:	f7fe fff0 	bl	801061c <sync_window>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	d001      	beq.n	8011646 <dir_next+0x162>
 8011642:	2301      	movs	r3, #1
 8011644:	e030      	b.n	80116a8 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	3301      	adds	r3, #1
 801164a:	613b      	str	r3, [r7, #16]
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011650:	1c5a      	adds	r2, r3, #1
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	639a      	str	r2, [r3, #56]	; 0x38
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	895b      	ldrh	r3, [r3, #10]
 801165a:	461a      	mov	r2, r3
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	4293      	cmp	r3, r2
 8011660:	d3e6      	bcc.n	8011630 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	1ad2      	subs	r2, r2, r3
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	697a      	ldr	r2, [r7, #20]
 8011672:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8011674:	6979      	ldr	r1, [r7, #20]
 8011676:	68f8      	ldr	r0, [r7, #12]
 8011678:	f7ff f8b2 	bl	80107e0 <clust2sect>
 801167c:	4602      	mov	r2, r0
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	68ba      	ldr	r2, [r7, #8]
 8011686:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	899b      	ldrh	r3, [r3, #12]
 8011692:	461a      	mov	r2, r3
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	fbb3 f0f2 	udiv	r0, r3, r2
 801169a:	fb02 f200 	mul.w	r2, r2, r0
 801169e:	1a9b      	subs	r3, r3, r2
 80116a0:	18ca      	adds	r2, r1, r3
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80116a6:	2300      	movs	r3, #0
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3718      	adds	r7, #24
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b086      	sub	sp, #24
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80116c0:	2100      	movs	r1, #0
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f7ff fe7a 	bl	80113bc <dir_sdi>
 80116c8:	4603      	mov	r3, r0
 80116ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80116cc:	7dfb      	ldrb	r3, [r7, #23]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d140      	bne.n	8011754 <dir_alloc+0xa4>
		n = 0;
 80116d2:	2300      	movs	r3, #0
 80116d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116da:	4619      	mov	r1, r3
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f7fe ffe1 	bl	80106a4 <move_window>
 80116e2:	4603      	mov	r3, r0
 80116e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80116e6:	7dfb      	ldrb	r3, [r7, #23]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d132      	bne.n	8011752 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	2b04      	cmp	r3, #4
 80116f2:	d108      	bne.n	8011706 <dir_alloc+0x56>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	b25b      	sxtb	r3, r3
 80116fc:	43db      	mvns	r3, r3
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	09db      	lsrs	r3, r3, #7
 8011702:	b2db      	uxtb	r3, r3
 8011704:	e00f      	b.n	8011726 <dir_alloc+0x76>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	2be5      	cmp	r3, #229	; 0xe5
 801170e:	d004      	beq.n	801171a <dir_alloc+0x6a>
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d101      	bne.n	801171e <dir_alloc+0x6e>
 801171a:	2301      	movs	r3, #1
 801171c:	e000      	b.n	8011720 <dir_alloc+0x70>
 801171e:	2300      	movs	r3, #0
 8011720:	f003 0301 	and.w	r3, r3, #1
 8011724:	b2db      	uxtb	r3, r3
 8011726:	2b00      	cmp	r3, #0
 8011728:	d007      	beq.n	801173a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	3301      	adds	r3, #1
 801172e:	613b      	str	r3, [r7, #16]
 8011730:	693a      	ldr	r2, [r7, #16]
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	429a      	cmp	r2, r3
 8011736:	d102      	bne.n	801173e <dir_alloc+0x8e>
 8011738:	e00c      	b.n	8011754 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801173a:	2300      	movs	r3, #0
 801173c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801173e:	2101      	movs	r1, #1
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7ff fecf 	bl	80114e4 <dir_next>
 8011746:	4603      	mov	r3, r0
 8011748:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801174a:	7dfb      	ldrb	r3, [r7, #23]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d0c2      	beq.n	80116d6 <dir_alloc+0x26>
 8011750:	e000      	b.n	8011754 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8011752:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011754:	7dfb      	ldrb	r3, [r7, #23]
 8011756:	2b04      	cmp	r3, #4
 8011758:	d101      	bne.n	801175e <dir_alloc+0xae>
 801175a:	2307      	movs	r3, #7
 801175c:	75fb      	strb	r3, [r7, #23]
	return res;
 801175e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011760:	4618      	mov	r0, r3
 8011762:	3718      	adds	r7, #24
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	331a      	adds	r3, #26
 8011776:	4618      	mov	r0, r3
 8011778:	f7fe fba0 	bl	800febc <ld_word>
 801177c:	4603      	mov	r3, r0
 801177e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	2b03      	cmp	r3, #3
 8011786:	d109      	bne.n	801179c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	3314      	adds	r3, #20
 801178c:	4618      	mov	r0, r3
 801178e:	f7fe fb95 	bl	800febc <ld_word>
 8011792:	4603      	mov	r3, r0
 8011794:	041b      	lsls	r3, r3, #16
 8011796:	68fa      	ldr	r2, [r7, #12]
 8011798:	4313      	orrs	r3, r2
 801179a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801179c:	68fb      	ldr	r3, [r7, #12]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3710      	adds	r7, #16
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b084      	sub	sp, #16
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	60f8      	str	r0, [r7, #12]
 80117ae:	60b9      	str	r1, [r7, #8]
 80117b0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	331a      	adds	r3, #26
 80117b6:	687a      	ldr	r2, [r7, #4]
 80117b8:	b292      	uxth	r2, r2
 80117ba:	4611      	mov	r1, r2
 80117bc:	4618      	mov	r0, r3
 80117be:	f7fe fc75 	bl	80100ac <st_word>
	if (fs->fs_type == FS_FAT32) {
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	2b03      	cmp	r3, #3
 80117c8:	d109      	bne.n	80117de <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	f103 0214 	add.w	r2, r3, #20
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	0c1b      	lsrs	r3, r3, #16
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	4619      	mov	r1, r3
 80117d8:	4610      	mov	r0, r2
 80117da:	f7fe fc67 	bl	80100ac <st_word>
	}
}
 80117de:	bf00      	nop
 80117e0:	3710      	adds	r7, #16
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}
	...

080117e8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80117e8:	b590      	push	{r4, r7, lr}
 80117ea:	b087      	sub	sp, #28
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	331a      	adds	r3, #26
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7fe fb60 	bl	800febc <ld_word>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d001      	beq.n	8011806 <cmp_lfn+0x1e>
 8011802:	2300      	movs	r3, #0
 8011804:	e059      	b.n	80118ba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801180e:	1e5a      	subs	r2, r3, #1
 8011810:	4613      	mov	r3, r2
 8011812:	005b      	lsls	r3, r3, #1
 8011814:	4413      	add	r3, r2
 8011816:	009b      	lsls	r3, r3, #2
 8011818:	4413      	add	r3, r2
 801181a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801181c:	2301      	movs	r3, #1
 801181e:	81fb      	strh	r3, [r7, #14]
 8011820:	2300      	movs	r3, #0
 8011822:	613b      	str	r3, [r7, #16]
 8011824:	e033      	b.n	801188e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011826:	4a27      	ldr	r2, [pc, #156]	; (80118c4 <cmp_lfn+0xdc>)
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	4413      	add	r3, r2
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	461a      	mov	r2, r3
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	4413      	add	r3, r2
 8011834:	4618      	mov	r0, r3
 8011836:	f7fe fb41 	bl	800febc <ld_word>
 801183a:	4603      	mov	r3, r0
 801183c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801183e:	89fb      	ldrh	r3, [r7, #14]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d01a      	beq.n	801187a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	2bfe      	cmp	r3, #254	; 0xfe
 8011848:	d812      	bhi.n	8011870 <cmp_lfn+0x88>
 801184a:	89bb      	ldrh	r3, [r7, #12]
 801184c:	4618      	mov	r0, r3
 801184e:	f002 fd0f 	bl	8014270 <ff_wtoupper>
 8011852:	4603      	mov	r3, r0
 8011854:	461c      	mov	r4, r3
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	1c5a      	adds	r2, r3, #1
 801185a:	617a      	str	r2, [r7, #20]
 801185c:	005b      	lsls	r3, r3, #1
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	4413      	add	r3, r2
 8011862:	881b      	ldrh	r3, [r3, #0]
 8011864:	4618      	mov	r0, r3
 8011866:	f002 fd03 	bl	8014270 <ff_wtoupper>
 801186a:	4603      	mov	r3, r0
 801186c:	429c      	cmp	r4, r3
 801186e:	d001      	beq.n	8011874 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011870:	2300      	movs	r3, #0
 8011872:	e022      	b.n	80118ba <cmp_lfn+0xd2>
			}
			wc = uc;
 8011874:	89bb      	ldrh	r3, [r7, #12]
 8011876:	81fb      	strh	r3, [r7, #14]
 8011878:	e006      	b.n	8011888 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801187a:	89bb      	ldrh	r3, [r7, #12]
 801187c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011880:	4293      	cmp	r3, r2
 8011882:	d001      	beq.n	8011888 <cmp_lfn+0xa0>
 8011884:	2300      	movs	r3, #0
 8011886:	e018      	b.n	80118ba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	3301      	adds	r3, #1
 801188c:	613b      	str	r3, [r7, #16]
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	2b0c      	cmp	r3, #12
 8011892:	d9c8      	bls.n	8011826 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801189c:	2b00      	cmp	r3, #0
 801189e:	d00b      	beq.n	80118b8 <cmp_lfn+0xd0>
 80118a0:	89fb      	ldrh	r3, [r7, #14]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d008      	beq.n	80118b8 <cmp_lfn+0xd0>
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	005b      	lsls	r3, r3, #1
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	4413      	add	r3, r2
 80118ae:	881b      	ldrh	r3, [r3, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d001      	beq.n	80118b8 <cmp_lfn+0xd0>
 80118b4:	2300      	movs	r3, #0
 80118b6:	e000      	b.n	80118ba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80118b8:	2301      	movs	r3, #1
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	371c      	adds	r7, #28
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd90      	pop	{r4, r7, pc}
 80118c2:	bf00      	nop
 80118c4:	08014588 	.word	0x08014588

080118c8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b086      	sub	sp, #24
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	331a      	adds	r3, #26
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fe faf0 	bl	800febc <ld_word>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d001      	beq.n	80118e6 <pick_lfn+0x1e>
 80118e2:	2300      	movs	r3, #0
 80118e4:	e04d      	b.n	8011982 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80118ee:	1e5a      	subs	r2, r3, #1
 80118f0:	4613      	mov	r3, r2
 80118f2:	005b      	lsls	r3, r3, #1
 80118f4:	4413      	add	r3, r2
 80118f6:	009b      	lsls	r3, r3, #2
 80118f8:	4413      	add	r3, r2
 80118fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80118fc:	2301      	movs	r3, #1
 80118fe:	81fb      	strh	r3, [r7, #14]
 8011900:	2300      	movs	r3, #0
 8011902:	613b      	str	r3, [r7, #16]
 8011904:	e028      	b.n	8011958 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011906:	4a21      	ldr	r2, [pc, #132]	; (801198c <pick_lfn+0xc4>)
 8011908:	693b      	ldr	r3, [r7, #16]
 801190a:	4413      	add	r3, r2
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	461a      	mov	r2, r3
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	4413      	add	r3, r2
 8011914:	4618      	mov	r0, r3
 8011916:	f7fe fad1 	bl	800febc <ld_word>
 801191a:	4603      	mov	r3, r0
 801191c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801191e:	89fb      	ldrh	r3, [r7, #14]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d00f      	beq.n	8011944 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	2bfe      	cmp	r3, #254	; 0xfe
 8011928:	d901      	bls.n	801192e <pick_lfn+0x66>
 801192a:	2300      	movs	r3, #0
 801192c:	e029      	b.n	8011982 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801192e:	89bb      	ldrh	r3, [r7, #12]
 8011930:	81fb      	strh	r3, [r7, #14]
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	1c5a      	adds	r2, r3, #1
 8011936:	617a      	str	r2, [r7, #20]
 8011938:	005b      	lsls	r3, r3, #1
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	4413      	add	r3, r2
 801193e:	89fa      	ldrh	r2, [r7, #14]
 8011940:	801a      	strh	r2, [r3, #0]
 8011942:	e006      	b.n	8011952 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011944:	89bb      	ldrh	r3, [r7, #12]
 8011946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801194a:	4293      	cmp	r3, r2
 801194c:	d001      	beq.n	8011952 <pick_lfn+0x8a>
 801194e:	2300      	movs	r3, #0
 8011950:	e017      	b.n	8011982 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	3301      	adds	r3, #1
 8011956:	613b      	str	r3, [r7, #16]
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	2b0c      	cmp	r3, #12
 801195c:	d9d3      	bls.n	8011906 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00a      	beq.n	8011980 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	2bfe      	cmp	r3, #254	; 0xfe
 801196e:	d901      	bls.n	8011974 <pick_lfn+0xac>
 8011970:	2300      	movs	r3, #0
 8011972:	e006      	b.n	8011982 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	005b      	lsls	r3, r3, #1
 8011978:	687a      	ldr	r2, [r7, #4]
 801197a:	4413      	add	r3, r2
 801197c:	2200      	movs	r2, #0
 801197e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011980:	2301      	movs	r3, #1
}
 8011982:	4618      	mov	r0, r3
 8011984:	3718      	adds	r7, #24
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	08014588 	.word	0x08014588

08011990 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b088      	sub	sp, #32
 8011994:	af00      	add	r7, sp, #0
 8011996:	60f8      	str	r0, [r7, #12]
 8011998:	60b9      	str	r1, [r7, #8]
 801199a:	4611      	mov	r1, r2
 801199c:	461a      	mov	r2, r3
 801199e:	460b      	mov	r3, r1
 80119a0:	71fb      	strb	r3, [r7, #7]
 80119a2:	4613      	mov	r3, r2
 80119a4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	330d      	adds	r3, #13
 80119aa:	79ba      	ldrb	r2, [r7, #6]
 80119ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	330b      	adds	r3, #11
 80119b2:	220f      	movs	r2, #15
 80119b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	330c      	adds	r3, #12
 80119ba:	2200      	movs	r2, #0
 80119bc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	331a      	adds	r3, #26
 80119c2:	2100      	movs	r1, #0
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7fe fb71 	bl	80100ac <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80119ca:	79fb      	ldrb	r3, [r7, #7]
 80119cc:	1e5a      	subs	r2, r3, #1
 80119ce:	4613      	mov	r3, r2
 80119d0:	005b      	lsls	r3, r3, #1
 80119d2:	4413      	add	r3, r2
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	4413      	add	r3, r2
 80119d8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80119da:	2300      	movs	r3, #0
 80119dc:	82fb      	strh	r3, [r7, #22]
 80119de:	2300      	movs	r3, #0
 80119e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80119e2:	8afb      	ldrh	r3, [r7, #22]
 80119e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d007      	beq.n	80119fc <put_lfn+0x6c>
 80119ec:	69fb      	ldr	r3, [r7, #28]
 80119ee:	1c5a      	adds	r2, r3, #1
 80119f0:	61fa      	str	r2, [r7, #28]
 80119f2:	005b      	lsls	r3, r3, #1
 80119f4:	68fa      	ldr	r2, [r7, #12]
 80119f6:	4413      	add	r3, r2
 80119f8:	881b      	ldrh	r3, [r3, #0]
 80119fa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80119fc:	4a17      	ldr	r2, [pc, #92]	; (8011a5c <put_lfn+0xcc>)
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	4413      	add	r3, r2
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	461a      	mov	r2, r3
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	4413      	add	r3, r2
 8011a0a:	8afa      	ldrh	r2, [r7, #22]
 8011a0c:	4611      	mov	r1, r2
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7fe fb4c 	bl	80100ac <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011a14:	8afb      	ldrh	r3, [r7, #22]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d102      	bne.n	8011a20 <put_lfn+0x90>
 8011a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a1e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011a20:	69bb      	ldr	r3, [r7, #24]
 8011a22:	3301      	adds	r3, #1
 8011a24:	61bb      	str	r3, [r7, #24]
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	2b0c      	cmp	r3, #12
 8011a2a:	d9da      	bls.n	80119e2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011a2c:	8afb      	ldrh	r3, [r7, #22]
 8011a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a32:	4293      	cmp	r3, r2
 8011a34:	d006      	beq.n	8011a44 <put_lfn+0xb4>
 8011a36:	69fb      	ldr	r3, [r7, #28]
 8011a38:	005b      	lsls	r3, r3, #1
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	881b      	ldrh	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d103      	bne.n	8011a4c <put_lfn+0xbc>
 8011a44:	79fb      	ldrb	r3, [r7, #7]
 8011a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a4a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	79fa      	ldrb	r2, [r7, #7]
 8011a50:	701a      	strb	r2, [r3, #0]
}
 8011a52:	bf00      	nop
 8011a54:	3720      	adds	r7, #32
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	08014588 	.word	0x08014588

08011a60 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b08c      	sub	sp, #48	; 0x30
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	607a      	str	r2, [r7, #4]
 8011a6c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011a6e:	220b      	movs	r2, #11
 8011a70:	68b9      	ldr	r1, [r7, #8]
 8011a72:	68f8      	ldr	r0, [r7, #12]
 8011a74:	f7fe fbe8 	bl	8010248 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	2b05      	cmp	r3, #5
 8011a7c:	d929      	bls.n	8011ad2 <gen_numname+0x72>
		sr = seq;
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011a82:	e020      	b.n	8011ac6 <gen_numname+0x66>
			wc = *lfn++;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	1c9a      	adds	r2, r3, #2
 8011a88:	607a      	str	r2, [r7, #4]
 8011a8a:	881b      	ldrh	r3, [r3, #0]
 8011a8c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011a8e:	2300      	movs	r3, #0
 8011a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a92:	e015      	b.n	8011ac0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	005a      	lsls	r2, r3, #1
 8011a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a9a:	f003 0301 	and.w	r3, r3, #1
 8011a9e:	4413      	add	r3, r2
 8011aa0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011aa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011aa4:	085b      	lsrs	r3, r3, #1
 8011aa6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d003      	beq.n	8011aba <gen_numname+0x5a>
 8011ab2:	69fa      	ldr	r2, [r7, #28]
 8011ab4:	4b31      	ldr	r3, [pc, #196]	; (8011b7c <gen_numname+0x11c>)
 8011ab6:	4053      	eors	r3, r2
 8011ab8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011abc:	3301      	adds	r3, #1
 8011abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac2:	2b0f      	cmp	r3, #15
 8011ac4:	d9e6      	bls.n	8011a94 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	881b      	ldrh	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d1da      	bne.n	8011a84 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011ace:	69fb      	ldr	r3, [r7, #28]
 8011ad0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011ad2:	2307      	movs	r3, #7
 8011ad4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	f003 030f 	and.w	r3, r3, #15
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	3330      	adds	r3, #48	; 0x30
 8011ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011aea:	2b39      	cmp	r3, #57	; 0x39
 8011aec:	d904      	bls.n	8011af8 <gen_numname+0x98>
 8011aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011af2:	3307      	adds	r3, #7
 8011af4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afa:	1e5a      	subs	r2, r3, #1
 8011afc:	62ba      	str	r2, [r7, #40]	; 0x28
 8011afe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b02:	4413      	add	r3, r2
 8011b04:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011b08:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	091b      	lsrs	r3, r3, #4
 8011b10:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d1de      	bne.n	8011ad6 <gen_numname+0x76>
	ns[i] = '~';
 8011b18:	f107 0214 	add.w	r2, r7, #20
 8011b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b1e:	4413      	add	r3, r2
 8011b20:	227e      	movs	r2, #126	; 0x7e
 8011b22:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011b24:	2300      	movs	r3, #0
 8011b26:	627b      	str	r3, [r7, #36]	; 0x24
 8011b28:	e002      	b.n	8011b30 <gen_numname+0xd0>
 8011b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8011b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d205      	bcs.n	8011b44 <gen_numname+0xe4>
 8011b38:	68fa      	ldr	r2, [r7, #12]
 8011b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3c:	4413      	add	r3, r2
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	2b20      	cmp	r3, #32
 8011b42:	d1f2      	bne.n	8011b2a <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b46:	2b07      	cmp	r3, #7
 8011b48:	d808      	bhi.n	8011b5c <gen_numname+0xfc>
 8011b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4c:	1c5a      	adds	r2, r3, #1
 8011b4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8011b50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b54:	4413      	add	r3, r2
 8011b56:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011b5a:	e000      	b.n	8011b5e <gen_numname+0xfe>
 8011b5c:	2120      	movs	r1, #32
 8011b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b60:	1c5a      	adds	r2, r3, #1
 8011b62:	627a      	str	r2, [r7, #36]	; 0x24
 8011b64:	68fa      	ldr	r2, [r7, #12]
 8011b66:	4413      	add	r3, r2
 8011b68:	460a      	mov	r2, r1
 8011b6a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6e:	2b07      	cmp	r3, #7
 8011b70:	d9e8      	bls.n	8011b44 <gen_numname+0xe4>
}
 8011b72:	bf00      	nop
 8011b74:	3730      	adds	r7, #48	; 0x30
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	00011021 	.word	0x00011021

08011b80 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b085      	sub	sp, #20
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011b88:	2300      	movs	r3, #0
 8011b8a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011b8c:	230b      	movs	r3, #11
 8011b8e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011b90:	7bfb      	ldrb	r3, [r7, #15]
 8011b92:	b2da      	uxtb	r2, r3
 8011b94:	0852      	lsrs	r2, r2, #1
 8011b96:	01db      	lsls	r3, r3, #7
 8011b98:	4313      	orrs	r3, r2
 8011b9a:	b2da      	uxtb	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	1c59      	adds	r1, r3, #1
 8011ba0:	6079      	str	r1, [r7, #4]
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	4413      	add	r3, r2
 8011ba6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	3b01      	subs	r3, #1
 8011bac:	60bb      	str	r3, [r7, #8]
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d1ed      	bne.n	8011b90 <sum_sfn+0x10>
	return sum;
 8011bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3714      	adds	r7, #20
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr

08011bc2 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8011bc2:	b480      	push	{r7}
 8011bc4:	b087      	sub	sp, #28
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	3301      	adds	r3, #1
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	3301      	adds	r3, #1
 8011bd2:	015b      	lsls	r3, r3, #5
 8011bd4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	827b      	strh	r3, [r7, #18]
 8011bda:	2300      	movs	r3, #0
 8011bdc:	617b      	str	r3, [r7, #20]
 8011bde:	e018      	b.n	8011c12 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	2b02      	cmp	r3, #2
 8011be4:	d103      	bne.n	8011bee <xdir_sum+0x2c>
			i++;
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	3301      	adds	r3, #1
 8011bea:	617b      	str	r3, [r7, #20]
 8011bec:	e00e      	b.n	8011c0c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8011bee:	8a7b      	ldrh	r3, [r7, #18]
 8011bf0:	03db      	lsls	r3, r3, #15
 8011bf2:	b29a      	uxth	r2, r3
 8011bf4:	8a7b      	ldrh	r3, [r7, #18]
 8011bf6:	085b      	lsrs	r3, r3, #1
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	4413      	add	r3, r2
 8011bfc:	b29a      	uxth	r2, r3
 8011bfe:	6879      	ldr	r1, [r7, #4]
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	440b      	add	r3, r1
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	4413      	add	r3, r2
 8011c0a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	617b      	str	r3, [r7, #20]
 8011c12:	697a      	ldr	r2, [r7, #20]
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d3e2      	bcc.n	8011be0 <xdir_sum+0x1e>
		}
	}
	return sum;
 8011c1a:	8a7b      	ldrh	r3, [r7, #18]
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	371c      	adds	r7, #28
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr

08011c28 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8011c30:	2300      	movs	r3, #0
 8011c32:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8011c34:	e01f      	b.n	8011c76 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8011c36:	89bb      	ldrh	r3, [r7, #12]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f002 fb19 	bl	8014270 <ff_wtoupper>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8011c42:	89fb      	ldrh	r3, [r7, #14]
 8011c44:	03db      	lsls	r3, r3, #15
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	89fb      	ldrh	r3, [r7, #14]
 8011c4a:	085b      	lsrs	r3, r3, #1
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	4413      	add	r3, r2
 8011c50:	b29a      	uxth	r2, r3
 8011c52:	89bb      	ldrh	r3, [r7, #12]
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	4413      	add	r3, r2
 8011c5a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8011c5c:	89fb      	ldrh	r3, [r7, #14]
 8011c5e:	03db      	lsls	r3, r3, #15
 8011c60:	b29a      	uxth	r2, r3
 8011c62:	89fb      	ldrh	r3, [r7, #14]
 8011c64:	085b      	lsrs	r3, r3, #1
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	4413      	add	r3, r2
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	89bb      	ldrh	r3, [r7, #12]
 8011c6e:	0a1b      	lsrs	r3, r3, #8
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	4413      	add	r3, r2
 8011c74:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	1c9a      	adds	r2, r3, #2
 8011c7a:	607a      	str	r2, [r7, #4]
 8011c7c:	881b      	ldrh	r3, [r3, #0]
 8011c7e:	81bb      	strh	r3, [r7, #12]
 8011c80:	89bb      	ldrh	r3, [r7, #12]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d1d7      	bne.n	8011c36 <xname_sum+0xe>
	}
	return sum;
 8011c86:	89fb      	ldrh	r3, [r7, #14]
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3710      	adds	r7, #16
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8011c90:	b590      	push	{r4, r7, lr}
 8011c92:	b087      	sub	sp, #28
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	695b      	ldr	r3, [r3, #20]
 8011c9e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ca8:	4619      	mov	r1, r3
 8011caa:	4610      	mov	r0, r2
 8011cac:	f7fe fcfa 	bl	80106a4 <move_window>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011cb4:	7bfb      	ldrb	r3, [r7, #15]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d001      	beq.n	8011cbe <load_xdir+0x2e>
 8011cba:	7bfb      	ldrb	r3, [r7, #15]
 8011cbc:	e09f      	b.n	8011dfe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	2b85      	cmp	r3, #133	; 0x85
 8011cc6:	d001      	beq.n	8011ccc <load_xdir+0x3c>
 8011cc8:	2302      	movs	r3, #2
 8011cca:	e098      	b.n	8011dfe <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cd0:	2220      	movs	r2, #32
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	6938      	ldr	r0, [r7, #16]
 8011cd6:	f7fe fab7 	bl	8010248 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	015b      	lsls	r3, r3, #5
 8011ce4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	2b5f      	cmp	r3, #95	; 0x5f
 8011cea:	d903      	bls.n	8011cf4 <load_xdir+0x64>
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011cf2:	d901      	bls.n	8011cf8 <load_xdir+0x68>
 8011cf4:	2302      	movs	r3, #2
 8011cf6:	e082      	b.n	8011dfe <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7ff fbf2 	bl	80114e4 <dir_next>
 8011d00:	4603      	mov	r3, r0
 8011d02:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011d04:	7bfb      	ldrb	r3, [r7, #15]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d001      	beq.n	8011d0e <load_xdir+0x7e>
 8011d0a:	7bfb      	ldrb	r3, [r7, #15]
 8011d0c:	e077      	b.n	8011dfe <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d16:	4619      	mov	r1, r3
 8011d18:	4610      	mov	r0, r2
 8011d1a:	f7fe fcc3 	bl	80106a4 <move_window>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011d22:	7bfb      	ldrb	r3, [r7, #15]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <load_xdir+0x9c>
 8011d28:	7bfb      	ldrb	r3, [r7, #15]
 8011d2a:	e068      	b.n	8011dfe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	2bc0      	cmp	r3, #192	; 0xc0
 8011d34:	d001      	beq.n	8011d3a <load_xdir+0xaa>
 8011d36:	2302      	movs	r3, #2
 8011d38:	e061      	b.n	8011dfe <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	f103 0020 	add.w	r0, r3, #32
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d44:	2220      	movs	r2, #32
 8011d46:	4619      	mov	r1, r3
 8011d48:	f7fe fa7e 	bl	8010248 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	3323      	adds	r3, #35	; 0x23
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	332c      	adds	r3, #44	; 0x2c
 8011d54:	4a2c      	ldr	r2, [pc, #176]	; (8011e08 <load_xdir+0x178>)
 8011d56:	fba2 2303 	umull	r2, r3, r2, r3
 8011d5a:	08db      	lsrs	r3, r3, #3
 8011d5c:	015b      	lsls	r3, r3, #5
 8011d5e:	68ba      	ldr	r2, [r7, #8]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d201      	bcs.n	8011d68 <load_xdir+0xd8>
 8011d64:	2302      	movs	r3, #2
 8011d66:	e04a      	b.n	8011dfe <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8011d68:	2340      	movs	r3, #64	; 0x40
 8011d6a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8011d6c:	2100      	movs	r1, #0
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f7ff fbb8 	bl	80114e4 <dir_next>
 8011d74:	4603      	mov	r3, r0
 8011d76:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011d78:	7bfb      	ldrb	r3, [r7, #15]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d001      	beq.n	8011d82 <load_xdir+0xf2>
 8011d7e:	7bfb      	ldrb	r3, [r7, #15]
 8011d80:	e03d      	b.n	8011dfe <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	4610      	mov	r0, r2
 8011d8e:	f7fe fc89 	bl	80106a4 <move_window>
 8011d92:	4603      	mov	r3, r0
 8011d94:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011d96:	7bfb      	ldrb	r3, [r7, #15]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d001      	beq.n	8011da0 <load_xdir+0x110>
 8011d9c:	7bfb      	ldrb	r3, [r7, #15]
 8011d9e:	e02e      	b.n	8011dfe <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	2bc1      	cmp	r3, #193	; 0xc1
 8011da8:	d001      	beq.n	8011dae <load_xdir+0x11e>
 8011daa:	2302      	movs	r3, #2
 8011dac:	e027      	b.n	8011dfe <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011db4:	d208      	bcs.n	8011dc8 <load_xdir+0x138>
 8011db6:	693a      	ldr	r2, [r7, #16]
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	18d0      	adds	r0, r2, r3
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dc0:	2220      	movs	r2, #32
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	f7fe fa40 	bl	8010248 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	3320      	adds	r3, #32
 8011dcc:	617b      	str	r3, [r7, #20]
 8011dce:	697a      	ldr	r2, [r7, #20]
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d3ca      	bcc.n	8011d6c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011ddc:	d80e      	bhi.n	8011dfc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8011dde:	6938      	ldr	r0, [r7, #16]
 8011de0:	f7ff feef 	bl	8011bc2 <xdir_sum>
 8011de4:	4603      	mov	r3, r0
 8011de6:	461c      	mov	r4, r3
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	3302      	adds	r3, #2
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7fe f865 	bl	800febc <ld_word>
 8011df2:	4603      	mov	r3, r0
 8011df4:	429c      	cmp	r4, r3
 8011df6:	d001      	beq.n	8011dfc <load_xdir+0x16c>
 8011df8:	2302      	movs	r3, #2
 8011dfa:	e000      	b.n	8011dfe <load_xdir+0x16e>
	}
	return FR_OK;
 8011dfc:	2300      	movs	r3, #0
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	371c      	adds	r7, #28
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd90      	pop	{r4, r7, pc}
 8011e06:	bf00      	nop
 8011e08:	88888889 	.word	0x88888889

08011e0c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8011e0c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011e10:	b084      	sub	sp, #16
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	6078      	str	r0, [r7, #4]
 8011e16:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	6a1a      	ldr	r2, [r3, #32]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e36:	469b      	mov	fp, r3
 8011e38:	f04f 0c00 	mov.w	ip, #0
 8011e3c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8011e40:	f04f 0200 	mov.w	r2, #0
 8011e44:	ea0b 0301 	and.w	r3, fp, r1
 8011e48:	ea0c 0402 	and.w	r4, ip, r2
 8011e4c:	687a      	ldr	r2, [r7, #4]
 8011e4e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e5e:	4619      	mov	r1, r3
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7ff faab 	bl	80113bc <dir_sdi>
 8011e66:	4603      	mov	r3, r0
 8011e68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011e6a:	7bfb      	ldrb	r3, [r7, #15]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d104      	bne.n	8011e7a <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f7ff ff0d 	bl	8011c90 <load_xdir>
 8011e76:	4603      	mov	r3, r0
 8011e78:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8011e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08011e86 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8011e86:	b590      	push	{r4, r7, lr}
 8011e88:	b087      	sub	sp, #28
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	695b      	ldr	r3, [r3, #20]
 8011e94:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	1c9c      	adds	r4, r3, #2
 8011e9a:	68f8      	ldr	r0, [r7, #12]
 8011e9c:	f7ff fe91 	bl	8011bc2 <xdir_sum>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	f7fe f901 	bl	80100ac <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	3301      	adds	r3, #1
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011eb8:	4619      	mov	r1, r3
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f7ff fa7e 	bl	80113bc <dir_sdi>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011ec4:	e026      	b.n	8011f14 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ece:	4619      	mov	r1, r3
 8011ed0:	4610      	mov	r0, r2
 8011ed2:	f7fe fbe7 	bl	80106a4 <move_window>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011eda:	7dfb      	ldrb	r3, [r7, #23]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d11d      	bne.n	8011f1c <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ee4:	2220      	movs	r2, #32
 8011ee6:	68f9      	ldr	r1, [r7, #12]
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7fe f9ad 	bl	8010248 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	613b      	str	r3, [r7, #16]
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d00e      	beq.n	8011f20 <store_xdir+0x9a>
		dirb += SZDIRE;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	3320      	adds	r3, #32
 8011f06:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8011f08:	2100      	movs	r1, #0
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f7ff faea 	bl	80114e4 <dir_next>
 8011f10:	4603      	mov	r3, r0
 8011f12:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011f14:	7dfb      	ldrb	r3, [r7, #23]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d0d5      	beq.n	8011ec6 <store_xdir+0x40>
 8011f1a:	e002      	b.n	8011f22 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8011f1c:	bf00      	nop
 8011f1e:	e000      	b.n	8011f22 <store_xdir+0x9c>
		if (--nent == 0) break;
 8011f20:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8011f22:	7dfb      	ldrb	r3, [r7, #23]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d002      	beq.n	8011f2e <store_xdir+0xa8>
 8011f28:	7dfb      	ldrb	r3, [r7, #23]
 8011f2a:	2b01      	cmp	r3, #1
 8011f2c:	d101      	bne.n	8011f32 <store_xdir+0xac>
 8011f2e:	7dfb      	ldrb	r3, [r7, #23]
 8011f30:	e000      	b.n	8011f34 <store_xdir+0xae>
 8011f32:	2302      	movs	r3, #2
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	371c      	adds	r7, #28
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd90      	pop	{r4, r7, pc}

08011f3c <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8011f3c:	b590      	push	{r4, r7, lr}
 8011f3e:	b085      	sub	sp, #20
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8011f46:	2240      	movs	r2, #64	; 0x40
 8011f48:	2100      	movs	r1, #0
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f7fe f99d 	bl	801028a <mem_set>
	dirb[XDIR_Type] = 0x85;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2285      	movs	r2, #133	; 0x85
 8011f54:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	3320      	adds	r3, #32
 8011f5a:	22c0      	movs	r2, #192	; 0xc0
 8011f5c:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	72bb      	strb	r3, [r7, #10]
 8011f62:	2301      	movs	r3, #1
 8011f64:	72fb      	strb	r3, [r7, #11]
 8011f66:	2301      	movs	r3, #1
 8011f68:	813b      	strh	r3, [r7, #8]
 8011f6a:	2340      	movs	r3, #64	; 0x40
 8011f6c:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	1c5a      	adds	r2, r3, #1
 8011f72:	60fa      	str	r2, [r7, #12]
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	4413      	add	r3, r2
 8011f78:	22c1      	movs	r2, #193	; 0xc1
 8011f7a:	701a      	strb	r2, [r3, #0]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	1c5a      	adds	r2, r3, #1
 8011f80:	60fa      	str	r2, [r7, #12]
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	4413      	add	r3, r2
 8011f86:	2200      	movs	r2, #0
 8011f88:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8011f8a:	893b      	ldrh	r3, [r7, #8]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d00b      	beq.n	8011fa8 <create_xdir+0x6c>
 8011f90:	7abb      	ldrb	r3, [r7, #10]
 8011f92:	005b      	lsls	r3, r3, #1
 8011f94:	683a      	ldr	r2, [r7, #0]
 8011f96:	4413      	add	r3, r2
 8011f98:	881b      	ldrh	r3, [r3, #0]
 8011f9a:	813b      	strh	r3, [r7, #8]
 8011f9c:	893b      	ldrh	r3, [r7, #8]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d002      	beq.n	8011fa8 <create_xdir+0x6c>
 8011fa2:	7abb      	ldrb	r3, [r7, #10]
 8011fa4:	3301      	adds	r3, #1
 8011fa6:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	4413      	add	r3, r2
 8011fae:	893a      	ldrh	r2, [r7, #8]
 8011fb0:	4611      	mov	r1, r2
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7fe f87a 	bl	80100ac <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	3302      	adds	r3, #2
 8011fbc:	60fb      	str	r3, [r7, #12]
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f003 031f 	and.w	r3, r3, #31
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d1e0      	bne.n	8011f8a <create_xdir+0x4e>
		nb++;
 8011fc8:	7afb      	ldrb	r3, [r7, #11]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8011fce:	7abb      	ldrb	r3, [r7, #10]
 8011fd0:	005b      	lsls	r3, r3, #1
 8011fd2:	683a      	ldr	r2, [r7, #0]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	881b      	ldrh	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d1c8      	bne.n	8011f6e <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	3323      	adds	r3, #35	; 0x23
 8011fe0:	7aba      	ldrb	r2, [r7, #10]
 8011fe2:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	7afa      	ldrb	r2, [r7, #11]
 8011fea:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8011ff2:	6838      	ldr	r0, [r7, #0]
 8011ff4:	f7ff fe18 	bl	8011c28 <xname_sum>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	f7fe f855 	bl	80100ac <st_word>
}
 8012002:	bf00      	nop
 8012004:	3714      	adds	r7, #20
 8012006:	46bd      	mov	sp, r7
 8012008:	bd90      	pop	{r4, r7, pc}

0801200a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801200a:	b580      	push	{r7, lr}
 801200c:	b086      	sub	sp, #24
 801200e:	af00      	add	r7, sp, #0
 8012010:	6078      	str	r0, [r7, #4]
 8012012:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012014:	2304      	movs	r3, #4
 8012016:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801201e:	23ff      	movs	r3, #255	; 0xff
 8012020:	757b      	strb	r3, [r7, #21]
 8012022:	23ff      	movs	r3, #255	; 0xff
 8012024:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012026:	e09f      	b.n	8012168 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801202c:	4619      	mov	r1, r3
 801202e:	6938      	ldr	r0, [r7, #16]
 8012030:	f7fe fb38 	bl	80106a4 <move_window>
 8012034:	4603      	mov	r3, r0
 8012036:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012038:	7dfb      	ldrb	r3, [r7, #23]
 801203a:	2b00      	cmp	r3, #0
 801203c:	f040 809a 	bne.w	8012174 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012048:	7dbb      	ldrb	r3, [r7, #22]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d102      	bne.n	8012054 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801204e:	2304      	movs	r3, #4
 8012050:	75fb      	strb	r3, [r7, #23]
 8012052:	e096      	b.n	8012182 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	2b04      	cmp	r3, #4
 801205a:	d118      	bne.n	801208e <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 801205c:	7dbb      	ldrb	r3, [r7, #22]
 801205e:	2b85      	cmp	r3, #133	; 0x85
 8012060:	d179      	bne.n	8012156 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7ff fe10 	bl	8011c90 <load_xdir>
 8012070:	4603      	mov	r3, r0
 8012072:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8012074:	7dfb      	ldrb	r3, [r7, #23]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d17e      	bne.n	8012178 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	695b      	ldr	r3, [r3, #20]
 801207e:	3304      	adds	r3, #4
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012086:	b2da      	uxtb	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	719a      	strb	r2, [r3, #6]
					}
					break;
 801208c:	e074      	b.n	8012178 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012092:	330b      	adds	r3, #11
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801209a:	73fb      	strb	r3, [r7, #15]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	7bfa      	ldrb	r2, [r7, #15]
 80120a0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80120a2:	7dbb      	ldrb	r3, [r7, #22]
 80120a4:	2be5      	cmp	r3, #229	; 0xe5
 80120a6:	d00e      	beq.n	80120c6 <dir_read+0xbc>
 80120a8:	7dbb      	ldrb	r3, [r7, #22]
 80120aa:	2b2e      	cmp	r3, #46	; 0x2e
 80120ac:	d00b      	beq.n	80120c6 <dir_read+0xbc>
 80120ae:	7bfb      	ldrb	r3, [r7, #15]
 80120b0:	f023 0320 	bic.w	r3, r3, #32
 80120b4:	2b08      	cmp	r3, #8
 80120b6:	bf0c      	ite	eq
 80120b8:	2301      	moveq	r3, #1
 80120ba:	2300      	movne	r3, #0
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	461a      	mov	r2, r3
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d002      	beq.n	80120cc <dir_read+0xc2>
				ord = 0xFF;
 80120c6:	23ff      	movs	r3, #255	; 0xff
 80120c8:	757b      	strb	r3, [r7, #21]
 80120ca:	e044      	b.n	8012156 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80120cc:	7bfb      	ldrb	r3, [r7, #15]
 80120ce:	2b0f      	cmp	r3, #15
 80120d0:	d12f      	bne.n	8012132 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80120d2:	7dbb      	ldrb	r3, [r7, #22]
 80120d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d00d      	beq.n	80120f8 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120e0:	7b5b      	ldrb	r3, [r3, #13]
 80120e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80120e4:	7dbb      	ldrb	r3, [r7, #22]
 80120e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80120ea:	75bb      	strb	r3, [r7, #22]
 80120ec:	7dbb      	ldrb	r3, [r7, #22]
 80120ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80120f8:	7dba      	ldrb	r2, [r7, #22]
 80120fa:	7d7b      	ldrb	r3, [r7, #21]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d115      	bne.n	801212c <dir_read+0x122>
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012104:	330d      	adds	r3, #13
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	7d3a      	ldrb	r2, [r7, #20]
 801210a:	429a      	cmp	r2, r3
 801210c:	d10e      	bne.n	801212c <dir_read+0x122>
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	691a      	ldr	r2, [r3, #16]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012116:	4619      	mov	r1, r3
 8012118:	4610      	mov	r0, r2
 801211a:	f7ff fbd5 	bl	80118c8 <pick_lfn>
 801211e:	4603      	mov	r3, r0
 8012120:	2b00      	cmp	r3, #0
 8012122:	d003      	beq.n	801212c <dir_read+0x122>
 8012124:	7d7b      	ldrb	r3, [r7, #21]
 8012126:	3b01      	subs	r3, #1
 8012128:	b2db      	uxtb	r3, r3
 801212a:	e000      	b.n	801212e <dir_read+0x124>
 801212c:	23ff      	movs	r3, #255	; 0xff
 801212e:	757b      	strb	r3, [r7, #21]
 8012130:	e011      	b.n	8012156 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012132:	7d7b      	ldrb	r3, [r7, #21]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d109      	bne.n	801214c <dir_read+0x142>
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801213c:	4618      	mov	r0, r3
 801213e:	f7ff fd1f 	bl	8011b80 <sum_sfn>
 8012142:	4603      	mov	r3, r0
 8012144:	461a      	mov	r2, r3
 8012146:	7d3b      	ldrb	r3, [r7, #20]
 8012148:	4293      	cmp	r3, r2
 801214a:	d017      	beq.n	801217c <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f04f 32ff 	mov.w	r2, #4294967295
 8012152:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8012154:	e012      	b.n	801217c <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012156:	2100      	movs	r1, #0
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7ff f9c3 	bl	80114e4 <dir_next>
 801215e:	4603      	mov	r3, r0
 8012160:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012162:	7dfb      	ldrb	r3, [r7, #23]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d10b      	bne.n	8012180 <dir_read+0x176>
	while (dp->sect) {
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801216c:	2b00      	cmp	r3, #0
 801216e:	f47f af5b 	bne.w	8012028 <dir_read+0x1e>
 8012172:	e006      	b.n	8012182 <dir_read+0x178>
		if (res != FR_OK) break;
 8012174:	bf00      	nop
 8012176:	e004      	b.n	8012182 <dir_read+0x178>
					break;
 8012178:	bf00      	nop
 801217a:	e002      	b.n	8012182 <dir_read+0x178>
					break;
 801217c:	bf00      	nop
 801217e:	e000      	b.n	8012182 <dir_read+0x178>
		if (res != FR_OK) break;
 8012180:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012182:	7dfb      	ldrb	r3, [r7, #23]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d002      	beq.n	801218e <dir_read+0x184>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2200      	movs	r2, #0
 801218c:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 801218e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012190:	4618      	mov	r0, r3
 8012192:	3718      	adds	r7, #24
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012198:	b590      	push	{r4, r7, lr}
 801219a:	b089      	sub	sp, #36	; 0x24
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80121a6:	2100      	movs	r1, #0
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7ff f907 	bl	80113bc <dir_sdi>
 80121ae:	4603      	mov	r3, r0
 80121b0:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80121b2:	7ffb      	ldrb	r3, [r7, #31]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d001      	beq.n	80121bc <dir_find+0x24>
 80121b8:	7ffb      	ldrb	r3, [r7, #31]
 80121ba:	e112      	b.n	80123e2 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	2b04      	cmp	r3, #4
 80121c2:	d164      	bne.n	801228e <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	691b      	ldr	r3, [r3, #16]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7ff fd2d 	bl	8011c28 <xname_sum>
 80121ce:	4603      	mov	r3, r0
 80121d0:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80121d2:	e04f      	b.n	8012274 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	695b      	ldr	r3, [r3, #20]
 80121d8:	3324      	adds	r3, #36	; 0x24
 80121da:	4618      	mov	r0, r3
 80121dc:	f7fd fe6e 	bl	800febc <ld_word>
 80121e0:	4603      	mov	r3, r0
 80121e2:	461a      	mov	r2, r3
 80121e4:	893b      	ldrh	r3, [r7, #8]
 80121e6:	4293      	cmp	r3, r2
 80121e8:	d000      	beq.n	80121ec <dir_find+0x54>
 80121ea:	e043      	b.n	8012274 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	695b      	ldr	r3, [r3, #20]
 80121f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80121f4:	76fb      	strb	r3, [r7, #27]
 80121f6:	2340      	movs	r3, #64	; 0x40
 80121f8:	617b      	str	r3, [r7, #20]
 80121fa:	2300      	movs	r3, #0
 80121fc:	613b      	str	r3, [r7, #16]
 80121fe:	e029      	b.n	8012254 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	f003 031f 	and.w	r3, r3, #31
 8012206:	2b00      	cmp	r3, #0
 8012208:	d102      	bne.n	8012210 <dir_find+0x78>
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	3302      	adds	r3, #2
 801220e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	695a      	ldr	r2, [r3, #20]
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	4413      	add	r3, r2
 8012218:	4618      	mov	r0, r3
 801221a:	f7fd fe4f 	bl	800febc <ld_word>
 801221e:	4603      	mov	r3, r0
 8012220:	4618      	mov	r0, r3
 8012222:	f002 f825 	bl	8014270 <ff_wtoupper>
 8012226:	4603      	mov	r3, r0
 8012228:	461c      	mov	r4, r3
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	691a      	ldr	r2, [r3, #16]
 801222e:	693b      	ldr	r3, [r7, #16]
 8012230:	005b      	lsls	r3, r3, #1
 8012232:	4413      	add	r3, r2
 8012234:	881b      	ldrh	r3, [r3, #0]
 8012236:	4618      	mov	r0, r3
 8012238:	f002 f81a 	bl	8014270 <ff_wtoupper>
 801223c:	4603      	mov	r3, r0
 801223e:	429c      	cmp	r4, r3
 8012240:	d10c      	bne.n	801225c <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8012242:	7efb      	ldrb	r3, [r7, #27]
 8012244:	3b01      	subs	r3, #1
 8012246:	76fb      	strb	r3, [r7, #27]
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	3302      	adds	r3, #2
 801224c:	617b      	str	r3, [r7, #20]
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	3301      	adds	r3, #1
 8012252:	613b      	str	r3, [r7, #16]
 8012254:	7efb      	ldrb	r3, [r7, #27]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d1d2      	bne.n	8012200 <dir_find+0x68>
 801225a:	e000      	b.n	801225e <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801225c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801225e:	7efb      	ldrb	r3, [r7, #27]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d107      	bne.n	8012274 <dir_find+0xdc>
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	691a      	ldr	r2, [r3, #16]
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	005b      	lsls	r3, r3, #1
 801226c:	4413      	add	r3, r2
 801226e:	881b      	ldrh	r3, [r3, #0]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d009      	beq.n	8012288 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8012274:	2100      	movs	r1, #0
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7ff fec7 	bl	801200a <dir_read>
 801227c:	4603      	mov	r3, r0
 801227e:	77fb      	strb	r3, [r7, #31]
 8012280:	7ffb      	ldrb	r3, [r7, #31]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d0a6      	beq.n	80121d4 <dir_find+0x3c>
 8012286:	e000      	b.n	801228a <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8012288:	bf00      	nop
		}
		return res;
 801228a:	7ffb      	ldrb	r3, [r7, #31]
 801228c:	e0a9      	b.n	80123e2 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801228e:	23ff      	movs	r3, #255	; 0xff
 8012290:	773b      	strb	r3, [r7, #28]
 8012292:	7f3b      	ldrb	r3, [r7, #28]
 8012294:	777b      	strb	r3, [r7, #29]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f04f 32ff 	mov.w	r2, #4294967295
 801229c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122a2:	4619      	mov	r1, r3
 80122a4:	68f8      	ldr	r0, [r7, #12]
 80122a6:	f7fe f9fd 	bl	80106a4 <move_window>
 80122aa:	4603      	mov	r3, r0
 80122ac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80122ae:	7ffb      	ldrb	r3, [r7, #31]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	f040 8090 	bne.w	80123d6 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80122be:	7fbb      	ldrb	r3, [r7, #30]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d102      	bne.n	80122ca <dir_find+0x132>
 80122c4:	2304      	movs	r3, #4
 80122c6:	77fb      	strb	r3, [r7, #31]
 80122c8:	e08a      	b.n	80123e0 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122ce:	330b      	adds	r3, #11
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80122d6:	72fb      	strb	r3, [r7, #11]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	7afa      	ldrb	r2, [r7, #11]
 80122dc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80122de:	7fbb      	ldrb	r3, [r7, #30]
 80122e0:	2be5      	cmp	r3, #229	; 0xe5
 80122e2:	d007      	beq.n	80122f4 <dir_find+0x15c>
 80122e4:	7afb      	ldrb	r3, [r7, #11]
 80122e6:	f003 0308 	and.w	r3, r3, #8
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d009      	beq.n	8012302 <dir_find+0x16a>
 80122ee:	7afb      	ldrb	r3, [r7, #11]
 80122f0:	2b0f      	cmp	r3, #15
 80122f2:	d006      	beq.n	8012302 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80122f4:	23ff      	movs	r3, #255	; 0xff
 80122f6:	777b      	strb	r3, [r7, #29]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f04f 32ff 	mov.w	r2, #4294967295
 80122fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8012300:	e05e      	b.n	80123c0 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012302:	7afb      	ldrb	r3, [r7, #11]
 8012304:	2b0f      	cmp	r3, #15
 8012306:	d136      	bne.n	8012376 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012312:	2b00      	cmp	r3, #0
 8012314:	d154      	bne.n	80123c0 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012316:	7fbb      	ldrb	r3, [r7, #30]
 8012318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801231c:	2b00      	cmp	r3, #0
 801231e:	d00d      	beq.n	801233c <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012324:	7b5b      	ldrb	r3, [r3, #13]
 8012326:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012328:	7fbb      	ldrb	r3, [r7, #30]
 801232a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801232e:	77bb      	strb	r3, [r7, #30]
 8012330:	7fbb      	ldrb	r3, [r7, #30]
 8012332:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801233c:	7fba      	ldrb	r2, [r7, #30]
 801233e:	7f7b      	ldrb	r3, [r7, #29]
 8012340:	429a      	cmp	r2, r3
 8012342:	d115      	bne.n	8012370 <dir_find+0x1d8>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012348:	330d      	adds	r3, #13
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	7f3a      	ldrb	r2, [r7, #28]
 801234e:	429a      	cmp	r2, r3
 8012350:	d10e      	bne.n	8012370 <dir_find+0x1d8>
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	691a      	ldr	r2, [r3, #16]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801235a:	4619      	mov	r1, r3
 801235c:	4610      	mov	r0, r2
 801235e:	f7ff fa43 	bl	80117e8 <cmp_lfn>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d003      	beq.n	8012370 <dir_find+0x1d8>
 8012368:	7f7b      	ldrb	r3, [r7, #29]
 801236a:	3b01      	subs	r3, #1
 801236c:	b2db      	uxtb	r3, r3
 801236e:	e000      	b.n	8012372 <dir_find+0x1da>
 8012370:	23ff      	movs	r3, #255	; 0xff
 8012372:	777b      	strb	r3, [r7, #29]
 8012374:	e024      	b.n	80123c0 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012376:	7f7b      	ldrb	r3, [r7, #29]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d109      	bne.n	8012390 <dir_find+0x1f8>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012380:	4618      	mov	r0, r3
 8012382:	f7ff fbfd 	bl	8011b80 <sum_sfn>
 8012386:	4603      	mov	r3, r0
 8012388:	461a      	mov	r2, r3
 801238a:	7f3b      	ldrb	r3, [r7, #28]
 801238c:	4293      	cmp	r3, r2
 801238e:	d024      	beq.n	80123da <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012396:	f003 0301 	and.w	r3, r3, #1
 801239a:	2b00      	cmp	r3, #0
 801239c:	d10a      	bne.n	80123b4 <dir_find+0x21c>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	3340      	adds	r3, #64	; 0x40
 80123a6:	220b      	movs	r2, #11
 80123a8:	4619      	mov	r1, r3
 80123aa:	f7fd ff88 	bl	80102be <mem_cmp>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d014      	beq.n	80123de <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80123b4:	23ff      	movs	r3, #255	; 0xff
 80123b6:	777b      	strb	r3, [r7, #29]
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f04f 32ff 	mov.w	r2, #4294967295
 80123be:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80123c0:	2100      	movs	r1, #0
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7ff f88e 	bl	80114e4 <dir_next>
 80123c8:	4603      	mov	r3, r0
 80123ca:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 80123cc:	7ffb      	ldrb	r3, [r7, #31]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	f43f af65 	beq.w	801229e <dir_find+0x106>
 80123d4:	e004      	b.n	80123e0 <dir_find+0x248>
		if (res != FR_OK) break;
 80123d6:	bf00      	nop
 80123d8:	e002      	b.n	80123e0 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80123da:	bf00      	nop
 80123dc:	e000      	b.n	80123e0 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80123de:	bf00      	nop

	return res;
 80123e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3724      	adds	r7, #36	; 0x24
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd90      	pop	{r4, r7, pc}
	...

080123ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80123ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80123f0:	b0a0      	sub	sp, #128	; 0x80
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012402:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d001      	beq.n	801240e <dir_register+0x22>
 801240a:	2306      	movs	r3, #6
 801240c:	e198      	b.n	8012740 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801240e:	2300      	movs	r3, #0
 8012410:	677b      	str	r3, [r7, #116]	; 0x74
 8012412:	e002      	b.n	801241a <dir_register+0x2e>
 8012414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012416:	3301      	adds	r3, #1
 8012418:	677b      	str	r3, [r7, #116]	; 0x74
 801241a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801241c:	691a      	ldr	r2, [r3, #16]
 801241e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012420:	005b      	lsls	r3, r3, #1
 8012422:	4413      	add	r3, r2
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d1f4      	bne.n	8012414 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801242a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	2b04      	cmp	r3, #4
 8012430:	f040 80a9 	bne.w	8012586 <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8012434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012436:	330e      	adds	r3, #14
 8012438:	4aa7      	ldr	r2, [pc, #668]	; (80126d8 <dir_register+0x2ec>)
 801243a:	fba2 2303 	umull	r2, r3, r2, r3
 801243e:	08db      	lsrs	r3, r3, #3
 8012440:	3302      	adds	r3, #2
 8012442:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8012444:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f7ff f932 	bl	80116b0 <dir_alloc>
 801244c:	4603      	mov	r3, r0
 801244e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8012452:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012456:	2b00      	cmp	r3, #0
 8012458:	d002      	beq.n	8012460 <dir_register+0x74>
 801245a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801245e:	e16f      	b.n	8012740 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012464:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012466:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 801246a:	440b      	add	r3, r1
 801246c:	015b      	lsls	r3, r3, #5
 801246e:	1ad2      	subs	r2, r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	689b      	ldr	r3, [r3, #8]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d07a      	beq.n	8012572 <dir_register+0x186>
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	79db      	ldrb	r3, [r3, #7]
 8012480:	f003 0304 	and.w	r3, r3, #4
 8012484:	2b00      	cmp	r3, #0
 8012486:	d074      	beq.n	8012572 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012490:	895b      	ldrh	r3, [r3, #10]
 8012492:	4618      	mov	r0, r3
 8012494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012496:	899b      	ldrh	r3, [r3, #12]
 8012498:	fb03 f300 	mul.w	r3, r3, r0
 801249c:	469b      	mov	fp, r3
 801249e:	f04f 0c00 	mov.w	ip, #0
 80124a2:	eb1b 0301 	adds.w	r3, fp, r1
 80124a6:	eb4c 0402 	adc.w	r4, ip, r2
 80124aa:	687a      	ldr	r2, [r7, #4]
 80124ac:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7fe fd26 	bl	8010f04 <fill_first_frag>
 80124b8:	4603      	mov	r3, r0
 80124ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80124be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d002      	beq.n	80124cc <dir_register+0xe0>
 80124c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80124ca:	e139      	b.n	8012740 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124d2:	f04f 32ff 	mov.w	r2, #4294967295
 80124d6:	4619      	mov	r1, r3
 80124d8:	f7fe fd43 	bl	8010f62 <fill_last_frag>
 80124dc:	4603      	mov	r3, r0
 80124de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80124e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d002      	beq.n	80124f0 <dir_register+0x104>
 80124ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80124ee:	e127      	b.n	8012740 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 80124f0:	687a      	ldr	r2, [r7, #4]
 80124f2:	f107 0308 	add.w	r3, r7, #8
 80124f6:	4611      	mov	r1, r2
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7ff fc87 	bl	8011e0c <load_obj_dir>
 80124fe:	4603      	mov	r3, r0
 8012500:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8012504:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012508:	2b00      	cmp	r3, #0
 801250a:	d002      	beq.n	8012512 <dir_register+0x126>
 801250c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012510:	e116      	b.n	8012740 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8012512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012514:	695b      	ldr	r3, [r3, #20]
 8012516:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8012520:	461a      	mov	r2, r3
 8012522:	4623      	mov	r3, r4
 8012524:	4608      	mov	r0, r1
 8012526:	f7fd fe08 	bl	801013a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 801252a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801252c:	695b      	ldr	r3, [r3, #20]
 801252e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8012538:	461a      	mov	r2, r3
 801253a:	4623      	mov	r3, r4
 801253c:	4608      	mov	r0, r1
 801253e:	f7fd fdfc 	bl	801013a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	79da      	ldrb	r2, [r3, #7]
 8012546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012548:	695b      	ldr	r3, [r3, #20]
 801254a:	3321      	adds	r3, #33	; 0x21
 801254c:	f042 0201 	orr.w	r2, r2, #1
 8012550:	b2d2      	uxtb	r2, r2
 8012552:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8012554:	f107 0308 	add.w	r3, r7, #8
 8012558:	4618      	mov	r0, r3
 801255a:	f7ff fc94 	bl	8011e86 <store_xdir>
 801255e:	4603      	mov	r3, r0
 8012560:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8012564:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012568:	2b00      	cmp	r3, #0
 801256a:	d002      	beq.n	8012572 <dir_register+0x186>
 801256c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012570:	e0e6      	b.n	8012740 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8012572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012574:	695a      	ldr	r2, [r3, #20]
 8012576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012578:	691b      	ldr	r3, [r3, #16]
 801257a:	4619      	mov	r1, r3
 801257c:	4610      	mov	r0, r2
 801257e:	f7ff fcdd 	bl	8011f3c <create_xdir>
		return FR_OK;
 8012582:	2300      	movs	r3, #0
 8012584:	e0dc      	b.n	8012740 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801258c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012590:	220c      	movs	r2, #12
 8012592:	4618      	mov	r0, r3
 8012594:	f7fd fe58 	bl	8010248 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012598:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801259c:	f003 0301 	and.w	r3, r3, #1
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d033      	beq.n	801260c <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2240      	movs	r2, #64	; 0x40
 80125a8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 80125ac:	2301      	movs	r3, #1
 80125ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80125b0:	e016      	b.n	80125e0 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80125b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125ba:	691a      	ldr	r2, [r3, #16]
 80125bc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80125c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80125c2:	f7ff fa4d 	bl	8011a60 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f7ff fde6 	bl	8012198 <dir_find>
 80125cc:	4603      	mov	r3, r0
 80125ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 80125d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d106      	bne.n	80125e8 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 80125da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80125dc:	3301      	adds	r3, #1
 80125de:	67bb      	str	r3, [r7, #120]	; 0x78
 80125e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80125e2:	2b63      	cmp	r3, #99	; 0x63
 80125e4:	d9e5      	bls.n	80125b2 <dir_register+0x1c6>
 80125e6:	e000      	b.n	80125ea <dir_register+0x1fe>
			if (res != FR_OK) break;
 80125e8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80125ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80125ec:	2b64      	cmp	r3, #100	; 0x64
 80125ee:	d101      	bne.n	80125f4 <dir_register+0x208>
 80125f0:	2307      	movs	r3, #7
 80125f2:	e0a5      	b.n	8012740 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80125f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80125f8:	2b04      	cmp	r3, #4
 80125fa:	d002      	beq.n	8012602 <dir_register+0x216>
 80125fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012600:	e09e      	b.n	8012740 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012602:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801260c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012610:	f003 0302 	and.w	r3, r3, #2
 8012614:	2b00      	cmp	r3, #0
 8012616:	d007      	beq.n	8012628 <dir_register+0x23c>
 8012618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801261a:	330c      	adds	r3, #12
 801261c:	4a2f      	ldr	r2, [pc, #188]	; (80126dc <dir_register+0x2f0>)
 801261e:	fba2 2303 	umull	r2, r3, r2, r3
 8012622:	089b      	lsrs	r3, r3, #2
 8012624:	3301      	adds	r3, #1
 8012626:	e000      	b.n	801262a <dir_register+0x23e>
 8012628:	2301      	movs	r3, #1
 801262a:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801262c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f7ff f83e 	bl	80116b0 <dir_alloc>
 8012634:	4603      	mov	r3, r0
 8012636:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801263a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801263e:	2b00      	cmp	r3, #0
 8012640:	d14f      	bne.n	80126e2 <dir_register+0x2f6>
 8012642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012644:	3b01      	subs	r3, #1
 8012646:	673b      	str	r3, [r7, #112]	; 0x70
 8012648:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801264a:	2b00      	cmp	r3, #0
 801264c:	d049      	beq.n	80126e2 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012654:	015b      	lsls	r3, r3, #5
 8012656:	1ad3      	subs	r3, r2, r3
 8012658:	4619      	mov	r1, r3
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f7fe feae 	bl	80113bc <dir_sdi>
 8012660:	4603      	mov	r3, r0
 8012662:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8012666:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801266a:	2b00      	cmp	r3, #0
 801266c:	d139      	bne.n	80126e2 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	3340      	adds	r3, #64	; 0x40
 8012672:	4618      	mov	r0, r3
 8012674:	f7ff fa84 	bl	8011b80 <sum_sfn>
 8012678:	4603      	mov	r3, r0
 801267a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012682:	4619      	mov	r1, r3
 8012684:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012686:	f7fe f80d 	bl	80106a4 <move_window>
 801268a:	4603      	mov	r3, r0
 801268c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8012690:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012694:	2b00      	cmp	r3, #0
 8012696:	d123      	bne.n	80126e0 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801269a:	6918      	ldr	r0, [r3, #16]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80126a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126a2:	b2da      	uxtb	r2, r3
 80126a4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80126a8:	f7ff f972 	bl	8011990 <put_lfn>
				fs->wflag = 1;
 80126ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126ae:	2201      	movs	r2, #1
 80126b0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80126b2:	2100      	movs	r1, #0
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f7fe ff15 	bl	80114e4 <dir_next>
 80126ba:	4603      	mov	r3, r0
 80126bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 80126c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d10c      	bne.n	80126e2 <dir_register+0x2f6>
 80126c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126ca:	3b01      	subs	r3, #1
 80126cc:	673b      	str	r3, [r7, #112]	; 0x70
 80126ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1d4      	bne.n	801267e <dir_register+0x292>
 80126d4:	e005      	b.n	80126e2 <dir_register+0x2f6>
 80126d6:	bf00      	nop
 80126d8:	88888889 	.word	0x88888889
 80126dc:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 80126e0:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80126e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d128      	bne.n	801273c <dir_register+0x350>
		res = move_window(fs, dp->sect);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126ee:	4619      	mov	r1, r3
 80126f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80126f2:	f7fd ffd7 	bl	80106a4 <move_window>
 80126f6:	4603      	mov	r3, r0
 80126f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80126fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012700:	2b00      	cmp	r3, #0
 8012702:	d11b      	bne.n	801273c <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012708:	2220      	movs	r2, #32
 801270a:	2100      	movs	r1, #0
 801270c:	4618      	mov	r0, r3
 801270e:	f7fd fdbc 	bl	801028a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	3340      	adds	r3, #64	; 0x40
 801271a:	220b      	movs	r2, #11
 801271c:	4619      	mov	r1, r3
 801271e:	f7fd fd93 	bl	8010248 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801272c:	330c      	adds	r3, #12
 801272e:	f002 0218 	and.w	r2, r2, #24
 8012732:	b2d2      	uxtb	r2, r2
 8012734:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012738:	2201      	movs	r2, #1
 801273a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801273c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8012740:	4618      	mov	r0, r3
 8012742:	3780      	adds	r7, #128	; 0x80
 8012744:	46bd      	mov	sp, r7
 8012746:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801274a:	bf00      	nop

0801274c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b08a      	sub	sp, #40	; 0x28
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	613b      	str	r3, [r7, #16]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	691b      	ldr	r3, [r3, #16]
 8012762:	60fb      	str	r3, [r7, #12]
 8012764:	2300      	movs	r3, #0
 8012766:	617b      	str	r3, [r7, #20]
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801276c:	69bb      	ldr	r3, [r7, #24]
 801276e:	1c5a      	adds	r2, r3, #1
 8012770:	61ba      	str	r2, [r7, #24]
 8012772:	693a      	ldr	r2, [r7, #16]
 8012774:	4413      	add	r3, r2
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801277a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801277c:	2b1f      	cmp	r3, #31
 801277e:	d940      	bls.n	8012802 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012782:	2b2f      	cmp	r3, #47	; 0x2f
 8012784:	d006      	beq.n	8012794 <create_name+0x48>
 8012786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012788:	2b5c      	cmp	r3, #92	; 0x5c
 801278a:	d110      	bne.n	80127ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801278c:	e002      	b.n	8012794 <create_name+0x48>
 801278e:	69bb      	ldr	r3, [r7, #24]
 8012790:	3301      	adds	r3, #1
 8012792:	61bb      	str	r3, [r7, #24]
 8012794:	693a      	ldr	r2, [r7, #16]
 8012796:	69bb      	ldr	r3, [r7, #24]
 8012798:	4413      	add	r3, r2
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	2b2f      	cmp	r3, #47	; 0x2f
 801279e:	d0f6      	beq.n	801278e <create_name+0x42>
 80127a0:	693a      	ldr	r2, [r7, #16]
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	4413      	add	r3, r2
 80127a6:	781b      	ldrb	r3, [r3, #0]
 80127a8:	2b5c      	cmp	r3, #92	; 0x5c
 80127aa:	d0f0      	beq.n	801278e <create_name+0x42>
			break;
 80127ac:	e02a      	b.n	8012804 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	2bfe      	cmp	r3, #254	; 0xfe
 80127b2:	d901      	bls.n	80127b8 <create_name+0x6c>
 80127b4:	2306      	movs	r3, #6
 80127b6:	e177      	b.n	8012aa8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80127b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127ba:	b2db      	uxtb	r3, r3
 80127bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80127be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127c0:	2101      	movs	r1, #1
 80127c2:	4618      	mov	r0, r3
 80127c4:	f001 fd18 	bl	80141f8 <ff_convert>
 80127c8:	4603      	mov	r3, r0
 80127ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80127cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d101      	bne.n	80127d6 <create_name+0x8a>
 80127d2:	2306      	movs	r3, #6
 80127d4:	e168      	b.n	8012aa8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80127d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127d8:	2b7f      	cmp	r3, #127	; 0x7f
 80127da:	d809      	bhi.n	80127f0 <create_name+0xa4>
 80127dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127de:	4619      	mov	r1, r3
 80127e0:	48b3      	ldr	r0, [pc, #716]	; (8012ab0 <create_name+0x364>)
 80127e2:	f7fd fd93 	bl	801030c <chk_chr>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d001      	beq.n	80127f0 <create_name+0xa4>
 80127ec:	2306      	movs	r3, #6
 80127ee:	e15b      	b.n	8012aa8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	1c5a      	adds	r2, r3, #1
 80127f4:	617a      	str	r2, [r7, #20]
 80127f6:	005b      	lsls	r3, r3, #1
 80127f8:	68fa      	ldr	r2, [r7, #12]
 80127fa:	4413      	add	r3, r2
 80127fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012800:	e7b4      	b.n	801276c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012802:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012804:	693a      	ldr	r2, [r7, #16]
 8012806:	69bb      	ldr	r3, [r7, #24]
 8012808:	441a      	add	r2, r3
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801280e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012810:	2b1f      	cmp	r3, #31
 8012812:	d801      	bhi.n	8012818 <create_name+0xcc>
 8012814:	2304      	movs	r3, #4
 8012816:	e000      	b.n	801281a <create_name+0xce>
 8012818:	2300      	movs	r3, #0
 801281a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801281e:	e011      	b.n	8012844 <create_name+0xf8>
		w = lfn[di - 1];
 8012820:	697a      	ldr	r2, [r7, #20]
 8012822:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012826:	4413      	add	r3, r2
 8012828:	005b      	lsls	r3, r3, #1
 801282a:	68fa      	ldr	r2, [r7, #12]
 801282c:	4413      	add	r3, r2
 801282e:	881b      	ldrh	r3, [r3, #0]
 8012830:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8012832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012834:	2b20      	cmp	r3, #32
 8012836:	d002      	beq.n	801283e <create_name+0xf2>
 8012838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801283a:	2b2e      	cmp	r3, #46	; 0x2e
 801283c:	d106      	bne.n	801284c <create_name+0x100>
		di--;
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	3b01      	subs	r3, #1
 8012842:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d1ea      	bne.n	8012820 <create_name+0xd4>
 801284a:	e000      	b.n	801284e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801284c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	005b      	lsls	r3, r3, #1
 8012852:	68fa      	ldr	r2, [r7, #12]
 8012854:	4413      	add	r3, r2
 8012856:	2200      	movs	r2, #0
 8012858:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d101      	bne.n	8012864 <create_name+0x118>
 8012860:	2306      	movs	r3, #6
 8012862:	e121      	b.n	8012aa8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	3340      	adds	r3, #64	; 0x40
 8012868:	220b      	movs	r2, #11
 801286a:	2120      	movs	r1, #32
 801286c:	4618      	mov	r0, r3
 801286e:	f7fd fd0c 	bl	801028a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012872:	2300      	movs	r3, #0
 8012874:	61bb      	str	r3, [r7, #24]
 8012876:	e002      	b.n	801287e <create_name+0x132>
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	3301      	adds	r3, #1
 801287c:	61bb      	str	r3, [r7, #24]
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	005b      	lsls	r3, r3, #1
 8012882:	68fa      	ldr	r2, [r7, #12]
 8012884:	4413      	add	r3, r2
 8012886:	881b      	ldrh	r3, [r3, #0]
 8012888:	2b20      	cmp	r3, #32
 801288a:	d0f5      	beq.n	8012878 <create_name+0x12c>
 801288c:	69bb      	ldr	r3, [r7, #24]
 801288e:	005b      	lsls	r3, r3, #1
 8012890:	68fa      	ldr	r2, [r7, #12]
 8012892:	4413      	add	r3, r2
 8012894:	881b      	ldrh	r3, [r3, #0]
 8012896:	2b2e      	cmp	r3, #46	; 0x2e
 8012898:	d0ee      	beq.n	8012878 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d009      	beq.n	80128b4 <create_name+0x168>
 80128a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128a4:	f043 0303 	orr.w	r3, r3, #3
 80128a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80128ac:	e002      	b.n	80128b4 <create_name+0x168>
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	3b01      	subs	r3, #1
 80128b2:	617b      	str	r3, [r7, #20]
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d009      	beq.n	80128ce <create_name+0x182>
 80128ba:	697a      	ldr	r2, [r7, #20]
 80128bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80128c0:	4413      	add	r3, r2
 80128c2:	005b      	lsls	r3, r3, #1
 80128c4:	68fa      	ldr	r2, [r7, #12]
 80128c6:	4413      	add	r3, r2
 80128c8:	881b      	ldrh	r3, [r3, #0]
 80128ca:	2b2e      	cmp	r3, #46	; 0x2e
 80128cc:	d1ef      	bne.n	80128ae <create_name+0x162>

	i = b = 0; ni = 8;
 80128ce:	2300      	movs	r3, #0
 80128d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80128d4:	2300      	movs	r3, #0
 80128d6:	623b      	str	r3, [r7, #32]
 80128d8:	2308      	movs	r3, #8
 80128da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80128dc:	69bb      	ldr	r3, [r7, #24]
 80128de:	1c5a      	adds	r2, r3, #1
 80128e0:	61ba      	str	r2, [r7, #24]
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	68fa      	ldr	r2, [r7, #12]
 80128e6:	4413      	add	r3, r2
 80128e8:	881b      	ldrh	r3, [r3, #0]
 80128ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80128ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	f000 8090 	beq.w	8012a14 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80128f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128f6:	2b20      	cmp	r3, #32
 80128f8:	d006      	beq.n	8012908 <create_name+0x1bc>
 80128fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128fc:	2b2e      	cmp	r3, #46	; 0x2e
 80128fe:	d10a      	bne.n	8012916 <create_name+0x1ca>
 8012900:	69ba      	ldr	r2, [r7, #24]
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	429a      	cmp	r2, r3
 8012906:	d006      	beq.n	8012916 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801290c:	f043 0303 	orr.w	r3, r3, #3
 8012910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012914:	e07d      	b.n	8012a12 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012916:	6a3a      	ldr	r2, [r7, #32]
 8012918:	69fb      	ldr	r3, [r7, #28]
 801291a:	429a      	cmp	r2, r3
 801291c:	d203      	bcs.n	8012926 <create_name+0x1da>
 801291e:	69ba      	ldr	r2, [r7, #24]
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	429a      	cmp	r2, r3
 8012924:	d123      	bne.n	801296e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8012926:	69fb      	ldr	r3, [r7, #28]
 8012928:	2b0b      	cmp	r3, #11
 801292a:	d106      	bne.n	801293a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801292c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012930:	f043 0303 	orr.w	r3, r3, #3
 8012934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012938:	e06f      	b.n	8012a1a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801293a:	69ba      	ldr	r2, [r7, #24]
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	429a      	cmp	r2, r3
 8012940:	d005      	beq.n	801294e <create_name+0x202>
 8012942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012946:	f043 0303 	orr.w	r3, r3, #3
 801294a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801294e:	69ba      	ldr	r2, [r7, #24]
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	429a      	cmp	r2, r3
 8012954:	d860      	bhi.n	8012a18 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	61bb      	str	r3, [r7, #24]
 801295a:	2308      	movs	r3, #8
 801295c:	623b      	str	r3, [r7, #32]
 801295e:	230b      	movs	r3, #11
 8012960:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012962:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012966:	009b      	lsls	r3, r3, #2
 8012968:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801296c:	e051      	b.n	8012a12 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801296e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012970:	2b7f      	cmp	r3, #127	; 0x7f
 8012972:	d914      	bls.n	801299e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012976:	2100      	movs	r1, #0
 8012978:	4618      	mov	r0, r3
 801297a:	f001 fc3d 	bl	80141f8 <ff_convert>
 801297e:	4603      	mov	r3, r0
 8012980:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012984:	2b00      	cmp	r3, #0
 8012986:	d004      	beq.n	8012992 <create_name+0x246>
 8012988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801298a:	3b80      	subs	r3, #128	; 0x80
 801298c:	4a49      	ldr	r2, [pc, #292]	; (8012ab4 <create_name+0x368>)
 801298e:	5cd3      	ldrb	r3, [r2, r3]
 8012990:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012996:	f043 0302 	orr.w	r3, r3, #2
 801299a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801299e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d007      	beq.n	80129b4 <create_name+0x268>
 80129a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129a6:	4619      	mov	r1, r3
 80129a8:	4843      	ldr	r0, [pc, #268]	; (8012ab8 <create_name+0x36c>)
 80129aa:	f7fd fcaf 	bl	801030c <chk_chr>
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d008      	beq.n	80129c6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80129b4:	235f      	movs	r3, #95	; 0x5f
 80129b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80129b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129bc:	f043 0303 	orr.w	r3, r3, #3
 80129c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80129c4:	e01b      	b.n	80129fe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80129c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129c8:	2b40      	cmp	r3, #64	; 0x40
 80129ca:	d909      	bls.n	80129e0 <create_name+0x294>
 80129cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129ce:	2b5a      	cmp	r3, #90	; 0x5a
 80129d0:	d806      	bhi.n	80129e0 <create_name+0x294>
					b |= 2;
 80129d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80129d6:	f043 0302 	orr.w	r3, r3, #2
 80129da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80129de:	e00e      	b.n	80129fe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80129e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129e2:	2b60      	cmp	r3, #96	; 0x60
 80129e4:	d90b      	bls.n	80129fe <create_name+0x2b2>
 80129e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129e8:	2b7a      	cmp	r3, #122	; 0x7a
 80129ea:	d808      	bhi.n	80129fe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80129ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80129f0:	f043 0301 	orr.w	r3, r3, #1
 80129f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80129f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129fa:	3b20      	subs	r3, #32
 80129fc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80129fe:	6a3b      	ldr	r3, [r7, #32]
 8012a00:	1c5a      	adds	r2, r3, #1
 8012a02:	623a      	str	r2, [r7, #32]
 8012a04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a06:	b2d1      	uxtb	r1, r2
 8012a08:	687a      	ldr	r2, [r7, #4]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	460a      	mov	r2, r1
 8012a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8012a12:	e763      	b.n	80128dc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012a14:	bf00      	nop
 8012a16:	e000      	b.n	8012a1a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8012a18:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a20:	2be5      	cmp	r3, #229	; 0xe5
 8012a22:	d103      	bne.n	8012a2c <create_name+0x2e0>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2205      	movs	r2, #5
 8012a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8012a2c:	69fb      	ldr	r3, [r7, #28]
 8012a2e:	2b08      	cmp	r3, #8
 8012a30:	d104      	bne.n	8012a3c <create_name+0x2f0>
 8012a32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a36:	009b      	lsls	r3, r3, #2
 8012a38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012a3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a40:	f003 030c 	and.w	r3, r3, #12
 8012a44:	2b0c      	cmp	r3, #12
 8012a46:	d005      	beq.n	8012a54 <create_name+0x308>
 8012a48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a4c:	f003 0303 	and.w	r3, r3, #3
 8012a50:	2b03      	cmp	r3, #3
 8012a52:	d105      	bne.n	8012a60 <create_name+0x314>
 8012a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a58:	f043 0302 	orr.w	r3, r3, #2
 8012a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a64:	f003 0302 	and.w	r3, r3, #2
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d117      	bne.n	8012a9c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012a6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a70:	f003 0303 	and.w	r3, r3, #3
 8012a74:	2b01      	cmp	r3, #1
 8012a76:	d105      	bne.n	8012a84 <create_name+0x338>
 8012a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a7c:	f043 0310 	orr.w	r3, r3, #16
 8012a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012a84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a88:	f003 030c 	and.w	r3, r3, #12
 8012a8c:	2b04      	cmp	r3, #4
 8012a8e:	d105      	bne.n	8012a9c <create_name+0x350>
 8012a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a94:	f043 0308 	orr.w	r3, r3, #8
 8012a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012aa2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8012aa6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3728      	adds	r7, #40	; 0x28
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	08014478 	.word	0x08014478
 8012ab4:	08014508 	.word	0x08014508
 8012ab8:	08014484 	.word	0x08014484

08012abc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012abc:	b590      	push	{r4, r7, lr}
 8012abe:	b087      	sub	sp, #28
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012ad0:	e002      	b.n	8012ad8 <follow_path+0x1c>
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	603b      	str	r3, [r7, #0]
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	2b2f      	cmp	r3, #47	; 0x2f
 8012ade:	d0f8      	beq.n	8012ad2 <follow_path+0x16>
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	2b5c      	cmp	r3, #92	; 0x5c
 8012ae6:	d0f4      	beq.n	8012ad2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	2200      	movs	r2, #0
 8012aec:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	2200      	movs	r2, #0
 8012af2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	2b1f      	cmp	r3, #31
 8012afa:	d80a      	bhi.n	8012b12 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2280      	movs	r2, #128	; 0x80
 8012b00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8012b04:	2100      	movs	r1, #0
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f7fe fc58 	bl	80113bc <dir_sdi>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	75fb      	strb	r3, [r7, #23]
 8012b10:	e07c      	b.n	8012c0c <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012b12:	463b      	mov	r3, r7
 8012b14:	4619      	mov	r1, r3
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f7ff fe18 	bl	801274c <create_name>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012b20:	7dfb      	ldrb	r3, [r7, #23]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d16d      	bne.n	8012c02 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7ff fb36 	bl	8012198 <dir_find>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012b36:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012b38:	7dfb      	ldrb	r3, [r7, #23]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d00a      	beq.n	8012b54 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012b3e:	7dfb      	ldrb	r3, [r7, #23]
 8012b40:	2b04      	cmp	r3, #4
 8012b42:	d160      	bne.n	8012c06 <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012b44:	7afb      	ldrb	r3, [r7, #11]
 8012b46:	f003 0304 	and.w	r3, r3, #4
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d15b      	bne.n	8012c06 <follow_path+0x14a>
 8012b4e:	2305      	movs	r3, #5
 8012b50:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012b52:	e058      	b.n	8012c06 <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012b54:	7afb      	ldrb	r3, [r7, #11]
 8012b56:	f003 0304 	and.w	r3, r3, #4
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d155      	bne.n	8012c0a <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	799b      	ldrb	r3, [r3, #6]
 8012b62:	f003 0310 	and.w	r3, r3, #16
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d102      	bne.n	8012b70 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8012b6a:	2305      	movs	r3, #5
 8012b6c:	75fb      	strb	r3, [r7, #23]
 8012b6e:	e04d      	b.n	8012c0c <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	2b04      	cmp	r3, #4
 8012b76:	d12f      	bne.n	8012bd8 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	689a      	ldr	r2, [r3, #8]
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8012b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012b8a:	693a      	ldr	r2, [r7, #16]
 8012b8c:	79d2      	ldrb	r2, [r2, #7]
 8012b8e:	431a      	orrs	r2, r3
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	695b      	ldr	r3, [r3, #20]
 8012ba0:	3334      	adds	r3, #52	; 0x34
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7fd f9a2 	bl	800feec <ld_dword>
 8012ba8:	4602      	mov	r2, r0
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	695b      	ldr	r3, [r3, #20]
 8012bb2:	3321      	adds	r3, #33	; 0x21
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	f003 0302 	and.w	r3, r3, #2
 8012bba:	b2da      	uxtb	r2, r3
 8012bbc:	693b      	ldr	r3, [r7, #16]
 8012bbe:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	695b      	ldr	r3, [r3, #20]
 8012bc4:	3338      	adds	r3, #56	; 0x38
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fd f9b3 	bl	800ff32 <ld_qword>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	460c      	mov	r4, r1
 8012bd0:	693a      	ldr	r2, [r7, #16]
 8012bd2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8012bd6:	e79c      	b.n	8012b12 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012be2:	68fa      	ldr	r2, [r7, #12]
 8012be4:	8992      	ldrh	r2, [r2, #12]
 8012be6:	fbb3 f0f2 	udiv	r0, r3, r2
 8012bea:	fb02 f200 	mul.w	r2, r2, r0
 8012bee:	1a9b      	subs	r3, r3, r2
 8012bf0:	440b      	add	r3, r1
 8012bf2:	4619      	mov	r1, r3
 8012bf4:	68f8      	ldr	r0, [r7, #12]
 8012bf6:	f7fe fdb7 	bl	8011768 <ld_clust>
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c00:	e787      	b.n	8012b12 <follow_path+0x56>
			if (res != FR_OK) break;
 8012c02:	bf00      	nop
 8012c04:	e002      	b.n	8012c0c <follow_path+0x150>
				break;
 8012c06:	bf00      	nop
 8012c08:	e000      	b.n	8012c0c <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012c0a:	bf00      	nop
			}
		}
	}

	return res;
 8012c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	371c      	adds	r7, #28
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd90      	pop	{r4, r7, pc}

08012c16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012c16:	b480      	push	{r7}
 8012c18:	b087      	sub	sp, #28
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d031      	beq.n	8012c90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	617b      	str	r3, [r7, #20]
 8012c32:	e002      	b.n	8012c3a <get_ldnumber+0x24>
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	3301      	adds	r3, #1
 8012c38:	617b      	str	r3, [r7, #20]
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	2b1f      	cmp	r3, #31
 8012c40:	d903      	bls.n	8012c4a <get_ldnumber+0x34>
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	2b3a      	cmp	r3, #58	; 0x3a
 8012c48:	d1f4      	bne.n	8012c34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	2b3a      	cmp	r3, #58	; 0x3a
 8012c50:	d11c      	bne.n	8012c8c <get_ldnumber+0x76>
			tp = *path;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	1c5a      	adds	r2, r3, #1
 8012c5c:	60fa      	str	r2, [r7, #12]
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	3b30      	subs	r3, #48	; 0x30
 8012c62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	2b09      	cmp	r3, #9
 8012c68:	d80e      	bhi.n	8012c88 <get_ldnumber+0x72>
 8012c6a:	68fa      	ldr	r2, [r7, #12]
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d10a      	bne.n	8012c88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d107      	bne.n	8012c88 <get_ldnumber+0x72>
					vol = (int)i;
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	3301      	adds	r3, #1
 8012c80:	617b      	str	r3, [r7, #20]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	697a      	ldr	r2, [r7, #20]
 8012c86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	e002      	b.n	8012c92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012c90:	693b      	ldr	r3, [r7, #16]
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	371c      	adds	r7, #28
 8012c96:	46bd      	mov	sp, r7
 8012c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9c:	4770      	bx	lr
	...

08012ca0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2200      	movs	r2, #0
 8012cae:	70da      	strb	r2, [r3, #3]
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8012cb6:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012cb8:	6839      	ldr	r1, [r7, #0]
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f7fd fcf2 	bl	80106a4 <move_window>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d001      	beq.n	8012cca <check_fs+0x2a>
 8012cc6:	2304      	movs	r3, #4
 8012cc8:	e044      	b.n	8012d54 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	333c      	adds	r3, #60	; 0x3c
 8012cce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7fd f8f2 	bl	800febc <ld_word>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	461a      	mov	r2, r3
 8012cdc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d001      	beq.n	8012ce8 <check_fs+0x48>
 8012ce4:	2303      	movs	r3, #3
 8012ce6:	e035      	b.n	8012d54 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012cee:	2be9      	cmp	r3, #233	; 0xe9
 8012cf0:	d009      	beq.n	8012d06 <check_fs+0x66>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012cf8:	2beb      	cmp	r3, #235	; 0xeb
 8012cfa:	d11e      	bne.n	8012d3a <check_fs+0x9a>
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012d02:	2b90      	cmp	r3, #144	; 0x90
 8012d04:	d119      	bne.n	8012d3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	333c      	adds	r3, #60	; 0x3c
 8012d0a:	3336      	adds	r3, #54	; 0x36
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7fd f8ed 	bl	800feec <ld_dword>
 8012d12:	4603      	mov	r3, r0
 8012d14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012d18:	4a10      	ldr	r2, [pc, #64]	; (8012d5c <check_fs+0xbc>)
 8012d1a:	4293      	cmp	r3, r2
 8012d1c:	d101      	bne.n	8012d22 <check_fs+0x82>
 8012d1e:	2300      	movs	r3, #0
 8012d20:	e018      	b.n	8012d54 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	333c      	adds	r3, #60	; 0x3c
 8012d26:	3352      	adds	r3, #82	; 0x52
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7fd f8df 	bl	800feec <ld_dword>
 8012d2e:	4602      	mov	r2, r0
 8012d30:	4b0b      	ldr	r3, [pc, #44]	; (8012d60 <check_fs+0xc0>)
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d101      	bne.n	8012d3a <check_fs+0x9a>
 8012d36:	2300      	movs	r3, #0
 8012d38:	e00c      	b.n	8012d54 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	333c      	adds	r3, #60	; 0x3c
 8012d3e:	220b      	movs	r2, #11
 8012d40:	4908      	ldr	r1, [pc, #32]	; (8012d64 <check_fs+0xc4>)
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7fd fabb 	bl	80102be <mem_cmp>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d101      	bne.n	8012d52 <check_fs+0xb2>
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e000      	b.n	8012d54 <check_fs+0xb4>
#endif
	return 2;
 8012d52:	2302      	movs	r3, #2
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3708      	adds	r7, #8
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	00544146 	.word	0x00544146
 8012d60:	33544146 	.word	0x33544146
 8012d64:	0801448c 	.word	0x0801448c

08012d68 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012d68:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012d6c:	b098      	sub	sp, #96	; 0x60
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	60f8      	str	r0, [r7, #12]
 8012d72:	60b9      	str	r1, [r7, #8]
 8012d74:	4613      	mov	r3, r2
 8012d76:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012d7e:	68f8      	ldr	r0, [r7, #12]
 8012d80:	f7ff ff49 	bl	8012c16 <get_ldnumber>
 8012d84:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8012d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	da01      	bge.n	8012d90 <find_volume+0x28>
 8012d8c:	230b      	movs	r3, #11
 8012d8e:	e36e      	b.n	801346e <find_volume+0x706>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012d90:	4aaa      	ldr	r2, [pc, #680]	; (801303c <find_volume+0x2d4>)
 8012d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d98:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d101      	bne.n	8012da4 <find_volume+0x3c>
 8012da0:	230c      	movs	r3, #12
 8012da2:	e364      	b.n	801346e <find_volume+0x706>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012da8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012daa:	79fb      	ldrb	r3, [r7, #7]
 8012dac:	f023 0301 	bic.w	r3, r3, #1
 8012db0:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d01a      	beq.n	8012df0 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8012dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dbc:	785b      	ldrb	r3, [r3, #1]
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7fc ffde 	bl	800fd80 <disk_status>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012dca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012dce:	f003 0301 	and.w	r3, r3, #1
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d10c      	bne.n	8012df0 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012dd6:	79fb      	ldrb	r3, [r7, #7]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d007      	beq.n	8012dec <find_volume+0x84>
 8012ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012de0:	f003 0304 	and.w	r3, r3, #4
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d001      	beq.n	8012dec <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8012de8:	230a      	movs	r3, #10
 8012dea:	e340      	b.n	801346e <find_volume+0x706>
			}
			return FR_OK;				/* The file system object is valid */
 8012dec:	2300      	movs	r3, #0
 8012dee:	e33e      	b.n	801346e <find_volume+0x706>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012df2:	2200      	movs	r2, #0
 8012df4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012df8:	b2da      	uxtb	r2, r3
 8012dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dfc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e00:	785b      	ldrb	r3, [r3, #1]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fc ffd6 	bl	800fdb4 <disk_initialize>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012e0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e12:	f003 0301 	and.w	r3, r3, #1
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d001      	beq.n	8012e1e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012e1a:	2303      	movs	r3, #3
 8012e1c:	e327      	b.n	801346e <find_volume+0x706>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012e1e:	79fb      	ldrb	r3, [r7, #7]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d007      	beq.n	8012e34 <find_volume+0xcc>
 8012e24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e28:	f003 0304 	and.w	r3, r3, #4
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d001      	beq.n	8012e34 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8012e30:	230a      	movs	r3, #10
 8012e32:	e31c      	b.n	801346e <find_volume+0x706>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e36:	7858      	ldrb	r0, [r3, #1]
 8012e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e3a:	330c      	adds	r3, #12
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	2102      	movs	r1, #2
 8012e40:	f7fd f81e 	bl	800fe80 <disk_ioctl>
 8012e44:	4603      	mov	r3, r0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d001      	beq.n	8012e4e <find_volume+0xe6>
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	e30f      	b.n	801346e <find_volume+0x706>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e50:	899b      	ldrh	r3, [r3, #12]
 8012e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e56:	d80d      	bhi.n	8012e74 <find_volume+0x10c>
 8012e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e5a:	899b      	ldrh	r3, [r3, #12]
 8012e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e60:	d308      	bcc.n	8012e74 <find_volume+0x10c>
 8012e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e64:	899b      	ldrh	r3, [r3, #12]
 8012e66:	461a      	mov	r2, r3
 8012e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e6a:	899b      	ldrh	r3, [r3, #12]
 8012e6c:	3b01      	subs	r3, #1
 8012e6e:	4013      	ands	r3, r2
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d001      	beq.n	8012e78 <find_volume+0x110>
 8012e74:	2301      	movs	r3, #1
 8012e76:	e2fa      	b.n	801346e <find_volume+0x706>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012e7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012e7e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012e80:	f7ff ff0e 	bl	8012ca0 <check_fs>
 8012e84:	4603      	mov	r3, r0
 8012e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e8e:	2b02      	cmp	r3, #2
 8012e90:	d14b      	bne.n	8012f2a <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012e92:	2300      	movs	r3, #0
 8012e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e96:	e01f      	b.n	8012ed8 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e9a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8012e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ea0:	011b      	lsls	r3, r3, #4
 8012ea2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012ea6:	4413      	add	r3, r2
 8012ea8:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eac:	3304      	adds	r3, #4
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d006      	beq.n	8012ec2 <find_volume+0x15a>
 8012eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb6:	3308      	adds	r3, #8
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7fd f817 	bl	800feec <ld_dword>
 8012ebe:	4602      	mov	r2, r0
 8012ec0:	e000      	b.n	8012ec4 <find_volume+0x15c>
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ec6:	009b      	lsls	r3, r3, #2
 8012ec8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8012ecc:	440b      	add	r3, r1
 8012ece:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ed4:	3301      	adds	r3, #1
 8012ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012eda:	2b03      	cmp	r3, #3
 8012edc:	d9dc      	bls.n	8012e98 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012ede:	2300      	movs	r3, #0
 8012ee0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8012ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d002      	beq.n	8012eee <find_volume+0x186>
 8012ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012eea:	3b01      	subs	r3, #1
 8012eec:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ef0:	009b      	lsls	r3, r3, #2
 8012ef2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012ef6:	4413      	add	r3, r2
 8012ef8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8012efc:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d005      	beq.n	8012f10 <find_volume+0x1a8>
 8012f04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012f06:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012f08:	f7ff feca 	bl	8012ca0 <check_fs>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	e000      	b.n	8012f12 <find_volume+0x1aa>
 8012f10:	2303      	movs	r3, #3
 8012f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d905      	bls.n	8012f2a <find_volume+0x1c2>
 8012f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f20:	3301      	adds	r3, #1
 8012f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f26:	2b03      	cmp	r3, #3
 8012f28:	d9e1      	bls.n	8012eee <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012f2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f2e:	2b04      	cmp	r3, #4
 8012f30:	d101      	bne.n	8012f36 <find_volume+0x1ce>
 8012f32:	2301      	movs	r3, #1
 8012f34:	e29b      	b.n	801346e <find_volume+0x706>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012f36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f3a:	2b01      	cmp	r3, #1
 8012f3c:	d901      	bls.n	8012f42 <find_volume+0x1da>
 8012f3e:	230d      	movs	r3, #13
 8012f40:	e295      	b.n	801346e <find_volume+0x706>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8012f42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	f040 8101 	bne.w	801314e <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8012f4c:	230b      	movs	r3, #11
 8012f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f50:	e002      	b.n	8012f58 <find_volume+0x1f0>
 8012f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f54:	3301      	adds	r3, #1
 8012f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f5a:	2b3f      	cmp	r3, #63	; 0x3f
 8012f5c:	d806      	bhi.n	8012f6c <find_volume+0x204>
 8012f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f62:	4413      	add	r3, r2
 8012f64:	333c      	adds	r3, #60	; 0x3c
 8012f66:	781b      	ldrb	r3, [r3, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d0f2      	beq.n	8012f52 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8012f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f6e:	2b3f      	cmp	r3, #63	; 0x3f
 8012f70:	d801      	bhi.n	8012f76 <find_volume+0x20e>
 8012f72:	230d      	movs	r3, #13
 8012f74:	e27b      	b.n	801346e <find_volume+0x706>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8012f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f78:	333c      	adds	r3, #60	; 0x3c
 8012f7a:	3368      	adds	r3, #104	; 0x68
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7fc ff9d 	bl	800febc <ld_word>
 8012f82:	4603      	mov	r3, r0
 8012f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f88:	d001      	beq.n	8012f8e <find_volume+0x226>
 8012f8a:	230d      	movs	r3, #13
 8012f8c:	e26f      	b.n	801346e <find_volume+0x706>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8012f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f90:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8012f94:	461a      	mov	r2, r3
 8012f96:	2301      	movs	r3, #1
 8012f98:	4093      	lsls	r3, r2
 8012f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f9c:	8992      	ldrh	r2, [r2, #12]
 8012f9e:	4293      	cmp	r3, r2
 8012fa0:	d001      	beq.n	8012fa6 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 8012fa2:	230d      	movs	r3, #13
 8012fa4:	e263      	b.n	801346e <find_volume+0x706>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8012fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fa8:	333c      	adds	r3, #60	; 0x3c
 8012faa:	3348      	adds	r3, #72	; 0x48
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7fc ffc0 	bl	800ff32 <ld_qword>
 8012fb2:	460a      	mov	r2, r1
 8012fb4:	4601      	mov	r1, r0
 8012fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fb8:	469b      	mov	fp, r3
 8012fba:	f04f 0c00 	mov.w	ip, #0
 8012fbe:	eb1b 0301 	adds.w	r3, fp, r1
 8012fc2:	eb4c 0402 	adc.w	r4, ip, r2
 8012fc6:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8012fca:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012fce:	2c01      	cmp	r4, #1
 8012fd0:	bf08      	it	eq
 8012fd2:	2b00      	cmpeq	r3, #0
 8012fd4:	d301      	bcc.n	8012fda <find_volume+0x272>
 8012fd6:	230d      	movs	r3, #13
 8012fd8:	e249      	b.n	801346e <find_volume+0x706>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8012fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fdc:	333c      	adds	r3, #60	; 0x3c
 8012fde:	3354      	adds	r3, #84	; 0x54
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7fc ff83 	bl	800feec <ld_dword>
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fea:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8012fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fee:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8012ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ff4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8012ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ff8:	789b      	ldrb	r3, [r3, #2]
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d001      	beq.n	8013002 <find_volume+0x29a>
 8012ffe:	230d      	movs	r3, #13
 8013000:	e235      	b.n	801346e <find_volume+0x706>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8013002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013004:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8013008:	461a      	mov	r2, r3
 801300a:	2301      	movs	r3, #1
 801300c:	4093      	lsls	r3, r2
 801300e:	b29a      	uxth	r2, r3
 8013010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013012:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8013014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013016:	895b      	ldrh	r3, [r3, #10]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d101      	bne.n	8013020 <find_volume+0x2b8>
 801301c:	230d      	movs	r3, #13
 801301e:	e226      	b.n	801346e <find_volume+0x706>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8013020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013022:	333c      	adds	r3, #60	; 0x3c
 8013024:	335c      	adds	r3, #92	; 0x5c
 8013026:	4618      	mov	r0, r3
 8013028:	f7fc ff60 	bl	800feec <ld_dword>
 801302c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 801302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013030:	4a03      	ldr	r2, [pc, #12]	; (8013040 <find_volume+0x2d8>)
 8013032:	4293      	cmp	r3, r2
 8013034:	d906      	bls.n	8013044 <find_volume+0x2dc>
 8013036:	230d      	movs	r3, #13
 8013038:	e219      	b.n	801346e <find_volume+0x706>
 801303a:	bf00      	nop
 801303c:	240000ec 	.word	0x240000ec
 8013040:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8013044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013046:	1c9a      	adds	r2, r3, #2
 8013048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801304a:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 801304c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801304e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013050:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8013052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013054:	333c      	adds	r3, #60	; 0x3c
 8013056:	3358      	adds	r3, #88	; 0x58
 8013058:	4618      	mov	r0, r3
 801305a:	f7fc ff47 	bl	800feec <ld_dword>
 801305e:	4602      	mov	r2, r0
 8013060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013062:	441a      	add	r2, r3
 8013064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013066:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8013068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801306a:	333c      	adds	r3, #60	; 0x3c
 801306c:	3350      	adds	r3, #80	; 0x50
 801306e:	4618      	mov	r0, r3
 8013070:	f7fc ff3c 	bl	800feec <ld_dword>
 8013074:	4602      	mov	r2, r0
 8013076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013078:	441a      	add	r2, r3
 801307a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801307c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 801307e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013082:	4619      	mov	r1, r3
 8013084:	f04f 0200 	mov.w	r2, #0
 8013088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801308a:	895b      	ldrh	r3, [r3, #10]
 801308c:	4618      	mov	r0, r3
 801308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013090:	fb03 f300 	mul.w	r3, r3, r0
 8013094:	469b      	mov	fp, r3
 8013096:	f04f 0c00 	mov.w	ip, #0
 801309a:	eb1b 0301 	adds.w	r3, fp, r1
 801309e:	eb4c 0402 	adc.w	r4, ip, r2
 80130a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80130a6:	42a2      	cmp	r2, r4
 80130a8:	bf08      	it	eq
 80130aa:	4299      	cmpeq	r1, r3
 80130ac:	d201      	bcs.n	80130b2 <find_volume+0x34a>
 80130ae:	230d      	movs	r3, #13
 80130b0:	e1dd      	b.n	801346e <find_volume+0x706>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80130b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130b4:	333c      	adds	r3, #60	; 0x3c
 80130b6:	3360      	adds	r3, #96	; 0x60
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fc ff17 	bl	800feec <ld_dword>
 80130be:	4602      	mov	r2, r0
 80130c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130c2:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80130c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130c8:	4619      	mov	r1, r3
 80130ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80130cc:	f7fd fb88 	bl	80107e0 <clust2sect>
 80130d0:	4603      	mov	r3, r0
 80130d2:	4619      	mov	r1, r3
 80130d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80130d6:	f7fd fae5 	bl	80106a4 <move_window>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d001      	beq.n	80130e4 <find_volume+0x37c>
 80130e0:	2301      	movs	r3, #1
 80130e2:	e1c4      	b.n	801346e <find_volume+0x706>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80130e4:	2300      	movs	r3, #0
 80130e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80130e8:	e015      	b.n	8013116 <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80130ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130ee:	4413      	add	r3, r2
 80130f0:	333c      	adds	r3, #60	; 0x3c
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	2b81      	cmp	r3, #129	; 0x81
 80130f6:	d10b      	bne.n	8013110 <find_volume+0x3a8>
 80130f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130fa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80130fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013100:	3314      	adds	r3, #20
 8013102:	4413      	add	r3, r2
 8013104:	4618      	mov	r0, r3
 8013106:	f7fc fef1 	bl	800feec <ld_dword>
 801310a:	4603      	mov	r3, r0
 801310c:	2b02      	cmp	r3, #2
 801310e:	d009      	beq.n	8013124 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8013110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013112:	3320      	adds	r3, #32
 8013114:	64bb      	str	r3, [r7, #72]	; 0x48
 8013116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013118:	899b      	ldrh	r3, [r3, #12]
 801311a:	461a      	mov	r2, r3
 801311c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801311e:	4293      	cmp	r3, r2
 8013120:	d3e3      	bcc.n	80130ea <find_volume+0x382>
 8013122:	e000      	b.n	8013126 <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8013124:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8013126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013128:	899b      	ldrh	r3, [r3, #12]
 801312a:	461a      	mov	r2, r3
 801312c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801312e:	4293      	cmp	r3, r2
 8013130:	d101      	bne.n	8013136 <find_volume+0x3ce>
 8013132:	230d      	movs	r3, #13
 8013134:	e19b      	b.n	801346e <find_volume+0x706>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013138:	f04f 32ff 	mov.w	r2, #4294967295
 801313c:	61da      	str	r2, [r3, #28]
 801313e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013140:	69da      	ldr	r2, [r3, #28]
 8013142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013144:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8013146:	2304      	movs	r3, #4
 8013148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801314c:	e177      	b.n	801343e <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801314e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013150:	333c      	adds	r3, #60	; 0x3c
 8013152:	330b      	adds	r3, #11
 8013154:	4618      	mov	r0, r3
 8013156:	f7fc feb1 	bl	800febc <ld_word>
 801315a:	4603      	mov	r3, r0
 801315c:	461a      	mov	r2, r3
 801315e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013160:	899b      	ldrh	r3, [r3, #12]
 8013162:	429a      	cmp	r2, r3
 8013164:	d001      	beq.n	801316a <find_volume+0x402>
 8013166:	230d      	movs	r3, #13
 8013168:	e181      	b.n	801346e <find_volume+0x706>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801316a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801316c:	333c      	adds	r3, #60	; 0x3c
 801316e:	3316      	adds	r3, #22
 8013170:	4618      	mov	r0, r3
 8013172:	f7fc fea3 	bl	800febc <ld_word>
 8013176:	4603      	mov	r3, r0
 8013178:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801317a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801317c:	2b00      	cmp	r3, #0
 801317e:	d106      	bne.n	801318e <find_volume+0x426>
 8013180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013182:	333c      	adds	r3, #60	; 0x3c
 8013184:	3324      	adds	r3, #36	; 0x24
 8013186:	4618      	mov	r0, r3
 8013188:	f7fc feb0 	bl	800feec <ld_dword>
 801318c:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 801318e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013190:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013192:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013196:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 801319a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801319c:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801319e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131a0:	789b      	ldrb	r3, [r3, #2]
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d005      	beq.n	80131b2 <find_volume+0x44a>
 80131a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131a8:	789b      	ldrb	r3, [r3, #2]
 80131aa:	2b02      	cmp	r3, #2
 80131ac:	d001      	beq.n	80131b2 <find_volume+0x44a>
 80131ae:	230d      	movs	r3, #13
 80131b0:	e15d      	b.n	801346e <find_volume+0x706>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80131b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131b4:	789b      	ldrb	r3, [r3, #2]
 80131b6:	461a      	mov	r2, r3
 80131b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131ba:	fb02 f303 	mul.w	r3, r2, r3
 80131be:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80131c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131c2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80131c6:	b29a      	uxth	r2, r3
 80131c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ca:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80131cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ce:	895b      	ldrh	r3, [r3, #10]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d008      	beq.n	80131e6 <find_volume+0x47e>
 80131d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131d6:	895b      	ldrh	r3, [r3, #10]
 80131d8:	461a      	mov	r2, r3
 80131da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131dc:	895b      	ldrh	r3, [r3, #10]
 80131de:	3b01      	subs	r3, #1
 80131e0:	4013      	ands	r3, r2
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d001      	beq.n	80131ea <find_volume+0x482>
 80131e6:	230d      	movs	r3, #13
 80131e8:	e141      	b.n	801346e <find_volume+0x706>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80131ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ec:	333c      	adds	r3, #60	; 0x3c
 80131ee:	3311      	adds	r3, #17
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7fc fe63 	bl	800febc <ld_word>
 80131f6:	4603      	mov	r3, r0
 80131f8:	461a      	mov	r2, r3
 80131fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131fc:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80131fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013200:	891b      	ldrh	r3, [r3, #8]
 8013202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013204:	8992      	ldrh	r2, [r2, #12]
 8013206:	0952      	lsrs	r2, r2, #5
 8013208:	b292      	uxth	r2, r2
 801320a:	fbb3 f1f2 	udiv	r1, r3, r2
 801320e:	fb02 f201 	mul.w	r2, r2, r1
 8013212:	1a9b      	subs	r3, r3, r2
 8013214:	b29b      	uxth	r3, r3
 8013216:	2b00      	cmp	r3, #0
 8013218:	d001      	beq.n	801321e <find_volume+0x4b6>
 801321a:	230d      	movs	r3, #13
 801321c:	e127      	b.n	801346e <find_volume+0x706>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801321e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013220:	333c      	adds	r3, #60	; 0x3c
 8013222:	3313      	adds	r3, #19
 8013224:	4618      	mov	r0, r3
 8013226:	f7fc fe49 	bl	800febc <ld_word>
 801322a:	4603      	mov	r3, r0
 801322c:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801322e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013230:	2b00      	cmp	r3, #0
 8013232:	d106      	bne.n	8013242 <find_volume+0x4da>
 8013234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013236:	333c      	adds	r3, #60	; 0x3c
 8013238:	3320      	adds	r3, #32
 801323a:	4618      	mov	r0, r3
 801323c:	f7fc fe56 	bl	800feec <ld_dword>
 8013240:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013244:	333c      	adds	r3, #60	; 0x3c
 8013246:	330e      	adds	r3, #14
 8013248:	4618      	mov	r0, r3
 801324a:	f7fc fe37 	bl	800febc <ld_word>
 801324e:	4603      	mov	r3, r0
 8013250:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013252:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013254:	2b00      	cmp	r3, #0
 8013256:	d101      	bne.n	801325c <find_volume+0x4f4>
 8013258:	230d      	movs	r3, #13
 801325a:	e108      	b.n	801346e <find_volume+0x706>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801325c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801325e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013260:	4413      	add	r3, r2
 8013262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013264:	8911      	ldrh	r1, [r2, #8]
 8013266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013268:	8992      	ldrh	r2, [r2, #12]
 801326a:	0952      	lsrs	r2, r2, #5
 801326c:	b292      	uxth	r2, r2
 801326e:	fbb1 f2f2 	udiv	r2, r1, r2
 8013272:	b292      	uxth	r2, r2
 8013274:	4413      	add	r3, r2
 8013276:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801327c:	429a      	cmp	r2, r3
 801327e:	d201      	bcs.n	8013284 <find_volume+0x51c>
 8013280:	230d      	movs	r3, #13
 8013282:	e0f4      	b.n	801346e <find_volume+0x706>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013284:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013288:	1ad3      	subs	r3, r2, r3
 801328a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801328c:	8952      	ldrh	r2, [r2, #10]
 801328e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013292:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013296:	2b00      	cmp	r3, #0
 8013298:	d101      	bne.n	801329e <find_volume+0x536>
 801329a:	230d      	movs	r3, #13
 801329c:	e0e7      	b.n	801346e <find_volume+0x706>
		fmt = FS_FAT32;
 801329e:	2303      	movs	r3, #3
 80132a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80132a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80132aa:	4293      	cmp	r3, r2
 80132ac:	d802      	bhi.n	80132b4 <find_volume+0x54c>
 80132ae:	2302      	movs	r3, #2
 80132b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80132b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80132ba:	4293      	cmp	r3, r2
 80132bc:	d802      	bhi.n	80132c4 <find_volume+0x55c>
 80132be:	2301      	movs	r3, #1
 80132c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80132c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c6:	1c9a      	adds	r2, r3, #2
 80132c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132ca:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80132cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80132d0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80132d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80132d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80132d6:	441a      	add	r2, r3
 80132d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132da:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80132dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80132de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e0:	441a      	add	r2, r3
 80132e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132e4:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80132e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132ea:	2b03      	cmp	r3, #3
 80132ec:	d11e      	bne.n	801332c <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80132ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132f0:	333c      	adds	r3, #60	; 0x3c
 80132f2:	332a      	adds	r3, #42	; 0x2a
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7fc fde1 	bl	800febc <ld_word>
 80132fa:	4603      	mov	r3, r0
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d001      	beq.n	8013304 <find_volume+0x59c>
 8013300:	230d      	movs	r3, #13
 8013302:	e0b4      	b.n	801346e <find_volume+0x706>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013306:	891b      	ldrh	r3, [r3, #8]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d001      	beq.n	8013310 <find_volume+0x5a8>
 801330c:	230d      	movs	r3, #13
 801330e:	e0ae      	b.n	801346e <find_volume+0x706>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013312:	333c      	adds	r3, #60	; 0x3c
 8013314:	332c      	adds	r3, #44	; 0x2c
 8013316:	4618      	mov	r0, r3
 8013318:	f7fc fde8 	bl	800feec <ld_dword>
 801331c:	4602      	mov	r2, r0
 801331e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013320:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013324:	6a1b      	ldr	r3, [r3, #32]
 8013326:	009b      	lsls	r3, r3, #2
 8013328:	64fb      	str	r3, [r7, #76]	; 0x4c
 801332a:	e01f      	b.n	801336c <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801332c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801332e:	891b      	ldrh	r3, [r3, #8]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d101      	bne.n	8013338 <find_volume+0x5d0>
 8013334:	230d      	movs	r3, #13
 8013336:	e09a      	b.n	801346e <find_volume+0x706>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801333c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801333e:	441a      	add	r2, r3
 8013340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013342:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013348:	2b02      	cmp	r3, #2
 801334a:	d103      	bne.n	8013354 <find_volume+0x5ec>
 801334c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801334e:	6a1b      	ldr	r3, [r3, #32]
 8013350:	005b      	lsls	r3, r3, #1
 8013352:	e00a      	b.n	801336a <find_volume+0x602>
 8013354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013356:	6a1a      	ldr	r2, [r3, #32]
 8013358:	4613      	mov	r3, r2
 801335a:	005b      	lsls	r3, r3, #1
 801335c:	4413      	add	r3, r2
 801335e:	085a      	lsrs	r2, r3, #1
 8013360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013362:	6a1b      	ldr	r3, [r3, #32]
 8013364:	f003 0301 	and.w	r3, r3, #1
 8013368:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801336a:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801336c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801336e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013372:	899b      	ldrh	r3, [r3, #12]
 8013374:	4619      	mov	r1, r3
 8013376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013378:	440b      	add	r3, r1
 801337a:	3b01      	subs	r3, #1
 801337c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801337e:	8989      	ldrh	r1, [r1, #12]
 8013380:	fbb3 f3f1 	udiv	r3, r3, r1
 8013384:	429a      	cmp	r2, r3
 8013386:	d201      	bcs.n	801338c <find_volume+0x624>
 8013388:	230d      	movs	r3, #13
 801338a:	e070      	b.n	801346e <find_volume+0x706>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801338c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801338e:	f04f 32ff 	mov.w	r2, #4294967295
 8013392:	61da      	str	r2, [r3, #28]
 8013394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013396:	69da      	ldr	r2, [r3, #28]
 8013398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801339a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 801339c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801339e:	2280      	movs	r2, #128	; 0x80
 80133a0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80133a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133a6:	2b03      	cmp	r3, #3
 80133a8:	d149      	bne.n	801343e <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80133aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133ac:	333c      	adds	r3, #60	; 0x3c
 80133ae:	3330      	adds	r3, #48	; 0x30
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7fc fd83 	bl	800febc <ld_word>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b01      	cmp	r3, #1
 80133ba:	d140      	bne.n	801343e <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 80133bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133be:	3301      	adds	r3, #1
 80133c0:	4619      	mov	r1, r3
 80133c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80133c4:	f7fd f96e 	bl	80106a4 <move_window>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d137      	bne.n	801343e <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 80133ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133d0:	2200      	movs	r2, #0
 80133d2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80133d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133d6:	333c      	adds	r3, #60	; 0x3c
 80133d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80133dc:	4618      	mov	r0, r3
 80133de:	f7fc fd6d 	bl	800febc <ld_word>
 80133e2:	4603      	mov	r3, r0
 80133e4:	461a      	mov	r2, r3
 80133e6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d127      	bne.n	801343e <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80133ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133f0:	333c      	adds	r3, #60	; 0x3c
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7fc fd7a 	bl	800feec <ld_dword>
 80133f8:	4602      	mov	r2, r0
 80133fa:	4b1f      	ldr	r3, [pc, #124]	; (8013478 <find_volume+0x710>)
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d11e      	bne.n	801343e <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013402:	333c      	adds	r3, #60	; 0x3c
 8013404:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013408:	4618      	mov	r0, r3
 801340a:	f7fc fd6f 	bl	800feec <ld_dword>
 801340e:	4602      	mov	r2, r0
 8013410:	4b1a      	ldr	r3, [pc, #104]	; (801347c <find_volume+0x714>)
 8013412:	429a      	cmp	r2, r3
 8013414:	d113      	bne.n	801343e <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013418:	333c      	adds	r3, #60	; 0x3c
 801341a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801341e:	4618      	mov	r0, r3
 8013420:	f7fc fd64 	bl	800feec <ld_dword>
 8013424:	4602      	mov	r2, r0
 8013426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013428:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801342a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801342c:	333c      	adds	r3, #60	; 0x3c
 801342e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013432:	4618      	mov	r0, r3
 8013434:	f7fc fd5a 	bl	800feec <ld_dword>
 8013438:	4602      	mov	r2, r0
 801343a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801343c:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801343e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013440:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8013444:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013446:	4b0e      	ldr	r3, [pc, #56]	; (8013480 <find_volume+0x718>)
 8013448:	881b      	ldrh	r3, [r3, #0]
 801344a:	3301      	adds	r3, #1
 801344c:	b29a      	uxth	r2, r3
 801344e:	4b0c      	ldr	r3, [pc, #48]	; (8013480 <find_volume+0x718>)
 8013450:	801a      	strh	r2, [r3, #0]
 8013452:	4b0b      	ldr	r3, [pc, #44]	; (8013480 <find_volume+0x718>)
 8013454:	881a      	ldrh	r2, [r3, #0]
 8013456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013458:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801345a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801345c:	4a09      	ldr	r2, [pc, #36]	; (8013484 <find_volume+0x71c>)
 801345e:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8013460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013462:	4a09      	ldr	r2, [pc, #36]	; (8013488 <find_volume+0x720>)
 8013464:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013466:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013468:	f7fd f8b4 	bl	80105d4 <clear_lock>
#endif
	return FR_OK;
 801346c:	2300      	movs	r3, #0
}
 801346e:	4618      	mov	r0, r3
 8013470:	3760      	adds	r7, #96	; 0x60
 8013472:	46bd      	mov	sp, r7
 8013474:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8013478:	41615252 	.word	0x41615252
 801347c:	61417272 	.word	0x61417272
 8013480:	240000f0 	.word	0x240000f0
 8013484:	24000374 	.word	0x24000374
 8013488:	24000114 	.word	0x24000114

0801348c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b084      	sub	sp, #16
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
 8013494:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013496:	2309      	movs	r3, #9
 8013498:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d01c      	beq.n	80134da <validate+0x4e>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d018      	beq.n	80134da <validate+0x4e>
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	781b      	ldrb	r3, [r3, #0]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d013      	beq.n	80134da <validate+0x4e>
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	889a      	ldrh	r2, [r3, #4]
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	88db      	ldrh	r3, [r3, #6]
 80134bc:	429a      	cmp	r2, r3
 80134be:	d10c      	bne.n	80134da <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	785b      	ldrb	r3, [r3, #1]
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7fc fc5a 	bl	800fd80 <disk_status>
 80134cc:	4603      	mov	r3, r0
 80134ce:	f003 0301 	and.w	r3, r3, #1
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d101      	bne.n	80134da <validate+0x4e>
			res = FR_OK;
 80134d6:	2300      	movs	r3, #0
 80134d8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80134da:	7bfb      	ldrb	r3, [r7, #15]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d102      	bne.n	80134e6 <validate+0x5a>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	e000      	b.n	80134e8 <validate+0x5c>
 80134e6:	2300      	movs	r3, #0
 80134e8:	683a      	ldr	r2, [r7, #0]
 80134ea:	6013      	str	r3, [r2, #0]
	return res;
 80134ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3710      	adds	r7, #16
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
	...

080134f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b088      	sub	sp, #32
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	4613      	mov	r3, r2
 8013504:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801350a:	f107 0310 	add.w	r3, r7, #16
 801350e:	4618      	mov	r0, r3
 8013510:	f7ff fb81 	bl	8012c16 <get_ldnumber>
 8013514:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013516:	69fb      	ldr	r3, [r7, #28]
 8013518:	2b00      	cmp	r3, #0
 801351a:	da01      	bge.n	8013520 <f_mount+0x28>
 801351c:	230b      	movs	r3, #11
 801351e:	e02b      	b.n	8013578 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013520:	4a17      	ldr	r2, [pc, #92]	; (8013580 <f_mount+0x88>)
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013528:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801352a:	69bb      	ldr	r3, [r7, #24]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d005      	beq.n	801353c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013530:	69b8      	ldr	r0, [r7, #24]
 8013532:	f7fd f84f 	bl	80105d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	2200      	movs	r2, #0
 801353a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d002      	beq.n	8013548 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	2200      	movs	r2, #0
 8013546:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	490d      	ldr	r1, [pc, #52]	; (8013580 <f_mount+0x88>)
 801354c:	69fb      	ldr	r3, [r7, #28]
 801354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d002      	beq.n	801355e <f_mount+0x66>
 8013558:	79fb      	ldrb	r3, [r7, #7]
 801355a:	2b01      	cmp	r3, #1
 801355c:	d001      	beq.n	8013562 <f_mount+0x6a>
 801355e:	2300      	movs	r3, #0
 8013560:	e00a      	b.n	8013578 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013562:	f107 010c 	add.w	r1, r7, #12
 8013566:	f107 0308 	add.w	r3, r7, #8
 801356a:	2200      	movs	r2, #0
 801356c:	4618      	mov	r0, r3
 801356e:	f7ff fbfb 	bl	8012d68 <find_volume>
 8013572:	4603      	mov	r3, r0
 8013574:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013576:	7dfb      	ldrb	r3, [r7, #23]
}
 8013578:	4618      	mov	r0, r3
 801357a:	3720      	adds	r7, #32
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}
 8013580:	240000ec 	.word	0x240000ec

08013584 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013584:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8013588:	b0a2      	sub	sp, #136	; 0x88
 801358a:	af00      	add	r7, sp, #0
 801358c:	60f8      	str	r0, [r7, #12]
 801358e:	60b9      	str	r1, [r7, #8]
 8013590:	4613      	mov	r3, r2
 8013592:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d101      	bne.n	801359e <f_open+0x1a>
 801359a:	2309      	movs	r3, #9
 801359c:	e2a8      	b.n	8013af0 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801359e:	79fb      	ldrb	r3, [r7, #7]
 80135a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135a4:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80135a6:	79fa      	ldrb	r2, [r7, #7]
 80135a8:	f107 0114 	add.w	r1, r7, #20
 80135ac:	f107 0308 	add.w	r3, r7, #8
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ff fbd9 	bl	8012d68 <find_volume>
 80135b6:	4603      	mov	r3, r0
 80135b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 80135bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	f040 828c 	bne.w	8013ade <f_open+0x55a>
		dj.obj.fs = fs;
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80135ca:	68ba      	ldr	r2, [r7, #8]
 80135cc:	f107 0318 	add.w	r3, r7, #24
 80135d0:	4611      	mov	r1, r2
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7ff fa72 	bl	8012abc <follow_path>
 80135d8:	4603      	mov	r3, r0
 80135da:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80135de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d11a      	bne.n	801361c <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80135e6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80135ea:	b25b      	sxtb	r3, r3
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	da03      	bge.n	80135f8 <f_open+0x74>
				res = FR_INVALID_NAME;
 80135f0:	2306      	movs	r3, #6
 80135f2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80135f6:	e011      	b.n	801361c <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80135f8:	79fb      	ldrb	r3, [r7, #7]
 80135fa:	f023 0301 	bic.w	r3, r3, #1
 80135fe:	2b00      	cmp	r3, #0
 8013600:	bf14      	ite	ne
 8013602:	2301      	movne	r3, #1
 8013604:	2300      	moveq	r3, #0
 8013606:	b2db      	uxtb	r3, r3
 8013608:	461a      	mov	r2, r3
 801360a:	f107 0318 	add.w	r3, r7, #24
 801360e:	4611      	mov	r1, r2
 8013610:	4618      	mov	r0, r3
 8013612:	f7fc fe97 	bl	8010344 <chk_lock>
 8013616:	4603      	mov	r3, r0
 8013618:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801361c:	79fb      	ldrb	r3, [r7, #7]
 801361e:	f003 031c 	and.w	r3, r3, #28
 8013622:	2b00      	cmp	r3, #0
 8013624:	f000 8109 	beq.w	801383a <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 8013628:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801362c:	2b00      	cmp	r3, #0
 801362e:	d017      	beq.n	8013660 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013630:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013634:	2b04      	cmp	r3, #4
 8013636:	d10e      	bne.n	8013656 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013638:	f7fc fee0 	bl	80103fc <enq_lock>
 801363c:	4603      	mov	r3, r0
 801363e:	2b00      	cmp	r3, #0
 8013640:	d006      	beq.n	8013650 <f_open+0xcc>
 8013642:	f107 0318 	add.w	r3, r7, #24
 8013646:	4618      	mov	r0, r3
 8013648:	f7fe fed0 	bl	80123ec <dir_register>
 801364c:	4603      	mov	r3, r0
 801364e:	e000      	b.n	8013652 <f_open+0xce>
 8013650:	2312      	movs	r3, #18
 8013652:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013656:	79fb      	ldrb	r3, [r7, #7]
 8013658:	f043 0308 	orr.w	r3, r3, #8
 801365c:	71fb      	strb	r3, [r7, #7]
 801365e:	e010      	b.n	8013682 <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013660:	7fbb      	ldrb	r3, [r7, #30]
 8013662:	f003 0311 	and.w	r3, r3, #17
 8013666:	2b00      	cmp	r3, #0
 8013668:	d003      	beq.n	8013672 <f_open+0xee>
					res = FR_DENIED;
 801366a:	2307      	movs	r3, #7
 801366c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8013670:	e007      	b.n	8013682 <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013672:	79fb      	ldrb	r3, [r7, #7]
 8013674:	f003 0304 	and.w	r3, r3, #4
 8013678:	2b00      	cmp	r3, #0
 801367a:	d002      	beq.n	8013682 <f_open+0xfe>
 801367c:	2308      	movs	r3, #8
 801367e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013682:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013686:	2b00      	cmp	r3, #0
 8013688:	f040 80f1 	bne.w	801386e <f_open+0x2ea>
 801368c:	79fb      	ldrb	r3, [r7, #7]
 801368e:	f003 0308 	and.w	r3, r3, #8
 8013692:	2b00      	cmp	r3, #0
 8013694:	f000 80eb 	beq.w	801386e <f_open+0x2ea>
				dw = GET_FATTIME();
 8013698:	f7fc f9ec 	bl	800fa74 <get_fattime>
 801369c:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	2b04      	cmp	r3, #4
 80136a4:	f040 8082 	bne.w	80137ac <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 80136a8:	697a      	ldr	r2, [r7, #20]
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	695b      	ldr	r3, [r3, #20]
 80136b2:	3334      	adds	r3, #52	; 0x34
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7fc fc19 	bl	800feec <ld_dword>
 80136ba:	4602      	mov	r2, r0
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	695b      	ldr	r3, [r3, #20]
 80136c4:	3338      	adds	r3, #56	; 0x38
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fc fc33 	bl	800ff32 <ld_qword>
 80136cc:	4603      	mov	r3, r0
 80136ce:	460c      	mov	r4, r1
 80136d0:	68fa      	ldr	r2, [r7, #12]
 80136d2:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	695b      	ldr	r3, [r3, #20]
 80136da:	3321      	adds	r3, #33	; 0x21
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	f003 0302 	and.w	r3, r3, #2
 80136e2:	b2da      	uxtb	r2, r3
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2200      	movs	r2, #0
 80136ec:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	695b      	ldr	r3, [r3, #20]
 80136f2:	3308      	adds	r3, #8
 80136f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7fc fcf3 	bl	80100e2 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	695b      	ldr	r3, [r3, #20]
 8013700:	3314      	adds	r3, #20
 8013702:	2200      	movs	r2, #0
 8013704:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	695b      	ldr	r3, [r3, #20]
 801370a:	330c      	adds	r3, #12
 801370c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801370e:	4618      	mov	r0, r3
 8013710:	f7fc fce7 	bl	80100e2 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	695b      	ldr	r3, [r3, #20]
 8013718:	3315      	adds	r3, #21
 801371a:	2200      	movs	r2, #0
 801371c:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	695b      	ldr	r3, [r3, #20]
 8013722:	3304      	adds	r3, #4
 8013724:	2220      	movs	r2, #32
 8013726:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	695b      	ldr	r3, [r3, #20]
 801372c:	3334      	adds	r3, #52	; 0x34
 801372e:	2100      	movs	r1, #0
 8013730:	4618      	mov	r0, r3
 8013732:	f7fc fcd6 	bl	80100e2 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	695b      	ldr	r3, [r3, #20]
 801373a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801373e:	f04f 0200 	mov.w	r2, #0
 8013742:	f04f 0300 	mov.w	r3, #0
 8013746:	4608      	mov	r0, r1
 8013748:	f7fc fcf7 	bl	801013a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	695b      	ldr	r3, [r3, #20]
 8013750:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8013754:	f04f 0200 	mov.w	r2, #0
 8013758:	f04f 0300 	mov.w	r3, #0
 801375c:	4608      	mov	r0, r1
 801375e:	f7fc fcec 	bl	801013a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	695b      	ldr	r3, [r3, #20]
 8013766:	3321      	adds	r3, #33	; 0x21
 8013768:	2201      	movs	r2, #1
 801376a:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 801376c:	f107 0318 	add.w	r3, r7, #24
 8013770:	4618      	mov	r0, r3
 8013772:	f7fe fb88 	bl	8011e86 <store_xdir>
 8013776:	4603      	mov	r3, r0
 8013778:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 801377c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013780:	2b00      	cmp	r3, #0
 8013782:	d174      	bne.n	801386e <f_open+0x2ea>
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	689b      	ldr	r3, [r3, #8]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d070      	beq.n	801386e <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 801378c:	68f8      	ldr	r0, [r7, #12]
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	689b      	ldr	r3, [r3, #8]
 8013792:	2200      	movs	r2, #0
 8013794:	4619      	mov	r1, r3
 8013796:	f7fd fc15 	bl	8010fc4 <remove_chain>
 801379a:	4603      	mov	r3, r0
 801379c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	689a      	ldr	r2, [r3, #8]
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	3a01      	subs	r2, #1
 80137a8:	619a      	str	r2, [r3, #24]
 80137aa:	e060      	b.n	801386e <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80137ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137ae:	330e      	adds	r3, #14
 80137b0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fc fc95 	bl	80100e2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80137b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137ba:	3316      	adds	r3, #22
 80137bc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80137be:	4618      	mov	r0, r3
 80137c0:	f7fc fc8f 	bl	80100e2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80137c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137c6:	330b      	adds	r3, #11
 80137c8:	2220      	movs	r2, #32
 80137ca:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80137d0:	4611      	mov	r1, r2
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7fd ffc8 	bl	8011768 <ld_clust>
 80137d8:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80137de:	2200      	movs	r2, #0
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7fd ffe0 	bl	80117a6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80137e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137e8:	331c      	adds	r3, #28
 80137ea:	2100      	movs	r1, #0
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7fc fc78 	bl	80100e2 <st_dword>
					fs->wflag = 1;
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	2201      	movs	r2, #1
 80137f6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80137f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d037      	beq.n	801386e <f_open+0x2ea>
						dw = fs->winsect;
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013802:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 8013804:	f107 0318 	add.w	r3, r7, #24
 8013808:	2200      	movs	r2, #0
 801380a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801380c:	4618      	mov	r0, r3
 801380e:	f7fd fbd9 	bl	8010fc4 <remove_chain>
 8013812:	4603      	mov	r3, r0
 8013814:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 8013818:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801381c:	2b00      	cmp	r3, #0
 801381e:	d126      	bne.n	801386e <f_open+0x2ea>
							res = move_window(fs, dw);
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013824:	4618      	mov	r0, r3
 8013826:	f7fc ff3d 	bl	80106a4 <move_window>
 801382a:	4603      	mov	r3, r0
 801382c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013834:	3a01      	subs	r2, #1
 8013836:	619a      	str	r2, [r3, #24]
 8013838:	e019      	b.n	801386e <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801383a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801383e:	2b00      	cmp	r3, #0
 8013840:	d115      	bne.n	801386e <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013842:	7fbb      	ldrb	r3, [r7, #30]
 8013844:	f003 0310 	and.w	r3, r3, #16
 8013848:	2b00      	cmp	r3, #0
 801384a:	d003      	beq.n	8013854 <f_open+0x2d0>
					res = FR_NO_FILE;
 801384c:	2304      	movs	r3, #4
 801384e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8013852:	e00c      	b.n	801386e <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013854:	79fb      	ldrb	r3, [r7, #7]
 8013856:	f003 0302 	and.w	r3, r3, #2
 801385a:	2b00      	cmp	r3, #0
 801385c:	d007      	beq.n	801386e <f_open+0x2ea>
 801385e:	7fbb      	ldrb	r3, [r7, #30]
 8013860:	f003 0301 	and.w	r3, r3, #1
 8013864:	2b00      	cmp	r3, #0
 8013866:	d002      	beq.n	801386e <f_open+0x2ea>
						res = FR_DENIED;
 8013868:	2307      	movs	r3, #7
 801386a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 801386e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013872:	2b00      	cmp	r3, #0
 8013874:	d128      	bne.n	80138c8 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013876:	79fb      	ldrb	r3, [r7, #7]
 8013878:	f003 0308 	and.w	r3, r3, #8
 801387c:	2b00      	cmp	r3, #0
 801387e:	d003      	beq.n	8013888 <f_open+0x304>
				mode |= FA_MODIFIED;
 8013880:	79fb      	ldrb	r3, [r7, #7]
 8013882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013886:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8013890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013896:	79fb      	ldrb	r3, [r7, #7]
 8013898:	f023 0301 	bic.w	r3, r3, #1
 801389c:	2b00      	cmp	r3, #0
 801389e:	bf14      	ite	ne
 80138a0:	2301      	movne	r3, #1
 80138a2:	2300      	moveq	r3, #0
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	461a      	mov	r2, r3
 80138a8:	f107 0318 	add.w	r3, r7, #24
 80138ac:	4611      	mov	r1, r2
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7fc fdc6 	bl	8010440 <inc_lock>
 80138b4:	4602      	mov	r2, r0
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d102      	bne.n	80138c8 <f_open+0x344>
 80138c2:	2302      	movs	r3, #2
 80138c4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 80138c8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	f040 8106 	bne.w	8013ade <f_open+0x55a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	2b04      	cmp	r3, #4
 80138d8:	d12b      	bne.n	8013932 <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80138da:	6a3a      	ldr	r2, [r7, #32]
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80138e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80138e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80138e8:	7ffa      	ldrb	r2, [r7, #31]
 80138ea:	431a      	orrs	r2, r3
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80138f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	695b      	ldr	r3, [r3, #20]
 80138fa:	3334      	adds	r3, #52	; 0x34
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7fc faf5 	bl	800feec <ld_dword>
 8013902:	4602      	mov	r2, r0
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	695b      	ldr	r3, [r3, #20]
 801390c:	3338      	adds	r3, #56	; 0x38
 801390e:	4618      	mov	r0, r3
 8013910:	f7fc fb0f 	bl	800ff32 <ld_qword>
 8013914:	4603      	mov	r3, r0
 8013916:	460c      	mov	r4, r1
 8013918:	68fa      	ldr	r2, [r7, #12]
 801391a:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	695b      	ldr	r3, [r3, #20]
 8013922:	3321      	adds	r3, #33	; 0x21
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	f003 0302 	and.w	r3, r3, #2
 801392a:	b2da      	uxtb	r2, r3
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	71da      	strb	r2, [r3, #7]
 8013930:	e013      	b.n	801395a <f_open+0x3d6>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013936:	4611      	mov	r1, r2
 8013938:	4618      	mov	r0, r3
 801393a:	f7fd ff15 	bl	8011768 <ld_clust>
 801393e:	4602      	mov	r2, r0
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013946:	331c      	adds	r3, #28
 8013948:	4618      	mov	r0, r3
 801394a:	f7fc facf 	bl	800feec <ld_dword>
 801394e:	4603      	mov	r3, r0
 8013950:	f04f 0400 	mov.w	r4, #0
 8013954:	68fa      	ldr	r2, [r7, #12]
 8013956:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	2200      	movs	r2, #0
 801395e:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013960:	697a      	ldr	r2, [r7, #20]
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	88da      	ldrh	r2, [r3, #6]
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	79fa      	ldrb	r2, [r7, #7]
 8013972:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2200      	movs	r2, #0
 801397a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2200      	movs	r2, #0
 8013982:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013984:	68fa      	ldr	r2, [r7, #12]
 8013986:	f04f 0300 	mov.w	r3, #0
 801398a:	f04f 0400 	mov.w	r4, #0
 801398e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	3354      	adds	r3, #84	; 0x54
 8013996:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801399a:	2100      	movs	r1, #0
 801399c:	4618      	mov	r0, r3
 801399e:	f7fc fc74 	bl	801028a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80139a2:	79fb      	ldrb	r3, [r7, #7]
 80139a4:	f003 0320 	and.w	r3, r3, #32
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	f000 8098 	beq.w	8013ade <f_open+0x55a>
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80139b4:	4323      	orrs	r3, r4
 80139b6:	f000 8092 	beq.w	8013ade <f_open+0x55a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80139c0:	68fa      	ldr	r2, [r7, #12]
 80139c2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	895b      	ldrh	r3, [r3, #10]
 80139ca:	461a      	mov	r2, r3
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	899b      	ldrh	r3, [r3, #12]
 80139d0:	fb03 f302 	mul.w	r3, r3, r2
 80139d4:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	689b      	ldr	r3, [r3, #8]
 80139da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80139e4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 80139e8:	e024      	b.n	8013a34 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7fc ff15 	bl	8010820 <get_fat>
 80139f6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 80139fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d802      	bhi.n	8013a08 <f_open+0x484>
 8013a02:	2302      	movs	r3, #2
 8013a04:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a10:	d102      	bne.n	8013a18 <f_open+0x494>
 8013a12:	2301      	movs	r3, #1
 8013a14:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a1a:	469b      	mov	fp, r3
 8013a1c:	f04f 0c00 	mov.w	ip, #0
 8013a20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8013a24:	460b      	mov	r3, r1
 8013a26:	4614      	mov	r4, r2
 8013a28:	ebb3 030b 	subs.w	r3, r3, fp
 8013a2c:	eb64 040c 	sbc.w	r4, r4, ip
 8013a30:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8013a34:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d109      	bne.n	8013a50 <f_open+0x4cc>
 8013a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a3e:	4619      	mov	r1, r3
 8013a40:	f04f 0200 	mov.w	r2, #0
 8013a44:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8013a48:	42a2      	cmp	r2, r4
 8013a4a:	bf08      	it	eq
 8013a4c:	4299      	cmpeq	r1, r3
 8013a4e:	d3cc      	bcc.n	80139ea <f_open+0x466>
				}
				fp->clust = clst;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013a56:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013a58:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d13e      	bne.n	8013ade <f_open+0x55a>
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	899b      	ldrh	r3, [r3, #12]
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	f04f 0400 	mov.w	r4, #0
 8013a6a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013a6e:	461a      	mov	r2, r3
 8013a70:	4623      	mov	r3, r4
 8013a72:	f7ec fc31 	bl	80002d8 <__aeabi_uldivmod>
 8013a76:	461c      	mov	r4, r3
 8013a78:	4613      	mov	r3, r2
 8013a7a:	4323      	orrs	r3, r4
 8013a7c:	d02f      	beq.n	8013ade <f_open+0x55a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7fc feab 	bl	80107e0 <clust2sect>
 8013a8a:	66b8      	str	r0, [r7, #104]	; 0x68
 8013a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d103      	bne.n	8013a9a <f_open+0x516>
						res = FR_INT_ERR;
 8013a92:	2302      	movs	r3, #2
 8013a94:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8013a98:	e021      	b.n	8013ade <f_open+0x55a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	899b      	ldrh	r3, [r3, #12]
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	f04f 0400 	mov.w	r4, #0
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	4623      	mov	r3, r4
 8013aa8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013aac:	f7ec fc14 	bl	80002d8 <__aeabi_uldivmod>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	460c      	mov	r4, r1
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ab8:	441a      	add	r2, r3
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	7858      	ldrb	r0, [r3, #1]
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013acc:	2301      	movs	r3, #1
 8013ace:	f7fc f997 	bl	800fe00 <disk_read>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d002      	beq.n	8013ade <f_open+0x55a>
 8013ad8:	2301      	movs	r3, #1
 8013ada:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013ade:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d002      	beq.n	8013aec <f_open+0x568>
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013aec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3788      	adds	r7, #136	; 0x88
 8013af4:	46bd      	mov	sp, r7
 8013af6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08013afa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013afc:	b08d      	sub	sp, #52	; 0x34
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	60f8      	str	r0, [r7, #12]
 8013b02:	60b9      	str	r1, [r7, #8]
 8013b04:	607a      	str	r2, [r7, #4]
 8013b06:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	f107 0210 	add.w	r2, r7, #16
 8013b18:	4611      	mov	r1, r2
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7ff fcb6 	bl	801348c <validate>
 8013b20:	4603      	mov	r3, r0
 8013b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d108      	bne.n	8013b40 <f_write+0x46>
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d002      	beq.n	8013b46 <f_write+0x4c>
 8013b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b44:	e1ab      	b.n	8013e9e <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b4c:	f003 0302 	and.w	r3, r3, #2
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d101      	bne.n	8013b58 <f_write+0x5e>
 8013b54:	2307      	movs	r3, #7
 8013b56:	e1a2      	b.n	8013e9e <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	781b      	ldrb	r3, [r3, #0]
 8013b5c:	2b04      	cmp	r3, #4
 8013b5e:	f000 818e 	beq.w	8013e7e <f_write+0x384>
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013b68:	461a      	mov	r2, r3
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	441a      	add	r2, r3
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013b74:	429a      	cmp	r2, r3
 8013b76:	f080 8182 	bcs.w	8013e7e <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013b80:	43db      	mvns	r3, r3
 8013b82:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013b84:	e17b      	b.n	8013e7e <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	899b      	ldrh	r3, [r3, #12]
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	f04f 0400 	mov.w	r4, #0
 8013b96:	461a      	mov	r2, r3
 8013b98:	4623      	mov	r3, r4
 8013b9a:	f7ec fb9d 	bl	80002d8 <__aeabi_uldivmod>
 8013b9e:	461c      	mov	r4, r3
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	4323      	orrs	r3, r4
 8013ba4:	f040 810c 	bne.w	8013dc0 <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	899b      	ldrh	r3, [r3, #12]
 8013bb2:	b29b      	uxth	r3, r3
 8013bb4:	f04f 0400 	mov.w	r4, #0
 8013bb8:	461a      	mov	r2, r3
 8013bba:	4623      	mov	r3, r4
 8013bbc:	f7ec fb8c 	bl	80002d8 <__aeabi_uldivmod>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	460c      	mov	r4, r1
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	895b      	ldrh	r3, [r3, #10]
 8013bca:	3b01      	subs	r3, #1
 8013bcc:	4013      	ands	r3, r2
 8013bce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013bd0:	69bb      	ldr	r3, [r7, #24]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d148      	bne.n	8013c68 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013bdc:	4323      	orrs	r3, r4
 8013bde:	d10c      	bne.n	8013bfa <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	689b      	ldr	r3, [r3, #8]
 8013be4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d11c      	bne.n	8013c26 <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2100      	movs	r1, #0
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7fd fa9b 	bl	801112c <create_chain>
 8013bf6:	62b8      	str	r0, [r7, #40]	; 0x28
 8013bf8:	e015      	b.n	8013c26 <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d009      	beq.n	8013c16 <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013c08:	461a      	mov	r2, r3
 8013c0a:	4623      	mov	r3, r4
 8013c0c:	68f8      	ldr	r0, [r7, #12]
 8013c0e:	f7fd fb8e 	bl	801132e <clmt_clust>
 8013c12:	62b8      	str	r0, [r7, #40]	; 0x28
 8013c14:	e007      	b.n	8013c26 <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013c16:	68fa      	ldr	r2, [r7, #12]
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	4610      	mov	r0, r2
 8013c20:	f7fd fa84 	bl	801112c <create_chain>
 8013c24:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	f000 812d 	beq.w	8013e88 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d105      	bne.n	8013c40 <f_write+0x146>
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2202      	movs	r2, #2
 8013c38:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013c3c:	2302      	movs	r3, #2
 8013c3e:	e12e      	b.n	8013e9e <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c46:	d105      	bne.n	8013c54 <f_write+0x15a>
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2201      	movs	r2, #1
 8013c4c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013c50:	2301      	movs	r3, #1
 8013c52:	e124      	b.n	8013e9e <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c58:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	689b      	ldr	r3, [r3, #8]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d102      	bne.n	8013c68 <f_write+0x16e>
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c66:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c6e:	b25b      	sxtb	r3, r3
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	da1b      	bge.n	8013cac <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	7858      	ldrb	r0, [r3, #1]
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c82:	2301      	movs	r3, #1
 8013c84:	f7fc f8dc 	bl	800fe40 <disk_write>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d005      	beq.n	8013c9a <f_write+0x1a0>
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2201      	movs	r2, #1
 8013c92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013c96:	2301      	movs	r3, #1
 8013c98:	e101      	b.n	8013e9e <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ca4:	b2da      	uxtb	r2, r3
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013cac:	693a      	ldr	r2, [r7, #16]
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	f7fc fd93 	bl	80107e0 <clust2sect>
 8013cba:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d105      	bne.n	8013cce <f_write+0x1d4>
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	2202      	movs	r2, #2
 8013cc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013cca:	2302      	movs	r3, #2
 8013ccc:	e0e7      	b.n	8013e9e <f_write+0x3a4>
			sect += csect;
 8013cce:	697a      	ldr	r2, [r7, #20]
 8013cd0:	69bb      	ldr	r3, [r7, #24]
 8013cd2:	4413      	add	r3, r2
 8013cd4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013cd6:	693b      	ldr	r3, [r7, #16]
 8013cd8:	899b      	ldrh	r3, [r3, #12]
 8013cda:	461a      	mov	r2, r3
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ce2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013ce4:	6a3b      	ldr	r3, [r7, #32]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d046      	beq.n	8013d78 <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013cea:	69ba      	ldr	r2, [r7, #24]
 8013cec:	6a3b      	ldr	r3, [r7, #32]
 8013cee:	4413      	add	r3, r2
 8013cf0:	693a      	ldr	r2, [r7, #16]
 8013cf2:	8952      	ldrh	r2, [r2, #10]
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d905      	bls.n	8013d04 <f_write+0x20a>
					cc = fs->csize - csect;
 8013cf8:	693b      	ldr	r3, [r7, #16]
 8013cfa:	895b      	ldrh	r3, [r3, #10]
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	1ad3      	subs	r3, r2, r3
 8013d02:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013d04:	693b      	ldr	r3, [r7, #16]
 8013d06:	7858      	ldrb	r0, [r3, #1]
 8013d08:	6a3b      	ldr	r3, [r7, #32]
 8013d0a:	697a      	ldr	r2, [r7, #20]
 8013d0c:	69f9      	ldr	r1, [r7, #28]
 8013d0e:	f7fc f897 	bl	800fe40 <disk_write>
 8013d12:	4603      	mov	r3, r0
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d005      	beq.n	8013d24 <f_write+0x22a>
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013d20:	2301      	movs	r3, #1
 8013d22:	e0bc      	b.n	8013e9e <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	1ad3      	subs	r3, r2, r3
 8013d2c:	6a3a      	ldr	r2, [r7, #32]
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d91a      	bls.n	8013d68 <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	1ad3      	subs	r3, r2, r3
 8013d40:	693a      	ldr	r2, [r7, #16]
 8013d42:	8992      	ldrh	r2, [r2, #12]
 8013d44:	fb02 f303 	mul.w	r3, r2, r3
 8013d48:	69fa      	ldr	r2, [r7, #28]
 8013d4a:	18d1      	adds	r1, r2, r3
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	899b      	ldrh	r3, [r3, #12]
 8013d50:	461a      	mov	r2, r3
 8013d52:	f7fc fa79 	bl	8010248 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d60:	b2da      	uxtb	r2, r3
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	899b      	ldrh	r3, [r3, #12]
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	6a3b      	ldr	r3, [r7, #32]
 8013d70:	fb02 f303 	mul.w	r3, r2, r3
 8013d74:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013d76:	e058      	b.n	8013e2a <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d7c:	697a      	ldr	r2, [r7, #20]
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d01b      	beq.n	8013dba <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013d8e:	42a2      	cmp	r2, r4
 8013d90:	bf08      	it	eq
 8013d92:	4299      	cmpeq	r1, r3
 8013d94:	d211      	bcs.n	8013dba <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	7858      	ldrb	r0, [r3, #1]
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013da0:	2301      	movs	r3, #1
 8013da2:	697a      	ldr	r2, [r7, #20]
 8013da4:	f7fc f82c 	bl	800fe00 <disk_read>
 8013da8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d005      	beq.n	8013dba <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2201      	movs	r2, #1
 8013db2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013db6:	2301      	movs	r3, #1
 8013db8:	e071      	b.n	8013e9e <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	697a      	ldr	r2, [r7, #20]
 8013dbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	899b      	ldrh	r3, [r3, #12]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013dcc:	693a      	ldr	r2, [r7, #16]
 8013dce:	8992      	ldrh	r2, [r2, #12]
 8013dd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dd4:	fb02 f201 	mul.w	r2, r2, r1
 8013dd8:	1a9b      	subs	r3, r3, r2
 8013dda:	1ac3      	subs	r3, r0, r3
 8013ddc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d901      	bls.n	8013dea <f_write+0x2f0>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	899b      	ldrh	r3, [r3, #12]
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	f04f 0400 	mov.w	r4, #0
 8013e00:	461a      	mov	r2, r3
 8013e02:	4623      	mov	r3, r4
 8013e04:	f7ec fa68 	bl	80002d8 <__aeabi_uldivmod>
 8013e08:	461c      	mov	r4, r3
 8013e0a:	4613      	mov	r3, r2
 8013e0c:	442b      	add	r3, r5
 8013e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e10:	69f9      	ldr	r1, [r7, #28]
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7fc fa18 	bl	8010248 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013e22:	b2da      	uxtb	r2, r3
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013e2a:	69fa      	ldr	r2, [r7, #28]
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2e:	4413      	add	r3, r2
 8013e30:	61fb      	str	r3, [r7, #28]
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	461d      	mov	r5, r3
 8013e3c:	f04f 0600 	mov.w	r6, #0
 8013e40:	186b      	adds	r3, r5, r1
 8013e42:	eb46 0402 	adc.w	r4, r6, r2
 8013e46:	68fa      	ldr	r2, [r7, #12]
 8013e48:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8013e58:	4294      	cmp	r4, r2
 8013e5a:	bf08      	it	eq
 8013e5c:	428b      	cmpeq	r3, r1
 8013e5e:	d201      	bcs.n	8013e64 <f_write+0x36a>
 8013e60:	460b      	mov	r3, r1
 8013e62:	4614      	mov	r4, r2
 8013e64:	68fa      	ldr	r2, [r7, #12]
 8013e66:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	681a      	ldr	r2, [r3, #0]
 8013e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e70:	441a      	add	r2, r3
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	601a      	str	r2, [r3, #0]
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7a:	1ad3      	subs	r3, r2, r3
 8013e7c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	f47f ae80 	bne.w	8013b86 <f_write+0x8c>
 8013e86:	e000      	b.n	8013e8a <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013e88:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e94:	b2da      	uxtb	r2, r3
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8013e9c:	2300      	movs	r3, #0
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3734      	adds	r7, #52	; 0x34
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ea6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013ea6:	b590      	push	{r4, r7, lr}
 8013ea8:	b09b      	sub	sp, #108	; 0x6c
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013eb4:	4611      	mov	r1, r2
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7ff fae8 	bl	801348c <validate>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8013ec2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	f040 8109 	bne.w	80140de <f_sync+0x238>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	f000 8101 	beq.w	80140de <f_sync+0x238>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ee2:	b25b      	sxtb	r3, r3
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	da17      	bge.n	8013f18 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013eea:	7858      	ldrb	r0, [r3, #1]
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	f7fb ffa2 	bl	800fe40 <disk_write>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d001      	beq.n	8013f06 <f_sync+0x60>
 8013f02:	2301      	movs	r3, #1
 8013f04:	e0ed      	b.n	80140e2 <f_sync+0x23c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f10:	b2da      	uxtb	r2, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013f18:	f7fb fdac 	bl	800fa74 <get_fattime>
 8013f1c:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8013f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	2b04      	cmp	r3, #4
 8013f24:	f040 8090 	bne.w	8014048 <f_sync+0x1a2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7fc ffea 	bl	8010f04 <fill_first_frag>
 8013f30:	4603      	mov	r3, r0
 8013f32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8013f36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d10a      	bne.n	8013f54 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f44:	f04f 32ff 	mov.w	r2, #4294967295
 8013f48:	4619      	mov	r1, r3
 8013f4a:	f7fd f80a 	bl	8010f62 <fill_last_frag>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8013f54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	f040 80c0 	bne.w	80140de <f_sync+0x238>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	f107 0308 	add.w	r3, r7, #8
 8013f64:	4611      	mov	r1, r2
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7fd ff50 	bl	8011e0c <load_obj_dir>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8013f72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	f040 80b1 	bne.w	80140de <f_sync+0x238>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8013f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f7e:	695b      	ldr	r3, [r3, #20]
 8013f80:	3304      	adds	r3, #4
 8013f82:	781a      	ldrb	r2, [r3, #0]
 8013f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f86:	695b      	ldr	r3, [r3, #20]
 8013f88:	3304      	adds	r3, #4
 8013f8a:	f042 0220 	orr.w	r2, r2, #32
 8013f8e:	b2d2      	uxtb	r2, r2
 8013f90:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	79da      	ldrb	r2, [r3, #7]
 8013f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f98:	695b      	ldr	r3, [r3, #20]
 8013f9a:	3321      	adds	r3, #33	; 0x21
 8013f9c:	f042 0201 	orr.w	r2, r2, #1
 8013fa0:	b2d2      	uxtb	r2, r2
 8013fa2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8013fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fa6:	695b      	ldr	r3, [r3, #20]
 8013fa8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	689b      	ldr	r3, [r3, #8]
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	4610      	mov	r0, r2
 8013fb4:	f7fc f895 	bl	80100e2 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8013fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fba:	695b      	ldr	r3, [r3, #20]
 8013fbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	4623      	mov	r3, r4
 8013fca:	4608      	mov	r0, r1
 8013fcc:	f7fc f8b5 	bl	801013a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8013fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fd2:	695b      	ldr	r3, [r3, #20]
 8013fd4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013fde:	461a      	mov	r2, r3
 8013fe0:	4623      	mov	r3, r4
 8013fe2:	4608      	mov	r0, r1
 8013fe4:	f7fc f8a9 	bl	801013a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8013fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fea:	695b      	ldr	r3, [r3, #20]
 8013fec:	330c      	adds	r3, #12
 8013fee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f7fc f876 	bl	80100e2 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8013ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ff8:	695b      	ldr	r3, [r3, #20]
 8013ffa:	3315      	adds	r3, #21
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8014000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014002:	695b      	ldr	r3, [r3, #20]
 8014004:	3310      	adds	r3, #16
 8014006:	2100      	movs	r1, #0
 8014008:	4618      	mov	r0, r3
 801400a:	f7fc f86a 	bl	80100e2 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 801400e:	f107 0308 	add.w	r3, r7, #8
 8014012:	4618      	mov	r0, r3
 8014014:	f7fd ff37 	bl	8011e86 <store_xdir>
 8014018:	4603      	mov	r3, r0
 801401a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801401e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014022:	2b00      	cmp	r3, #0
 8014024:	d15b      	bne.n	80140de <f_sync+0x238>
							res = sync_fs(fs);
 8014026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014028:	4618      	mov	r0, r3
 801402a:	f7fc fb69 	bl	8010700 <sync_fs>
 801402e:	4603      	mov	r3, r0
 8014030:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801403a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801403e:	b2da      	uxtb	r2, r3
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8014046:	e04a      	b.n	80140de <f_sync+0x238>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801404e:	4619      	mov	r1, r3
 8014050:	4610      	mov	r0, r2
 8014052:	f7fc fb27 	bl	80106a4 <move_window>
 8014056:	4603      	mov	r3, r0
 8014058:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 801405c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014060:	2b00      	cmp	r3, #0
 8014062:	d13c      	bne.n	80140de <f_sync+0x238>
					dir = fp->dir_ptr;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014068:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801406a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801406c:	330b      	adds	r3, #11
 801406e:	781a      	ldrb	r2, [r3, #0]
 8014070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014072:	330b      	adds	r3, #11
 8014074:	f042 0220 	orr.w	r2, r2, #32
 8014078:	b2d2      	uxtb	r2, r2
 801407a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6818      	ldr	r0, [r3, #0]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	689b      	ldr	r3, [r3, #8]
 8014084:	461a      	mov	r2, r3
 8014086:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8014088:	f7fd fb8d 	bl	80117a6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801408c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801408e:	f103 021c 	add.w	r2, r3, #28
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014098:	4619      	mov	r1, r3
 801409a:	4610      	mov	r0, r2
 801409c:	f7fc f821 	bl	80100e2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80140a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140a2:	3316      	adds	r3, #22
 80140a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7fc f81b 	bl	80100e2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80140ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140ae:	3312      	adds	r3, #18
 80140b0:	2100      	movs	r1, #0
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7fb fffa 	bl	80100ac <st_word>
					fs->wflag = 1;
 80140b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80140ba:	2201      	movs	r2, #1
 80140bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80140be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7fc fb1d 	bl	8010700 <sync_fs>
 80140c6:	4603      	mov	r3, r0
 80140c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80140d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80140d6:	b2da      	uxtb	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80140de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	376c      	adds	r7, #108	; 0x6c
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd90      	pop	{r4, r7, pc}

080140ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80140ea:	b580      	push	{r7, lr}
 80140ec:	b084      	sub	sp, #16
 80140ee:	af00      	add	r7, sp, #0
 80140f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f7ff fed7 	bl	8013ea6 <f_sync>
 80140f8:	4603      	mov	r3, r0
 80140fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80140fc:	7bfb      	ldrb	r3, [r7, #15]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d118      	bne.n	8014134 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f107 0208 	add.w	r2, r7, #8
 8014108:	4611      	mov	r1, r2
 801410a:	4618      	mov	r0, r3
 801410c:	f7ff f9be 	bl	801348c <validate>
 8014110:	4603      	mov	r3, r0
 8014112:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014114:	7bfb      	ldrb	r3, [r7, #15]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d10c      	bne.n	8014134 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801411e:	4618      	mov	r0, r3
 8014120:	f7fc fa1c 	bl	801055c <dec_lock>
 8014124:	4603      	mov	r3, r0
 8014126:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014128:	7bfb      	ldrb	r3, [r7, #15]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d102      	bne.n	8014134 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2200      	movs	r2, #0
 8014132:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014134:	7bfb      	ldrb	r3, [r7, #15]
}
 8014136:	4618      	mov	r0, r3
 8014138:	3710      	adds	r7, #16
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}
	...

08014140 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014140:	b480      	push	{r7}
 8014142:	b087      	sub	sp, #28
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	4613      	mov	r3, r2
 801414c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801414e:	2301      	movs	r3, #1
 8014150:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014152:	2300      	movs	r3, #0
 8014154:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014156:	4b1f      	ldr	r3, [pc, #124]	; (80141d4 <FATFS_LinkDriverEx+0x94>)
 8014158:	7a5b      	ldrb	r3, [r3, #9]
 801415a:	b2db      	uxtb	r3, r3
 801415c:	2b00      	cmp	r3, #0
 801415e:	d131      	bne.n	80141c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014160:	4b1c      	ldr	r3, [pc, #112]	; (80141d4 <FATFS_LinkDriverEx+0x94>)
 8014162:	7a5b      	ldrb	r3, [r3, #9]
 8014164:	b2db      	uxtb	r3, r3
 8014166:	461a      	mov	r2, r3
 8014168:	4b1a      	ldr	r3, [pc, #104]	; (80141d4 <FATFS_LinkDriverEx+0x94>)
 801416a:	2100      	movs	r1, #0
 801416c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801416e:	4b19      	ldr	r3, [pc, #100]	; (80141d4 <FATFS_LinkDriverEx+0x94>)
 8014170:	7a5b      	ldrb	r3, [r3, #9]
 8014172:	b2db      	uxtb	r3, r3
 8014174:	4a17      	ldr	r2, [pc, #92]	; (80141d4 <FATFS_LinkDriverEx+0x94>)
 8014176:	009b      	lsls	r3, r3, #2
 8014178:	4413      	add	r3, r2
 801417a:	68fa      	ldr	r2, [r7, #12]
 801417c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801417e:	4b15      	ldr	r3, [pc, #84]	; (80141d4 <FATFS_LinkDriverEx+0x94>)
 8014180:	7a5b      	ldrb	r3, [r3, #9]
 8014182:	b2db      	uxtb	r3, r3
 8014184:	461a      	mov	r2, r3
 8014186:	4b13      	ldr	r3, [pc, #76]	; (80141d4 <FATFS_LinkDriverEx+0x94>)
 8014188:	4413      	add	r3, r2
 801418a:	79fa      	ldrb	r2, [r7, #7]
 801418c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801418e:	4b11      	ldr	r3, [pc, #68]	; (80141d4 <FATFS_LinkDriverEx+0x94>)
 8014190:	7a5b      	ldrb	r3, [r3, #9]
 8014192:	b2db      	uxtb	r3, r3
 8014194:	1c5a      	adds	r2, r3, #1
 8014196:	b2d1      	uxtb	r1, r2
 8014198:	4a0e      	ldr	r2, [pc, #56]	; (80141d4 <FATFS_LinkDriverEx+0x94>)
 801419a:	7251      	strb	r1, [r2, #9]
 801419c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801419e:	7dbb      	ldrb	r3, [r7, #22]
 80141a0:	3330      	adds	r3, #48	; 0x30
 80141a2:	b2da      	uxtb	r2, r3
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	3301      	adds	r3, #1
 80141ac:	223a      	movs	r2, #58	; 0x3a
 80141ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	3302      	adds	r3, #2
 80141b4:	222f      	movs	r2, #47	; 0x2f
 80141b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	3303      	adds	r3, #3
 80141bc:	2200      	movs	r2, #0
 80141be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80141c0:	2300      	movs	r3, #0
 80141c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80141c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	371c      	adds	r7, #28
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr
 80141d2:	bf00      	nop
 80141d4:	24000574 	.word	0x24000574

080141d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80141e2:	2200      	movs	r2, #0
 80141e4:	6839      	ldr	r1, [r7, #0]
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f7ff ffaa 	bl	8014140 <FATFS_LinkDriverEx>
 80141ec:	4603      	mov	r3, r0
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3708      	adds	r7, #8
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
	...

080141f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80141f8:	b480      	push	{r7}
 80141fa:	b085      	sub	sp, #20
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	4603      	mov	r3, r0
 8014200:	6039      	str	r1, [r7, #0]
 8014202:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014204:	88fb      	ldrh	r3, [r7, #6]
 8014206:	2b7f      	cmp	r3, #127	; 0x7f
 8014208:	d802      	bhi.n	8014210 <ff_convert+0x18>
		c = chr;
 801420a:	88fb      	ldrh	r3, [r7, #6]
 801420c:	81fb      	strh	r3, [r7, #14]
 801420e:	e025      	b.n	801425c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d00b      	beq.n	801422e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014216:	88fb      	ldrh	r3, [r7, #6]
 8014218:	2bff      	cmp	r3, #255	; 0xff
 801421a:	d805      	bhi.n	8014228 <ff_convert+0x30>
 801421c:	88fb      	ldrh	r3, [r7, #6]
 801421e:	3b80      	subs	r3, #128	; 0x80
 8014220:	4a12      	ldr	r2, [pc, #72]	; (801426c <ff_convert+0x74>)
 8014222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014226:	e000      	b.n	801422a <ff_convert+0x32>
 8014228:	2300      	movs	r3, #0
 801422a:	81fb      	strh	r3, [r7, #14]
 801422c:	e016      	b.n	801425c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801422e:	2300      	movs	r3, #0
 8014230:	81fb      	strh	r3, [r7, #14]
 8014232:	e009      	b.n	8014248 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014234:	89fb      	ldrh	r3, [r7, #14]
 8014236:	4a0d      	ldr	r2, [pc, #52]	; (801426c <ff_convert+0x74>)
 8014238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801423c:	88fa      	ldrh	r2, [r7, #6]
 801423e:	429a      	cmp	r2, r3
 8014240:	d006      	beq.n	8014250 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014242:	89fb      	ldrh	r3, [r7, #14]
 8014244:	3301      	adds	r3, #1
 8014246:	81fb      	strh	r3, [r7, #14]
 8014248:	89fb      	ldrh	r3, [r7, #14]
 801424a:	2b7f      	cmp	r3, #127	; 0x7f
 801424c:	d9f2      	bls.n	8014234 <ff_convert+0x3c>
 801424e:	e000      	b.n	8014252 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014250:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8014252:	89fb      	ldrh	r3, [r7, #14]
 8014254:	3380      	adds	r3, #128	; 0x80
 8014256:	b29b      	uxth	r3, r3
 8014258:	b2db      	uxtb	r3, r3
 801425a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801425c:	89fb      	ldrh	r3, [r7, #14]
}
 801425e:	4618      	mov	r0, r3
 8014260:	3714      	adds	r7, #20
 8014262:	46bd      	mov	sp, r7
 8014264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014268:	4770      	bx	lr
 801426a:	bf00      	nop
 801426c:	08014598 	.word	0x08014598

08014270 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014270:	b480      	push	{r7}
 8014272:	b087      	sub	sp, #28
 8014274:	af00      	add	r7, sp, #0
 8014276:	4603      	mov	r3, r0
 8014278:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801427a:	88fb      	ldrh	r3, [r7, #6]
 801427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014280:	d201      	bcs.n	8014286 <ff_wtoupper+0x16>
 8014282:	4b3e      	ldr	r3, [pc, #248]	; (801437c <ff_wtoupper+0x10c>)
 8014284:	e000      	b.n	8014288 <ff_wtoupper+0x18>
 8014286:	4b3e      	ldr	r3, [pc, #248]	; (8014380 <ff_wtoupper+0x110>)
 8014288:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	1c9a      	adds	r2, r3, #2
 801428e:	617a      	str	r2, [r7, #20]
 8014290:	881b      	ldrh	r3, [r3, #0]
 8014292:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014294:	8a7b      	ldrh	r3, [r7, #18]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d068      	beq.n	801436c <ff_wtoupper+0xfc>
 801429a:	88fa      	ldrh	r2, [r7, #6]
 801429c:	8a7b      	ldrh	r3, [r7, #18]
 801429e:	429a      	cmp	r2, r3
 80142a0:	d364      	bcc.n	801436c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	1c9a      	adds	r2, r3, #2
 80142a6:	617a      	str	r2, [r7, #20]
 80142a8:	881b      	ldrh	r3, [r3, #0]
 80142aa:	823b      	strh	r3, [r7, #16]
 80142ac:	8a3b      	ldrh	r3, [r7, #16]
 80142ae:	0a1b      	lsrs	r3, r3, #8
 80142b0:	81fb      	strh	r3, [r7, #14]
 80142b2:	8a3b      	ldrh	r3, [r7, #16]
 80142b4:	b2db      	uxtb	r3, r3
 80142b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80142b8:	88fa      	ldrh	r2, [r7, #6]
 80142ba:	8a79      	ldrh	r1, [r7, #18]
 80142bc:	8a3b      	ldrh	r3, [r7, #16]
 80142be:	440b      	add	r3, r1
 80142c0:	429a      	cmp	r2, r3
 80142c2:	da49      	bge.n	8014358 <ff_wtoupper+0xe8>
			switch (cmd) {
 80142c4:	89fb      	ldrh	r3, [r7, #14]
 80142c6:	2b08      	cmp	r3, #8
 80142c8:	d84f      	bhi.n	801436a <ff_wtoupper+0xfa>
 80142ca:	a201      	add	r2, pc, #4	; (adr r2, 80142d0 <ff_wtoupper+0x60>)
 80142cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142d0:	080142f5 	.word	0x080142f5
 80142d4:	08014307 	.word	0x08014307
 80142d8:	0801431d 	.word	0x0801431d
 80142dc:	08014325 	.word	0x08014325
 80142e0:	0801432d 	.word	0x0801432d
 80142e4:	08014335 	.word	0x08014335
 80142e8:	0801433d 	.word	0x0801433d
 80142ec:	08014345 	.word	0x08014345
 80142f0:	0801434d 	.word	0x0801434d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80142f4:	88fa      	ldrh	r2, [r7, #6]
 80142f6:	8a7b      	ldrh	r3, [r7, #18]
 80142f8:	1ad3      	subs	r3, r2, r3
 80142fa:	005b      	lsls	r3, r3, #1
 80142fc:	697a      	ldr	r2, [r7, #20]
 80142fe:	4413      	add	r3, r2
 8014300:	881b      	ldrh	r3, [r3, #0]
 8014302:	80fb      	strh	r3, [r7, #6]
 8014304:	e027      	b.n	8014356 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014306:	88fa      	ldrh	r2, [r7, #6]
 8014308:	8a7b      	ldrh	r3, [r7, #18]
 801430a:	1ad3      	subs	r3, r2, r3
 801430c:	b29b      	uxth	r3, r3
 801430e:	f003 0301 	and.w	r3, r3, #1
 8014312:	b29b      	uxth	r3, r3
 8014314:	88fa      	ldrh	r2, [r7, #6]
 8014316:	1ad3      	subs	r3, r2, r3
 8014318:	80fb      	strh	r3, [r7, #6]
 801431a:	e01c      	b.n	8014356 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801431c:	88fb      	ldrh	r3, [r7, #6]
 801431e:	3b10      	subs	r3, #16
 8014320:	80fb      	strh	r3, [r7, #6]
 8014322:	e018      	b.n	8014356 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014324:	88fb      	ldrh	r3, [r7, #6]
 8014326:	3b20      	subs	r3, #32
 8014328:	80fb      	strh	r3, [r7, #6]
 801432a:	e014      	b.n	8014356 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801432c:	88fb      	ldrh	r3, [r7, #6]
 801432e:	3b30      	subs	r3, #48	; 0x30
 8014330:	80fb      	strh	r3, [r7, #6]
 8014332:	e010      	b.n	8014356 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014334:	88fb      	ldrh	r3, [r7, #6]
 8014336:	3b1a      	subs	r3, #26
 8014338:	80fb      	strh	r3, [r7, #6]
 801433a:	e00c      	b.n	8014356 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801433c:	88fb      	ldrh	r3, [r7, #6]
 801433e:	3308      	adds	r3, #8
 8014340:	80fb      	strh	r3, [r7, #6]
 8014342:	e008      	b.n	8014356 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014344:	88fb      	ldrh	r3, [r7, #6]
 8014346:	3b50      	subs	r3, #80	; 0x50
 8014348:	80fb      	strh	r3, [r7, #6]
 801434a:	e004      	b.n	8014356 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801434c:	88fb      	ldrh	r3, [r7, #6]
 801434e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8014352:	80fb      	strh	r3, [r7, #6]
 8014354:	bf00      	nop
			}
			break;
 8014356:	e008      	b.n	801436a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014358:	89fb      	ldrh	r3, [r7, #14]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d195      	bne.n	801428a <ff_wtoupper+0x1a>
 801435e:	8a3b      	ldrh	r3, [r7, #16]
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	697a      	ldr	r2, [r7, #20]
 8014364:	4413      	add	r3, r2
 8014366:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014368:	e78f      	b.n	801428a <ff_wtoupper+0x1a>
			break;
 801436a:	bf00      	nop
	}

	return chr;
 801436c:	88fb      	ldrh	r3, [r7, #6]
}
 801436e:	4618      	mov	r0, r3
 8014370:	371c      	adds	r7, #28
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr
 801437a:	bf00      	nop
 801437c:	08014698 	.word	0x08014698
 8014380:	0801488c 	.word	0x0801488c

08014384 <__libc_init_array>:
 8014384:	b570      	push	{r4, r5, r6, lr}
 8014386:	4e0d      	ldr	r6, [pc, #52]	; (80143bc <__libc_init_array+0x38>)
 8014388:	4c0d      	ldr	r4, [pc, #52]	; (80143c0 <__libc_init_array+0x3c>)
 801438a:	1ba4      	subs	r4, r4, r6
 801438c:	10a4      	asrs	r4, r4, #2
 801438e:	2500      	movs	r5, #0
 8014390:	42a5      	cmp	r5, r4
 8014392:	d109      	bne.n	80143a8 <__libc_init_array+0x24>
 8014394:	4e0b      	ldr	r6, [pc, #44]	; (80143c4 <__libc_init_array+0x40>)
 8014396:	4c0c      	ldr	r4, [pc, #48]	; (80143c8 <__libc_init_array+0x44>)
 8014398:	f000 f82c 	bl	80143f4 <_init>
 801439c:	1ba4      	subs	r4, r4, r6
 801439e:	10a4      	asrs	r4, r4, #2
 80143a0:	2500      	movs	r5, #0
 80143a2:	42a5      	cmp	r5, r4
 80143a4:	d105      	bne.n	80143b2 <__libc_init_array+0x2e>
 80143a6:	bd70      	pop	{r4, r5, r6, pc}
 80143a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80143ac:	4798      	blx	r3
 80143ae:	3501      	adds	r5, #1
 80143b0:	e7ee      	b.n	8014390 <__libc_init_array+0xc>
 80143b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80143b6:	4798      	blx	r3
 80143b8:	3501      	adds	r5, #1
 80143ba:	e7f2      	b.n	80143a2 <__libc_init_array+0x1e>
 80143bc:	08014950 	.word	0x08014950
 80143c0:	08014950 	.word	0x08014950
 80143c4:	08014950 	.word	0x08014950
 80143c8:	08014954 	.word	0x08014954

080143cc <memcpy>:
 80143cc:	b510      	push	{r4, lr}
 80143ce:	1e43      	subs	r3, r0, #1
 80143d0:	440a      	add	r2, r1
 80143d2:	4291      	cmp	r1, r2
 80143d4:	d100      	bne.n	80143d8 <memcpy+0xc>
 80143d6:	bd10      	pop	{r4, pc}
 80143d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80143e0:	e7f7      	b.n	80143d2 <memcpy+0x6>

080143e2 <memset>:
 80143e2:	4402      	add	r2, r0
 80143e4:	4603      	mov	r3, r0
 80143e6:	4293      	cmp	r3, r2
 80143e8:	d100      	bne.n	80143ec <memset+0xa>
 80143ea:	4770      	bx	lr
 80143ec:	f803 1b01 	strb.w	r1, [r3], #1
 80143f0:	e7f9      	b.n	80143e6 <memset+0x4>
	...

080143f4 <_init>:
 80143f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143f6:	bf00      	nop
 80143f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143fa:	bc08      	pop	{r3}
 80143fc:	469e      	mov	lr, r3
 80143fe:	4770      	bx	lr

08014400 <_fini>:
 8014400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014402:	bf00      	nop
 8014404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014406:	bc08      	pop	{r3}
 8014408:	469e      	mov	lr, r3
 801440a:	4770      	bx	lr
