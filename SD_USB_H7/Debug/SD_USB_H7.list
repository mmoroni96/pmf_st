
SD_USB_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b008  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0801b2a0  0801b2a0  0002b2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b860  0801b860  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  0801b860  0801b860  0002b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b868  0801b868  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b868  0801b868  0002b868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b86c  0801b86c  0002b86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  24000000  0801b870  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000194  0801ba04  00030194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240001f4  0801ba64  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008054  24000260  0801bac4  00030260  2**5
                  ALLOC
 12 ._user_heap_stack 00006004  240082b4  0801bac4  000382b4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004b37b  00000000  00000000  00030282  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000072eb  00000000  00000000  0007b5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002888  00000000  00000000  000828e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000025d8  00000000  00000000  00085170  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00044b87  00000000  00000000  00087748  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002b11b  00000000  00000000  000cc2cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00197c59  00000000  00000000  000f73ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0028f043  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000af3c  00000000  00000000  0028f0c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000260 	.word	0x24000260
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801b288 	.word	0x0801b288

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000264 	.word	0x24000264
 80002d4:	0801b288 	.word	0x0801b288

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80005d8:	b480      	push	{r7}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80005ea:	2320      	movs	r3, #32
 80005ec:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 80005f2:	e00b      	b.n	800060c <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <SCB_InvalidateDCache_by_Addr+0x50>)
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	4413      	add	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	2b00      	cmp	r3, #0
 8000610:	dcf0      	bgt.n	80005f4 <SCB_InvalidateDCache_by_Addr+0x1c>
 8000612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000616:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800061a:	bf00      	nop
 800061c:	371c      	adds	r7, #28
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f001 fa41 	bl	8001ab8 <HAL_Init>

  /* USER CODE BEGIN Init */
  int i=0;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f891 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 fc23 	bl	8000e88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000642:	f000 fc01 	bl	8000e48 <MX_DMA_Init>
  MX_ETH_Init();
 8000646:	f000 fa07 	bl	8000a58 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800064a:	f000 fbb1 	bl	8000db0 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 800064e:	f000 fb15 	bl	8000c7c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000652:	f012 f937 	bl	80128c4 <MX_FATFS_Init>
  MX_RTC_Init();
 8000656:	f000 fab5 	bl	8000bc4 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 800065a:	f01a f821 	bl	801a6a0 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 800065e:	f000 fb7f 	bl	8000d60 <MX_TIM17_Init>
  MX_FDCAN1_Init();
 8000662:	f000 fa4b 	bl	8000afc <MX_FDCAN1_Init>
  MX_TIM3_Init();
 8000666:	f000 fb2b 	bl	8000cc0 <MX_TIM3_Init>
  MX_ADC3_Init();
 800066a:	f000 f977 	bl	800095c <MX_ADC3_Init>
  //HAL_SD_Init(&hsd1);
  //HAL_SD_GetCardInfo(&hsd1, &SDCardInfo);
  //HAL_SD_Init(&hsd1);
  FRESULT res;
  uint16_t rawValues[3];
  res=f_mount(&myFatFS, SDPath, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	4930      	ldr	r1, [pc, #192]	; (8000734 <main+0x108>)
 8000672:	4831      	ldr	r0, [pc, #196]	; (8000738 <main+0x10c>)
 8000674:	f018 f954 	bl	8018920 <f_mount>
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_Base_Start_IT(&htim17);
 800067c:	482f      	ldr	r0, [pc, #188]	; (800073c <main+0x110>)
 800067e:	f00c ffdf 	bl	800d640 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8000682:	482f      	ldr	r0, [pc, #188]	; (8000740 <main+0x114>)
 8000684:	f00c ffb2 	bl	800d5ec <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)aADCxConvertedData, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	492e      	ldr	r1, [pc, #184]	; (8000744 <main+0x118>)
 800068c:	482e      	ldr	r0, [pc, #184]	; (8000748 <main+0x11c>)
 800068e:	f002 f833 	bl	80026f8 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	482d      	ldr	r0, [pc, #180]	; (800074c <main+0x120>)
 8000698:	f006 ffb0 	bl	80075fc <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d1f7      	bne.n	8000692 <main+0x66>
		  if(i==0){
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d137      	bne.n	8000718 <main+0xec>
			  HAL_TIM_Base_Stop_IT(&htim17);
 80006a8:	4824      	ldr	r0, [pc, #144]	; (800073c <main+0x110>)
 80006aa:	f00c fff3 	bl	800d694 <HAL_TIM_Base_Stop_IT>
			  //NVIC_DisableIRQ(OTG_FS_IRQn);
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b4:	4826      	ldr	r0, [pc, #152]	; (8000750 <main+0x124>)
 80006b6:	f006 ffb9 	bl	800762c <HAL_GPIO_WritePin>
			  //if(USBD_Stop(&hUsbDeviceFS)!= USBD_OK) {
		             //				Error_Handler();
					//		  }

			  res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 80006ba:	2208      	movs	r2, #8
 80006bc:	4925      	ldr	r1, [pc, #148]	; (8000754 <main+0x128>)
 80006be:	4826      	ldr	r0, [pc, #152]	; (8000758 <main+0x12c>)
 80006c0:	f018 f974 	bl	80189ac <f_open>
 80006c4:	4603      	mov	r3, r0
 80006c6:	71fb      	strb	r3, [r7, #7]
			  res = f_close(&writeFile);
 80006c8:	4823      	ldr	r0, [pc, #140]	; (8000758 <main+0x12c>)
 80006ca:	f019 f8e0 	bl	801988e <f_close>
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
			  res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 80006d2:	2212      	movs	r2, #18
 80006d4:	491f      	ldr	r1, [pc, #124]	; (8000754 <main+0x128>)
 80006d6:	4820      	ldr	r0, [pc, #128]	; (8000758 <main+0x12c>)
 80006d8:	f018 f968 	bl	80189ac <f_open>
 80006dc:	4603      	mov	r3, r0
 80006de:	71fb      	strb	r3, [r7, #7]

			  for(int e=0;e<100000;e++){
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	e004      	b.n	80006f0 <main+0xc4>
				  scrivi_speed();
 80006e6:	f000 fd8b 	bl	8001200 <scrivi_speed>
			  for(int e=0;e<100000;e++){
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4a1a      	ldr	r2, [pc, #104]	; (800075c <main+0x130>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	ddf6      	ble.n	80006e6 <main+0xba>
			  }

			  res = f_close(&writeFile);
 80006f8:	4817      	ldr	r0, [pc, #92]	; (8000758 <main+0x12c>)
 80006fa:	f019 f8c8 	bl	801988e <f_close>
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <main+0x124>)
 800070a:	f006 ff8f 	bl	800762c <HAL_GPIO_WritePin>
		      i=0;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
		      HAL_Delay(200);}
 8000712:	20c8      	movs	r0, #200	; 0xc8
 8000714:	f001 fa62 	bl	8001bdc <HAL_Delay>


			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <main+0x124>)
 8000720:	f006 ff84 	bl	800762c <HAL_GPIO_WritePin>
			  //MX_USB_DEVICE_Init();
			  /*if(USBD_Start(&hUsbDeviceFS)!= USBD_OK) {
			 			  				    Error_Handler();
			 			  				  }*/
			  //NVIC_EnableIRQ(OTG_FS_IRQn);
			  HAL_TIM_Base_Start_IT(&htim17);
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <main+0x110>)
 8000726:	f00c ff8b 	bl	800d640 <HAL_TIM_Base_Start_IT>
			  HAL_Delay(200);
 800072a:	20c8      	movs	r0, #200	; 0xc8
 800072c:	f001 fa56 	bl	8001bdc <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 8000730:	e7af      	b.n	8000692 <main+0x66>
 8000732:	bf00      	nop
 8000734:	2400594c 	.word	0x2400594c
 8000738:	24003650 	.word	0x24003650
 800073c:	240014cc 	.word	0x240014cc
 8000740:	240025e4 	.word	0x240025e4
 8000744:	24000280 	.word	0x24000280
 8000748:	2400468c 	.word	0x2400468c
 800074c:	58020800 	.word	0x58020800
 8000750:	58020400 	.word	0x58020400
 8000754:	24000000 	.word	0x24000000
 8000758:	24001588 	.word	0x24001588
 800075c:	0001869f 	.word	0x0001869f

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0cc      	sub	sp, #304	; 0x130
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800076a:	224c      	movs	r2, #76	; 0x4c
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f01a fcc7 	bl	801b102 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000778:	2220      	movs	r2, #32
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f01a fcc0 	bl	801b102 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4618      	mov	r0, r3
 8000788:	23bc      	movs	r3, #188	; 0xbc
 800078a:	461a      	mov	r2, r3
 800078c:	2100      	movs	r1, #0
 800078e:	f01a fcb8 	bl	801b102 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000792:	2002      	movs	r0, #2
 8000794:	f008 f9ac 	bl	8008af0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	4b6b      	ldr	r3, [pc, #428]	; (800094c <SystemClock_Config+0x1ec>)
 80007a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a2:	4a6a      	ldr	r2, [pc, #424]	; (800094c <SystemClock_Config+0x1ec>)
 80007a4:	f023 0301 	bic.w	r3, r3, #1
 80007a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007aa:	4b68      	ldr	r3, [pc, #416]	; (800094c <SystemClock_Config+0x1ec>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	f003 0201 	and.w	r2, r3, #1
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	4b66      	ldr	r3, [pc, #408]	; (8000950 <SystemClock_Config+0x1f0>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a65      	ldr	r2, [pc, #404]	; (8000950 <SystemClock_Config+0x1f0>)
 80007bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b63      	ldr	r3, [pc, #396]	; (8000950 <SystemClock_Config+0x1f0>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d2:	bf00      	nop
 80007d4:	4b5e      	ldr	r3, [pc, #376]	; (8000950 <SystemClock_Config+0x1f0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e0:	d1f8      	bne.n	80007d4 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007e2:	4b5c      	ldr	r3, [pc, #368]	; (8000954 <SystemClock_Config+0x1f4>)
 80007e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e6:	f023 0303 	bic.w	r3, r3, #3
 80007ea:	4a5a      	ldr	r2, [pc, #360]	; (8000954 <SystemClock_Config+0x1f4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80007f2:	2329      	movs	r3, #41	; 0x29
 80007f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000806:	2301      	movs	r3, #1
 8000808:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 18;
 800081e:	2312      	movs	r3, #18
 8000820:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000836:	230c      	movs	r3, #12
 8000838:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000842:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000846:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800084e:	4618      	mov	r0, r3
 8000850:	f008 f998 	bl	8008b84 <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800085a:	f000 fd31 	bl	80012c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	233f      	movs	r3, #63	; 0x3f
 8000860:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2303      	movs	r3, #3
 8000866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000890:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000894:	2101      	movs	r1, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f008 fd4c 	bl	8009334 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x146>
  {
    Error_Handler();
 80008a2:	f000 fd0d 	bl	80012c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4a2b      	ldr	r2, [pc, #172]	; (8000958 <SystemClock_Config+0x1f8>)
 80008ac:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2201      	movs	r2, #1
 80008b4:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2218      	movs	r2, #24
 80008bc:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2202      	movs	r2, #2
 80008c4:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 3;
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2203      	movs	r2, #3
 80008cc:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	2202      	movs	r2, #2
 80008d4:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	22c0      	movs	r2, #192	; 0xc0
 80008dc:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80008fe:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	2200      	movs	r2, #0
 8000906:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2200      	movs	r2, #0
 800091a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000926:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4618      	mov	r0, r3
 8000930:	f009 f884 	bl	8009a3c <HAL_RCCEx_PeriphCLKConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x1de>
  {
    Error_Handler();
 800093a:	f000 fcc1 	bl	80012c0 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800093e:	f008 f911 	bl	8008b64 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000942:	bf00      	nop
 8000944:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	58000400 	.word	0x58000400
 8000950:	58024800 	.word	0x58024800
 8000954:	58024400 	.word	0x58024400
 8000958:	004d8002 	.word	0x004d8002

0800095c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */
	hadc3.Instance = ADC3;
 8000962:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <MX_ADC3_Init+0xe8>)
 8000964:	4a38      	ldr	r2, [pc, #224]	; (8000a48 <MX_ADC3_Init+0xec>)
 8000966:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN ADC3_Init 1 */
  if (HAL_ADC_DeInit(&AdcHandle) != HAL_OK)
 800097a:	4834      	ldr	r0, [pc, #208]	; (8000a4c <MX_ADC3_Init+0xf0>)
 800097c:	f001 fd3c 	bl	80023f8 <HAL_ADC_DeInit>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC3_Init+0x2e>
    {
      /* ADC de-initialization Error */
      Error_Handler();
 8000986:	f000 fc9b 	bl	80012c0 <Error_Handler>
    }
  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <MX_ADC3_Init+0xe8>)
 800098c:	4a2e      	ldr	r2, [pc, #184]	; (8000a48 <MX_ADC3_Init+0xec>)
 800098e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000990:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <MX_ADC3_Init+0xe8>)
 8000992:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000996:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000998:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <MX_ADC3_Init+0xe8>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009bc:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009d0:	2203      	movs	r2, #3
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009ea:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_ADC3_Init+0xe8>)
 80009ec:	f001 fb64 	bl	80020b8 <HAL_ADC_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 80009f6:	f000 fc63 	bl	80012c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_ADC3_Init+0xf4>)
 80009fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fe:	2306      	movs	r3, #6
 8000a00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a06:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a0a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	480a      	ldr	r0, [pc, #40]	; (8000a44 <MX_ADC3_Init+0xe8>)
 8000a1a:	f001 ff3b 	bl	8002894 <HAL_ADC_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000a24:	f000 fc4c 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  if (HAL_ADC_Start_DMA(&AdcHandle,
 8000a28:	2220      	movs	r2, #32
 8000a2a:	490a      	ldr	r1, [pc, #40]	; (8000a54 <MX_ADC3_Init+0xf8>)
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_ADC3_Init+0xf0>)
 8000a2e:	f001 fe63 	bl	80026f8 <HAL_ADC_Start_DMA>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC3_Init+0xe0>
                          (uint32_t *)aADCxConvertedData,
                          ADC_CONVERTED_DATA_BUFFER_SIZE
                         ) != HAL_OK)
    {
      Error_Handler();
 8000a38:	f000 fc42 	bl	80012c0 <Error_Handler>
    }
  /* USER CODE END ADC3_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2400468c 	.word	0x2400468c
 8000a48:	58026000 	.word	0x58026000
 8000a4c:	240047c4 	.word	0x240047c4
 8000a50:	cb840000 	.word	0xcb840000
 8000a54:	24000280 	.word	0x24000280

08000a58 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000a5e:	4a23      	ldr	r2, [pc, #140]	; (8000aec <MX_ETH_Init+0x94>)
 8000a60:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	3302      	adds	r3, #2
 8000a7a:	22e1      	movs	r2, #225	; 0xe1
 8000a7c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	3303      	adds	r3, #3
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	3305      	adds	r3, #5
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_ETH_Init+0x98>)
 8000aa6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_ETH_Init+0x9c>)
 8000aac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000ab0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ab4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000ab8:	f005 f968 	bl	8005d8c <HAL_ETH_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000ac2:	f000 fbfd 	bl	80012c0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ac6:	2234      	movs	r2, #52	; 0x34
 8000ac8:	2100      	movs	r1, #0
 8000aca:	480b      	ldr	r0, [pc, #44]	; (8000af8 <MX_ETH_Init+0xa0>)
 8000acc:	f01a fb19 	bl	801b102 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_ETH_Init+0xa0>)
 8000ad2:	2221      	movs	r2, #33	; 0x21
 8000ad4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_ETH_Init+0xa0>)
 8000ad8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000adc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_ETH_Init+0xa0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	24004848 	.word	0x24004848
 8000aec:	40028000 	.word	0x40028000
 8000af0:	240001f4 	.word	0x240001f4
 8000af4:	24000194 	.word	0x24000194
 8000af8:	240048c0 	.word	0x240048c0

08000afc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b00:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b02:	4a2f      	ldr	r2, [pc, #188]	; (8000bc0 <MX_FDCAN1_Init+0xc4>)
 8000b04:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b06:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b1e:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b26:	2205      	movs	r2, #5
 8000b28:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b2a:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b32:	220d      	movs	r2, #13
 8000b34:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b6e:	2204      	movs	r2, #4
 8000b70:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b86:	2204      	movs	r2, #4
 8000b88:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_FDCAN1_Init+0xc0>)
 8000baa:	f005 fd05 	bl	80065b8 <HAL_FDCAN_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000bb4:	f000 fb84 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	24004718 	.word	0x24004718
 8000bc0:	4000a000 	.word	0x4000a000

08000bc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000bd8:	2300      	movs	r3, #0
 8000bda:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000bde:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <MX_RTC_Init+0xb4>)
 8000be0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000bea:	227f      	movs	r2, #127	; 0x7f
 8000bec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000bf0:	22ff      	movs	r2, #255	; 0xff
 8000bf2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c0c:	4819      	ldr	r0, [pc, #100]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000c0e:	f00a fdc9 	bl	800b7a4 <HAL_RTC_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000c18:	f000 fb52 	bl	80012c0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2201      	movs	r2, #1
 8000c34:	4619      	mov	r1, r3
 8000c36:	480f      	ldr	r0, [pc, #60]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000c38:	f00a fe50 	bl	800b8dc <HAL_RTC_SetTime>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000c42:	f000 fb3d 	bl	80012c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c46:	2301      	movs	r3, #1
 8000c48:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_RTC_Init+0xb0>)
 8000c5e:	f00a ff5d 	bl	800bb1c <HAL_RTC_SetDate>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000c68:	f000 fb2a 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	240046f4 	.word	0x240046f4
 8000c78:	58004000 	.word	0x58004000

08000c7c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <MX_SDMMC1_SD_Init+0x40>)
 8000c84:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c9e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	24001448 	.word	0x24001448
 8000cbc:	52007000 	.word	0x52007000

08000cc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_TIM3_Init+0x98>)
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <MX_TIM3_Init+0x9c>)
 8000ce2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <MX_TIM3_Init+0x98>)
 8000ce6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000cea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_TIM3_Init+0x98>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MX_TIM3_Init+0x98>)
 8000cf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_TIM3_Init+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_TIM3_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <MX_TIM3_Init+0x98>)
 8000d08:	f00c fc44 	bl	800d594 <HAL_TIM_Base_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000d12:	f000 fad5 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_TIM3_Init+0x98>)
 8000d24:	f00c fe00 	bl	800d928 <HAL_TIM_ConfigClockSource>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000d2e:	f000 fac7 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d32:	2320      	movs	r3, #32
 8000d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_TIM3_Init+0x98>)
 8000d40:	f00d f822 	bl	800dd88 <HAL_TIMEx_MasterConfigSynchronization>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000d4a:	f000 fab9 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	240025e4 	.word	0x240025e4
 8000d5c:	40000400 	.word	0x40000400

08000d60 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_TIM17_Init+0x48>)
 8000d66:	4a11      	ldr	r2, [pc, #68]	; (8000dac <MX_TIM17_Init+0x4c>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_TIM17_Init+0x48>)
 8000d6c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d70:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <MX_TIM17_Init+0x48>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_TIM17_Init+0x48>)
 8000d7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d7e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_TIM17_Init+0x48>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_TIM17_Init+0x48>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_TIM17_Init+0x48>)
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_TIM17_Init+0x48>)
 8000d94:	f00c fbfe 	bl	800d594 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000d9e:	f000 fa8f 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	240014cc 	.word	0x240014cc
 8000dac:	40014800 	.word	0x40014800

08000db0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000db6:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <MX_USART3_UART_Init+0x94>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000df8:	4811      	ldr	r0, [pc, #68]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000dfa:	f00d f86b 	bl	800ded4 <HAL_UART_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e04:	f000 fa5c 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000e0c:	f00f fbd5 	bl	80105ba <HAL_UARTEx_SetTxFifoThreshold>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e16:	f000 fa53 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4808      	ldr	r0, [pc, #32]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000e1e:	f00f fc0a 	bl	8010636 <HAL_UARTEx_SetRxFifoThreshold>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e28:	f000 fa4a 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_USART3_UART_Init+0x90>)
 8000e2e:	f00f fb8b 	bl	8010548 <HAL_UARTEx_DisableFifoMode>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e38:	f000 fa42 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	24001378 	.word	0x24001378
 8000e44:	40004800 	.word	0x40004800

08000e48 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_DMA_Init+0x3c>)
 8000e50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <MX_DMA_Init+0x3c>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_DMA_Init+0x3c>)
 8000e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	200b      	movs	r0, #11
 8000e72:	f002 fc1a 	bl	80036aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e76:	200b      	movs	r0, #11
 8000e78:	f002 fc31 	bl	80036de <HAL_NVIC_EnableIRQ>

}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	58024400 	.word	0x58024400

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b59      	ldr	r3, [pc, #356]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	4a57      	ldr	r2, [pc, #348]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eae:	4b55      	ldr	r3, [pc, #340]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebc:	4b51      	ldr	r3, [pc, #324]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	4a50      	ldr	r2, [pc, #320]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ecc:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	4a48      	ldr	r2, [pc, #288]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eea:	4b46      	ldr	r3, [pc, #280]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	4a41      	ldr	r2, [pc, #260]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f08:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a39      	ldr	r2, [pc, #228]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000f1e:	f043 0308 	orr.w	r3, r3, #8
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a32      	ldr	r2, [pc, #200]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <MX_GPIO_Init+0x17c>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000f58:	482b      	ldr	r0, [pc, #172]	; (8001008 <MX_GPIO_Init+0x180>)
 8000f5a:	f006 fb67 	bl	800762c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	482a      	ldr	r0, [pc, #168]	; (800100c <MX_GPIO_Init+0x184>)
 8000f64:	f006 fb62 	bl	800762c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_GPIO_Init+0x188>)
 8000f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4825      	ldr	r0, [pc, #148]	; (8001014 <MX_GPIO_Init+0x18c>)
 8000f7e:	f006 f98d 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000f82:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <MX_GPIO_Init+0x180>)
 8000f9c:	f006 f97e 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4816      	ldr	r0, [pc, #88]	; (800100c <MX_GPIO_Init+0x184>)
 8000fb4:	f006 f972 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fb8:	2340      	movs	r3, #64	; 0x40
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480f      	ldr	r0, [pc, #60]	; (800100c <MX_GPIO_Init+0x184>)
 8000fd0:	f006 f964 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4809      	ldr	r0, [pc, #36]	; (800100c <MX_GPIO_Init+0x184>)
 8000fe8:	f006 f958 	bl	800729c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2028      	movs	r0, #40	; 0x28
 8000ff2:	f002 fb5a 	bl	80036aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff6:	2028      	movs	r0, #40	; 0x28
 8000ff8:	f002 fb71 	bl	80036de <HAL_NVIC_EnableIRQ>

}
 8000ffc:	bf00      	nop
 8000ffe:	3730      	adds	r7, #48	; 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	58024400 	.word	0x58024400
 8001008:	58020400 	.word	0x58020400
 800100c:	58021800 	.word	0x58021800
 8001010:	11110000 	.word	0x11110000
 8001014:	58020800 	.word	0x58020800

08001018 <HAL_FDCAN_RxFifo0Callback>:
 if(__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)){
 LD2_GPIO_Port -> ODR ^= LD2_Pin; // toggle LD2 LED
 }

}*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){}
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17) //check if the interrupt comes from TIM2
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d105      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x1e>
        {
    	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001046:	f006 fb0a 	bl	800765e <HAL_GPIO_TogglePin>
    	leggi();
 800104a:	f000 f887 	bl	800115c <leggi>

        }}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40014800 	.word	0x40014800
 800105c:	58020400 	.word	0x58020400

08001060 <scrivi>:
FRESULT scrivi(){
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af04      	add	r7, sp, #16
	      /* File  object for USER */
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	uint8_t bytesWrote;
	uint8_t path1[] = "ST.TXT";
 8001066:	4a34      	ldr	r2, [pc, #208]	; (8001138 <scrivi+0xd8>)
 8001068:	463b      	mov	r3, r7
 800106a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800106e:	6018      	str	r0, [r3, #0]
 8001070:	3304      	adds	r3, #4
 8001072:	8019      	strh	r1, [r3, #0]
 8001074:	3302      	adds	r3, #2
 8001076:	0c0a      	lsrs	r2, r1, #16
 8001078:	701a      	strb	r2, [r3, #0]
	//res = f_mount(&USERFatFs, (TCHAR const*)USERPath, 1);
	//res=f_mount(&myFatFS, USERPath, 1);
	res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 800107a:	463b      	mov	r3, r7
 800107c:	2208      	movs	r2, #8
 800107e:	4619      	mov	r1, r3
 8001080:	482e      	ldr	r0, [pc, #184]	; (800113c <scrivi+0xdc>)
 8001082:	f017 fc93 	bl	80189ac <f_open>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
	res = f_close(&writeFile);
 800108a:	482c      	ldr	r0, [pc, #176]	; (800113c <scrivi+0xdc>)
 800108c:	f018 fbff 	bl	801988e <f_close>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
	res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 8001094:	463b      	mov	r3, r7
 8001096:	2212      	movs	r2, #18
 8001098:	4619      	mov	r1, r3
 800109a:	4828      	ldr	r0, [pc, #160]	; (800113c <scrivi+0xdc>)
 800109c:	f017 fc86 	bl	80189ac <f_open>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
	if(res==FR_OK) {
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d13b      	bne.n	8001122 <scrivi+0xc2>
		f_lseek(&writeFile, indox);
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <scrivi+0xe0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f04f 0400 	mov.w	r4, #0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4623      	mov	r3, r4
 80010b6:	4821      	ldr	r0, [pc, #132]	; (800113c <scrivi+0xdc>)
 80010b8:	f018 fc13 	bl	80198e2 <f_lseek>

		//res1 = f_write(&writeFile, readBuf, size, &bytesWrote);}
		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 80010bc:	2200      	movs	r2, #0
 80010be:	4921      	ldr	r1, [pc, #132]	; (8001144 <scrivi+0xe4>)
 80010c0:	4821      	ldr	r0, [pc, #132]	; (8001148 <scrivi+0xe8>)
 80010c2:	f00a fccf 	bl	800ba64 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 80010c6:	2200      	movs	r2, #0
 80010c8:	4920      	ldr	r1, [pc, #128]	; (800114c <scrivi+0xec>)
 80010ca:	481f      	ldr	r0, [pc, #124]	; (8001148 <scrivi+0xe8>)
 80010cc:	f00a fdd4 	bl	800bc78 <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <scrivi+0xe4>)
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <scrivi+0xf0>)
 80010d6:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <scrivi+0xe4>)
 80010da:	785a      	ldrb	r2, [r3, #1]
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <scrivi+0xf0>)
 80010de:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <scrivi+0xe4>)
 80010e2:	789a      	ldrb	r2, [r3, #2]
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <scrivi+0xf0>)
 80010e6:	709a      	strb	r2, [r3, #2]

		indox=indox+f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);}
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <scrivi+0xf0>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <scrivi+0xf0>)
 80010f0:	785b      	ldrb	r3, [r3, #1]
 80010f2:	461c      	mov	r4, r3
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <scrivi+0xf0>)
 80010f6:	789b      	ldrb	r3, [r3, #2]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <scrivi+0xf4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <scrivi+0xe0>)
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	9202      	str	r2, [sp, #8]
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	9100      	str	r1, [sp, #0]
 8001108:	4623      	mov	r3, r4
 800110a:	4602      	mov	r2, r0
 800110c:	4912      	ldr	r1, [pc, #72]	; (8001158 <scrivi+0xf8>)
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <scrivi+0xdc>)
 8001110:	f018 ff6c 	bl	8019fec <f_printf>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <scrivi+0xe0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4413      	add	r3, r2
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <scrivi+0xe0>)
 8001120:	6013      	str	r3, [r2, #0]
		res = f_close(&writeFile);
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <scrivi+0xdc>)
 8001124:	f018 fbb3 	bl	801988e <f_close>
 8001128:	4603      	mov	r3, r0
 800112a:	73fb      	strb	r3, [r7, #15]

	return res;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}
 8001136:	bf00      	nop
 8001138:	0801b2b0 	.word	0x0801b2b0
 800113c:	24001588 	.word	0x24001588
 8001140:	240002c0 	.word	0x240002c0
 8001144:	24005930 	.word	0x24005930
 8001148:	240046f4 	.word	0x240046f4
 800114c:	240046f0 	.word	0x240046f0
 8001150:	24004844 	.word	0x24004844
 8001154:	240025e0 	.word	0x240025e0
 8001158:	0801b2a0 	.word	0x0801b2a0

0800115c <leggi>:
FRESULT leggi(){
 800115c:	b580      	push	{r7, lr}
 800115e:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
    	FIL readFile;       /* File  object for USER */
    		   /* File system object for USER logical drive */
    		//FIL USERFile;     /* File  object for USER */
    	char USERPath[4];
    	uint8_t bytesWrote;
    	uint8_t pat[] = "current.txt";
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <leggi+0x90>)
 8001168:	f241 0270 	movw	r2, #4208	; 0x1070
 800116c:	443a      	add	r2, r7
 800116e:	4413      	add	r3, r2
 8001170:	4a1f      	ldr	r2, [pc, #124]	; (80011f0 <leggi+0x94>)
 8001172:	ca07      	ldmia	r2, {r0, r1, r2}
 8001174:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	res = f_open(&readFile, &pat, FA_READ);
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <leggi+0x90>)
 800117a:	f241 0270 	movw	r2, #4208	; 0x1070
 800117e:	443a      	add	r2, r7
 8001180:	4413      	add	r3, r2
 8001182:	f107 0010 	add.w	r0, r7, #16
 8001186:	2201      	movs	r2, #1
 8001188:	4619      	mov	r1, r3
 800118a:	f017 fc0f 	bl	80189ac <f_open>
 800118e:	4603      	mov	r3, r0
 8001190:	f241 026f 	movw	r2, #4207	; 0x106f
 8001194:	443a      	add	r2, r7
 8001196:	7013      	strb	r3, [r2, #0]
    	res = f_read(&readFile,readBuff,1, &br);
 8001198:	f107 0010 	add.w	r0, r7, #16
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <leggi+0x98>)
 800119e:	2201      	movs	r2, #1
 80011a0:	4915      	ldr	r1, [pc, #84]	; (80011f8 <leggi+0x9c>)
 80011a2:	f017 fed3 	bl	8018f4c <f_read>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f241 026f 	movw	r2, #4207	; 0x106f
 80011ac:	443a      	add	r2, r7
 80011ae:	7013      	strb	r3, [r2, #0]
    	if(readBuff[0]=='1'){flag++;}
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <leggi+0x9c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b31      	cmp	r3, #49	; 0x31
 80011b6:	d105      	bne.n	80011c4 <leggi+0x68>
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <leggi+0xa0>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <leggi+0xa0>)
 80011c2:	701a      	strb	r2, [r3, #0]
    	scrivi();
 80011c4:	f7ff ff4c 	bl	8001060 <scrivi>
    	res = f_close(&readFile);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4618      	mov	r0, r3
 80011ce:	f018 fb5e 	bl	801988e <f_close>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f241 026f 	movw	r2, #4207	; 0x106f
 80011d8:	443a      	add	r2, r7
 80011da:	7013      	strb	r3, [r2, #0]





    	}
 80011dc:	bf00      	nop
 80011de:	4618      	mov	r0, r3
 80011e0:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	ffffef90 	.word	0xffffef90
 80011f0:	0801b2b8 	.word	0x0801b2b8
 80011f4:	2400150c 	.word	0x2400150c
 80011f8:	24001408 	.word	0x24001408
 80011fc:	240002c4 	.word	0x240002c4

08001200 <scrivi_speed>:
FRESULT scrivi_speed(){
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b087      	sub	sp, #28
 8001204:	af04      	add	r7, sp, #16
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */



		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 8001206:	2200      	movs	r2, #0
 8001208:	4917      	ldr	r1, [pc, #92]	; (8001268 <scrivi_speed+0x68>)
 800120a:	4818      	ldr	r0, [pc, #96]	; (800126c <scrivi_speed+0x6c>)
 800120c:	f00a fc2a 	bl	800ba64 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 8001210:	2200      	movs	r2, #0
 8001212:	4917      	ldr	r1, [pc, #92]	; (8001270 <scrivi_speed+0x70>)
 8001214:	4815      	ldr	r0, [pc, #84]	; (800126c <scrivi_speed+0x6c>)
 8001216:	f00a fd2f 	bl	800bc78 <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <scrivi_speed+0x68>)
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <scrivi_speed+0x74>)
 8001220:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <scrivi_speed+0x68>)
 8001224:	785a      	ldrb	r2, [r3, #1]
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <scrivi_speed+0x74>)
 8001228:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <scrivi_speed+0x68>)
 800122c:	789a      	ldrb	r2, [r3, #2]
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <scrivi_speed+0x74>)
 8001230:	709a      	strb	r2, [r3, #2]

	f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <scrivi_speed+0x74>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <scrivi_speed+0x74>)
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	461c      	mov	r4, r3
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <scrivi_speed+0x74>)
 8001240:	789b      	ldrb	r3, [r3, #2]
 8001242:	4619      	mov	r1, r3
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <scrivi_speed+0x78>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0c      	ldr	r2, [pc, #48]	; (800127c <scrivi_speed+0x7c>)
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	9202      	str	r2, [sp, #8]
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	9100      	str	r1, [sp, #0]
 8001252:	4623      	mov	r3, r4
 8001254:	4602      	mov	r2, r0
 8001256:	490a      	ldr	r1, [pc, #40]	; (8001280 <scrivi_speed+0x80>)
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <scrivi_speed+0x84>)
 800125a:	f018 fec7 	bl	8019fec <f_printf>


	return res;
 800125e:	79fb      	ldrb	r3, [r7, #7]
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	24005930 	.word	0x24005930
 800126c:	240046f4 	.word	0x240046f4
 8001270:	240046f0 	.word	0x240046f0
 8001274:	24004844 	.word	0x24004844
 8001278:	240025e0 	.word	0x240025e0
 800127c:	240002c0 	.word	0x240002c0
 8001280:	0801b2a0 	.word	0x0801b2a0
 8001284:	24001588 	.word	0x24001588

08001288 <HAL_ADC_ConvHalfCpltCallback>:

  /* Enable D-Cache */
  SCB_EnableDCache();
}
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
 8001290:	2120      	movs	r1, #32
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001294:	f7ff f9a0 	bl	80005d8 <SCB_InvalidateDCache_by_Addr>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	24000280 	.word	0x24000280

080012a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
   /* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
 80012ac:	2120      	movs	r1, #32
 80012ae:	4803      	ldr	r0, [pc, #12]	; (80012bc <HAL_ADC_ConvCpltCallback+0x18>)
 80012b0:	f7ff f992 	bl	80005d8 <SCB_InvalidateDCache_by_Addr>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	240002a0 	.word	0x240002a0

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_MspInit+0x30>)
 80012d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012dc:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_MspInit+0x30>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_MspInit+0x30>)
 80012e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	58024400 	.word	0x58024400

08001304 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <HAL_ADC_MspInit+0x98>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d13e      	bne.n	8001394 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <HAL_ADC_MspInit+0x9c>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <HAL_ADC_MspInit+0x9c>)
 800131e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_ADC_MspInit+0x9c>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
  
    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <HAL_ADC_MspInit+0xa4>)
 8001338:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 800133c:	2273      	movs	r2, #115	; 0x73
 800133e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 800134e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001352:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 8001356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800135a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 800135e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001362:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 8001366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 800137a:	f002 f9cb 	bl	8003714 <HAL_DMA_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 8001384:	f7ff ff9c 	bl	80012c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 800138c:	64da      	str	r2, [r3, #76]	; 0x4c
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <HAL_ADC_MspInit+0xa0>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	58026000 	.word	0x58026000
 80013a0:	58024400 	.word	0x58024400
 80013a4:	24001510 	.word	0x24001510
 80013a8:	40020010 	.word	0x40020010

080013ac <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_ADC_MspDeInit+0x34>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10c      	bne.n	80013d8 <HAL_ADC_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN ADC3_MspDeInit 0 */

  /* USER CODE END ADC3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC3_CLK_DISABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_ADC_MspDeInit+0x38>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_ADC_MspDeInit+0x38>)
 80013c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

    /* ADC3 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fcfa 	bl	8003dcc <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC3_MspDeInit 1 */

  /* USER CODE END ADC3_MspDeInit 1 */
  }

}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	58026000 	.word	0x58026000
 80013e4:	58024400 	.word	0x58024400

080013e8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a59      	ldr	r2, [pc, #356]	; (800156c <HAL_ETH_MspInit+0x184>)
 8001406:	4293      	cmp	r3, r2
 8001408:	f040 80ab 	bne.w	8001562 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800140e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001412:	4a57      	ldr	r2, [pc, #348]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001418:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800141c:	4b54      	ldr	r3, [pc, #336]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800141e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001426:	623b      	str	r3, [r7, #32]
 8001428:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800142a:	4b51      	ldr	r3, [pc, #324]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800142c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001430:	4a4f      	ldr	r2, [pc, #316]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001436:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800143a:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800143c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001448:	4b49      	ldr	r3, [pc, #292]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800144a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800144e:	4a48      	ldr	r2, [pc, #288]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800145a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	4b42      	ldr	r3, [pc, #264]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	4a40      	ldr	r2, [pc, #256]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	4a39      	ldr	r2, [pc, #228]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	4a31      	ldr	r2, [pc, #196]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b2:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014de:	2332      	movs	r3, #50	; 0x32
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ee:	230b      	movs	r3, #11
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	481e      	ldr	r0, [pc, #120]	; (8001574 <HAL_ETH_MspInit+0x18c>)
 80014fa:	f005 fecf 	bl	800729c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014fe:	2386      	movs	r3, #134	; 0x86
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150e:	230b      	movs	r3, #11
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	4817      	ldr	r0, [pc, #92]	; (8001578 <HAL_ETH_MspInit+0x190>)
 800151a:	f005 febf 	bl	800729c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800151e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001530:	230b      	movs	r3, #11
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	4810      	ldr	r0, [pc, #64]	; (800157c <HAL_ETH_MspInit+0x194>)
 800153c:	f005 feae 	bl	800729c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001540:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001552:	230b      	movs	r3, #11
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <HAL_ETH_MspInit+0x198>)
 800155e:	f005 fe9d 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3738      	adds	r7, #56	; 0x38
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40028000 	.word	0x40028000
 8001570:	58024400 	.word	0x58024400
 8001574:	58020800 	.word	0x58020800
 8001578:	58020000 	.word	0x58020000
 800157c:	58020400 	.word	0x58020400
 8001580:	58021800 	.word	0x58021800

08001584 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a22      	ldr	r2, [pc, #136]	; (800162c <HAL_FDCAN_MspInit+0xa8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d13d      	bne.n	8001622 <HAL_FDCAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_FDCAN_MspInit+0xac>)
 80015a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015ac:	4a20      	ldr	r2, [pc, #128]	; (8001630 <HAL_FDCAN_MspInit+0xac>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <HAL_FDCAN_MspInit+0xac>)
 80015b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_FDCAN_MspInit+0xac>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ca:	4a19      	ldr	r2, [pc, #100]	; (8001630 <HAL_FDCAN_MspInit+0xac>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_FDCAN_MspInit+0xac>)
 80015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e2:	2303      	movs	r3, #3
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80015f2:	2309      	movs	r3, #9
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <HAL_FDCAN_MspInit+0xb0>)
 80015fe:	f005 fe4d 	bl	800729c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2013      	movs	r0, #19
 8001608:	f002 f84f 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800160c:	2013      	movs	r0, #19
 800160e:	f002 f866 	bl	80036de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	203f      	movs	r0, #63	; 0x3f
 8001618:	f002 f847 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 800161c:	203f      	movs	r0, #63	; 0x3f
 800161e:	f002 f85e 	bl	80036de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	4000a000 	.word	0x4000a000
 8001630:	58024400 	.word	0x58024400
 8001634:	58020c00 	.word	0x58020c00

08001638 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_RTC_MspInit+0x2c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d105      	bne.n	8001656 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_RTC_MspInit+0x30>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_RTC_MspInit+0x30>)
 8001650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001654:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	58004000 	.word	0x58004000
 8001668:	58024400 	.word	0x58024400

0800166c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a32      	ldr	r2, [pc, #200]	; (8001754 <HAL_SD_MspInit+0xe8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d15e      	bne.n	800174c <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_SD_MspInit+0xec>)
 8001690:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001694:	4a30      	ldr	r2, [pc, #192]	; (8001758 <HAL_SD_MspInit+0xec>)
 8001696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_SD_MspInit+0xec>)
 80016a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_SD_MspInit+0xec>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	4a29      	ldr	r2, [pc, #164]	; (8001758 <HAL_SD_MspInit+0xec>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_SD_MspInit+0xec>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ca:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_SD_MspInit+0xec>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <HAL_SD_MspInit+0xec>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_SD_MspInit+0xec>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80016fa:	230c      	movs	r3, #12
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4815      	ldr	r0, [pc, #84]	; (800175c <HAL_SD_MspInit+0xf0>)
 8001706:	f005 fdc9 	bl	800729c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800171c:	230c      	movs	r3, #12
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <HAL_SD_MspInit+0xf0>)
 8001728:	f005 fdb8 	bl	800729c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800172c:	2304      	movs	r3, #4
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001734:	2301      	movs	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800173c:	230c      	movs	r3, #12
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <HAL_SD_MspInit+0xf4>)
 8001748:	f005 fda8 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	52007000 	.word	0x52007000
 8001758:	58024400 	.word	0x58024400
 800175c:	58020800 	.word	0x58020800
 8001760:	58020c00 	.word	0x58020c00

08001764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d10f      	bne.n	8001796 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_TIM_Base_MspInit+0x78>)
 8001778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_TIM_Base_MspInit+0x78>)
 800177e:	f043 0302 	orr.w	r3, r3, #2
 8001782:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_TIM_Base_MspInit+0x78>)
 8001788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001794:	e01b      	b.n	80017ce <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_TIM_Base_MspInit+0x7c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d116      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_TIM_Base_MspInit+0x78>)
 80017a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a6:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_TIM_Base_MspInit+0x78>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_TIM_Base_MspInit+0x78>)
 80017b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2076      	movs	r0, #118	; 0x76
 80017c4:	f001 ff71 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80017c8:	2076      	movs	r0, #118	; 0x76
 80017ca:	f001 ff88 	bl	80036de <HAL_NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40000400 	.word	0x40000400
 80017dc:	58024400 	.word	0x58024400
 80017e0:	40014800 	.word	0x40014800

080017e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_UART_MspInit+0x88>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d12e      	bne.n	8001864 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_UART_MspInit+0x8c>)
 8001808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800180c:	4a18      	ldr	r2, [pc, #96]	; (8001870 <HAL_UART_MspInit+0x8c>)
 800180e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001812:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_UART_MspInit+0x8c>)
 8001818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800181c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_UART_MspInit+0x8c>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <HAL_UART_MspInit+0x8c>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_UART_MspInit+0x8c>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001854:	2307      	movs	r3, #7
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_UART_MspInit+0x90>)
 8001860:	f005 fd1c 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40004800 	.word	0x40004800
 8001870:	58024400 	.word	0x58024400
 8001874:	58020c00 	.word	0x58020c00

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018cc:	f000 f966 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA1_Stream0_IRQHandler+0x10>)
 80018da:	f002 ff45 	bl	8004768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	24001510 	.word	0x24001510

080018e8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <FDCAN1_IT0_IRQHandler+0x10>)
 80018ee:	f005 f845 	bl	800697c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	24004718 	.word	0x24004718

080018fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001900:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001904:	f005 fec6 	bl	8007694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <FDCAN_CAL_IRQHandler+0x10>)
 8001912:	f005 f833 	bl	800697c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	24004718 	.word	0x24004718

08001920 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <OTG_FS_IRQHandler+0x10>)
 8001926:	f006 f831 	bl	800798c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	24007ea8 	.word	0x24007ea8

08001934 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <TIM17_IRQHandler+0x10>)
 800193a:	f00b fed6 	bl	800d6ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	240014cc 	.word	0x240014cc

08001948 <_sbrk>:
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x50>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x16>
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <_sbrk+0x50>)
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <_sbrk+0x54>)
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <_sbrk+0x50>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <_sbrk+0x50>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	466a      	mov	r2, sp
 800196e:	4293      	cmp	r3, r2
 8001970:	d907      	bls.n	8001982 <_sbrk+0x3a>
 8001972:	f019 fb81 	bl	801b078 <__errno>
 8001976:	4602      	mov	r2, r0
 8001978:	230c      	movs	r3, #12
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
 8001980:	e006      	b.n	8001990 <_sbrk+0x48>
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <_sbrk+0x50>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a03      	ldr	r2, [pc, #12]	; (8001998 <_sbrk+0x50>)
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	240002c8 	.word	0x240002c8
 800199c:	240082b8 	.word	0x240082b8

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <SystemInit+0xac>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <SystemInit+0xac>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019b4:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <SystemInit+0xb0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <SystemInit+0xb0>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <SystemInit+0xb0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <SystemInit+0xb0>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4921      	ldr	r1, [pc, #132]	; (8001a50 <SystemInit+0xb0>)
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <SystemInit+0xb4>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <SystemInit+0xb0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <SystemInit+0xb0>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <SystemInit+0xb0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <SystemInit+0xb0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <SystemInit+0xb0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <SystemInit+0xb0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <SystemInit+0xb0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <SystemInit+0xb0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <SystemInit+0xb0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <SystemInit+0xb0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <SystemInit+0xb0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <SystemInit+0xb0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <SystemInit+0xb0>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <SystemInit+0xb0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <SystemInit+0xb8>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <SystemInit+0xbc>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a32:	d202      	bcs.n	8001a3a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <SystemInit+0xc0>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SystemInit+0xac>)
 8001a3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a40:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00
 8001a50:	58024400 	.word	0x58024400
 8001a54:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a58:	5c001000 	.word	0x5c001000
 8001a5c:	ffff0000 	.word	0xffff0000
 8001a60:	51008108 	.word	0x51008108

08001a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a6a:	e003      	b.n	8001a74 <LoopCopyDataInit>

08001a6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a72:	3104      	adds	r1, #4

08001a74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a74:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a7c:	d3f6      	bcc.n	8001a6c <CopyDataInit>
  ldr  r2, =_sbss
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a80:	e002      	b.n	8001a88 <LoopFillZerobss>

08001a82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a84:	f842 3b04 	str.w	r3, [r2], #4

08001a88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a8c:	d3f9      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a8e:	f7ff ff87 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f019 faf7 	bl	801b084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a96:	f7fe fdc9 	bl	800062c <main>
  bx  lr    
 8001a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001aa0:	0801b870 	.word	0x0801b870
  ldr  r0, =_sdata
 8001aa4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001aa8:	24000194 	.word	0x24000194
  ldr  r2, =_sbss
 8001aac:	24000260 	.word	0x24000260
  ldr  r3, = _ebss
 8001ab0:	240082b4 	.word	0x240082b4

08001ab4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC3_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abe:	2003      	movs	r0, #3
 8001ac0:	f001 fde8 	bl	8003694 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ac4:	f007 fdec 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 8001ac8:	4601      	mov	r1, r0
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_Init+0x68>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <HAL_Init+0x6c>)
 8001ad6:	5cd3      	ldrb	r3, [r2, r3]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	fa21 f303 	lsr.w	r3, r1, r3
 8001ae0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_Init+0x68>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <HAL_Init+0x6c>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <HAL_Init+0x70>)
 8001afa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001afc:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <HAL_Init+0x74>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b02:	2000      	movs	r0, #0
 8001b04:	f000 f814 	bl	8001b30 <HAL_InitTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e002      	b.n	8001b18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b12:	f7ff fbdd 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	58024400 	.word	0x58024400
 8001b24:	0801b3b8 	.word	0x0801b3b8
 8001b28:	24000010 	.word	0x24000010
 8001b2c:	2400000c 	.word	0x2400000c

08001b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_InitTick+0x60>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e021      	b.n	8001b88 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_InitTick+0x64>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_InitTick+0x60>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 fdcd 	bl	80036fa <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f001 fd97 	bl	80036aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x68>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	24000018 	.word	0x24000018
 8001b94:	2400000c 	.word	0x2400000c
 8001b98:	24000014 	.word	0x24000014

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	24000018 	.word	0x24000018
 8001bc0:	24005944 	.word	0x24005944

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	24005944 	.word	0x24005944

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_Delay+0x40>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	24000018 	.word	0x24000018

08001c20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetREVID+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0c1b      	lsrs	r3, r3, #16
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	5c001000 	.word	0x5c001000

08001c38 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c48:	4904      	ldr	r1, [pc, #16]	; (8001c5c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	58000400 	.word	0x58000400

08001c60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	609a      	str	r2, [r3, #8]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cc8:	b490      	push	{r4, r7}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3360      	adds	r3, #96	; 0x60
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc90      	pop	{r4, r7}
 8001d00:	4770      	bx	lr

08001d02 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	431a      	orrs	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	611a      	str	r2, [r3, #16]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d34:	b490      	push	{r4, r7}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3360      	adds	r3, #96	; 0x60
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	6023      	str	r3, [r4, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc90      	pop	{r4, r7}
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d8a:	b490      	push	{r4, r7}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3330      	adds	r3, #48	; 0x30
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	4413      	add	r3, r2
 8001da8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	211f      	movs	r1, #31
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	401a      	ands	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	0e9b      	lsrs	r3, r3, #26
 8001dc0:	f003 011f 	and.w	r1, r3, #31
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc90      	pop	{r4, r7}
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60da      	str	r2, [r3, #12]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e02:	b490      	push	{r4, r7}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3314      	adds	r3, #20
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	0e5b      	lsrs	r3, r3, #25
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	4413      	add	r3, r2
 8001e20:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e22:	6822      	ldr	r2, [r4, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	0d1b      	lsrs	r3, r3, #20
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	2107      	movs	r1, #7
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	401a      	ands	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	0d1b      	lsrs	r3, r3, #20
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4313      	orrs	r3, r2
 8001e46:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc90      	pop	{r4, r7}
 8001e50:	4770      	bx	lr
	...

08001e54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	401a      	ands	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f003 0318 	and.w	r3, r3, #24
 8001e76:	4908      	ldr	r1, [pc, #32]	; (8001e98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e78:	40d9      	lsrs	r1, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e82:	431a      	orrs	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	000fffff 	.word	0x000fffff

08001e9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6093      	str	r3, [r2, #8]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	5fffffc0 	.word	0x5fffffc0

08001edc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef0:	d101      	bne.n	8001ef6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	6fffffc0 	.word	0x6fffffc0

08001f2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f40:	d101      	bne.n	8001f46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <LL_ADC_Enable+0x24>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	7fffffc0 	.word	0x7fffffc0

08001f7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <LL_ADC_Disable+0x24>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	f043 0202 	orr.w	r2, r3, #2
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	7fffffc0 	.word	0x7fffffc0

08001fa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <LL_ADC_IsEnabled+0x18>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <LL_ADC_IsEnabled+0x1a>
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_IsDisableOngoing+0x18>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_IsDisableOngoing+0x1a>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <LL_ADC_REG_StartConversion+0x24>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	f043 0204 	orr.w	r2, r3, #4
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	7fffffc0 	.word	0x7fffffc0

08002018 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <LL_ADC_REG_StopConversion+0x24>)
 8002026:	4013      	ands	r3, r2
 8002028:	f043 0210 	orr.w	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	7fffffc0 	.word	0x7fffffc0

08002040 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b04      	cmp	r3, #4
 8002052:	d101      	bne.n	8002058 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <LL_ADC_INJ_StopConversion+0x24>)
 8002076:	4013      	ands	r3, r2
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	7fffffc0 	.word	0x7fffffc0

08002090 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d101      	bne.n	80020a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e18e      	b.n	80023f0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff f90f 	bl	8001304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff feef 	bl	8001edc <LL_ADC_IsDeepPowerDownEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fed5 	bl	8001eb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff0a 	bl	8001f2c <LL_ADC_IsInternalRegulatorEnabled>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d113      	bne.n	8002146 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff feee 	bl	8001f04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002128:	4b9a      	ldr	r3, [pc, #616]	; (8002394 <HAL_ADC_Init+0x2dc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	4a9a      	ldr	r2, [pc, #616]	; (8002398 <HAL_ADC_Init+0x2e0>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002138:	e002      	b.n	8002140 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3b01      	subs	r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f9      	bne.n	800213a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff feee 	bl	8001f2c <LL_ADC_IsInternalRegulatorEnabled>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10d      	bne.n	8002172 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f043 0210 	orr.w	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff62 	bl	8002040 <LL_ADC_REG_IsConversionOngoing>
 800217c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 8129 	bne.w	80023de <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 8125 	bne.w	80023de <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800219c:	f043 0202 	orr.w	r2, r3, #2
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fefb 	bl	8001fa4 <LL_ADC_IsEnabled>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d136      	bne.n	8002222 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a78      	ldr	r2, [pc, #480]	; (800239c <HAL_ADC_Init+0x2e4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_ADC_Init+0x110>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a77      	ldr	r2, [pc, #476]	; (80023a0 <HAL_ADC_Init+0x2e8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d10e      	bne.n	80021e6 <HAL_ADC_Init+0x12e>
 80021c8:	4874      	ldr	r0, [pc, #464]	; (800239c <HAL_ADC_Init+0x2e4>)
 80021ca:	f7ff feeb 	bl	8001fa4 <LL_ADC_IsEnabled>
 80021ce:	4604      	mov	r4, r0
 80021d0:	4873      	ldr	r0, [pc, #460]	; (80023a0 <HAL_ADC_Init+0x2e8>)
 80021d2:	f7ff fee7 	bl	8001fa4 <LL_ADC_IsEnabled>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4323      	orrs	r3, r4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	e008      	b.n	80021f8 <HAL_ADC_Init+0x140>
 80021e6:	486f      	ldr	r0, [pc, #444]	; (80023a4 <HAL_ADC_Init+0x2ec>)
 80021e8:	f7ff fedc 	bl	8001fa4 <LL_ADC_IsEnabled>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf0c      	ite	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	2300      	movne	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a66      	ldr	r2, [pc, #408]	; (800239c <HAL_ADC_Init+0x2e4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d004      	beq.n	8002210 <HAL_ADC_Init+0x158>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a65      	ldr	r2, [pc, #404]	; (80023a0 <HAL_ADC_Init+0x2e8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_ADC_Init+0x15c>
 8002210:	4a65      	ldr	r2, [pc, #404]	; (80023a8 <HAL_ADC_Init+0x2f0>)
 8002212:	e000      	b.n	8002216 <HAL_ADC_Init+0x15e>
 8002214:	4a65      	ldr	r2, [pc, #404]	; (80023ac <HAL_ADC_Init+0x2f4>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4619      	mov	r1, r3
 800221c:	4610      	mov	r0, r2
 800221e:	f7ff fd1f 	bl	8001c60 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002222:	f7ff fcfd 	bl	8001c20 <HAL_GetREVID>
 8002226:	4602      	mov	r2, r0
 8002228:	f241 0303 	movw	r3, #4099	; 0x1003
 800222c:	429a      	cmp	r2, r3
 800222e:	d914      	bls.n	800225a <HAL_ADC_Init+0x1a2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b10      	cmp	r3, #16
 8002236:	d110      	bne.n	800225a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7d5b      	ldrb	r3, [r3, #21]
 800223c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002242:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002248:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7f1b      	ldrb	r3, [r3, #28]
 800224e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002250:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002252:	f043 030c 	orr.w	r3, r3, #12
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e00d      	b.n	8002276 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7d5b      	ldrb	r3, [r3, #21]
 800225e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002264:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800226a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7f1b      	ldrb	r3, [r3, #28]
 8002270:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7f1b      	ldrb	r3, [r3, #28]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d106      	bne.n	800228c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	3b01      	subs	r3, #1
 8002284:	045b      	lsls	r3, r3, #17
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2b00      	cmp	r3, #0
 8002292:	d009      	beq.n	80022a8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	4b40      	ldr	r3, [pc, #256]	; (80023b0 <HAL_ADC_Init+0x2f8>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	69b9      	ldr	r1, [r7, #24]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff febd 	bl	8002040 <LL_ADC_REG_IsConversionOngoing>
 80022c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fedf 	bl	8002090 <LL_ADC_INJ_IsConversionOngoing>
 80022d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d14a      	bne.n	8002370 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d147      	bne.n	8002370 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7d1b      	ldrb	r3, [r3, #20]
 80022e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <HAL_ADC_Init+0x2fc>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	69b9      	ldr	r1, [r7, #24]
 80022fe:	430b      	orrs	r3, r1
 8002300:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002308:	2b01      	cmp	r3, #1
 800230a:	d11b      	bne.n	8002344 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_ADC_Init+0x300>)
 800231a:	4013      	ands	r3, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002320:	3a01      	subs	r2, #1
 8002322:	0411      	lsls	r1, r2, #16
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002328:	4311      	orrs	r1, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800232e:	4311      	orrs	r1, r2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002334:	430a      	orrs	r2, r1
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0201 	orr.w	r2, r2, #1
 8002340:	611a      	str	r2, [r3, #16]
 8002342:	e007      	b.n	8002354 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 ffca 	bl	8003304 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d121      	bne.n	80023bc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f023 010f 	bic.w	r1, r3, #15
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	1e5a      	subs	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
 8002390:	e01c      	b.n	80023cc <HAL_ADC_Init+0x314>
 8002392:	bf00      	nop
 8002394:	2400000c 	.word	0x2400000c
 8002398:	053e2d63 	.word	0x053e2d63
 800239c:	40022000 	.word	0x40022000
 80023a0:	40022100 	.word	0x40022100
 80023a4:	58026000 	.word	0x58026000
 80023a8:	40022300 	.word	0x40022300
 80023ac:	58026300 	.word	0x58026300
 80023b0:	fff0c003 	.word	0xfff0c003
 80023b4:	ffffbffc 	.word	0xffffbffc
 80023b8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 020f 	bic.w	r2, r2, #15
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	f023 0303 	bic.w	r3, r3, #3
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
 80023dc:	e007      	b.n	80023ee <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f043 0210 	orr.w	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3724      	adds	r7, #36	; 0x24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}

080023f8 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e16e      	b.n	80026e8 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f043 0202 	orr.w	r2, r3, #2
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	655a      	str	r2, [r3, #84]	; 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002416:	2103      	movs	r1, #3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fd4f 	bl	8002ebc <ADC_ConversionStop>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002430:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fe77 	bl	800312c <ADC_Disable>
 800243e:	4603      	mov	r3, r0
 8002440:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b8c      	ldr	r3, [pc, #560]	; (800268c <HAL_ADC_DeInit+0x294>)
 800245a:	400b      	ands	r3, r1
 800245c:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002466:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 8002476:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002486:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f002 2280 	and.w	r2, r2, #2147516416	; 0x80008000
 8002496:	60da      	str	r2, [r3, #12]
                                  ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
                                  ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
                                  ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
                                  ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
                                  ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024a6:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6919      	ldr	r1, [r3, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b77      	ldr	r3, [pc, #476]	; (8002690 <HAL_ADC_DeInit+0x298>)
 80024b4:	400b      	ands	r3, r1
 80024b6:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80024c6:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 80024d6:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a1a      	ldr	r2, [r3, #32]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80024e6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 8002508:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 800251c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 8002530:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 8002544:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b50      	ldr	r3, [pc, #320]	; (8002694 <HAL_ADC_DeInit+0x29c>)
 8002554:	400b      	ands	r3, r1
 8002556:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <HAL_ADC_DeInit+0x2a0>)
 8002564:	400b      	ands	r3, r1
 8002566:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_ADC_DeInit+0x2a0>)
 8002574:	400b      	ands	r3, r1
 8002576:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_ADC_DeInit+0x2a4>)
 8002584:	400b      	ands	r3, r1
 8002586:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	661a      	str	r2, [r3, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	665a      	str	r2, [r3, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	669a      	str	r2, [r3, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2200      	movs	r2, #0
 80025be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_ADC_DeInit+0x2a8>)
 80025ce:	400b      	ands	r3, r1
 80025d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <HAL_ADC_DeInit+0x2a8>)
 80025e2:	400b      	ands	r3, r1
 80025e4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <HAL_ADC_DeInit+0x2a8>)
 80025f6:	400b      	ands	r3, r1
 80025f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f002 22f8 	and.w	r2, r2, #4160813056	; 0xf800f800
 800260c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_ADC_DeInit+0x2ac>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d004      	beq.n	8002624 <HAL_ADC_DeInit+0x22c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <HAL_ADC_DeInit+0x2b0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10e      	bne.n	8002642 <HAL_ADC_DeInit+0x24a>
 8002624:	481f      	ldr	r0, [pc, #124]	; (80026a4 <HAL_ADC_DeInit+0x2ac>)
 8002626:	f7ff fcbd 	bl	8001fa4 <LL_ADC_IsEnabled>
 800262a:	4604      	mov	r4, r0
 800262c:	481e      	ldr	r0, [pc, #120]	; (80026a8 <HAL_ADC_DeInit+0x2b0>)
 800262e:	f7ff fcb9 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002632:	4603      	mov	r3, r0
 8002634:	4323      	orrs	r3, r4
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf0c      	ite	eq
 800263a:	2301      	moveq	r3, #1
 800263c:	2300      	movne	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	e008      	b.n	8002654 <HAL_ADC_DeInit+0x25c>
 8002642:	481a      	ldr	r0, [pc, #104]	; (80026ac <HAL_ADC_DeInit+0x2b4>)
 8002644:	f7ff fcae 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d033      	beq.n	80026c0 <HAL_ADC_DeInit+0x2c8>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <HAL_ADC_DeInit+0x2ac>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d004      	beq.n	800266c <HAL_ADC_DeInit+0x274>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <HAL_ADC_DeInit+0x2b0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d101      	bne.n	8002670 <HAL_ADC_DeInit+0x278>
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_ADC_DeInit+0x2b8>)
 800266e:	e000      	b.n	8002672 <HAL_ADC_DeInit+0x27a>
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_ADC_DeInit+0x2bc>)
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_ADC_DeInit+0x2ac>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_ADC_DeInit+0x290>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_ADC_DeInit+0x2b0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d117      	bne.n	80026b8 <HAL_ADC_DeInit+0x2c0>
 8002688:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <HAL_ADC_DeInit+0x2b8>)
 800268a:	e016      	b.n	80026ba <HAL_ADC_DeInit+0x2c2>
 800268c:	fffff800 	.word	0xfffff800
 8002690:	fc00f81c 	.word	0xfc00f81c
 8002694:	e0820830 	.word	0xe0820830
 8002698:	e0820820 	.word	0xe0820820
 800269c:	fffff820 	.word	0xfffff820
 80026a0:	fff00000 	.word	0xfff00000
 80026a4:	40022000 	.word	0x40022000
 80026a8:	40022100 	.word	0x40022100
 80026ac:	58026000 	.word	0x58026000
 80026b0:	40022300 	.word	0x40022300
 80026b4:	58026300 	.word	0x58026300
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <HAL_ADC_DeInit+0x2f8>)
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_ADC_DeInit+0x2fc>)
 80026bc:	400b      	ands	r3, r1
 80026be:	6093      	str	r3, [r2, #8]

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7fe fe73 	bl	80013ac <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	58026300 	.word	0x58026300
 80026f4:	fe0030e0 	.word	0xfe0030e0

080026f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a55      	ldr	r2, [pc, #340]	; (8002860 <HAL_ADC_Start_DMA+0x168>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <HAL_ADC_Start_DMA+0x20>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a54      	ldr	r2, [pc, #336]	; (8002864 <HAL_ADC_Start_DMA+0x16c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_ADC_Start_DMA+0x24>
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_ADC_Start_DMA+0x170>)
 800271a:	e000      	b.n	800271e <HAL_ADC_Start_DMA+0x26>
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_ADC_Start_DMA+0x174>)
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fbbc 	bl	8001e9c <LL_ADC_GetMultimode>
 8002724:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fc88 	bl	8002040 <LL_ADC_REG_IsConversionOngoing>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 808c 	bne.w	8002850 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_Start_DMA+0x4e>
 8002742:	2302      	movs	r3, #2
 8002744:	e087      	b.n	8002856 <HAL_ADC_Start_DMA+0x15e>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d002      	beq.n	8002760 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b09      	cmp	r3, #9
 800275e:	d170      	bne.n	8002842 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fc5f 	bl	8003024 <ADC_Enable>
 8002766:	4603      	mov	r3, r0
 8002768:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d163      	bne.n	8002838 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002774:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <HAL_ADC_Start_DMA+0x178>)
 8002776:	4013      	ands	r3, r2
 8002778:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a37      	ldr	r2, [pc, #220]	; (8002864 <HAL_ADC_Start_DMA+0x16c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d002      	beq.n	8002790 <HAL_ADC_Start_DMA+0x98>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e000      	b.n	8002792 <HAL_ADC_Start_DMA+0x9a>
 8002790:	4b33      	ldr	r3, [pc, #204]	; (8002860 <HAL_ADC_Start_DMA+0x168>)
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	4293      	cmp	r3, r2
 8002798:	d002      	beq.n	80027a0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	f023 0206 	bic.w	r2, r3, #6
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	659a      	str	r2, [r3, #88]	; 0x58
 80027c4:	e002      	b.n	80027cc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d0:	4a28      	ldr	r2, [pc, #160]	; (8002874 <HAL_ADC_Start_DMA+0x17c>)
 80027d2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <HAL_ADC_Start_DMA+0x180>)
 80027da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e0:	4a26      	ldr	r2, [pc, #152]	; (800287c <HAL_ADC_Start_DMA+0x184>)
 80027e2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	221c      	movs	r2, #28
 80027ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0210 	orr.w	r2, r2, #16
 8002802:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	4619      	mov	r1, r3
 800280e:	4610      	mov	r0, r2
 8002810:	f7ff fae4 	bl	8001ddc <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3340      	adds	r3, #64	; 0x40
 800281e:	4619      	mov	r1, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f001 fd36 	bl	8004294 <HAL_DMA_Start_IT>
 8002828:	4603      	mov	r3, r0
 800282a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fbdd 	bl	8001ff0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002836:	e00d      	b.n	8002854 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002840:	e008      	b.n	8002854 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800284e:	e001      	b.n	8002854 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002850:	2302      	movs	r3, #2
 8002852:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002854:	7dfb      	ldrb	r3, [r7, #23]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000
 8002864:	40022100 	.word	0x40022100
 8002868:	40022300 	.word	0x40022300
 800286c:	58026300 	.word	0x58026300
 8002870:	fffff0fe 	.word	0xfffff0fe
 8002874:	080031dd 	.word	0x080031dd
 8002878:	080032b5 	.word	0x080032b5
 800287c:	080032d1 	.word	0x080032d1

08002880 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b099      	sub	sp, #100	; 0x64
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a99      	ldr	r2, [pc, #612]	; (8002b14 <HAL_ADC_ConfigChannel+0x280>)
 80028ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x2a>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e2e6      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x5f8>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fbb8 	bl	8002040 <LL_ADC_REG_IsConversionOngoing>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 82cb 	bne.w	8002e6e <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d108      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x62>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0e9b      	lsrs	r3, r3, #26
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2201      	movs	r2, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	e00f      	b.n	8002916 <HAL_ADC_ConfigChannel+0x82>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2201      	movs	r2, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	69d1      	ldr	r1, [r2, #28]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	430b      	orrs	r3, r1
 8002922:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	f7ff fa2a 	bl	8001d8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fb80 	bl	8002040 <LL_ADC_REG_IsConversionOngoing>
 8002940:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fba2 	bl	8002090 <LL_ADC_INJ_IsConversionOngoing>
 800294c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800294e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 80b3 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002958:	2b00      	cmp	r3, #0
 800295a:	f040 80af 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	461a      	mov	r2, r3
 800296c:	f7ff fa49 	bl	8001e02 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002970:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <HAL_ADC_ConfigChannel+0x284>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800297c:	d10b      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x102>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	e01d      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x13e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10b      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x128>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	e00a      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x13e>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d027      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6919      	ldr	r1, [r3, #16]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	f7ff f96d 	bl	8001cc8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6919      	ldr	r1, [r3, #16]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	7e5b      	ldrb	r3, [r3, #25]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d102      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x170>
 80029fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a02:	e000      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x172>
 8002a04:	2300      	movs	r3, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	f7ff f994 	bl	8001d34 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6919      	ldr	r1, [r3, #16]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	7e1b      	ldrb	r3, [r3, #24]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d102      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x18e>
 8002a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a20:	e000      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x190>
 8002a22:	2300      	movs	r3, #0
 8002a24:	461a      	mov	r2, r3
 8002a26:	f7ff f96c 	bl	8001d02 <LL_ADC_SetDataRightShift>
 8002a2a:	e047      	b.n	8002abc <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	069b      	lsls	r3, r3, #26
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d107      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a4e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	069b      	lsls	r3, r3, #26
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d107      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a72:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	069b      	lsls	r3, r3, #26
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d107      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a96:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	069b      	lsls	r3, r3, #26
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d107      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fa6f 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 81d9 	bne.w	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	461a      	mov	r2, r3
 8002adc:	f7ff f9ba 	bl	8001e54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <HAL_ADC_ConfigChannel+0x280>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	f040 8101 	bne.w	8002cee <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10f      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x288>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e016      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x2ae>
 8002b14:	47ff0000 	.word	0x47ff0000
 8002b18:	5c001000 	.word	0x5c001000
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	bf94      	ite	ls
 8002b3c:	2301      	movls	r3, #1
 8002b3e:	2300      	movhi	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d064      	beq.n	8002c10 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d107      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x2ce>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0e9b      	lsrs	r3, r3, #26
 8002b58:	3301      	adds	r3, #1
 8002b5a:	069b      	lsls	r3, r3, #26
 8002b5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b60:	e00e      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x2ec>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	069b      	lsls	r3, r3, #26
 8002b7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x30c>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	3301      	adds	r3, #1
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	e010      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x32e>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	ea42 0103 	orr.w	r1, r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x354>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f003 021f 	and.w	r2, r3, #31
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	051b      	lsls	r3, r3, #20
 8002be6:	e011      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x378>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	e069      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x398>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	3301      	adds	r3, #1
 8002c24:	069b      	lsls	r3, r3, #26
 8002c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c2a:	e00e      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x3b6>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	61fb      	str	r3, [r7, #28]
  return result;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	069b      	lsls	r3, r3, #26
 8002c46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x3d6>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0e9b      	lsrs	r3, r3, #26
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2101      	movs	r1, #1
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	e010      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x3f8>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	617b      	str	r3, [r7, #20]
  return result;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	ea42 0103 	orr.w	r1, r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10d      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x424>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0e9b      	lsrs	r3, r3, #26
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	3b1e      	subs	r3, #30
 8002cb0:	051b      	lsls	r3, r3, #20
 8002cb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	e014      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x44e>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	60fb      	str	r3, [r7, #12]
  return result;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	fab3 f383 	clz	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	3b1e      	subs	r3, #30
 8002cdc:	051b      	lsls	r3, r3, #20
 8002cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	6892      	ldr	r2, [r2, #8]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7ff f88a 	bl	8001e02 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f280 80c4 	bge.w	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a65      	ldr	r2, [pc, #404]	; (8002e94 <HAL_ADC_ConfigChannel+0x600>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d004      	beq.n	8002d0c <HAL_ADC_ConfigChannel+0x478>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a64      	ldr	r2, [pc, #400]	; (8002e98 <HAL_ADC_ConfigChannel+0x604>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x47c>
 8002d0c:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_ADC_ConfigChannel+0x608>)
 8002d0e:	e000      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x47e>
 8002d10:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_ADC_ConfigChannel+0x60c>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe ffca 	bl	8001cac <LL_ADC_GetCommonPathInternalCh>
 8002d18:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5d      	ldr	r2, [pc, #372]	; (8002e94 <HAL_ADC_ConfigChannel+0x600>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_ADC_ConfigChannel+0x49a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a5b      	ldr	r2, [pc, #364]	; (8002e98 <HAL_ADC_ConfigChannel+0x604>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10e      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x4b8>
 8002d2e:	4859      	ldr	r0, [pc, #356]	; (8002e94 <HAL_ADC_ConfigChannel+0x600>)
 8002d30:	f7ff f938 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002d34:	4604      	mov	r4, r0
 8002d36:	4858      	ldr	r0, [pc, #352]	; (8002e98 <HAL_ADC_ConfigChannel+0x604>)
 8002d38:	f7ff f934 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e008      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x4ca>
 8002d4c:	4855      	ldr	r0, [pc, #340]	; (8002ea4 <HAL_ADC_ConfigChannel+0x610>)
 8002d4e:	f7ff f929 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d07b      	beq.n	8002e5a <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a50      	ldr	r2, [pc, #320]	; (8002ea8 <HAL_ADC_ConfigChannel+0x614>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d12e      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x536>
 8002d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d129      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ea4 <HAL_ADC_ConfigChannel+0x610>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d17f      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a43      	ldr	r2, [pc, #268]	; (8002e94 <HAL_ADC_ConfigChannel+0x600>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_ConfigChannel+0x500>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a42      	ldr	r2, [pc, #264]	; (8002e98 <HAL_ADC_ConfigChannel+0x604>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x504>
 8002d94:	4a41      	ldr	r2, [pc, #260]	; (8002e9c <HAL_ADC_ConfigChannel+0x608>)
 8002d96:	e000      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x506>
 8002d98:	4a41      	ldr	r2, [pc, #260]	; (8002ea0 <HAL_ADC_ConfigChannel+0x60c>)
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f7fe ff6f 	bl	8001c86 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002da8:	4b40      	ldr	r3, [pc, #256]	; (8002eac <HAL_ADC_ConfigChannel+0x618>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	4a40      	ldr	r2, [pc, #256]	; (8002eb0 <HAL_ADC_ConfigChannel+0x61c>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002dba:	e002      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f9      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dc8:	e05a      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a39      	ldr	r2, [pc, #228]	; (8002eb4 <HAL_ADC_ConfigChannel+0x620>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d11e      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x57e>
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d119      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a30      	ldr	r2, [pc, #192]	; (8002ea4 <HAL_ADC_ConfigChannel+0x610>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d14b      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <HAL_ADC_ConfigChannel+0x600>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_ADC_ConfigChannel+0x568>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a28      	ldr	r2, [pc, #160]	; (8002e98 <HAL_ADC_ConfigChannel+0x604>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x56c>
 8002dfc:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <HAL_ADC_ConfigChannel+0x608>)
 8002dfe:	e000      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x56e>
 8002e00:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <HAL_ADC_ConfigChannel+0x60c>)
 8002e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7fe ff3b 	bl	8001c86 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e10:	e036      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_ADC_ConfigChannel+0x624>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d131      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
 8002e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d12c      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <HAL_ADC_ConfigChannel+0x610>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d127      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <HAL_ADC_ConfigChannel+0x600>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x5b0>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <HAL_ADC_ConfigChannel+0x604>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x5b4>
 8002e44:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <HAL_ADC_ConfigChannel+0x608>)
 8002e46:	e000      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x5b6>
 8002e48:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <HAL_ADC_ConfigChannel+0x60c>)
 8002e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f7fe ff17 	bl	8001c86 <LL_ADC_SetCommonPathInternalCh>
 8002e58:	e012      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	f043 0220 	orr.w	r2, r3, #32
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002e6c:	e008      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3764      	adds	r7, #100	; 0x64
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	40022000 	.word	0x40022000
 8002e98:	40022100 	.word	0x40022100
 8002e9c:	40022300 	.word	0x40022300
 8002ea0:	58026300 	.word	0x58026300
 8002ea4:	58026000 	.word	0x58026000
 8002ea8:	cb840000 	.word	0xcb840000
 8002eac:	2400000c 	.word	0x2400000c
 8002eb0:	053e2d63 	.word	0x053e2d63
 8002eb4:	c7520000 	.word	0xc7520000
 8002eb8:	cfb80000 	.word	0xcfb80000

08002ebc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f8b4 	bl	8002040 <LL_ADC_REG_IsConversionOngoing>
 8002ed8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff f8d6 	bl	8002090 <LL_ADC_INJ_IsConversionOngoing>
 8002ee4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8090 	beq.w	8003014 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d02a      	beq.n	8002f58 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7d5b      	ldrb	r3, [r3, #21]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d126      	bne.n	8002f58 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7d1b      	ldrb	r3, [r3, #20]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d122      	bne.n	8002f58 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f16:	e014      	b.n	8002f42 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4a41      	ldr	r2, [pc, #260]	; (8003020 <ADC_ConversionStop+0x164>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d90d      	bls.n	8002f3c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0210 	orr.w	r2, r3, #16
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e06c      	b.n	8003016 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d1e3      	bne.n	8002f18 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2240      	movs	r2, #64	; 0x40
 8002f56:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d014      	beq.n	8002f88 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f86c 	bl	8002040 <LL_ADC_REG_IsConversionOngoing>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00c      	beq.n	8002f88 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f829 	bl	8001fca <LL_ADC_IsDisableOngoing>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff f848 	bl	8002018 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d014      	beq.n	8002fb8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f87c 	bl	8002090 <LL_ADC_INJ_IsConversionOngoing>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f811 	bl	8001fca <LL_ADC_IsDisableOngoing>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f858 	bl	8002068 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d004      	beq.n	8002fc8 <ADC_ConversionStop+0x10c>
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d105      	bne.n	8002fce <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	617b      	str	r3, [r7, #20]
        break;
 8002fc6:	e005      	b.n	8002fd4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002fc8:	2308      	movs	r3, #8
 8002fca:	617b      	str	r3, [r7, #20]
        break;
 8002fcc:	e002      	b.n	8002fd4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002fce:	2304      	movs	r3, #4
 8002fd0:	617b      	str	r3, [r7, #20]
        break;
 8002fd2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002fd4:	f7fe fdf6 	bl	8001bc4 <HAL_GetTick>
 8002fd8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fda:	e014      	b.n	8003006 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002fdc:	f7fe fdf2 	bl	8001bc4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d90d      	bls.n	8003006 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f043 0210 	orr.w	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e007      	b.n	8003016 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e3      	bne.n	8002fdc <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	000cdbff 	.word	0x000cdbff

08003024 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe ffb7 	bl	8001fa4 <LL_ADC_IsEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d167      	bne.n	800310c <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	4b35      	ldr	r3, [pc, #212]	; (8003118 <ADC_Enable+0xf4>)
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e053      	b.n	800310e <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe ff72 	bl	8001f54 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003070:	f7fe fda8 	bl	8001bc4 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a28      	ldr	r2, [pc, #160]	; (800311c <ADC_Enable+0xf8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <ADC_Enable+0x66>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a26      	ldr	r2, [pc, #152]	; (8003120 <ADC_Enable+0xfc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <ADC_Enable+0x6a>
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <ADC_Enable+0x100>)
 800308c:	e000      	b.n	8003090 <ADC_Enable+0x6c>
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <ADC_Enable+0x104>)
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe ff03 	bl	8001e9c <LL_ADC_GetMultimode>
 8003096:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a20      	ldr	r2, [pc, #128]	; (8003120 <ADC_Enable+0xfc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d002      	beq.n	80030a8 <ADC_Enable+0x84>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	e000      	b.n	80030aa <ADC_Enable+0x86>
 80030a8:	4b1c      	ldr	r3, [pc, #112]	; (800311c <ADC_Enable+0xf8>)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d025      	beq.n	80030fe <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d129      	bne.n	800310c <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030b8:	e021      	b.n	80030fe <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe ff70 	bl	8001fa4 <LL_ADC_IsEnabled>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d104      	bne.n	80030d4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe ff40 	bl	8001f54 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030d4:	f7fe fd76 	bl	8001bc4 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d90d      	bls.n	80030fe <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e007      	b.n	800310e <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d1d6      	bne.n	80030ba <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	8000003f 	.word	0x8000003f
 800311c:	40022000 	.word	0x40022000
 8003120:	40022100 	.word	0x40022100
 8003124:	40022300 	.word	0x40022300
 8003128:	58026300 	.word	0x58026300

0800312c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe ff46 	bl	8001fca <LL_ADC_IsDisableOngoing>
 800313e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe ff2d 	bl	8001fa4 <LL_ADC_IsEnabled>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d040      	beq.n	80031d2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d13d      	bne.n	80031d2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030d 	and.w	r3, r3, #13
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10c      	bne.n	800317e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe ff07 	bl	8001f7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2203      	movs	r2, #3
 8003174:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003176:	f7fe fd25 	bl	8001bc4 <HAL_GetTick>
 800317a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800317c:	e022      	b.n	80031c4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e01c      	b.n	80031d4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800319a:	f7fe fd13 	bl	8001bc4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d90d      	bls.n	80031c4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f043 0210 	orr.w	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e007      	b.n	80031d4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e3      	bne.n	800319a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d14b      	bne.n	800328e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d021      	beq.n	8003254 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe fda5 	bl	8001d64 <LL_ADC_REG_IsTriggerSourceSWStart>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d032      	beq.n	8003286 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d12b      	bne.n	8003286 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d11f      	bne.n	8003286 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
 8003252:	e018      	b.n	8003286 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d111      	bne.n	8003286 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0201 	orr.w	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7fe f80c 	bl	80012a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800328c:	e00e      	b.n	80032ac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7ff faf0 	bl	8002880 <HAL_ADC_ErrorCallback>
}
 80032a0:	e004      	b.n	80032ac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7fd ffe0 	bl	8001288 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	f043 0204 	orr.w	r2, r3, #4
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff fac2 	bl	8002880 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a70      	ldr	r2, [pc, #448]	; (80034d4 <ADC_ConfigureBoostMode+0x1d0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <ADC_ConfigureBoostMode+0x1c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6f      	ldr	r2, [pc, #444]	; (80034d8 <ADC_ConfigureBoostMode+0x1d4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d109      	bne.n	8003334 <ADC_ConfigureBoostMode+0x30>
 8003320:	4b6e      	ldr	r3, [pc, #440]	; (80034dc <ADC_ConfigureBoostMode+0x1d8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e008      	b.n	8003346 <ADC_ConfigureBoostMode+0x42>
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <ADC_ConfigureBoostMode+0x1dc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01a      	beq.n	8003380 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800334a:	f006 fb1b 	bl	8009984 <HAL_RCC_GetHCLKFreq>
 800334e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003358:	d006      	beq.n	8003368 <ADC_ConfigureBoostMode+0x64>
 800335a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800335e:	d00b      	beq.n	8003378 <ADC_ConfigureBoostMode+0x74>
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003364:	d000      	beq.n	8003368 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003366:	e05d      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	60fb      	str	r3, [r7, #12]
        break;
 8003376:	e055      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	60fb      	str	r3, [r7, #12]
        break;
 800337e:	e051      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003380:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003384:	f007 fa38 	bl	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003388:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003392:	d02a      	beq.n	80033ea <ADC_ConfigureBoostMode+0xe6>
 8003394:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003398:	d813      	bhi.n	80033c2 <ADC_ConfigureBoostMode+0xbe>
 800339a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800339e:	d024      	beq.n	80033ea <ADC_ConfigureBoostMode+0xe6>
 80033a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033a4:	d806      	bhi.n	80033b4 <ADC_ConfigureBoostMode+0xb0>
 80033a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033aa:	d01e      	beq.n	80033ea <ADC_ConfigureBoostMode+0xe6>
 80033ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033b0:	d01b      	beq.n	80033ea <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80033b2:	e037      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80033b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b8:	d017      	beq.n	80033ea <ADC_ConfigureBoostMode+0xe6>
 80033ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80033be:	d014      	beq.n	80033ea <ADC_ConfigureBoostMode+0xe6>
        break;
 80033c0:	e030      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80033c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80033c6:	d021      	beq.n	800340c <ADC_ConfigureBoostMode+0x108>
 80033c8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80033cc:	d806      	bhi.n	80033dc <ADC_ConfigureBoostMode+0xd8>
 80033ce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80033d2:	d013      	beq.n	80033fc <ADC_ConfigureBoostMode+0xf8>
 80033d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033d8:	d014      	beq.n	8003404 <ADC_ConfigureBoostMode+0x100>
        break;
 80033da:	e023      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80033dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80033e0:	d018      	beq.n	8003414 <ADC_ConfigureBoostMode+0x110>
 80033e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80033e6:	d019      	beq.n	800341c <ADC_ConfigureBoostMode+0x118>
        break;
 80033e8:	e01c      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	0c9b      	lsrs	r3, r3, #18
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	60fb      	str	r3, [r7, #12]
        break;
 80033fa:	e013      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	60fb      	str	r3, [r7, #12]
      break;
 8003402:	e00f      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	60fb      	str	r3, [r7, #12]
        break;
 800340a:	e00b      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	099b      	lsrs	r3, r3, #6
 8003410:	60fb      	str	r3, [r7, #12]
        break;
 8003412:	e007      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	09db      	lsrs	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
        break;
 800341a:	e003      	b.n	8003424 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	60fb      	str	r3, [r7, #12]
        break;
 8003422:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003424:	f7fe fbfc 	bl	8001c20 <HAL_GetREVID>
 8003428:	4602      	mov	r2, r0
 800342a:	f241 0303 	movw	r3, #4099	; 0x1003
 800342e:	429a      	cmp	r2, r3
 8003430:	d815      	bhi.n	800345e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a2b      	ldr	r2, [pc, #172]	; (80034e4 <ADC_ConfigureBoostMode+0x1e0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d908      	bls.n	800344c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003448:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800344a:	e03e      	b.n	80034ca <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	e035      	b.n	80034ca <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <ADC_ConfigureBoostMode+0x1e4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d808      	bhi.n	800347e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800347a:	609a      	str	r2, [r3, #8]
}
 800347c:	e025      	b.n	80034ca <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <ADC_ConfigureBoostMode+0x1e8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d80a      	bhi.n	800349c <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003498:	609a      	str	r2, [r3, #8]
}
 800349a:	e016      	b.n	80034ca <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <ADC_ConfigureBoostMode+0x1ec>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d80a      	bhi.n	80034ba <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b6:	609a      	str	r2, [r3, #8]
}
 80034b8:	e007      	b.n	80034ca <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80034c8:	609a      	str	r2, [r3, #8]
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40022100 	.word	0x40022100
 80034dc:	40022300 	.word	0x40022300
 80034e0:	58026300 	.word	0x58026300
 80034e4:	01312d00 	.word	0x01312d00
 80034e8:	005f5e10 	.word	0x005f5e10
 80034ec:	00bebc20 	.word	0x00bebc20
 80034f0:	017d7840 	.word	0x017d7840

080034f4 <__NVIC_SetPriorityGrouping>:
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <__NVIC_SetPriorityGrouping+0x40>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003510:	4013      	ands	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 800351e:	4313      	orrs	r3, r2
 8003520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <__NVIC_SetPriorityGrouping+0x40>)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	60d3      	str	r3, [r2, #12]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00
 8003538:	05fa0000 	.word	0x05fa0000

0800353c <__NVIC_GetPriorityGrouping>:
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <__NVIC_GetPriorityGrouping+0x18>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 0307 	and.w	r3, r3, #7
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_EnableIRQ>:
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003566:	2b00      	cmp	r3, #0
 8003568:	db0b      	blt.n	8003582 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	4907      	ldr	r1, [pc, #28]	; (8003590 <__NVIC_EnableIRQ+0x38>)
 8003572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2001      	movs	r0, #1
 800357a:	fa00 f202 	lsl.w	r2, r0, r2
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000e100 	.word	0xe000e100

08003594 <__NVIC_SetPriority>:
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	6039      	str	r1, [r7, #0]
 800359e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	db0a      	blt.n	80035be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	490c      	ldr	r1, [pc, #48]	; (80035e0 <__NVIC_SetPriority+0x4c>)
 80035ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035b2:	0112      	lsls	r2, r2, #4
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	440b      	add	r3, r1
 80035b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035bc:	e00a      	b.n	80035d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4908      	ldr	r1, [pc, #32]	; (80035e4 <__NVIC_SetPriority+0x50>)
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	3b04      	subs	r3, #4
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	440b      	add	r3, r1
 80035d2:	761a      	strb	r2, [r3, #24]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000e100 	.word	0xe000e100
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <NVIC_EncodePriority>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	; 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f1c3 0307 	rsb	r3, r3, #7
 8003602:	2b04      	cmp	r3, #4
 8003604:	bf28      	it	cs
 8003606:	2304      	movcs	r3, #4
 8003608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3304      	adds	r3, #4
 800360e:	2b06      	cmp	r3, #6
 8003610:	d902      	bls.n	8003618 <NVIC_EncodePriority+0x30>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3b03      	subs	r3, #3
 8003616:	e000      	b.n	800361a <NVIC_EncodePriority+0x32>
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	f04f 32ff 	mov.w	r2, #4294967295
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	401a      	ands	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003630:	f04f 31ff 	mov.w	r1, #4294967295
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	43d9      	mvns	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003640:	4313      	orrs	r3, r2
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	; 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003660:	d301      	bcc.n	8003666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003662:	2301      	movs	r3, #1
 8003664:	e00f      	b.n	8003686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <SysTick_Config+0x40>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366e:	210f      	movs	r1, #15
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	f7ff ff8e 	bl	8003594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <SysTick_Config+0x40>)
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367e:	4b04      	ldr	r3, [pc, #16]	; (8003690 <SysTick_Config+0x40>)
 8003680:	2207      	movs	r2, #7
 8003682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	e000e010 	.word	0xe000e010

08003694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff29 	bl	80034f4 <__NVIC_SetPriorityGrouping>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036b8:	f7ff ff40 	bl	800353c <__NVIC_GetPriorityGrouping>
 80036bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7ff ff90 	bl	80035e8 <NVIC_EncodePriority>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff5f 	bl	8003594 <__NVIC_SetPriority>
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff33 	bl	8003558 <__NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ffa4 	bl	8003650 <SysTick_Config>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800371c:	f7fe fa52 	bl	8001bc4 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e316      	b.n	8003d5a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a66      	ldr	r2, [pc, #408]	; (80038cc <HAL_DMA_Init+0x1b8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d04a      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a65      	ldr	r2, [pc, #404]	; (80038d0 <HAL_DMA_Init+0x1bc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d045      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a63      	ldr	r2, [pc, #396]	; (80038d4 <HAL_DMA_Init+0x1c0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d040      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a62      	ldr	r2, [pc, #392]	; (80038d8 <HAL_DMA_Init+0x1c4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d03b      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a60      	ldr	r2, [pc, #384]	; (80038dc <HAL_DMA_Init+0x1c8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d036      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5f      	ldr	r2, [pc, #380]	; (80038e0 <HAL_DMA_Init+0x1cc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d031      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a5d      	ldr	r2, [pc, #372]	; (80038e4 <HAL_DMA_Init+0x1d0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d02c      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a5c      	ldr	r2, [pc, #368]	; (80038e8 <HAL_DMA_Init+0x1d4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d027      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a5a      	ldr	r2, [pc, #360]	; (80038ec <HAL_DMA_Init+0x1d8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d022      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a59      	ldr	r2, [pc, #356]	; (80038f0 <HAL_DMA_Init+0x1dc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d01d      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a57      	ldr	r2, [pc, #348]	; (80038f4 <HAL_DMA_Init+0x1e0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d018      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a56      	ldr	r2, [pc, #344]	; (80038f8 <HAL_DMA_Init+0x1e4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d013      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a54      	ldr	r2, [pc, #336]	; (80038fc <HAL_DMA_Init+0x1e8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00e      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a53      	ldr	r2, [pc, #332]	; (8003900 <HAL_DMA_Init+0x1ec>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d009      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a51      	ldr	r2, [pc, #324]	; (8003904 <HAL_DMA_Init+0x1f0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_DMA_Init+0xb8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a50      	ldr	r2, [pc, #320]	; (8003908 <HAL_DMA_Init+0x1f4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_DMA_Init+0xbc>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_DMA_Init+0xbe>
 80037d0:	2300      	movs	r3, #0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 813b 	beq.w	8003a4e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a37      	ldr	r2, [pc, #220]	; (80038cc <HAL_DMA_Init+0x1b8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d04a      	beq.n	8003888 <HAL_DMA_Init+0x174>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a36      	ldr	r2, [pc, #216]	; (80038d0 <HAL_DMA_Init+0x1bc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d045      	beq.n	8003888 <HAL_DMA_Init+0x174>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <HAL_DMA_Init+0x1c0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d040      	beq.n	8003888 <HAL_DMA_Init+0x174>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a33      	ldr	r2, [pc, #204]	; (80038d8 <HAL_DMA_Init+0x1c4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d03b      	beq.n	8003888 <HAL_DMA_Init+0x174>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a31      	ldr	r2, [pc, #196]	; (80038dc <HAL_DMA_Init+0x1c8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d036      	beq.n	8003888 <HAL_DMA_Init+0x174>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a30      	ldr	r2, [pc, #192]	; (80038e0 <HAL_DMA_Init+0x1cc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d031      	beq.n	8003888 <HAL_DMA_Init+0x174>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a2e      	ldr	r2, [pc, #184]	; (80038e4 <HAL_DMA_Init+0x1d0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d02c      	beq.n	8003888 <HAL_DMA_Init+0x174>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <HAL_DMA_Init+0x1d4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d027      	beq.n	8003888 <HAL_DMA_Init+0x174>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2b      	ldr	r2, [pc, #172]	; (80038ec <HAL_DMA_Init+0x1d8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d022      	beq.n	8003888 <HAL_DMA_Init+0x174>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2a      	ldr	r2, [pc, #168]	; (80038f0 <HAL_DMA_Init+0x1dc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d01d      	beq.n	8003888 <HAL_DMA_Init+0x174>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a28      	ldr	r2, [pc, #160]	; (80038f4 <HAL_DMA_Init+0x1e0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d018      	beq.n	8003888 <HAL_DMA_Init+0x174>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a27      	ldr	r2, [pc, #156]	; (80038f8 <HAL_DMA_Init+0x1e4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <HAL_DMA_Init+0x174>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a25      	ldr	r2, [pc, #148]	; (80038fc <HAL_DMA_Init+0x1e8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00e      	beq.n	8003888 <HAL_DMA_Init+0x174>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a24      	ldr	r2, [pc, #144]	; (8003900 <HAL_DMA_Init+0x1ec>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d009      	beq.n	8003888 <HAL_DMA_Init+0x174>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <HAL_DMA_Init+0x1f0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d004      	beq.n	8003888 <HAL_DMA_Init+0x174>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a21      	ldr	r2, [pc, #132]	; (8003908 <HAL_DMA_Init+0x1f4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d108      	bne.n	800389a <HAL_DMA_Init+0x186>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e007      	b.n	80038aa <HAL_DMA_Init+0x196>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038aa:	e02f      	b.n	800390c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ac:	f7fe f98a 	bl	8001bc4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b05      	cmp	r3, #5
 80038b8:	d928      	bls.n	800390c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2203      	movs	r2, #3
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e246      	b.n	8003d5a <HAL_DMA_Init+0x646>
 80038cc:	40020010 	.word	0x40020010
 80038d0:	40020028 	.word	0x40020028
 80038d4:	40020040 	.word	0x40020040
 80038d8:	40020058 	.word	0x40020058
 80038dc:	40020070 	.word	0x40020070
 80038e0:	40020088 	.word	0x40020088
 80038e4:	400200a0 	.word	0x400200a0
 80038e8:	400200b8 	.word	0x400200b8
 80038ec:	40020410 	.word	0x40020410
 80038f0:	40020428 	.word	0x40020428
 80038f4:	40020440 	.word	0x40020440
 80038f8:	40020458 	.word	0x40020458
 80038fc:	40020470 	.word	0x40020470
 8003900:	40020488 	.word	0x40020488
 8003904:	400204a0 	.word	0x400204a0
 8003908:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1c8      	bne.n	80038ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4b83      	ldr	r3, [pc, #524]	; (8003b34 <HAL_DMA_Init+0x420>)
 8003926:	4013      	ands	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003932:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800393e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	2b04      	cmp	r3, #4
 800395e:	d107      	bne.n	8003970 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	4313      	orrs	r3, r2
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003970:	4b71      	ldr	r3, [pc, #452]	; (8003b38 <HAL_DMA_Init+0x424>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b71      	ldr	r3, [pc, #452]	; (8003b3c <HAL_DMA_Init+0x428>)
 8003976:	4013      	ands	r3, r2
 8003978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800397c:	d328      	bcc.n	80039d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b28      	cmp	r3, #40	; 0x28
 8003984:	d903      	bls.n	800398e <HAL_DMA_Init+0x27a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b2e      	cmp	r3, #46	; 0x2e
 800398c:	d917      	bls.n	80039be <HAL_DMA_Init+0x2aa>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b3e      	cmp	r3, #62	; 0x3e
 8003994:	d903      	bls.n	800399e <HAL_DMA_Init+0x28a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b42      	cmp	r3, #66	; 0x42
 800399c:	d90f      	bls.n	80039be <HAL_DMA_Init+0x2aa>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b46      	cmp	r3, #70	; 0x46
 80039a4:	d903      	bls.n	80039ae <HAL_DMA_Init+0x29a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b48      	cmp	r3, #72	; 0x48
 80039ac:	d907      	bls.n	80039be <HAL_DMA_Init+0x2aa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b4e      	cmp	r3, #78	; 0x4e
 80039b4:	d905      	bls.n	80039c2 <HAL_DMA_Init+0x2ae>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b52      	cmp	r3, #82	; 0x52
 80039bc:	d801      	bhi.n	80039c2 <HAL_DMA_Init+0x2ae>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_DMA_Init+0x2b0>
 80039c2:	2300      	movs	r3, #0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f023 0307 	bic.w	r3, r3, #7
 80039e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d117      	bne.n	8003a2a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00e      	beq.n	8003a2a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f002 f833 	bl	8005a78 <DMA_CheckFifoParam>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2240      	movs	r2, #64	; 0x40
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e197      	b.n	8003d5a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f001 ff6e 	bl	8005914 <DMA_CalcBaseAndBitshift>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	223f      	movs	r2, #63	; 0x3f
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	e0cd      	b.n	8003bea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <HAL_DMA_Init+0x42c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_Init+0x38a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a39      	ldr	r2, [pc, #228]	; (8003b44 <HAL_DMA_Init+0x430>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <HAL_DMA_Init+0x38a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <HAL_DMA_Init+0x434>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_DMA_Init+0x38a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a36      	ldr	r2, [pc, #216]	; (8003b4c <HAL_DMA_Init+0x438>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_DMA_Init+0x38a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <HAL_DMA_Init+0x43c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_DMA_Init+0x38a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a33      	ldr	r2, [pc, #204]	; (8003b54 <HAL_DMA_Init+0x440>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_DMA_Init+0x38a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a32      	ldr	r2, [pc, #200]	; (8003b58 <HAL_DMA_Init+0x444>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_DMA_Init+0x38a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a30      	ldr	r2, [pc, #192]	; (8003b5c <HAL_DMA_Init+0x448>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_DMA_Init+0x38e>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_DMA_Init+0x390>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8097 	beq.w	8003bd8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <HAL_DMA_Init+0x42c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d021      	beq.n	8003af8 <HAL_DMA_Init+0x3e4>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <HAL_DMA_Init+0x430>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01c      	beq.n	8003af8 <HAL_DMA_Init+0x3e4>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <HAL_DMA_Init+0x434>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d017      	beq.n	8003af8 <HAL_DMA_Init+0x3e4>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1f      	ldr	r2, [pc, #124]	; (8003b4c <HAL_DMA_Init+0x438>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d012      	beq.n	8003af8 <HAL_DMA_Init+0x3e4>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <HAL_DMA_Init+0x43c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00d      	beq.n	8003af8 <HAL_DMA_Init+0x3e4>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1c      	ldr	r2, [pc, #112]	; (8003b54 <HAL_DMA_Init+0x440>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d008      	beq.n	8003af8 <HAL_DMA_Init+0x3e4>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <HAL_DMA_Init+0x444>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <HAL_DMA_Init+0x3e4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <HAL_DMA_Init+0x448>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_DMA_Init+0x44c>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d020      	beq.n	8003b64 <HAL_DMA_Init+0x450>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	d102      	bne.n	8003b30 <HAL_DMA_Init+0x41c>
 8003b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b2e:	e01a      	b.n	8003b66 <HAL_DMA_Init+0x452>
 8003b30:	2300      	movs	r3, #0
 8003b32:	e018      	b.n	8003b66 <HAL_DMA_Init+0x452>
 8003b34:	fe10803f 	.word	0xfe10803f
 8003b38:	5c001000 	.word	0x5c001000
 8003b3c:	ffff0000 	.word	0xffff0000
 8003b40:	58025408 	.word	0x58025408
 8003b44:	5802541c 	.word	0x5802541c
 8003b48:	58025430 	.word	0x58025430
 8003b4c:	58025444 	.word	0x58025444
 8003b50:	58025458 	.word	0x58025458
 8003b54:	5802546c 	.word	0x5802546c
 8003b58:	58025480 	.word	0x58025480
 8003b5c:	58025494 	.word	0x58025494
 8003b60:	fffe000f 	.word	0xfffe000f
 8003b64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68d2      	ldr	r2, [r2, #12]
 8003b6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b6e      	ldr	r3, [pc, #440]	; (8003d64 <HAL_DMA_Init+0x650>)
 8003bac:	4413      	add	r3, r2
 8003bae:	4a6e      	ldr	r2, [pc, #440]	; (8003d68 <HAL_DMA_Init+0x654>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	009a      	lsls	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f001 fea9 	bl	8005914 <DMA_CalcBaseAndBitshift>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2201      	movs	r2, #1
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	e008      	b.n	8003bea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2240      	movs	r2, #64	; 0x40
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2203      	movs	r2, #3
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0b7      	b.n	8003d5a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5f      	ldr	r2, [pc, #380]	; (8003d6c <HAL_DMA_Init+0x658>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d072      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a5d      	ldr	r2, [pc, #372]	; (8003d70 <HAL_DMA_Init+0x65c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d06d      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <HAL_DMA_Init+0x660>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d068      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a5a      	ldr	r2, [pc, #360]	; (8003d78 <HAL_DMA_Init+0x664>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d063      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a59      	ldr	r2, [pc, #356]	; (8003d7c <HAL_DMA_Init+0x668>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d05e      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a57      	ldr	r2, [pc, #348]	; (8003d80 <HAL_DMA_Init+0x66c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d059      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a56      	ldr	r2, [pc, #344]	; (8003d84 <HAL_DMA_Init+0x670>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d054      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a54      	ldr	r2, [pc, #336]	; (8003d88 <HAL_DMA_Init+0x674>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d04f      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a53      	ldr	r2, [pc, #332]	; (8003d8c <HAL_DMA_Init+0x678>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d04a      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a51      	ldr	r2, [pc, #324]	; (8003d90 <HAL_DMA_Init+0x67c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d045      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a50      	ldr	r2, [pc, #320]	; (8003d94 <HAL_DMA_Init+0x680>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d040      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a4e      	ldr	r2, [pc, #312]	; (8003d98 <HAL_DMA_Init+0x684>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d03b      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a4d      	ldr	r2, [pc, #308]	; (8003d9c <HAL_DMA_Init+0x688>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d036      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <HAL_DMA_Init+0x68c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d031      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a4a      	ldr	r2, [pc, #296]	; (8003da4 <HAL_DMA_Init+0x690>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d02c      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a48      	ldr	r2, [pc, #288]	; (8003da8 <HAL_DMA_Init+0x694>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d027      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a47      	ldr	r2, [pc, #284]	; (8003dac <HAL_DMA_Init+0x698>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a45      	ldr	r2, [pc, #276]	; (8003db0 <HAL_DMA_Init+0x69c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01d      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a44      	ldr	r2, [pc, #272]	; (8003db4 <HAL_DMA_Init+0x6a0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d018      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a42      	ldr	r2, [pc, #264]	; (8003db8 <HAL_DMA_Init+0x6a4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a41      	ldr	r2, [pc, #260]	; (8003dbc <HAL_DMA_Init+0x6a8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a3f      	ldr	r2, [pc, #252]	; (8003dc0 <HAL_DMA_Init+0x6ac>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3e      	ldr	r2, [pc, #248]	; (8003dc4 <HAL_DMA_Init+0x6b0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_DMA_Init+0x5c6>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3c      	ldr	r2, [pc, #240]	; (8003dc8 <HAL_DMA_Init+0x6b4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_DMA_Init+0x5ca>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_DMA_Init+0x5cc>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d032      	beq.n	8003d4a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f001 ff43 	bl	8005b70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b80      	cmp	r3, #128	; 0x80
 8003cf0:	d102      	bne.n	8003cf8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d0c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d010      	beq.n	8003d38 <HAL_DMA_Init+0x624>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d80c      	bhi.n	8003d38 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f001 ffc0 	bl	8005ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	e008      	b.n	8003d4a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	a7fdabf8 	.word	0xa7fdabf8
 8003d68:	cccccccd 	.word	0xcccccccd
 8003d6c:	40020010 	.word	0x40020010
 8003d70:	40020028 	.word	0x40020028
 8003d74:	40020040 	.word	0x40020040
 8003d78:	40020058 	.word	0x40020058
 8003d7c:	40020070 	.word	0x40020070
 8003d80:	40020088 	.word	0x40020088
 8003d84:	400200a0 	.word	0x400200a0
 8003d88:	400200b8 	.word	0x400200b8
 8003d8c:	40020410 	.word	0x40020410
 8003d90:	40020428 	.word	0x40020428
 8003d94:	40020440 	.word	0x40020440
 8003d98:	40020458 	.word	0x40020458
 8003d9c:	40020470 	.word	0x40020470
 8003da0:	40020488 	.word	0x40020488
 8003da4:	400204a0 	.word	0x400204a0
 8003da8:	400204b8 	.word	0x400204b8
 8003dac:	58025408 	.word	0x58025408
 8003db0:	5802541c 	.word	0x5802541c
 8003db4:	58025430 	.word	0x58025430
 8003db8:	58025444 	.word	0x58025444
 8003dbc:	58025458 	.word	0x58025458
 8003dc0:	5802546c 	.word	0x5802546c
 8003dc4:	58025480 	.word	0x58025480
 8003dc8:	58025494 	.word	0x58025494

08003dcc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e225      	b.n	800422a <HAL_DMA_DeInit+0x45e>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a82      	ldr	r2, [pc, #520]	; (8003fec <HAL_DMA_DeInit+0x220>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d04a      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a80      	ldr	r2, [pc, #512]	; (8003ff0 <HAL_DMA_DeInit+0x224>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d045      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a7f      	ldr	r2, [pc, #508]	; (8003ff4 <HAL_DMA_DeInit+0x228>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d040      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a7d      	ldr	r2, [pc, #500]	; (8003ff8 <HAL_DMA_DeInit+0x22c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d03b      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a7c      	ldr	r2, [pc, #496]	; (8003ffc <HAL_DMA_DeInit+0x230>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d036      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a7a      	ldr	r2, [pc, #488]	; (8004000 <HAL_DMA_DeInit+0x234>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d031      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a79      	ldr	r2, [pc, #484]	; (8004004 <HAL_DMA_DeInit+0x238>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d02c      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a77      	ldr	r2, [pc, #476]	; (8004008 <HAL_DMA_DeInit+0x23c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d027      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a76      	ldr	r2, [pc, #472]	; (800400c <HAL_DMA_DeInit+0x240>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d022      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a74      	ldr	r2, [pc, #464]	; (8004010 <HAL_DMA_DeInit+0x244>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01d      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a73      	ldr	r2, [pc, #460]	; (8004014 <HAL_DMA_DeInit+0x248>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d018      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a71      	ldr	r2, [pc, #452]	; (8004018 <HAL_DMA_DeInit+0x24c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a70      	ldr	r2, [pc, #448]	; (800401c <HAL_DMA_DeInit+0x250>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00e      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a6e      	ldr	r2, [pc, #440]	; (8004020 <HAL_DMA_DeInit+0x254>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6d      	ldr	r2, [pc, #436]	; (8004024 <HAL_DMA_DeInit+0x258>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_DMA_DeInit+0xb2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6b      	ldr	r2, [pc, #428]	; (8004028 <HAL_DMA_DeInit+0x25c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d108      	bne.n	8003e90 <HAL_DMA_DeInit+0xc4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e007      	b.n	8003ea0 <HAL_DMA_DeInit+0xd4>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a51      	ldr	r2, [pc, #324]	; (8003fec <HAL_DMA_DeInit+0x220>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d04a      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a50      	ldr	r2, [pc, #320]	; (8003ff0 <HAL_DMA_DeInit+0x224>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d045      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a4e      	ldr	r2, [pc, #312]	; (8003ff4 <HAL_DMA_DeInit+0x228>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d040      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a4d      	ldr	r2, [pc, #308]	; (8003ff8 <HAL_DMA_DeInit+0x22c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d03b      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a4b      	ldr	r2, [pc, #300]	; (8003ffc <HAL_DMA_DeInit+0x230>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d036      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a4a      	ldr	r2, [pc, #296]	; (8004000 <HAL_DMA_DeInit+0x234>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d031      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a48      	ldr	r2, [pc, #288]	; (8004004 <HAL_DMA_DeInit+0x238>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d02c      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a47      	ldr	r2, [pc, #284]	; (8004008 <HAL_DMA_DeInit+0x23c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d027      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a45      	ldr	r2, [pc, #276]	; (800400c <HAL_DMA_DeInit+0x240>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d022      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a44      	ldr	r2, [pc, #272]	; (8004010 <HAL_DMA_DeInit+0x244>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d01d      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a42      	ldr	r2, [pc, #264]	; (8004014 <HAL_DMA_DeInit+0x248>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d018      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a41      	ldr	r2, [pc, #260]	; (8004018 <HAL_DMA_DeInit+0x24c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a3f      	ldr	r2, [pc, #252]	; (800401c <HAL_DMA_DeInit+0x250>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00e      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a3e      	ldr	r2, [pc, #248]	; (8004020 <HAL_DMA_DeInit+0x254>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a3c      	ldr	r2, [pc, #240]	; (8004024 <HAL_DMA_DeInit+0x258>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_DMA_DeInit+0x174>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a3b      	ldr	r2, [pc, #236]	; (8004028 <HAL_DMA_DeInit+0x25c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_DMA_DeInit+0x178>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_DMA_DeInit+0x17a>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d025      	beq.n	8003f96 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2200      	movs	r2, #0
 8003f58:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2221      	movs	r2, #33	; 0x21
 8003f78:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 fcca 	bl	8005914 <DMA_CalcBaseAndBitshift>
 8003f80:	4603      	mov	r3, r0
 8003f82:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	223f      	movs	r2, #63	; 0x3f
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	e081      	b.n	800409a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a24      	ldr	r2, [pc, #144]	; (800402c <HAL_DMA_DeInit+0x260>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d022      	beq.n	8003fe6 <HAL_DMA_DeInit+0x21a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_DMA_DeInit+0x264>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01d      	beq.n	8003fe6 <HAL_DMA_DeInit+0x21a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a21      	ldr	r2, [pc, #132]	; (8004034 <HAL_DMA_DeInit+0x268>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d018      	beq.n	8003fe6 <HAL_DMA_DeInit+0x21a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_DMA_DeInit+0x26c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_DMA_DeInit+0x21a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	; (800403c <HAL_DMA_DeInit+0x270>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_DMA_DeInit+0x21a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_DMA_DeInit+0x274>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_DMA_DeInit+0x21a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <HAL_DMA_DeInit+0x278>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_DMA_DeInit+0x21a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_DMA_DeInit+0x27c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d132      	bne.n	800404c <HAL_DMA_DeInit+0x280>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e031      	b.n	800404e <HAL_DMA_DeInit+0x282>
 8003fea:	bf00      	nop
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	58025408 	.word	0x58025408
 8004030:	5802541c 	.word	0x5802541c
 8004034:	58025430 	.word	0x58025430
 8004038:	58025444 	.word	0x58025444
 800403c:	58025458 	.word	0x58025458
 8004040:	5802546c 	.word	0x5802546c
 8004044:	58025480 	.word	0x58025480
 8004048:	58025494 	.word	0x58025494
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d021      	beq.n	8004096 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2200      	movs	r2, #0
 8004060:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f001 fc4a 	bl	8005914 <DMA_CalcBaseAndBitshift>
 8004080:	4603      	mov	r3, r0
 8004082:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	e001      	b.n	800409a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0c7      	b.n	800422a <HAL_DMA_DeInit+0x45e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a65      	ldr	r2, [pc, #404]	; (8004234 <HAL_DMA_DeInit+0x468>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d072      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a63      	ldr	r2, [pc, #396]	; (8004238 <HAL_DMA_DeInit+0x46c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d06d      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a62      	ldr	r2, [pc, #392]	; (800423c <HAL_DMA_DeInit+0x470>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d068      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a60      	ldr	r2, [pc, #384]	; (8004240 <HAL_DMA_DeInit+0x474>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d063      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a5f      	ldr	r2, [pc, #380]	; (8004244 <HAL_DMA_DeInit+0x478>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d05e      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a5d      	ldr	r2, [pc, #372]	; (8004248 <HAL_DMA_DeInit+0x47c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d059      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a5c      	ldr	r2, [pc, #368]	; (800424c <HAL_DMA_DeInit+0x480>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d054      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a5a      	ldr	r2, [pc, #360]	; (8004250 <HAL_DMA_DeInit+0x484>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d04f      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a59      	ldr	r2, [pc, #356]	; (8004254 <HAL_DMA_DeInit+0x488>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d04a      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a57      	ldr	r2, [pc, #348]	; (8004258 <HAL_DMA_DeInit+0x48c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d045      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a56      	ldr	r2, [pc, #344]	; (800425c <HAL_DMA_DeInit+0x490>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d040      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a54      	ldr	r2, [pc, #336]	; (8004260 <HAL_DMA_DeInit+0x494>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d03b      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a53      	ldr	r2, [pc, #332]	; (8004264 <HAL_DMA_DeInit+0x498>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d036      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a51      	ldr	r2, [pc, #324]	; (8004268 <HAL_DMA_DeInit+0x49c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d031      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a50      	ldr	r2, [pc, #320]	; (800426c <HAL_DMA_DeInit+0x4a0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d02c      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a4e      	ldr	r2, [pc, #312]	; (8004270 <HAL_DMA_DeInit+0x4a4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d027      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a4d      	ldr	r2, [pc, #308]	; (8004274 <HAL_DMA_DeInit+0x4a8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a4b      	ldr	r2, [pc, #300]	; (8004278 <HAL_DMA_DeInit+0x4ac>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a4a      	ldr	r2, [pc, #296]	; (800427c <HAL_DMA_DeInit+0x4b0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a48      	ldr	r2, [pc, #288]	; (8004280 <HAL_DMA_DeInit+0x4b4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a47      	ldr	r2, [pc, #284]	; (8004284 <HAL_DMA_DeInit+0x4b8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a45      	ldr	r2, [pc, #276]	; (8004288 <HAL_DMA_DeInit+0x4bc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a44      	ldr	r2, [pc, #272]	; (800428c <HAL_DMA_DeInit+0x4c0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <HAL_DMA_DeInit+0x3be>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a42      	ldr	r2, [pc, #264]	; (8004290 <HAL_DMA_DeInit+0x4c4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <HAL_DMA_DeInit+0x3c2>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_DMA_DeInit+0x3c4>
 800418e:	2300      	movs	r3, #0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02c      	beq.n	80041ee <HAL_DMA_DeInit+0x422>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f001 fceb 	bl	8005b70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_DMA_DeInit+0x3e8>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041b2:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00f      	beq.n	80041dc <HAL_DMA_DeInit+0x410>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d80b      	bhi.n	80041dc <HAL_DMA_DeInit+0x410>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f001 fd6d 	bl	8005ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80041da:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40020010 	.word	0x40020010
 8004238:	40020028 	.word	0x40020028
 800423c:	40020040 	.word	0x40020040
 8004240:	40020058 	.word	0x40020058
 8004244:	40020070 	.word	0x40020070
 8004248:	40020088 	.word	0x40020088
 800424c:	400200a0 	.word	0x400200a0
 8004250:	400200b8 	.word	0x400200b8
 8004254:	40020410 	.word	0x40020410
 8004258:	40020428 	.word	0x40020428
 800425c:	40020440 	.word	0x40020440
 8004260:	40020458 	.word	0x40020458
 8004264:	40020470 	.word	0x40020470
 8004268:	40020488 	.word	0x40020488
 800426c:	400204a0 	.word	0x400204a0
 8004270:	400204b8 	.word	0x400204b8
 8004274:	58025408 	.word	0x58025408
 8004278:	5802541c 	.word	0x5802541c
 800427c:	58025430 	.word	0x58025430
 8004280:	58025444 	.word	0x58025444
 8004284:	58025458 	.word	0x58025458
 8004288:	5802546c 	.word	0x5802546c
 800428c:	58025480 	.word	0x58025480
 8004290:	58025494 	.word	0x58025494

08004294 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e226      	b.n	80046fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_DMA_Start_IT+0x2a>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e21f      	b.n	80046fe <HAL_DMA_Start_IT+0x46a>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	f040 820a 	bne.w	80046e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a68      	ldr	r2, [pc, #416]	; (8004488 <HAL_DMA_Start_IT+0x1f4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d04a      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a66      	ldr	r2, [pc, #408]	; (800448c <HAL_DMA_Start_IT+0x1f8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d045      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a65      	ldr	r2, [pc, #404]	; (8004490 <HAL_DMA_Start_IT+0x1fc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d040      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a63      	ldr	r2, [pc, #396]	; (8004494 <HAL_DMA_Start_IT+0x200>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d03b      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a62      	ldr	r2, [pc, #392]	; (8004498 <HAL_DMA_Start_IT+0x204>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d036      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a60      	ldr	r2, [pc, #384]	; (800449c <HAL_DMA_Start_IT+0x208>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d031      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a5f      	ldr	r2, [pc, #380]	; (80044a0 <HAL_DMA_Start_IT+0x20c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d02c      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a5d      	ldr	r2, [pc, #372]	; (80044a4 <HAL_DMA_Start_IT+0x210>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d027      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a5c      	ldr	r2, [pc, #368]	; (80044a8 <HAL_DMA_Start_IT+0x214>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d022      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a5a      	ldr	r2, [pc, #360]	; (80044ac <HAL_DMA_Start_IT+0x218>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01d      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a59      	ldr	r2, [pc, #356]	; (80044b0 <HAL_DMA_Start_IT+0x21c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d018      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a57      	ldr	r2, [pc, #348]	; (80044b4 <HAL_DMA_Start_IT+0x220>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d013      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a56      	ldr	r2, [pc, #344]	; (80044b8 <HAL_DMA_Start_IT+0x224>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00e      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a54      	ldr	r2, [pc, #336]	; (80044bc <HAL_DMA_Start_IT+0x228>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d009      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a53      	ldr	r2, [pc, #332]	; (80044c0 <HAL_DMA_Start_IT+0x22c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_DMA_Start_IT+0xee>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a51      	ldr	r2, [pc, #324]	; (80044c4 <HAL_DMA_Start_IT+0x230>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d108      	bne.n	8004394 <HAL_DMA_Start_IT+0x100>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e007      	b.n	80043a4 <HAL_DMA_Start_IT+0x110>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f001 f906 	bl	80055bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a34      	ldr	r2, [pc, #208]	; (8004488 <HAL_DMA_Start_IT+0x1f4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d04a      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a33      	ldr	r2, [pc, #204]	; (800448c <HAL_DMA_Start_IT+0x1f8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d045      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a31      	ldr	r2, [pc, #196]	; (8004490 <HAL_DMA_Start_IT+0x1fc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d040      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a30      	ldr	r2, [pc, #192]	; (8004494 <HAL_DMA_Start_IT+0x200>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d03b      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2e      	ldr	r2, [pc, #184]	; (8004498 <HAL_DMA_Start_IT+0x204>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d036      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2d      	ldr	r2, [pc, #180]	; (800449c <HAL_DMA_Start_IT+0x208>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d031      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a2b      	ldr	r2, [pc, #172]	; (80044a0 <HAL_DMA_Start_IT+0x20c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d02c      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <HAL_DMA_Start_IT+0x210>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d027      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a28      	ldr	r2, [pc, #160]	; (80044a8 <HAL_DMA_Start_IT+0x214>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d022      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a27      	ldr	r2, [pc, #156]	; (80044ac <HAL_DMA_Start_IT+0x218>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d01d      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <HAL_DMA_Start_IT+0x21c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d018      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a24      	ldr	r2, [pc, #144]	; (80044b4 <HAL_DMA_Start_IT+0x220>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a22      	ldr	r2, [pc, #136]	; (80044b8 <HAL_DMA_Start_IT+0x224>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00e      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a21      	ldr	r2, [pc, #132]	; (80044bc <HAL_DMA_Start_IT+0x228>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <HAL_DMA_Start_IT+0x22c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_DMA_Start_IT+0x1bc>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <HAL_DMA_Start_IT+0x230>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_DMA_Start_IT+0x1c0>
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <HAL_DMA_Start_IT+0x1c2>
 8004454:	2300      	movs	r3, #0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d036      	beq.n	80044c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 021e 	bic.w	r2, r3, #30
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0216 	orr.w	r2, r2, #22
 800446c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d03e      	beq.n	80044f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0208 	orr.w	r2, r2, #8
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e035      	b.n	80044f4 <HAL_DMA_Start_IT+0x260>
 8004488:	40020010 	.word	0x40020010
 800448c:	40020028 	.word	0x40020028
 8004490:	40020040 	.word	0x40020040
 8004494:	40020058 	.word	0x40020058
 8004498:	40020070 	.word	0x40020070
 800449c:	40020088 	.word	0x40020088
 80044a0:	400200a0 	.word	0x400200a0
 80044a4:	400200b8 	.word	0x400200b8
 80044a8:	40020410 	.word	0x40020410
 80044ac:	40020428 	.word	0x40020428
 80044b0:	40020440 	.word	0x40020440
 80044b4:	40020458 	.word	0x40020458
 80044b8:	40020470 	.word	0x40020470
 80044bc:	40020488 	.word	0x40020488
 80044c0:	400204a0 	.word	0x400204a0
 80044c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 020e 	bic.w	r2, r3, #14
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 020a 	orr.w	r2, r2, #10
 80044da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0204 	orr.w	r2, r2, #4
 80044f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a83      	ldr	r2, [pc, #524]	; (8004708 <HAL_DMA_Start_IT+0x474>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d072      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a82      	ldr	r2, [pc, #520]	; (800470c <HAL_DMA_Start_IT+0x478>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d06d      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a80      	ldr	r2, [pc, #512]	; (8004710 <HAL_DMA_Start_IT+0x47c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d068      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a7f      	ldr	r2, [pc, #508]	; (8004714 <HAL_DMA_Start_IT+0x480>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d063      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a7d      	ldr	r2, [pc, #500]	; (8004718 <HAL_DMA_Start_IT+0x484>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d05e      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a7c      	ldr	r2, [pc, #496]	; (800471c <HAL_DMA_Start_IT+0x488>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d059      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a7a      	ldr	r2, [pc, #488]	; (8004720 <HAL_DMA_Start_IT+0x48c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d054      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a79      	ldr	r2, [pc, #484]	; (8004724 <HAL_DMA_Start_IT+0x490>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d04f      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a77      	ldr	r2, [pc, #476]	; (8004728 <HAL_DMA_Start_IT+0x494>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d04a      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a76      	ldr	r2, [pc, #472]	; (800472c <HAL_DMA_Start_IT+0x498>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d045      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a74      	ldr	r2, [pc, #464]	; (8004730 <HAL_DMA_Start_IT+0x49c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d040      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a73      	ldr	r2, [pc, #460]	; (8004734 <HAL_DMA_Start_IT+0x4a0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d03b      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a71      	ldr	r2, [pc, #452]	; (8004738 <HAL_DMA_Start_IT+0x4a4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d036      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a70      	ldr	r2, [pc, #448]	; (800473c <HAL_DMA_Start_IT+0x4a8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d031      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6e      	ldr	r2, [pc, #440]	; (8004740 <HAL_DMA_Start_IT+0x4ac>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d02c      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6d      	ldr	r2, [pc, #436]	; (8004744 <HAL_DMA_Start_IT+0x4b0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d027      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a6b      	ldr	r2, [pc, #428]	; (8004748 <HAL_DMA_Start_IT+0x4b4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d022      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6a      	ldr	r2, [pc, #424]	; (800474c <HAL_DMA_Start_IT+0x4b8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d01d      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a68      	ldr	r2, [pc, #416]	; (8004750 <HAL_DMA_Start_IT+0x4bc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d018      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a67      	ldr	r2, [pc, #412]	; (8004754 <HAL_DMA_Start_IT+0x4c0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d013      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a65      	ldr	r2, [pc, #404]	; (8004758 <HAL_DMA_Start_IT+0x4c4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00e      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a64      	ldr	r2, [pc, #400]	; (800475c <HAL_DMA_Start_IT+0x4c8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d009      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a62      	ldr	r2, [pc, #392]	; (8004760 <HAL_DMA_Start_IT+0x4cc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_DMA_Start_IT+0x350>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a61      	ldr	r2, [pc, #388]	; (8004764 <HAL_DMA_Start_IT+0x4d0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d101      	bne.n	80045e8 <HAL_DMA_Start_IT+0x354>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <HAL_DMA_Start_IT+0x356>
 80045e8:	2300      	movs	r3, #0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01a      	beq.n	8004624 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004622:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a37      	ldr	r2, [pc, #220]	; (8004708 <HAL_DMA_Start_IT+0x474>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d04a      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a36      	ldr	r2, [pc, #216]	; (800470c <HAL_DMA_Start_IT+0x478>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d045      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a34      	ldr	r2, [pc, #208]	; (8004710 <HAL_DMA_Start_IT+0x47c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d040      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a33      	ldr	r2, [pc, #204]	; (8004714 <HAL_DMA_Start_IT+0x480>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d03b      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a31      	ldr	r2, [pc, #196]	; (8004718 <HAL_DMA_Start_IT+0x484>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d036      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a30      	ldr	r2, [pc, #192]	; (800471c <HAL_DMA_Start_IT+0x488>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d031      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a2e      	ldr	r2, [pc, #184]	; (8004720 <HAL_DMA_Start_IT+0x48c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d02c      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2d      	ldr	r2, [pc, #180]	; (8004724 <HAL_DMA_Start_IT+0x490>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d027      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2b      	ldr	r2, [pc, #172]	; (8004728 <HAL_DMA_Start_IT+0x494>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d022      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2a      	ldr	r2, [pc, #168]	; (800472c <HAL_DMA_Start_IT+0x498>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d01d      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a28      	ldr	r2, [pc, #160]	; (8004730 <HAL_DMA_Start_IT+0x49c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d018      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a27      	ldr	r2, [pc, #156]	; (8004734 <HAL_DMA_Start_IT+0x4a0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a25      	ldr	r2, [pc, #148]	; (8004738 <HAL_DMA_Start_IT+0x4a4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00e      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a24      	ldr	r2, [pc, #144]	; (800473c <HAL_DMA_Start_IT+0x4a8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a22      	ldr	r2, [pc, #136]	; (8004740 <HAL_DMA_Start_IT+0x4ac>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d004      	beq.n	80046c4 <HAL_DMA_Start_IT+0x430>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a21      	ldr	r2, [pc, #132]	; (8004744 <HAL_DMA_Start_IT+0x4b0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <HAL_DMA_Start_IT+0x442>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e012      	b.n	80046fc <HAL_DMA_Start_IT+0x468>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0201 	orr.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e009      	b.n	80046fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40020010 	.word	0x40020010
 800470c:	40020028 	.word	0x40020028
 8004710:	40020040 	.word	0x40020040
 8004714:	40020058 	.word	0x40020058
 8004718:	40020070 	.word	0x40020070
 800471c:	40020088 	.word	0x40020088
 8004720:	400200a0 	.word	0x400200a0
 8004724:	400200b8 	.word	0x400200b8
 8004728:	40020410 	.word	0x40020410
 800472c:	40020428 	.word	0x40020428
 8004730:	40020440 	.word	0x40020440
 8004734:	40020458 	.word	0x40020458
 8004738:	40020470 	.word	0x40020470
 800473c:	40020488 	.word	0x40020488
 8004740:	400204a0 	.word	0x400204a0
 8004744:	400204b8 	.word	0x400204b8
 8004748:	58025408 	.word	0x58025408
 800474c:	5802541c 	.word	0x5802541c
 8004750:	58025430 	.word	0x58025430
 8004754:	58025444 	.word	0x58025444
 8004758:	58025458 	.word	0x58025458
 800475c:	5802546c 	.word	0x5802546c
 8004760:	58025480 	.word	0x58025480
 8004764:	58025494 	.word	0x58025494

08004768 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004774:	4b67      	ldr	r3, [pc, #412]	; (8004914 <HAL_DMA_IRQHandler+0x1ac>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a67      	ldr	r2, [pc, #412]	; (8004918 <HAL_DMA_IRQHandler+0x1b0>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0a9b      	lsrs	r3, r3, #10
 8004780:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a5f      	ldr	r2, [pc, #380]	; (800491c <HAL_DMA_IRQHandler+0x1b4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d04a      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5d      	ldr	r2, [pc, #372]	; (8004920 <HAL_DMA_IRQHandler+0x1b8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d045      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a5c      	ldr	r2, [pc, #368]	; (8004924 <HAL_DMA_IRQHandler+0x1bc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d040      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a5a      	ldr	r2, [pc, #360]	; (8004928 <HAL_DMA_IRQHandler+0x1c0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d03b      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a59      	ldr	r2, [pc, #356]	; (800492c <HAL_DMA_IRQHandler+0x1c4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d036      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a57      	ldr	r2, [pc, #348]	; (8004930 <HAL_DMA_IRQHandler+0x1c8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d031      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a56      	ldr	r2, [pc, #344]	; (8004934 <HAL_DMA_IRQHandler+0x1cc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d02c      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a54      	ldr	r2, [pc, #336]	; (8004938 <HAL_DMA_IRQHandler+0x1d0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d027      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a53      	ldr	r2, [pc, #332]	; (800493c <HAL_DMA_IRQHandler+0x1d4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d022      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a51      	ldr	r2, [pc, #324]	; (8004940 <HAL_DMA_IRQHandler+0x1d8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01d      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a50      	ldr	r2, [pc, #320]	; (8004944 <HAL_DMA_IRQHandler+0x1dc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a4e      	ldr	r2, [pc, #312]	; (8004948 <HAL_DMA_IRQHandler+0x1e0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a4d      	ldr	r2, [pc, #308]	; (800494c <HAL_DMA_IRQHandler+0x1e4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a4b      	ldr	r2, [pc, #300]	; (8004950 <HAL_DMA_IRQHandler+0x1e8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a4a      	ldr	r2, [pc, #296]	; (8004954 <HAL_DMA_IRQHandler+0x1ec>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_DMA_IRQHandler+0xd2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a48      	ldr	r2, [pc, #288]	; (8004958 <HAL_DMA_IRQHandler+0x1f0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_DMA_IRQHandler+0xd6>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <HAL_DMA_IRQHandler+0xd8>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 842b 	beq.w	800509c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2208      	movs	r2, #8
 8004850:	409a      	lsls	r2, r3
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80a2 	beq.w	80049a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2e      	ldr	r2, [pc, #184]	; (800491c <HAL_DMA_IRQHandler+0x1b4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d04a      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2d      	ldr	r2, [pc, #180]	; (8004920 <HAL_DMA_IRQHandler+0x1b8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d045      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a2b      	ldr	r2, [pc, #172]	; (8004924 <HAL_DMA_IRQHandler+0x1bc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d040      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <HAL_DMA_IRQHandler+0x1c0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d03b      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a28      	ldr	r2, [pc, #160]	; (800492c <HAL_DMA_IRQHandler+0x1c4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d036      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a27      	ldr	r2, [pc, #156]	; (8004930 <HAL_DMA_IRQHandler+0x1c8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d031      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a25      	ldr	r2, [pc, #148]	; (8004934 <HAL_DMA_IRQHandler+0x1cc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d02c      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a24      	ldr	r2, [pc, #144]	; (8004938 <HAL_DMA_IRQHandler+0x1d0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d027      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a22      	ldr	r2, [pc, #136]	; (800493c <HAL_DMA_IRQHandler+0x1d4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d022      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a21      	ldr	r2, [pc, #132]	; (8004940 <HAL_DMA_IRQHandler+0x1d8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d01d      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1f      	ldr	r2, [pc, #124]	; (8004944 <HAL_DMA_IRQHandler+0x1dc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d018      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <HAL_DMA_IRQHandler+0x1e0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1c      	ldr	r2, [pc, #112]	; (800494c <HAL_DMA_IRQHandler+0x1e4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00e      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <HAL_DMA_IRQHandler+0x1e8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a19      	ldr	r2, [pc, #100]	; (8004954 <HAL_DMA_IRQHandler+0x1ec>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_DMA_IRQHandler+0x194>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <HAL_DMA_IRQHandler+0x1f0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d12f      	bne.n	800495c <HAL_DMA_IRQHandler+0x1f4>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	bf14      	ite	ne
 800490a:	2301      	movne	r3, #1
 800490c:	2300      	moveq	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	e02e      	b.n	8004970 <HAL_DMA_IRQHandler+0x208>
 8004912:	bf00      	nop
 8004914:	2400000c 	.word	0x2400000c
 8004918:	1b4e81b5 	.word	0x1b4e81b5
 800491c:	40020010 	.word	0x40020010
 8004920:	40020028 	.word	0x40020028
 8004924:	40020040 	.word	0x40020040
 8004928:	40020058 	.word	0x40020058
 800492c:	40020070 	.word	0x40020070
 8004930:	40020088 	.word	0x40020088
 8004934:	400200a0 	.word	0x400200a0
 8004938:	400200b8 	.word	0x400200b8
 800493c:	40020410 	.word	0x40020410
 8004940:	40020428 	.word	0x40020428
 8004944:	40020440 	.word	0x40020440
 8004948:	40020458 	.word	0x40020458
 800494c:	40020470 	.word	0x40020470
 8004950:	40020488 	.word	0x40020488
 8004954:	400204a0 	.word	0x400204a0
 8004958:	400204b8 	.word	0x400204b8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d015      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0204 	bic.w	r2, r2, #4
 8004982:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2208      	movs	r2, #8
 800498e:	409a      	lsls	r2, r3
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	f043 0201 	orr.w	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d06e      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a69      	ldr	r2, [pc, #420]	; (8004b60 <HAL_DMA_IRQHandler+0x3f8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d04a      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a67      	ldr	r2, [pc, #412]	; (8004b64 <HAL_DMA_IRQHandler+0x3fc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d045      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a66      	ldr	r2, [pc, #408]	; (8004b68 <HAL_DMA_IRQHandler+0x400>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d040      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a64      	ldr	r2, [pc, #400]	; (8004b6c <HAL_DMA_IRQHandler+0x404>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d03b      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a63      	ldr	r2, [pc, #396]	; (8004b70 <HAL_DMA_IRQHandler+0x408>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d036      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a61      	ldr	r2, [pc, #388]	; (8004b74 <HAL_DMA_IRQHandler+0x40c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d031      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a60      	ldr	r2, [pc, #384]	; (8004b78 <HAL_DMA_IRQHandler+0x410>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d02c      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5e      	ldr	r2, [pc, #376]	; (8004b7c <HAL_DMA_IRQHandler+0x414>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d027      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a5d      	ldr	r2, [pc, #372]	; (8004b80 <HAL_DMA_IRQHandler+0x418>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a5b      	ldr	r2, [pc, #364]	; (8004b84 <HAL_DMA_IRQHandler+0x41c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01d      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a5a      	ldr	r2, [pc, #360]	; (8004b88 <HAL_DMA_IRQHandler+0x420>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a58      	ldr	r2, [pc, #352]	; (8004b8c <HAL_DMA_IRQHandler+0x424>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a57      	ldr	r2, [pc, #348]	; (8004b90 <HAL_DMA_IRQHandler+0x428>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a55      	ldr	r2, [pc, #340]	; (8004b94 <HAL_DMA_IRQHandler+0x42c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a54      	ldr	r2, [pc, #336]	; (8004b98 <HAL_DMA_IRQHandler+0x430>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2ee>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a52      	ldr	r2, [pc, #328]	; (8004b9c <HAL_DMA_IRQHandler+0x434>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d10a      	bne.n	8004a6c <HAL_DMA_IRQHandler+0x304>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf14      	ite	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	2300      	moveq	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	e003      	b.n	8004a74 <HAL_DMA_IRQHandler+0x30c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00d      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2201      	movs	r2, #1
 8004a82:	409a      	lsls	r2, r3
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	f043 0202 	orr.w	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 808f 	beq.w	8004bc8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <HAL_DMA_IRQHandler+0x3f8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d04a      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2a      	ldr	r2, [pc, #168]	; (8004b64 <HAL_DMA_IRQHandler+0x3fc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d045      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a29      	ldr	r2, [pc, #164]	; (8004b68 <HAL_DMA_IRQHandler+0x400>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d040      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a27      	ldr	r2, [pc, #156]	; (8004b6c <HAL_DMA_IRQHandler+0x404>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d03b      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <HAL_DMA_IRQHandler+0x408>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d036      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a24      	ldr	r2, [pc, #144]	; (8004b74 <HAL_DMA_IRQHandler+0x40c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d031      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a23      	ldr	r2, [pc, #140]	; (8004b78 <HAL_DMA_IRQHandler+0x410>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d02c      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a21      	ldr	r2, [pc, #132]	; (8004b7c <HAL_DMA_IRQHandler+0x414>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d027      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <HAL_DMA_IRQHandler+0x418>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d022      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <HAL_DMA_IRQHandler+0x41c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01d      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <HAL_DMA_IRQHandler+0x420>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d018      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <HAL_DMA_IRQHandler+0x424>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <HAL_DMA_IRQHandler+0x428>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00e      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a18      	ldr	r2, [pc, #96]	; (8004b94 <HAL_DMA_IRQHandler+0x42c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d009      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <HAL_DMA_IRQHandler+0x430>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d004      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x3e2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <HAL_DMA_IRQHandler+0x434>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d12a      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x438>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf14      	ite	ne
 8004b58:	2301      	movne	r3, #1
 8004b5a:	2300      	moveq	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e023      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x440>
 8004b60:	40020010 	.word	0x40020010
 8004b64:	40020028 	.word	0x40020028
 8004b68:	40020040 	.word	0x40020040
 8004b6c:	40020058 	.word	0x40020058
 8004b70:	40020070 	.word	0x40020070
 8004b74:	40020088 	.word	0x40020088
 8004b78:	400200a0 	.word	0x400200a0
 8004b7c:	400200b8 	.word	0x400200b8
 8004b80:	40020410 	.word	0x40020410
 8004b84:	40020428 	.word	0x40020428
 8004b88:	40020440 	.word	0x40020440
 8004b8c:	40020458 	.word	0x40020458
 8004b90:	40020470 	.word	0x40020470
 8004b94:	40020488 	.word	0x40020488
 8004b98:	400204a0 	.word	0x400204a0
 8004b9c:	400204b8 	.word	0x400204b8
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00d      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc0:	f043 0204 	orr.w	r2, r3, #4
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80a6 	beq.w	8004d2a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a85      	ldr	r2, [pc, #532]	; (8004df8 <HAL_DMA_IRQHandler+0x690>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d04a      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a83      	ldr	r2, [pc, #524]	; (8004dfc <HAL_DMA_IRQHandler+0x694>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d045      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a82      	ldr	r2, [pc, #520]	; (8004e00 <HAL_DMA_IRQHandler+0x698>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d040      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a80      	ldr	r2, [pc, #512]	; (8004e04 <HAL_DMA_IRQHandler+0x69c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d03b      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a7f      	ldr	r2, [pc, #508]	; (8004e08 <HAL_DMA_IRQHandler+0x6a0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d036      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a7d      	ldr	r2, [pc, #500]	; (8004e0c <HAL_DMA_IRQHandler+0x6a4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d031      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a7c      	ldr	r2, [pc, #496]	; (8004e10 <HAL_DMA_IRQHandler+0x6a8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d02c      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a7a      	ldr	r2, [pc, #488]	; (8004e14 <HAL_DMA_IRQHandler+0x6ac>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d027      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a79      	ldr	r2, [pc, #484]	; (8004e18 <HAL_DMA_IRQHandler+0x6b0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d022      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a77      	ldr	r2, [pc, #476]	; (8004e1c <HAL_DMA_IRQHandler+0x6b4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01d      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a76      	ldr	r2, [pc, #472]	; (8004e20 <HAL_DMA_IRQHandler+0x6b8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d018      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a74      	ldr	r2, [pc, #464]	; (8004e24 <HAL_DMA_IRQHandler+0x6bc>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a73      	ldr	r2, [pc, #460]	; (8004e28 <HAL_DMA_IRQHandler+0x6c0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00e      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a71      	ldr	r2, [pc, #452]	; (8004e2c <HAL_DMA_IRQHandler+0x6c4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d009      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a70      	ldr	r2, [pc, #448]	; (8004e30 <HAL_DMA_IRQHandler+0x6c8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d004      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x516>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a6e      	ldr	r2, [pc, #440]	; (8004e34 <HAL_DMA_IRQHandler+0x6cc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d10a      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x52c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e009      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x540>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	bf14      	ite	ne
 8004ca2:	2301      	movne	r3, #1
 8004ca4:	2300      	moveq	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d03e      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	2210      	movs	r2, #16
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d018      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d108      	bne.n	8004cea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d024      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
 8004ce8:	e01f      	b.n	8004d2a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01b      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
 8004cfa:	e016      	b.n	8004d2a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d107      	bne.n	8004d1a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0208 	bic.w	r2, r2, #8
 8004d18:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2220      	movs	r2, #32
 8004d34:	409a      	lsls	r2, r3
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8110 	beq.w	8004f60 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2c      	ldr	r2, [pc, #176]	; (8004df8 <HAL_DMA_IRQHandler+0x690>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d04a      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2b      	ldr	r2, [pc, #172]	; (8004dfc <HAL_DMA_IRQHandler+0x694>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d045      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a29      	ldr	r2, [pc, #164]	; (8004e00 <HAL_DMA_IRQHandler+0x698>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d040      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a28      	ldr	r2, [pc, #160]	; (8004e04 <HAL_DMA_IRQHandler+0x69c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d03b      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a26      	ldr	r2, [pc, #152]	; (8004e08 <HAL_DMA_IRQHandler+0x6a0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d036      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a25      	ldr	r2, [pc, #148]	; (8004e0c <HAL_DMA_IRQHandler+0x6a4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d031      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a23      	ldr	r2, [pc, #140]	; (8004e10 <HAL_DMA_IRQHandler+0x6a8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d02c      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a22      	ldr	r2, [pc, #136]	; (8004e14 <HAL_DMA_IRQHandler+0x6ac>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d027      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <HAL_DMA_IRQHandler+0x6b0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d022      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <HAL_DMA_IRQHandler+0x6b4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d01d      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <HAL_DMA_IRQHandler+0x6b8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d018      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <HAL_DMA_IRQHandler+0x6bc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d013      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	; (8004e28 <HAL_DMA_IRQHandler+0x6c0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00e      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <HAL_DMA_IRQHandler+0x6c4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d009      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <HAL_DMA_IRQHandler+0x6c8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x678>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <HAL_DMA_IRQHandler+0x6cc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d12b      	bne.n	8004e38 <HAL_DMA_IRQHandler+0x6d0>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e02a      	b.n	8004e4c <HAL_DMA_IRQHandler+0x6e4>
 8004df6:	bf00      	nop
 8004df8:	40020010 	.word	0x40020010
 8004dfc:	40020028 	.word	0x40020028
 8004e00:	40020040 	.word	0x40020040
 8004e04:	40020058 	.word	0x40020058
 8004e08:	40020070 	.word	0x40020070
 8004e0c:	40020088 	.word	0x40020088
 8004e10:	400200a0 	.word	0x400200a0
 8004e14:	400200b8 	.word	0x400200b8
 8004e18:	40020410 	.word	0x40020410
 8004e1c:	40020428 	.word	0x40020428
 8004e20:	40020440 	.word	0x40020440
 8004e24:	40020458 	.word	0x40020458
 8004e28:	40020470 	.word	0x40020470
 8004e2c:	40020488 	.word	0x40020488
 8004e30:	400204a0 	.word	0x400204a0
 8004e34:	400204b8 	.word	0x400204b8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf14      	ite	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	2300      	moveq	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8087 	beq.w	8004f60 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d139      	bne.n	8004ee2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0216 	bic.w	r2, r2, #22
 8004e7c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695a      	ldr	r2, [r3, #20]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e8c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <HAL_DMA_IRQHandler+0x736>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0208 	bic.w	r2, r2, #8
 8004eac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	223f      	movs	r2, #63	; 0x3f
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 834a 	beq.w	800556c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
          }
          return;
 8004ee0:	e344      	b.n	800556c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d018      	beq.n	8004f22 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d108      	bne.n	8004f10 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d02c      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
 8004f0e:	e027      	b.n	8004f60 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d023      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4798      	blx	r3
 8004f20:	e01e      	b.n	8004f60 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10f      	bne.n	8004f50 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0210 	bic.w	r2, r2, #16
 8004f3e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8306 	beq.w	8005576 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 8088 	beq.w	8005088 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a7a      	ldr	r2, [pc, #488]	; (8005170 <HAL_DMA_IRQHandler+0xa08>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d04a      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a79      	ldr	r2, [pc, #484]	; (8005174 <HAL_DMA_IRQHandler+0xa0c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d045      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a77      	ldr	r2, [pc, #476]	; (8005178 <HAL_DMA_IRQHandler+0xa10>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d040      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a76      	ldr	r2, [pc, #472]	; (800517c <HAL_DMA_IRQHandler+0xa14>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d03b      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a74      	ldr	r2, [pc, #464]	; (8005180 <HAL_DMA_IRQHandler+0xa18>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d036      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a73      	ldr	r2, [pc, #460]	; (8005184 <HAL_DMA_IRQHandler+0xa1c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d031      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a71      	ldr	r2, [pc, #452]	; (8005188 <HAL_DMA_IRQHandler+0xa20>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d02c      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a70      	ldr	r2, [pc, #448]	; (800518c <HAL_DMA_IRQHandler+0xa24>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d027      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a6e      	ldr	r2, [pc, #440]	; (8005190 <HAL_DMA_IRQHandler+0xa28>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d022      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a6d      	ldr	r2, [pc, #436]	; (8005194 <HAL_DMA_IRQHandler+0xa2c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d01d      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a6b      	ldr	r2, [pc, #428]	; (8005198 <HAL_DMA_IRQHandler+0xa30>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d018      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a6a      	ldr	r2, [pc, #424]	; (800519c <HAL_DMA_IRQHandler+0xa34>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a68      	ldr	r2, [pc, #416]	; (80051a0 <HAL_DMA_IRQHandler+0xa38>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00e      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a67      	ldr	r2, [pc, #412]	; (80051a4 <HAL_DMA_IRQHandler+0xa3c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a65      	ldr	r2, [pc, #404]	; (80051a8 <HAL_DMA_IRQHandler+0xa40>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_DMA_IRQHandler+0x8b8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a64      	ldr	r2, [pc, #400]	; (80051ac <HAL_DMA_IRQHandler+0xa44>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d108      	bne.n	8005032 <HAL_DMA_IRQHandler+0x8ca>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e007      	b.n	8005042 <HAL_DMA_IRQHandler+0x8da>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3301      	adds	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	429a      	cmp	r2, r3
 800504c:	d307      	bcc.n	800505e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f2      	bne.n	8005042 <HAL_DMA_IRQHandler+0x8da>
 800505c:	e000      	b.n	8005060 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800505e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2203      	movs	r2, #3
 800507a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800507e:	e003      	b.n	8005088 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8272 	beq.w	8005576 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	4798      	blx	r3
 800509a:	e26c      	b.n	8005576 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a43      	ldr	r2, [pc, #268]	; (80051b0 <HAL_DMA_IRQHandler+0xa48>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d022      	beq.n	80050ec <HAL_DMA_IRQHandler+0x984>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a42      	ldr	r2, [pc, #264]	; (80051b4 <HAL_DMA_IRQHandler+0xa4c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d01d      	beq.n	80050ec <HAL_DMA_IRQHandler+0x984>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a40      	ldr	r2, [pc, #256]	; (80051b8 <HAL_DMA_IRQHandler+0xa50>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d018      	beq.n	80050ec <HAL_DMA_IRQHandler+0x984>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a3f      	ldr	r2, [pc, #252]	; (80051bc <HAL_DMA_IRQHandler+0xa54>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <HAL_DMA_IRQHandler+0x984>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a3d      	ldr	r2, [pc, #244]	; (80051c0 <HAL_DMA_IRQHandler+0xa58>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00e      	beq.n	80050ec <HAL_DMA_IRQHandler+0x984>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a3c      	ldr	r2, [pc, #240]	; (80051c4 <HAL_DMA_IRQHandler+0xa5c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d009      	beq.n	80050ec <HAL_DMA_IRQHandler+0x984>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3a      	ldr	r2, [pc, #232]	; (80051c8 <HAL_DMA_IRQHandler+0xa60>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_DMA_IRQHandler+0x984>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a39      	ldr	r2, [pc, #228]	; (80051cc <HAL_DMA_IRQHandler+0xa64>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d101      	bne.n	80050f0 <HAL_DMA_IRQHandler+0x988>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <HAL_DMA_IRQHandler+0x98a>
 80050f0:	2300      	movs	r3, #0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 823f 	beq.w	8005576 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	2204      	movs	r2, #4
 800510a:	409a      	lsls	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4013      	ands	r3, r2
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80cd 	beq.w	80052b0 <HAL_DMA_IRQHandler+0xb48>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80c7 	beq.w	80052b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2204      	movs	r2, #4
 800512c:	409a      	lsls	r2, r3
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d049      	beq.n	80051d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8210 	beq.w	8005570 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005158:	e20a      	b.n	8005570 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8206 	beq.w	8005570 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800516c:	e200      	b.n	8005570 <HAL_DMA_IRQHandler+0xe08>
 800516e:	bf00      	nop
 8005170:	40020010 	.word	0x40020010
 8005174:	40020028 	.word	0x40020028
 8005178:	40020040 	.word	0x40020040
 800517c:	40020058 	.word	0x40020058
 8005180:	40020070 	.word	0x40020070
 8005184:	40020088 	.word	0x40020088
 8005188:	400200a0 	.word	0x400200a0
 800518c:	400200b8 	.word	0x400200b8
 8005190:	40020410 	.word	0x40020410
 8005194:	40020428 	.word	0x40020428
 8005198:	40020440 	.word	0x40020440
 800519c:	40020458 	.word	0x40020458
 80051a0:	40020470 	.word	0x40020470
 80051a4:	40020488 	.word	0x40020488
 80051a8:	400204a0 	.word	0x400204a0
 80051ac:	400204b8 	.word	0x400204b8
 80051b0:	58025408 	.word	0x58025408
 80051b4:	5802541c 	.word	0x5802541c
 80051b8:	58025430 	.word	0x58025430
 80051bc:	58025444 	.word	0x58025444
 80051c0:	58025458 	.word	0x58025458
 80051c4:	5802546c 	.word	0x5802546c
 80051c8:	58025480 	.word	0x58025480
 80051cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d160      	bne.n	800529c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a8c      	ldr	r2, [pc, #560]	; (8005410 <HAL_DMA_IRQHandler+0xca8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d04a      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a8a      	ldr	r2, [pc, #552]	; (8005414 <HAL_DMA_IRQHandler+0xcac>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d045      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a89      	ldr	r2, [pc, #548]	; (8005418 <HAL_DMA_IRQHandler+0xcb0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d040      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a87      	ldr	r2, [pc, #540]	; (800541c <HAL_DMA_IRQHandler+0xcb4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d03b      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a86      	ldr	r2, [pc, #536]	; (8005420 <HAL_DMA_IRQHandler+0xcb8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d036      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a84      	ldr	r2, [pc, #528]	; (8005424 <HAL_DMA_IRQHandler+0xcbc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d031      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a83      	ldr	r2, [pc, #524]	; (8005428 <HAL_DMA_IRQHandler+0xcc0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d02c      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a81      	ldr	r2, [pc, #516]	; (800542c <HAL_DMA_IRQHandler+0xcc4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d027      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a80      	ldr	r2, [pc, #512]	; (8005430 <HAL_DMA_IRQHandler+0xcc8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d022      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a7e      	ldr	r2, [pc, #504]	; (8005434 <HAL_DMA_IRQHandler+0xccc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01d      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a7d      	ldr	r2, [pc, #500]	; (8005438 <HAL_DMA_IRQHandler+0xcd0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d018      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a7b      	ldr	r2, [pc, #492]	; (800543c <HAL_DMA_IRQHandler+0xcd4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a7a      	ldr	r2, [pc, #488]	; (8005440 <HAL_DMA_IRQHandler+0xcd8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a78      	ldr	r2, [pc, #480]	; (8005444 <HAL_DMA_IRQHandler+0xcdc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a77      	ldr	r2, [pc, #476]	; (8005448 <HAL_DMA_IRQHandler+0xce0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_DMA_IRQHandler+0xb12>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a75      	ldr	r2, [pc, #468]	; (800544c <HAL_DMA_IRQHandler+0xce4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <HAL_DMA_IRQHandler+0xb24>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0208 	bic.w	r2, r2, #8
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	e007      	b.n	800529c <HAL_DMA_IRQHandler+0xb34>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0204 	bic.w	r2, r2, #4
 800529a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8165 	beq.w	8005570 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052ae:	e15f      	b.n	8005570 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2202      	movs	r2, #2
 80052ba:	409a      	lsls	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80c5 	beq.w	8005450 <HAL_DMA_IRQHandler+0xce8>
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80bf 	beq.w	8005450 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	2202      	movs	r2, #2
 80052dc:	409a      	lsls	r2, r3
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d018      	beq.n	800531e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 813a 	beq.w	8005574 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005308:	e134      	b.n	8005574 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8130 	beq.w	8005574 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800531c:	e12a      	b.n	8005574 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d168      	bne.n	80053fa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a38      	ldr	r2, [pc, #224]	; (8005410 <HAL_DMA_IRQHandler+0xca8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d04a      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a37      	ldr	r2, [pc, #220]	; (8005414 <HAL_DMA_IRQHandler+0xcac>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d045      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a35      	ldr	r2, [pc, #212]	; (8005418 <HAL_DMA_IRQHandler+0xcb0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d040      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a34      	ldr	r2, [pc, #208]	; (800541c <HAL_DMA_IRQHandler+0xcb4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d03b      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a32      	ldr	r2, [pc, #200]	; (8005420 <HAL_DMA_IRQHandler+0xcb8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d036      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a31      	ldr	r2, [pc, #196]	; (8005424 <HAL_DMA_IRQHandler+0xcbc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d031      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2f      	ldr	r2, [pc, #188]	; (8005428 <HAL_DMA_IRQHandler+0xcc0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d02c      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2e      	ldr	r2, [pc, #184]	; (800542c <HAL_DMA_IRQHandler+0xcc4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d027      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a2c      	ldr	r2, [pc, #176]	; (8005430 <HAL_DMA_IRQHandler+0xcc8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d022      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a2b      	ldr	r2, [pc, #172]	; (8005434 <HAL_DMA_IRQHandler+0xccc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d01d      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a29      	ldr	r2, [pc, #164]	; (8005438 <HAL_DMA_IRQHandler+0xcd0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d018      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a28      	ldr	r2, [pc, #160]	; (800543c <HAL_DMA_IRQHandler+0xcd4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d013      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a26      	ldr	r2, [pc, #152]	; (8005440 <HAL_DMA_IRQHandler+0xcd8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00e      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a25      	ldr	r2, [pc, #148]	; (8005444 <HAL_DMA_IRQHandler+0xcdc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a23      	ldr	r2, [pc, #140]	; (8005448 <HAL_DMA_IRQHandler+0xce0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_DMA_IRQHandler+0xc60>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a22      	ldr	r2, [pc, #136]	; (800544c <HAL_DMA_IRQHandler+0xce4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d108      	bne.n	80053da <HAL_DMA_IRQHandler+0xc72>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0214 	bic.w	r2, r2, #20
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e007      	b.n	80053ea <HAL_DMA_IRQHandler+0xc82>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 020a 	bic.w	r2, r2, #10
 80053e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 80b8 	beq.w	8005574 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800540c:	e0b2      	b.n	8005574 <HAL_DMA_IRQHandler+0xe0c>
 800540e:	bf00      	nop
 8005410:	40020010 	.word	0x40020010
 8005414:	40020028 	.word	0x40020028
 8005418:	40020040 	.word	0x40020040
 800541c:	40020058 	.word	0x40020058
 8005420:	40020070 	.word	0x40020070
 8005424:	40020088 	.word	0x40020088
 8005428:	400200a0 	.word	0x400200a0
 800542c:	400200b8 	.word	0x400200b8
 8005430:	40020410 	.word	0x40020410
 8005434:	40020428 	.word	0x40020428
 8005438:	40020440 	.word	0x40020440
 800543c:	40020458 	.word	0x40020458
 8005440:	40020470 	.word	0x40020470
 8005444:	40020488 	.word	0x40020488
 8005448:	400204a0 	.word	0x400204a0
 800544c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	2208      	movs	r2, #8
 800545a:	409a      	lsls	r2, r3
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4013      	ands	r3, r2
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8088 	beq.w	8005576 <HAL_DMA_IRQHandler+0xe0e>
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8082 	beq.w	8005576 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a41      	ldr	r2, [pc, #260]	; (800557c <HAL_DMA_IRQHandler+0xe14>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d04a      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a3f      	ldr	r2, [pc, #252]	; (8005580 <HAL_DMA_IRQHandler+0xe18>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d045      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a3e      	ldr	r2, [pc, #248]	; (8005584 <HAL_DMA_IRQHandler+0xe1c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d040      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a3c      	ldr	r2, [pc, #240]	; (8005588 <HAL_DMA_IRQHandler+0xe20>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d03b      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a3b      	ldr	r2, [pc, #236]	; (800558c <HAL_DMA_IRQHandler+0xe24>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d036      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a39      	ldr	r2, [pc, #228]	; (8005590 <HAL_DMA_IRQHandler+0xe28>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d031      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a38      	ldr	r2, [pc, #224]	; (8005594 <HAL_DMA_IRQHandler+0xe2c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d02c      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a36      	ldr	r2, [pc, #216]	; (8005598 <HAL_DMA_IRQHandler+0xe30>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d027      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a35      	ldr	r2, [pc, #212]	; (800559c <HAL_DMA_IRQHandler+0xe34>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d022      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a33      	ldr	r2, [pc, #204]	; (80055a0 <HAL_DMA_IRQHandler+0xe38>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d01d      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a32      	ldr	r2, [pc, #200]	; (80055a4 <HAL_DMA_IRQHandler+0xe3c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d018      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a30      	ldr	r2, [pc, #192]	; (80055a8 <HAL_DMA_IRQHandler+0xe40>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a2f      	ldr	r2, [pc, #188]	; (80055ac <HAL_DMA_IRQHandler+0xe44>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a2d      	ldr	r2, [pc, #180]	; (80055b0 <HAL_DMA_IRQHandler+0xe48>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <HAL_DMA_IRQHandler+0xe4c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_DMA_IRQHandler+0xdaa>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2a      	ldr	r2, [pc, #168]	; (80055b8 <HAL_DMA_IRQHandler+0xe50>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d108      	bne.n	8005524 <HAL_DMA_IRQHandler+0xdbc>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 021c 	bic.w	r2, r2, #28
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	e007      	b.n	8005534 <HAL_DMA_IRQHandler+0xdcc>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 020e 	bic.w	r2, r2, #14
 8005532:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2201      	movs	r2, #1
 800553e:	409a      	lsls	r2, r3
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	4798      	blx	r3
 800556a:	e004      	b.n	8005576 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800556c:	bf00      	nop
 800556e:	e002      	b.n	8005576 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005574:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005576:	3728      	adds	r7, #40	; 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40020010 	.word	0x40020010
 8005580:	40020028 	.word	0x40020028
 8005584:	40020040 	.word	0x40020040
 8005588:	40020058 	.word	0x40020058
 800558c:	40020070 	.word	0x40020070
 8005590:	40020088 	.word	0x40020088
 8005594:	400200a0 	.word	0x400200a0
 8005598:	400200b8 	.word	0x400200b8
 800559c:	40020410 	.word	0x40020410
 80055a0:	40020428 	.word	0x40020428
 80055a4:	40020440 	.word	0x40020440
 80055a8:	40020458 	.word	0x40020458
 80055ac:	40020470 	.word	0x40020470
 80055b0:	40020488 	.word	0x40020488
 80055b4:	400204a0 	.word	0x400204a0
 80055b8:	400204b8 	.word	0x400204b8

080055bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a84      	ldr	r2, [pc, #528]	; (80057ec <DMA_SetConfig+0x230>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d072      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a82      	ldr	r2, [pc, #520]	; (80057f0 <DMA_SetConfig+0x234>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d06d      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a81      	ldr	r2, [pc, #516]	; (80057f4 <DMA_SetConfig+0x238>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d068      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a7f      	ldr	r2, [pc, #508]	; (80057f8 <DMA_SetConfig+0x23c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d063      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a7e      	ldr	r2, [pc, #504]	; (80057fc <DMA_SetConfig+0x240>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d05e      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a7c      	ldr	r2, [pc, #496]	; (8005800 <DMA_SetConfig+0x244>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d059      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a7b      	ldr	r2, [pc, #492]	; (8005804 <DMA_SetConfig+0x248>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d054      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a79      	ldr	r2, [pc, #484]	; (8005808 <DMA_SetConfig+0x24c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d04f      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a78      	ldr	r2, [pc, #480]	; (800580c <DMA_SetConfig+0x250>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d04a      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a76      	ldr	r2, [pc, #472]	; (8005810 <DMA_SetConfig+0x254>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d045      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a75      	ldr	r2, [pc, #468]	; (8005814 <DMA_SetConfig+0x258>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d040      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a73      	ldr	r2, [pc, #460]	; (8005818 <DMA_SetConfig+0x25c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d03b      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a72      	ldr	r2, [pc, #456]	; (800581c <DMA_SetConfig+0x260>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d036      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a70      	ldr	r2, [pc, #448]	; (8005820 <DMA_SetConfig+0x264>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d031      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a6f      	ldr	r2, [pc, #444]	; (8005824 <DMA_SetConfig+0x268>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d02c      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a6d      	ldr	r2, [pc, #436]	; (8005828 <DMA_SetConfig+0x26c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d027      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a6c      	ldr	r2, [pc, #432]	; (800582c <DMA_SetConfig+0x270>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a6a      	ldr	r2, [pc, #424]	; (8005830 <DMA_SetConfig+0x274>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01d      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a69      	ldr	r2, [pc, #420]	; (8005834 <DMA_SetConfig+0x278>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a67      	ldr	r2, [pc, #412]	; (8005838 <DMA_SetConfig+0x27c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a66      	ldr	r2, [pc, #408]	; (800583c <DMA_SetConfig+0x280>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a64      	ldr	r2, [pc, #400]	; (8005840 <DMA_SetConfig+0x284>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a63      	ldr	r2, [pc, #396]	; (8005844 <DMA_SetConfig+0x288>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <DMA_SetConfig+0x10a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a61      	ldr	r2, [pc, #388]	; (8005848 <DMA_SetConfig+0x28c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <DMA_SetConfig+0x10e>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <DMA_SetConfig+0x110>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00d      	beq.n	80056ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80056ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a3e      	ldr	r2, [pc, #248]	; (80057ec <DMA_SetConfig+0x230>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d04a      	beq.n	800578c <DMA_SetConfig+0x1d0>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a3d      	ldr	r2, [pc, #244]	; (80057f0 <DMA_SetConfig+0x234>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d045      	beq.n	800578c <DMA_SetConfig+0x1d0>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a3b      	ldr	r2, [pc, #236]	; (80057f4 <DMA_SetConfig+0x238>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d040      	beq.n	800578c <DMA_SetConfig+0x1d0>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a3a      	ldr	r2, [pc, #232]	; (80057f8 <DMA_SetConfig+0x23c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d03b      	beq.n	800578c <DMA_SetConfig+0x1d0>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a38      	ldr	r2, [pc, #224]	; (80057fc <DMA_SetConfig+0x240>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d036      	beq.n	800578c <DMA_SetConfig+0x1d0>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a37      	ldr	r2, [pc, #220]	; (8005800 <DMA_SetConfig+0x244>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d031      	beq.n	800578c <DMA_SetConfig+0x1d0>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a35      	ldr	r2, [pc, #212]	; (8005804 <DMA_SetConfig+0x248>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d02c      	beq.n	800578c <DMA_SetConfig+0x1d0>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a34      	ldr	r2, [pc, #208]	; (8005808 <DMA_SetConfig+0x24c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d027      	beq.n	800578c <DMA_SetConfig+0x1d0>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a32      	ldr	r2, [pc, #200]	; (800580c <DMA_SetConfig+0x250>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d022      	beq.n	800578c <DMA_SetConfig+0x1d0>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a31      	ldr	r2, [pc, #196]	; (8005810 <DMA_SetConfig+0x254>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d01d      	beq.n	800578c <DMA_SetConfig+0x1d0>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a2f      	ldr	r2, [pc, #188]	; (8005814 <DMA_SetConfig+0x258>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d018      	beq.n	800578c <DMA_SetConfig+0x1d0>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2e      	ldr	r2, [pc, #184]	; (8005818 <DMA_SetConfig+0x25c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <DMA_SetConfig+0x1d0>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2c      	ldr	r2, [pc, #176]	; (800581c <DMA_SetConfig+0x260>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00e      	beq.n	800578c <DMA_SetConfig+0x1d0>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2b      	ldr	r2, [pc, #172]	; (8005820 <DMA_SetConfig+0x264>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d009      	beq.n	800578c <DMA_SetConfig+0x1d0>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a29      	ldr	r2, [pc, #164]	; (8005824 <DMA_SetConfig+0x268>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <DMA_SetConfig+0x1d0>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a28      	ldr	r2, [pc, #160]	; (8005828 <DMA_SetConfig+0x26c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d101      	bne.n	8005790 <DMA_SetConfig+0x1d4>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <DMA_SetConfig+0x1d6>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d05a      	beq.n	800584c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	223f      	movs	r2, #63	; 0x3f
 80057a0:	409a      	lsls	r2, r3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d108      	bne.n	80057d8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80057d6:	e087      	b.n	80058e8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]
}
 80057e8:	e07e      	b.n	80058e8 <DMA_SetConfig+0x32c>
 80057ea:	bf00      	nop
 80057ec:	40020010 	.word	0x40020010
 80057f0:	40020028 	.word	0x40020028
 80057f4:	40020040 	.word	0x40020040
 80057f8:	40020058 	.word	0x40020058
 80057fc:	40020070 	.word	0x40020070
 8005800:	40020088 	.word	0x40020088
 8005804:	400200a0 	.word	0x400200a0
 8005808:	400200b8 	.word	0x400200b8
 800580c:	40020410 	.word	0x40020410
 8005810:	40020428 	.word	0x40020428
 8005814:	40020440 	.word	0x40020440
 8005818:	40020458 	.word	0x40020458
 800581c:	40020470 	.word	0x40020470
 8005820:	40020488 	.word	0x40020488
 8005824:	400204a0 	.word	0x400204a0
 8005828:	400204b8 	.word	0x400204b8
 800582c:	58025408 	.word	0x58025408
 8005830:	5802541c 	.word	0x5802541c
 8005834:	58025430 	.word	0x58025430
 8005838:	58025444 	.word	0x58025444
 800583c:	58025458 	.word	0x58025458
 8005840:	5802546c 	.word	0x5802546c
 8005844:	58025480 	.word	0x58025480
 8005848:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a28      	ldr	r2, [pc, #160]	; (80058f4 <DMA_SetConfig+0x338>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d022      	beq.n	800589c <DMA_SetConfig+0x2e0>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a27      	ldr	r2, [pc, #156]	; (80058f8 <DMA_SetConfig+0x33c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d01d      	beq.n	800589c <DMA_SetConfig+0x2e0>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a25      	ldr	r2, [pc, #148]	; (80058fc <DMA_SetConfig+0x340>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d018      	beq.n	800589c <DMA_SetConfig+0x2e0>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a24      	ldr	r2, [pc, #144]	; (8005900 <DMA_SetConfig+0x344>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d013      	beq.n	800589c <DMA_SetConfig+0x2e0>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a22      	ldr	r2, [pc, #136]	; (8005904 <DMA_SetConfig+0x348>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00e      	beq.n	800589c <DMA_SetConfig+0x2e0>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a21      	ldr	r2, [pc, #132]	; (8005908 <DMA_SetConfig+0x34c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d009      	beq.n	800589c <DMA_SetConfig+0x2e0>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1f      	ldr	r2, [pc, #124]	; (800590c <DMA_SetConfig+0x350>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <DMA_SetConfig+0x2e0>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1e      	ldr	r2, [pc, #120]	; (8005910 <DMA_SetConfig+0x354>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d101      	bne.n	80058a0 <DMA_SetConfig+0x2e4>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <DMA_SetConfig+0x2e6>
 80058a0:	2300      	movs	r3, #0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d020      	beq.n	80058e8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	2201      	movs	r2, #1
 80058b0:	409a      	lsls	r2, r3
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d108      	bne.n	80058d8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	60da      	str	r2, [r3, #12]
}
 80058d6:	e007      	b.n	80058e8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	60da      	str	r2, [r3, #12]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	58025408 	.word	0x58025408
 80058f8:	5802541c 	.word	0x5802541c
 80058fc:	58025430 	.word	0x58025430
 8005900:	58025444 	.word	0x58025444
 8005904:	58025458 	.word	0x58025458
 8005908:	5802546c 	.word	0x5802546c
 800590c:	58025480 	.word	0x58025480
 8005910:	58025494 	.word	0x58025494

08005914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a42      	ldr	r2, [pc, #264]	; (8005a2c <DMA_CalcBaseAndBitshift+0x118>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d04a      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a41      	ldr	r2, [pc, #260]	; (8005a30 <DMA_CalcBaseAndBitshift+0x11c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d045      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a3f      	ldr	r2, [pc, #252]	; (8005a34 <DMA_CalcBaseAndBitshift+0x120>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d040      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a3e      	ldr	r2, [pc, #248]	; (8005a38 <DMA_CalcBaseAndBitshift+0x124>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d03b      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a3c      	ldr	r2, [pc, #240]	; (8005a3c <DMA_CalcBaseAndBitshift+0x128>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d036      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a3b      	ldr	r2, [pc, #236]	; (8005a40 <DMA_CalcBaseAndBitshift+0x12c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d031      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a39      	ldr	r2, [pc, #228]	; (8005a44 <DMA_CalcBaseAndBitshift+0x130>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d02c      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a38      	ldr	r2, [pc, #224]	; (8005a48 <DMA_CalcBaseAndBitshift+0x134>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d027      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a36      	ldr	r2, [pc, #216]	; (8005a4c <DMA_CalcBaseAndBitshift+0x138>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d022      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a35      	ldr	r2, [pc, #212]	; (8005a50 <DMA_CalcBaseAndBitshift+0x13c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d01d      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a33      	ldr	r2, [pc, #204]	; (8005a54 <DMA_CalcBaseAndBitshift+0x140>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d018      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a32      	ldr	r2, [pc, #200]	; (8005a58 <DMA_CalcBaseAndBitshift+0x144>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a30      	ldr	r2, [pc, #192]	; (8005a5c <DMA_CalcBaseAndBitshift+0x148>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00e      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a2f      	ldr	r2, [pc, #188]	; (8005a60 <DMA_CalcBaseAndBitshift+0x14c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d009      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a2d      	ldr	r2, [pc, #180]	; (8005a64 <DMA_CalcBaseAndBitshift+0x150>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d004      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xa8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a2c      	ldr	r2, [pc, #176]	; (8005a68 <DMA_CalcBaseAndBitshift+0x154>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d101      	bne.n	80059c0 <DMA_CalcBaseAndBitshift+0xac>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <DMA_CalcBaseAndBitshift+0xae>
 80059c0:	2300      	movs	r3, #0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d024      	beq.n	8005a10 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	3b10      	subs	r3, #16
 80059ce:	4a27      	ldr	r2, [pc, #156]	; (8005a6c <DMA_CalcBaseAndBitshift+0x158>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	4a24      	ldr	r2, [pc, #144]	; (8005a70 <DMA_CalcBaseAndBitshift+0x15c>)
 80059e0:	5cd3      	ldrb	r3, [r2, r3]
 80059e2:	461a      	mov	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d908      	bls.n	8005a00 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	4b1f      	ldr	r3, [pc, #124]	; (8005a74 <DMA_CalcBaseAndBitshift+0x160>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	659a      	str	r2, [r3, #88]	; 0x58
 80059fe:	e00d      	b.n	8005a1c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <DMA_CalcBaseAndBitshift+0x160>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a0e:	e005      	b.n	8005a1c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	40020010 	.word	0x40020010
 8005a30:	40020028 	.word	0x40020028
 8005a34:	40020040 	.word	0x40020040
 8005a38:	40020058 	.word	0x40020058
 8005a3c:	40020070 	.word	0x40020070
 8005a40:	40020088 	.word	0x40020088
 8005a44:	400200a0 	.word	0x400200a0
 8005a48:	400200b8 	.word	0x400200b8
 8005a4c:	40020410 	.word	0x40020410
 8005a50:	40020428 	.word	0x40020428
 8005a54:	40020440 	.word	0x40020440
 8005a58:	40020458 	.word	0x40020458
 8005a5c:	40020470 	.word	0x40020470
 8005a60:	40020488 	.word	0x40020488
 8005a64:	400204a0 	.word	0x400204a0
 8005a68:	400204b8 	.word	0x400204b8
 8005a6c:	aaaaaaab 	.word	0xaaaaaaab
 8005a70:	0801b3c8 	.word	0x0801b3c8
 8005a74:	fffffc00 	.word	0xfffffc00

08005a78 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d120      	bne.n	8005ace <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d858      	bhi.n	8005b46 <DMA_CheckFifoParam+0xce>
 8005a94:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <DMA_CheckFifoParam+0x24>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005abf 	.word	0x08005abf
 8005aa4:	08005aad 	.word	0x08005aad
 8005aa8:	08005b47 	.word	0x08005b47
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d048      	beq.n	8005b4a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005abc:	e045      	b.n	8005b4a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ac6:	d142      	bne.n	8005b4e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005acc:	e03f      	b.n	8005b4e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	d123      	bne.n	8005b20 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d838      	bhi.n	8005b52 <DMA_CheckFifoParam+0xda>
 8005ae0:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <DMA_CheckFifoParam+0x70>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005af9 	.word	0x08005af9
 8005aec:	08005aff 	.word	0x08005aff
 8005af0:	08005af9 	.word	0x08005af9
 8005af4:	08005b11 	.word	0x08005b11
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	73fb      	strb	r3, [r7, #15]
        break;
 8005afc:	e030      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d025      	beq.n	8005b56 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b0e:	e022      	b.n	8005b56 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b18:	d11f      	bne.n	8005b5a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b1e:	e01c      	b.n	8005b5a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d902      	bls.n	8005b2e <DMA_CheckFifoParam+0xb6>
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d003      	beq.n	8005b34 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005b2c:	e018      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	73fb      	strb	r3, [r7, #15]
        break;
 8005b32:	e015      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00e      	beq.n	8005b5e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
    break;
 8005b44:	e00b      	b.n	8005b5e <DMA_CheckFifoParam+0xe6>
        break;
 8005b46:	bf00      	nop
 8005b48:	e00a      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
        break;
 8005b4a:	bf00      	nop
 8005b4c:	e008      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e006      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
        break;
 8005b52:	bf00      	nop
 8005b54:	e004      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
        break;
 8005b56:	bf00      	nop
 8005b58:	e002      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
    break;
 8005b5e:	bf00      	nop
    }
  }

  return status;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop

08005b70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d022      	beq.n	8005bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a36      	ldr	r2, [pc, #216]	; (8005c68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01d      	beq.n	8005bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a35      	ldr	r2, [pc, #212]	; (8005c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d018      	beq.n	8005bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a33      	ldr	r2, [pc, #204]	; (8005c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a32      	ldr	r2, [pc, #200]	; (8005c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a30      	ldr	r2, [pc, #192]	; (8005c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a2d      	ldr	r2, [pc, #180]	; (8005c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01a      	beq.n	8005c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	3b08      	subs	r3, #8
 8005be0:	4a28      	ldr	r2, [pc, #160]	; (8005c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a24      	ldr	r2, [pc, #144]	; (8005c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005bfc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	2201      	movs	r2, #1
 8005c06:	409a      	lsls	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c0c:	e024      	b.n	8005c58 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	3b10      	subs	r3, #16
 8005c16:	4a1e      	ldr	r2, [pc, #120]	; (8005c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005c18:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1c:	091b      	lsrs	r3, r3, #4
 8005c1e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4a1c      	ldr	r2, [pc, #112]	; (8005c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d806      	bhi.n	8005c36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d902      	bls.n	8005c36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3308      	adds	r3, #8
 8005c34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	461a      	mov	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005c48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	2201      	movs	r2, #1
 8005c52:	409a      	lsls	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	58025408 	.word	0x58025408
 8005c68:	5802541c 	.word	0x5802541c
 8005c6c:	58025430 	.word	0x58025430
 8005c70:	58025444 	.word	0x58025444
 8005c74:	58025458 	.word	0x58025458
 8005c78:	5802546c 	.word	0x5802546c
 8005c7c:	58025480 	.word	0x58025480
 8005c80:	58025494 	.word	0x58025494
 8005c84:	cccccccd 	.word	0xcccccccd
 8005c88:	16009600 	.word	0x16009600
 8005c8c:	58025880 	.word	0x58025880
 8005c90:	aaaaaaab 	.word	0xaaaaaaab
 8005c94:	400204b8 	.word	0x400204b8
 8005c98:	4002040f 	.word	0x4002040f
 8005c9c:	10008200 	.word	0x10008200
 8005ca0:	40020880 	.word	0x40020880

08005ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d04a      	beq.n	8005d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d847      	bhi.n	8005d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a25      	ldr	r2, [pc, #148]	; (8005d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d022      	beq.n	8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a24      	ldr	r2, [pc, #144]	; (8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d01d      	beq.n	8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a22      	ldr	r2, [pc, #136]	; (8005d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d018      	beq.n	8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a21      	ldr	r2, [pc, #132]	; (8005d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1f      	ldr	r2, [pc, #124]	; (8005d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00e      	beq.n	8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1e      	ldr	r2, [pc, #120]	; (8005d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d009      	beq.n	8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1c      	ldr	r2, [pc, #112]	; (8005d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d004      	beq.n	8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1b      	ldr	r2, [pc, #108]	; (8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d101      	bne.n	8005d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005d14:	2300      	movs	r3, #0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005d2c:	671a      	str	r2, [r3, #112]	; 0x70
 8005d2e:	e009      	b.n	8005d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a11      	ldr	r2, [pc, #68]	; (8005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005d42:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	2201      	movs	r2, #1
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005d50:	bf00      	nop
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	58025408 	.word	0x58025408
 8005d60:	5802541c 	.word	0x5802541c
 8005d64:	58025430 	.word	0x58025430
 8005d68:	58025444 	.word	0x58025444
 8005d6c:	58025458 	.word	0x58025458
 8005d70:	5802546c 	.word	0x5802546c
 8005d74:	58025480 	.word	0x58025480
 8005d78:	58025494 	.word	0x58025494
 8005d7c:	1600963f 	.word	0x1600963f
 8005d80:	58025940 	.word	0x58025940
 8005d84:	1000823f 	.word	0x1000823f
 8005d88:	40020940 	.word	0x40020940

08005d8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e0c6      	b.n	8005f2c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fb fb1e 	bl	80013e8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2223      	movs	r2, #35	; 0x23
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db2:	4b60      	ldr	r3, [pc, #384]	; (8005f34 <HAL_ETH_Init+0x1a8>)
 8005db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005db8:	4a5e      	ldr	r2, [pc, #376]	; (8005f34 <HAL_ETH_Init+0x1a8>)
 8005dba:	f043 0302 	orr.w	r3, r3, #2
 8005dbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dc2:	4b5c      	ldr	r3, [pc, #368]	; (8005f34 <HAL_ETH_Init+0x1a8>)
 8005dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	7a1b      	ldrb	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d103      	bne.n	8005de0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005dd8:	2000      	movs	r0, #0
 8005dda:	f7fb ff2d 	bl	8001c38 <HAL_SYSCFG_ETHInterfaceSelect>
 8005dde:	e003      	b.n	8005de8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005de0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005de4:	f7fb ff28 	bl	8001c38 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e00:	f7fb fee0 	bl	8001bc4 <HAL_GetTick>
 8005e04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e06:	e00f      	b.n	8005e28 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005e08:	f7fb fedc 	bl	8001bc4 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005e16:	d907      	bls.n	8005e28 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	22e0      	movs	r2, #224	; 0xe0
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e081      	b.n	8005f2c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e6      	bne.n	8005e08 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fac0 	bl	80063c0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005e40:	f003 fda0 	bl	8009984 <HAL_RCC_GetHCLKFreq>
 8005e44:	4602      	mov	r2, r0
 8005e46:	4b3c      	ldr	r3, [pc, #240]	; (8005f38 <HAL_ETH_Init+0x1ac>)
 8005e48:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4c:	0c9a      	lsrs	r2, r3, #18
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3a01      	subs	r2, #1
 8005e54:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fa13 	bl	8006284 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005e74:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005e78:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	22e0      	movs	r2, #224	; 0xe0
 8005e90:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e04a      	b.n	8005f2c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	f241 1308 	movw	r3, #4360	; 0x1108
 8005e9e:	4413      	add	r3, r2
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <HAL_ETH_Init+0x1b0>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6952      	ldr	r2, [r2, #20]
 8005eaa:	0052      	lsls	r2, r2, #1
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	6809      	ldr	r1, [r1, #0]
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	f241 1308 	movw	r3, #4360	; 0x1108
 8005eb6:	440b      	add	r3, r1
 8005eb8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fad8 	bl	8006470 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fb1c 	bl	80064fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	3305      	adds	r3, #5
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	021a      	lsls	r2, r3, #8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	3303      	adds	r3, #3
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	061a      	lsls	r2, r3, #24
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	041b      	lsls	r3, r3, #16
 8005ef8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	3301      	adds	r3, #1
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f04:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f12:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2210      	movs	r2, #16
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2210      	movs	r2, #16
 8005f28:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	58024400 	.word	0x58024400
 8005f38:	431bde83 	.word	0x431bde83
 8005f3c:	ffff8001 	.word	0xffff8001

08005f40 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005f52:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	791b      	ldrb	r3, [r3, #4]
 8005f58:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005f5a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	7b1b      	ldrb	r3, [r3, #12]
 8005f60:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005f62:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	7b5b      	ldrb	r3, [r3, #13]
 8005f68:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005f6a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	7b9b      	ldrb	r3, [r3, #14]
 8005f70:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005f72:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	7bdb      	ldrb	r3, [r3, #15]
 8005f78:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005f7a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	7c12      	ldrb	r2, [r2, #16]
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	d102      	bne.n	8005f8a <ETH_SetMACConfig+0x4a>
 8005f84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005f88:	e000      	b.n	8005f8c <ETH_SetMACConfig+0x4c>
 8005f8a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005f8c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	7c52      	ldrb	r2, [r2, #17]
 8005f92:	2a00      	cmp	r2, #0
 8005f94:	d102      	bne.n	8005f9c <ETH_SetMACConfig+0x5c>
 8005f96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f9a:	e000      	b.n	8005f9e <ETH_SetMACConfig+0x5e>
 8005f9c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005f9e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	7c9b      	ldrb	r3, [r3, #18]
 8005fa4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005fa6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005fac:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005fb2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	7f1b      	ldrb	r3, [r3, #28]
 8005fb8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005fba:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	7f5b      	ldrb	r3, [r3, #29]
 8005fc0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005fc2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	7f92      	ldrb	r2, [r2, #30]
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	d102      	bne.n	8005fd2 <ETH_SetMACConfig+0x92>
 8005fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fd0:	e000      	b.n	8005fd4 <ETH_SetMACConfig+0x94>
 8005fd2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005fd4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	7fdb      	ldrb	r3, [r3, #31]
 8005fda:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005fdc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005fe4:	2a00      	cmp	r2, #0
 8005fe6:	d102      	bne.n	8005fee <ETH_SetMACConfig+0xae>
 8005fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fec:	e000      	b.n	8005ff0 <ETH_SetMACConfig+0xb0>
 8005fee:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005ff0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005ff6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ffe:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8006000:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b56      	ldr	r3, [pc, #344]	; (800616c <ETH_SetMACConfig+0x22c>)
 8006012:	4013      	ands	r3, r2
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	430b      	orrs	r3, r1
 800601c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800602a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800602c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006034:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006036:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800603e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006040:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006048:	2a00      	cmp	r2, #0
 800604a:	d102      	bne.n	8006052 <ETH_SetMACConfig+0x112>
 800604c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006050:	e000      	b.n	8006054 <ETH_SetMACConfig+0x114>
 8006052:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006054:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	4b42      	ldr	r3, [pc, #264]	; (8006170 <ETH_SetMACConfig+0x230>)
 8006066:	4013      	ands	r3, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	68f9      	ldr	r1, [r7, #12]
 800606e:	430b      	orrs	r3, r1
 8006070:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006078:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	4b3a      	ldr	r3, [pc, #232]	; (8006174 <ETH_SetMACConfig+0x234>)
 800608a:	4013      	ands	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	68f9      	ldr	r1, [r7, #12]
 8006092:	430b      	orrs	r3, r1
 8006094:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800609c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80060a2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80060aa:	2a00      	cmp	r2, #0
 80060ac:	d101      	bne.n	80060b2 <ETH_SetMACConfig+0x172>
 80060ae:	2280      	movs	r2, #128	; 0x80
 80060b0:	e000      	b.n	80060b4 <ETH_SetMACConfig+0x174>
 80060b2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80060b4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ba:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060c6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80060ca:	4013      	ands	r3, r2
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	68f9      	ldr	r1, [r7, #12]
 80060d2:	430b      	orrs	r3, r1
 80060d4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80060dc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80060e4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f2:	f023 0103 	bic.w	r1, r3, #3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800610a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006126:	2a00      	cmp	r2, #0
 8006128:	d101      	bne.n	800612e <ETH_SetMACConfig+0x1ee>
 800612a:	2240      	movs	r2, #64	; 0x40
 800612c:	e000      	b.n	8006130 <ETH_SetMACConfig+0x1f0>
 800612e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006130:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006138:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800613a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006142:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006150:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	430a      	orrs	r2, r1
 800615c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	00048083 	.word	0x00048083
 8006170:	c0f88000 	.word	0xc0f88000
 8006174:	fffffef0 	.word	0xfffffef0

08006178 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	4b38      	ldr	r3, [pc, #224]	; (8006270 <ETH_SetDMAConfig+0xf8>)
 800618e:	4013      	ands	r3, r2
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	6809      	ldr	r1, [r1, #0]
 8006198:	431a      	orrs	r2, r3
 800619a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800619e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	791b      	ldrb	r3, [r3, #4]
 80061a4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80061aa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	7b1b      	ldrb	r3, [r3, #12]
 80061b0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80061be:	4413      	add	r3, r2
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b2c      	ldr	r3, [pc, #176]	; (8006274 <ETH_SetDMAConfig+0xfc>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6811      	ldr	r1, [r2, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	f241 0304 	movw	r3, #4100	; 0x1004
 80061d2:	440b      	add	r3, r1
 80061d4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	7b5b      	ldrb	r3, [r3, #13]
 80061da:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b22      	ldr	r3, [pc, #136]	; (8006278 <ETH_SetDMAConfig+0x100>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6811      	ldr	r1, [r2, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	431a      	orrs	r2, r3
 80061fa:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80061fe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	7d1b      	ldrb	r3, [r3, #20]
 8006208:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800620a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	7f5b      	ldrb	r3, [r3, #29]
 8006210:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	f241 1304 	movw	r3, #4356	; 0x1104
 800621e:	4413      	add	r3, r2
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4b16      	ldr	r3, [pc, #88]	; (800627c <ETH_SetDMAConfig+0x104>)
 8006224:	4013      	ands	r3, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6811      	ldr	r1, [r2, #0]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	431a      	orrs	r2, r3
 800622e:	f241 1304 	movw	r3, #4356	; 0x1104
 8006232:	440b      	add	r3, r1
 8006234:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	7f1b      	ldrb	r3, [r3, #28]
 800623a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	f241 1308 	movw	r3, #4360	; 0x1108
 800624c:	4413      	add	r3, r2
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <ETH_SetDMAConfig+0x108>)
 8006252:	4013      	ands	r3, r2
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6811      	ldr	r1, [r2, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	431a      	orrs	r2, r3
 800625c:	f241 1308 	movw	r3, #4360	; 0x1108
 8006260:	440b      	add	r3, r1
 8006262:	601a      	str	r2, [r3, #0]
}
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	ffff87fd 	.word	0xffff87fd
 8006274:	ffff2ffe 	.word	0xffff2ffe
 8006278:	fffec000 	.word	0xfffec000
 800627c:	ffc0efef 	.word	0xffc0efef
 8006280:	7fc0ffff 	.word	0x7fc0ffff

08006284 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b0a4      	sub	sp, #144	; 0x90
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800628c:	2301      	movs	r3, #1
 800628e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006292:	2300      	movs	r3, #0
 8006294:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006296:	2300      	movs	r3, #0
 8006298:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800629c:	2300      	movs	r3, #0
 800629e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80062b4:	2300      	movs	r3, #0
 80062b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80062c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062c4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80062dc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80062e0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80062e8:	2300      	movs	r3, #0
 80062ea:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80062fe:	2300      	movs	r3, #0
 8006300:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006302:	2300      	movs	r3, #0
 8006304:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006306:	2300      	movs	r3, #0
 8006308:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800630a:	2300      	movs	r3, #0
 800630c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006310:	2300      	movs	r3, #0
 8006312:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800631c:	2320      	movs	r3, #32
 800631e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006328:	2300      	movs	r3, #0
 800632a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800632e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006334:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006338:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800633a:	2300      	movs	r3, #0
 800633c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006340:	2302      	movs	r3, #2
 8006342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006346:	2300      	movs	r3, #0
 8006348:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800634c:	2300      	movs	r3, #0
 800634e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006352:	2300      	movs	r3, #0
 8006354:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800635e:	2300      	movs	r3, #0
 8006360:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff fde6 	bl	8005f40 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006374:	2301      	movs	r3, #1
 8006376:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006378:	2301      	movs	r3, #1
 800637a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800637c:	2300      	movs	r3, #0
 800637e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006380:	2300      	movs	r3, #0
 8006382:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006386:	2300      	movs	r3, #0
 8006388:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800638a:	2300      	movs	r3, #0
 800638c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800638e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006392:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006394:	2300      	movs	r3, #0
 8006396:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006398:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800639c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800639e:	2300      	movs	r3, #0
 80063a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80063a4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80063aa:	f107 0308 	add.w	r3, r7, #8
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff fee1 	bl	8006178 <ETH_SetDMAConfig>
}
 80063b6:	bf00      	nop
 80063b8:	3790      	adds	r7, #144	; 0x90
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80063da:	f003 fad3 	bl	8009984 <HAL_RCC_GetHCLKFreq>
 80063de:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4a1e      	ldr	r2, [pc, #120]	; (800645c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d908      	bls.n	80063fa <ETH_MAC_MDIO_ClkConfig+0x3a>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4a1d      	ldr	r2, [pc, #116]	; (8006460 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d804      	bhi.n	80063fa <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	e027      	b.n	800644a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4a18      	ldr	r2, [pc, #96]	; (8006460 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d908      	bls.n	8006414 <ETH_MAC_MDIO_ClkConfig+0x54>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4a17      	ldr	r2, [pc, #92]	; (8006464 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d804      	bhi.n	8006414 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	e01a      	b.n	800644a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4a13      	ldr	r2, [pc, #76]	; (8006464 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d903      	bls.n	8006424 <ETH_MAC_MDIO_ClkConfig+0x64>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4a12      	ldr	r2, [pc, #72]	; (8006468 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d911      	bls.n	8006448 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4a10      	ldr	r2, [pc, #64]	; (8006468 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d908      	bls.n	800643e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4a0f      	ldr	r2, [pc, #60]	; (800646c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d804      	bhi.n	800643e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	e005      	b.n	800644a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	e000      	b.n	800644a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006448:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	01312cff 	.word	0x01312cff
 8006460:	02160ebf 	.word	0x02160ebf
 8006464:	039386ff 	.word	0x039386ff
 8006468:	05f5e0ff 	.word	0x05f5e0ff
 800646c:	08f0d17f 	.word	0x08f0d17f

08006470 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e01d      	b.n	80064ba <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68d9      	ldr	r1, [r3, #12]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	440b      	add	r3, r1
 800648e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2200      	movs	r2, #0
 800649a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2200      	movs	r2, #0
 80064a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	3206      	adds	r2, #6
 80064b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d9de      	bls.n	800647e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	f241 132c 	movw	r3, #4396	; 0x112c
 80064ce:	4413      	add	r3, r2
 80064d0:	2203      	movs	r2, #3
 80064d2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68d9      	ldr	r1, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	f241 1314 	movw	r3, #4372	; 0x1114
 80064e0:	4413      	add	r3, r2
 80064e2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80064f0:	601a      	str	r2, [r3, #0]
}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e024      	b.n	8006556 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6919      	ldr	r1, [r3, #16]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4613      	mov	r3, r2
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	4413      	add	r3, r2
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	440b      	add	r3, r1
 800651c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2200      	movs	r2, #0
 8006528:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2200      	movs	r2, #0
 800652e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2200      	movs	r2, #0
 8006534:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2200      	movs	r2, #0
 800653a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2200      	movs	r2, #0
 8006540:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	330a      	adds	r3, #10
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b03      	cmp	r3, #3
 800655a:	d9d7      	bls.n	800650c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	f241 1330 	movw	r3, #4400	; 0x1130
 8006582:	4413      	add	r3, r2
 8006584:	2203      	movs	r2, #3
 8006586:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6919      	ldr	r1, [r3, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	f241 131c 	movw	r3, #4380	; 0x111c
 8006594:	4413      	add	r3, r2
 8006596:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	f241 1328 	movw	r3, #4392	; 0x1128
 80065a8:	4413      	add	r3, r2
 80065aa:	6019      	str	r1, [r3, #0]
}
 80065ac:	bf00      	nop
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b098      	sub	sp, #96	; 0x60
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80065c0:	4a84      	ldr	r2, [pc, #528]	; (80067d4 <HAL_FDCAN_Init+0x21c>)
 80065c2:	f107 030c 	add.w	r3, r7, #12
 80065c6:	4611      	mov	r1, r2
 80065c8:	224c      	movs	r2, #76	; 0x4c
 80065ca:	4618      	mov	r0, r3
 80065cc:	f014 fd8e 	bl	801b0ec <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e1ca      	b.n	8006970 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a7e      	ldr	r2, [pc, #504]	; (80067d8 <HAL_FDCAN_Init+0x220>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d106      	bne.n	80065f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80065ec:	461a      	mov	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fa ffbc 	bl	8001584 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0210 	bic.w	r2, r2, #16
 800661a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800661c:	f7fb fad2 	bl	8001bc4 <HAL_GetTick>
 8006620:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006622:	e014      	b.n	800664e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006624:	f7fb face 	bl	8001bc4 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b0a      	cmp	r3, #10
 8006630:	d90d      	bls.n	800664e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006638:	f043 0201 	orr.w	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2203      	movs	r2, #3
 8006646:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e190      	b.n	8006970 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b08      	cmp	r3, #8
 800665a:	d0e3      	beq.n	8006624 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800666c:	f7fb faaa 	bl	8001bc4 <HAL_GetTick>
 8006670:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006672:	e014      	b.n	800669e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006674:	f7fb faa6 	bl	8001bc4 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b0a      	cmp	r3, #10
 8006680:	d90d      	bls.n	800669e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006688:	f043 0201 	orr.w	r2, r3, #1
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2203      	movs	r2, #3
 8006696:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e168      	b.n	8006970 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0e3      	beq.n	8006674 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0202 	orr.w	r2, r2, #2
 80066ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7c1b      	ldrb	r3, [r3, #16]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d108      	bne.n	80066d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d2:	619a      	str	r2, [r3, #24]
 80066d4:	e007      	b.n	80066e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7c5b      	ldrb	r3, [r3, #17]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d108      	bne.n	8006700 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066fc:	619a      	str	r2, [r3, #24]
 80066fe:	e007      	b.n	8006710 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800670e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	7c9b      	ldrb	r3, [r3, #18]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d108      	bne.n	800672a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006726:	619a      	str	r2, [r3, #24]
 8006728:	e007      	b.n	800673a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006738:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800675e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0210 	bic.w	r2, r2, #16
 800676e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d108      	bne.n	800678a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0204 	orr.w	r2, r2, #4
 8006786:	619a      	str	r2, [r3, #24]
 8006788:	e030      	b.n	80067ec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d02c      	beq.n	80067ec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d020      	beq.n	80067dc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	699a      	ldr	r2, [r3, #24]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0210 	orr.w	r2, r2, #16
 80067b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d114      	bne.n	80067ec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0220 	orr.w	r2, r2, #32
 80067d0:	619a      	str	r2, [r3, #24]
 80067d2:	e00b      	b.n	80067ec <HAL_FDCAN_Init+0x234>
 80067d4:	0801b2c4 	.word	0x0801b2c4
 80067d8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0220 	orr.w	r2, r2, #32
 80067ea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067fc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006804:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	3b01      	subs	r3, #1
 800680e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006814:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006816:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006820:	d115      	bne.n	800684e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	3b01      	subs	r3, #1
 800682e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006830:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	3b01      	subs	r3, #1
 8006838:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800683a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	3b01      	subs	r3, #1
 8006844:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800684a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800684c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006874:	4413      	add	r3, r2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d012      	beq.n	80068a0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006882:	f023 0107 	bic.w	r1, r3, #7
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006890:	4413      	add	r3, r2
 8006892:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d012      	beq.n	80068ce <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80068b0:	f023 0107 	bic.w	r1, r3, #7
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80068be:	4413      	add	r3, r2
 80068c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d013      	beq.n	80068fe <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80068de:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80068ec:	4413      	add	r3, r2
 80068ee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80068f2:	011a      	lsls	r2, r3, #4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006902:	2b00      	cmp	r3, #0
 8006904:	d013      	beq.n	800692e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800690e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800691c:	4413      	add	r3, r2
 800691e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006922:	021a      	lsls	r2, r3, #8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a11      	ldr	r2, [pc, #68]	; (8006978 <HAL_FDCAN_Init+0x3c0>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d107      	bne.n	8006948 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f022 0203 	bic.w	r2, r2, #3
 8006946:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fb15 	bl	8006f90 <FDCAN_CalcultateRamBlockAddresses>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800696c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006970:	4618      	mov	r0, r3
 8006972:	3760      	adds	r7, #96	; 0x60
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	4000a000 	.word	0x4000a000

0800697c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b092      	sub	sp, #72	; 0x48
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006984:	4b90      	ldr	r3, [pc, #576]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	079b      	lsls	r3, r3, #30
 800698a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800698c:	4b8e      	ldr	r3, [pc, #568]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	079b      	lsls	r3, r3, #30
 8006992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006994:	4013      	ands	r3, r2
 8006996:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80069a2:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ac:	4013      	ands	r3, r2
 80069ae:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069c4:	4013      	ands	r3, r2
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069dc:	4013      	ands	r3, r2
 80069de:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f4:	4013      	ands	r3, r2
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fe:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8006a02:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d011      	beq.n	8006a42 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a34:	651a      	str	r2, [r3, #80]	; 0x50
 8006a36:	4b64      	ldr	r3, [pc, #400]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fa5a 	bl	8006ef6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01e      	beq.n	8006a8e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d017      	beq.n	8006a8e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a72:	4013      	ands	r3, r2
 8006a74:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a7e:	651a      	str	r2, [r3, #80]	; 0x50
 8006a80:	4b51      	ldr	r3, [pc, #324]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fa0b 	bl	8006ea4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00d      	beq.n	8006ab0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a9a:	4b4c      	ldr	r3, [pc, #304]	; (8006bcc <HAL_FDCAN_IRQHandler+0x250>)
 8006a9c:	400b      	ands	r3, r1
 8006a9e:	6513      	str	r3, [r2, #80]	; 0x50
 8006aa0:	4a49      	ldr	r2, [pc, #292]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa4:	0f9b      	lsrs	r3, r3, #30
 8006aa6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006aa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f9c4 	bl	8006e38 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006abc:	4b43      	ldr	r3, [pc, #268]	; (8006bcc <HAL_FDCAN_IRQHandler+0x250>)
 8006abe:	400b      	ands	r3, r1
 8006ac0:	6513      	str	r3, [r2, #80]	; 0x50
 8006ac2:	4a41      	ldr	r2, [pc, #260]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac6:	0f9b      	lsrs	r3, r3, #30
 8006ac8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f9be 	bl	8006e4e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ade:	4b3b      	ldr	r3, [pc, #236]	; (8006bcc <HAL_FDCAN_IRQHandler+0x250>)
 8006ae0:	400b      	ands	r3, r1
 8006ae2:	6513      	str	r3, [r2, #80]	; 0x50
 8006ae4:	4a38      	ldr	r2, [pc, #224]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae8:	0f9b      	lsrs	r3, r3, #30
 8006aea:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006aec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fa fa92 	bl	8001018 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b00:	4b32      	ldr	r3, [pc, #200]	; (8006bcc <HAL_FDCAN_IRQHandler+0x250>)
 8006b02:	400b      	ands	r3, r1
 8006b04:	6513      	str	r3, [r2, #80]	; 0x50
 8006b06:	4a30      	ldr	r2, [pc, #192]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	0f9b      	lsrs	r3, r3, #30
 8006b0c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006b0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f9a7 	bl	8006e64 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d011      	beq.n	8006b48 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b3a:	651a      	str	r2, [r3, #80]	; 0x50
 8006b3c:	4b22      	ldr	r3, [pc, #136]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f999 	bl	8006e7a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01e      	beq.n	8006b94 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d017      	beq.n	8006b94 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006b6c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b78:	4013      	ands	r3, r2
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b84:	651a      	str	r2, [r3, #80]	; 0x50
 8006b86:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f97d 	bl	8006e8e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d016      	beq.n	8006bd0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00f      	beq.n	8006bd0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006bb8:	651a      	str	r2, [r3, #80]	; 0x50
 8006bba:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f97a 	bl	8006eba <HAL_FDCAN_RxBufferNewMessageCallback>
 8006bc6:	e003      	b.n	8006bd0 <HAL_FDCAN_IRQHandler+0x254>
 8006bc8:	4000a800 	.word	0x4000a800
 8006bcc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d011      	beq.n	8006c02 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006bf4:	651a      	str	r2, [r3, #80]	; 0x50
 8006bf6:	4b8d      	ldr	r3, [pc, #564]	; (8006e2c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f966 	bl	8006ece <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d011      	beq.n	8006c34 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006c26:	651a      	str	r2, [r3, #80]	; 0x50
 8006c28:	4b80      	ldr	r3, [pc, #512]	; (8006e2c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f957 	bl	8006ee2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d016      	beq.n	8006c70 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00f      	beq.n	8006c70 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c58:	651a      	str	r2, [r3, #80]	; 0x50
 8006c5a:	4b74      	ldr	r3, [pc, #464]	; (8006e2c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00d      	beq.n	8006c92 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c7c:	4b6c      	ldr	r3, [pc, #432]	; (8006e30 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006c7e:	400b      	ands	r3, r1
 8006c80:	6513      	str	r3, [r2, #80]	; 0x50
 8006c82:	4a6a      	ldr	r2, [pc, #424]	; (8006e2c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	0f9b      	lsrs	r3, r3, #30
 8006c88:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006c8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f946 	bl	8006f1e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d011      	beq.n	8006cbc <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c9e:	4b64      	ldr	r3, [pc, #400]	; (8006e30 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006ca0:	400b      	ands	r3, r1
 8006ca2:	6513      	str	r3, [r2, #80]	; 0x50
 8006ca4:	4a61      	ldr	r2, [pc, #388]	; (8006e2c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	0f9b      	lsrs	r3, r3, #30
 8006caa:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a5c      	ldr	r2, [pc, #368]	; (8006e34 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	f040 80a6 	bne.w	8006e14 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 809e 	beq.w	8006e14 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cec:	4013      	ands	r3, r2
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cfa:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	6a3a      	ldr	r2, [r7, #32]
 8006d04:	4013      	ands	r3, r2
 8006d06:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006d12:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006d2a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	4013      	ands	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006d42:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006d5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f8e7 	bl	8006f34 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006d74:	6a39      	ldr	r1, [r7, #32]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8e7 	bl	8006f4a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01b      	beq.n	8006dc2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d014      	beq.n	8006dc2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9e:	0c1b      	lsrs	r3, r3, #16
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006daa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dae:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2240      	movs	r2, #64	; 0x40
 8006db6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	6939      	ldr	r1, [r7, #16]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f8cf 	bl	8006f60 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006dd0:	69f9      	ldr	r1, [r7, #28]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f8d0 	bl	8006f78 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00b      	beq.n	8006df6 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f873 	bl	8006f0a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006e24:	bf00      	nop
 8006e26:	3748      	adds	r7, #72	; 0x48
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	4000a800 	.word	0x4000a800
 8006e30:	3fcfffff 	.word	0x3fcfffff
 8006e34:	4000a000 	.word	0x4000a000

08006e38 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006efe:	bf00      	nop
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006fa6:	4ba7      	ldr	r3, [pc, #668]	; (8007244 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	0091      	lsls	r1, r2, #2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6812      	ldr	r2, [r2, #0]
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	041a      	lsls	r2, r3, #16
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	4413      	add	r3, r2
 8006fdc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fe6:	4b97      	ldr	r3, [pc, #604]	; (8007244 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	0091      	lsls	r1, r2, #2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6812      	ldr	r2, [r2, #0]
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007000:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007008:	041a      	lsls	r2, r3, #16
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	4413      	add	r3, r2
 800701e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007028:	4b86      	ldr	r3, [pc, #536]	; (8007244 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800702a:	4013      	ands	r3, r2
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	0091      	lsls	r1, r2, #2
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6812      	ldr	r2, [r2, #0]
 8007034:	430b      	orrs	r3, r1
 8007036:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007042:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	041a      	lsls	r2, r3, #16
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	4413      	add	r3, r2
 8007066:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007070:	4b74      	ldr	r3, [pc, #464]	; (8007244 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007072:	4013      	ands	r3, r2
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	0091      	lsls	r1, r2, #2
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6812      	ldr	r2, [r2, #0]
 800707c:	430b      	orrs	r3, r1
 800707e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800708a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007092:	041a      	lsls	r2, r3, #16
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4413      	add	r3, r2
 80070ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80070b8:	4b62      	ldr	r3, [pc, #392]	; (8007244 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	0091      	lsls	r1, r2, #2
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6812      	ldr	r2, [r2, #0]
 80070c4:	430b      	orrs	r3, r1
 80070c6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80070d2:	fb02 f303 	mul.w	r3, r2, r3
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	4413      	add	r3, r2
 80070da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80070e4:	4b57      	ldr	r3, [pc, #348]	; (8007244 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070e6:	4013      	ands	r3, r2
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	0091      	lsls	r1, r2, #2
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6812      	ldr	r2, [r2, #0]
 80070f0:	430b      	orrs	r3, r1
 80070f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070fe:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007106:	041a      	lsls	r2, r3, #16
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	4413      	add	r3, r2
 800711c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007126:	4b47      	ldr	r3, [pc, #284]	; (8007244 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007128:	4013      	ands	r3, r2
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	0091      	lsls	r1, r2, #2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	430b      	orrs	r3, r1
 8007134:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007140:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007148:	041a      	lsls	r2, r3, #16
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800715c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007164:	061a      	lsls	r2, r3, #24
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007174:	4b34      	ldr	r3, [pc, #208]	; (8007248 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007176:	4413      	add	r3, r2
 8007178:	009a      	lsls	r2, r3, #2
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	441a      	add	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	441a      	add	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80071aa:	fb01 f303 	mul.w	r3, r1, r3
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	441a      	add	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	441a      	add	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	441a      	add	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800720a:	fb01 f303 	mul.w	r3, r1, r3
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007226:	fb01 f303 	mul.w	r3, r1, r3
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	441a      	add	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	4a04      	ldr	r2, [pc, #16]	; (800724c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d915      	bls.n	800726c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007240:	e006      	b.n	8007250 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007242:	bf00      	nop
 8007244:	ffff0003 	.word	0xffff0003
 8007248:	10002b00 	.word	0x10002b00
 800724c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007256:	f043 0220 	orr.w	r2, r3, #32
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2203      	movs	r2, #3
 8007264:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e010      	b.n	800728e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	e005      	b.n	8007280 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3304      	adds	r3, #4
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	429a      	cmp	r2, r3
 800728a:	d3f3      	bcc.n	8007274 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop

0800729c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	; 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80072aa:	4b89      	ldr	r3, [pc, #548]	; (80074d0 <HAL_GPIO_Init+0x234>)
 80072ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072ae:	e194      	b.n	80075da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	2101      	movs	r1, #1
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	fa01 f303 	lsl.w	r3, r1, r3
 80072bc:	4013      	ands	r3, r2
 80072be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 8186 	beq.w	80075d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d00b      	beq.n	80072e8 <HAL_GPIO_Init+0x4c>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d007      	beq.n	80072e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80072dc:	2b11      	cmp	r3, #17
 80072de:	d003      	beq.n	80072e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2b12      	cmp	r3, #18
 80072e6:	d130      	bne.n	800734a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	2203      	movs	r2, #3
 80072f4:	fa02 f303 	lsl.w	r3, r2, r3
 80072f8:	43db      	mvns	r3, r3
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	4013      	ands	r3, r2
 80072fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	4313      	orrs	r3, r2
 8007310:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800731e:	2201      	movs	r2, #1
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	43db      	mvns	r3, r3
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	4013      	ands	r3, r2
 800732c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	091b      	lsrs	r3, r3, #4
 8007334:	f003 0201 	and.w	r2, r3, #1
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	fa02 f303 	lsl.w	r3, r2, r3
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	4313      	orrs	r3, r2
 8007342:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	2203      	movs	r2, #3
 8007356:	fa02 f303 	lsl.w	r3, r2, r3
 800735a:	43db      	mvns	r3, r3
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	4013      	ands	r3, r2
 8007360:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	4313      	orrs	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d003      	beq.n	800738a <HAL_GPIO_Init+0xee>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b12      	cmp	r3, #18
 8007388:	d123      	bne.n	80073d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	08da      	lsrs	r2, r3, #3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3208      	adds	r2, #8
 8007392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	220f      	movs	r2, #15
 80073a2:	fa02 f303 	lsl.w	r3, r2, r3
 80073a6:	43db      	mvns	r3, r3
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	4013      	ands	r3, r2
 80073ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	08da      	lsrs	r2, r3, #3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3208      	adds	r2, #8
 80073cc:	69b9      	ldr	r1, [r7, #24]
 80073ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	2203      	movs	r2, #3
 80073de:	fa02 f303 	lsl.w	r3, r2, r3
 80073e2:	43db      	mvns	r3, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4013      	ands	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f003 0203 	and.w	r2, r3, #3
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 80e0 	beq.w	80075d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007414:	4b2f      	ldr	r3, [pc, #188]	; (80074d4 <HAL_GPIO_Init+0x238>)
 8007416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800741a:	4a2e      	ldr	r2, [pc, #184]	; (80074d4 <HAL_GPIO_Init+0x238>)
 800741c:	f043 0302 	orr.w	r3, r3, #2
 8007420:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007424:	4b2b      	ldr	r3, [pc, #172]	; (80074d4 <HAL_GPIO_Init+0x238>)
 8007426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007432:	4a29      	ldr	r2, [pc, #164]	; (80074d8 <HAL_GPIO_Init+0x23c>)
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	089b      	lsrs	r3, r3, #2
 8007438:	3302      	adds	r3, #2
 800743a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	220f      	movs	r2, #15
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43db      	mvns	r3, r3
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	4013      	ands	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a20      	ldr	r2, [pc, #128]	; (80074dc <HAL_GPIO_Init+0x240>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d052      	beq.n	8007504 <HAL_GPIO_Init+0x268>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a1f      	ldr	r2, [pc, #124]	; (80074e0 <HAL_GPIO_Init+0x244>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d031      	beq.n	80074ca <HAL_GPIO_Init+0x22e>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a1e      	ldr	r2, [pc, #120]	; (80074e4 <HAL_GPIO_Init+0x248>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d02b      	beq.n	80074c6 <HAL_GPIO_Init+0x22a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a1d      	ldr	r2, [pc, #116]	; (80074e8 <HAL_GPIO_Init+0x24c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d025      	beq.n	80074c2 <HAL_GPIO_Init+0x226>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a1c      	ldr	r2, [pc, #112]	; (80074ec <HAL_GPIO_Init+0x250>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01f      	beq.n	80074be <HAL_GPIO_Init+0x222>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a1b      	ldr	r2, [pc, #108]	; (80074f0 <HAL_GPIO_Init+0x254>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d019      	beq.n	80074ba <HAL_GPIO_Init+0x21e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a1a      	ldr	r2, [pc, #104]	; (80074f4 <HAL_GPIO_Init+0x258>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <HAL_GPIO_Init+0x21a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a19      	ldr	r2, [pc, #100]	; (80074f8 <HAL_GPIO_Init+0x25c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00d      	beq.n	80074b2 <HAL_GPIO_Init+0x216>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a18      	ldr	r2, [pc, #96]	; (80074fc <HAL_GPIO_Init+0x260>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d007      	beq.n	80074ae <HAL_GPIO_Init+0x212>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a17      	ldr	r2, [pc, #92]	; (8007500 <HAL_GPIO_Init+0x264>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d101      	bne.n	80074aa <HAL_GPIO_Init+0x20e>
 80074a6:	2309      	movs	r3, #9
 80074a8:	e02d      	b.n	8007506 <HAL_GPIO_Init+0x26a>
 80074aa:	230a      	movs	r3, #10
 80074ac:	e02b      	b.n	8007506 <HAL_GPIO_Init+0x26a>
 80074ae:	2308      	movs	r3, #8
 80074b0:	e029      	b.n	8007506 <HAL_GPIO_Init+0x26a>
 80074b2:	2307      	movs	r3, #7
 80074b4:	e027      	b.n	8007506 <HAL_GPIO_Init+0x26a>
 80074b6:	2306      	movs	r3, #6
 80074b8:	e025      	b.n	8007506 <HAL_GPIO_Init+0x26a>
 80074ba:	2305      	movs	r3, #5
 80074bc:	e023      	b.n	8007506 <HAL_GPIO_Init+0x26a>
 80074be:	2304      	movs	r3, #4
 80074c0:	e021      	b.n	8007506 <HAL_GPIO_Init+0x26a>
 80074c2:	2303      	movs	r3, #3
 80074c4:	e01f      	b.n	8007506 <HAL_GPIO_Init+0x26a>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e01d      	b.n	8007506 <HAL_GPIO_Init+0x26a>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e01b      	b.n	8007506 <HAL_GPIO_Init+0x26a>
 80074ce:	bf00      	nop
 80074d0:	58000080 	.word	0x58000080
 80074d4:	58024400 	.word	0x58024400
 80074d8:	58000400 	.word	0x58000400
 80074dc:	58020000 	.word	0x58020000
 80074e0:	58020400 	.word	0x58020400
 80074e4:	58020800 	.word	0x58020800
 80074e8:	58020c00 	.word	0x58020c00
 80074ec:	58021000 	.word	0x58021000
 80074f0:	58021400 	.word	0x58021400
 80074f4:	58021800 	.word	0x58021800
 80074f8:	58021c00 	.word	0x58021c00
 80074fc:	58022000 	.word	0x58022000
 8007500:	58022400 	.word	0x58022400
 8007504:	2300      	movs	r3, #0
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	f002 0203 	and.w	r2, r2, #3
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	4093      	lsls	r3, r2
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	4313      	orrs	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007516:	4938      	ldr	r1, [pc, #224]	; (80075f8 <HAL_GPIO_Init+0x35c>)
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	089b      	lsrs	r3, r3, #2
 800751c:	3302      	adds	r3, #2
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	43db      	mvns	r3, r3
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	4013      	ands	r3, r2
 8007532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	4313      	orrs	r3, r2
 8007546:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	43db      	mvns	r3, r3
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	4013      	ands	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	43db      	mvns	r3, r3
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	4013      	ands	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	4313      	orrs	r3, r2
 800759c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800759e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	43db      	mvns	r3, r3
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	4013      	ands	r3, r2
 80075b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80075cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	3301      	adds	r3, #1
 80075d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	fa22 f303 	lsr.w	r3, r2, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f47f ae63 	bne.w	80072b0 <HAL_GPIO_Init+0x14>
  }
}
 80075ea:	bf00      	nop
 80075ec:	3724      	adds	r7, #36	; 0x24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	58000400 	.word	0x58000400

080075fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691a      	ldr	r2, [r3, #16]
 800760c:	887b      	ldrh	r3, [r7, #2]
 800760e:	4013      	ands	r3, r2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007614:	2301      	movs	r3, #1
 8007616:	73fb      	strb	r3, [r7, #15]
 8007618:	e001      	b.n	800761e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	807b      	strh	r3, [r7, #2]
 8007638:	4613      	mov	r3, r2
 800763a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800763c:	787b      	ldrb	r3, [r7, #1]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007642:	887a      	ldrh	r2, [r7, #2]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007648:	e003      	b.n	8007652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800764a:	887b      	ldrh	r3, [r7, #2]
 800764c:	041a      	lsls	r2, r3, #16
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	619a      	str	r2, [r3, #24]
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695a      	ldr	r2, [r3, #20]
 800766e:	887b      	ldrh	r3, [r7, #2]
 8007670:	401a      	ands	r2, r3
 8007672:	887b      	ldrh	r3, [r7, #2]
 8007674:	429a      	cmp	r2, r3
 8007676:	d104      	bne.n	8007682 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007678:	887b      	ldrh	r3, [r7, #2]
 800767a:	041a      	lsls	r2, r3, #16
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007680:	e002      	b.n	8007688 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007682:	887a      	ldrh	r2, [r7, #2]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	619a      	str	r2, [r3, #24]
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	4603      	mov	r3, r0
 800769c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800769e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	4013      	ands	r3, r2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f804 	bl	80076c8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80076de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076e0:	b08f      	sub	sp, #60	; 0x3c
 80076e2:	af0a      	add	r7, sp, #40	; 0x28
 80076e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e116      	b.n	800791e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f013 f992 	bl	801aa34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2203      	movs	r2, #3
 8007714:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007720:	2b00      	cmp	r3, #0
 8007722:	d102      	bne.n	800772a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f009 ff19 	bl	8011566 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	603b      	str	r3, [r7, #0]
 800773a:	687e      	ldr	r6, [r7, #4]
 800773c:	466d      	mov	r5, sp
 800773e:	f106 0410 	add.w	r4, r6, #16
 8007742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800774a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800774e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007752:	1d33      	adds	r3, r6, #4
 8007754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007756:	6838      	ldr	r0, [r7, #0]
 8007758:	f009 fdf0 	bl	801133c <USB_CoreInit>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2202      	movs	r2, #2
 8007766:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e0d7      	b.n	800791e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2100      	movs	r1, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f009 ff07 	bl	8011588 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]
 800777e:	e04a      	b.n	8007816 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007780:	7bfa      	ldrb	r2, [r7, #15]
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	4613      	mov	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	1a9b      	subs	r3, r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	333d      	adds	r3, #61	; 0x3d
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007794:	7bfa      	ldrb	r2, [r7, #15]
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	4613      	mov	r3, r2
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	1a9b      	subs	r3, r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	333c      	adds	r3, #60	; 0x3c
 80077a4:	7bfa      	ldrb	r2, [r7, #15]
 80077a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80077a8:	7bfa      	ldrb	r2, [r7, #15]
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	b298      	uxth	r0, r3
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	4613      	mov	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	1a9b      	subs	r3, r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	440b      	add	r3, r1
 80077ba:	3342      	adds	r3, #66	; 0x42
 80077bc:	4602      	mov	r2, r0
 80077be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80077c0:	7bfa      	ldrb	r2, [r7, #15]
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	1a9b      	subs	r3, r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	440b      	add	r3, r1
 80077ce:	333f      	adds	r3, #63	; 0x3f
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80077d4:	7bfa      	ldrb	r2, [r7, #15]
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	4613      	mov	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	3344      	adds	r3, #68	; 0x44
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80077e8:	7bfa      	ldrb	r2, [r7, #15]
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	4613      	mov	r3, r2
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	1a9b      	subs	r3, r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	3348      	adds	r3, #72	; 0x48
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80077fc:	7bfa      	ldrb	r2, [r7, #15]
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	440b      	add	r3, r1
 800780a:	3350      	adds	r3, #80	; 0x50
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	3301      	adds	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
 8007816:	7bfa      	ldrb	r2, [r7, #15]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	429a      	cmp	r2, r3
 800781e:	d3af      	bcc.n	8007780 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
 8007824:	e044      	b.n	80078b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007826:	7bfa      	ldrb	r2, [r7, #15]
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	1a9b      	subs	r3, r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800783c:	7bfa      	ldrb	r2, [r7, #15]
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	4613      	mov	r3, r2
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800784e:	7bfa      	ldrb	r2, [r7, #15]
 8007850:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007852:	7bfa      	ldrb	r2, [r7, #15]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	1a9b      	subs	r3, r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007864:	2200      	movs	r2, #0
 8007866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007868:	7bfa      	ldrb	r2, [r7, #15]
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	4613      	mov	r3, r2
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	1a9b      	subs	r3, r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	440b      	add	r3, r1
 8007876:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800787e:	7bfa      	ldrb	r2, [r7, #15]
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	4613      	mov	r3, r2
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	440b      	add	r3, r1
 800788c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007894:	7bfa      	ldrb	r2, [r7, #15]
 8007896:	6879      	ldr	r1, [r7, #4]
 8007898:	4613      	mov	r3, r2
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	440b      	add	r3, r1
 80078a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	3301      	adds	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	7bfa      	ldrb	r2, [r7, #15]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d3b5      	bcc.n	8007826 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	687e      	ldr	r6, [r7, #4]
 80078c2:	466d      	mov	r5, sp
 80078c4:	f106 0410 	add.w	r4, r6, #16
 80078c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80078d8:	1d33      	adds	r3, r6, #4
 80078da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078dc:	6838      	ldr	r0, [r7, #0]
 80078de:	f009 fe7d 	bl	80115dc <USB_DevInit>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e014      	b.n	800791e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2b01      	cmp	r3, #1
 800790a:	d102      	bne.n	8007912 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f8bf 	bl	8008a90 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f00a fe64 	bl	80125e4 <USB_DevDisconnect>

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007926 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_PCD_Start+0x1c>
 800793e:	2302      	movs	r3, #2
 8007940:	e020      	b.n	8007984 <HAL_PCD_Start+0x5e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	2b01      	cmp	r3, #1
 8007950:	d109      	bne.n	8007966 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007956:	2b01      	cmp	r3, #1
 8007958:	d005      	beq.n	8007966 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4618      	mov	r0, r3
 800796c:	f00a fe22 	bl	80125b4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f009 fde5 	bl	8011544 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800798c:	b590      	push	{r4, r7, lr}
 800798e:	b08d      	sub	sp, #52	; 0x34
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f00a fec9 	bl	801273a <USB_GetMode>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f040 83ca 	bne.w	8008144 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f00a fe2d 	bl	8012614 <USB_ReadInterrupts>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 83c0 	beq.w	8008142 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f00a fe24 	bl	8012614 <USB_ReadInterrupts>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d107      	bne.n	80079e6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695a      	ldr	r2, [r3, #20]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f002 0202 	and.w	r2, r2, #2
 80079e4:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f00a fe12 	bl	8012614 <USB_ReadInterrupts>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f003 0310 	and.w	r3, r3, #16
 80079f6:	2b10      	cmp	r3, #16
 80079f8:	d161      	bne.n	8007abe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	699a      	ldr	r2, [r3, #24]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 0210 	bic.w	r2, r2, #16
 8007a08:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	f003 020f 	and.w	r2, r3, #15
 8007a16:	4613      	mov	r3, r2
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	4413      	add	r3, r2
 8007a26:	3304      	adds	r3, #4
 8007a28:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	0c5b      	lsrs	r3, r3, #17
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d124      	bne.n	8007a80 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d035      	beq.n	8007aae <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	091b      	lsrs	r3, r3, #4
 8007a4a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	6a38      	ldr	r0, [r7, #32]
 8007a56:	f00a fc8a 	bl	801236e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	091b      	lsrs	r3, r3, #4
 8007a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a66:	441a      	add	r2, r3
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	091b      	lsrs	r3, r3, #4
 8007a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a78:	441a      	add	r2, r3
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	619a      	str	r2, [r3, #24]
 8007a7e:	e016      	b.n	8007aae <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	0c5b      	lsrs	r3, r3, #17
 8007a84:	f003 030f 	and.w	r3, r3, #15
 8007a88:	2b06      	cmp	r3, #6
 8007a8a:	d110      	bne.n	8007aae <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a92:	2208      	movs	r2, #8
 8007a94:	4619      	mov	r1, r3
 8007a96:	6a38      	ldr	r0, [r7, #32]
 8007a98:	f00a fc69 	bl	801236e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	699a      	ldr	r2, [r3, #24]
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	091b      	lsrs	r3, r3, #4
 8007aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aa8:	441a      	add	r2, r3
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	699a      	ldr	r2, [r3, #24]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f042 0210 	orr.w	r2, r2, #16
 8007abc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f00a fda6 	bl	8012614 <USB_ReadInterrupts>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ace:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ad2:	d16e      	bne.n	8007bb2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f00a fdac 	bl	801263a <USB_ReadDevAllOutEpInterrupt>
 8007ae2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007ae4:	e062      	b.n	8007bac <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d057      	beq.n	8007ba0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af6:	b2d2      	uxtb	r2, r2
 8007af8:	4611      	mov	r1, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f00a fdd1 	bl	80126a2 <USB_ReadDevOutEPInterrupt>
 8007b00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b18:	461a      	mov	r2, r3
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007b1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fe0b 	bl	800873c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00c      	beq.n	8007b4a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	2308      	movs	r3, #8
 8007b40:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 ff05 	bl	8008954 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f003 0310 	and.w	r3, r3, #16
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d008      	beq.n	8007b66 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b60:	461a      	mov	r2, r3
 8007b62:	2310      	movs	r3, #16
 8007b64:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d008      	beq.n	8007b82 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	2320      	movs	r3, #32
 8007b80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d009      	beq.n	8007ba0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b9e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	085b      	lsrs	r3, r3, #1
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d199      	bne.n	8007ae6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f00a fd2c 	bl	8012614 <USB_ReadInterrupts>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bc6:	f040 80c0 	bne.w	8007d4a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f00a fd4d 	bl	801266e <USB_ReadDevAllInEpInterrupt>
 8007bd4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007bda:	e0b2      	b.n	8007d42 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 80a7 	beq.w	8007d36 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f00a fd73 	bl	80126de <USB_ReadDevInEPInterrupt>
 8007bf8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d057      	beq.n	8007cb4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	43db      	mvns	r3, r3
 8007c1e:	69f9      	ldr	r1, [r7, #28]
 8007c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c24:	4013      	ands	r3, r2
 8007c26:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c34:	461a      	mov	r2, r3
 8007c36:	2301      	movs	r3, #1
 8007c38:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d132      	bne.n	8007ca8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c46:	4613      	mov	r3, r2
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	440b      	add	r3, r1
 8007c50:	3348      	adds	r3, #72	; 0x48
 8007c52:	6819      	ldr	r1, [r3, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4403      	add	r3, r0
 8007c62:	3344      	adds	r3, #68	; 0x44
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4419      	add	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	1a9b      	subs	r3, r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4403      	add	r3, r0
 8007c76:	3348      	adds	r3, #72	; 0x48
 8007c78:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d113      	bne.n	8007ca8 <HAL_PCD_IRQHandler+0x31c>
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c84:	4613      	mov	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	3350      	adds	r3, #80	; 0x50
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d108      	bne.n	8007ca8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6818      	ldr	r0, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	f00a fd7c 	bl	80127a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f012 ff3f 	bl	801ab32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f003 0308 	and.w	r3, r3, #8
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2308      	movs	r3, #8
 8007cce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f003 0310 	and.w	r3, r3, #16
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	2310      	movs	r3, #16
 8007cea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d008      	beq.n	8007d08 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d02:	461a      	mov	r2, r3
 8007d04:	2340      	movs	r3, #64	; 0x40
 8007d06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1e:	461a      	mov	r2, r3
 8007d20:	2302      	movs	r3, #2
 8007d22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc75 	bl	8008620 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	3301      	adds	r3, #1
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f47f af49 	bne.w	8007bdc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f00a fc60 	bl	8012614 <USB_ReadInterrupts>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d5e:	d122      	bne.n	8007da6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	69fa      	ldr	r2, [r7, #28]
 8007d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d6e:	f023 0301 	bic.w	r3, r3, #1
 8007d72:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d108      	bne.n	8007d90 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007d86:	2100      	movs	r1, #0
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fea5 	bl	8008ad8 <HAL_PCDEx_LPM_Callback>
 8007d8e:	e002      	b.n	8007d96 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f012 ff45 	bl	801ac20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695a      	ldr	r2, [r3, #20]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f00a fc32 	bl	8012614 <USB_ReadInterrupts>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dba:	d112      	bne.n	8007de2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d102      	bne.n	8007dd2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f012 ff01 	bl	801abd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695a      	ldr	r2, [r3, #20]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007de0:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f00a fc14 	bl	8012614 <USB_ReadInterrupts>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007df6:	d121      	bne.n	8007e3c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695a      	ldr	r2, [r3, #20]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007e06:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d111      	bne.n	8007e36 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e20:	089b      	lsrs	r3, r3, #2
 8007e22:	f003 020f 	and.w	r2, r3, #15
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fe52 	bl	8008ad8 <HAL_PCDEx_LPM_Callback>
 8007e34:	e002      	b.n	8007e3c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f012 fecc 	bl	801abd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f00a fbe7 	bl	8012614 <USB_ReadInterrupts>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e50:	f040 80c7 	bne.w	8007fe2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	69fa      	ldr	r2, [r7, #28]
 8007e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e62:	f023 0301 	bic.w	r3, r3, #1
 8007e66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2110      	movs	r1, #16
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f009 fd12 	bl	8011898 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e74:	2300      	movs	r3, #0
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e78:	e056      	b.n	8007f28 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e86:	461a      	mov	r2, r3
 8007e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e9e:	0151      	lsls	r1, r2, #5
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	440a      	add	r2, r1
 8007ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ebe:	0151      	lsls	r1, r2, #5
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	440a      	add	r2, r1
 8007ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ecc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eda:	461a      	mov	r2, r3
 8007edc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ee0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef2:	0151      	lsls	r1, r2, #5
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	440a      	add	r2, r1
 8007ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007efc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f12:	0151      	lsls	r1, r2, #5
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	440a      	add	r2, r1
 8007f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	3301      	adds	r3, #1
 8007f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d3a3      	bcc.n	8007e7a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d016      	beq.n	8007f7c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f5e:	f043 030b 	orr.w	r3, r3, #11
 8007f62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f74:	f043 030b 	orr.w	r3, r3, #11
 8007f78:	6453      	str	r3, [r2, #68]	; 0x44
 8007f7a:	e015      	b.n	8007fa8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f82:	695a      	ldr	r2, [r3, #20]
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	f242 032b 	movw	r3, #8235	; 0x202b
 8007f90:	4313      	orrs	r3, r2
 8007f92:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa2:	f043 030b 	orr.w	r3, r3, #11
 8007fa6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f00a fbe7 	bl	80127a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	695a      	ldr	r2, [r3, #20]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f00a fb14 	bl	8012614 <USB_ReadInterrupts>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ff6:	d124      	bne.n	8008042 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f00a fbab 	bl	8012758 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4618      	mov	r0, r3
 8008008:	f009 fca7 	bl	801195a <USB_GetDevSpeed>
 800800c:	4603      	mov	r3, r0
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681c      	ldr	r4, [r3, #0]
 8008018:	f001 fcb4 	bl	8009984 <HAL_RCC_GetHCLKFreq>
 800801c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008022:	b2db      	uxtb	r3, r3
 8008024:	461a      	mov	r2, r3
 8008026:	4620      	mov	r0, r4
 8008028:	f009 f9ea 	bl	8011400 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f012 fda8 	bl	801ab82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695a      	ldr	r2, [r3, #20]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008040:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f00a fae4 	bl	8012614 <USB_ReadInterrupts>
 800804c:	4603      	mov	r3, r0
 800804e:	f003 0308 	and.w	r3, r3, #8
 8008052:	2b08      	cmp	r3, #8
 8008054:	d10a      	bne.n	800806c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f012 fd85 	bl	801ab66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695a      	ldr	r2, [r3, #20]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f002 0208 	and.w	r2, r2, #8
 800806a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4618      	mov	r0, r3
 8008072:	f00a facf 	bl	8012614 <USB_ReadInterrupts>
 8008076:	4603      	mov	r3, r0
 8008078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008080:	d10f      	bne.n	80080a2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	b2db      	uxtb	r3, r3
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f012 fde7 	bl	801ac60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	695a      	ldr	r2, [r3, #20]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80080a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f00a fab4 	bl	8012614 <USB_ReadInterrupts>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080b6:	d10f      	bne.n	80080d8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f012 fdba 	bl	801ac3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	695a      	ldr	r2, [r3, #20]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80080d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f00a fa99 	bl	8012614 <USB_ReadInterrupts>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ec:	d10a      	bne.n	8008104 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f012 fdc8 	bl	801ac84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	695a      	ldr	r2, [r3, #20]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4618      	mov	r0, r3
 800810a:	f00a fa83 	bl	8012614 <USB_ReadInterrupts>
 800810e:	4603      	mov	r3, r0
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b04      	cmp	r3, #4
 8008116:	d115      	bne.n	8008144 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f012 fdb8 	bl	801aca0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6859      	ldr	r1, [r3, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	430a      	orrs	r2, r1
 800813e:	605a      	str	r2, [r3, #4]
 8008140:	e000      	b.n	8008144 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008142:	bf00      	nop
    }
  }
}
 8008144:	3734      	adds	r7, #52	; 0x34
 8008146:	46bd      	mov	sp, r7
 8008148:	bd90      	pop	{r4, r7, pc}

0800814a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800815c:	2b01      	cmp	r3, #1
 800815e:	d101      	bne.n	8008164 <HAL_PCD_SetAddress+0x1a>
 8008160:	2302      	movs	r3, #2
 8008162:	e013      	b.n	800818c <HAL_PCD_SetAddress+0x42>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	78fa      	ldrb	r2, [r7, #3]
 8008170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	78fa      	ldrb	r2, [r7, #3]
 800817a:	4611      	mov	r1, r2
 800817c:	4618      	mov	r0, r3
 800817e:	f00a f9f3 	bl	8012568 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	4608      	mov	r0, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	461a      	mov	r2, r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	70fb      	strb	r3, [r7, #3]
 80081a6:	460b      	mov	r3, r1
 80081a8:	803b      	strh	r3, [r7, #0]
 80081aa:	4613      	mov	r3, r2
 80081ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80081b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	da0f      	bge.n	80081da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	f003 020f 	and.w	r2, r3, #15
 80081c0:	4613      	mov	r3, r2
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	3338      	adds	r3, #56	; 0x38
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	3304      	adds	r3, #4
 80081d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	705a      	strb	r2, [r3, #1]
 80081d8:	e00f      	b.n	80081fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	f003 020f 	and.w	r2, r3, #15
 80081e0:	4613      	mov	r3, r2
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	4413      	add	r3, r2
 80081f0:	3304      	adds	r3, #4
 80081f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80081fa:	78fb      	ldrb	r3, [r7, #3]
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	b2da      	uxtb	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008206:	883a      	ldrh	r2, [r7, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	78ba      	ldrb	r2, [r7, #2]
 8008210:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	785b      	ldrb	r3, [r3, #1]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	b29a      	uxth	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008224:	78bb      	ldrb	r3, [r7, #2]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d102      	bne.n	8008230 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008236:	2b01      	cmp	r3, #1
 8008238:	d101      	bne.n	800823e <HAL_PCD_EP_Open+0xaa>
 800823a:	2302      	movs	r3, #2
 800823c:	e00e      	b.n	800825c <HAL_PCD_EP_Open+0xc8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68f9      	ldr	r1, [r7, #12]
 800824c:	4618      	mov	r0, r3
 800824e:	f009 fba9 	bl	80119a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800825a:	7afb      	ldrb	r3, [r7, #11]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008274:	2b00      	cmp	r3, #0
 8008276:	da0f      	bge.n	8008298 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	f003 020f 	and.w	r2, r3, #15
 800827e:	4613      	mov	r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	3338      	adds	r3, #56	; 0x38
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	4413      	add	r3, r2
 800828c:	3304      	adds	r3, #4
 800828e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	705a      	strb	r2, [r3, #1]
 8008296:	e00f      	b.n	80082b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	f003 020f 	and.w	r2, r3, #15
 800829e:	4613      	mov	r3, r2
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	4413      	add	r3, r2
 80082ae:	3304      	adds	r3, #4
 80082b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	f003 030f 	and.w	r3, r3, #15
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_PCD_EP_Close+0x6e>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e00e      	b.n	80082f0 <HAL_PCD_EP_Close+0x8c>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68f9      	ldr	r1, [r7, #12]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f009 fbe7 	bl	8011ab4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	607a      	str	r2, [r7, #4]
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	460b      	mov	r3, r1
 8008306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	f003 020f 	and.w	r2, r3, #15
 800830e:	4613      	mov	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4413      	add	r3, r2
 800831e:	3304      	adds	r3, #4
 8008320:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2200      	movs	r2, #0
 8008332:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2200      	movs	r2, #0
 8008338:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800833a:	7afb      	ldrb	r3, [r7, #11]
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	b2da      	uxtb	r2, r3
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d102      	bne.n	8008354 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	461a      	mov	r2, r3
 800836a:	6979      	ldr	r1, [r7, #20]
 800836c:	f009 fe72 	bl	8012054 <USB_EP0StartXfer>
 8008370:	e008      	b.n	8008384 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	b2db      	uxtb	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	6979      	ldr	r1, [r7, #20]
 8008380:	f009 fc1c 	bl	8011bbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	f003 020f 	and.w	r2, r3, #15
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	1a9b      	subs	r3, r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	440b      	add	r3, r1
 80083ac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80083b0:	681b      	ldr	r3, [r3, #0]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b086      	sub	sp, #24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	460b      	mov	r3, r1
 80083cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083ce:	7afb      	ldrb	r3, [r7, #11]
 80083d0:	f003 020f 	and.w	r2, r3, #15
 80083d4:	4613      	mov	r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	1a9b      	subs	r3, r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	3338      	adds	r3, #56	; 0x38
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	3304      	adds	r3, #4
 80083e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2200      	movs	r2, #0
 80083f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2201      	movs	r2, #1
 80083fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083fe:	7afb      	ldrb	r3, [r7, #11]
 8008400:	f003 030f 	and.w	r3, r3, #15
 8008404:	b2da      	uxtb	r2, r3
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d102      	bne.n	8008418 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	2b00      	cmp	r3, #0
 8008420:	d109      	bne.n	8008436 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6818      	ldr	r0, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	b2db      	uxtb	r3, r3
 800842c:	461a      	mov	r2, r3
 800842e:	6979      	ldr	r1, [r7, #20]
 8008430:	f009 fe10 	bl	8012054 <USB_EP0StartXfer>
 8008434:	e008      	b.n	8008448 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6818      	ldr	r0, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	461a      	mov	r2, r3
 8008442:	6979      	ldr	r1, [r7, #20]
 8008444:	f009 fbba 	bl	8011bbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	460b      	mov	r3, r1
 800845c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	f003 020f 	and.w	r2, r3, #15
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	429a      	cmp	r2, r3
 800846a:	d901      	bls.n	8008470 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e050      	b.n	8008512 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008474:	2b00      	cmp	r3, #0
 8008476:	da0f      	bge.n	8008498 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	f003 020f 	and.w	r2, r3, #15
 800847e:	4613      	mov	r3, r2
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	1a9b      	subs	r3, r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	3338      	adds	r3, #56	; 0x38
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	4413      	add	r3, r2
 800848c:	3304      	adds	r3, #4
 800848e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	705a      	strb	r2, [r3, #1]
 8008496:	e00d      	b.n	80084b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	4613      	mov	r3, r2
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	3304      	adds	r3, #4
 80084ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2201      	movs	r2, #1
 80084b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084ba:	78fb      	ldrb	r3, [r7, #3]
 80084bc:	f003 030f 	and.w	r3, r3, #15
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d101      	bne.n	80084d4 <HAL_PCD_EP_SetStall+0x82>
 80084d0:	2302      	movs	r3, #2
 80084d2:	e01e      	b.n	8008512 <HAL_PCD_EP_SetStall+0xc0>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68f9      	ldr	r1, [r7, #12]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f009 ff6c 	bl	80123c0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	b2d9      	uxtb	r1, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008502:	461a      	mov	r2, r3
 8008504:	f00a f94c 	bl	80127a0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	f003 020f 	and.w	r2, r3, #15
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d901      	bls.n	8008538 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e042      	b.n	80085be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800853c:	2b00      	cmp	r3, #0
 800853e:	da0f      	bge.n	8008560 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	f003 020f 	and.w	r2, r3, #15
 8008546:	4613      	mov	r3, r2
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	1a9b      	subs	r3, r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	3338      	adds	r3, #56	; 0x38
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	4413      	add	r3, r2
 8008554:	3304      	adds	r3, #4
 8008556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	705a      	strb	r2, [r3, #1]
 800855e:	e00f      	b.n	8008580 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	f003 020f 	and.w	r2, r3, #15
 8008566:	4613      	mov	r3, r2
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	1a9b      	subs	r3, r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	4413      	add	r3, r2
 8008576:	3304      	adds	r3, #4
 8008578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008586:	78fb      	ldrb	r3, [r7, #3]
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	b2da      	uxtb	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_PCD_EP_ClrStall+0x86>
 800859c:	2302      	movs	r3, #2
 800859e:	e00e      	b.n	80085be <HAL_PCD_EP_ClrStall+0xa4>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68f9      	ldr	r1, [r7, #12]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f009 ff74 	bl	801249c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	460b      	mov	r3, r1
 80085d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_PCD_EP_Flush+0x1a>
 80085dc:	2302      	movs	r3, #2
 80085de:	e01b      	b.n	8008618 <HAL_PCD_EP_Flush+0x52>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80085e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	da09      	bge.n	8008604 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	f003 030f 	and.w	r3, r3, #15
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f009 f94b 	bl	8011898 <USB_FlushTxFifo>
 8008602:	e004      	b.n	800860e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4618      	mov	r0, r3
 800860a:	f009 f96b 	bl	80118e4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08a      	sub	sp, #40	; 0x28
 8008624:	af02      	add	r7, sp, #8
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	4613      	mov	r3, r2
 8008638:	00db      	lsls	r3, r3, #3
 800863a:	1a9b      	subs	r3, r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	3338      	adds	r3, #56	; 0x38
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	4413      	add	r3, r2
 8008644:	3304      	adds	r3, #4
 8008646:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	699a      	ldr	r2, [r3, #24]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	429a      	cmp	r2, r3
 8008652:	d901      	bls.n	8008658 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e06c      	b.n	8008732 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	695a      	ldr	r2, [r3, #20]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	69fa      	ldr	r2, [r7, #28]
 800866a:	429a      	cmp	r2, r3
 800866c:	d902      	bls.n	8008674 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	3303      	adds	r3, #3
 8008678:	089b      	lsrs	r3, r3, #2
 800867a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800867c:	e02b      	b.n	80086d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	695a      	ldr	r2, [r3, #20]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	429a      	cmp	r2, r3
 8008692:	d902      	bls.n	800869a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	3303      	adds	r3, #3
 800869e:	089b      	lsrs	r3, r3, #2
 80086a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	68d9      	ldr	r1, [r3, #12]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	4603      	mov	r3, r0
 80086b8:	6978      	ldr	r0, [r7, #20]
 80086ba:	f009 fe23 	bl	8012304 <USB_WritePacket>

    ep->xfer_buff  += len;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	441a      	add	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	699a      	ldr	r2, [r3, #24]
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	441a      	add	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d809      	bhi.n	8008700 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	699a      	ldr	r2, [r3, #24]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d203      	bcs.n	8008700 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1be      	bne.n	800867e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	695a      	ldr	r2, [r3, #20]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	429a      	cmp	r2, r3
 800870a:	d811      	bhi.n	8008730 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	f003 030f 	and.w	r3, r3, #15
 8008712:	2201      	movs	r2, #1
 8008714:	fa02 f303 	lsl.w	r3, r2, r3
 8008718:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	43db      	mvns	r3, r3
 8008726:	6939      	ldr	r1, [r7, #16]
 8008728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800872c:	4013      	ands	r3, r2
 800872e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3720      	adds	r7, #32
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	333c      	adds	r3, #60	; 0x3c
 8008754:	3304      	adds	r3, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	2b01      	cmp	r3, #1
 8008770:	f040 80a0 	bne.w	80088b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f003 0308 	and.w	r3, r3, #8
 800877a:	2b00      	cmp	r3, #0
 800877c:	d015      	beq.n	80087aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4a72      	ldr	r2, [pc, #456]	; (800894c <PCD_EP_OutXfrComplete_int+0x210>)
 8008782:	4293      	cmp	r3, r2
 8008784:	f240 80dd 	bls.w	8008942 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 80d7 	beq.w	8008942 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a0:	461a      	mov	r2, r3
 80087a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a6:	6093      	str	r3, [r2, #8]
 80087a8:	e0cb      	b.n	8008942 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c0:	461a      	mov	r2, r3
 80087c2:	2320      	movs	r3, #32
 80087c4:	6093      	str	r3, [r2, #8]
 80087c6:	e0bc      	b.n	8008942 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f040 80b7 	bne.w	8008942 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4a5d      	ldr	r2, [pc, #372]	; (800894c <PCD_EP_OutXfrComplete_int+0x210>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d90f      	bls.n	80087fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	461a      	mov	r2, r3
 80087f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087f8:	6093      	str	r3, [r2, #8]
 80087fa:	e0a2      	b.n	8008942 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4613      	mov	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	1a9b      	subs	r3, r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	440b      	add	r3, r1
 800880a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800880e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	0159      	lsls	r1, r3, #5
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	440b      	add	r3, r1
 8008818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008822:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	4613      	mov	r3, r2
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	1a9b      	subs	r3, r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4403      	add	r3, r0
 8008832:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008836:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4613      	mov	r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800884a:	6819      	ldr	r1, [r3, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	4613      	mov	r3, r2
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	1a9b      	subs	r3, r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4403      	add	r3, r0
 800885a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4419      	add	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	4613      	mov	r3, r2
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4403      	add	r3, r0
 8008870:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008874:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d114      	bne.n	80088a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	4613      	mov	r3, r2
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	1a9b      	subs	r3, r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	440b      	add	r3, r1
 800888a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d108      	bne.n	80088a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6818      	ldr	r0, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800889e:	461a      	mov	r2, r3
 80088a0:	2101      	movs	r1, #1
 80088a2:	f009 ff7d 	bl	80127a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f012 f925 	bl	801aafc <HAL_PCD_DataOutStageCallback>
 80088b2:	e046      	b.n	8008942 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4a26      	ldr	r2, [pc, #152]	; (8008950 <PCD_EP_OutXfrComplete_int+0x214>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d124      	bne.n	8008906 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d2:	461a      	mov	r2, r3
 80088d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088d8:	6093      	str	r3, [r2, #8]
 80088da:	e032      	b.n	8008942 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f2:	461a      	mov	r2, r3
 80088f4:	2320      	movs	r3, #32
 80088f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f012 f8fc 	bl	801aafc <HAL_PCD_DataOutStageCallback>
 8008904:	e01d      	b.n	8008942 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d114      	bne.n	8008936 <PCD_EP_OutXfrComplete_int+0x1fa>
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	4613      	mov	r3, r2
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	1a9b      	subs	r3, r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	440b      	add	r3, r1
 800891a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d108      	bne.n	8008936 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800892e:	461a      	mov	r2, r3
 8008930:	2100      	movs	r1, #0
 8008932:	f009 ff35 	bl	80127a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f012 f8dd 	bl	801aafc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	4f54300a 	.word	0x4f54300a
 8008950:	4f54310a 	.word	0x4f54310a

08008954 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	333c      	adds	r3, #60	; 0x3c
 800896c:	3304      	adds	r3, #4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	4a15      	ldr	r2, [pc, #84]	; (80089dc <PCD_EP_OutSetupPacket_int+0x88>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d90e      	bls.n	80089a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008990:	2b00      	cmp	r3, #0
 8008992:	d009      	beq.n	80089a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	461a      	mov	r2, r3
 80089a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f012 f895 	bl	801aad8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4a0a      	ldr	r2, [pc, #40]	; (80089dc <PCD_EP_OutSetupPacket_int+0x88>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d90c      	bls.n	80089d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d108      	bne.n	80089d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80089c8:	461a      	mov	r2, r3
 80089ca:	2101      	movs	r1, #1
 80089cc:	f009 fee8 	bl	80127a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	4f54300a 	.word	0x4f54300a

080089e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
 80089ec:	4613      	mov	r3, r2
 80089ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d107      	bne.n	8008a0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80089fe:	883b      	ldrh	r3, [r7, #0]
 8008a00:	0419      	lsls	r1, r3, #16
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8008a0c:	e028      	b.n	8008a60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a14:	0c1b      	lsrs	r3, r3, #16
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	4413      	add	r3, r2
 8008a1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
 8008a20:	e00d      	b.n	8008a3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	3340      	adds	r3, #64	; 0x40
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	0c1b      	lsrs	r3, r3, #16
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	4413      	add	r3, r2
 8008a36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	73fb      	strb	r3, [r7, #15]
 8008a3e:	7bfa      	ldrb	r2, [r7, #15]
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d3ec      	bcc.n	8008a22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008a48:	883b      	ldrh	r3, [r7, #0]
 8008a4a:	0418      	lsls	r0, r3, #16
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6819      	ldr	r1, [r3, #0]
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	4302      	orrs	r2, r0
 8008a58:	3340      	adds	r3, #64	; 0x40
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	440b      	add	r3, r1
 8008a5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	887a      	ldrh	r2, [r7, #2]
 8008a80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <HAL_PCDEx_ActivateLPM+0x44>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	10000003 	.word	0x10000003

08008ad8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008af8:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <HAL_PWREx_ConfigSupply+0x70>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b04      	cmp	r3, #4
 8008b02:	d00a      	beq.n	8008b1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008b04:	4b16      	ldr	r3, [pc, #88]	; (8008b60 <HAL_PWREx_ConfigSupply+0x70>)
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d001      	beq.n	8008b16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e01f      	b.n	8008b56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e01d      	b.n	8008b56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008b1a:	4b11      	ldr	r3, [pc, #68]	; (8008b60 <HAL_PWREx_ConfigSupply+0x70>)
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f023 0207 	bic.w	r2, r3, #7
 8008b22:	490f      	ldr	r1, [pc, #60]	; (8008b60 <HAL_PWREx_ConfigSupply+0x70>)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008b2a:	f7f9 f84b 	bl	8001bc4 <HAL_GetTick>
 8008b2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b30:	e009      	b.n	8008b46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008b32:	f7f9 f847 	bl	8001bc4 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b40:	d901      	bls.n	8008b46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e007      	b.n	8008b56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b46:	4b06      	ldr	r3, [pc, #24]	; (8008b60 <HAL_PWREx_ConfigSupply+0x70>)
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b52:	d1ee      	bne.n	8008b32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	58024800 	.word	0x58024800

08008b64 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008b64:	b480      	push	{r7}
 8008b66:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	4a04      	ldr	r2, [pc, #16]	; (8008b80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b72:	60d3      	str	r3, [r2, #12]
}
 8008b74:	bf00      	nop
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	58024800 	.word	0x58024800

08008b84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08c      	sub	sp, #48	; 0x30
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e3c4      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 8087 	beq.w	8008cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ba4:	4ba2      	ldr	r3, [pc, #648]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bae:	4ba0      	ldr	r3, [pc, #640]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb6:	2b10      	cmp	r3, #16
 8008bb8:	d007      	beq.n	8008bca <HAL_RCC_OscConfig+0x46>
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	2b18      	cmp	r3, #24
 8008bbe:	d110      	bne.n	8008be2 <HAL_RCC_OscConfig+0x5e>
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d10b      	bne.n	8008be2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bca:	4b99      	ldr	r3, [pc, #612]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d06c      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x12c>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d168      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e39e      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bea:	d106      	bne.n	8008bfa <HAL_RCC_OscConfig+0x76>
 8008bec:	4b90      	ldr	r3, [pc, #576]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a8f      	ldr	r2, [pc, #572]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	e02e      	b.n	8008c58 <HAL_RCC_OscConfig+0xd4>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10c      	bne.n	8008c1c <HAL_RCC_OscConfig+0x98>
 8008c02:	4b8b      	ldr	r3, [pc, #556]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a8a      	ldr	r2, [pc, #552]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c0c:	6013      	str	r3, [r2, #0]
 8008c0e:	4b88      	ldr	r3, [pc, #544]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a87      	ldr	r2, [pc, #540]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e01d      	b.n	8008c58 <HAL_RCC_OscConfig+0xd4>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c24:	d10c      	bne.n	8008c40 <HAL_RCC_OscConfig+0xbc>
 8008c26:	4b82      	ldr	r3, [pc, #520]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a81      	ldr	r2, [pc, #516]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	4b7f      	ldr	r3, [pc, #508]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a7e      	ldr	r2, [pc, #504]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	e00b      	b.n	8008c58 <HAL_RCC_OscConfig+0xd4>
 8008c40:	4b7b      	ldr	r3, [pc, #492]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a7a      	ldr	r2, [pc, #488]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c4a:	6013      	str	r3, [r2, #0]
 8008c4c:	4b78      	ldr	r3, [pc, #480]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a77      	ldr	r2, [pc, #476]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d013      	beq.n	8008c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c60:	f7f8 ffb0 	bl	8001bc4 <HAL_GetTick>
 8008c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c66:	e008      	b.n	8008c7a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c68:	f7f8 ffac 	bl	8001bc4 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b64      	cmp	r3, #100	; 0x64
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e352      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c7a:	4b6d      	ldr	r3, [pc, #436]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0f0      	beq.n	8008c68 <HAL_RCC_OscConfig+0xe4>
 8008c86:	e014      	b.n	8008cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c88:	f7f8 ff9c 	bl	8001bc4 <HAL_GetTick>
 8008c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c8e:	e008      	b.n	8008ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c90:	f7f8 ff98 	bl	8001bc4 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	2b64      	cmp	r3, #100	; 0x64
 8008c9c:	d901      	bls.n	8008ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e33e      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ca2:	4b63      	ldr	r3, [pc, #396]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1f0      	bne.n	8008c90 <HAL_RCC_OscConfig+0x10c>
 8008cae:	e000      	b.n	8008cb2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 8092 	beq.w	8008de4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cc0:	4b5b      	ldr	r3, [pc, #364]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cca:	4b59      	ldr	r3, [pc, #356]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d007      	beq.n	8008ce6 <HAL_RCC_OscConfig+0x162>
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	2b18      	cmp	r3, #24
 8008cda:	d12d      	bne.n	8008d38 <HAL_RCC_OscConfig+0x1b4>
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d128      	bne.n	8008d38 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ce6:	4b52      	ldr	r3, [pc, #328]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0304 	and.w	r3, r3, #4
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d005      	beq.n	8008cfe <HAL_RCC_OscConfig+0x17a>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e310      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cfe:	f7f8 ff8f 	bl	8001c20 <HAL_GetREVID>
 8008d02:	4602      	mov	r2, r0
 8008d04:	f241 0303 	movw	r3, #4099	; 0x1003
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d80a      	bhi.n	8008d22 <HAL_RCC_OscConfig+0x19e>
 8008d0c:	4b48      	ldr	r3, [pc, #288]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	031b      	lsls	r3, r3, #12
 8008d1a:	4945      	ldr	r1, [pc, #276]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d20:	e060      	b.n	8008de4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d22:	4b43      	ldr	r3, [pc, #268]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	061b      	lsls	r3, r3, #24
 8008d30:	493f      	ldr	r1, [pc, #252]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d36:	e055      	b.n	8008de4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d038      	beq.n	8008db2 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d40:	4b3b      	ldr	r3, [pc, #236]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f023 0219 	bic.w	r2, r3, #25
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	4938      	ldr	r1, [pc, #224]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d52:	f7f8 ff37 	bl	8001bc4 <HAL_GetTick>
 8008d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d58:	e008      	b.n	8008d6c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d5a:	f7f8 ff33 	bl	8001bc4 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d901      	bls.n	8008d6c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e2d9      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d6c:	4b30      	ldr	r3, [pc, #192]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0f0      	beq.n	8008d5a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d78:	f7f8 ff52 	bl	8001c20 <HAL_GetREVID>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d80a      	bhi.n	8008d9c <HAL_RCC_OscConfig+0x218>
 8008d86:	4b2a      	ldr	r3, [pc, #168]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	031b      	lsls	r3, r3, #12
 8008d94:	4926      	ldr	r1, [pc, #152]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	604b      	str	r3, [r1, #4]
 8008d9a:	e023      	b.n	8008de4 <HAL_RCC_OscConfig+0x260>
 8008d9c:	4b24      	ldr	r3, [pc, #144]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	061b      	lsls	r3, r3, #24
 8008daa:	4921      	ldr	r1, [pc, #132]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	604b      	str	r3, [r1, #4]
 8008db0:	e018      	b.n	8008de4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008db2:	4b1f      	ldr	r3, [pc, #124]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a1e      	ldr	r2, [pc, #120]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008db8:	f023 0301 	bic.w	r3, r3, #1
 8008dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dbe:	f7f8 ff01 	bl	8001bc4 <HAL_GetTick>
 8008dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008dc4:	e008      	b.n	8008dd8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dc6:	f7f8 fefd 	bl	8001bc4 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d901      	bls.n	8008dd8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e2a3      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008dd8:	4b15      	ldr	r3, [pc, #84]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0304 	and.w	r3, r3, #4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1f0      	bne.n	8008dc6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0310 	and.w	r3, r3, #16
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 8091 	beq.w	8008f14 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dfc:	4b0c      	ldr	r3, [pc, #48]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e00:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d007      	beq.n	8008e18 <HAL_RCC_OscConfig+0x294>
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	2b18      	cmp	r3, #24
 8008e0c:	d12f      	bne.n	8008e6e <HAL_RCC_OscConfig+0x2ea>
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f003 0303 	and.w	r3, r3, #3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d12a      	bne.n	8008e6e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e18:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <HAL_RCC_OscConfig+0x2ac>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d007      	beq.n	8008e34 <HAL_RCC_OscConfig+0x2b0>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	2b80      	cmp	r3, #128	; 0x80
 8008e2a:	d003      	beq.n	8008e34 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e277      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
 8008e30:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e34:	f7f8 fef4 	bl	8001c20 <HAL_GetREVID>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d80a      	bhi.n	8008e58 <HAL_RCC_OscConfig+0x2d4>
 8008e42:	4ba2      	ldr	r3, [pc, #648]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	069b      	lsls	r3, r3, #26
 8008e50:	499e      	ldr	r1, [pc, #632]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e56:	e05d      	b.n	8008f14 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e58:	4b9c      	ldr	r3, [pc, #624]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	061b      	lsls	r3, r3, #24
 8008e66:	4999      	ldr	r1, [pc, #612]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e6c:	e052      	b.n	8008f14 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d035      	beq.n	8008ee2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008e76:	4b95      	ldr	r3, [pc, #596]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a94      	ldr	r2, [pc, #592]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e82:	f7f8 fe9f 	bl	8001bc4 <HAL_GetTick>
 8008e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e88:	e008      	b.n	8008e9c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008e8a:	f7f8 fe9b 	bl	8001bc4 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d901      	bls.n	8008e9c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e241      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e9c:	4b8b      	ldr	r3, [pc, #556]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0f0      	beq.n	8008e8a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ea8:	f7f8 feba 	bl	8001c20 <HAL_GetREVID>
 8008eac:	4602      	mov	r2, r0
 8008eae:	f241 0303 	movw	r3, #4099	; 0x1003
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d80a      	bhi.n	8008ecc <HAL_RCC_OscConfig+0x348>
 8008eb6:	4b85      	ldr	r3, [pc, #532]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	069b      	lsls	r3, r3, #26
 8008ec4:	4981      	ldr	r1, [pc, #516]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	604b      	str	r3, [r1, #4]
 8008eca:	e023      	b.n	8008f14 <HAL_RCC_OscConfig+0x390>
 8008ecc:	4b7f      	ldr	r3, [pc, #508]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a1b      	ldr	r3, [r3, #32]
 8008ed8:	061b      	lsls	r3, r3, #24
 8008eda:	497c      	ldr	r1, [pc, #496]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60cb      	str	r3, [r1, #12]
 8008ee0:	e018      	b.n	8008f14 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008ee2:	4b7a      	ldr	r3, [pc, #488]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a79      	ldr	r2, [pc, #484]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eee:	f7f8 fe69 	bl	8001bc4 <HAL_GetTick>
 8008ef2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ef4:	e008      	b.n	8008f08 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008ef6:	f7f8 fe65 	bl	8001bc4 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e20b      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f08:	4b70      	ldr	r3, [pc, #448]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f0      	bne.n	8008ef6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0308 	and.w	r3, r3, #8
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d036      	beq.n	8008f8e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d019      	beq.n	8008f5c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f28:	4b68      	ldr	r3, [pc, #416]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f2c:	4a67      	ldr	r2, [pc, #412]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008f2e:	f043 0301 	orr.w	r3, r3, #1
 8008f32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f34:	f7f8 fe46 	bl	8001bc4 <HAL_GetTick>
 8008f38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f3a:	e008      	b.n	8008f4e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f3c:	f7f8 fe42 	bl	8001bc4 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e1e8      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f4e:	4b5f      	ldr	r3, [pc, #380]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0f0      	beq.n	8008f3c <HAL_RCC_OscConfig+0x3b8>
 8008f5a:	e018      	b.n	8008f8e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f5c:	4b5b      	ldr	r3, [pc, #364]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f60:	4a5a      	ldr	r2, [pc, #360]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008f62:	f023 0301 	bic.w	r3, r3, #1
 8008f66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f68:	f7f8 fe2c 	bl	8001bc4 <HAL_GetTick>
 8008f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f6e:	e008      	b.n	8008f82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f70:	f7f8 fe28 	bl	8001bc4 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d901      	bls.n	8008f82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e1ce      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f82:	4b52      	ldr	r3, [pc, #328]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1f0      	bne.n	8008f70 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d036      	beq.n	8009008 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d019      	beq.n	8008fd6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fa2:	4b4a      	ldr	r3, [pc, #296]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a49      	ldr	r2, [pc, #292]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008fa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fae:	f7f8 fe09 	bl	8001bc4 <HAL_GetTick>
 8008fb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fb4:	e008      	b.n	8008fc8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008fb6:	f7f8 fe05 	bl	8001bc4 <HAL_GetTick>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d901      	bls.n	8008fc8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e1ab      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fc8:	4b40      	ldr	r3, [pc, #256]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0f0      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x432>
 8008fd4:	e018      	b.n	8009008 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fd6:	4b3d      	ldr	r3, [pc, #244]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a3c      	ldr	r2, [pc, #240]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fe0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fe2:	f7f8 fdef 	bl	8001bc4 <HAL_GetTick>
 8008fe6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fe8:	e008      	b.n	8008ffc <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008fea:	f7f8 fdeb 	bl	8001bc4 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d901      	bls.n	8008ffc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e191      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ffc:	4b33      	ldr	r3, [pc, #204]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1f0      	bne.n	8008fea <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 8086 	beq.w	8009122 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009016:	4b2e      	ldr	r3, [pc, #184]	; (80090d0 <HAL_RCC_OscConfig+0x54c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a2d      	ldr	r2, [pc, #180]	; (80090d0 <HAL_RCC_OscConfig+0x54c>)
 800901c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009020:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009022:	f7f8 fdcf 	bl	8001bc4 <HAL_GetTick>
 8009026:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009028:	e008      	b.n	800903c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800902a:	f7f8 fdcb 	bl	8001bc4 <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	2b64      	cmp	r3, #100	; 0x64
 8009036:	d901      	bls.n	800903c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e171      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800903c:	4b24      	ldr	r3, [pc, #144]	; (80090d0 <HAL_RCC_OscConfig+0x54c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0f0      	beq.n	800902a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d106      	bne.n	800905e <HAL_RCC_OscConfig+0x4da>
 8009050:	4b1e      	ldr	r3, [pc, #120]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8009052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009054:	4a1d      	ldr	r2, [pc, #116]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	6713      	str	r3, [r2, #112]	; 0x70
 800905c:	e02d      	b.n	80090ba <HAL_RCC_OscConfig+0x536>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10c      	bne.n	8009080 <HAL_RCC_OscConfig+0x4fc>
 8009066:	4b19      	ldr	r3, [pc, #100]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8009068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906a:	4a18      	ldr	r2, [pc, #96]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 800906c:	f023 0301 	bic.w	r3, r3, #1
 8009070:	6713      	str	r3, [r2, #112]	; 0x70
 8009072:	4b16      	ldr	r3, [pc, #88]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8009074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009076:	4a15      	ldr	r2, [pc, #84]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8009078:	f023 0304 	bic.w	r3, r3, #4
 800907c:	6713      	str	r3, [r2, #112]	; 0x70
 800907e:	e01c      	b.n	80090ba <HAL_RCC_OscConfig+0x536>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	2b05      	cmp	r3, #5
 8009086:	d10c      	bne.n	80090a2 <HAL_RCC_OscConfig+0x51e>
 8009088:	4b10      	ldr	r3, [pc, #64]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 800908a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908c:	4a0f      	ldr	r2, [pc, #60]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 800908e:	f043 0304 	orr.w	r3, r3, #4
 8009092:	6713      	str	r3, [r2, #112]	; 0x70
 8009094:	4b0d      	ldr	r3, [pc, #52]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 8009096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009098:	4a0c      	ldr	r2, [pc, #48]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 800909a:	f043 0301 	orr.w	r3, r3, #1
 800909e:	6713      	str	r3, [r2, #112]	; 0x70
 80090a0:	e00b      	b.n	80090ba <HAL_RCC_OscConfig+0x536>
 80090a2:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 80090a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a6:	4a09      	ldr	r2, [pc, #36]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 80090a8:	f023 0301 	bic.w	r3, r3, #1
 80090ac:	6713      	str	r3, [r2, #112]	; 0x70
 80090ae:	4b07      	ldr	r3, [pc, #28]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 80090b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b2:	4a06      	ldr	r2, [pc, #24]	; (80090cc <HAL_RCC_OscConfig+0x548>)
 80090b4:	f023 0304 	bic.w	r3, r3, #4
 80090b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d01a      	beq.n	80090f8 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c2:	f7f8 fd7f 	bl	8001bc4 <HAL_GetTick>
 80090c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090c8:	e00f      	b.n	80090ea <HAL_RCC_OscConfig+0x566>
 80090ca:	bf00      	nop
 80090cc:	58024400 	.word	0x58024400
 80090d0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090d4:	f7f8 fd76 	bl	8001bc4 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d901      	bls.n	80090ea <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e11a      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090ea:	4b8f      	ldr	r3, [pc, #572]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80090ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ee:	f003 0302 	and.w	r3, r3, #2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0ee      	beq.n	80090d4 <HAL_RCC_OscConfig+0x550>
 80090f6:	e014      	b.n	8009122 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f8:	f7f8 fd64 	bl	8001bc4 <HAL_GetTick>
 80090fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090fe:	e00a      	b.n	8009116 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009100:	f7f8 fd60 	bl	8001bc4 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	f241 3288 	movw	r2, #5000	; 0x1388
 800910e:	4293      	cmp	r3, r2
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e104      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009116:	4b84      	ldr	r3, [pc, #528]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1ee      	bne.n	8009100 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 80f9 	beq.w	800931e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800912c:	4b7e      	ldr	r3, [pc, #504]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009134:	2b18      	cmp	r3, #24
 8009136:	f000 80b4 	beq.w	80092a2 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913e:	2b02      	cmp	r3, #2
 8009140:	f040 8095 	bne.w	800926e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009144:	4b78      	ldr	r3, [pc, #480]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a77      	ldr	r2, [pc, #476]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 800914a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800914e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009150:	f7f8 fd38 	bl	8001bc4 <HAL_GetTick>
 8009154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009156:	e008      	b.n	800916a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009158:	f7f8 fd34 	bl	8001bc4 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	d901      	bls.n	800916a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e0da      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800916a:	4b6f      	ldr	r3, [pc, #444]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1f0      	bne.n	8009158 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009176:	4b6c      	ldr	r3, [pc, #432]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800917a:	4b6c      	ldr	r3, [pc, #432]	; (800932c <HAL_RCC_OscConfig+0x7a8>)
 800917c:	4013      	ands	r3, r2
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009186:	0112      	lsls	r2, r2, #4
 8009188:	430a      	orrs	r2, r1
 800918a:	4967      	ldr	r1, [pc, #412]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 800918c:	4313      	orrs	r3, r2
 800918e:	628b      	str	r3, [r1, #40]	; 0x28
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009194:	3b01      	subs	r3, #1
 8009196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919e:	3b01      	subs	r3, #1
 80091a0:	025b      	lsls	r3, r3, #9
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	3b01      	subs	r3, #1
 80091ac:	041b      	lsls	r3, r3, #16
 80091ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b8:	3b01      	subs	r3, #1
 80091ba:	061b      	lsls	r3, r3, #24
 80091bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091c0:	4959      	ldr	r1, [pc, #356]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80091c6:	4b58      	ldr	r3, [pc, #352]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80091c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ca:	4a57      	ldr	r2, [pc, #348]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80091cc:	f023 0301 	bic.w	r3, r3, #1
 80091d0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091d2:	4b55      	ldr	r3, [pc, #340]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80091d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091d6:	4b56      	ldr	r3, [pc, #344]	; (8009330 <HAL_RCC_OscConfig+0x7ac>)
 80091d8:	4013      	ands	r3, r2
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80091de:	00d2      	lsls	r2, r2, #3
 80091e0:	4951      	ldr	r1, [pc, #324]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80091e6:	4b50      	ldr	r3, [pc, #320]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	f023 020c 	bic.w	r2, r3, #12
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f2:	494d      	ldr	r1, [pc, #308]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80091f8:	4b4b      	ldr	r3, [pc, #300]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	f023 0202 	bic.w	r2, r3, #2
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009204:	4948      	ldr	r1, [pc, #288]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009206:	4313      	orrs	r3, r2
 8009208:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800920a:	4b47      	ldr	r3, [pc, #284]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 800920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920e:	4a46      	ldr	r2, [pc, #280]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009214:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009216:	4b44      	ldr	r3, [pc, #272]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921a:	4a43      	ldr	r2, [pc, #268]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 800921c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009222:	4b41      	ldr	r3, [pc, #260]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009226:	4a40      	ldr	r2, [pc, #256]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800922c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800922e:	4b3e      	ldr	r3, [pc, #248]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	4a3d      	ldr	r2, [pc, #244]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009234:	f043 0301 	orr.w	r3, r3, #1
 8009238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800923a:	4b3b      	ldr	r3, [pc, #236]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a3a      	ldr	r2, [pc, #232]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009246:	f7f8 fcbd 	bl	8001bc4 <HAL_GetTick>
 800924a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800924c:	e008      	b.n	8009260 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800924e:	f7f8 fcb9 	bl	8001bc4 <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b02      	cmp	r3, #2
 800925a:	d901      	bls.n	8009260 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e05f      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009260:	4b31      	ldr	r3, [pc, #196]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0f0      	beq.n	800924e <HAL_RCC_OscConfig+0x6ca>
 800926c:	e057      	b.n	800931e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800926e:	4b2e      	ldr	r3, [pc, #184]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a2d      	ldr	r2, [pc, #180]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800927a:	f7f8 fca3 	bl	8001bc4 <HAL_GetTick>
 800927e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009280:	e008      	b.n	8009294 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009282:	f7f8 fc9f 	bl	8001bc4 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	2b02      	cmp	r3, #2
 800928e:	d901      	bls.n	8009294 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e045      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009294:	4b24      	ldr	r3, [pc, #144]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1f0      	bne.n	8009282 <HAL_RCC_OscConfig+0x6fe>
 80092a0:	e03d      	b.n	800931e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80092a2:	4b21      	ldr	r3, [pc, #132]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80092a8:	4b1f      	ldr	r3, [pc, #124]	; (8009328 <HAL_RCC_OscConfig+0x7a4>)
 80092aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d031      	beq.n	800931a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f003 0203 	and.w	r2, r3, #3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d12a      	bne.n	800931a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	091b      	lsrs	r3, r3, #4
 80092c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d122      	bne.n	800931a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092de:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d11a      	bne.n	800931a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	0a5b      	lsrs	r3, r3, #9
 80092e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d111      	bne.n	800931a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	0c1b      	lsrs	r3, r3, #16
 80092fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009304:	429a      	cmp	r2, r3
 8009306:	d108      	bne.n	800931a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	0e1b      	lsrs	r3, r3, #24
 800930c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009314:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009316:	429a      	cmp	r2, r3
 8009318:	d001      	beq.n	800931e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3730      	adds	r7, #48	; 0x30
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	58024400 	.word	0x58024400
 800932c:	fffffc0c 	.word	0xfffffc0c
 8009330:	ffff0007 	.word	0xffff0007

08009334 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e19c      	b.n	8009682 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009348:	4b8a      	ldr	r3, [pc, #552]	; (8009574 <HAL_RCC_ClockConfig+0x240>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 030f 	and.w	r3, r3, #15
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d910      	bls.n	8009378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009356:	4b87      	ldr	r3, [pc, #540]	; (8009574 <HAL_RCC_ClockConfig+0x240>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f023 020f 	bic.w	r2, r3, #15
 800935e:	4985      	ldr	r1, [pc, #532]	; (8009574 <HAL_RCC_ClockConfig+0x240>)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	4313      	orrs	r3, r2
 8009364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009366:	4b83      	ldr	r3, [pc, #524]	; (8009574 <HAL_RCC_ClockConfig+0x240>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	429a      	cmp	r2, r3
 8009372:	d001      	beq.n	8009378 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e184      	b.n	8009682 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d010      	beq.n	80093a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	4b7b      	ldr	r3, [pc, #492]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009390:	429a      	cmp	r2, r3
 8009392:	d908      	bls.n	80093a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009394:	4b78      	ldr	r3, [pc, #480]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	4975      	ldr	r1, [pc, #468]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0308 	and.w	r3, r3, #8
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d010      	beq.n	80093d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	695a      	ldr	r2, [r3, #20]
 80093b6:	4b70      	ldr	r3, [pc, #448]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093be:	429a      	cmp	r2, r3
 80093c0:	d908      	bls.n	80093d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093c2:	4b6d      	ldr	r3, [pc, #436]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	496a      	ldr	r1, [pc, #424]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80093d0:	4313      	orrs	r3, r2
 80093d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0310 	and.w	r3, r3, #16
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d010      	beq.n	8009402 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699a      	ldr	r2, [r3, #24]
 80093e4:	4b64      	ldr	r3, [pc, #400]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d908      	bls.n	8009402 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80093f0:	4b61      	ldr	r3, [pc, #388]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	495e      	ldr	r1, [pc, #376]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0320 	and.w	r3, r3, #32
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	69da      	ldr	r2, [r3, #28]
 8009412:	4b59      	ldr	r3, [pc, #356]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800941a:	429a      	cmp	r2, r3
 800941c:	d908      	bls.n	8009430 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800941e:	4b56      	ldr	r3, [pc, #344]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	4953      	ldr	r1, [pc, #332]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 800942c:	4313      	orrs	r3, r2
 800942e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0302 	and.w	r3, r3, #2
 8009438:	2b00      	cmp	r3, #0
 800943a:	d010      	beq.n	800945e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68da      	ldr	r2, [r3, #12]
 8009440:	4b4d      	ldr	r3, [pc, #308]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f003 030f 	and.w	r3, r3, #15
 8009448:	429a      	cmp	r2, r3
 800944a:	d908      	bls.n	800945e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800944c:	4b4a      	ldr	r3, [pc, #296]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	f023 020f 	bic.w	r2, r3, #15
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	4947      	ldr	r1, [pc, #284]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 800945a:	4313      	orrs	r3, r2
 800945c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d055      	beq.n	8009516 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800946a:	4b43      	ldr	r3, [pc, #268]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	4940      	ldr	r1, [pc, #256]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 8009478:	4313      	orrs	r3, r2
 800947a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2b02      	cmp	r3, #2
 8009482:	d107      	bne.n	8009494 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009484:	4b3c      	ldr	r3, [pc, #240]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d121      	bne.n	80094d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e0f6      	b.n	8009682 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	2b03      	cmp	r3, #3
 800949a:	d107      	bne.n	80094ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800949c:	4b36      	ldr	r3, [pc, #216]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d115      	bne.n	80094d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e0ea      	b.n	8009682 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d107      	bne.n	80094c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094b4:	4b30      	ldr	r3, [pc, #192]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d109      	bne.n	80094d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e0de      	b.n	8009682 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094c4:	4b2c      	ldr	r3, [pc, #176]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e0d6      	b.n	8009682 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094d4:	4b28      	ldr	r3, [pc, #160]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	f023 0207 	bic.w	r2, r3, #7
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	4925      	ldr	r1, [pc, #148]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094e6:	f7f8 fb6d 	bl	8001bc4 <HAL_GetTick>
 80094ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ec:	e00a      	b.n	8009504 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094ee:	f7f8 fb69 	bl	8001bc4 <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d901      	bls.n	8009504 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e0be      	b.n	8009682 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009504:	4b1c      	ldr	r3, [pc, #112]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	429a      	cmp	r2, r3
 8009514:	d1eb      	bne.n	80094ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	2b00      	cmp	r3, #0
 8009520:	d010      	beq.n	8009544 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68da      	ldr	r2, [r3, #12]
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	f003 030f 	and.w	r3, r3, #15
 800952e:	429a      	cmp	r2, r3
 8009530:	d208      	bcs.n	8009544 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009532:	4b11      	ldr	r3, [pc, #68]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f023 020f 	bic.w	r2, r3, #15
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	490e      	ldr	r1, [pc, #56]	; (8009578 <HAL_RCC_ClockConfig+0x244>)
 8009540:	4313      	orrs	r3, r2
 8009542:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009544:	4b0b      	ldr	r3, [pc, #44]	; (8009574 <HAL_RCC_ClockConfig+0x240>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 030f 	and.w	r3, r3, #15
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d214      	bcs.n	800957c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009552:	4b08      	ldr	r3, [pc, #32]	; (8009574 <HAL_RCC_ClockConfig+0x240>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f023 020f 	bic.w	r2, r3, #15
 800955a:	4906      	ldr	r1, [pc, #24]	; (8009574 <HAL_RCC_ClockConfig+0x240>)
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	4313      	orrs	r3, r2
 8009560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009562:	4b04      	ldr	r3, [pc, #16]	; (8009574 <HAL_RCC_ClockConfig+0x240>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 030f 	and.w	r3, r3, #15
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d005      	beq.n	800957c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e086      	b.n	8009682 <HAL_RCC_ClockConfig+0x34e>
 8009574:	52002000 	.word	0x52002000
 8009578:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d010      	beq.n	80095aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691a      	ldr	r2, [r3, #16]
 800958c:	4b3f      	ldr	r3, [pc, #252]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009594:	429a      	cmp	r2, r3
 8009596:	d208      	bcs.n	80095aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009598:	4b3c      	ldr	r3, [pc, #240]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	4939      	ldr	r1, [pc, #228]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0308 	and.w	r3, r3, #8
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d010      	beq.n	80095d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	695a      	ldr	r2, [r3, #20]
 80095ba:	4b34      	ldr	r3, [pc, #208]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d208      	bcs.n	80095d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095c6:	4b31      	ldr	r3, [pc, #196]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	492e      	ldr	r1, [pc, #184]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d010      	beq.n	8009606 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	699a      	ldr	r2, [r3, #24]
 80095e8:	4b28      	ldr	r3, [pc, #160]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d208      	bcs.n	8009606 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095f4:	4b25      	ldr	r3, [pc, #148]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	4922      	ldr	r1, [pc, #136]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 8009602:	4313      	orrs	r3, r2
 8009604:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0320 	and.w	r3, r3, #32
 800960e:	2b00      	cmp	r3, #0
 8009610:	d010      	beq.n	8009634 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69da      	ldr	r2, [r3, #28]
 8009616:	4b1d      	ldr	r3, [pc, #116]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800961e:	429a      	cmp	r2, r3
 8009620:	d208      	bcs.n	8009634 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009622:	4b1a      	ldr	r3, [pc, #104]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	4917      	ldr	r1, [pc, #92]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 8009630:	4313      	orrs	r3, r2
 8009632:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009634:	f000 f834 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 8009638:	4601      	mov	r1, r0
 800963a:	4b14      	ldr	r3, [pc, #80]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	0a1b      	lsrs	r3, r3, #8
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	4a12      	ldr	r2, [pc, #72]	; (8009690 <HAL_RCC_ClockConfig+0x35c>)
 8009646:	5cd3      	ldrb	r3, [r2, r3]
 8009648:	f003 031f 	and.w	r3, r3, #31
 800964c:	fa21 f303 	lsr.w	r3, r1, r3
 8009650:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009652:	4b0e      	ldr	r3, [pc, #56]	; (800968c <HAL_RCC_ClockConfig+0x358>)
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	f003 030f 	and.w	r3, r3, #15
 800965a:	4a0d      	ldr	r2, [pc, #52]	; (8009690 <HAL_RCC_ClockConfig+0x35c>)
 800965c:	5cd3      	ldrb	r3, [r2, r3]
 800965e:	f003 031f 	and.w	r3, r3, #31
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	fa22 f303 	lsr.w	r3, r2, r3
 8009668:	4a0a      	ldr	r2, [pc, #40]	; (8009694 <HAL_RCC_ClockConfig+0x360>)
 800966a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800966c:	4a0a      	ldr	r2, [pc, #40]	; (8009698 <HAL_RCC_ClockConfig+0x364>)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009672:	4b0a      	ldr	r3, [pc, #40]	; (800969c <HAL_RCC_ClockConfig+0x368>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4618      	mov	r0, r3
 8009678:	f7f8 fa5a 	bl	8001b30 <HAL_InitTick>
 800967c:	4603      	mov	r3, r0
 800967e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009680:	7bfb      	ldrb	r3, [r7, #15]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	58024400 	.word	0x58024400
 8009690:	0801b3b8 	.word	0x0801b3b8
 8009694:	24000010 	.word	0x24000010
 8009698:	2400000c 	.word	0x2400000c
 800969c:	24000014 	.word	0x24000014

080096a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b089      	sub	sp, #36	; 0x24
 80096a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096a6:	4baf      	ldr	r3, [pc, #700]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096ae:	2b18      	cmp	r3, #24
 80096b0:	f200 814e 	bhi.w	8009950 <HAL_RCC_GetSysClockFreq+0x2b0>
 80096b4:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80096b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ba:	bf00      	nop
 80096bc:	08009721 	.word	0x08009721
 80096c0:	08009951 	.word	0x08009951
 80096c4:	08009951 	.word	0x08009951
 80096c8:	08009951 	.word	0x08009951
 80096cc:	08009951 	.word	0x08009951
 80096d0:	08009951 	.word	0x08009951
 80096d4:	08009951 	.word	0x08009951
 80096d8:	08009951 	.word	0x08009951
 80096dc:	08009747 	.word	0x08009747
 80096e0:	08009951 	.word	0x08009951
 80096e4:	08009951 	.word	0x08009951
 80096e8:	08009951 	.word	0x08009951
 80096ec:	08009951 	.word	0x08009951
 80096f0:	08009951 	.word	0x08009951
 80096f4:	08009951 	.word	0x08009951
 80096f8:	08009951 	.word	0x08009951
 80096fc:	0800974d 	.word	0x0800974d
 8009700:	08009951 	.word	0x08009951
 8009704:	08009951 	.word	0x08009951
 8009708:	08009951 	.word	0x08009951
 800970c:	08009951 	.word	0x08009951
 8009710:	08009951 	.word	0x08009951
 8009714:	08009951 	.word	0x08009951
 8009718:	08009951 	.word	0x08009951
 800971c:	08009753 	.word	0x08009753
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009720:	4b90      	ldr	r3, [pc, #576]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0320 	and.w	r3, r3, #32
 8009728:	2b00      	cmp	r3, #0
 800972a:	d009      	beq.n	8009740 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800972c:	4b8d      	ldr	r3, [pc, #564]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	08db      	lsrs	r3, r3, #3
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	4a8c      	ldr	r2, [pc, #560]	; (8009968 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009738:	fa22 f303 	lsr.w	r3, r2, r3
 800973c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800973e:	e10a      	b.n	8009956 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009740:	4b89      	ldr	r3, [pc, #548]	; (8009968 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009742:	61bb      	str	r3, [r7, #24]
    break;
 8009744:	e107      	b.n	8009956 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009746:	4b89      	ldr	r3, [pc, #548]	; (800996c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009748:	61bb      	str	r3, [r7, #24]
    break;
 800974a:	e104      	b.n	8009956 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800974c:	4b88      	ldr	r3, [pc, #544]	; (8009970 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800974e:	61bb      	str	r3, [r7, #24]
    break;
 8009750:	e101      	b.n	8009956 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009752:	4b84      	ldr	r3, [pc, #528]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800975c:	4b81      	ldr	r3, [pc, #516]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800975e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009760:	091b      	lsrs	r3, r3, #4
 8009762:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009766:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009768:	4b7e      	ldr	r3, [pc, #504]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009772:	4b7c      	ldr	r3, [pc, #496]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009776:	08db      	lsrs	r3, r3, #3
 8009778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	fb02 f303 	mul.w	r3, r2, r3
 8009782:	ee07 3a90 	vmov	s15, r3
 8009786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 80da 	beq.w	800994a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d05a      	beq.n	8009852 <HAL_RCC_GetSysClockFreq+0x1b2>
 800979c:	2b01      	cmp	r3, #1
 800979e:	d302      	bcc.n	80097a6 <HAL_RCC_GetSysClockFreq+0x106>
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d078      	beq.n	8009896 <HAL_RCC_GetSysClockFreq+0x1f6>
 80097a4:	e099      	b.n	80098da <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097a6:	4b6f      	ldr	r3, [pc, #444]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d02d      	beq.n	800980e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097b2:	4b6c      	ldr	r3, [pc, #432]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	08db      	lsrs	r3, r3, #3
 80097b8:	f003 0303 	and.w	r3, r3, #3
 80097bc:	4a6a      	ldr	r2, [pc, #424]	; (8009968 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80097be:	fa22 f303 	lsr.w	r3, r2, r3
 80097c2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	ee07 3a90 	vmov	s15, r3
 80097ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	ee07 3a90 	vmov	s15, r3
 80097d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097dc:	4b61      	ldr	r3, [pc, #388]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80097de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e4:	ee07 3a90 	vmov	s15, r3
 80097e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80097f0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8009974 <HAL_RCC_GetSysClockFreq+0x2d4>
 80097f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009808:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800980c:	e087      	b.n	800991e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	ee07 3a90 	vmov	s15, r3
 8009814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009818:	eddf 6a57 	vldr	s13, [pc, #348]	; 8009978 <HAL_RCC_GetSysClockFreq+0x2d8>
 800981c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009820:	4b50      	ldr	r3, [pc, #320]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009828:	ee07 3a90 	vmov	s15, r3
 800982c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009830:	ed97 6a02 	vldr	s12, [r7, #8]
 8009834:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8009974 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009850:	e065      	b.n	800991e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	ee07 3a90 	vmov	s15, r3
 8009858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800997c <HAL_RCC_GetSysClockFreq+0x2dc>
 8009860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009864:	4b3f      	ldr	r3, [pc, #252]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986c:	ee07 3a90 	vmov	s15, r3
 8009870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009874:	ed97 6a02 	vldr	s12, [r7, #8]
 8009878:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009974 <HAL_RCC_GetSysClockFreq+0x2d4>
 800987c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009890:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009894:	e043      	b.n	800991e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	ee07 3a90 	vmov	s15, r3
 800989c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009980 <HAL_RCC_GetSysClockFreq+0x2e0>
 80098a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a8:	4b2e      	ldr	r3, [pc, #184]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80098aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b0:	ee07 3a90 	vmov	s15, r3
 80098b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80098bc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009974 <HAL_RCC_GetSysClockFreq+0x2d4>
 80098c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098d8:	e021      	b.n	800991e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	ee07 3a90 	vmov	s15, r3
 80098e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800997c <HAL_RCC_GetSysClockFreq+0x2dc>
 80098e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ec:	4b1d      	ldr	r3, [pc, #116]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80098ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f4:	ee07 3a90 	vmov	s15, r3
 80098f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009900:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8009974 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009918:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800991c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800991e:	4b11      	ldr	r3, [pc, #68]	; (8009964 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	0a5b      	lsrs	r3, r3, #9
 8009924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009928:	3301      	adds	r3, #1
 800992a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009936:	edd7 6a07 	vldr	s13, [r7, #28]
 800993a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800993e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009942:	ee17 3a90 	vmov	r3, s15
 8009946:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009948:	e005      	b.n	8009956 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]
    break;
 800994e:	e002      	b.n	8009956 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8009950:	4b06      	ldr	r3, [pc, #24]	; (800996c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009952:	61bb      	str	r3, [r7, #24]
    break;
 8009954:	bf00      	nop
  }

  return sysclockfreq;
 8009956:	69bb      	ldr	r3, [r7, #24]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3724      	adds	r7, #36	; 0x24
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	58024400 	.word	0x58024400
 8009968:	03d09000 	.word	0x03d09000
 800996c:	003d0900 	.word	0x003d0900
 8009970:	007a1200 	.word	0x007a1200
 8009974:	46000000 	.word	0x46000000
 8009978:	4c742400 	.word	0x4c742400
 800997c:	4a742400 	.word	0x4a742400
 8009980:	4af42400 	.word	0x4af42400

08009984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800998a:	f7ff fe89 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800998e:	4601      	mov	r1, r0
 8009990:	4b10      	ldr	r3, [pc, #64]	; (80099d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	0a1b      	lsrs	r3, r3, #8
 8009996:	f003 030f 	and.w	r3, r3, #15
 800999a:	4a0f      	ldr	r2, [pc, #60]	; (80099d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800999c:	5cd3      	ldrb	r3, [r2, r3]
 800999e:	f003 031f 	and.w	r3, r3, #31
 80099a2:	fa21 f303 	lsr.w	r3, r1, r3
 80099a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099a8:	4b0a      	ldr	r3, [pc, #40]	; (80099d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	f003 030f 	and.w	r3, r3, #15
 80099b0:	4a09      	ldr	r2, [pc, #36]	; (80099d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80099b2:	5cd3      	ldrb	r3, [r2, r3]
 80099b4:	f003 031f 	and.w	r3, r3, #31
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	fa22 f303 	lsr.w	r3, r2, r3
 80099be:	4a07      	ldr	r2, [pc, #28]	; (80099dc <HAL_RCC_GetHCLKFreq+0x58>)
 80099c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099c2:	4a07      	ldr	r2, [pc, #28]	; (80099e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80099c8:	4b04      	ldr	r3, [pc, #16]	; (80099dc <HAL_RCC_GetHCLKFreq+0x58>)
 80099ca:	681b      	ldr	r3, [r3, #0]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	58024400 	.word	0x58024400
 80099d8:	0801b3b8 	.word	0x0801b3b8
 80099dc:	24000010 	.word	0x24000010
 80099e0:	2400000c 	.word	0x2400000c

080099e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80099e8:	f7ff ffcc 	bl	8009984 <HAL_RCC_GetHCLKFreq>
 80099ec:	4601      	mov	r1, r0
 80099ee:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	091b      	lsrs	r3, r3, #4
 80099f4:	f003 0307 	and.w	r3, r3, #7
 80099f8:	4a04      	ldr	r2, [pc, #16]	; (8009a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80099fa:	5cd3      	ldrb	r3, [r2, r3]
 80099fc:	f003 031f 	and.w	r3, r3, #31
 8009a00:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	58024400 	.word	0x58024400
 8009a0c:	0801b3b8 	.word	0x0801b3b8

08009a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a14:	f7ff ffb6 	bl	8009984 <HAL_RCC_GetHCLKFreq>
 8009a18:	4601      	mov	r1, r0
 8009a1a:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	0a1b      	lsrs	r3, r3, #8
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	4a04      	ldr	r2, [pc, #16]	; (8009a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a26:	5cd3      	ldrb	r3, [r2, r3]
 8009a28:	f003 031f 	and.w	r3, r3, #31
 8009a2c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	58024400 	.word	0x58024400
 8009a38:	0801b3b8 	.word	0x0801b3b8

08009a3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a44:	2300      	movs	r3, #0
 8009a46:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a48:	2300      	movs	r3, #0
 8009a4a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d03d      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a60:	d013      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a66:	d802      	bhi.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009a6c:	e01f      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a72:	d013      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009a74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a78:	d01c      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009a7a:	e018      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a7c:	4baf      	ldr	r3, [pc, #700]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	4aae      	ldr	r2, [pc, #696]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009a88:	e015      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	2102      	movs	r1, #2
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 fd23 	bl	800b4dc <RCCEx_PLL2_Config>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009a9a:	e00c      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3324      	adds	r3, #36	; 0x24
 8009aa0:	2102      	movs	r1, #2
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 fdcc 	bl	800b640 <RCCEx_PLL3_Config>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009aac:	e003      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab2:	e000      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d109      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009abc:	4b9f      	ldr	r3, [pc, #636]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ac8:	499c      	ldr	r1, [pc, #624]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	650b      	str	r3, [r1, #80]	; 0x50
 8009ace:	e001      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad0:	7dfb      	ldrb	r3, [r7, #23]
 8009ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d03d      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d826      	bhi.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8009ae8:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b05 	.word	0x08009b05
 8009af4:	08009b13 	.word	0x08009b13
 8009af8:	08009b25 	.word	0x08009b25
 8009afc:	08009b3d 	.word	0x08009b3d
 8009b00:	08009b3d 	.word	0x08009b3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b04:	4b8d      	ldr	r3, [pc, #564]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b08:	4a8c      	ldr	r2, [pc, #560]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b10:	e015      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3304      	adds	r3, #4
 8009b16:	2100      	movs	r1, #0
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f001 fcdf 	bl	800b4dc <RCCEx_PLL2_Config>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b22:	e00c      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3324      	adds	r3, #36	; 0x24
 8009b28:	2100      	movs	r1, #0
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f001 fd88 	bl	800b640 <RCCEx_PLL3_Config>
 8009b30:	4603      	mov	r3, r0
 8009b32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b34:	e003      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	75fb      	strb	r3, [r7, #23]
      break;
 8009b3a:	e000      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8009b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d109      	bne.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b44:	4b7d      	ldr	r3, [pc, #500]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b48:	f023 0207 	bic.w	r2, r3, #7
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b50:	497a      	ldr	r1, [pc, #488]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	650b      	str	r3, [r1, #80]	; 0x50
 8009b56:	e001      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
 8009b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d03e      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b6c:	2b80      	cmp	r3, #128	; 0x80
 8009b6e:	d01c      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009b70:	2b80      	cmp	r3, #128	; 0x80
 8009b72:	d804      	bhi.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d008      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009b78:	2b40      	cmp	r3, #64	; 0x40
 8009b7a:	d00d      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009b7c:	e01e      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8009b80:	d01f      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8009b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b86:	d01e      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009b88:	e018      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b8a:	4b6c      	ldr	r3, [pc, #432]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8e:	4a6b      	ldr	r2, [pc, #428]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009b96:	e017      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f001 fc9c 	bl	800b4dc <RCCEx_PLL2_Config>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ba8:	e00e      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3324      	adds	r3, #36	; 0x24
 8009bae:	2100      	movs	r1, #0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f001 fd45 	bl	800b640 <RCCEx_PLL3_Config>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009bba:	e005      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009bc0:	e002      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009bc2:	bf00      	nop
 8009bc4:	e000      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d109      	bne.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009bce:	4b5b      	ldr	r3, [pc, #364]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bda:	4958      	ldr	r1, [pc, #352]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	650b      	str	r3, [r1, #80]	; 0x50
 8009be0:	e001      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d044      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bfc:	d01f      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c02:	d805      	bhi.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00a      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c0c:	d00e      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8009c0e:	e01f      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8009c10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c14:	d01f      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8009c16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c1a:	d01e      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009c1c:	e018      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c1e:	4b47      	ldr	r3, [pc, #284]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c22:	4a46      	ldr	r2, [pc, #280]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c2a:	e017      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	2100      	movs	r1, #0
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 fc52 	bl	800b4dc <RCCEx_PLL2_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009c3c:	e00e      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3324      	adds	r3, #36	; 0x24
 8009c42:	2100      	movs	r1, #0
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 fcfb 	bl	800b640 <RCCEx_PLL3_Config>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c4e:	e005      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	75fb      	strb	r3, [r7, #23]
      break;
 8009c54:	e002      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009c56:	bf00      	nop
 8009c58:	e000      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009c62:	4b36      	ldr	r3, [pc, #216]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c66:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c70:	4932      	ldr	r1, [pc, #200]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	658b      	str	r3, [r1, #88]	; 0x58
 8009c76:	e001      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d044      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c92:	d01f      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c98:	d805      	bhi.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8009c9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ca2:	d00e      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009ca4:	e01f      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8009ca6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009caa:	d01f      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cb0:	d01e      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009cb2:	e018      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cb4:	4b21      	ldr	r3, [pc, #132]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	4a20      	ldr	r2, [pc, #128]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cc0:	e017      	b.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f001 fc07 	bl	800b4dc <RCCEx_PLL2_Config>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009cd2:	e00e      	b.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3324      	adds	r3, #36	; 0x24
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 fcb0 	bl	800b640 <RCCEx_PLL3_Config>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ce4:	e005      	b.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8009cea:	e002      	b.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009cec:	bf00      	nop
 8009cee:	e000      	b.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009cf8:	4b10      	ldr	r3, [pc, #64]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d06:	490d      	ldr	r1, [pc, #52]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8009d0c:	e001      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d035      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d22:	2b10      	cmp	r3, #16
 8009d24:	d00c      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8009d26:	2b10      	cmp	r3, #16
 8009d28:	d802      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d01b      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8009d2e:	e017      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	d00c      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8009d34:	2b30      	cmp	r3, #48	; 0x30
 8009d36:	d018      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8009d38:	e012      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009d3a:	bf00      	nop
 8009d3c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d40:	4baf      	ldr	r3, [pc, #700]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	4aae      	ldr	r2, [pc, #696]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009d4c:	e00e      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3304      	adds	r3, #4
 8009d52:	2102      	movs	r1, #2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f001 fbc1 	bl	800b4dc <RCCEx_PLL2_Config>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009d5e:	e005      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	75fb      	strb	r3, [r7, #23]
      break;
 8009d64:	e002      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009d66:	bf00      	nop
 8009d68:	e000      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d109      	bne.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009d72:	4ba3      	ldr	r3, [pc, #652]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d7e:	49a0      	ldr	r1, [pc, #640]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d84:	e001      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d042      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d9e:	d01f      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8009da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009da4:	d805      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dae:	d00e      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009db0:	e01f      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8009db2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009db6:	d01f      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dbc:	d01e      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009dbe:	e018      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc0:	4b8f      	ldr	r3, [pc, #572]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	4a8e      	ldr	r2, [pc, #568]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009dcc:	e017      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 fb81 	bl	800b4dc <RCCEx_PLL2_Config>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009dde:	e00e      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3324      	adds	r3, #36	; 0x24
 8009de4:	2100      	movs	r1, #0
 8009de6:	4618      	mov	r0, r3
 8009de8:	f001 fc2a 	bl	800b640 <RCCEx_PLL3_Config>
 8009dec:	4603      	mov	r3, r0
 8009dee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009df0:	e005      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	75fb      	strb	r3, [r7, #23]
      break;
 8009df6:	e002      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009df8:	bf00      	nop
 8009dfa:	e000      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dfe:	7dfb      	ldrb	r3, [r7, #23]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d109      	bne.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009e04:	4b7e      	ldr	r3, [pc, #504]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e08:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e10:	497b      	ldr	r1, [pc, #492]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	650b      	str	r3, [r1, #80]	; 0x50
 8009e16:	e001      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d042      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e30:	d01b      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e36:	d805      	bhi.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d022      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e40:	d00a      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009e42:	e01b      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8009e44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e48:	d01d      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8009e4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e4e:	d01c      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009e50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009e54:	d01b      	beq.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009e56:	e011      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 fb3c 	bl	800b4dc <RCCEx_PLL2_Config>
 8009e64:	4603      	mov	r3, r0
 8009e66:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009e68:	e012      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	3324      	adds	r3, #36	; 0x24
 8009e6e:	2101      	movs	r1, #1
 8009e70:	4618      	mov	r0, r3
 8009e72:	f001 fbe5 	bl	800b640 <RCCEx_PLL3_Config>
 8009e76:	4603      	mov	r3, r0
 8009e78:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009e7a:	e009      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e80:	e006      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009e82:	bf00      	nop
 8009e84:	e004      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009e86:	bf00      	nop
 8009e88:	e002      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009e8a:	bf00      	nop
 8009e8c:	e000      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d109      	bne.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009e96:	4b5a      	ldr	r3, [pc, #360]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea2:	4957      	ldr	r1, [pc, #348]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	650b      	str	r3, [r1, #80]	; 0x50
 8009ea8:	e001      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d044      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ec4:	d01b      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8009ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eca:	d805      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d022      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ed4:	d00a      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009ed6:	e01b      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009edc:	d01d      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ee2:	d01c      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009ee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ee8:	d01b      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009eea:	e011      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 faf2 	bl	800b4dc <RCCEx_PLL2_Config>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009efc:	e012      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	3324      	adds	r3, #36	; 0x24
 8009f02:	2101      	movs	r1, #1
 8009f04:	4618      	mov	r0, r3
 8009f06:	f001 fb9b 	bl	800b640 <RCCEx_PLL3_Config>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009f0e:	e009      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	75fb      	strb	r3, [r7, #23]
      break;
 8009f14:	e006      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009f16:	bf00      	nop
 8009f18:	e004      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009f1a:	bf00      	nop
 8009f1c:	e002      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009f1e:	bf00      	nop
 8009f20:	e000      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10a      	bne.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009f2a:	4b35      	ldr	r3, [pc, #212]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f38:	4931      	ldr	r1, [pc, #196]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	658b      	str	r3, [r1, #88]	; 0x58
 8009f3e:	e001      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
 8009f42:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d02d      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f58:	d005      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f5e:	d009      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d013      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009f64:	e00f      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f66:	4b26      	ldr	r3, [pc, #152]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	4a25      	ldr	r2, [pc, #148]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009f72:	e00c      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3304      	adds	r3, #4
 8009f78:	2101      	movs	r1, #1
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 faae 	bl	800b4dc <RCCEx_PLL2_Config>
 8009f80:	4603      	mov	r3, r0
 8009f82:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009f84:	e003      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	75fb      	strb	r3, [r7, #23]
      break;
 8009f8a:	e000      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d109      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009f94:	4b1a      	ldr	r3, [pc, #104]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fa0:	4917      	ldr	r1, [pc, #92]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	650b      	str	r3, [r1, #80]	; 0x50
 8009fa6:	e001      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
 8009faa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d035      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbc:	2b03      	cmp	r3, #3
 8009fbe:	d81b      	bhi.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009fc0:	a201      	add	r2, pc, #4	; (adr r2, 8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc6:	bf00      	nop
 8009fc8:	0800a005 	.word	0x0800a005
 8009fcc:	08009fd9 	.word	0x08009fd9
 8009fd0:	08009fe7 	.word	0x08009fe7
 8009fd4:	0800a005 	.word	0x0800a005
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fd8:	4b09      	ldr	r3, [pc, #36]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	4a08      	ldr	r2, [pc, #32]	; (800a000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009fe4:	e00f      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	2102      	movs	r1, #2
 8009fec:	4618      	mov	r0, r3
 8009fee:	f001 fa75 	bl	800b4dc <RCCEx_PLL2_Config>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ff6:	e006      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8009ffc:	e003      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009ffe:	bf00      	nop
 800a000:	58024400 	.word	0x58024400
      break;
 800a004:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d109      	bne.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a00c:	4bba      	ldr	r3, [pc, #744]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a00e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a010:	f023 0203 	bic.w	r2, r3, #3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a018:	49b7      	ldr	r1, [pc, #732]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a01a:	4313      	orrs	r3, r2
 800a01c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a01e:	e001      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 8086 	beq.w	800a13e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a032:	4bb2      	ldr	r3, [pc, #712]	; (800a2fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4ab1      	ldr	r2, [pc, #708]	; (800a2fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a03c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a03e:	f7f7 fdc1 	bl	8001bc4 <HAL_GetTick>
 800a042:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a044:	e009      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a046:	f7f7 fdbd 	bl	8001bc4 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b64      	cmp	r3, #100	; 0x64
 800a052:	d902      	bls.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	75fb      	strb	r3, [r7, #23]
        break;
 800a058:	e005      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a05a:	4ba8      	ldr	r3, [pc, #672]	; (800a2fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0ef      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d166      	bne.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a06c:	4ba2      	ldr	r3, [pc, #648]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a06e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a076:	4053      	eors	r3, r2
 800a078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d013      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a080:	4b9d      	ldr	r3, [pc, #628]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a088:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a08a:	4b9b      	ldr	r3, [pc, #620]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a08e:	4a9a      	ldr	r2, [pc, #616]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a094:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a096:	4b98      	ldr	r3, [pc, #608]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a09a:	4a97      	ldr	r2, [pc, #604]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a09c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a0a2:	4a95      	ldr	r2, [pc, #596]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a0ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0b2:	d115      	bne.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b4:	f7f7 fd86 	bl	8001bc4 <HAL_GetTick>
 800a0b8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0ba:	e00b      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0bc:	f7f7 fd82 	bl	8001bc4 <HAL_GetTick>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d902      	bls.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	75fb      	strb	r3, [r7, #23]
            break;
 800a0d2:	e005      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0d4:	4b88      	ldr	r3, [pc, #544]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d8:	f003 0302 	and.w	r3, r3, #2
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d0ed      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d126      	bne.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a0ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0f4:	d10d      	bne.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800a0f6:	4b80      	ldr	r3, [pc, #512]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a104:	0919      	lsrs	r1, r3, #4
 800a106:	4b7e      	ldr	r3, [pc, #504]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a108:	400b      	ands	r3, r1
 800a10a:	497b      	ldr	r1, [pc, #492]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	610b      	str	r3, [r1, #16]
 800a110:	e005      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800a112:	4b79      	ldr	r3, [pc, #484]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	4a78      	ldr	r2, [pc, #480]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a118:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a11c:	6113      	str	r3, [r2, #16]
 800a11e:	4b76      	ldr	r3, [pc, #472]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a120:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a12c:	4972      	ldr	r1, [pc, #456]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	670b      	str	r3, [r1, #112]	; 0x70
 800a132:	e004      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	75bb      	strb	r3, [r7, #22]
 800a138:	e001      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	d07d      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a14e:	2b28      	cmp	r3, #40	; 0x28
 800a150:	d866      	bhi.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800a152:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a158:	0800a227 	.word	0x0800a227
 800a15c:	0800a221 	.word	0x0800a221
 800a160:	0800a221 	.word	0x0800a221
 800a164:	0800a221 	.word	0x0800a221
 800a168:	0800a221 	.word	0x0800a221
 800a16c:	0800a221 	.word	0x0800a221
 800a170:	0800a221 	.word	0x0800a221
 800a174:	0800a221 	.word	0x0800a221
 800a178:	0800a1fd 	.word	0x0800a1fd
 800a17c:	0800a221 	.word	0x0800a221
 800a180:	0800a221 	.word	0x0800a221
 800a184:	0800a221 	.word	0x0800a221
 800a188:	0800a221 	.word	0x0800a221
 800a18c:	0800a221 	.word	0x0800a221
 800a190:	0800a221 	.word	0x0800a221
 800a194:	0800a221 	.word	0x0800a221
 800a198:	0800a20f 	.word	0x0800a20f
 800a19c:	0800a221 	.word	0x0800a221
 800a1a0:	0800a221 	.word	0x0800a221
 800a1a4:	0800a221 	.word	0x0800a221
 800a1a8:	0800a221 	.word	0x0800a221
 800a1ac:	0800a221 	.word	0x0800a221
 800a1b0:	0800a221 	.word	0x0800a221
 800a1b4:	0800a221 	.word	0x0800a221
 800a1b8:	0800a227 	.word	0x0800a227
 800a1bc:	0800a221 	.word	0x0800a221
 800a1c0:	0800a221 	.word	0x0800a221
 800a1c4:	0800a221 	.word	0x0800a221
 800a1c8:	0800a221 	.word	0x0800a221
 800a1cc:	0800a221 	.word	0x0800a221
 800a1d0:	0800a221 	.word	0x0800a221
 800a1d4:	0800a221 	.word	0x0800a221
 800a1d8:	0800a227 	.word	0x0800a227
 800a1dc:	0800a221 	.word	0x0800a221
 800a1e0:	0800a221 	.word	0x0800a221
 800a1e4:	0800a221 	.word	0x0800a221
 800a1e8:	0800a221 	.word	0x0800a221
 800a1ec:	0800a221 	.word	0x0800a221
 800a1f0:	0800a221 	.word	0x0800a221
 800a1f4:	0800a221 	.word	0x0800a221
 800a1f8:	0800a227 	.word	0x0800a227
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3304      	adds	r3, #4
 800a200:	2101      	movs	r1, #1
 800a202:	4618      	mov	r0, r3
 800a204:	f001 f96a 	bl	800b4dc <RCCEx_PLL2_Config>
 800a208:	4603      	mov	r3, r0
 800a20a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a20c:	e00c      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3324      	adds	r3, #36	; 0x24
 800a212:	2101      	movs	r1, #1
 800a214:	4618      	mov	r0, r3
 800a216:	f001 fa13 	bl	800b640 <RCCEx_PLL3_Config>
 800a21a:	4603      	mov	r3, r0
 800a21c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a21e:	e003      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	75fb      	strb	r3, [r7, #23]
      break;
 800a224:	e000      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800a226:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d109      	bne.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a22e:	4b32      	ldr	r3, [pc, #200]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a232:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a23a:	492f      	ldr	r1, [pc, #188]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a23c:	4313      	orrs	r3, r2
 800a23e:	654b      	str	r3, [r1, #84]	; 0x54
 800a240:	e001      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a242:	7dfb      	ldrb	r3, [r7, #23]
 800a244:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0302 	and.w	r3, r3, #2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d037      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a256:	2b05      	cmp	r3, #5
 800a258:	d820      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800a25a:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a2a3 	.word	0x0800a2a3
 800a264:	0800a279 	.word	0x0800a279
 800a268:	0800a28b 	.word	0x0800a28b
 800a26c:	0800a2a3 	.word	0x0800a2a3
 800a270:	0800a2a3 	.word	0x0800a2a3
 800a274:	0800a2a3 	.word	0x0800a2a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	3304      	adds	r3, #4
 800a27c:	2101      	movs	r1, #1
 800a27e:	4618      	mov	r0, r3
 800a280:	f001 f92c 	bl	800b4dc <RCCEx_PLL2_Config>
 800a284:	4603      	mov	r3, r0
 800a286:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a288:	e00c      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3324      	adds	r3, #36	; 0x24
 800a28e:	2101      	movs	r1, #1
 800a290:	4618      	mov	r0, r3
 800a292:	f001 f9d5 	bl	800b640 <RCCEx_PLL3_Config>
 800a296:	4603      	mov	r3, r0
 800a298:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a29a:	e003      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	75fb      	strb	r3, [r7, #23]
      break;
 800a2a0:	e000      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800a2a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2a4:	7dfb      	ldrb	r3, [r7, #23]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d109      	bne.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a2aa:	4b13      	ldr	r3, [pc, #76]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ae:	f023 0207 	bic.w	r2, r3, #7
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2b6:	4910      	ldr	r1, [pc, #64]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	654b      	str	r3, [r1, #84]	; 0x54
 800a2bc:	e001      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 0304 	and.w	r3, r3, #4
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d040      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d4:	2b05      	cmp	r3, #5
 800a2d6:	d827      	bhi.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800a2d8:	a201      	add	r2, pc, #4	; (adr r2, 800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800a2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2de:	bf00      	nop
 800a2e0:	0800a32f 	.word	0x0800a32f
 800a2e4:	0800a305 	.word	0x0800a305
 800a2e8:	0800a317 	.word	0x0800a317
 800a2ec:	0800a32f 	.word	0x0800a32f
 800a2f0:	0800a32f 	.word	0x0800a32f
 800a2f4:	0800a32f 	.word	0x0800a32f
 800a2f8:	58024400 	.word	0x58024400
 800a2fc:	58024800 	.word	0x58024800
 800a300:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	3304      	adds	r3, #4
 800a308:	2101      	movs	r1, #1
 800a30a:	4618      	mov	r0, r3
 800a30c:	f001 f8e6 	bl	800b4dc <RCCEx_PLL2_Config>
 800a310:	4603      	mov	r3, r0
 800a312:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a314:	e00c      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	3324      	adds	r3, #36	; 0x24
 800a31a:	2101      	movs	r1, #1
 800a31c:	4618      	mov	r0, r3
 800a31e:	f001 f98f 	bl	800b640 <RCCEx_PLL3_Config>
 800a322:	4603      	mov	r3, r0
 800a324:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a326:	e003      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	75fb      	strb	r3, [r7, #23]
      break;
 800a32c:	e000      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800a32e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a330:	7dfb      	ldrb	r3, [r7, #23]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a336:	4bb2      	ldr	r3, [pc, #712]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a33a:	f023 0207 	bic.w	r2, r3, #7
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a344:	49ae      	ldr	r1, [pc, #696]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a346:	4313      	orrs	r3, r2
 800a348:	658b      	str	r3, [r1, #88]	; 0x58
 800a34a:	e001      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34c:	7dfb      	ldrb	r3, [r7, #23]
 800a34e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 0320 	and.w	r3, r3, #32
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d044      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a366:	d01b      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800a368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a36c:	d805      	bhi.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d022      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800a372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a376:	d00a      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x952>
 800a378:	e01b      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a37a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a37e:	d01d      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a384:	d01c      	beq.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800a386:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a38a:	d01b      	beq.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a38c:	e011      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3304      	adds	r3, #4
 800a392:	2100      	movs	r1, #0
 800a394:	4618      	mov	r0, r3
 800a396:	f001 f8a1 	bl	800b4dc <RCCEx_PLL2_Config>
 800a39a:	4603      	mov	r3, r0
 800a39c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a39e:	e012      	b.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3324      	adds	r3, #36	; 0x24
 800a3a4:	2102      	movs	r1, #2
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f001 f94a 	bl	800b640 <RCCEx_PLL3_Config>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a3b0:	e009      	b.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b6:	e006      	b.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a3b8:	bf00      	nop
 800a3ba:	e004      	b.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a3bc:	bf00      	nop
 800a3be:	e002      	b.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a3c0:	bf00      	nop
 800a3c2:	e000      	b.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a3c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10a      	bne.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a3cc:	4b8c      	ldr	r3, [pc, #560]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3da:	4989      	ldr	r1, [pc, #548]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	654b      	str	r3, [r1, #84]	; 0x54
 800a3e0:	e001      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
 800a3e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d044      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3fc:	d01b      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800a3fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a402:	d805      	bhi.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a404:	2b00      	cmp	r3, #0
 800a406:	d022      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a40c:	d00a      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800a40e:	e01b      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800a410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a414:	d01d      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a416:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a41a:	d01c      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800a41c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a420:	d01b      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800a422:	e011      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3304      	adds	r3, #4
 800a428:	2100      	movs	r1, #0
 800a42a:	4618      	mov	r0, r3
 800a42c:	f001 f856 	bl	800b4dc <RCCEx_PLL2_Config>
 800a430:	4603      	mov	r3, r0
 800a432:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a434:	e012      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	3324      	adds	r3, #36	; 0x24
 800a43a:	2102      	movs	r1, #2
 800a43c:	4618      	mov	r0, r3
 800a43e:	f001 f8ff 	bl	800b640 <RCCEx_PLL3_Config>
 800a442:	4603      	mov	r3, r0
 800a444:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a446:	e009      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	75fb      	strb	r3, [r7, #23]
      break;
 800a44c:	e006      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a44e:	bf00      	nop
 800a450:	e004      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a452:	bf00      	nop
 800a454:	e002      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a456:	bf00      	nop
 800a458:	e000      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a45a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10a      	bne.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a462:	4b67      	ldr	r3, [pc, #412]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a466:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a470:	4963      	ldr	r1, [pc, #396]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a472:	4313      	orrs	r3, r2
 800a474:	658b      	str	r3, [r1, #88]	; 0x58
 800a476:	e001      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a484:	2b00      	cmp	r3, #0
 800a486:	d044      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a48e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a492:	d01b      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800a494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a498:	d805      	bhi.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d022      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a49e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4a2:	d00a      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a4a4:	e01b      	b.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800a4a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4aa:	d01d      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a4ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a4b0:	d01c      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a4b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a4b6:	d01b      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800a4b8:	e011      	b.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	2100      	movs	r1, #0
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f001 f80b 	bl	800b4dc <RCCEx_PLL2_Config>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a4ca:	e012      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3324      	adds	r3, #36	; 0x24
 800a4d0:	2102      	movs	r1, #2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f001 f8b4 	bl	800b640 <RCCEx_PLL3_Config>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a4dc:	e009      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a4e2:	e006      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a4e4:	bf00      	nop
 800a4e6:	e004      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a4e8:	bf00      	nop
 800a4ea:	e002      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a4ec:	bf00      	nop
 800a4ee:	e000      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a4f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a4f8:	4b41      	ldr	r3, [pc, #260]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a506:	493e      	ldr	r1, [pc, #248]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	658b      	str	r3, [r1, #88]	; 0x58
 800a50c:	e001      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 0308 	and.w	r3, r3, #8
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d01a      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a528:	d10a      	bne.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3324      	adds	r3, #36	; 0x24
 800a52e:	2102      	movs	r1, #2
 800a530:	4618      	mov	r0, r3
 800a532:	f001 f885 	bl	800b640 <RCCEx_PLL3_Config>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a540:	4b2f      	ldr	r3, [pc, #188]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a544:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a54e:	492c      	ldr	r1, [pc, #176]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a550:	4313      	orrs	r3, r2
 800a552:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 0310 	and.w	r3, r3, #16
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d01a      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a56a:	d10a      	bne.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3324      	adds	r3, #36	; 0x24
 800a570:	2102      	movs	r1, #2
 800a572:	4618      	mov	r0, r3
 800a574:	f001 f864 	bl	800b640 <RCCEx_PLL3_Config>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a582:	4b1f      	ldr	r3, [pc, #124]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a586:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a590:	491b      	ldr	r1, [pc, #108]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a592:	4313      	orrs	r3, r2
 800a594:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d032      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a5a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5ac:	d00d      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800a5ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5b2:	d016      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d111      	bne.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	2100      	movs	r1, #0
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 ff8c 	bl	800b4dc <RCCEx_PLL2_Config>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a5c8:	e00c      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3324      	adds	r3, #36	; 0x24
 800a5ce:	2102      	movs	r1, #2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f001 f835 	bl	800b640 <RCCEx_PLL3_Config>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a5da:	e003      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	75fb      	strb	r3, [r7, #23]
      break;
 800a5e0:	e000      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800a5e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10c      	bne.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a5ea:	4b05      	ldr	r3, [pc, #20]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a5f8:	4901      	ldr	r1, [pc, #4]	; (800a600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	658b      	str	r3, [r1, #88]	; 0x58
 800a5fe:	e003      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800a600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a604:	7dfb      	ldrb	r3, [r7, #23]
 800a606:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d02f      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a61a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a61e:	d00c      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a620:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a624:	d015      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800a626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a62a:	d10f      	bne.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a62c:	4b71      	ldr	r3, [pc, #452]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a630:	4a70      	ldr	r2, [pc, #448]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a638:	e00c      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3324      	adds	r3, #36	; 0x24
 800a63e:	2101      	movs	r1, #1
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fffd 	bl	800b640 <RCCEx_PLL3_Config>
 800a646:	4603      	mov	r3, r0
 800a648:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a64a:	e003      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	75fb      	strb	r3, [r7, #23]
      break;
 800a650:	e000      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800a652:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a654:	7dfb      	ldrb	r3, [r7, #23]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10a      	bne.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a65a:	4b66      	ldr	r3, [pc, #408]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a668:	4962      	ldr	r1, [pc, #392]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	654b      	str	r3, [r1, #84]	; 0x54
 800a66e:	e001      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a670:	7dfb      	ldrb	r3, [r7, #23]
 800a672:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d029      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800a688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a68c:	d007      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a68e:	e00f      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a690:	4b58      	ldr	r3, [pc, #352]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	4a57      	ldr	r2, [pc, #348]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a69a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a69c:	e00b      	b.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	2102      	movs	r1, #2
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 ff19 	bl	800b4dc <RCCEx_PLL2_Config>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a6ae:	e002      	b.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a6b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6b6:	7dfb      	ldrb	r3, [r7, #23]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d109      	bne.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a6bc:	4b4d      	ldr	r3, [pc, #308]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a6be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c8:	494a      	ldr	r1, [pc, #296]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a6ce:	e001      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
 800a6d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00a      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3324      	adds	r3, #36	; 0x24
 800a6e4:	2102      	movs	r1, #2
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 ffaa 	bl	800b640 <RCCEx_PLL3_Config>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d02f      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a70a:	d00c      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a70c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a710:	d802      	bhi.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800a712:	2b00      	cmp	r3, #0
 800a714:	d011      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800a716:	e00d      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800a718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a71c:	d00f      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800a71e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a722:	d00e      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800a724:	e006      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a726:	4b33      	ldr	r3, [pc, #204]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72a:	4a32      	ldr	r2, [pc, #200]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a72c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a730:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a732:	e007      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	75fb      	strb	r3, [r7, #23]
      break;
 800a738:	e004      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a73a:	bf00      	nop
 800a73c:	e002      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a73e:	bf00      	nop
 800a740:	e000      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a742:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a744:	7dfb      	ldrb	r3, [r7, #23]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d109      	bne.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a74a:	4b2a      	ldr	r3, [pc, #168]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a756:	4927      	ldr	r1, [pc, #156]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	654b      	str	r3, [r1, #84]	; 0x54
 800a75c:	e001      	b.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d008      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a76e:	4b21      	ldr	r3, [pc, #132]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a772:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77a:	491e      	ldr	r1, [pc, #120]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d008      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a78c:	4b19      	ldr	r3, [pc, #100]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a790:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a798:	4916      	ldr	r1, [pc, #88]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00d      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a7aa:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	4a11      	ldr	r2, [pc, #68]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a7b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7b4:	6113      	str	r3, [r2, #16]
 800a7b6:	4b0f      	ldr	r3, [pc, #60]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a7b8:	691a      	ldr	r2, [r3, #16]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a7c0:	490c      	ldr	r1, [pc, #48]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	da08      	bge.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a7ce:	4b09      	ldr	r3, [pc, #36]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7da:	4906      	ldr	r1, [pc, #24]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800a7e0:	7dbb      	ldrb	r3, [r7, #22]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	e000      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	58024400 	.word	0x58024400

0800a7f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b090      	sub	sp, #64	; 0x40
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a806:	d150      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a808:	4ba1      	ldr	r3, [pc, #644]	; (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a80c:	f003 0307 	and.w	r3, r3, #7
 800a810:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	2b04      	cmp	r3, #4
 800a816:	d844      	bhi.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a818:	a201      	add	r2, pc, #4	; (adr r2, 800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81e:	bf00      	nop
 800a820:	0800a835 	.word	0x0800a835
 800a824:	0800a845 	.word	0x0800a845
 800a828:	0800a855 	.word	0x0800a855
 800a82c:	0800a89d 	.word	0x0800a89d
 800a830:	0800a865 	.word	0x0800a865
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fd03 	bl	800b244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a842:	e241      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a844:	f107 0318 	add.w	r3, r7, #24
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 fa63 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a852:	e239      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a854:	f107 030c 	add.w	r3, r7, #12
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 fba7 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a862:	e231      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a864:	4b8a      	ldr	r3, [pc, #552]	; (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a868:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a86c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a870:	2b00      	cmp	r3, #0
 800a872:	d102      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a874:	4b87      	ldr	r3, [pc, #540]	; (800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a878:	e226      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a880:	d102      	bne.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800a882:	4b85      	ldr	r3, [pc, #532]	; (800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a886:	e21f      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a88e:	d102      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800a890:	4b82      	ldr	r3, [pc, #520]	; (800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a894:	e218      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a896:	2300      	movs	r3, #0
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a89a:	e215      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a89c:	4b80      	ldr	r3, [pc, #512]	; (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a0:	e212      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a6:	bf00      	nop
 800a8a8:	e20e      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8b0:	d14f      	bne.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a8b2:	4b77      	ldr	r3, [pc, #476]	; (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a8ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	2b80      	cmp	r3, #128	; 0x80
 800a8c0:	d01c      	beq.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a8c2:	2b80      	cmp	r3, #128	; 0x80
 800a8c4:	d804      	bhi.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d008      	beq.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a8ca:	2b40      	cmp	r3, #64	; 0x40
 800a8cc:	d00e      	beq.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a8ce:	e03c      	b.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a8d0:	2bc0      	cmp	r3, #192	; 0xc0
 800a8d2:	d037      	beq.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a8d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8d8:	d018      	beq.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a8da:	e036      	b.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 fcaf 	bl	800b244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8ea:	e1ed      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ec:	f107 0318 	add.w	r3, r7, #24
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fa0f 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8fa:	e1e5      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8fc:	f107 030c 	add.w	r3, r7, #12
 800a900:	4618      	mov	r0, r3
 800a902:	f000 fb53 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a90a:	e1dd      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a90c:	4b60      	ldr	r3, [pc, #384]	; (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a90e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a914:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d102      	bne.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a91c:	4b5d      	ldr	r3, [pc, #372]	; (800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a920:	e1d2      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a928:	d102      	bne.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a92a:	4b5b      	ldr	r3, [pc, #364]	; (800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a92c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a92e:	e1cb      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a936:	d102      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a938:	4b58      	ldr	r3, [pc, #352]	; (800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a93a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a93c:	e1c4      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a942:	e1c1      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a944:	4b56      	ldr	r3, [pc, #344]	; (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a948:	e1be      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a94e:	bf00      	nop
 800a950:	e1ba      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a958:	d153      	bne.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a95a:	4b4d      	ldr	r3, [pc, #308]	; (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a95c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a95e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a962:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a96a:	d01f      	beq.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a96c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a970:	d805      	bhi.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00a      	beq.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a97a:	d00f      	beq.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a97c:	e03d      	b.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a97e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a982:	d037      	beq.n	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a984:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a988:	d018      	beq.n	800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a98a:	e036      	b.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a98c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a990:	4618      	mov	r0, r3
 800a992:	f000 fc57 	bl	800b244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a99a:	e195      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a99c:	f107 0318 	add.w	r3, r7, #24
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 f9b7 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9aa:	e18d      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ac:	f107 030c 	add.w	r3, r7, #12
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f000 fafb 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ba:	e185      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9bc:	4b34      	ldr	r3, [pc, #208]	; (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d102      	bne.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a9cc:	4b31      	ldr	r3, [pc, #196]	; (800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a9d0:	e17a      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9d8:	d102      	bne.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a9da:	4b2f      	ldr	r3, [pc, #188]	; (800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9de:	e173      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9e6:	d102      	bne.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a9e8:	4b2c      	ldr	r3, [pc, #176]	; (800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ec:	e16c      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9f2:	e169      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a9f4:	4b2a      	ldr	r3, [pc, #168]	; (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9f8:	e166      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9fe:	bf00      	nop
 800aa00:	e162      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa08:	d15d      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800aa0a:	4b21      	ldr	r3, [pc, #132]	; (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800aa12:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa1a:	d01f      	beq.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800aa1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa20:	d805      	bhi.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00a      	beq.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800aa26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa2a:	d00f      	beq.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800aa2c:	e047      	b.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800aa2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa32:	d041      	beq.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800aa34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa38:	d018      	beq.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800aa3a:	e040      	b.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 fbff 	bl	800b244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa4a:	e13d      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa4c:	f107 0318 	add.w	r3, r7, #24
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 f95f 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa5a:	e135      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa5c:	f107 030c 	add.w	r3, r7, #12
 800aa60:	4618      	mov	r0, r3
 800aa62:	f000 faa3 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa6a:	e12d      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa6c:	4b08      	ldr	r3, [pc, #32]	; (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa74:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800aa76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d102      	bne.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800aa7c:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800aa7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800aa80:	e122      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800aa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa88:	d10c      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800aa8a:	4b03      	ldr	r3, [pc, #12]	; (800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aa8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa8e:	e11b      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800aa90:	58024400 	.word	0x58024400
 800aa94:	03d09000 	.word	0x03d09000
 800aa98:	003d0900 	.word	0x003d0900
 800aa9c:	007a1200 	.word	0x007a1200
 800aaa0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaaa:	d102      	bne.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800aaac:	4b89      	ldr	r3, [pc, #548]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800aaae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aab0:	e10a      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aab6:	e107      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aab8:	4b87      	ldr	r3, [pc, #540]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aabc:	e104      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aac2:	bf00      	nop
 800aac4:	e100      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aacc:	d153      	bne.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800aace:	4b83      	ldr	r3, [pc, #524]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800aad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aad6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aade:	d01f      	beq.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800aae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aae4:	d805      	bhi.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800aaea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaee:	d00f      	beq.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800aaf0:	e03d      	b.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800aaf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aaf6:	d037      	beq.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800aaf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aafc:	d018      	beq.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800aafe:	e036      	b.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab04:	4618      	mov	r0, r3
 800ab06:	f000 fb9d 	bl	800b244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab0e:	e0db      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab10:	f107 0318 	add.w	r3, r7, #24
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 f8fd 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab1e:	e0d3      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab20:	f107 030c 	add.w	r3, r7, #12
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fa41 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab2e:	e0cb      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab30:	4b6a      	ldr	r3, [pc, #424]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800ab32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab38:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800ab3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800ab40:	4b67      	ldr	r3, [pc, #412]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800ab42:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800ab44:	e0c0      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800ab46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab4c:	d102      	bne.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800ab4e:	4b65      	ldr	r3, [pc, #404]	; (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800ab50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab52:	e0b9      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800ab54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab5a:	d102      	bne.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800ab5c:	4b5d      	ldr	r3, [pc, #372]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800ab5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab60:	e0b2      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab66:	e0af      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ab68:	4b5b      	ldr	r3, [pc, #364]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800ab6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab6c:	e0ac      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab72:	bf00      	nop
 800ab74:	e0a8      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab7c:	d13d      	bne.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ab7e:	4b57      	ldr	r3, [pc, #348]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800ab80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ab86:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ab88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab8e:	d00c      	beq.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ab90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab94:	d011      	beq.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d12b      	bne.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab9a:	f107 0318 	add.w	r3, r7, #24
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 f8b8 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aba8:	e08e      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abaa:	f107 030c 	add.w	r3, r7, #12
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 f9fc 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abb8:	e086      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800abba:	4b48      	ldr	r3, [pc, #288]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800abbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abc2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800abc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d102      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800abca:	4b45      	ldr	r3, [pc, #276]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800abcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800abce:	e07b      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800abd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abd6:	d102      	bne.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800abd8:	4b42      	ldr	r3, [pc, #264]	; (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800abda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abdc:	e074      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800abde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abe4:	d102      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800abe6:	4b3b      	ldr	r3, [pc, #236]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800abe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abea:	e06d      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abf0:	e06a      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abf6:	bf00      	nop
 800abf8:	e066      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac00:	d11f      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ac02:	4b36      	ldr	r3, [pc, #216]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800ac04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac0a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ac12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac16:	d008      	beq.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800ac18:	e00f      	b.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fb10 	bl	800b244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac28:	e04e      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac2a:	f107 0318 	add.w	r3, r7, #24
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 f870 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac38:	e046      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac3e:	bf00      	nop
 800ac40:	e042      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac48:	d13c      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ac4a:	4b24      	ldr	r3, [pc, #144]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800ac4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac4e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ac52:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac5a:	d01e      	beq.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800ac5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac60:	d805      	bhi.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00d      	beq.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ac66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac6a:	d00e      	beq.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800ac6c:	e026      	b.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800ac6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac72:	d01d      	beq.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800ac74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac78:	d01d      	beq.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800ac7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac7e:	d014      	beq.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800ac80:	e01c      	b.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ac82:	f000 f831 	bl	800ace8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac86:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ac88:	e01e      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac8a:	f107 0318 	add.w	r3, r7, #24
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 f840 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac98:	e016      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac9a:	f107 030c 	add.w	r3, r7, #12
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 f984 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aca8:	e00e      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800acaa:	4b0d      	ldr	r3, [pc, #52]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800acac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acae:	e00b      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800acb0:	4b0c      	ldr	r3, [pc, #48]	; (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800acb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acb4:	e008      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800acb6:	4b07      	ldr	r3, [pc, #28]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800acb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acba:	e005      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acc0:	bf00      	nop
 800acc2:	e001      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800acc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800acca:	4618      	mov	r0, r3
 800accc:	3740      	adds	r7, #64	; 0x40
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	007a1200 	.word	0x007a1200
 800acd8:	00bb8000 	.word	0x00bb8000
 800acdc:	58024400 	.word	0x58024400
 800ace0:	03d09000 	.word	0x03d09000
 800ace4:	003d0900 	.word	0x003d0900

0800ace8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800acec:	f7fe fe4a 	bl	8009984 <HAL_RCC_GetHCLKFreq>
 800acf0:	4601      	mov	r1, r0
 800acf2:	4b06      	ldr	r3, [pc, #24]	; (800ad0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800acf4:	6a1b      	ldr	r3, [r3, #32]
 800acf6:	091b      	lsrs	r3, r3, #4
 800acf8:	f003 0307 	and.w	r3, r3, #7
 800acfc:	4a04      	ldr	r2, [pc, #16]	; (800ad10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800acfe:	5cd3      	ldrb	r3, [r2, r3]
 800ad00:	f003 031f 	and.w	r3, r3, #31
 800ad04:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	58024400 	.word	0x58024400
 800ad10:	0801b3b8 	.word	0x0801b3b8

0800ad14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b089      	sub	sp, #36	; 0x24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad1c:	4b9d      	ldr	r3, [pc, #628]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad20:	f003 0303 	and.w	r3, r3, #3
 800ad24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ad26:	4b9b      	ldr	r3, [pc, #620]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad2a:	0b1b      	lsrs	r3, r3, #12
 800ad2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ad32:	4b98      	ldr	r3, [pc, #608]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad36:	091b      	lsrs	r3, r3, #4
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ad3e:	4b95      	ldr	r3, [pc, #596]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad42:	08db      	lsrs	r3, r3, #3
 800ad44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	fb02 f303 	mul.w	r3, r2, r3
 800ad4e:	ee07 3a90 	vmov	s15, r3
 800ad52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 810a 	beq.w	800af76 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d05a      	beq.n	800ae1e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d302      	bcc.n	800ad72 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d078      	beq.n	800ae62 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800ad70:	e099      	b.n	800aea6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad72:	4b88      	ldr	r3, [pc, #544]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0320 	and.w	r3, r3, #32
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d02d      	beq.n	800adda <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad7e:	4b85      	ldr	r3, [pc, #532]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	08db      	lsrs	r3, r3, #3
 800ad84:	f003 0303 	and.w	r3, r3, #3
 800ad88:	4a83      	ldr	r2, [pc, #524]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800ad8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad8e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	ee07 3a90 	vmov	s15, r3
 800ada0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ada8:	4b7a      	ldr	r3, [pc, #488]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800adaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb0:	ee07 3a90 	vmov	s15, r3
 800adb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800adbc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800adc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800add0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800add8:	e087      	b.n	800aeea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	ee07 3a90 	vmov	s15, r3
 800ade0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800ade8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adec:	4b69      	ldr	r3, [pc, #420]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800adee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf4:	ee07 3a90 	vmov	s15, r3
 800adf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adfc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae00:	eddf 5a66 	vldr	s11, [pc, #408]	; 800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ae04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae1c:	e065      	b.n	800aeea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	ee07 3a90 	vmov	s15, r3
 800ae24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ae2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae30:	4b58      	ldr	r3, [pc, #352]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ae32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae38:	ee07 3a90 	vmov	s15, r3
 800ae3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae40:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae44:	eddf 5a55 	vldr	s11, [pc, #340]	; 800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ae48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae60:	e043      	b.n	800aeea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	ee07 3a90 	vmov	s15, r3
 800ae68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800ae70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae74:	4b47      	ldr	r3, [pc, #284]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ae76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7c:	ee07 3a90 	vmov	s15, r3
 800ae80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae84:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae88:	eddf 5a44 	vldr	s11, [pc, #272]	; 800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ae8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aea4:	e021      	b.n	800aeea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	ee07 3a90 	vmov	s15, r3
 800aeac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800aeb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb8:	4b36      	ldr	r3, [pc, #216]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aeba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec0:	ee07 3a90 	vmov	s15, r3
 800aec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aecc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aedc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aee8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800aeea:	4b2a      	ldr	r3, [pc, #168]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeee:	0a5b      	lsrs	r3, r3, #9
 800aef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef4:	ee07 3a90 	vmov	s15, r3
 800aef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af00:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af04:	edd7 6a07 	vldr	s13, [r7, #28]
 800af08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af10:	ee17 2a90 	vmov	r2, s15
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800af18:	4b1e      	ldr	r3, [pc, #120]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800af1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1c:	0c1b      	lsrs	r3, r3, #16
 800af1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af22:	ee07 3a90 	vmov	s15, r3
 800af26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af32:	edd7 6a07 	vldr	s13, [r7, #28]
 800af36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af3e:	ee17 2a90 	vmov	r2, s15
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800af46:	4b13      	ldr	r3, [pc, #76]	; (800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800af48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4a:	0e1b      	lsrs	r3, r3, #24
 800af4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af50:	ee07 3a90 	vmov	s15, r3
 800af54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af60:	edd7 6a07 	vldr	s13, [r7, #28]
 800af64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af6c:	ee17 2a90 	vmov	r2, s15
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800af74:	e008      	b.n	800af88 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	609a      	str	r2, [r3, #8]
}
 800af88:	bf00      	nop
 800af8a:	3724      	adds	r7, #36	; 0x24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr
 800af94:	58024400 	.word	0x58024400
 800af98:	03d09000 	.word	0x03d09000
 800af9c:	46000000 	.word	0x46000000
 800afa0:	4c742400 	.word	0x4c742400
 800afa4:	4a742400 	.word	0x4a742400
 800afa8:	4af42400 	.word	0x4af42400

0800afac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800afac:	b480      	push	{r7}
 800afae:	b089      	sub	sp, #36	; 0x24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afb4:	4b9d      	ldr	r3, [pc, #628]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800afb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb8:	f003 0303 	and.w	r3, r3, #3
 800afbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800afbe:	4b9b      	ldr	r3, [pc, #620]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800afc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc2:	0d1b      	lsrs	r3, r3, #20
 800afc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800afca:	4b98      	ldr	r3, [pc, #608]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800afcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afce:	0a1b      	lsrs	r3, r3, #8
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800afd6:	4b95      	ldr	r3, [pc, #596]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800afd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afda:	08db      	lsrs	r3, r3, #3
 800afdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	fb02 f303 	mul.w	r3, r2, r3
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f000 810a 	beq.w	800b20e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d05a      	beq.n	800b0b6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800b000:	2b01      	cmp	r3, #1
 800b002:	d302      	bcc.n	800b00a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800b004:	2b02      	cmp	r3, #2
 800b006:	d078      	beq.n	800b0fa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800b008:	e099      	b.n	800b13e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b00a:	4b88      	ldr	r3, [pc, #544]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0320 	and.w	r3, r3, #32
 800b012:	2b00      	cmp	r3, #0
 800b014:	d02d      	beq.n	800b072 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b016:	4b85      	ldr	r3, [pc, #532]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	08db      	lsrs	r3, r3, #3
 800b01c:	f003 0303 	and.w	r3, r3, #3
 800b020:	4a83      	ldr	r2, [pc, #524]	; (800b230 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800b022:	fa22 f303 	lsr.w	r3, r2, r3
 800b026:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	ee07 3a90 	vmov	s15, r3
 800b038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b040:	4b7a      	ldr	r3, [pc, #488]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b048:	ee07 3a90 	vmov	s15, r3
 800b04c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b050:	ed97 6a03 	vldr	s12, [r7, #12]
 800b054:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b234 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800b058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b05c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b06c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b070:	e087      	b.n	800b182 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	ee07 3a90 	vmov	s15, r3
 800b078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b07c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b238 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800b080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b084:	4b69      	ldr	r3, [pc, #420]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b08c:	ee07 3a90 	vmov	s15, r3
 800b090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b094:	ed97 6a03 	vldr	s12, [r7, #12]
 800b098:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b234 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800b09c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0b4:	e065      	b.n	800b182 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	ee07 3a90 	vmov	s15, r3
 800b0bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b23c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800b0c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0c8:	4b58      	ldr	r3, [pc, #352]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d0:	ee07 3a90 	vmov	s15, r3
 800b0d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b234 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800b0e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0f8:	e043      	b.n	800b182 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	ee07 3a90 	vmov	s15, r3
 800b100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b104:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800b108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b10c:	4b47      	ldr	r3, [pc, #284]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b114:	ee07 3a90 	vmov	s15, r3
 800b118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b120:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b234 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800b124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b12c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b134:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b138:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b13c:	e021      	b.n	800b182 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	ee07 3a90 	vmov	s15, r3
 800b144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b148:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800b23c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800b14c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b150:	4b36      	ldr	r3, [pc, #216]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b158:	ee07 3a90 	vmov	s15, r3
 800b15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b160:	ed97 6a03 	vldr	s12, [r7, #12]
 800b164:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b234 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800b168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b16c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b17c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b180:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b182:	4b2a      	ldr	r3, [pc, #168]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	0a5b      	lsrs	r3, r3, #9
 800b188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b18c:	ee07 3a90 	vmov	s15, r3
 800b190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b19c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1a8:	ee17 2a90 	vmov	r2, s15
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b1b0:	4b1e      	ldr	r3, [pc, #120]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b4:	0c1b      	lsrs	r3, r3, #16
 800b1b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ba:	ee07 3a90 	vmov	s15, r3
 800b1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1d6:	ee17 2a90 	vmov	r2, s15
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b1de:	4b13      	ldr	r3, [pc, #76]	; (800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	0e1b      	lsrs	r3, r3, #24
 800b1e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1e8:	ee07 3a90 	vmov	s15, r3
 800b1ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b204:	ee17 2a90 	vmov	r2, s15
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b20c:	e008      	b.n	800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	609a      	str	r2, [r3, #8]
}
 800b220:	bf00      	nop
 800b222:	3724      	adds	r7, #36	; 0x24
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	58024400 	.word	0x58024400
 800b230:	03d09000 	.word	0x03d09000
 800b234:	46000000 	.word	0x46000000
 800b238:	4c742400 	.word	0x4c742400
 800b23c:	4a742400 	.word	0x4a742400
 800b240:	4af42400 	.word	0x4af42400

0800b244 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b244:	b480      	push	{r7}
 800b246:	b089      	sub	sp, #36	; 0x24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b24c:	4b9d      	ldr	r3, [pc, #628]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b250:	f003 0303 	and.w	r3, r3, #3
 800b254:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b256:	4b9b      	ldr	r3, [pc, #620]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b25a:	091b      	lsrs	r3, r3, #4
 800b25c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b260:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b262:	4b98      	ldr	r3, [pc, #608]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b26c:	4b95      	ldr	r3, [pc, #596]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b270:	08db      	lsrs	r3, r3, #3
 800b272:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	fb02 f303 	mul.w	r3, r2, r3
 800b27c:	ee07 3a90 	vmov	s15, r3
 800b280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b284:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 810a 	beq.w	800b4a4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d05a      	beq.n	800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800b296:	2b01      	cmp	r3, #1
 800b298:	d302      	bcc.n	800b2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d078      	beq.n	800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800b29e:	e099      	b.n	800b3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2a0:	4b88      	ldr	r3, [pc, #544]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0320 	and.w	r3, r3, #32
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d02d      	beq.n	800b308 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2ac:	4b85      	ldr	r3, [pc, #532]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	08db      	lsrs	r3, r3, #3
 800b2b2:	f003 0303 	and.w	r3, r3, #3
 800b2b6:	4a84      	ldr	r2, [pc, #528]	; (800b4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800b2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2bc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	ee07 3a90 	vmov	s15, r3
 800b2c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	ee07 3a90 	vmov	s15, r3
 800b2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d6:	4b7b      	ldr	r3, [pc, #492]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b4cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b2ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b302:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b306:	e087      	b.n	800b418 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b312:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b4d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800b316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31a:	4b6a      	ldr	r3, [pc, #424]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b32e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b4cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b34a:	e065      	b.n	800b418 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b356:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b4d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35e:	4b59      	ldr	r3, [pc, #356]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b366:	ee07 3a90 	vmov	s15, r3
 800b36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b372:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b4cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b38e:	e043      	b.n	800b418 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b4d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a2:	4b48      	ldr	r3, [pc, #288]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3aa:	ee07 3a90 	vmov	s15, r3
 800b3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b4cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3d2:	e021      	b.n	800b418 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	ee07 3a90 	vmov	s15, r3
 800b3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b4d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3e6:	4b37      	ldr	r3, [pc, #220]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ee:	ee07 3a90 	vmov	s15, r3
 800b3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b4cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b412:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b416:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b418:	4b2a      	ldr	r3, [pc, #168]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41c:	0a5b      	lsrs	r3, r3, #9
 800b41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b422:	ee07 3a90 	vmov	s15, r3
 800b426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b42e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b432:	edd7 6a07 	vldr	s13, [r7, #28]
 800b436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b43a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b43e:	ee17 2a90 	vmov	r2, s15
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b446:	4b1f      	ldr	r3, [pc, #124]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b44a:	0c1b      	lsrs	r3, r3, #16
 800b44c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b450:	ee07 3a90 	vmov	s15, r3
 800b454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b45c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b460:	edd7 6a07 	vldr	s13, [r7, #28]
 800b464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b46c:	ee17 2a90 	vmov	r2, s15
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b474:	4b13      	ldr	r3, [pc, #76]	; (800b4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b478:	0e1b      	lsrs	r3, r3, #24
 800b47a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b48a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b48e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b49a:	ee17 2a90 	vmov	r2, s15
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b4a2:	e008      	b.n	800b4b6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	609a      	str	r2, [r3, #8]
}
 800b4b6:	bf00      	nop
 800b4b8:	3724      	adds	r7, #36	; 0x24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	58024400 	.word	0x58024400
 800b4c8:	03d09000 	.word	0x03d09000
 800b4cc:	46000000 	.word	0x46000000
 800b4d0:	4c742400 	.word	0x4c742400
 800b4d4:	4a742400 	.word	0x4a742400
 800b4d8:	4af42400 	.word	0x4af42400

0800b4dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4ea:	4b53      	ldr	r3, [pc, #332]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d101      	bne.n	800b4fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e099      	b.n	800b62e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b4fa:	4b4f      	ldr	r3, [pc, #316]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a4e      	ldr	r2, [pc, #312]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b500:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b506:	f7f6 fb5d 	bl	8001bc4 <HAL_GetTick>
 800b50a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b50c:	e008      	b.n	800b520 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b50e:	f7f6 fb59 	bl	8001bc4 <HAL_GetTick>
 800b512:	4602      	mov	r2, r0
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d901      	bls.n	800b520 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e086      	b.n	800b62e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b520:	4b45      	ldr	r3, [pc, #276]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1f0      	bne.n	800b50e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b52c:	4b42      	ldr	r3, [pc, #264]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b530:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	031b      	lsls	r3, r3, #12
 800b53a:	493f      	ldr	r1, [pc, #252]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b53c:	4313      	orrs	r3, r2
 800b53e:	628b      	str	r3, [r1, #40]	; 0x28
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	3b01      	subs	r3, #1
 800b546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	3b01      	subs	r3, #1
 800b550:	025b      	lsls	r3, r3, #9
 800b552:	b29b      	uxth	r3, r3
 800b554:	431a      	orrs	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	041b      	lsls	r3, r3, #16
 800b55e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b562:	431a      	orrs	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	3b01      	subs	r3, #1
 800b56a:	061b      	lsls	r3, r3, #24
 800b56c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b570:	4931      	ldr	r1, [pc, #196]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b572:	4313      	orrs	r3, r2
 800b574:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b576:	4b30      	ldr	r3, [pc, #192]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	492d      	ldr	r1, [pc, #180]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b584:	4313      	orrs	r3, r2
 800b586:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b588:	4b2b      	ldr	r3, [pc, #172]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58c:	f023 0220 	bic.w	r2, r3, #32
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	4928      	ldr	r1, [pc, #160]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b596:	4313      	orrs	r3, r2
 800b598:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b59a:	4b27      	ldr	r3, [pc, #156]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59e:	4a26      	ldr	r2, [pc, #152]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5a0:	f023 0310 	bic.w	r3, r3, #16
 800b5a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b5a6:	4b24      	ldr	r3, [pc, #144]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5aa:	4b24      	ldr	r3, [pc, #144]	; (800b63c <RCCEx_PLL2_Config+0x160>)
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	69d2      	ldr	r2, [r2, #28]
 800b5b2:	00d2      	lsls	r2, r2, #3
 800b5b4:	4920      	ldr	r1, [pc, #128]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b5ba:	4b1f      	ldr	r3, [pc, #124]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5be:	4a1e      	ldr	r2, [pc, #120]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5c0:	f043 0310 	orr.w	r3, r3, #16
 800b5c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d106      	bne.n	800b5da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b5cc:	4b1a      	ldr	r3, [pc, #104]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	4a19      	ldr	r2, [pc, #100]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5d8:	e00f      	b.n	800b5fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d106      	bne.n	800b5ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b5e0:	4b15      	ldr	r3, [pc, #84]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e4:	4a14      	ldr	r2, [pc, #80]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5ec:	e005      	b.n	800b5fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b5ee:	4b12      	ldr	r3, [pc, #72]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f2:	4a11      	ldr	r2, [pc, #68]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b5f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b5fa:	4b0f      	ldr	r3, [pc, #60]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a0e      	ldr	r2, [pc, #56]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b606:	f7f6 fadd 	bl	8001bc4 <HAL_GetTick>
 800b60a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b60c:	e008      	b.n	800b620 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b60e:	f7f6 fad9 	bl	8001bc4 <HAL_GetTick>
 800b612:	4602      	mov	r2, r0
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d901      	bls.n	800b620 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e006      	b.n	800b62e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b620:	4b05      	ldr	r3, [pc, #20]	; (800b638 <RCCEx_PLL2_Config+0x15c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0f0      	beq.n	800b60e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	58024400 	.word	0x58024400
 800b63c:	ffff0007 	.word	0xffff0007

0800b640 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b64a:	2300      	movs	r3, #0
 800b64c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b64e:	4b53      	ldr	r3, [pc, #332]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b652:	f003 0303 	and.w	r3, r3, #3
 800b656:	2b03      	cmp	r3, #3
 800b658:	d101      	bne.n	800b65e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e099      	b.n	800b792 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b65e:	4b4f      	ldr	r3, [pc, #316]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a4e      	ldr	r2, [pc, #312]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b66a:	f7f6 faab 	bl	8001bc4 <HAL_GetTick>
 800b66e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b670:	e008      	b.n	800b684 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b672:	f7f6 faa7 	bl	8001bc4 <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d901      	bls.n	800b684 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e086      	b.n	800b792 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b684:	4b45      	ldr	r3, [pc, #276]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1f0      	bne.n	800b672 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b690:	4b42      	ldr	r3, [pc, #264]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b694:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	051b      	lsls	r3, r3, #20
 800b69e:	493f      	ldr	r1, [pc, #252]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	628b      	str	r3, [r1, #40]	; 0x28
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	025b      	lsls	r3, r3, #9
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	431a      	orrs	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	041b      	lsls	r3, r3, #16
 800b6c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	061b      	lsls	r3, r3, #24
 800b6d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b6d4:	4931      	ldr	r1, [pc, #196]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b6da:	4b30      	ldr	r3, [pc, #192]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	492d      	ldr	r1, [pc, #180]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b6ec:	4b2b      	ldr	r3, [pc, #172]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	4928      	ldr	r1, [pc, #160]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b6fe:	4b27      	ldr	r3, [pc, #156]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b702:	4a26      	ldr	r2, [pc, #152]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b708:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b70a:	4b24      	ldr	r3, [pc, #144]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b70c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b70e:	4b24      	ldr	r3, [pc, #144]	; (800b7a0 <RCCEx_PLL3_Config+0x160>)
 800b710:	4013      	ands	r3, r2
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	69d2      	ldr	r2, [r2, #28]
 800b716:	00d2      	lsls	r2, r2, #3
 800b718:	4920      	ldr	r1, [pc, #128]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b71e:	4b1f      	ldr	r3, [pc, #124]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b722:	4a1e      	ldr	r2, [pc, #120]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b730:	4b1a      	ldr	r3, [pc, #104]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b734:	4a19      	ldr	r2, [pc, #100]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b736:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b73a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b73c:	e00f      	b.n	800b75e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d106      	bne.n	800b752 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b744:	4b15      	ldr	r3, [pc, #84]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	4a14      	ldr	r2, [pc, #80]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b74a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b74e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b750:	e005      	b.n	800b75e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b752:	4b12      	ldr	r3, [pc, #72]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	4a11      	ldr	r2, [pc, #68]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b75c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b75e:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a0e      	ldr	r2, [pc, #56]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b76a:	f7f6 fa2b 	bl	8001bc4 <HAL_GetTick>
 800b76e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b770:	e008      	b.n	800b784 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b772:	f7f6 fa27 	bl	8001bc4 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d901      	bls.n	800b784 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e006      	b.n	800b792 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b784:	4b05      	ldr	r3, [pc, #20]	; (800b79c <RCCEx_PLL3_Config+0x15c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d0f0      	beq.n	800b772 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b790:	7bfb      	ldrb	r3, [r7, #15]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	58024400 	.word	0x58024400
 800b7a0:	ffff0007 	.word	0xffff0007

0800b7a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 808a 	beq.w	800b8cc <HAL_RTC_Init+0x128>
  {
    status = HAL_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7f5 ff31 	bl	8001638 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2202      	movs	r2, #2
 800b7da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	22ca      	movs	r2, #202	; 0xca
 800b7e4:	625a      	str	r2, [r3, #36]	; 0x24
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2253      	movs	r2, #83	; 0x53
 800b7ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 fab6 	bl	800bd60 <RTC_EnterInitMode>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00a      	beq.n	800b810 <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	22ff      	movs	r2, #255	; 0xff
 800b800:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2204      	movs	r2, #4
 800b806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	73fb      	strb	r3, [r7, #15]
 800b80e:	e05d      	b.n	800b8cc <HAL_RTC_Init+0x128>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6899      	ldr	r1, [r3, #8]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	4b2f      	ldr	r3, [pc, #188]	; (800b8d8 <HAL_RTC_Init+0x134>)
 800b81c:	400b      	ands	r3, r1
 800b81e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	6899      	ldr	r1, [r3, #8]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685a      	ldr	r2, [r3, #4]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	431a      	orrs	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	431a      	orrs	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	430a      	orrs	r2, r1
 800b83c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	0419      	lsls	r1, r3, #16
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	68da      	ldr	r2, [r3, #12]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	430a      	orrs	r2, r1
 800b84e:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68da      	ldr	r2, [r3, #12]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b85e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	f003 0320 	and.w	r3, r3, #32
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10f      	bne.n	800b88e <HAL_RTC_Init+0xea>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fa50 	bl	800bd14 <HAL_RTC_WaitForSynchro>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d009      	beq.n	800b88e <HAL_RTC_Init+0xea>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	22ff      	movs	r2, #255	; 0xff
 800b880:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2204      	movs	r2, #4
 800b886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d11b      	bne.n	800b8cc <HAL_RTC_Init+0x128>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f022 0203 	bic.w	r2, r2, #3
 800b8a2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	69da      	ldr	r2, [r3, #28]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	431a      	orrs	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	430a      	orrs	r2, r1
 800b8ba:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	22ff      	movs	r2, #255	; 0xff
 800b8c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 800b8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	ff8fffbf 	.word	0xff8fffbf

0800b8dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b8dc:	b590      	push	{r4, r7, lr}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d101      	bne.n	800b8f6 <HAL_RTC_SetTime+0x1a>
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	e0b0      	b.n	800ba58 <HAL_RTC_SetTime+0x17c>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2202      	movs	r2, #2
 800b902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	22ca      	movs	r2, #202	; 0xca
 800b90c:	625a      	str	r2, [r3, #36]	; 0x24
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2253      	movs	r2, #83	; 0x53
 800b914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f000 fa22 	bl	800bd60 <RTC_EnterInitMode>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00d      	beq.n	800b93e <HAL_RTC_SetTime+0x62>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	22ff      	movs	r2, #255	; 0xff
 800b928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2204      	movs	r2, #4
 800b92e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e08c      	b.n	800ba58 <HAL_RTC_SetTime+0x17c>
  }
  else
  {
    if(Format == RTC_FORMAT_BIN)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d126      	bne.n	800b992 <HAL_RTC_SetTime+0xb6>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d102      	bne.n	800b958 <HAL_RTC_SetTime+0x7c>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	2200      	movs	r2, #0
 800b956:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 fa29 	bl	800bdb4 <RTC_ByteToBcd2>
 800b962:	4603      	mov	r3, r0
 800b964:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	785b      	ldrb	r3, [r3, #1]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 fa22 	bl	800bdb4 <RTC_ByteToBcd2>
 800b970:	4603      	mov	r3, r0
 800b972:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b974:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	789b      	ldrb	r3, [r3, #2]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 fa1a 	bl	800bdb4 <RTC_ByteToBcd2>
 800b980:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b982:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	78db      	ldrb	r3, [r3, #3]
 800b98a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b98c:	4313      	orrs	r3, r2
 800b98e:	617b      	str	r3, [r7, #20]
 800b990:	e018      	b.n	800b9c4 <HAL_RTC_SetTime+0xe8>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d102      	bne.n	800b9a6 <HAL_RTC_SetTime+0xca>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	785b      	ldrb	r3, [r3, #1]
 800b9b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b9b2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b9b8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	78db      	ldrb	r3, [r3, #3]
 800b9be:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	6979      	ldr	r1, [r7, #20]
 800b9ca:	4b25      	ldr	r3, [pc, #148]	; (800ba60 <HAL_RTC_SetTime+0x184>)
 800b9cc:	400b      	ands	r3, r1
 800b9ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689a      	ldr	r2, [r3, #8]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b9de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6899      	ldr	r1, [r3, #8]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	68da      	ldr	r2, [r3, #12]
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	431a      	orrs	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	430a      	orrs	r2, r1
 800b9f6:	609a      	str	r2, [r3, #8]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68da      	ldr	r2, [r3, #12]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba06:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	f003 0320 	and.w	r3, r3, #32
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d113      	bne.n	800ba3e <HAL_RTC_SetTime+0x162>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f000 f97c 	bl	800bd14 <HAL_RTC_WaitForSynchro>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00d      	beq.n	800ba3e <HAL_RTC_SetTime+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	22ff      	movs	r2, #255	; 0xff
 800ba28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2204      	movs	r2, #4
 800ba2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e00c      	b.n	800ba58 <HAL_RTC_SetTime+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	22ff      	movs	r2, #255	; 0xff
 800ba44:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800ba56:	2300      	movs	r3, #0
  }
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	371c      	adds	r7, #28
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd90      	pop	{r4, r7, pc}
 800ba60:	007f7f7f 	.word	0x007f7f7f

0800ba64 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	4b22      	ldr	r3, [pc, #136]	; (800bb18 <HAL_RTC_GetTime+0xb4>)
 800ba90:	4013      	ands	r3, r2
 800ba92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	0c1b      	lsrs	r3, r3, #16
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	0a1b      	lsrs	r3, r3, #8
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800babc:	b2da      	uxtb	r2, r3
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	0d9b      	lsrs	r3, r3, #22
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d11a      	bne.n	800bb0e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	4618      	mov	r0, r3
 800bade:	f000 f989 	bl	800bdf4 <RTC_Bcd2ToByte>
 800bae2:	4603      	mov	r3, r0
 800bae4:	461a      	mov	r2, r3
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	785b      	ldrb	r3, [r3, #1]
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 f980 	bl	800bdf4 <RTC_Bcd2ToByte>
 800baf4:	4603      	mov	r3, r0
 800baf6:	461a      	mov	r2, r3
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	789b      	ldrb	r3, [r3, #2]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f000 f977 	bl	800bdf4 <RTC_Bcd2ToByte>
 800bb06:	4603      	mov	r3, r0
 800bb08:	461a      	mov	r2, r3
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	007f7f7f 	.word	0x007f7f7f

0800bb1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bb1c:	b590      	push	{r4, r7, lr}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d101      	bne.n	800bb36 <HAL_RTC_SetDate+0x1a>
 800bb32:	2302      	movs	r3, #2
 800bb34:	e09a      	b.n	800bc6c <HAL_RTC_SetDate+0x150>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2202      	movs	r2, #2
 800bb42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10e      	bne.n	800bb6a <HAL_RTC_SetDate+0x4e>
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	785b      	ldrb	r3, [r3, #1]
 800bb50:	f003 0310 	and.w	r3, r3, #16
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d008      	beq.n	800bb6a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	785b      	ldrb	r3, [r3, #1]
 800bb5c:	f023 0310 	bic.w	r3, r3, #16
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	330a      	adds	r3, #10
 800bb64:	b2da      	uxtb	r2, r3
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d11c      	bne.n	800bbaa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	78db      	ldrb	r3, [r3, #3]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f000 f91d 	bl	800bdb4 <RTC_ByteToBcd2>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	785b      	ldrb	r3, [r3, #1]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 f916 	bl	800bdb4 <RTC_ByteToBcd2>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bb8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	789b      	ldrb	r3, [r3, #2]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f000 f90e 	bl	800bdb4 <RTC_ByteToBcd2>
 800bb98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bb9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bba4:	4313      	orrs	r3, r2
 800bba6:	617b      	str	r3, [r7, #20]
 800bba8:	e00e      	b.n	800bbc8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	78db      	ldrb	r3, [r3, #3]
 800bbae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	785b      	ldrb	r3, [r3, #1]
 800bbb4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bbb6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bbbc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	22ca      	movs	r2, #202	; 0xca
 800bbce:	625a      	str	r2, [r3, #36]	; 0x24
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2253      	movs	r2, #83	; 0x53
 800bbd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 f8c1 	bl	800bd60 <RTC_EnterInitMode>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00d      	beq.n	800bc00 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	22ff      	movs	r2, #255	; 0xff
 800bbea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2204      	movs	r2, #4
 800bbf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e035      	b.n	800bc6c <HAL_RTC_SetDate+0x150>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	6979      	ldr	r1, [r7, #20]
 800bc06:	4b1b      	ldr	r3, [pc, #108]	; (800bc74 <HAL_RTC_SetDate+0x158>)
 800bc08:	400b      	ands	r3, r1
 800bc0a:	6053      	str	r3, [r2, #4]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ISR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68da      	ldr	r2, [r3, #12]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc1a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	f003 0320 	and.w	r3, r3, #32
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d113      	bne.n	800bc52 <HAL_RTC_SetDate+0x136>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f000 f872 	bl	800bd14 <HAL_RTC_WaitForSynchro>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00d      	beq.n	800bc52 <HAL_RTC_SetDate+0x136>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	22ff      	movs	r2, #255	; 0xff
 800bc3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2204      	movs	r2, #4
 800bc42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e00c      	b.n	800bc6c <HAL_RTC_SetDate+0x150>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	22ff      	movs	r2, #255	; 0xff
 800bc58:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
  }
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	371c      	adds	r7, #28
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd90      	pop	{r4, r7, pc}
 800bc74:	00ffff3f 	.word	0x00ffff3f

0800bc78 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	685a      	ldr	r2, [r3, #4]
 800bc8a:	4b21      	ldr	r3, [pc, #132]	; (800bd10 <HAL_RTC_GetDate+0x98>)
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	0c1b      	lsrs	r3, r3, #16
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	0a1b      	lsrs	r3, r3, #8
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	f003 031f 	and.w	r3, r3, #31
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	0b5b      	lsrs	r3, r3, #13
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	f003 0307 	and.w	r3, r3, #7
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d11a      	bne.n	800bd04 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	78db      	ldrb	r3, [r3, #3]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 f88e 	bl	800bdf4 <RTC_Bcd2ToByte>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	461a      	mov	r2, r3
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	785b      	ldrb	r3, [r3, #1]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 f885 	bl	800bdf4 <RTC_Bcd2ToByte>
 800bcea:	4603      	mov	r3, r0
 800bcec:	461a      	mov	r2, r3
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	789b      	ldrb	r3, [r3, #2]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f000 f87c 	bl	800bdf4 <RTC_Bcd2ToByte>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	461a      	mov	r2, r3
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3718      	adds	r7, #24
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	00ffff3f 	.word	0x00ffff3f

0800bd14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68da      	ldr	r2, [r3, #12]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bd2a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800bd2c:	f7f5 ff4a 	bl	8001bc4 <HAL_GetTick>
 800bd30:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bd32:	e009      	b.n	800bd48 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bd34:	f7f5 ff46 	bl	8001bc4 <HAL_GetTick>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd42:	d901      	bls.n	800bd48 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800bd44:	2303      	movs	r3, #3
 800bd46:	e007      	b.n	800bd58 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	f003 0320 	and.w	r3, r3, #32
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d0ee      	beq.n	800bd34 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d119      	bne.n	800bdaa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bd80:	f7f5 ff20 	bl	8001bc4 <HAL_GetTick>
 800bd84:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bd86:	e009      	b.n	800bd9c <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bd88:	f7f5 ff1c 	bl	8001bc4 <HAL_GetTick>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd96:	d901      	bls.n	800bd9c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e007      	b.n	800bdac <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0ee      	beq.n	800bd88 <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800bdc2:	79fb      	ldrb	r3, [r7, #7]
 800bdc4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800bdc6:	e005      	b.n	800bdd4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800bdce:	7afb      	ldrb	r3, [r7, #11]
 800bdd0:	3b0a      	subs	r3, #10
 800bdd2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800bdd4:	7afb      	ldrb	r3, [r7, #11]
 800bdd6:	2b09      	cmp	r3, #9
 800bdd8:	d8f6      	bhi.n	800bdc8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	011b      	lsls	r3, r3, #4
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	7afb      	ldrb	r3, [r7, #11]
 800bde4:	4313      	orrs	r3, r2
 800bde6:	b2db      	uxtb	r3, r3
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	091b      	lsrs	r3, r3, #4
 800be02:	b2db      	uxtb	r3, r3
 800be04:	461a      	mov	r2, r3
 800be06:	0092      	lsls	r2, r2, #2
 800be08:	4413      	add	r3, r2
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800be0e:	79fb      	ldrb	r3, [r7, #7]
 800be10:	f003 030f 	and.w	r3, r3, #15
 800be14:	b2da      	uxtb	r2, r3
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	4413      	add	r3, r2
 800be1a:	b2db      	uxtb	r3, r3
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b08a      	sub	sp, #40	; 0x28
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e07c      	b.n	800bf34 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10c      	bne.n	800be60 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d102      	bne.n	800be5a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2202      	movs	r2, #2
 800be58:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7f5 fc06 	bl	800166c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2203      	movs	r2, #3
 800be64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f867 	bl	800bf3c <HAL_SD_InitCard>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d001      	beq.n	800be78 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	e05d      	b.n	800bf34 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800be78:	f107 0308 	add.w	r3, r7, #8
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fdb8 	bl	800c9f4 <HAL_SD_GetCardStatus>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e052      	b.n	800bf34 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800be8e:	7e3b      	ldrb	r3, [r7, #24]
 800be90:	b2db      	uxtb	r3, r3
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800be94:	7e7b      	ldrb	r3, [r7, #25]
 800be96:	b2db      	uxtb	r3, r3
 800be98:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d10a      	bne.n	800beb8 <HAL_SD_Init+0x90>
 800bea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d102      	bne.n	800beae <HAL_SD_Init+0x86>
 800bea8:	6a3b      	ldr	r3, [r7, #32]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d004      	beq.n	800beb8 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800beb4:	65da      	str	r2, [r3, #92]	; 0x5c
 800beb6:	e00b      	b.n	800bed0 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d104      	bne.n	800beca <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bec6:	65da      	str	r2, [r3, #92]	; 0x5c
 800bec8:	e002      	b.n	800bed0 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fe6e 	bl	800cbb8 <HAL_SD_ConfigWideBusOperation>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e026      	b.n	800bf34 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bee6:	f7f5 fe6d 	bl	8001bc4 <HAL_GetTick>
 800beea:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800beec:	e011      	b.n	800bf12 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800beee:	f7f5 fe69 	bl	8001bc4 <HAL_GetTick>
 800bef2:	4602      	mov	r2, r0
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befc:	d109      	bne.n	800bf12 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e010      	b.n	800bf34 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fefa 	bl	800cd0c <HAL_SD_GetCardState>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b04      	cmp	r3, #4
 800bf1c:	d1e7      	bne.n	800beee <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3728      	adds	r7, #40	; 0x28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bf3c:	b5b0      	push	{r4, r5, r7, lr}
 800bf3e:	b08e      	sub	sp, #56	; 0x38
 800bf40:	af04      	add	r7, sp, #16
 800bf42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bf44:	2300      	movs	r3, #0
 800bf46:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800bf54:	23fa      	movs	r3, #250	; 0xfa
 800bf56:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d107      	bne.n	800bf70 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f042 0210 	orr.w	r2, r2, #16
 800bf6e:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681d      	ldr	r5, [r3, #0]
 800bf74:	466c      	mov	r4, sp
 800bf76:	f107 0314 	add.w	r3, r7, #20
 800bf7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bf82:	f107 0308 	add.w	r3, r7, #8
 800bf86:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f004 fbfb 	bl	8010784 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f004 fc3e 	bl	8010814 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 800bf98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bf9c:	f7fe fc2c 	bl	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	4b2d      	ldr	r3, [pc, #180]	; (800c058 <HAL_SD_InitCard+0x11c>)
 800bfa4:	fba3 2302 	umull	r2, r3, r3, r2
 800bfa8:	095b      	lsrs	r3, r3, #5
 800bfaa:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800bfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d008      	beq.n	800bfc4 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800bfb2:	4a2a      	ldr	r2, [pc, #168]	; (800c05c <HAL_SD_InitCard+0x120>)
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfba:	3301      	adds	r3, #1
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7f5 fe0d 	bl	8001bdc <HAL_Delay>
 800bfc2:	e002      	b.n	800bfca <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 800bfc4:	2002      	movs	r0, #2
 800bfc6:	f7f5 fe09 	bl	8001bdc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 ff7c 	bl	800cec8 <SD_PowerON>
 800bfd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfd2:	6a3b      	ldr	r3, [r7, #32]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00b      	beq.n	800bff0 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	431a      	orrs	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e02e      	b.n	800c04e <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 feab 	bl	800cd4c <SD_InitCard>
 800bff6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00b      	beq.n	800c016 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2201      	movs	r2, #1
 800c002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	431a      	orrs	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e01b      	b.n	800c04e <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c01e:	4618      	mov	r0, r3
 800c020:	f004 fc8e 	bl	8010940 <SDMMC_CmdBlockLength>
 800c024:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00f      	beq.n	800c04c <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a0b      	ldr	r2, [pc, #44]	; (800c060 <HAL_SD_InitCard+0x124>)
 800c032:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	431a      	orrs	r2, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	e000      	b.n	800c04e <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3728      	adds	r7, #40	; 0x28
 800c052:	46bd      	mov	sp, r7
 800c054:	bdb0      	pop	{r4, r5, r7, pc}
 800c056:	bf00      	nop
 800c058:	10624dd3 	.word	0x10624dd3
 800c05c:	00012110 	.word	0x00012110
 800c060:	1fe00fff 	.word	0x1fe00fff

0800c064 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b092      	sub	sp, #72	; 0x48
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c072:	f7f5 fda7 	bl	8001bc4 <HAL_GetTick>
 800c076:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d107      	bne.n	800c096 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c08a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	e167      	b.n	800c366 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	f040 815a 	bne.w	800c358 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c0aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	441a      	add	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d907      	bls.n	800c0c8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0bc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e14e      	b.n	800c366 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2203      	movs	r2, #3
 800c0cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d002      	beq.n	800c0e6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	025b      	lsls	r3, r3, #9
 800c0e4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ea:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	025b      	lsls	r3, r3, #9
 800c0f0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c0f2:	2390      	movs	r3, #144	; 0x90
 800c0f4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c0fe:	2300      	movs	r3, #0
 800c100:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f107 0214 	add.w	r2, r7, #20
 800c10a:	4611      	mov	r1, r2
 800c10c:	4618      	mov	r0, r3
 800c10e:	f004 fbeb 	bl	80108e8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	68da      	ldr	r2, [r3, #12]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c120:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	2b01      	cmp	r3, #1
 800c126:	d90a      	bls.n	800c13e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2202      	movs	r2, #2
 800c12c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c134:	4618      	mov	r0, r3
 800c136:	f004 fc49 	bl	80109cc <SDMMC_CmdReadMultiBlock>
 800c13a:	6478      	str	r0, [r7, #68]	; 0x44
 800c13c:	e009      	b.n	800c152 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2201      	movs	r2, #1
 800c142:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c14a:	4618      	mov	r0, r3
 800c14c:	f004 fc1b 	bl	8010986 <SDMMC_CmdReadSingleBlock>
 800c150:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c154:	2b00      	cmp	r3, #0
 800c156:	d012      	beq.n	800c17e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a84      	ldr	r2, [pc, #528]	; (800c370 <HAL_SD_ReadBlocks+0x30c>)
 800c15e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c166:	431a      	orrs	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e0f3      	b.n	800c366 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c182:	e058      	b.n	800c236 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c18a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d033      	beq.n	800c1fa <HAL_SD_ReadBlocks+0x196>
 800c192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c194:	2b1f      	cmp	r3, #31
 800c196:	d930      	bls.n	800c1fa <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c198:	2300      	movs	r3, #0
 800c19a:	643b      	str	r3, [r7, #64]	; 0x40
 800c19c:	e027      	b.n	800c1ee <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f004 fb18 	bl	80107d8 <SDMMC_ReadFIFO>
 800c1a8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	b2da      	uxtb	r2, r3
 800c1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ba:	0a1b      	lsrs	r3, r3, #8
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	0c1b      	lsrs	r3, r3, #16
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1da:	0e1b      	lsrs	r3, r3, #24
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800c1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	643b      	str	r3, [r7, #64]	; 0x40
 800c1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f0:	2b07      	cmp	r3, #7
 800c1f2:	d9d4      	bls.n	800c19e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f6:	3b20      	subs	r3, #32
 800c1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c1fa:	f7f5 fce3 	bl	8001bc4 <HAL_GetTick>
 800c1fe:	4602      	mov	r2, r0
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c206:	429a      	cmp	r2, r3
 800c208:	d902      	bls.n	800c210 <HAL_SD_ReadBlocks+0x1ac>
 800c20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d112      	bne.n	800c236 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a56      	ldr	r2, [pc, #344]	; (800c370 <HAL_SD_ReadBlocks+0x30c>)
 800c216:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e097      	b.n	800c366 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c23c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800c240:	2b00      	cmp	r3, #0
 800c242:	d09f      	beq.n	800c184 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68da      	ldr	r2, [r3, #12]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c252:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d022      	beq.n	800c2a8 <HAL_SD_ReadBlocks+0x244>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b01      	cmp	r3, #1
 800c266:	d91f      	bls.n	800c2a8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	d01b      	beq.n	800c2a8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4618      	mov	r0, r3
 800c276:	f004 fc13 	bl	8010aa0 <SDMMC_CmdStopTransfer>
 800c27a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c27c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d012      	beq.n	800c2a8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a3a      	ldr	r2, [pc, #232]	; (800c370 <HAL_SD_ReadBlocks+0x30c>)
 800c288:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c28e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c290:	431a      	orrs	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e05e      	b.n	800c366 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ae:	f003 0308 	and.w	r3, r3, #8
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d012      	beq.n	800c2dc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a2d      	ldr	r2, [pc, #180]	; (800c370 <HAL_SD_ReadBlocks+0x30c>)
 800c2bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c2:	f043 0208 	orr.w	r2, r3, #8
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e044      	b.n	800c366 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e2:	f003 0302 	and.w	r3, r3, #2
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d012      	beq.n	800c310 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a20      	ldr	r2, [pc, #128]	; (800c370 <HAL_SD_ReadBlocks+0x30c>)
 800c2f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f6:	f043 0202 	orr.w	r2, r3, #2
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2201      	movs	r2, #1
 800c302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2200      	movs	r2, #0
 800c30a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	e02a      	b.n	800c366 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c316:	f003 0320 	and.w	r3, r3, #32
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d012      	beq.n	800c344 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a13      	ldr	r2, [pc, #76]	; (800c370 <HAL_SD_ReadBlocks+0x30c>)
 800c324:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32a:	f043 0220 	orr.w	r2, r3, #32
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2201      	movs	r2, #1
 800c336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2200      	movs	r2, #0
 800c33e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	e010      	b.n	800c366 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a0a      	ldr	r2, [pc, #40]	; (800c374 <HAL_SD_ReadBlocks+0x310>)
 800c34a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c354:	2300      	movs	r3, #0
 800c356:	e006      	b.n	800c366 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c35c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c364:	2301      	movs	r3, #1
  }
}
 800c366:	4618      	mov	r0, r3
 800c368:	3748      	adds	r7, #72	; 0x48
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	1fe00fff 	.word	0x1fe00fff
 800c374:	18000f3a 	.word	0x18000f3a

0800c378 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b092      	sub	sp, #72	; 0x48
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c386:	f7f5 fc1d 	bl	8001bc4 <HAL_GetTick>
 800c38a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d107      	bne.n	800c3aa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e16b      	b.n	800c682 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	f040 815e 	bne.w	800c674 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c3be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	441a      	add	r2, r3
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d907      	bls.n	800c3dc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e152      	b.n	800c682 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2203      	movs	r2, #3
 800c3e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d002      	beq.n	800c3fa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	025b      	lsls	r3, r3, #9
 800c3f8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c3fe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	025b      	lsls	r3, r3, #9
 800c404:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c406:	2390      	movs	r3, #144	; 0x90
 800c408:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c40a:	2300      	movs	r3, #0
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c40e:	2300      	movs	r3, #0
 800c410:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c412:	2300      	movs	r3, #0
 800c414:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f107 0218 	add.w	r2, r7, #24
 800c41e:	4611      	mov	r1, r2
 800c420:	4618      	mov	r0, r3
 800c422:	f004 fa61 	bl	80108e8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68da      	ldr	r2, [r3, #12]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c434:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d90a      	bls.n	800c452 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2220      	movs	r2, #32
 800c440:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c448:	4618      	mov	r0, r3
 800c44a:	f004 fb05 	bl	8010a58 <SDMMC_CmdWriteMultiBlock>
 800c44e:	6478      	str	r0, [r7, #68]	; 0x44
 800c450:	e009      	b.n	800c466 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2210      	movs	r2, #16
 800c456:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c45e:	4618      	mov	r0, r3
 800c460:	f004 fad7 	bl	8010a12 <SDMMC_CmdWriteSingleBlock>
 800c464:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d012      	beq.n	800c492 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a86      	ldr	r2, [pc, #536]	; (800c68c <HAL_SD_WriteBlocks+0x314>)
 800c472:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c47a:	431a      	orrs	r2, r3
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	e0f7      	b.n	800c682 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c496:	e05c      	b.n	800c552 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d037      	beq.n	800c516 <HAL_SD_WriteBlocks+0x19e>
 800c4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4a8:	2b1f      	cmp	r3, #31
 800c4aa:	d934      	bls.n	800c516 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	643b      	str	r3, [r7, #64]	; 0x40
 800c4b0:	e02b      	b.n	800c50a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800c4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	021a      	lsls	r2, r3, #8
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	041a      	lsls	r2, r3, #16
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4de:	3301      	adds	r3, #1
 800c4e0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	061a      	lsls	r2, r3, #24
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f107 0214 	add.w	r2, r7, #20
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	4618      	mov	r0, r3
 800c500:	f004 f977 	bl	80107f2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c506:	3301      	adds	r3, #1
 800c508:	643b      	str	r3, [r7, #64]	; 0x40
 800c50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c50c:	2b07      	cmp	r3, #7
 800c50e:	d9d0      	bls.n	800c4b2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c512:	3b20      	subs	r3, #32
 800c514:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c516:	f7f5 fb55 	bl	8001bc4 <HAL_GetTick>
 800c51a:	4602      	mov	r2, r0
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c522:	429a      	cmp	r2, r3
 800c524:	d902      	bls.n	800c52c <HAL_SD_WriteBlocks+0x1b4>
 800c526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d112      	bne.n	800c552 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a56      	ldr	r2, [pc, #344]	; (800c68c <HAL_SD_WriteBlocks+0x314>)
 800c532:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c53a:	431a      	orrs	r2, r3
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2201      	movs	r2, #1
 800c544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2200      	movs	r2, #0
 800c54c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c54e:	2303      	movs	r3, #3
 800c550:	e097      	b.n	800c682 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c558:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d09b      	beq.n	800c498 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c56e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d022      	beq.n	800c5c4 <HAL_SD_WriteBlocks+0x24c>
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d91f      	bls.n	800c5c4 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d01b      	beq.n	800c5c4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f004 fa85 	bl	8010aa0 <SDMMC_CmdStopTransfer>
 800c596:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d012      	beq.n	800c5c4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a3a      	ldr	r2, [pc, #232]	; (800c68c <HAL_SD_WriteBlocks+0x314>)
 800c5a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ac:	431a      	orrs	r2, r3
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e05e      	b.n	800c682 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ca:	f003 0308 	and.w	r3, r3, #8
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d012      	beq.n	800c5f8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a2d      	ldr	r2, [pc, #180]	; (800c68c <HAL_SD_WriteBlocks+0x314>)
 800c5d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5de:	f043 0208 	orr.w	r2, r3, #8
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e044      	b.n	800c682 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fe:	f003 0302 	and.w	r3, r3, #2
 800c602:	2b00      	cmp	r3, #0
 800c604:	d012      	beq.n	800c62c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a20      	ldr	r2, [pc, #128]	; (800c68c <HAL_SD_WriteBlocks+0x314>)
 800c60c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c612:	f043 0202 	orr.w	r2, r3, #2
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2200      	movs	r2, #0
 800c626:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c628:	2301      	movs	r3, #1
 800c62a:	e02a      	b.n	800c682 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c632:	f003 0310 	and.w	r3, r3, #16
 800c636:	2b00      	cmp	r3, #0
 800c638:	d012      	beq.n	800c660 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a13      	ldr	r2, [pc, #76]	; (800c68c <HAL_SD_WriteBlocks+0x314>)
 800c640:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c646:	f043 0210 	orr.w	r2, r3, #16
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2201      	movs	r2, #1
 800c652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2200      	movs	r2, #0
 800c65a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	e010      	b.n	800c682 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a0a      	ldr	r2, [pc, #40]	; (800c690 <HAL_SD_WriteBlocks+0x318>)
 800c666:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c670:	2300      	movs	r3, #0
 800c672:	e006      	b.n	800c682 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c678:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c680:	2301      	movs	r3, #1
  }
}
 800c682:	4618      	mov	r0, r3
 800c684:	3748      	adds	r7, #72	; 0x48
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	1fe00fff 	.word	0x1fe00fff
 800c690:	18000f3a 	.word	0x18000f3a

0800c694 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800c69e:	bf00      	nop
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
	...

0800c6ac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6ba:	0f9b      	lsrs	r3, r3, #30
 800c6bc:	b2da      	uxtb	r2, r3
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6c6:	0e9b      	lsrs	r3, r3, #26
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	f003 030f 	and.w	r3, r3, #15
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6d8:	0e1b      	lsrs	r3, r3, #24
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	f003 0303 	and.w	r3, r3, #3
 800c6e0:	b2da      	uxtb	r2, r3
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6ea:	0c1b      	lsrs	r3, r3, #16
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6f6:	0a1b      	lsrs	r3, r3, #8
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c702:	b2da      	uxtb	r2, r3
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c70c:	0d1b      	lsrs	r3, r3, #20
 800c70e:	b29a      	uxth	r2, r3
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c718:	0c1b      	lsrs	r3, r3, #16
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	f003 030f 	and.w	r3, r3, #15
 800c720:	b2da      	uxtb	r2, r3
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c72a:	0bdb      	lsrs	r3, r3, #15
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	f003 0301 	and.w	r3, r3, #1
 800c732:	b2da      	uxtb	r2, r3
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c73c:	0b9b      	lsrs	r3, r3, #14
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	f003 0301 	and.w	r3, r3, #1
 800c744:	b2da      	uxtb	r2, r3
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c74e:	0b5b      	lsrs	r3, r3, #13
 800c750:	b2db      	uxtb	r3, r3
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	b2da      	uxtb	r2, r3
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c760:	0b1b      	lsrs	r3, r3, #12
 800c762:	b2db      	uxtb	r3, r3
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	2200      	movs	r2, #0
 800c772:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d163      	bne.n	800c844 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c780:	009a      	lsls	r2, r3, #2
 800c782:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c786:	4013      	ands	r3, r2
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c78c:	0f92      	lsrs	r2, r2, #30
 800c78e:	431a      	orrs	r2, r3
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c798:	0edb      	lsrs	r3, r3, #27
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	f003 0307 	and.w	r3, r3, #7
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7aa:	0e1b      	lsrs	r3, r3, #24
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	f003 0307 	and.w	r3, r3, #7
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7bc:	0d5b      	lsrs	r3, r3, #21
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	f003 0307 	and.w	r3, r3, #7
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7ce:	0c9b      	lsrs	r3, r3, #18
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7e0:	0bdb      	lsrs	r3, r3, #15
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 0307 	and.w	r3, r3, #7
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	7e1b      	ldrb	r3, [r3, #24]
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	f003 0307 	and.w	r3, r3, #7
 800c802:	3302      	adds	r3, #2
 800c804:	2201      	movs	r2, #1
 800c806:	fa02 f303 	lsl.w	r3, r2, r3
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c80e:	fb02 f203 	mul.w	r2, r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	7a1b      	ldrb	r3, [r3, #8]
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	f003 030f 	and.w	r3, r3, #15
 800c820:	2201      	movs	r2, #1
 800c822:	409a      	lsls	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c830:	0a52      	lsrs	r2, r2, #9
 800c832:	fb02 f203 	mul.w	r2, r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c840:	659a      	str	r2, [r3, #88]	; 0x58
 800c842:	e031      	b.n	800c8a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d11d      	bne.n	800c888 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c850:	041b      	lsls	r3, r3, #16
 800c852:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c85a:	0c1b      	lsrs	r3, r3, #16
 800c85c:	431a      	orrs	r2, r3
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	3301      	adds	r3, #1
 800c868:	029a      	lsls	r2, r3, #10
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c87c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	659a      	str	r2, [r3, #88]	; 0x58
 800c886:	e00f      	b.n	800c8a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a58      	ldr	r2, [pc, #352]	; (800c9f0 <HAL_SD_GetCardCSD+0x344>)
 800c88e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c894:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e09d      	b.n	800c9e4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8ac:	0b9b      	lsrs	r3, r3, #14
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	f003 0301 	and.w	r3, r3, #1
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8be:	09db      	lsrs	r3, r3, #7
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8e0:	0fdb      	lsrs	r3, r3, #31
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ec:	0f5b      	lsrs	r3, r3, #29
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	f003 0303 	and.w	r3, r3, #3
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8fe:	0e9b      	lsrs	r3, r3, #26
 800c900:	b2db      	uxtb	r3, r3
 800c902:	f003 0307 	and.w	r3, r3, #7
 800c906:	b2da      	uxtb	r2, r3
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c910:	0d9b      	lsrs	r3, r3, #22
 800c912:	b2db      	uxtb	r3, r3
 800c914:	f003 030f 	and.w	r3, r3, #15
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c922:	0d5b      	lsrs	r3, r3, #21
 800c924:	b2db      	uxtb	r3, r3
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2200      	movs	r2, #0
 800c936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c93e:	0c1b      	lsrs	r3, r3, #16
 800c940:	b2db      	uxtb	r3, r3
 800c942:	f003 0301 	and.w	r3, r3, #1
 800c946:	b2da      	uxtb	r2, r3
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c952:	0bdb      	lsrs	r3, r3, #15
 800c954:	b2db      	uxtb	r3, r3
 800c956:	f003 0301 	and.w	r3, r3, #1
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c966:	0b9b      	lsrs	r3, r3, #14
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	f003 0301 	and.w	r3, r3, #1
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c97a:	0b5b      	lsrs	r3, r3, #13
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	f003 0301 	and.w	r3, r3, #1
 800c982:	b2da      	uxtb	r2, r3
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c98e:	0b1b      	lsrs	r3, r3, #12
 800c990:	b2db      	uxtb	r3, r3
 800c992:	f003 0301 	and.w	r3, r3, #1
 800c996:	b2da      	uxtb	r2, r3
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9a2:	0a9b      	lsrs	r3, r3, #10
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	f003 0303 	and.w	r3, r3, #3
 800c9aa:	b2da      	uxtb	r2, r3
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9b6:	0a1b      	lsrs	r3, r3, #8
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	f003 0303 	and.w	r3, r3, #3
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ca:	085b      	lsrs	r3, r3, #1
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c9e2:	2300      	movs	r3, #0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	1fe00fff 	.word	0x1fe00fff

0800c9f4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b094      	sub	sp, #80	; 0x50
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ca04:	f107 0308 	add.w	r3, r7, #8
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fb64 	bl	800d0d8 <SD_SendSDStatus>
 800ca10:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d011      	beq.n	800ca3c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a4f      	ldr	r2, [pc, #316]	; (800cb5c <HAL_SD_GetCardStatus+0x168>)
 800ca1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca26:	431a      	orrs	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ca3a:	e070      	b.n	800cb1e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	099b      	lsrs	r3, r3, #6
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	f003 0303 	and.w	r3, r3, #3
 800ca46:	b2da      	uxtb	r2, r3
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	095b      	lsrs	r3, r3, #5
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	f003 0301 	and.w	r3, r3, #1
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	0a1b      	lsrs	r3, r3, #8
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	0e1b      	lsrs	r3, r3, #24
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	061a      	lsls	r2, r3, #24
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	021b      	lsls	r3, r3, #8
 800ca7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca82:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	0a1b      	lsrs	r3, r3, #8
 800ca88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca8c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	0e1b      	lsrs	r3, r3, #24
 800ca92:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	0a1b      	lsrs	r3, r3, #8
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	0d1b      	lsrs	r3, r3, #20
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	f003 030f 	and.w	r3, r3, #15
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	0c1b      	lsrs	r3, r3, #16
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	b29b      	uxth	r3, r3
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	b29b      	uxth	r3, r3
 800cace:	4313      	orrs	r3, r2
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	0a9b      	lsrs	r3, r3, #10
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	0a1b      	lsrs	r3, r3, #8
 800caea:	b2db      	uxtb	r3, r3
 800caec:	f003 0303 	and.w	r3, r3, #3
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	091b      	lsrs	r3, r3, #4
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	f003 030f 	and.w	r3, r3, #15
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	f003 030f 	and.w	r3, r3, #15
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	0e1b      	lsrs	r3, r3, #24
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb26:	4618      	mov	r0, r3
 800cb28:	f003 ff0a 	bl	8010940 <SDMMC_CmdBlockLength>
 800cb2c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00d      	beq.n	800cb50 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a08      	ldr	r2, [pc, #32]	; (800cb5c <HAL_SD_GetCardStatus+0x168>)
 800cb3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800cb50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3750      	adds	r7, #80	; 0x50
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	1fe00fff 	.word	0x1fe00fff

0800cb60 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cbb8:	b5b0      	push	{r4, r5, r7, lr}
 800cbba:	b08e      	sub	sp, #56	; 0x38
 800cbbc:	af04      	add	r7, sp, #16
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2203      	movs	r2, #3
 800cbcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd4:	2b03      	cmp	r3, #3
 800cbd6:	d02e      	beq.n	800cc36 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbde:	d106      	bne.n	800cbee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	639a      	str	r2, [r3, #56]	; 0x38
 800cbec:	e029      	b.n	800cc42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbf4:	d10a      	bne.n	800cc0c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fb66 	bl	800d2c8 <SD_WideBus_Enable>
 800cbfc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	431a      	orrs	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	639a      	str	r2, [r3, #56]	; 0x38
 800cc0a:	e01a      	b.n	800cc42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10a      	bne.n	800cc28 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 fba3 	bl	800d35e <SD_WideBus_Disable>
 800cc18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc1e:	6a3b      	ldr	r3, [r7, #32]
 800cc20:	431a      	orrs	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	639a      	str	r2, [r3, #56]	; 0x38
 800cc26:	e00c      	b.n	800cc42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	639a      	str	r2, [r3, #56]	; 0x38
 800cc34:	e005      	b.n	800cc42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d007      	beq.n	800cc5a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a2e      	ldr	r2, [pc, #184]	; (800cd08 <HAL_SD_ConfigWideBusOperation+0x150>)
 800cc50:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cc52:	2301      	movs	r3, #1
 800cc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc58:	e034      	b.n	800ccc4 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	2b03      	cmp	r3, #3
 800cc76:	d903      	bls.n	800cc80 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	695b      	ldr	r3, [r3, #20]
 800cc7c:	61bb      	str	r3, [r7, #24]
 800cc7e:	e012      	b.n	800cca6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc88:	d103      	bne.n	800cc92 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	61bb      	str	r3, [r7, #24]
 800cc90:	e009      	b.n	800cca6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc9a:	d102      	bne.n	800cca2 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800cc9c:	2302      	movs	r3, #2
 800cc9e:	61bb      	str	r3, [r7, #24]
 800cca0:	e001      	b.n	800cca6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800cca2:	2304      	movs	r3, #4
 800cca4:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681d      	ldr	r5, [r3, #0]
 800ccaa:	466c      	mov	r4, sp
 800ccac:	f107 0314 	add.w	r3, r7, #20
 800ccb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ccb8:	f107 0308 	add.w	r3, r7, #8
 800ccbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f003 fd60 	bl	8010784 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cccc:	4618      	mov	r0, r3
 800ccce:	f003 fe37 	bl	8010940 <SDMMC_CmdBlockLength>
 800ccd2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00c      	beq.n	800ccf4 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a0a      	ldr	r2, [pc, #40]	; (800cd08 <HAL_SD_ConfigWideBusOperation+0x150>)
 800cce0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	431a      	orrs	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ccfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3728      	adds	r7, #40	; 0x28
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bdb0      	pop	{r4, r5, r7, pc}
 800cd08:	1fe00fff 	.word	0x1fe00fff

0800cd0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b086      	sub	sp, #24
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cd18:	f107 030c 	add.w	r3, r7, #12
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 faaa 	bl	800d278 <SD_SendStatus>
 800cd24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d005      	beq.n	800cd38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	431a      	orrs	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	0a5b      	lsrs	r3, r3, #9
 800cd3c:	f003 030f 	and.w	r3, r3, #15
 800cd40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cd42:	693b      	ldr	r3, [r7, #16]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3718      	adds	r7, #24
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cd4c:	b590      	push	{r4, r7, lr}
 800cd4e:	b091      	sub	sp, #68	; 0x44
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cd54:	2301      	movs	r3, #1
 800cd56:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f003 fd6a 	bl	8010836 <SDMMC_GetPowerState>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d102      	bne.n	800cd6e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cd68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cd6c:	e0a8      	b.n	800cec0 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd72:	2b03      	cmp	r3, #3
 800cd74:	d02e      	beq.n	800cdd4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f003 ffb6 	bl	8010cec <SDMMC_CmdSendCID>
 800cd80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d001      	beq.n	800cd8c <SD_InitCard+0x40>
    {
      return errorstate;
 800cd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd8a:	e099      	b.n	800cec0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2100      	movs	r1, #0
 800cd92:	4618      	mov	r0, r3
 800cd94:	f003 fd95 	bl	80108c2 <SDMMC_GetResponse>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2104      	movs	r1, #4
 800cda4:	4618      	mov	r0, r3
 800cda6:	f003 fd8c 	bl	80108c2 <SDMMC_GetResponse>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2108      	movs	r1, #8
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f003 fd83 	bl	80108c2 <SDMMC_GetResponse>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	210c      	movs	r1, #12
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f003 fd7a 	bl	80108c2 <SDMMC_GetResponse>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd8:	2b03      	cmp	r3, #3
 800cdda:	d00d      	beq.n	800cdf8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f107 020e 	add.w	r2, r7, #14
 800cde4:	4611      	mov	r1, r2
 800cde6:	4618      	mov	r0, r3
 800cde8:	f003 ffbf 	bl	8010d6a <SDMMC_CmdSetRelAdd>
 800cdec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d001      	beq.n	800cdf8 <SD_InitCard+0xac>
    {
      return errorstate;
 800cdf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdf6:	e063      	b.n	800cec0 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdfc:	2b03      	cmp	r3, #3
 800cdfe:	d036      	beq.n	800ce6e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ce00:	89fb      	ldrh	r3, [r7, #14]
 800ce02:	461a      	mov	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce10:	041b      	lsls	r3, r3, #16
 800ce12:	4619      	mov	r1, r3
 800ce14:	4610      	mov	r0, r2
 800ce16:	f003 ff88 	bl	8010d2a <SDMMC_CmdSendCSD>
 800ce1a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <SD_InitCard+0xda>
    {
      return errorstate;
 800ce22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce24:	e04c      	b.n	800cec0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f003 fd48 	bl	80108c2 <SDMMC_GetResponse>
 800ce32:	4602      	mov	r2, r0
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2104      	movs	r1, #4
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f003 fd3f 	bl	80108c2 <SDMMC_GetResponse>
 800ce44:	4602      	mov	r2, r0
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2108      	movs	r1, #8
 800ce50:	4618      	mov	r0, r3
 800ce52:	f003 fd36 	bl	80108c2 <SDMMC_GetResponse>
 800ce56:	4602      	mov	r2, r0
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	210c      	movs	r1, #12
 800ce62:	4618      	mov	r0, r3
 800ce64:	f003 fd2d 	bl	80108c2 <SDMMC_GetResponse>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2104      	movs	r1, #4
 800ce74:	4618      	mov	r0, r3
 800ce76:	f003 fd24 	bl	80108c2 <SDMMC_GetResponse>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	0d1a      	lsrs	r2, r3, #20
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ce82:	f107 0310 	add.w	r3, r7, #16
 800ce86:	4619      	mov	r1, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f7ff fc0f 	bl	800c6ac <HAL_SD_GetCardCSD>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d002      	beq.n	800ce9a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ce98:	e012      	b.n	800cec0 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6819      	ldr	r1, [r3, #0]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cea2:	041b      	lsls	r3, r3, #16
 800cea4:	f04f 0400 	mov.w	r4, #0
 800cea8:	461a      	mov	r2, r3
 800ceaa:	4623      	mov	r3, r4
 800ceac:	4608      	mov	r0, r1
 800ceae:	f003 fe33 	bl	8010b18 <SDMMC_CmdSelDesel>
 800ceb2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ceb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d001      	beq.n	800cebe <SD_InitCard+0x172>
  {
    return errorstate;
 800ceba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cebc:	e000      	b.n	800cec0 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cebe:	2300      	movs	r3, #0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3744      	adds	r7, #68	; 0x44
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd90      	pop	{r4, r7, pc}

0800cec8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ced0:	2300      	movs	r3, #0
 800ced2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800ced4:	2300      	movs	r3, #0
 800ced6:	61fb      	str	r3, [r7, #28]
 800ced8:	2300      	movs	r3, #0
 800ceda:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800cedc:	f7f4 fe72 	bl	8001bc4 <HAL_GetTick>
 800cee0:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f003 fe3a 	bl	8010b60 <SDMMC_CmdGoIdleState>
 800ceec:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <SD_PowerON+0x30>
  {
    return errorstate;
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	e0e9      	b.n	800d0cc <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f003 fe4d 	bl	8010b9c <SDMMC_CmdOperCond>
 800cf02:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00d      	beq.n	800cf26 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f003 fe23 	bl	8010b60 <SDMMC_CmdGoIdleState>
 800cf1a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d004      	beq.n	800cf2c <SD_PowerON+0x64>
    {
      return errorstate;
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	e0d2      	b.n	800d0cc <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d137      	bne.n	800cfa4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2100      	movs	r1, #0
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f003 fe4e 	bl	8010bdc <SDMMC_CmdAppCommand>
 800cf40:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d02d      	beq.n	800cfa4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cf4c:	e0be      	b.n	800d0cc <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2100      	movs	r1, #0
 800cf54:	4618      	mov	r0, r3
 800cf56:	f003 fe41 	bl	8010bdc <SDMMC_CmdAppCommand>
 800cf5a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <SD_PowerON+0x9e>
    {
      return errorstate;
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	e0b2      	b.n	800d0cc <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	495a      	ldr	r1, [pc, #360]	; (800d0d4 <SD_PowerON+0x20c>)
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f003 fe58 	bl	8010c22 <SDMMC_CmdAppOperCommand>
 800cf72:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d002      	beq.n	800cf80 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cf7e:	e0a5      	b.n	800d0cc <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2100      	movs	r1, #0
 800cf86:	4618      	mov	r0, r3
 800cf88:	f003 fc9b 	bl	80108c2 <SDMMC_GetResponse>
 800cf8c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	0fdb      	lsrs	r3, r3, #31
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d101      	bne.n	800cf9a <SD_PowerON+0xd2>
 800cf96:	2301      	movs	r3, #1
 800cf98:	e000      	b.n	800cf9c <SD_PowerON+0xd4>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	61bb      	str	r3, [r7, #24]

    count++;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d802      	bhi.n	800cfb4 <SD_PowerON+0xec>
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d0cc      	beq.n	800cf4e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d902      	bls.n	800cfc4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cfbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cfc2:	e083      	b.n	800d0cc <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d07d      	beq.n	800d0ca <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	699b      	ldr	r3, [r3, #24]
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d176      	bne.n	800d0ca <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d071      	beq.n	800d0ca <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfec:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f042 0208 	orr.w	r2, r2, #8
 800cffc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4618      	mov	r0, r3
 800d004:	f003 ff18 	bl	8010e38 <SDMMC_CmdVoltageSwitch>
 800d008:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00c      	beq.n	800d02a <SD_PowerON+0x162>
        {
          return errorstate;
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	e05b      	b.n	800d0cc <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d014:	f7f4 fdd6 	bl	8001bc4 <HAL_GetTick>
 800d018:	4602      	mov	r2, r0
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d022:	d102      	bne.n	800d02a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800d024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d028:	e050      	b.n	800d0cc <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d038:	d1ec      	bne.n	800d014 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d042:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d04e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d052:	d002      	beq.n	800d05a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800d054:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d058:	e038      	b.n	800d0cc <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800d05a:	2001      	movs	r0, #1
 800d05c:	f7ff fb1a 	bl	800c694 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f042 0204 	orr.w	r2, r2, #4
 800d06e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d070:	e00a      	b.n	800d088 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d072:	f7f4 fda7 	bl	8001bc4 <HAL_GetTick>
 800d076:	4602      	mov	r2, r0
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	1ad3      	subs	r3, r2, r3
 800d07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d080:	d102      	bne.n	800d088 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800d082:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d086:	e021      	b.n	800d0cc <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d096:	d1ec      	bne.n	800d072 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d0a0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0b0:	d102      	bne.n	800d0b8 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d0b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d0b6:	e009      	b.n	800d0cc <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2213      	movs	r2, #19
 800d0be:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0c8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3720      	adds	r7, #32
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	c1100000 	.word	0xc1100000

0800d0d8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08c      	sub	sp, #48	; 0x30
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d0e2:	f7f4 fd6f 	bl	8001bc4 <HAL_GetTick>
 800d0e6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f003 fbe5 	bl	80108c2 <SDMMC_GetResponse>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d102:	d102      	bne.n	800d10a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d104:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d108:	e0b0      	b.n	800d26c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2140      	movs	r1, #64	; 0x40
 800d110:	4618      	mov	r0, r3
 800d112:	f003 fc15 	bl	8010940 <SDMMC_CmdBlockLength>
 800d116:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d118:	6a3b      	ldr	r3, [r7, #32]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d005      	beq.n	800d12a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	e0a0      	b.n	800d26c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d132:	041b      	lsls	r3, r3, #16
 800d134:	4619      	mov	r1, r3
 800d136:	4610      	mov	r0, r2
 800d138:	f003 fd50 	bl	8010bdc <SDMMC_CmdAppCommand>
 800d13c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d13e:	6a3b      	ldr	r3, [r7, #32]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d005      	beq.n	800d150 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d14c:	6a3b      	ldr	r3, [r7, #32]
 800d14e:	e08d      	b.n	800d26c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d150:	f04f 33ff 	mov.w	r3, #4294967295
 800d154:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d156:	2340      	movs	r3, #64	; 0x40
 800d158:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d15a:	2360      	movs	r3, #96	; 0x60
 800d15c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d15e:	2302      	movs	r3, #2
 800d160:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d162:	2300      	movs	r3, #0
 800d164:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d166:	2301      	movs	r3, #1
 800d168:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f107 0208 	add.w	r2, r7, #8
 800d172:	4611      	mov	r1, r2
 800d174:	4618      	mov	r0, r3
 800d176:	f003 fbb7 	bl	80108e8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4618      	mov	r0, r3
 800d180:	f003 fe38 	bl	8010df4 <SDMMC_CmdStatusRegister>
 800d184:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d02b      	beq.n	800d1e4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	e069      	b.n	800d26c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d19e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d013      	beq.n	800d1ce <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1aa:	e00d      	b.n	800d1c8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f003 fb11 	bl	80107d8 <SDMMC_ReadFIFO>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ba:	601a      	str	r2, [r3, #0]
        pData++;
 800d1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1be:	3304      	adds	r3, #4
 800d1c0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	2b07      	cmp	r3, #7
 800d1cc:	d9ee      	bls.n	800d1ac <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d1ce:	f7f4 fcf9 	bl	8001bc4 <HAL_GetTick>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1dc:	d102      	bne.n	800d1e4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d1de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1e2:	e043      	b.n	800d26c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ea:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d0d2      	beq.n	800d198 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f8:	f003 0308 	and.w	r3, r3, #8
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d001      	beq.n	800d204 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d200:	2308      	movs	r3, #8
 800d202:	e033      	b.n	800d26c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d20a:	f003 0302 	and.w	r3, r3, #2
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d001      	beq.n	800d216 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d212:	2302      	movs	r3, #2
 800d214:	e02a      	b.n	800d26c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21c:	f003 0320 	and.w	r3, r3, #32
 800d220:	2b00      	cmp	r3, #0
 800d222:	d017      	beq.n	800d254 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d224:	2320      	movs	r3, #32
 800d226:	e021      	b.n	800d26c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f003 fad3 	bl	80107d8 <SDMMC_ReadFIFO>
 800d232:	4602      	mov	r2, r0
 800d234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d236:	601a      	str	r2, [r3, #0]
    pData++;
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	3304      	adds	r3, #4
 800d23c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d23e:	f7f4 fcc1 	bl	8001bc4 <HAL_GetTick>
 800d242:	4602      	mov	r2, r0
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24c:	d102      	bne.n	800d254 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d24e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d252:	e00b      	b.n	800d26c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e2      	bne.n	800d228 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a03      	ldr	r2, [pc, #12]	; (800d274 <SD_SendSDStatus+0x19c>)
 800d268:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3730      	adds	r7, #48	; 0x30
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	18000f3a 	.word	0x18000f3a

0800d278 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d102      	bne.n	800d28e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d28c:	e018      	b.n	800d2c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d296:	041b      	lsls	r3, r3, #16
 800d298:	4619      	mov	r1, r3
 800d29a:	4610      	mov	r0, r2
 800d29c:	f003 fd87 	bl	8010dae <SDMMC_CmdSendStatus>
 800d2a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d001      	beq.n	800d2ac <SD_SendStatus+0x34>
  {
    return errorstate;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	e009      	b.n	800d2c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f003 fb05 	bl	80108c2 <SDMMC_GetResponse>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	60fb      	str	r3, [r7, #12]
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2100      	movs	r1, #0
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f003 faef 	bl	80108c2 <SDMMC_GetResponse>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2ee:	d102      	bne.n	800d2f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d2f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d2f4:	e02f      	b.n	800d356 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d2f6:	f107 030c 	add.w	r3, r7, #12
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f879 	bl	800d3f4 <SD_FindSCR>
 800d302:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	e023      	b.n	800d356 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01c      	beq.n	800d352 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d320:	041b      	lsls	r3, r3, #16
 800d322:	4619      	mov	r1, r3
 800d324:	4610      	mov	r0, r2
 800d326:	f003 fc59 	bl	8010bdc <SDMMC_CmdAppCommand>
 800d32a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d001      	beq.n	800d336 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	e00f      	b.n	800d356 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2102      	movs	r1, #2
 800d33c:	4618      	mov	r0, r3
 800d33e:	f003 fc90 	bl	8010c62 <SDMMC_CmdBusWidth>
 800d342:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	e003      	b.n	800d356 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d34e:	2300      	movs	r3, #0
 800d350:	e001      	b.n	800d356 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d352:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b086      	sub	sp, #24
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d366:	2300      	movs	r3, #0
 800d368:	60fb      	str	r3, [r7, #12]
 800d36a:	2300      	movs	r3, #0
 800d36c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2100      	movs	r1, #0
 800d374:	4618      	mov	r0, r3
 800d376:	f003 faa4 	bl	80108c2 <SDMMC_GetResponse>
 800d37a:	4603      	mov	r3, r0
 800d37c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d384:	d102      	bne.n	800d38c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d386:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d38a:	e02f      	b.n	800d3ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d38c:	f107 030c 	add.w	r3, r7, #12
 800d390:	4619      	mov	r1, r3
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f82e 	bl	800d3f4 <SD_FindSCR>
 800d398:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d001      	beq.n	800d3a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	e023      	b.n	800d3ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d01c      	beq.n	800d3e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3b6:	041b      	lsls	r3, r3, #16
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	f003 fc0e 	bl	8010bdc <SDMMC_CmdAppCommand>
 800d3c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d001      	beq.n	800d3cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	e00f      	b.n	800d3ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f003 fc45 	bl	8010c62 <SDMMC_CmdBusWidth>
 800d3d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d001      	beq.n	800d3e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	e003      	b.n	800d3ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	e001      	b.n	800d3ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d3e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3718      	adds	r7, #24
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b08e      	sub	sp, #56	; 0x38
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d3fe:	f7f4 fbe1 	bl	8001bc4 <HAL_GetTick>
 800d402:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d404:	2300      	movs	r3, #0
 800d406:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d408:	2300      	movs	r3, #0
 800d40a:	60bb      	str	r3, [r7, #8]
 800d40c:	2300      	movs	r3, #0
 800d40e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2108      	movs	r1, #8
 800d41a:	4618      	mov	r0, r3
 800d41c:	f003 fa90 	bl	8010940 <SDMMC_CmdBlockLength>
 800d420:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <SD_FindSCR+0x38>
  {
    return errorstate;
 800d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42a:	e0ad      	b.n	800d588 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d434:	041b      	lsls	r3, r3, #16
 800d436:	4619      	mov	r1, r3
 800d438:	4610      	mov	r0, r2
 800d43a:	f003 fbcf 	bl	8010bdc <SDMMC_CmdAppCommand>
 800d43e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <SD_FindSCR+0x56>
  {
    return errorstate;
 800d446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d448:	e09e      	b.n	800d588 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d44a:	f04f 33ff 	mov.w	r3, #4294967295
 800d44e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d450:	2308      	movs	r3, #8
 800d452:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d454:	2330      	movs	r3, #48	; 0x30
 800d456:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d458:	2302      	movs	r3, #2
 800d45a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d460:	2301      	movs	r3, #1
 800d462:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f107 0210 	add.w	r2, r7, #16
 800d46c:	4611      	mov	r1, r2
 800d46e:	4618      	mov	r0, r3
 800d470:	f003 fa3a 	bl	80108e8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4618      	mov	r0, r3
 800d47a:	f003 fc15 	bl	8010ca8 <SDMMC_CmdSendSCR>
 800d47e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	2b00      	cmp	r3, #0
 800d484:	d027      	beq.n	800d4d6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d488:	e07e      	b.n	800d588 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d494:	2b00      	cmp	r3, #0
 800d496:	d113      	bne.n	800d4c0 <SD_FindSCR+0xcc>
 800d498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d110      	bne.n	800d4c0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f003 f998 	bl	80107d8 <SDMMC_ReadFIFO>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f003 f991 	bl	80107d8 <SDMMC_ReadFIFO>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	60fb      	str	r3, [r7, #12]
      index++;
 800d4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4bc:	3301      	adds	r3, #1
 800d4be:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d4c0:	f7f4 fb80 	bl	8001bc4 <HAL_GetTick>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ce:	d102      	bne.n	800d4d6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d4d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4d4:	e058      	b.n	800d588 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4dc:	f240 532a 	movw	r3, #1322	; 0x52a
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d0d1      	beq.n	800d48a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ec:	f003 0308 	and.w	r3, r3, #8
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d005      	beq.n	800d500 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2208      	movs	r2, #8
 800d4fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d4fc:	2308      	movs	r3, #8
 800d4fe:	e043      	b.n	800d588 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d005      	beq.n	800d51a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2202      	movs	r2, #2
 800d514:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d516:	2302      	movs	r3, #2
 800d518:	e036      	b.n	800d588 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d520:	f003 0320 	and.w	r3, r3, #32
 800d524:	2b00      	cmp	r3, #0
 800d526:	d005      	beq.n	800d534 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2220      	movs	r2, #32
 800d52e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d530:	2320      	movs	r3, #32
 800d532:	e029      	b.n	800d588 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a15      	ldr	r2, [pc, #84]	; (800d590 <SD_FindSCR+0x19c>)
 800d53a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	061a      	lsls	r2, r3, #24
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	021b      	lsls	r3, r3, #8
 800d544:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d548:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	0a1b      	lsrs	r3, r3, #8
 800d54e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d552:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	0e1b      	lsrs	r3, r3, #24
 800d558:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55c:	601a      	str	r2, [r3, #0]
    scr++;
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	3304      	adds	r3, #4
 800d562:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	061a      	lsls	r2, r3, #24
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	021b      	lsls	r3, r3, #8
 800d56c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d570:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	0a1b      	lsrs	r3, r3, #8
 800d576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d57a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	0e1b      	lsrs	r3, r3, #24
 800d580:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d584:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3738      	adds	r7, #56	; 0x38
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	18000f3a 	.word	0x18000f3a

0800d594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d101      	bne.n	800d5a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e01d      	b.n	800d5e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d106      	bne.n	800d5c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7f4 f8d2 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2202      	movs	r2, #2
 800d5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	3304      	adds	r3, #4
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	f000 faa0 	bl	800db18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
	...

0800d5ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	689a      	ldr	r2, [r3, #8]
 800d602:	4b0e      	ldr	r3, [pc, #56]	; (800d63c <HAL_TIM_Base_Start+0x50>)
 800d604:	4013      	ands	r3, r2
 800d606:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b06      	cmp	r3, #6
 800d60c:	d00b      	beq.n	800d626 <HAL_TIM_Base_Start+0x3a>
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d614:	d007      	beq.n	800d626 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f042 0201 	orr.w	r2, r2, #1
 800d624:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2201      	movs	r2, #1
 800d62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3714      	adds	r7, #20
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	00010007 	.word	0x00010007

0800d640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	68da      	ldr	r2, [r3, #12]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f042 0201 	orr.w	r2, r2, #1
 800d656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	689a      	ldr	r2, [r3, #8]
 800d65e:	4b0c      	ldr	r3, [pc, #48]	; (800d690 <HAL_TIM_Base_Start_IT+0x50>)
 800d660:	4013      	ands	r3, r2
 800d662:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b06      	cmp	r3, #6
 800d668:	d00b      	beq.n	800d682 <HAL_TIM_Base_Start_IT+0x42>
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d670:	d007      	beq.n	800d682 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	681a      	ldr	r2, [r3, #0]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f042 0201 	orr.w	r2, r2, #1
 800d680:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d682:	2300      	movs	r3, #0
}
 800d684:	4618      	mov	r0, r3
 800d686:	3714      	adds	r7, #20
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr
 800d690:	00010007 	.word	0x00010007

0800d694 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	68da      	ldr	r2, [r3, #12]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f022 0201 	bic.w	r2, r2, #1
 800d6aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6a1a      	ldr	r2, [r3, #32]
 800d6b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6b6:	4013      	ands	r3, r2
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10f      	bne.n	800d6dc <HAL_TIM_Base_Stop_IT+0x48>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6a1a      	ldr	r2, [r3, #32]
 800d6c2:	f240 4344 	movw	r3, #1092	; 0x444
 800d6c6:	4013      	ands	r3, r2
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d107      	bne.n	800d6dc <HAL_TIM_Base_Stop_IT+0x48>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f022 0201 	bic.w	r2, r2, #1
 800d6da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr

0800d6ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b082      	sub	sp, #8
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	f003 0302 	and.w	r3, r3, #2
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	d122      	bne.n	800d746 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	f003 0302 	and.w	r3, r3, #2
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d11b      	bne.n	800d746 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f06f 0202 	mvn.w	r2, #2
 800d716:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2201      	movs	r2, #1
 800d71c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	f003 0303 	and.w	r3, r3, #3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d003      	beq.n	800d734 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 f9d5 	bl	800dadc <HAL_TIM_IC_CaptureCallback>
 800d732:	e005      	b.n	800d740 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 f9c7 	bl	800dac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f9d8 	bl	800daf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	f003 0304 	and.w	r3, r3, #4
 800d750:	2b04      	cmp	r3, #4
 800d752:	d122      	bne.n	800d79a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	f003 0304 	and.w	r3, r3, #4
 800d75e:	2b04      	cmp	r3, #4
 800d760:	d11b      	bne.n	800d79a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f06f 0204 	mvn.w	r2, #4
 800d76a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2202      	movs	r2, #2
 800d770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d003      	beq.n	800d788 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 f9ab 	bl	800dadc <HAL_TIM_IC_CaptureCallback>
 800d786:	e005      	b.n	800d794 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 f99d 	bl	800dac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f9ae 	bl	800daf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	691b      	ldr	r3, [r3, #16]
 800d7a0:	f003 0308 	and.w	r3, r3, #8
 800d7a4:	2b08      	cmp	r3, #8
 800d7a6:	d122      	bne.n	800d7ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	f003 0308 	and.w	r3, r3, #8
 800d7b2:	2b08      	cmp	r3, #8
 800d7b4:	d11b      	bne.n	800d7ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f06f 0208 	mvn.w	r2, #8
 800d7be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2204      	movs	r2, #4
 800d7c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	69db      	ldr	r3, [r3, #28]
 800d7cc:	f003 0303 	and.w	r3, r3, #3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d003      	beq.n	800d7dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 f981 	bl	800dadc <HAL_TIM_IC_CaptureCallback>
 800d7da:	e005      	b.n	800d7e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 f973 	bl	800dac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 f984 	bl	800daf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	f003 0310 	and.w	r3, r3, #16
 800d7f8:	2b10      	cmp	r3, #16
 800d7fa:	d122      	bne.n	800d842 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	f003 0310 	and.w	r3, r3, #16
 800d806:	2b10      	cmp	r3, #16
 800d808:	d11b      	bne.n	800d842 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f06f 0210 	mvn.w	r2, #16
 800d812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2208      	movs	r2, #8
 800d818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	69db      	ldr	r3, [r3, #28]
 800d820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d824:	2b00      	cmp	r3, #0
 800d826:	d003      	beq.n	800d830 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f957 	bl	800dadc <HAL_TIM_IC_CaptureCallback>
 800d82e:	e005      	b.n	800d83c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f949 	bl	800dac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f95a 	bl	800daf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d10e      	bne.n	800d86e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	f003 0301 	and.w	r3, r3, #1
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d107      	bne.n	800d86e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f06f 0201 	mvn.w	r2, #1
 800d866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7f3 fbe1 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d878:	2b80      	cmp	r3, #128	; 0x80
 800d87a:	d10e      	bne.n	800d89a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d886:	2b80      	cmp	r3, #128	; 0x80
 800d888:	d107      	bne.n	800d89a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 fb09 	bl	800deac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8a8:	d10e      	bne.n	800d8c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8b4:	2b80      	cmp	r3, #128	; 0x80
 800d8b6:	d107      	bne.n	800d8c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d8c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 fafc 	bl	800dec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	691b      	ldr	r3, [r3, #16]
 800d8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d2:	2b40      	cmp	r3, #64	; 0x40
 800d8d4:	d10e      	bne.n	800d8f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8e0:	2b40      	cmp	r3, #64	; 0x40
 800d8e2:	d107      	bne.n	800d8f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d8ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f908 	bl	800db04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	f003 0320 	and.w	r3, r3, #32
 800d8fe:	2b20      	cmp	r3, #32
 800d900:	d10e      	bne.n	800d920 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	f003 0320 	and.w	r3, r3, #32
 800d90c:	2b20      	cmp	r3, #32
 800d90e:	d107      	bne.n	800d920 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f06f 0220 	mvn.w	r2, #32
 800d918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 fabc 	bl	800de98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d920:	bf00      	nop
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d101      	bne.n	800d940 <HAL_TIM_ConfigClockSource+0x18>
 800d93c:	2302      	movs	r3, #2
 800d93e:	e0b7      	b.n	800dab0 <HAL_TIM_ConfigClockSource+0x188>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2201      	movs	r2, #1
 800d944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2202      	movs	r2, #2
 800d94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	4b57      	ldr	r3, [pc, #348]	; (800dab8 <HAL_TIM_ConfigClockSource+0x190>)
 800d95c:	4013      	ands	r3, r2
 800d95e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d966:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b70      	cmp	r3, #112	; 0x70
 800d976:	d02e      	beq.n	800d9d6 <HAL_TIM_ConfigClockSource+0xae>
 800d978:	2b70      	cmp	r3, #112	; 0x70
 800d97a:	d812      	bhi.n	800d9a2 <HAL_TIM_ConfigClockSource+0x7a>
 800d97c:	2b30      	cmp	r3, #48	; 0x30
 800d97e:	f000 8084 	beq.w	800da8a <HAL_TIM_ConfigClockSource+0x162>
 800d982:	2b30      	cmp	r3, #48	; 0x30
 800d984:	d806      	bhi.n	800d994 <HAL_TIM_ConfigClockSource+0x6c>
 800d986:	2b10      	cmp	r3, #16
 800d988:	d07f      	beq.n	800da8a <HAL_TIM_ConfigClockSource+0x162>
 800d98a:	2b20      	cmp	r3, #32
 800d98c:	d07d      	beq.n	800da8a <HAL_TIM_ConfigClockSource+0x162>
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d07b      	beq.n	800da8a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d992:	e084      	b.n	800da9e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800d994:	2b50      	cmp	r3, #80	; 0x50
 800d996:	d048      	beq.n	800da2a <HAL_TIM_ConfigClockSource+0x102>
 800d998:	2b60      	cmp	r3, #96	; 0x60
 800d99a:	d056      	beq.n	800da4a <HAL_TIM_ConfigClockSource+0x122>
 800d99c:	2b40      	cmp	r3, #64	; 0x40
 800d99e:	d064      	beq.n	800da6a <HAL_TIM_ConfigClockSource+0x142>
      break;
 800d9a0:	e07d      	b.n	800da9e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800d9a2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d9a6:	d070      	beq.n	800da8a <HAL_TIM_ConfigClockSource+0x162>
 800d9a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d9ac:	d809      	bhi.n	800d9c2 <HAL_TIM_ConfigClockSource+0x9a>
 800d9ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9b2:	d027      	beq.n	800da04 <HAL_TIM_ConfigClockSource+0xdc>
 800d9b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9b8:	d067      	beq.n	800da8a <HAL_TIM_ConfigClockSource+0x162>
 800d9ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9be:	d06d      	beq.n	800da9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d9c0:	e06d      	b.n	800da9e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800d9c2:	4a3e      	ldr	r2, [pc, #248]	; (800dabc <HAL_TIM_ConfigClockSource+0x194>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d060      	beq.n	800da8a <HAL_TIM_ConfigClockSource+0x162>
 800d9c8:	4a3d      	ldr	r2, [pc, #244]	; (800dac0 <HAL_TIM_ConfigClockSource+0x198>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d05d      	beq.n	800da8a <HAL_TIM_ConfigClockSource+0x162>
 800d9ce:	4a3d      	ldr	r2, [pc, #244]	; (800dac4 <HAL_TIM_ConfigClockSource+0x19c>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d05a      	beq.n	800da8a <HAL_TIM_ConfigClockSource+0x162>
      break;
 800d9d4:	e063      	b.n	800da9e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6818      	ldr	r0, [r3, #0]
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	6899      	ldr	r1, [r3, #8]
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	685a      	ldr	r2, [r3, #4]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	f000 f9af 	bl	800dd48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d9f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	609a      	str	r2, [r3, #8]
      break;
 800da02:	e04c      	b.n	800da9e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6818      	ldr	r0, [r3, #0]
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	6899      	ldr	r1, [r3, #8]
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	685a      	ldr	r2, [r3, #4]
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	f000 f998 	bl	800dd48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	689a      	ldr	r2, [r3, #8]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800da26:	609a      	str	r2, [r3, #8]
      break;
 800da28:	e039      	b.n	800da9e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6818      	ldr	r0, [r3, #0]
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	6859      	ldr	r1, [r3, #4]
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	461a      	mov	r2, r3
 800da38:	f000 f908 	bl	800dc4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2150      	movs	r1, #80	; 0x50
 800da42:	4618      	mov	r0, r3
 800da44:	f000 f962 	bl	800dd0c <TIM_ITRx_SetConfig>
      break;
 800da48:	e029      	b.n	800da9e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6818      	ldr	r0, [r3, #0]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	6859      	ldr	r1, [r3, #4]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	461a      	mov	r2, r3
 800da58:	f000 f927 	bl	800dcaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2160      	movs	r1, #96	; 0x60
 800da62:	4618      	mov	r0, r3
 800da64:	f000 f952 	bl	800dd0c <TIM_ITRx_SetConfig>
      break;
 800da68:	e019      	b.n	800da9e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6818      	ldr	r0, [r3, #0]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	6859      	ldr	r1, [r3, #4]
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	461a      	mov	r2, r3
 800da78:	f000 f8e8 	bl	800dc4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2140      	movs	r1, #64	; 0x40
 800da82:	4618      	mov	r0, r3
 800da84:	f000 f942 	bl	800dd0c <TIM_ITRx_SetConfig>
      break;
 800da88:	e009      	b.n	800da9e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4619      	mov	r1, r3
 800da94:	4610      	mov	r0, r2
 800da96:	f000 f939 	bl	800dd0c <TIM_ITRx_SetConfig>
      break;
 800da9a:	e000      	b.n	800da9e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800da9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2201      	movs	r2, #1
 800daa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	ffceff88 	.word	0xffceff88
 800dabc:	00100030 	.word	0x00100030
 800dac0:	00100040 	.word	0x00100040
 800dac4:	00100020 	.word	0x00100020

0800dac8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dae4:	bf00      	nop
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800db18:	b480      	push	{r7}
 800db1a:	b085      	sub	sp, #20
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4a40      	ldr	r2, [pc, #256]	; (800dc2c <TIM_Base_SetConfig+0x114>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d013      	beq.n	800db58 <TIM_Base_SetConfig+0x40>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db36:	d00f      	beq.n	800db58 <TIM_Base_SetConfig+0x40>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4a3d      	ldr	r2, [pc, #244]	; (800dc30 <TIM_Base_SetConfig+0x118>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d00b      	beq.n	800db58 <TIM_Base_SetConfig+0x40>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4a3c      	ldr	r2, [pc, #240]	; (800dc34 <TIM_Base_SetConfig+0x11c>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d007      	beq.n	800db58 <TIM_Base_SetConfig+0x40>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	4a3b      	ldr	r2, [pc, #236]	; (800dc38 <TIM_Base_SetConfig+0x120>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d003      	beq.n	800db58 <TIM_Base_SetConfig+0x40>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4a3a      	ldr	r2, [pc, #232]	; (800dc3c <TIM_Base_SetConfig+0x124>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d108      	bne.n	800db6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	68fa      	ldr	r2, [r7, #12]
 800db66:	4313      	orrs	r3, r2
 800db68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a2f      	ldr	r2, [pc, #188]	; (800dc2c <TIM_Base_SetConfig+0x114>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d01f      	beq.n	800dbb2 <TIM_Base_SetConfig+0x9a>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db78:	d01b      	beq.n	800dbb2 <TIM_Base_SetConfig+0x9a>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4a2c      	ldr	r2, [pc, #176]	; (800dc30 <TIM_Base_SetConfig+0x118>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d017      	beq.n	800dbb2 <TIM_Base_SetConfig+0x9a>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4a2b      	ldr	r2, [pc, #172]	; (800dc34 <TIM_Base_SetConfig+0x11c>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d013      	beq.n	800dbb2 <TIM_Base_SetConfig+0x9a>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4a2a      	ldr	r2, [pc, #168]	; (800dc38 <TIM_Base_SetConfig+0x120>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d00f      	beq.n	800dbb2 <TIM_Base_SetConfig+0x9a>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	4a29      	ldr	r2, [pc, #164]	; (800dc3c <TIM_Base_SetConfig+0x124>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d00b      	beq.n	800dbb2 <TIM_Base_SetConfig+0x9a>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4a28      	ldr	r2, [pc, #160]	; (800dc40 <TIM_Base_SetConfig+0x128>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d007      	beq.n	800dbb2 <TIM_Base_SetConfig+0x9a>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	4a27      	ldr	r2, [pc, #156]	; (800dc44 <TIM_Base_SetConfig+0x12c>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d003      	beq.n	800dbb2 <TIM_Base_SetConfig+0x9a>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4a26      	ldr	r2, [pc, #152]	; (800dc48 <TIM_Base_SetConfig+0x130>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d108      	bne.n	800dbc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	695b      	ldr	r3, [r3, #20]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	689a      	ldr	r2, [r3, #8]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a10      	ldr	r2, [pc, #64]	; (800dc2c <TIM_Base_SetConfig+0x114>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d00f      	beq.n	800dc10 <TIM_Base_SetConfig+0xf8>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a12      	ldr	r2, [pc, #72]	; (800dc3c <TIM_Base_SetConfig+0x124>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d00b      	beq.n	800dc10 <TIM_Base_SetConfig+0xf8>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4a11      	ldr	r2, [pc, #68]	; (800dc40 <TIM_Base_SetConfig+0x128>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d007      	beq.n	800dc10 <TIM_Base_SetConfig+0xf8>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	4a10      	ldr	r2, [pc, #64]	; (800dc44 <TIM_Base_SetConfig+0x12c>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d003      	beq.n	800dc10 <TIM_Base_SetConfig+0xf8>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4a0f      	ldr	r2, [pc, #60]	; (800dc48 <TIM_Base_SetConfig+0x130>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d103      	bne.n	800dc18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	691a      	ldr	r2, [r3, #16]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	615a      	str	r2, [r3, #20]
}
 800dc1e:	bf00      	nop
 800dc20:	3714      	adds	r7, #20
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr
 800dc2a:	bf00      	nop
 800dc2c:	40010000 	.word	0x40010000
 800dc30:	40000400 	.word	0x40000400
 800dc34:	40000800 	.word	0x40000800
 800dc38:	40000c00 	.word	0x40000c00
 800dc3c:	40010400 	.word	0x40010400
 800dc40:	40014000 	.word	0x40014000
 800dc44:	40014400 	.word	0x40014400
 800dc48:	40014800 	.word	0x40014800

0800dc4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b087      	sub	sp, #28
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6a1b      	ldr	r3, [r3, #32]
 800dc5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	f023 0201 	bic.w	r2, r3, #1
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	699b      	ldr	r3, [r3, #24]
 800dc6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dc76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	011b      	lsls	r3, r3, #4
 800dc7c:	693a      	ldr	r2, [r7, #16]
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	f023 030a 	bic.w	r3, r3, #10
 800dc88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc8a:	697a      	ldr	r2, [r7, #20]
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	693a      	ldr	r2, [r7, #16]
 800dc96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	697a      	ldr	r2, [r7, #20]
 800dc9c:	621a      	str	r2, [r3, #32]
}
 800dc9e:	bf00      	nop
 800dca0:	371c      	adds	r7, #28
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr

0800dcaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b087      	sub	sp, #28
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	60f8      	str	r0, [r7, #12]
 800dcb2:	60b9      	str	r1, [r7, #8]
 800dcb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6a1b      	ldr	r3, [r3, #32]
 800dcba:	f023 0210 	bic.w	r2, r3, #16
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	699b      	ldr	r3, [r3, #24]
 800dcc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6a1b      	ldr	r3, [r3, #32]
 800dccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dcd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	031b      	lsls	r3, r3, #12
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dce6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	011b      	lsls	r3, r3, #4
 800dcec:	693a      	ldr	r2, [r7, #16]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	697a      	ldr	r2, [r7, #20]
 800dcf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	693a      	ldr	r2, [r7, #16]
 800dcfc:	621a      	str	r2, [r3, #32]
}
 800dcfe:	bf00      	nop
 800dd00:	371c      	adds	r7, #28
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr
	...

0800dd0c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	4b09      	ldr	r3, [pc, #36]	; (800dd44 <TIM_ITRx_SetConfig+0x38>)
 800dd20:	4013      	ands	r3, r2
 800dd22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	f043 0307 	orr.w	r3, r3, #7
 800dd2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	609a      	str	r2, [r3, #8]
}
 800dd36:	bf00      	nop
 800dd38:	3714      	adds	r7, #20
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	ffcfff8f 	.word	0xffcfff8f

0800dd48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b087      	sub	sp, #28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dd62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	021a      	lsls	r2, r3, #8
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	431a      	orrs	r2, r3
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	697a      	ldr	r2, [r7, #20]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	697a      	ldr	r2, [r7, #20]
 800dd7a:	609a      	str	r2, [r3, #8]
}
 800dd7c:	bf00      	nop
 800dd7e:	371c      	adds	r7, #28
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d101      	bne.n	800dda0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	e068      	b.n	800de72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2202      	movs	r2, #2
 800ddac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a2e      	ldr	r2, [pc, #184]	; (800de80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d004      	beq.n	800ddd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4a2d      	ldr	r2, [pc, #180]	; (800de84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d108      	bne.n	800dde6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ddda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a1e      	ldr	r2, [pc, #120]	; (800de80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d01d      	beq.n	800de46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de12:	d018      	beq.n	800de46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4a1b      	ldr	r2, [pc, #108]	; (800de88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d013      	beq.n	800de46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4a1a      	ldr	r2, [pc, #104]	; (800de8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d00e      	beq.n	800de46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a18      	ldr	r2, [pc, #96]	; (800de90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d009      	beq.n	800de46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4a13      	ldr	r2, [pc, #76]	; (800de84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d004      	beq.n	800de46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a14      	ldr	r2, [pc, #80]	; (800de94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d10c      	bne.n	800de60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	4313      	orrs	r3, r2
 800de56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68ba      	ldr	r2, [r7, #8]
 800de5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2201      	movs	r2, #1
 800de64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3714      	adds	r7, #20
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	40010000 	.word	0x40010000
 800de84:	40010400 	.word	0x40010400
 800de88:	40000400 	.word	0x40000400
 800de8c:	40000800 	.word	0x40000800
 800de90:	40000c00 	.word	0x40000c00
 800de94:	40001800 	.word	0x40001800

0800de98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dea0:	bf00      	nop
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800deb4:	bf00      	nop
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dec8:	bf00      	nop
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d101      	bne.n	800dee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dee2:	2301      	movs	r3, #1
 800dee4:	e042      	b.n	800df6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800deec:	2b00      	cmp	r3, #0
 800deee:	d106      	bne.n	800defe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f7f3 fc73 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2224      	movs	r2, #36	; 0x24
 800df02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f022 0201 	bic.w	r2, r2, #1
 800df14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 f82e 	bl	800df78 <UART_SetConfig>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d101      	bne.n	800df26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800df22:	2301      	movs	r3, #1
 800df24:	e022      	b.n	800df6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d002      	beq.n	800df34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f002 f9a0 	bl	8010274 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	685a      	ldr	r2, [r3, #4]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	689a      	ldr	r2, [r3, #8]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f042 0201 	orr.w	r2, r2, #1
 800df62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f002 fa27 	bl	80103b8 <UART_CheckIdleState>
 800df6a:	4603      	mov	r3, r0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	0000      	movs	r0, r0
	...

0800df78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800df7c:	b090      	sub	sp, #64	; 0x40
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800df82:	2300      	movs	r3, #0
 800df84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800df8c:	2300      	movs	r3, #0
 800df8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	689a      	ldr	r2, [r3, #8]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	431a      	orrs	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	695b      	ldr	r3, [r3, #20]
 800df9e:	431a      	orrs	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	69db      	ldr	r3, [r3, #28]
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	4bc1      	ldr	r3, [pc, #772]	; (800e2c0 <UART_SetConfig+0x348>)
 800dfba:	4013      	ands	r3, r2
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	6812      	ldr	r2, [r2, #0]
 800dfc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dfc2:	430b      	orrs	r3, r1
 800dfc4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	68da      	ldr	r2, [r3, #12]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	430a      	orrs	r2, r1
 800dfda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	699b      	ldr	r3, [r3, #24]
 800dfe0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4ab7      	ldr	r2, [pc, #732]	; (800e2c4 <UART_SetConfig+0x34c>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d004      	beq.n	800dff6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a1b      	ldr	r3, [r3, #32]
 800dff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dff2:	4313      	orrs	r3, r2
 800dff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	689a      	ldr	r2, [r3, #8]
 800dffc:	4bb2      	ldr	r3, [pc, #712]	; (800e2c8 <UART_SetConfig+0x350>)
 800dffe:	4013      	ands	r3, r2
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	6812      	ldr	r2, [r2, #0]
 800e004:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e006:	430b      	orrs	r3, r1
 800e008:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e010:	f023 010f 	bic.w	r1, r3, #15
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	430a      	orrs	r2, r1
 800e01e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4aa9      	ldr	r2, [pc, #676]	; (800e2cc <UART_SetConfig+0x354>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d177      	bne.n	800e11a <UART_SetConfig+0x1a2>
 800e02a:	4ba9      	ldr	r3, [pc, #676]	; (800e2d0 <UART_SetConfig+0x358>)
 800e02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e02e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e032:	2b28      	cmp	r3, #40	; 0x28
 800e034:	d86c      	bhi.n	800e110 <UART_SetConfig+0x198>
 800e036:	a201      	add	r2, pc, #4	; (adr r2, 800e03c <UART_SetConfig+0xc4>)
 800e038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e03c:	0800e0e1 	.word	0x0800e0e1
 800e040:	0800e111 	.word	0x0800e111
 800e044:	0800e111 	.word	0x0800e111
 800e048:	0800e111 	.word	0x0800e111
 800e04c:	0800e111 	.word	0x0800e111
 800e050:	0800e111 	.word	0x0800e111
 800e054:	0800e111 	.word	0x0800e111
 800e058:	0800e111 	.word	0x0800e111
 800e05c:	0800e0e9 	.word	0x0800e0e9
 800e060:	0800e111 	.word	0x0800e111
 800e064:	0800e111 	.word	0x0800e111
 800e068:	0800e111 	.word	0x0800e111
 800e06c:	0800e111 	.word	0x0800e111
 800e070:	0800e111 	.word	0x0800e111
 800e074:	0800e111 	.word	0x0800e111
 800e078:	0800e111 	.word	0x0800e111
 800e07c:	0800e0f1 	.word	0x0800e0f1
 800e080:	0800e111 	.word	0x0800e111
 800e084:	0800e111 	.word	0x0800e111
 800e088:	0800e111 	.word	0x0800e111
 800e08c:	0800e111 	.word	0x0800e111
 800e090:	0800e111 	.word	0x0800e111
 800e094:	0800e111 	.word	0x0800e111
 800e098:	0800e111 	.word	0x0800e111
 800e09c:	0800e0f9 	.word	0x0800e0f9
 800e0a0:	0800e111 	.word	0x0800e111
 800e0a4:	0800e111 	.word	0x0800e111
 800e0a8:	0800e111 	.word	0x0800e111
 800e0ac:	0800e111 	.word	0x0800e111
 800e0b0:	0800e111 	.word	0x0800e111
 800e0b4:	0800e111 	.word	0x0800e111
 800e0b8:	0800e111 	.word	0x0800e111
 800e0bc:	0800e101 	.word	0x0800e101
 800e0c0:	0800e111 	.word	0x0800e111
 800e0c4:	0800e111 	.word	0x0800e111
 800e0c8:	0800e111 	.word	0x0800e111
 800e0cc:	0800e111 	.word	0x0800e111
 800e0d0:	0800e111 	.word	0x0800e111
 800e0d4:	0800e111 	.word	0x0800e111
 800e0d8:	0800e111 	.word	0x0800e111
 800e0dc:	0800e109 	.word	0x0800e109
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e0e6:	e233      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e0e8:	2304      	movs	r3, #4
 800e0ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e0ee:	e22f      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e0f0:	2308      	movs	r3, #8
 800e0f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e0f6:	e22b      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e0f8:	2310      	movs	r3, #16
 800e0fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e0fe:	e227      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e100:	2320      	movs	r3, #32
 800e102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e106:	e223      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e108:	2340      	movs	r3, #64	; 0x40
 800e10a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e10e:	e21f      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e110:	2380      	movs	r3, #128	; 0x80
 800e112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e116:	bf00      	nop
 800e118:	e21a      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a6d      	ldr	r2, [pc, #436]	; (800e2d4 <UART_SetConfig+0x35c>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d132      	bne.n	800e18a <UART_SetConfig+0x212>
 800e124:	4b6a      	ldr	r3, [pc, #424]	; (800e2d0 <UART_SetConfig+0x358>)
 800e126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e128:	f003 0307 	and.w	r3, r3, #7
 800e12c:	2b05      	cmp	r3, #5
 800e12e:	d827      	bhi.n	800e180 <UART_SetConfig+0x208>
 800e130:	a201      	add	r2, pc, #4	; (adr r2, 800e138 <UART_SetConfig+0x1c0>)
 800e132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e136:	bf00      	nop
 800e138:	0800e151 	.word	0x0800e151
 800e13c:	0800e159 	.word	0x0800e159
 800e140:	0800e161 	.word	0x0800e161
 800e144:	0800e169 	.word	0x0800e169
 800e148:	0800e171 	.word	0x0800e171
 800e14c:	0800e179 	.word	0x0800e179
 800e150:	2300      	movs	r3, #0
 800e152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e156:	e1fb      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e158:	2304      	movs	r3, #4
 800e15a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e15e:	e1f7      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e160:	2308      	movs	r3, #8
 800e162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e166:	e1f3      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e168:	2310      	movs	r3, #16
 800e16a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e16e:	e1ef      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e170:	2320      	movs	r3, #32
 800e172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e176:	e1eb      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e178:	2340      	movs	r3, #64	; 0x40
 800e17a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e17e:	e1e7      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e180:	2380      	movs	r3, #128	; 0x80
 800e182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e186:	bf00      	nop
 800e188:	e1e2      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	4a52      	ldr	r2, [pc, #328]	; (800e2d8 <UART_SetConfig+0x360>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d132      	bne.n	800e1fa <UART_SetConfig+0x282>
 800e194:	4b4e      	ldr	r3, [pc, #312]	; (800e2d0 <UART_SetConfig+0x358>)
 800e196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e198:	f003 0307 	and.w	r3, r3, #7
 800e19c:	2b05      	cmp	r3, #5
 800e19e:	d827      	bhi.n	800e1f0 <UART_SetConfig+0x278>
 800e1a0:	a201      	add	r2, pc, #4	; (adr r2, 800e1a8 <UART_SetConfig+0x230>)
 800e1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a6:	bf00      	nop
 800e1a8:	0800e1c1 	.word	0x0800e1c1
 800e1ac:	0800e1c9 	.word	0x0800e1c9
 800e1b0:	0800e1d1 	.word	0x0800e1d1
 800e1b4:	0800e1d9 	.word	0x0800e1d9
 800e1b8:	0800e1e1 	.word	0x0800e1e1
 800e1bc:	0800e1e9 	.word	0x0800e1e9
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e1c6:	e1c3      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e1c8:	2304      	movs	r3, #4
 800e1ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e1ce:	e1bf      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e1d0:	2308      	movs	r3, #8
 800e1d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e1d6:	e1bb      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e1d8:	2310      	movs	r3, #16
 800e1da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e1de:	e1b7      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e1e0:	2320      	movs	r3, #32
 800e1e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e1e6:	e1b3      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e1e8:	2340      	movs	r3, #64	; 0x40
 800e1ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e1ee:	e1af      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e1f0:	2380      	movs	r3, #128	; 0x80
 800e1f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e1f6:	bf00      	nop
 800e1f8:	e1aa      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a37      	ldr	r2, [pc, #220]	; (800e2dc <UART_SetConfig+0x364>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d132      	bne.n	800e26a <UART_SetConfig+0x2f2>
 800e204:	4b32      	ldr	r3, [pc, #200]	; (800e2d0 <UART_SetConfig+0x358>)
 800e206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e208:	f003 0307 	and.w	r3, r3, #7
 800e20c:	2b05      	cmp	r3, #5
 800e20e:	d827      	bhi.n	800e260 <UART_SetConfig+0x2e8>
 800e210:	a201      	add	r2, pc, #4	; (adr r2, 800e218 <UART_SetConfig+0x2a0>)
 800e212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e216:	bf00      	nop
 800e218:	0800e231 	.word	0x0800e231
 800e21c:	0800e239 	.word	0x0800e239
 800e220:	0800e241 	.word	0x0800e241
 800e224:	0800e249 	.word	0x0800e249
 800e228:	0800e251 	.word	0x0800e251
 800e22c:	0800e259 	.word	0x0800e259
 800e230:	2300      	movs	r3, #0
 800e232:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e236:	e18b      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e238:	2304      	movs	r3, #4
 800e23a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e23e:	e187      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e240:	2308      	movs	r3, #8
 800e242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e246:	e183      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e248:	2310      	movs	r3, #16
 800e24a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e24e:	e17f      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e250:	2320      	movs	r3, #32
 800e252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e256:	e17b      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e258:	2340      	movs	r3, #64	; 0x40
 800e25a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e25e:	e177      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e260:	2380      	movs	r3, #128	; 0x80
 800e262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e266:	bf00      	nop
 800e268:	e172      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a1c      	ldr	r2, [pc, #112]	; (800e2e0 <UART_SetConfig+0x368>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d144      	bne.n	800e2fe <UART_SetConfig+0x386>
 800e274:	4b16      	ldr	r3, [pc, #88]	; (800e2d0 <UART_SetConfig+0x358>)
 800e276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e278:	f003 0307 	and.w	r3, r3, #7
 800e27c:	2b05      	cmp	r3, #5
 800e27e:	d839      	bhi.n	800e2f4 <UART_SetConfig+0x37c>
 800e280:	a201      	add	r2, pc, #4	; (adr r2, 800e288 <UART_SetConfig+0x310>)
 800e282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e286:	bf00      	nop
 800e288:	0800e2a1 	.word	0x0800e2a1
 800e28c:	0800e2a9 	.word	0x0800e2a9
 800e290:	0800e2b1 	.word	0x0800e2b1
 800e294:	0800e2b9 	.word	0x0800e2b9
 800e298:	0800e2e5 	.word	0x0800e2e5
 800e29c:	0800e2ed 	.word	0x0800e2ed
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e2a6:	e153      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e2a8:	2304      	movs	r3, #4
 800e2aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e2ae:	e14f      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e2b0:	2308      	movs	r3, #8
 800e2b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e2b6:	e14b      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e2b8:	2310      	movs	r3, #16
 800e2ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e2be:	e147      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e2c0:	cfff69f3 	.word	0xcfff69f3
 800e2c4:	58000c00 	.word	0x58000c00
 800e2c8:	11fff4ff 	.word	0x11fff4ff
 800e2cc:	40011000 	.word	0x40011000
 800e2d0:	58024400 	.word	0x58024400
 800e2d4:	40004400 	.word	0x40004400
 800e2d8:	40004800 	.word	0x40004800
 800e2dc:	40004c00 	.word	0x40004c00
 800e2e0:	40005000 	.word	0x40005000
 800e2e4:	2320      	movs	r3, #32
 800e2e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e2ea:	e131      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e2ec:	2340      	movs	r3, #64	; 0x40
 800e2ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e2f2:	e12d      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e2f4:	2380      	movs	r3, #128	; 0x80
 800e2f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e2fa:	bf00      	nop
 800e2fc:	e128      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4ac3      	ldr	r2, [pc, #780]	; (800e610 <UART_SetConfig+0x698>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d178      	bne.n	800e3fa <UART_SetConfig+0x482>
 800e308:	4bc2      	ldr	r3, [pc, #776]	; (800e614 <UART_SetConfig+0x69c>)
 800e30a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e30c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e310:	2b28      	cmp	r3, #40	; 0x28
 800e312:	d86d      	bhi.n	800e3f0 <UART_SetConfig+0x478>
 800e314:	a201      	add	r2, pc, #4	; (adr r2, 800e31c <UART_SetConfig+0x3a4>)
 800e316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e31a:	bf00      	nop
 800e31c:	0800e3c1 	.word	0x0800e3c1
 800e320:	0800e3f1 	.word	0x0800e3f1
 800e324:	0800e3f1 	.word	0x0800e3f1
 800e328:	0800e3f1 	.word	0x0800e3f1
 800e32c:	0800e3f1 	.word	0x0800e3f1
 800e330:	0800e3f1 	.word	0x0800e3f1
 800e334:	0800e3f1 	.word	0x0800e3f1
 800e338:	0800e3f1 	.word	0x0800e3f1
 800e33c:	0800e3c9 	.word	0x0800e3c9
 800e340:	0800e3f1 	.word	0x0800e3f1
 800e344:	0800e3f1 	.word	0x0800e3f1
 800e348:	0800e3f1 	.word	0x0800e3f1
 800e34c:	0800e3f1 	.word	0x0800e3f1
 800e350:	0800e3f1 	.word	0x0800e3f1
 800e354:	0800e3f1 	.word	0x0800e3f1
 800e358:	0800e3f1 	.word	0x0800e3f1
 800e35c:	0800e3d1 	.word	0x0800e3d1
 800e360:	0800e3f1 	.word	0x0800e3f1
 800e364:	0800e3f1 	.word	0x0800e3f1
 800e368:	0800e3f1 	.word	0x0800e3f1
 800e36c:	0800e3f1 	.word	0x0800e3f1
 800e370:	0800e3f1 	.word	0x0800e3f1
 800e374:	0800e3f1 	.word	0x0800e3f1
 800e378:	0800e3f1 	.word	0x0800e3f1
 800e37c:	0800e3d9 	.word	0x0800e3d9
 800e380:	0800e3f1 	.word	0x0800e3f1
 800e384:	0800e3f1 	.word	0x0800e3f1
 800e388:	0800e3f1 	.word	0x0800e3f1
 800e38c:	0800e3f1 	.word	0x0800e3f1
 800e390:	0800e3f1 	.word	0x0800e3f1
 800e394:	0800e3f1 	.word	0x0800e3f1
 800e398:	0800e3f1 	.word	0x0800e3f1
 800e39c:	0800e3e1 	.word	0x0800e3e1
 800e3a0:	0800e3f1 	.word	0x0800e3f1
 800e3a4:	0800e3f1 	.word	0x0800e3f1
 800e3a8:	0800e3f1 	.word	0x0800e3f1
 800e3ac:	0800e3f1 	.word	0x0800e3f1
 800e3b0:	0800e3f1 	.word	0x0800e3f1
 800e3b4:	0800e3f1 	.word	0x0800e3f1
 800e3b8:	0800e3f1 	.word	0x0800e3f1
 800e3bc:	0800e3e9 	.word	0x0800e3e9
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e3c6:	e0c3      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e3c8:	2304      	movs	r3, #4
 800e3ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e3ce:	e0bf      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e3d0:	2308      	movs	r3, #8
 800e3d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e3d6:	e0bb      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e3d8:	2310      	movs	r3, #16
 800e3da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e3de:	e0b7      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e3e0:	2320      	movs	r3, #32
 800e3e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e3e6:	e0b3      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e3e8:	2340      	movs	r3, #64	; 0x40
 800e3ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e3ee:	e0af      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e3f0:	2380      	movs	r3, #128	; 0x80
 800e3f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e3f6:	bf00      	nop
 800e3f8:	e0aa      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4a86      	ldr	r2, [pc, #536]	; (800e618 <UART_SetConfig+0x6a0>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d132      	bne.n	800e46a <UART_SetConfig+0x4f2>
 800e404:	4b83      	ldr	r3, [pc, #524]	; (800e614 <UART_SetConfig+0x69c>)
 800e406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e408:	f003 0307 	and.w	r3, r3, #7
 800e40c:	2b05      	cmp	r3, #5
 800e40e:	d827      	bhi.n	800e460 <UART_SetConfig+0x4e8>
 800e410:	a201      	add	r2, pc, #4	; (adr r2, 800e418 <UART_SetConfig+0x4a0>)
 800e412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e416:	bf00      	nop
 800e418:	0800e431 	.word	0x0800e431
 800e41c:	0800e439 	.word	0x0800e439
 800e420:	0800e441 	.word	0x0800e441
 800e424:	0800e449 	.word	0x0800e449
 800e428:	0800e451 	.word	0x0800e451
 800e42c:	0800e459 	.word	0x0800e459
 800e430:	2300      	movs	r3, #0
 800e432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e436:	e08b      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e438:	2304      	movs	r3, #4
 800e43a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e43e:	e087      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e440:	2308      	movs	r3, #8
 800e442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e446:	e083      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e448:	2310      	movs	r3, #16
 800e44a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e44e:	e07f      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e450:	2320      	movs	r3, #32
 800e452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e456:	e07b      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e458:	2340      	movs	r3, #64	; 0x40
 800e45a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e45e:	e077      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e460:	2380      	movs	r3, #128	; 0x80
 800e462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e466:	bf00      	nop
 800e468:	e072      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a6b      	ldr	r2, [pc, #428]	; (800e61c <UART_SetConfig+0x6a4>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d132      	bne.n	800e4da <UART_SetConfig+0x562>
 800e474:	4b67      	ldr	r3, [pc, #412]	; (800e614 <UART_SetConfig+0x69c>)
 800e476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e478:	f003 0307 	and.w	r3, r3, #7
 800e47c:	2b05      	cmp	r3, #5
 800e47e:	d827      	bhi.n	800e4d0 <UART_SetConfig+0x558>
 800e480:	a201      	add	r2, pc, #4	; (adr r2, 800e488 <UART_SetConfig+0x510>)
 800e482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e486:	bf00      	nop
 800e488:	0800e4a1 	.word	0x0800e4a1
 800e48c:	0800e4a9 	.word	0x0800e4a9
 800e490:	0800e4b1 	.word	0x0800e4b1
 800e494:	0800e4b9 	.word	0x0800e4b9
 800e498:	0800e4c1 	.word	0x0800e4c1
 800e49c:	0800e4c9 	.word	0x0800e4c9
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e4a6:	e053      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e4a8:	2304      	movs	r3, #4
 800e4aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e4ae:	e04f      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e4b0:	2308      	movs	r3, #8
 800e4b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e4b6:	e04b      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e4b8:	2310      	movs	r3, #16
 800e4ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e4be:	e047      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e4c0:	2320      	movs	r3, #32
 800e4c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e4c6:	e043      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e4c8:	2340      	movs	r3, #64	; 0x40
 800e4ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e4ce:	e03f      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e4d0:	2380      	movs	r3, #128	; 0x80
 800e4d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e4d6:	bf00      	nop
 800e4d8:	e03a      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a50      	ldr	r2, [pc, #320]	; (800e620 <UART_SetConfig+0x6a8>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d132      	bne.n	800e54a <UART_SetConfig+0x5d2>
 800e4e4:	4b4b      	ldr	r3, [pc, #300]	; (800e614 <UART_SetConfig+0x69c>)
 800e4e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4e8:	f003 0307 	and.w	r3, r3, #7
 800e4ec:	2b05      	cmp	r3, #5
 800e4ee:	d827      	bhi.n	800e540 <UART_SetConfig+0x5c8>
 800e4f0:	a201      	add	r2, pc, #4	; (adr r2, 800e4f8 <UART_SetConfig+0x580>)
 800e4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f6:	bf00      	nop
 800e4f8:	0800e511 	.word	0x0800e511
 800e4fc:	0800e519 	.word	0x0800e519
 800e500:	0800e521 	.word	0x0800e521
 800e504:	0800e529 	.word	0x0800e529
 800e508:	0800e531 	.word	0x0800e531
 800e50c:	0800e539 	.word	0x0800e539
 800e510:	2302      	movs	r3, #2
 800e512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e516:	e01b      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e518:	2304      	movs	r3, #4
 800e51a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e51e:	e017      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e520:	2308      	movs	r3, #8
 800e522:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e526:	e013      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e528:	2310      	movs	r3, #16
 800e52a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e52e:	e00f      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e530:	2320      	movs	r3, #32
 800e532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e536:	e00b      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e538:	2340      	movs	r3, #64	; 0x40
 800e53a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e53e:	e007      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e540:	2380      	movs	r3, #128	; 0x80
 800e542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e546:	bf00      	nop
 800e548:	e002      	b.n	800e550 <UART_SetConfig+0x5d8>
 800e54a:	2380      	movs	r3, #128	; 0x80
 800e54c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a32      	ldr	r2, [pc, #200]	; (800e620 <UART_SetConfig+0x6a8>)
 800e556:	4293      	cmp	r3, r2
 800e558:	f040 86f7 	bne.w	800f34a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e55c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e560:	2b08      	cmp	r3, #8
 800e562:	f000 80c0 	beq.w	800e6e6 <UART_SetConfig+0x76e>
 800e566:	2b08      	cmp	r3, #8
 800e568:	dc04      	bgt.n	800e574 <UART_SetConfig+0x5fc>
 800e56a:	2b02      	cmp	r3, #2
 800e56c:	d00c      	beq.n	800e588 <UART_SetConfig+0x610>
 800e56e:	2b04      	cmp	r3, #4
 800e570:	d065      	beq.n	800e63e <UART_SetConfig+0x6c6>
 800e572:	e27a      	b.n	800ea6a <UART_SetConfig+0xaf2>
 800e574:	2b20      	cmp	r3, #32
 800e576:	f000 81b0 	beq.w	800e8da <UART_SetConfig+0x962>
 800e57a:	2b40      	cmp	r3, #64	; 0x40
 800e57c:	f000 821e 	beq.w	800e9bc <UART_SetConfig+0xa44>
 800e580:	2b10      	cmp	r3, #16
 800e582:	f000 8104 	beq.w	800e78e <UART_SetConfig+0x816>
 800e586:	e270      	b.n	800ea6a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e588:	f7fc fbae 	bl	800ace8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e58c:	4602      	mov	r2, r0
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e592:	2b00      	cmp	r3, #0
 800e594:	d04e      	beq.n	800e634 <UART_SetConfig+0x6bc>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d048      	beq.n	800e630 <UART_SetConfig+0x6b8>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a2:	2b02      	cmp	r3, #2
 800e5a4:	d042      	beq.n	800e62c <UART_SetConfig+0x6b4>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5aa:	2b03      	cmp	r3, #3
 800e5ac:	d03c      	beq.n	800e628 <UART_SetConfig+0x6b0>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b2:	2b04      	cmp	r3, #4
 800e5b4:	d036      	beq.n	800e624 <UART_SetConfig+0x6ac>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ba:	2b05      	cmp	r3, #5
 800e5bc:	d026      	beq.n	800e60c <UART_SetConfig+0x694>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c2:	2b06      	cmp	r3, #6
 800e5c4:	d020      	beq.n	800e608 <UART_SetConfig+0x690>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ca:	2b07      	cmp	r3, #7
 800e5cc:	d01a      	beq.n	800e604 <UART_SetConfig+0x68c>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d2:	2b08      	cmp	r3, #8
 800e5d4:	d014      	beq.n	800e600 <UART_SetConfig+0x688>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5da:	2b09      	cmp	r3, #9
 800e5dc:	d00e      	beq.n	800e5fc <UART_SetConfig+0x684>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e2:	2b0a      	cmp	r3, #10
 800e5e4:	d008      	beq.n	800e5f8 <UART_SetConfig+0x680>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ea:	2b0b      	cmp	r3, #11
 800e5ec:	d102      	bne.n	800e5f4 <UART_SetConfig+0x67c>
 800e5ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5f2:	e020      	b.n	800e636 <UART_SetConfig+0x6be>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e01e      	b.n	800e636 <UART_SetConfig+0x6be>
 800e5f8:	2380      	movs	r3, #128	; 0x80
 800e5fa:	e01c      	b.n	800e636 <UART_SetConfig+0x6be>
 800e5fc:	2340      	movs	r3, #64	; 0x40
 800e5fe:	e01a      	b.n	800e636 <UART_SetConfig+0x6be>
 800e600:	2320      	movs	r3, #32
 800e602:	e018      	b.n	800e636 <UART_SetConfig+0x6be>
 800e604:	2310      	movs	r3, #16
 800e606:	e016      	b.n	800e636 <UART_SetConfig+0x6be>
 800e608:	230c      	movs	r3, #12
 800e60a:	e014      	b.n	800e636 <UART_SetConfig+0x6be>
 800e60c:	230a      	movs	r3, #10
 800e60e:	e012      	b.n	800e636 <UART_SetConfig+0x6be>
 800e610:	40011400 	.word	0x40011400
 800e614:	58024400 	.word	0x58024400
 800e618:	40007800 	.word	0x40007800
 800e61c:	40007c00 	.word	0x40007c00
 800e620:	58000c00 	.word	0x58000c00
 800e624:	2308      	movs	r3, #8
 800e626:	e006      	b.n	800e636 <UART_SetConfig+0x6be>
 800e628:	2306      	movs	r3, #6
 800e62a:	e004      	b.n	800e636 <UART_SetConfig+0x6be>
 800e62c:	2304      	movs	r3, #4
 800e62e:	e002      	b.n	800e636 <UART_SetConfig+0x6be>
 800e630:	2302      	movs	r3, #2
 800e632:	e000      	b.n	800e636 <UART_SetConfig+0x6be>
 800e634:	2301      	movs	r3, #1
 800e636:	fbb2 f3f3 	udiv	r3, r2, r3
 800e63a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e63c:	e219      	b.n	800ea72 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e63e:	f107 0318 	add.w	r3, r7, #24
 800e642:	4618      	mov	r0, r3
 800e644:	f7fc fb66 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e648:	69fa      	ldr	r2, [r7, #28]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d044      	beq.n	800e6dc <UART_SetConfig+0x764>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e656:	2b01      	cmp	r3, #1
 800e658:	d03e      	beq.n	800e6d8 <UART_SetConfig+0x760>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d038      	beq.n	800e6d4 <UART_SetConfig+0x75c>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e666:	2b03      	cmp	r3, #3
 800e668:	d032      	beq.n	800e6d0 <UART_SetConfig+0x758>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e66e:	2b04      	cmp	r3, #4
 800e670:	d02c      	beq.n	800e6cc <UART_SetConfig+0x754>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e676:	2b05      	cmp	r3, #5
 800e678:	d026      	beq.n	800e6c8 <UART_SetConfig+0x750>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67e:	2b06      	cmp	r3, #6
 800e680:	d020      	beq.n	800e6c4 <UART_SetConfig+0x74c>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e686:	2b07      	cmp	r3, #7
 800e688:	d01a      	beq.n	800e6c0 <UART_SetConfig+0x748>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e68e:	2b08      	cmp	r3, #8
 800e690:	d014      	beq.n	800e6bc <UART_SetConfig+0x744>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e696:	2b09      	cmp	r3, #9
 800e698:	d00e      	beq.n	800e6b8 <UART_SetConfig+0x740>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e69e:	2b0a      	cmp	r3, #10
 800e6a0:	d008      	beq.n	800e6b4 <UART_SetConfig+0x73c>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a6:	2b0b      	cmp	r3, #11
 800e6a8:	d102      	bne.n	800e6b0 <UART_SetConfig+0x738>
 800e6aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6ae:	e016      	b.n	800e6de <UART_SetConfig+0x766>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e014      	b.n	800e6de <UART_SetConfig+0x766>
 800e6b4:	2380      	movs	r3, #128	; 0x80
 800e6b6:	e012      	b.n	800e6de <UART_SetConfig+0x766>
 800e6b8:	2340      	movs	r3, #64	; 0x40
 800e6ba:	e010      	b.n	800e6de <UART_SetConfig+0x766>
 800e6bc:	2320      	movs	r3, #32
 800e6be:	e00e      	b.n	800e6de <UART_SetConfig+0x766>
 800e6c0:	2310      	movs	r3, #16
 800e6c2:	e00c      	b.n	800e6de <UART_SetConfig+0x766>
 800e6c4:	230c      	movs	r3, #12
 800e6c6:	e00a      	b.n	800e6de <UART_SetConfig+0x766>
 800e6c8:	230a      	movs	r3, #10
 800e6ca:	e008      	b.n	800e6de <UART_SetConfig+0x766>
 800e6cc:	2308      	movs	r3, #8
 800e6ce:	e006      	b.n	800e6de <UART_SetConfig+0x766>
 800e6d0:	2306      	movs	r3, #6
 800e6d2:	e004      	b.n	800e6de <UART_SetConfig+0x766>
 800e6d4:	2304      	movs	r3, #4
 800e6d6:	e002      	b.n	800e6de <UART_SetConfig+0x766>
 800e6d8:	2302      	movs	r3, #2
 800e6da:	e000      	b.n	800e6de <UART_SetConfig+0x766>
 800e6dc:	2301      	movs	r3, #1
 800e6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e6e4:	e1c5      	b.n	800ea72 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6e6:	f107 030c 	add.w	r3, r7, #12
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fc fc5e 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e6f0:	693a      	ldr	r2, [r7, #16]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d044      	beq.n	800e784 <UART_SetConfig+0x80c>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d03e      	beq.n	800e780 <UART_SetConfig+0x808>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e706:	2b02      	cmp	r3, #2
 800e708:	d038      	beq.n	800e77c <UART_SetConfig+0x804>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70e:	2b03      	cmp	r3, #3
 800e710:	d032      	beq.n	800e778 <UART_SetConfig+0x800>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e716:	2b04      	cmp	r3, #4
 800e718:	d02c      	beq.n	800e774 <UART_SetConfig+0x7fc>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e71e:	2b05      	cmp	r3, #5
 800e720:	d026      	beq.n	800e770 <UART_SetConfig+0x7f8>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e726:	2b06      	cmp	r3, #6
 800e728:	d020      	beq.n	800e76c <UART_SetConfig+0x7f4>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e72e:	2b07      	cmp	r3, #7
 800e730:	d01a      	beq.n	800e768 <UART_SetConfig+0x7f0>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e736:	2b08      	cmp	r3, #8
 800e738:	d014      	beq.n	800e764 <UART_SetConfig+0x7ec>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73e:	2b09      	cmp	r3, #9
 800e740:	d00e      	beq.n	800e760 <UART_SetConfig+0x7e8>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e746:	2b0a      	cmp	r3, #10
 800e748:	d008      	beq.n	800e75c <UART_SetConfig+0x7e4>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74e:	2b0b      	cmp	r3, #11
 800e750:	d102      	bne.n	800e758 <UART_SetConfig+0x7e0>
 800e752:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e756:	e016      	b.n	800e786 <UART_SetConfig+0x80e>
 800e758:	2301      	movs	r3, #1
 800e75a:	e014      	b.n	800e786 <UART_SetConfig+0x80e>
 800e75c:	2380      	movs	r3, #128	; 0x80
 800e75e:	e012      	b.n	800e786 <UART_SetConfig+0x80e>
 800e760:	2340      	movs	r3, #64	; 0x40
 800e762:	e010      	b.n	800e786 <UART_SetConfig+0x80e>
 800e764:	2320      	movs	r3, #32
 800e766:	e00e      	b.n	800e786 <UART_SetConfig+0x80e>
 800e768:	2310      	movs	r3, #16
 800e76a:	e00c      	b.n	800e786 <UART_SetConfig+0x80e>
 800e76c:	230c      	movs	r3, #12
 800e76e:	e00a      	b.n	800e786 <UART_SetConfig+0x80e>
 800e770:	230a      	movs	r3, #10
 800e772:	e008      	b.n	800e786 <UART_SetConfig+0x80e>
 800e774:	2308      	movs	r3, #8
 800e776:	e006      	b.n	800e786 <UART_SetConfig+0x80e>
 800e778:	2306      	movs	r3, #6
 800e77a:	e004      	b.n	800e786 <UART_SetConfig+0x80e>
 800e77c:	2304      	movs	r3, #4
 800e77e:	e002      	b.n	800e786 <UART_SetConfig+0x80e>
 800e780:	2302      	movs	r3, #2
 800e782:	e000      	b.n	800e786 <UART_SetConfig+0x80e>
 800e784:	2301      	movs	r3, #1
 800e786:	fbb2 f3f3 	udiv	r3, r2, r3
 800e78a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e78c:	e171      	b.n	800ea72 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e78e:	4b7a      	ldr	r3, [pc, #488]	; (800e978 <UART_SetConfig+0xa00>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f003 0320 	and.w	r3, r3, #32
 800e796:	2b00      	cmp	r3, #0
 800e798:	d054      	beq.n	800e844 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e79a:	4b77      	ldr	r3, [pc, #476]	; (800e978 <UART_SetConfig+0xa00>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	08db      	lsrs	r3, r3, #3
 800e7a0:	f003 0303 	and.w	r3, r3, #3
 800e7a4:	4a75      	ldr	r2, [pc, #468]	; (800e97c <UART_SetConfig+0xa04>)
 800e7a6:	40da      	lsrs	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d044      	beq.n	800e83a <UART_SetConfig+0x8c2>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d03e      	beq.n	800e836 <UART_SetConfig+0x8be>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7bc:	2b02      	cmp	r3, #2
 800e7be:	d038      	beq.n	800e832 <UART_SetConfig+0x8ba>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c4:	2b03      	cmp	r3, #3
 800e7c6:	d032      	beq.n	800e82e <UART_SetConfig+0x8b6>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7cc:	2b04      	cmp	r3, #4
 800e7ce:	d02c      	beq.n	800e82a <UART_SetConfig+0x8b2>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d4:	2b05      	cmp	r3, #5
 800e7d6:	d026      	beq.n	800e826 <UART_SetConfig+0x8ae>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7dc:	2b06      	cmp	r3, #6
 800e7de:	d020      	beq.n	800e822 <UART_SetConfig+0x8aa>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e4:	2b07      	cmp	r3, #7
 800e7e6:	d01a      	beq.n	800e81e <UART_SetConfig+0x8a6>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ec:	2b08      	cmp	r3, #8
 800e7ee:	d014      	beq.n	800e81a <UART_SetConfig+0x8a2>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f4:	2b09      	cmp	r3, #9
 800e7f6:	d00e      	beq.n	800e816 <UART_SetConfig+0x89e>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7fc:	2b0a      	cmp	r3, #10
 800e7fe:	d008      	beq.n	800e812 <UART_SetConfig+0x89a>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e804:	2b0b      	cmp	r3, #11
 800e806:	d102      	bne.n	800e80e <UART_SetConfig+0x896>
 800e808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e80c:	e016      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e80e:	2301      	movs	r3, #1
 800e810:	e014      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e812:	2380      	movs	r3, #128	; 0x80
 800e814:	e012      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e816:	2340      	movs	r3, #64	; 0x40
 800e818:	e010      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e81a:	2320      	movs	r3, #32
 800e81c:	e00e      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e81e:	2310      	movs	r3, #16
 800e820:	e00c      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e822:	230c      	movs	r3, #12
 800e824:	e00a      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e826:	230a      	movs	r3, #10
 800e828:	e008      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e82a:	2308      	movs	r3, #8
 800e82c:	e006      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e82e:	2306      	movs	r3, #6
 800e830:	e004      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e832:	2304      	movs	r3, #4
 800e834:	e002      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e836:	2302      	movs	r3, #2
 800e838:	e000      	b.n	800e83c <UART_SetConfig+0x8c4>
 800e83a:	2301      	movs	r3, #1
 800e83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e840:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800e842:	e116      	b.n	800ea72 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d043      	beq.n	800e8d4 <UART_SetConfig+0x95c>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e850:	2b01      	cmp	r3, #1
 800e852:	d03d      	beq.n	800e8d0 <UART_SetConfig+0x958>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d037      	beq.n	800e8cc <UART_SetConfig+0x954>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e860:	2b03      	cmp	r3, #3
 800e862:	d031      	beq.n	800e8c8 <UART_SetConfig+0x950>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e868:	2b04      	cmp	r3, #4
 800e86a:	d02b      	beq.n	800e8c4 <UART_SetConfig+0x94c>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e870:	2b05      	cmp	r3, #5
 800e872:	d025      	beq.n	800e8c0 <UART_SetConfig+0x948>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e878:	2b06      	cmp	r3, #6
 800e87a:	d01f      	beq.n	800e8bc <UART_SetConfig+0x944>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e880:	2b07      	cmp	r3, #7
 800e882:	d019      	beq.n	800e8b8 <UART_SetConfig+0x940>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e888:	2b08      	cmp	r3, #8
 800e88a:	d013      	beq.n	800e8b4 <UART_SetConfig+0x93c>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e890:	2b09      	cmp	r3, #9
 800e892:	d00d      	beq.n	800e8b0 <UART_SetConfig+0x938>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e898:	2b0a      	cmp	r3, #10
 800e89a:	d007      	beq.n	800e8ac <UART_SetConfig+0x934>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a0:	2b0b      	cmp	r3, #11
 800e8a2:	d101      	bne.n	800e8a8 <UART_SetConfig+0x930>
 800e8a4:	4b36      	ldr	r3, [pc, #216]	; (800e980 <UART_SetConfig+0xa08>)
 800e8a6:	e016      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8a8:	4b34      	ldr	r3, [pc, #208]	; (800e97c <UART_SetConfig+0xa04>)
 800e8aa:	e014      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8ac:	4b35      	ldr	r3, [pc, #212]	; (800e984 <UART_SetConfig+0xa0c>)
 800e8ae:	e012      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8b0:	4b35      	ldr	r3, [pc, #212]	; (800e988 <UART_SetConfig+0xa10>)
 800e8b2:	e010      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8b4:	4b35      	ldr	r3, [pc, #212]	; (800e98c <UART_SetConfig+0xa14>)
 800e8b6:	e00e      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8b8:	4b35      	ldr	r3, [pc, #212]	; (800e990 <UART_SetConfig+0xa18>)
 800e8ba:	e00c      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8bc:	4b35      	ldr	r3, [pc, #212]	; (800e994 <UART_SetConfig+0xa1c>)
 800e8be:	e00a      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8c0:	4b35      	ldr	r3, [pc, #212]	; (800e998 <UART_SetConfig+0xa20>)
 800e8c2:	e008      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8c4:	4b35      	ldr	r3, [pc, #212]	; (800e99c <UART_SetConfig+0xa24>)
 800e8c6:	e006      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8c8:	4b35      	ldr	r3, [pc, #212]	; (800e9a0 <UART_SetConfig+0xa28>)
 800e8ca:	e004      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8cc:	4b35      	ldr	r3, [pc, #212]	; (800e9a4 <UART_SetConfig+0xa2c>)
 800e8ce:	e002      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8d0:	4b35      	ldr	r3, [pc, #212]	; (800e9a8 <UART_SetConfig+0xa30>)
 800e8d2:	e000      	b.n	800e8d6 <UART_SetConfig+0x95e>
 800e8d4:	4b29      	ldr	r3, [pc, #164]	; (800e97c <UART_SetConfig+0xa04>)
 800e8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e8d8:	e0cb      	b.n	800ea72 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d046      	beq.n	800e970 <UART_SetConfig+0x9f8>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d040      	beq.n	800e96c <UART_SetConfig+0x9f4>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ee:	2b02      	cmp	r3, #2
 800e8f0:	d03a      	beq.n	800e968 <UART_SetConfig+0x9f0>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f6:	2b03      	cmp	r3, #3
 800e8f8:	d034      	beq.n	800e964 <UART_SetConfig+0x9ec>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8fe:	2b04      	cmp	r3, #4
 800e900:	d02e      	beq.n	800e960 <UART_SetConfig+0x9e8>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e906:	2b05      	cmp	r3, #5
 800e908:	d028      	beq.n	800e95c <UART_SetConfig+0x9e4>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90e:	2b06      	cmp	r3, #6
 800e910:	d022      	beq.n	800e958 <UART_SetConfig+0x9e0>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e916:	2b07      	cmp	r3, #7
 800e918:	d01c      	beq.n	800e954 <UART_SetConfig+0x9dc>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e91e:	2b08      	cmp	r3, #8
 800e920:	d016      	beq.n	800e950 <UART_SetConfig+0x9d8>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e926:	2b09      	cmp	r3, #9
 800e928:	d00f      	beq.n	800e94a <UART_SetConfig+0x9d2>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e92e:	2b0a      	cmp	r3, #10
 800e930:	d008      	beq.n	800e944 <UART_SetConfig+0x9cc>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e936:	2b0b      	cmp	r3, #11
 800e938:	d102      	bne.n	800e940 <UART_SetConfig+0x9c8>
 800e93a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e93e:	e018      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e940:	4b13      	ldr	r3, [pc, #76]	; (800e990 <UART_SetConfig+0xa18>)
 800e942:	e016      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e944:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e948:	e013      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e94a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e94e:	e010      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e950:	4b16      	ldr	r3, [pc, #88]	; (800e9ac <UART_SetConfig+0xa34>)
 800e952:	e00e      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e954:	4b0a      	ldr	r3, [pc, #40]	; (800e980 <UART_SetConfig+0xa08>)
 800e956:	e00c      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e958:	4b15      	ldr	r3, [pc, #84]	; (800e9b0 <UART_SetConfig+0xa38>)
 800e95a:	e00a      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e95c:	4b15      	ldr	r3, [pc, #84]	; (800e9b4 <UART_SetConfig+0xa3c>)
 800e95e:	e008      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e960:	4b08      	ldr	r3, [pc, #32]	; (800e984 <UART_SetConfig+0xa0c>)
 800e962:	e006      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e964:	4b14      	ldr	r3, [pc, #80]	; (800e9b8 <UART_SetConfig+0xa40>)
 800e966:	e004      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e968:	4b07      	ldr	r3, [pc, #28]	; (800e988 <UART_SetConfig+0xa10>)
 800e96a:	e002      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e96c:	4b07      	ldr	r3, [pc, #28]	; (800e98c <UART_SetConfig+0xa14>)
 800e96e:	e000      	b.n	800e972 <UART_SetConfig+0x9fa>
 800e970:	4b07      	ldr	r3, [pc, #28]	; (800e990 <UART_SetConfig+0xa18>)
 800e972:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e974:	e07d      	b.n	800ea72 <UART_SetConfig+0xafa>
 800e976:	bf00      	nop
 800e978:	58024400 	.word	0x58024400
 800e97c:	03d09000 	.word	0x03d09000
 800e980:	0003d090 	.word	0x0003d090
 800e984:	0007a120 	.word	0x0007a120
 800e988:	000f4240 	.word	0x000f4240
 800e98c:	001e8480 	.word	0x001e8480
 800e990:	003d0900 	.word	0x003d0900
 800e994:	00516155 	.word	0x00516155
 800e998:	0061a800 	.word	0x0061a800
 800e99c:	007a1200 	.word	0x007a1200
 800e9a0:	00a2c2aa 	.word	0x00a2c2aa
 800e9a4:	00f42400 	.word	0x00f42400
 800e9a8:	01e84800 	.word	0x01e84800
 800e9ac:	0001e848 	.word	0x0001e848
 800e9b0:	00051615 	.word	0x00051615
 800e9b4:	00061a80 	.word	0x00061a80
 800e9b8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d04e      	beq.n	800ea62 <UART_SetConfig+0xaea>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d047      	beq.n	800ea5c <UART_SetConfig+0xae4>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d0:	2b02      	cmp	r3, #2
 800e9d2:	d040      	beq.n	800ea56 <UART_SetConfig+0xade>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d8:	2b03      	cmp	r3, #3
 800e9da:	d039      	beq.n	800ea50 <UART_SetConfig+0xad8>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e0:	2b04      	cmp	r3, #4
 800e9e2:	d032      	beq.n	800ea4a <UART_SetConfig+0xad2>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e8:	2b05      	cmp	r3, #5
 800e9ea:	d02b      	beq.n	800ea44 <UART_SetConfig+0xacc>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f0:	2b06      	cmp	r3, #6
 800e9f2:	d024      	beq.n	800ea3e <UART_SetConfig+0xac6>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f8:	2b07      	cmp	r3, #7
 800e9fa:	d01d      	beq.n	800ea38 <UART_SetConfig+0xac0>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea00:	2b08      	cmp	r3, #8
 800ea02:	d016      	beq.n	800ea32 <UART_SetConfig+0xaba>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea08:	2b09      	cmp	r3, #9
 800ea0a:	d00f      	beq.n	800ea2c <UART_SetConfig+0xab4>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea10:	2b0a      	cmp	r3, #10
 800ea12:	d008      	beq.n	800ea26 <UART_SetConfig+0xaae>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea18:	2b0b      	cmp	r3, #11
 800ea1a:	d101      	bne.n	800ea20 <UART_SetConfig+0xaa8>
 800ea1c:	2380      	movs	r3, #128	; 0x80
 800ea1e:	e022      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea24:	e01f      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea2a:	e01c      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea30:	e019      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea36:	e016      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea3c:	e013      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea3e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ea42:	e010      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea44:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ea48:	e00d      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea4e:	e00a      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea50:	f241 5355 	movw	r3, #5461	; 0x1555
 800ea54:	e007      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea5a:	e004      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ea60:	e001      	b.n	800ea66 <UART_SetConfig+0xaee>
 800ea62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea68:	e003      	b.n	800ea72 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ea70:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800ea72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f001 83e8 	beq.w	801024a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	685a      	ldr	r2, [r3, #4]
 800ea7e:	4613      	mov	r3, r2
 800ea80:	005b      	lsls	r3, r3, #1
 800ea82:	4413      	add	r3, r2
 800ea84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d305      	bcc.n	800ea96 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d904      	bls.n	800eaa0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800ea96:	2301      	movs	r3, #1
 800ea98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea9c:	f001 bbd5 	b.w	801024a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800eaa0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800eaa4:	2b08      	cmp	r3, #8
 800eaa6:	f000 8154 	beq.w	800ed52 <UART_SetConfig+0xdda>
 800eaaa:	2b08      	cmp	r3, #8
 800eaac:	dc06      	bgt.n	800eabc <UART_SetConfig+0xb44>
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	d00f      	beq.n	800ead2 <UART_SetConfig+0xb5a>
 800eab2:	2b04      	cmp	r3, #4
 800eab4:	f000 80ac 	beq.w	800ec10 <UART_SetConfig+0xc98>
 800eab8:	f000 bc30 	b.w	800f31c <UART_SetConfig+0x13a4>
 800eabc:	2b20      	cmp	r3, #32
 800eabe:	f000 832d 	beq.w	800f11c <UART_SetConfig+0x11a4>
 800eac2:	2b40      	cmp	r3, #64	; 0x40
 800eac4:	f000 83a5 	beq.w	800f212 <UART_SetConfig+0x129a>
 800eac8:	2b10      	cmp	r3, #16
 800eaca:	f000 81e3 	beq.w	800ee94 <UART_SetConfig+0xf1c>
 800eace:	f000 bc25 	b.w	800f31c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ead2:	f7fc f909 	bl	800ace8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ead6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ead8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eada:	4618      	mov	r0, r3
 800eadc:	f04f 0100 	mov.w	r1, #0
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d067      	beq.n	800ebb8 <UART_SetConfig+0xc40>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d05e      	beq.n	800ebae <UART_SetConfig+0xc36>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf4:	2b02      	cmp	r3, #2
 800eaf6:	d055      	beq.n	800eba4 <UART_SetConfig+0xc2c>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafc:	2b03      	cmp	r3, #3
 800eafe:	d04c      	beq.n	800eb9a <UART_SetConfig+0xc22>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb04:	2b04      	cmp	r3, #4
 800eb06:	d043      	beq.n	800eb90 <UART_SetConfig+0xc18>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb0c:	2b05      	cmp	r3, #5
 800eb0e:	d03a      	beq.n	800eb86 <UART_SetConfig+0xc0e>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb14:	2b06      	cmp	r3, #6
 800eb16:	d031      	beq.n	800eb7c <UART_SetConfig+0xc04>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1c:	2b07      	cmp	r3, #7
 800eb1e:	d028      	beq.n	800eb72 <UART_SetConfig+0xbfa>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb24:	2b08      	cmp	r3, #8
 800eb26:	d01f      	beq.n	800eb68 <UART_SetConfig+0xbf0>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2c:	2b09      	cmp	r3, #9
 800eb2e:	d016      	beq.n	800eb5e <UART_SetConfig+0xbe6>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb34:	2b0a      	cmp	r3, #10
 800eb36:	d00d      	beq.n	800eb54 <UART_SetConfig+0xbdc>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb3c:	2b0b      	cmp	r3, #11
 800eb3e:	d104      	bne.n	800eb4a <UART_SetConfig+0xbd2>
 800eb40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb44:	f04f 0400 	mov.w	r4, #0
 800eb48:	e03a      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800eb4a:	f04f 0301 	mov.w	r3, #1
 800eb4e:	f04f 0400 	mov.w	r4, #0
 800eb52:	e035      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800eb54:	f04f 0380 	mov.w	r3, #128	; 0x80
 800eb58:	f04f 0400 	mov.w	r4, #0
 800eb5c:	e030      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800eb5e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800eb62:	f04f 0400 	mov.w	r4, #0
 800eb66:	e02b      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800eb68:	f04f 0320 	mov.w	r3, #32
 800eb6c:	f04f 0400 	mov.w	r4, #0
 800eb70:	e026      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800eb72:	f04f 0310 	mov.w	r3, #16
 800eb76:	f04f 0400 	mov.w	r4, #0
 800eb7a:	e021      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800eb7c:	f04f 030c 	mov.w	r3, #12
 800eb80:	f04f 0400 	mov.w	r4, #0
 800eb84:	e01c      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800eb86:	f04f 030a 	mov.w	r3, #10
 800eb8a:	f04f 0400 	mov.w	r4, #0
 800eb8e:	e017      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800eb90:	f04f 0308 	mov.w	r3, #8
 800eb94:	f04f 0400 	mov.w	r4, #0
 800eb98:	e012      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800eb9a:	f04f 0306 	mov.w	r3, #6
 800eb9e:	f04f 0400 	mov.w	r4, #0
 800eba2:	e00d      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800eba4:	f04f 0304 	mov.w	r3, #4
 800eba8:	f04f 0400 	mov.w	r4, #0
 800ebac:	e008      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800ebae:	f04f 0302 	mov.w	r3, #2
 800ebb2:	f04f 0400 	mov.w	r4, #0
 800ebb6:	e003      	b.n	800ebc0 <UART_SetConfig+0xc48>
 800ebb8:	f04f 0301 	mov.w	r3, #1
 800ebbc:	f04f 0400 	mov.w	r4, #0
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	4623      	mov	r3, r4
 800ebc4:	f7f1 fb88 	bl	80002d8 <__aeabi_uldivmod>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	460c      	mov	r4, r1
 800ebcc:	4619      	mov	r1, r3
 800ebce:	4622      	mov	r2, r4
 800ebd0:	f04f 0300 	mov.w	r3, #0
 800ebd4:	f04f 0400 	mov.w	r4, #0
 800ebd8:	0214      	lsls	r4, r2, #8
 800ebda:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ebde:	020b      	lsls	r3, r1, #8
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	6852      	ldr	r2, [r2, #4]
 800ebe4:	0852      	lsrs	r2, r2, #1
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	f04f 0200 	mov.w	r2, #0
 800ebec:	eb13 0b01 	adds.w	fp, r3, r1
 800ebf0:	eb44 0c02 	adc.w	ip, r4, r2
 800ebf4:	4658      	mov	r0, fp
 800ebf6:	4661      	mov	r1, ip
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	f04f 0400 	mov.w	r4, #0
 800ec00:	461a      	mov	r2, r3
 800ec02:	4623      	mov	r3, r4
 800ec04:	f7f1 fb68 	bl	80002d8 <__aeabi_uldivmod>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	460c      	mov	r4, r1
 800ec0c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ec0e:	e389      	b.n	800f324 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec10:	f107 0318 	add.w	r3, r7, #24
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7fc f87d 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f04f 0100 	mov.w	r1, #0
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d067      	beq.n	800ecfa <UART_SetConfig+0xd82>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d05e      	beq.n	800ecf0 <UART_SetConfig+0xd78>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec36:	2b02      	cmp	r3, #2
 800ec38:	d055      	beq.n	800ece6 <UART_SetConfig+0xd6e>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3e:	2b03      	cmp	r3, #3
 800ec40:	d04c      	beq.n	800ecdc <UART_SetConfig+0xd64>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec46:	2b04      	cmp	r3, #4
 800ec48:	d043      	beq.n	800ecd2 <UART_SetConfig+0xd5a>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec4e:	2b05      	cmp	r3, #5
 800ec50:	d03a      	beq.n	800ecc8 <UART_SetConfig+0xd50>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec56:	2b06      	cmp	r3, #6
 800ec58:	d031      	beq.n	800ecbe <UART_SetConfig+0xd46>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5e:	2b07      	cmp	r3, #7
 800ec60:	d028      	beq.n	800ecb4 <UART_SetConfig+0xd3c>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec66:	2b08      	cmp	r3, #8
 800ec68:	d01f      	beq.n	800ecaa <UART_SetConfig+0xd32>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6e:	2b09      	cmp	r3, #9
 800ec70:	d016      	beq.n	800eca0 <UART_SetConfig+0xd28>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec76:	2b0a      	cmp	r3, #10
 800ec78:	d00d      	beq.n	800ec96 <UART_SetConfig+0xd1e>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7e:	2b0b      	cmp	r3, #11
 800ec80:	d104      	bne.n	800ec8c <UART_SetConfig+0xd14>
 800ec82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec86:	f04f 0400 	mov.w	r4, #0
 800ec8a:	e03a      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ec8c:	f04f 0301 	mov.w	r3, #1
 800ec90:	f04f 0400 	mov.w	r4, #0
 800ec94:	e035      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ec96:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ec9a:	f04f 0400 	mov.w	r4, #0
 800ec9e:	e030      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800eca0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800eca4:	f04f 0400 	mov.w	r4, #0
 800eca8:	e02b      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ecaa:	f04f 0320 	mov.w	r3, #32
 800ecae:	f04f 0400 	mov.w	r4, #0
 800ecb2:	e026      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ecb4:	f04f 0310 	mov.w	r3, #16
 800ecb8:	f04f 0400 	mov.w	r4, #0
 800ecbc:	e021      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ecbe:	f04f 030c 	mov.w	r3, #12
 800ecc2:	f04f 0400 	mov.w	r4, #0
 800ecc6:	e01c      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ecc8:	f04f 030a 	mov.w	r3, #10
 800eccc:	f04f 0400 	mov.w	r4, #0
 800ecd0:	e017      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ecd2:	f04f 0308 	mov.w	r3, #8
 800ecd6:	f04f 0400 	mov.w	r4, #0
 800ecda:	e012      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ecdc:	f04f 0306 	mov.w	r3, #6
 800ece0:	f04f 0400 	mov.w	r4, #0
 800ece4:	e00d      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ece6:	f04f 0304 	mov.w	r3, #4
 800ecea:	f04f 0400 	mov.w	r4, #0
 800ecee:	e008      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ecf0:	f04f 0302 	mov.w	r3, #2
 800ecf4:	f04f 0400 	mov.w	r4, #0
 800ecf8:	e003      	b.n	800ed02 <UART_SetConfig+0xd8a>
 800ecfa:	f04f 0301 	mov.w	r3, #1
 800ecfe:	f04f 0400 	mov.w	r4, #0
 800ed02:	461a      	mov	r2, r3
 800ed04:	4623      	mov	r3, r4
 800ed06:	f7f1 fae7 	bl	80002d8 <__aeabi_uldivmod>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	4619      	mov	r1, r3
 800ed10:	4622      	mov	r2, r4
 800ed12:	f04f 0300 	mov.w	r3, #0
 800ed16:	f04f 0400 	mov.w	r4, #0
 800ed1a:	0214      	lsls	r4, r2, #8
 800ed1c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ed20:	020b      	lsls	r3, r1, #8
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	6852      	ldr	r2, [r2, #4]
 800ed26:	0852      	lsrs	r2, r2, #1
 800ed28:	4611      	mov	r1, r2
 800ed2a:	f04f 0200 	mov.w	r2, #0
 800ed2e:	eb13 0b01 	adds.w	fp, r3, r1
 800ed32:	eb44 0c02 	adc.w	ip, r4, r2
 800ed36:	4658      	mov	r0, fp
 800ed38:	4661      	mov	r1, ip
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	f04f 0400 	mov.w	r4, #0
 800ed42:	461a      	mov	r2, r3
 800ed44:	4623      	mov	r3, r4
 800ed46:	f7f1 fac7 	bl	80002d8 <__aeabi_uldivmod>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	460c      	mov	r4, r1
 800ed4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ed50:	e2e8      	b.n	800f324 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed52:	f107 030c 	add.w	r3, r7, #12
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fc f928 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f04f 0100 	mov.w	r1, #0
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d067      	beq.n	800ee3c <UART_SetConfig+0xec4>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d05e      	beq.n	800ee32 <UART_SetConfig+0xeba>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed78:	2b02      	cmp	r3, #2
 800ed7a:	d055      	beq.n	800ee28 <UART_SetConfig+0xeb0>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed80:	2b03      	cmp	r3, #3
 800ed82:	d04c      	beq.n	800ee1e <UART_SetConfig+0xea6>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	2b04      	cmp	r3, #4
 800ed8a:	d043      	beq.n	800ee14 <UART_SetConfig+0xe9c>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed90:	2b05      	cmp	r3, #5
 800ed92:	d03a      	beq.n	800ee0a <UART_SetConfig+0xe92>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed98:	2b06      	cmp	r3, #6
 800ed9a:	d031      	beq.n	800ee00 <UART_SetConfig+0xe88>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda0:	2b07      	cmp	r3, #7
 800eda2:	d028      	beq.n	800edf6 <UART_SetConfig+0xe7e>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda8:	2b08      	cmp	r3, #8
 800edaa:	d01f      	beq.n	800edec <UART_SetConfig+0xe74>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb0:	2b09      	cmp	r3, #9
 800edb2:	d016      	beq.n	800ede2 <UART_SetConfig+0xe6a>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb8:	2b0a      	cmp	r3, #10
 800edba:	d00d      	beq.n	800edd8 <UART_SetConfig+0xe60>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc0:	2b0b      	cmp	r3, #11
 800edc2:	d104      	bne.n	800edce <UART_SetConfig+0xe56>
 800edc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edc8:	f04f 0400 	mov.w	r4, #0
 800edcc:	e03a      	b.n	800ee44 <UART_SetConfig+0xecc>
 800edce:	f04f 0301 	mov.w	r3, #1
 800edd2:	f04f 0400 	mov.w	r4, #0
 800edd6:	e035      	b.n	800ee44 <UART_SetConfig+0xecc>
 800edd8:	f04f 0380 	mov.w	r3, #128	; 0x80
 800eddc:	f04f 0400 	mov.w	r4, #0
 800ede0:	e030      	b.n	800ee44 <UART_SetConfig+0xecc>
 800ede2:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ede6:	f04f 0400 	mov.w	r4, #0
 800edea:	e02b      	b.n	800ee44 <UART_SetConfig+0xecc>
 800edec:	f04f 0320 	mov.w	r3, #32
 800edf0:	f04f 0400 	mov.w	r4, #0
 800edf4:	e026      	b.n	800ee44 <UART_SetConfig+0xecc>
 800edf6:	f04f 0310 	mov.w	r3, #16
 800edfa:	f04f 0400 	mov.w	r4, #0
 800edfe:	e021      	b.n	800ee44 <UART_SetConfig+0xecc>
 800ee00:	f04f 030c 	mov.w	r3, #12
 800ee04:	f04f 0400 	mov.w	r4, #0
 800ee08:	e01c      	b.n	800ee44 <UART_SetConfig+0xecc>
 800ee0a:	f04f 030a 	mov.w	r3, #10
 800ee0e:	f04f 0400 	mov.w	r4, #0
 800ee12:	e017      	b.n	800ee44 <UART_SetConfig+0xecc>
 800ee14:	f04f 0308 	mov.w	r3, #8
 800ee18:	f04f 0400 	mov.w	r4, #0
 800ee1c:	e012      	b.n	800ee44 <UART_SetConfig+0xecc>
 800ee1e:	f04f 0306 	mov.w	r3, #6
 800ee22:	f04f 0400 	mov.w	r4, #0
 800ee26:	e00d      	b.n	800ee44 <UART_SetConfig+0xecc>
 800ee28:	f04f 0304 	mov.w	r3, #4
 800ee2c:	f04f 0400 	mov.w	r4, #0
 800ee30:	e008      	b.n	800ee44 <UART_SetConfig+0xecc>
 800ee32:	f04f 0302 	mov.w	r3, #2
 800ee36:	f04f 0400 	mov.w	r4, #0
 800ee3a:	e003      	b.n	800ee44 <UART_SetConfig+0xecc>
 800ee3c:	f04f 0301 	mov.w	r3, #1
 800ee40:	f04f 0400 	mov.w	r4, #0
 800ee44:	461a      	mov	r2, r3
 800ee46:	4623      	mov	r3, r4
 800ee48:	f7f1 fa46 	bl	80002d8 <__aeabi_uldivmod>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	460c      	mov	r4, r1
 800ee50:	4619      	mov	r1, r3
 800ee52:	4622      	mov	r2, r4
 800ee54:	f04f 0300 	mov.w	r3, #0
 800ee58:	f04f 0400 	mov.w	r4, #0
 800ee5c:	0214      	lsls	r4, r2, #8
 800ee5e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ee62:	020b      	lsls	r3, r1, #8
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	6852      	ldr	r2, [r2, #4]
 800ee68:	0852      	lsrs	r2, r2, #1
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	f04f 0200 	mov.w	r2, #0
 800ee70:	eb13 0b01 	adds.w	fp, r3, r1
 800ee74:	eb44 0c02 	adc.w	ip, r4, r2
 800ee78:	4658      	mov	r0, fp
 800ee7a:	4661      	mov	r1, ip
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	f04f 0400 	mov.w	r4, #0
 800ee84:	461a      	mov	r2, r3
 800ee86:	4623      	mov	r3, r4
 800ee88:	f7f1 fa26 	bl	80002d8 <__aeabi_uldivmod>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	460c      	mov	r4, r1
 800ee90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ee92:	e247      	b.n	800f324 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee94:	4b96      	ldr	r3, [pc, #600]	; (800f0f0 <UART_SetConfig+0x1178>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f003 0320 	and.w	r3, r3, #32
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f000 80a3 	beq.w	800efe8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eea2:	4b93      	ldr	r3, [pc, #588]	; (800f0f0 <UART_SetConfig+0x1178>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	08db      	lsrs	r3, r3, #3
 800eea8:	f003 0303 	and.w	r3, r3, #3
 800eeac:	4a91      	ldr	r2, [pc, #580]	; (800f0f4 <UART_SetConfig+0x117c>)
 800eeae:	fa22 f303 	lsr.w	r3, r2, r3
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f04f 0100 	mov.w	r1, #0
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d067      	beq.n	800ef90 <UART_SetConfig+0x1018>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d05e      	beq.n	800ef86 <UART_SetConfig+0x100e>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eecc:	2b02      	cmp	r3, #2
 800eece:	d055      	beq.n	800ef7c <UART_SetConfig+0x1004>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed4:	2b03      	cmp	r3, #3
 800eed6:	d04c      	beq.n	800ef72 <UART_SetConfig+0xffa>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eedc:	2b04      	cmp	r3, #4
 800eede:	d043      	beq.n	800ef68 <UART_SetConfig+0xff0>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee4:	2b05      	cmp	r3, #5
 800eee6:	d03a      	beq.n	800ef5e <UART_SetConfig+0xfe6>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeec:	2b06      	cmp	r3, #6
 800eeee:	d031      	beq.n	800ef54 <UART_SetConfig+0xfdc>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef4:	2b07      	cmp	r3, #7
 800eef6:	d028      	beq.n	800ef4a <UART_SetConfig+0xfd2>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eefc:	2b08      	cmp	r3, #8
 800eefe:	d01f      	beq.n	800ef40 <UART_SetConfig+0xfc8>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef04:	2b09      	cmp	r3, #9
 800ef06:	d016      	beq.n	800ef36 <UART_SetConfig+0xfbe>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef0c:	2b0a      	cmp	r3, #10
 800ef0e:	d00d      	beq.n	800ef2c <UART_SetConfig+0xfb4>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef14:	2b0b      	cmp	r3, #11
 800ef16:	d104      	bne.n	800ef22 <UART_SetConfig+0xfaa>
 800ef18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef1c:	f04f 0400 	mov.w	r4, #0
 800ef20:	e03a      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef22:	f04f 0301 	mov.w	r3, #1
 800ef26:	f04f 0400 	mov.w	r4, #0
 800ef2a:	e035      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef2c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ef30:	f04f 0400 	mov.w	r4, #0
 800ef34:	e030      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef36:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ef3a:	f04f 0400 	mov.w	r4, #0
 800ef3e:	e02b      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef40:	f04f 0320 	mov.w	r3, #32
 800ef44:	f04f 0400 	mov.w	r4, #0
 800ef48:	e026      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef4a:	f04f 0310 	mov.w	r3, #16
 800ef4e:	f04f 0400 	mov.w	r4, #0
 800ef52:	e021      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef54:	f04f 030c 	mov.w	r3, #12
 800ef58:	f04f 0400 	mov.w	r4, #0
 800ef5c:	e01c      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef5e:	f04f 030a 	mov.w	r3, #10
 800ef62:	f04f 0400 	mov.w	r4, #0
 800ef66:	e017      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef68:	f04f 0308 	mov.w	r3, #8
 800ef6c:	f04f 0400 	mov.w	r4, #0
 800ef70:	e012      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef72:	f04f 0306 	mov.w	r3, #6
 800ef76:	f04f 0400 	mov.w	r4, #0
 800ef7a:	e00d      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef7c:	f04f 0304 	mov.w	r3, #4
 800ef80:	f04f 0400 	mov.w	r4, #0
 800ef84:	e008      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef86:	f04f 0302 	mov.w	r3, #2
 800ef8a:	f04f 0400 	mov.w	r4, #0
 800ef8e:	e003      	b.n	800ef98 <UART_SetConfig+0x1020>
 800ef90:	f04f 0301 	mov.w	r3, #1
 800ef94:	f04f 0400 	mov.w	r4, #0
 800ef98:	461a      	mov	r2, r3
 800ef9a:	4623      	mov	r3, r4
 800ef9c:	f7f1 f99c 	bl	80002d8 <__aeabi_uldivmod>
 800efa0:	4603      	mov	r3, r0
 800efa2:	460c      	mov	r4, r1
 800efa4:	4619      	mov	r1, r3
 800efa6:	4622      	mov	r2, r4
 800efa8:	f04f 0300 	mov.w	r3, #0
 800efac:	f04f 0400 	mov.w	r4, #0
 800efb0:	0214      	lsls	r4, r2, #8
 800efb2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800efb6:	020b      	lsls	r3, r1, #8
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	6852      	ldr	r2, [r2, #4]
 800efbc:	0852      	lsrs	r2, r2, #1
 800efbe:	4611      	mov	r1, r2
 800efc0:	f04f 0200 	mov.w	r2, #0
 800efc4:	eb13 0b01 	adds.w	fp, r3, r1
 800efc8:	eb44 0c02 	adc.w	ip, r4, r2
 800efcc:	4658      	mov	r0, fp
 800efce:	4661      	mov	r1, ip
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	f04f 0400 	mov.w	r4, #0
 800efd8:	461a      	mov	r2, r3
 800efda:	4623      	mov	r3, r4
 800efdc:	f7f1 f97c 	bl	80002d8 <__aeabi_uldivmod>
 800efe0:	4603      	mov	r3, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800efe6:	e19d      	b.n	800f324 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efec:	2b00      	cmp	r3, #0
 800efee:	d05b      	beq.n	800f0a8 <UART_SetConfig+0x1130>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d053      	beq.n	800f0a0 <UART_SetConfig+0x1128>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800effc:	2b02      	cmp	r3, #2
 800effe:	d04b      	beq.n	800f098 <UART_SetConfig+0x1120>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f004:	2b03      	cmp	r3, #3
 800f006:	d043      	beq.n	800f090 <UART_SetConfig+0x1118>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00c:	2b04      	cmp	r3, #4
 800f00e:	d03b      	beq.n	800f088 <UART_SetConfig+0x1110>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f014:	2b05      	cmp	r3, #5
 800f016:	d033      	beq.n	800f080 <UART_SetConfig+0x1108>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01c:	2b06      	cmp	r3, #6
 800f01e:	d02b      	beq.n	800f078 <UART_SetConfig+0x1100>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f024:	2b07      	cmp	r3, #7
 800f026:	d023      	beq.n	800f070 <UART_SetConfig+0x10f8>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f02c:	2b08      	cmp	r3, #8
 800f02e:	d01b      	beq.n	800f068 <UART_SetConfig+0x10f0>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f034:	2b09      	cmp	r3, #9
 800f036:	d013      	beq.n	800f060 <UART_SetConfig+0x10e8>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f03c:	2b0a      	cmp	r3, #10
 800f03e:	d00b      	beq.n	800f058 <UART_SetConfig+0x10e0>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f044:	2b0b      	cmp	r3, #11
 800f046:	d103      	bne.n	800f050 <UART_SetConfig+0x10d8>
 800f048:	4b2a      	ldr	r3, [pc, #168]	; (800f0f4 <UART_SetConfig+0x117c>)
 800f04a:	f04f 0400 	mov.w	r4, #0
 800f04e:	e02e      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f050:	4b29      	ldr	r3, [pc, #164]	; (800f0f8 <UART_SetConfig+0x1180>)
 800f052:	f04f 0403 	mov.w	r4, #3
 800f056:	e02a      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f058:	4b28      	ldr	r3, [pc, #160]	; (800f0fc <UART_SetConfig+0x1184>)
 800f05a:	f04f 0400 	mov.w	r4, #0
 800f05e:	e026      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f060:	4b27      	ldr	r3, [pc, #156]	; (800f100 <UART_SetConfig+0x1188>)
 800f062:	f04f 0400 	mov.w	r4, #0
 800f066:	e022      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f068:	4b26      	ldr	r3, [pc, #152]	; (800f104 <UART_SetConfig+0x118c>)
 800f06a:	f04f 0400 	mov.w	r4, #0
 800f06e:	e01e      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f070:	4b25      	ldr	r3, [pc, #148]	; (800f108 <UART_SetConfig+0x1190>)
 800f072:	f04f 0400 	mov.w	r4, #0
 800f076:	e01a      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f078:	a419      	add	r4, pc, #100	; (adr r4, 800f0e0 <UART_SetConfig+0x1168>)
 800f07a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800f07e:	e016      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f080:	4b22      	ldr	r3, [pc, #136]	; (800f10c <UART_SetConfig+0x1194>)
 800f082:	f04f 0400 	mov.w	r4, #0
 800f086:	e012      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f088:	4b21      	ldr	r3, [pc, #132]	; (800f110 <UART_SetConfig+0x1198>)
 800f08a:	f04f 0400 	mov.w	r4, #0
 800f08e:	e00e      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f090:	a415      	add	r4, pc, #84	; (adr r4, 800f0e8 <UART_SetConfig+0x1170>)
 800f092:	e9d4 3400 	ldrd	r3, r4, [r4]
 800f096:	e00a      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f098:	4b1e      	ldr	r3, [pc, #120]	; (800f114 <UART_SetConfig+0x119c>)
 800f09a:	f04f 0400 	mov.w	r4, #0
 800f09e:	e006      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f0a0:	4b1d      	ldr	r3, [pc, #116]	; (800f118 <UART_SetConfig+0x11a0>)
 800f0a2:	f04f 0401 	mov.w	r4, #1
 800f0a6:	e002      	b.n	800f0ae <UART_SetConfig+0x1136>
 800f0a8:	4b13      	ldr	r3, [pc, #76]	; (800f0f8 <UART_SetConfig+0x1180>)
 800f0aa:	f04f 0403 	mov.w	r4, #3
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	6852      	ldr	r2, [r2, #4]
 800f0b2:	0852      	lsrs	r2, r2, #1
 800f0b4:	4611      	mov	r1, r2
 800f0b6:	f04f 0200 	mov.w	r2, #0
 800f0ba:	eb13 0b01 	adds.w	fp, r3, r1
 800f0be:	eb44 0c02 	adc.w	ip, r4, r2
 800f0c2:	4658      	mov	r0, fp
 800f0c4:	4661      	mov	r1, ip
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	f04f 0400 	mov.w	r4, #0
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	4623      	mov	r3, r4
 800f0d2:	f7f1 f901 	bl	80002d8 <__aeabi_uldivmod>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	460c      	mov	r4, r1
 800f0da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f0dc:	e122      	b.n	800f324 <UART_SetConfig+0x13ac>
 800f0de:	bf00      	nop
 800f0e0:	51615500 	.word	0x51615500
 800f0e4:	00000000 	.word	0x00000000
 800f0e8:	a2c2aa00 	.word	0xa2c2aa00
 800f0ec:	00000000 	.word	0x00000000
 800f0f0:	58024400 	.word	0x58024400
 800f0f4:	03d09000 	.word	0x03d09000
 800f0f8:	d0900000 	.word	0xd0900000
 800f0fc:	07a12000 	.word	0x07a12000
 800f100:	0f424000 	.word	0x0f424000
 800f104:	1e848000 	.word	0x1e848000
 800f108:	3d090000 	.word	0x3d090000
 800f10c:	61a80000 	.word	0x61a80000
 800f110:	7a120000 	.word	0x7a120000
 800f114:	f4240000 	.word	0xf4240000
 800f118:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f120:	2b00      	cmp	r3, #0
 800f122:	d05b      	beq.n	800f1dc <UART_SetConfig+0x1264>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d053      	beq.n	800f1d4 <UART_SetConfig+0x125c>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f130:	2b02      	cmp	r3, #2
 800f132:	d04b      	beq.n	800f1cc <UART_SetConfig+0x1254>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f138:	2b03      	cmp	r3, #3
 800f13a:	d043      	beq.n	800f1c4 <UART_SetConfig+0x124c>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f140:	2b04      	cmp	r3, #4
 800f142:	d03b      	beq.n	800f1bc <UART_SetConfig+0x1244>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f148:	2b05      	cmp	r3, #5
 800f14a:	d033      	beq.n	800f1b4 <UART_SetConfig+0x123c>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f150:	2b06      	cmp	r3, #6
 800f152:	d02b      	beq.n	800f1ac <UART_SetConfig+0x1234>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f158:	2b07      	cmp	r3, #7
 800f15a:	d023      	beq.n	800f1a4 <UART_SetConfig+0x122c>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f160:	2b08      	cmp	r3, #8
 800f162:	d01b      	beq.n	800f19c <UART_SetConfig+0x1224>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f168:	2b09      	cmp	r3, #9
 800f16a:	d013      	beq.n	800f194 <UART_SetConfig+0x121c>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f170:	2b0a      	cmp	r3, #10
 800f172:	d00b      	beq.n	800f18c <UART_SetConfig+0x1214>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f178:	2b0b      	cmp	r3, #11
 800f17a:	d103      	bne.n	800f184 <UART_SetConfig+0x120c>
 800f17c:	4bc0      	ldr	r3, [pc, #768]	; (800f480 <UART_SetConfig+0x1508>)
 800f17e:	f04f 0400 	mov.w	r4, #0
 800f182:	e02e      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f184:	4bbf      	ldr	r3, [pc, #764]	; (800f484 <UART_SetConfig+0x150c>)
 800f186:	f04f 0400 	mov.w	r4, #0
 800f18a:	e02a      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f18c:	4bbe      	ldr	r3, [pc, #760]	; (800f488 <UART_SetConfig+0x1510>)
 800f18e:	f04f 0400 	mov.w	r4, #0
 800f192:	e026      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f194:	4bbd      	ldr	r3, [pc, #756]	; (800f48c <UART_SetConfig+0x1514>)
 800f196:	f04f 0400 	mov.w	r4, #0
 800f19a:	e022      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f19c:	4bbc      	ldr	r3, [pc, #752]	; (800f490 <UART_SetConfig+0x1518>)
 800f19e:	f04f 0400 	mov.w	r4, #0
 800f1a2:	e01e      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f1a4:	4bbb      	ldr	r3, [pc, #748]	; (800f494 <UART_SetConfig+0x151c>)
 800f1a6:	f04f 0400 	mov.w	r4, #0
 800f1aa:	e01a      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f1ac:	a4b0      	add	r4, pc, #704	; (adr r4, 800f470 <UART_SetConfig+0x14f8>)
 800f1ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 800f1b2:	e016      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f1b4:	4bb8      	ldr	r3, [pc, #736]	; (800f498 <UART_SetConfig+0x1520>)
 800f1b6:	f04f 0400 	mov.w	r4, #0
 800f1ba:	e012      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f1bc:	4bb7      	ldr	r3, [pc, #732]	; (800f49c <UART_SetConfig+0x1524>)
 800f1be:	f04f 0400 	mov.w	r4, #0
 800f1c2:	e00e      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f1c4:	a4ac      	add	r4, pc, #688	; (adr r4, 800f478 <UART_SetConfig+0x1500>)
 800f1c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800f1ca:	e00a      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f1cc:	4bb4      	ldr	r3, [pc, #720]	; (800f4a0 <UART_SetConfig+0x1528>)
 800f1ce:	f04f 0400 	mov.w	r4, #0
 800f1d2:	e006      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f1d4:	4bb3      	ldr	r3, [pc, #716]	; (800f4a4 <UART_SetConfig+0x152c>)
 800f1d6:	f04f 0400 	mov.w	r4, #0
 800f1da:	e002      	b.n	800f1e2 <UART_SetConfig+0x126a>
 800f1dc:	4ba9      	ldr	r3, [pc, #676]	; (800f484 <UART_SetConfig+0x150c>)
 800f1de:	f04f 0400 	mov.w	r4, #0
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	6852      	ldr	r2, [r2, #4]
 800f1e6:	0852      	lsrs	r2, r2, #1
 800f1e8:	4611      	mov	r1, r2
 800f1ea:	f04f 0200 	mov.w	r2, #0
 800f1ee:	eb13 0b01 	adds.w	fp, r3, r1
 800f1f2:	eb44 0c02 	adc.w	ip, r4, r2
 800f1f6:	4658      	mov	r0, fp
 800f1f8:	4661      	mov	r1, ip
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	f04f 0400 	mov.w	r4, #0
 800f202:	461a      	mov	r2, r3
 800f204:	4623      	mov	r3, r4
 800f206:	f7f1 f867 	bl	80002d8 <__aeabi_uldivmod>
 800f20a:	4603      	mov	r3, r0
 800f20c:	460c      	mov	r4, r1
 800f20e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f210:	e088      	b.n	800f324 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f216:	2b00      	cmp	r3, #0
 800f218:	d064      	beq.n	800f2e4 <UART_SetConfig+0x136c>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d05b      	beq.n	800f2da <UART_SetConfig+0x1362>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f226:	2b02      	cmp	r3, #2
 800f228:	d052      	beq.n	800f2d0 <UART_SetConfig+0x1358>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22e:	2b03      	cmp	r3, #3
 800f230:	d04a      	beq.n	800f2c8 <UART_SetConfig+0x1350>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f236:	2b04      	cmp	r3, #4
 800f238:	d041      	beq.n	800f2be <UART_SetConfig+0x1346>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f23e:	2b05      	cmp	r3, #5
 800f240:	d039      	beq.n	800f2b6 <UART_SetConfig+0x133e>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f246:	2b06      	cmp	r3, #6
 800f248:	d031      	beq.n	800f2ae <UART_SetConfig+0x1336>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24e:	2b07      	cmp	r3, #7
 800f250:	d028      	beq.n	800f2a4 <UART_SetConfig+0x132c>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f256:	2b08      	cmp	r3, #8
 800f258:	d01f      	beq.n	800f29a <UART_SetConfig+0x1322>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25e:	2b09      	cmp	r3, #9
 800f260:	d016      	beq.n	800f290 <UART_SetConfig+0x1318>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f266:	2b0a      	cmp	r3, #10
 800f268:	d00d      	beq.n	800f286 <UART_SetConfig+0x130e>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26e:	2b0b      	cmp	r3, #11
 800f270:	d104      	bne.n	800f27c <UART_SetConfig+0x1304>
 800f272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f276:	f04f 0400 	mov.w	r4, #0
 800f27a:	e037      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f27c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f280:	f04f 0400 	mov.w	r4, #0
 800f284:	e032      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f28a:	f04f 0400 	mov.w	r4, #0
 800f28e:	e02d      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f294:	f04f 0400 	mov.w	r4, #0
 800f298:	e028      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f29a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f29e:	f04f 0400 	mov.w	r4, #0
 800f2a2:	e023      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f2a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f2a8:	f04f 0400 	mov.w	r4, #0
 800f2ac:	e01e      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f2ae:	4b7e      	ldr	r3, [pc, #504]	; (800f4a8 <UART_SetConfig+0x1530>)
 800f2b0:	f04f 0400 	mov.w	r4, #0
 800f2b4:	e01a      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f2b6:	4b7d      	ldr	r3, [pc, #500]	; (800f4ac <UART_SetConfig+0x1534>)
 800f2b8:	f04f 0400 	mov.w	r4, #0
 800f2bc:	e016      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f2be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f2c2:	f04f 0400 	mov.w	r4, #0
 800f2c6:	e011      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f2c8:	4b79      	ldr	r3, [pc, #484]	; (800f4b0 <UART_SetConfig+0x1538>)
 800f2ca:	f04f 0400 	mov.w	r4, #0
 800f2ce:	e00d      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f2d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f2d4:	f04f 0400 	mov.w	r4, #0
 800f2d8:	e008      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f2da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f2de:	f04f 0400 	mov.w	r4, #0
 800f2e2:	e003      	b.n	800f2ec <UART_SetConfig+0x1374>
 800f2e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f2e8:	f04f 0400 	mov.w	r4, #0
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	6852      	ldr	r2, [r2, #4]
 800f2f0:	0852      	lsrs	r2, r2, #1
 800f2f2:	4611      	mov	r1, r2
 800f2f4:	f04f 0200 	mov.w	r2, #0
 800f2f8:	eb13 0b01 	adds.w	fp, r3, r1
 800f2fc:	eb44 0c02 	adc.w	ip, r4, r2
 800f300:	4658      	mov	r0, fp
 800f302:	4661      	mov	r1, ip
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	f04f 0400 	mov.w	r4, #0
 800f30c:	461a      	mov	r2, r3
 800f30e:	4623      	mov	r3, r4
 800f310:	f7f0 ffe2 	bl	80002d8 <__aeabi_uldivmod>
 800f314:	4603      	mov	r3, r0
 800f316:	460c      	mov	r4, r1
 800f318:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f31a:	e003      	b.n	800f324 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800f31c:	2301      	movs	r3, #1
 800f31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800f322:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f32a:	d309      	bcc.n	800f340 <UART_SetConfig+0x13c8>
 800f32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f32e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f332:	d205      	bcs.n	800f340 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f33a:	60da      	str	r2, [r3, #12]
 800f33c:	f000 bf85 	b.w	801024a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f346:	f000 bf80 	b.w	801024a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	69db      	ldr	r3, [r3, #28]
 800f34e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f352:	f040 83da 	bne.w	800fb0a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800f356:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f35a:	2b40      	cmp	r3, #64	; 0x40
 800f35c:	f200 83b3 	bhi.w	800fac6 <UART_SetConfig+0x1b4e>
 800f360:	a201      	add	r2, pc, #4	; (adr r2, 800f368 <UART_SetConfig+0x13f0>)
 800f362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f366:	bf00      	nop
 800f368:	0800f4b5 	.word	0x0800f4b5
 800f36c:	0800f56d 	.word	0x0800f56d
 800f370:	0800fac7 	.word	0x0800fac7
 800f374:	0800fac7 	.word	0x0800fac7
 800f378:	0800f625 	.word	0x0800f625
 800f37c:	0800fac7 	.word	0x0800fac7
 800f380:	0800fac7 	.word	0x0800fac7
 800f384:	0800fac7 	.word	0x0800fac7
 800f388:	0800f6e1 	.word	0x0800f6e1
 800f38c:	0800fac7 	.word	0x0800fac7
 800f390:	0800fac7 	.word	0x0800fac7
 800f394:	0800fac7 	.word	0x0800fac7
 800f398:	0800fac7 	.word	0x0800fac7
 800f39c:	0800fac7 	.word	0x0800fac7
 800f3a0:	0800fac7 	.word	0x0800fac7
 800f3a4:	0800fac7 	.word	0x0800fac7
 800f3a8:	0800f79d 	.word	0x0800f79d
 800f3ac:	0800fac7 	.word	0x0800fac7
 800f3b0:	0800fac7 	.word	0x0800fac7
 800f3b4:	0800fac7 	.word	0x0800fac7
 800f3b8:	0800fac7 	.word	0x0800fac7
 800f3bc:	0800fac7 	.word	0x0800fac7
 800f3c0:	0800fac7 	.word	0x0800fac7
 800f3c4:	0800fac7 	.word	0x0800fac7
 800f3c8:	0800fac7 	.word	0x0800fac7
 800f3cc:	0800fac7 	.word	0x0800fac7
 800f3d0:	0800fac7 	.word	0x0800fac7
 800f3d4:	0800fac7 	.word	0x0800fac7
 800f3d8:	0800fac7 	.word	0x0800fac7
 800f3dc:	0800fac7 	.word	0x0800fac7
 800f3e0:	0800fac7 	.word	0x0800fac7
 800f3e4:	0800fac7 	.word	0x0800fac7
 800f3e8:	0800f90f 	.word	0x0800f90f
 800f3ec:	0800fac7 	.word	0x0800fac7
 800f3f0:	0800fac7 	.word	0x0800fac7
 800f3f4:	0800fac7 	.word	0x0800fac7
 800f3f8:	0800fac7 	.word	0x0800fac7
 800f3fc:	0800fac7 	.word	0x0800fac7
 800f400:	0800fac7 	.word	0x0800fac7
 800f404:	0800fac7 	.word	0x0800fac7
 800f408:	0800fac7 	.word	0x0800fac7
 800f40c:	0800fac7 	.word	0x0800fac7
 800f410:	0800fac7 	.word	0x0800fac7
 800f414:	0800fac7 	.word	0x0800fac7
 800f418:	0800fac7 	.word	0x0800fac7
 800f41c:	0800fac7 	.word	0x0800fac7
 800f420:	0800fac7 	.word	0x0800fac7
 800f424:	0800fac7 	.word	0x0800fac7
 800f428:	0800fac7 	.word	0x0800fac7
 800f42c:	0800fac7 	.word	0x0800fac7
 800f430:	0800fac7 	.word	0x0800fac7
 800f434:	0800fac7 	.word	0x0800fac7
 800f438:	0800fac7 	.word	0x0800fac7
 800f43c:	0800fac7 	.word	0x0800fac7
 800f440:	0800fac7 	.word	0x0800fac7
 800f444:	0800fac7 	.word	0x0800fac7
 800f448:	0800fac7 	.word	0x0800fac7
 800f44c:	0800fac7 	.word	0x0800fac7
 800f450:	0800fac7 	.word	0x0800fac7
 800f454:	0800fac7 	.word	0x0800fac7
 800f458:	0800fac7 	.word	0x0800fac7
 800f45c:	0800fac7 	.word	0x0800fac7
 800f460:	0800fac7 	.word	0x0800fac7
 800f464:	0800fac7 	.word	0x0800fac7
 800f468:	0800fa05 	.word	0x0800fa05
 800f46c:	f3af 8000 	nop.w
 800f470:	05161500 	.word	0x05161500
 800f474:	00000000 	.word	0x00000000
 800f478:	0a2c2a00 	.word	0x0a2c2a00
 800f47c:	00000000 	.word	0x00000000
 800f480:	003d0900 	.word	0x003d0900
 800f484:	3d090000 	.word	0x3d090000
 800f488:	007a1200 	.word	0x007a1200
 800f48c:	00f42400 	.word	0x00f42400
 800f490:	01e84800 	.word	0x01e84800
 800f494:	03d09000 	.word	0x03d09000
 800f498:	061a8000 	.word	0x061a8000
 800f49c:	07a12000 	.word	0x07a12000
 800f4a0:	0f424000 	.word	0x0f424000
 800f4a4:	1e848000 	.word	0x1e848000
 800f4a8:	000aaa00 	.word	0x000aaa00
 800f4ac:	000ccc00 	.word	0x000ccc00
 800f4b0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4b4:	f7fa fa96 	bl	80099e4 <HAL_RCC_GetPCLK1Freq>
 800f4b8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d044      	beq.n	800f54c <UART_SetConfig+0x15d4>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d03e      	beq.n	800f548 <UART_SetConfig+0x15d0>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ce:	2b02      	cmp	r3, #2
 800f4d0:	d038      	beq.n	800f544 <UART_SetConfig+0x15cc>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d6:	2b03      	cmp	r3, #3
 800f4d8:	d032      	beq.n	800f540 <UART_SetConfig+0x15c8>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4de:	2b04      	cmp	r3, #4
 800f4e0:	d02c      	beq.n	800f53c <UART_SetConfig+0x15c4>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e6:	2b05      	cmp	r3, #5
 800f4e8:	d026      	beq.n	800f538 <UART_SetConfig+0x15c0>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ee:	2b06      	cmp	r3, #6
 800f4f0:	d020      	beq.n	800f534 <UART_SetConfig+0x15bc>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f6:	2b07      	cmp	r3, #7
 800f4f8:	d01a      	beq.n	800f530 <UART_SetConfig+0x15b8>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4fe:	2b08      	cmp	r3, #8
 800f500:	d014      	beq.n	800f52c <UART_SetConfig+0x15b4>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f506:	2b09      	cmp	r3, #9
 800f508:	d00e      	beq.n	800f528 <UART_SetConfig+0x15b0>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f50e:	2b0a      	cmp	r3, #10
 800f510:	d008      	beq.n	800f524 <UART_SetConfig+0x15ac>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f516:	2b0b      	cmp	r3, #11
 800f518:	d102      	bne.n	800f520 <UART_SetConfig+0x15a8>
 800f51a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f51e:	e016      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f520:	2301      	movs	r3, #1
 800f522:	e014      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f524:	2380      	movs	r3, #128	; 0x80
 800f526:	e012      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f528:	2340      	movs	r3, #64	; 0x40
 800f52a:	e010      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f52c:	2320      	movs	r3, #32
 800f52e:	e00e      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f530:	2310      	movs	r3, #16
 800f532:	e00c      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f534:	230c      	movs	r3, #12
 800f536:	e00a      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f538:	230a      	movs	r3, #10
 800f53a:	e008      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f53c:	2308      	movs	r3, #8
 800f53e:	e006      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f540:	2306      	movs	r3, #6
 800f542:	e004      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f544:	2304      	movs	r3, #4
 800f546:	e002      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f548:	2302      	movs	r3, #2
 800f54a:	e000      	b.n	800f54e <UART_SetConfig+0x15d6>
 800f54c:	2301      	movs	r3, #1
 800f54e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f550:	fbb2 f3f3 	udiv	r3, r2, r3
 800f554:	005a      	lsls	r2, r3, #1
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	085b      	lsrs	r3, r3, #1
 800f55c:	441a      	add	r2, r3
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	fbb2 f3f3 	udiv	r3, r2, r3
 800f566:	b29b      	uxth	r3, r3
 800f568:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f56a:	e2b0      	b.n	800face <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f56c:	f7fa fa50 	bl	8009a10 <HAL_RCC_GetPCLK2Freq>
 800f570:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f576:	2b00      	cmp	r3, #0
 800f578:	d044      	beq.n	800f604 <UART_SetConfig+0x168c>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d03e      	beq.n	800f600 <UART_SetConfig+0x1688>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f586:	2b02      	cmp	r3, #2
 800f588:	d038      	beq.n	800f5fc <UART_SetConfig+0x1684>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58e:	2b03      	cmp	r3, #3
 800f590:	d032      	beq.n	800f5f8 <UART_SetConfig+0x1680>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f596:	2b04      	cmp	r3, #4
 800f598:	d02c      	beq.n	800f5f4 <UART_SetConfig+0x167c>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59e:	2b05      	cmp	r3, #5
 800f5a0:	d026      	beq.n	800f5f0 <UART_SetConfig+0x1678>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a6:	2b06      	cmp	r3, #6
 800f5a8:	d020      	beq.n	800f5ec <UART_SetConfig+0x1674>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ae:	2b07      	cmp	r3, #7
 800f5b0:	d01a      	beq.n	800f5e8 <UART_SetConfig+0x1670>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b6:	2b08      	cmp	r3, #8
 800f5b8:	d014      	beq.n	800f5e4 <UART_SetConfig+0x166c>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5be:	2b09      	cmp	r3, #9
 800f5c0:	d00e      	beq.n	800f5e0 <UART_SetConfig+0x1668>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c6:	2b0a      	cmp	r3, #10
 800f5c8:	d008      	beq.n	800f5dc <UART_SetConfig+0x1664>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ce:	2b0b      	cmp	r3, #11
 800f5d0:	d102      	bne.n	800f5d8 <UART_SetConfig+0x1660>
 800f5d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f5d6:	e016      	b.n	800f606 <UART_SetConfig+0x168e>
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e014      	b.n	800f606 <UART_SetConfig+0x168e>
 800f5dc:	2380      	movs	r3, #128	; 0x80
 800f5de:	e012      	b.n	800f606 <UART_SetConfig+0x168e>
 800f5e0:	2340      	movs	r3, #64	; 0x40
 800f5e2:	e010      	b.n	800f606 <UART_SetConfig+0x168e>
 800f5e4:	2320      	movs	r3, #32
 800f5e6:	e00e      	b.n	800f606 <UART_SetConfig+0x168e>
 800f5e8:	2310      	movs	r3, #16
 800f5ea:	e00c      	b.n	800f606 <UART_SetConfig+0x168e>
 800f5ec:	230c      	movs	r3, #12
 800f5ee:	e00a      	b.n	800f606 <UART_SetConfig+0x168e>
 800f5f0:	230a      	movs	r3, #10
 800f5f2:	e008      	b.n	800f606 <UART_SetConfig+0x168e>
 800f5f4:	2308      	movs	r3, #8
 800f5f6:	e006      	b.n	800f606 <UART_SetConfig+0x168e>
 800f5f8:	2306      	movs	r3, #6
 800f5fa:	e004      	b.n	800f606 <UART_SetConfig+0x168e>
 800f5fc:	2304      	movs	r3, #4
 800f5fe:	e002      	b.n	800f606 <UART_SetConfig+0x168e>
 800f600:	2302      	movs	r3, #2
 800f602:	e000      	b.n	800f606 <UART_SetConfig+0x168e>
 800f604:	2301      	movs	r3, #1
 800f606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f608:	fbb2 f3f3 	udiv	r3, r2, r3
 800f60c:	005a      	lsls	r2, r3, #1
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	085b      	lsrs	r3, r3, #1
 800f614:	441a      	add	r2, r3
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f61e:	b29b      	uxth	r3, r3
 800f620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f622:	e254      	b.n	800face <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f624:	f107 0318 	add.w	r3, r7, #24
 800f628:	4618      	mov	r0, r3
 800f62a:	f7fb fb73 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f62e:	69fa      	ldr	r2, [r7, #28]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f634:	2b00      	cmp	r3, #0
 800f636:	d044      	beq.n	800f6c2 <UART_SetConfig+0x174a>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d03e      	beq.n	800f6be <UART_SetConfig+0x1746>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f644:	2b02      	cmp	r3, #2
 800f646:	d038      	beq.n	800f6ba <UART_SetConfig+0x1742>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f64c:	2b03      	cmp	r3, #3
 800f64e:	d032      	beq.n	800f6b6 <UART_SetConfig+0x173e>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f654:	2b04      	cmp	r3, #4
 800f656:	d02c      	beq.n	800f6b2 <UART_SetConfig+0x173a>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65c:	2b05      	cmp	r3, #5
 800f65e:	d026      	beq.n	800f6ae <UART_SetConfig+0x1736>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f664:	2b06      	cmp	r3, #6
 800f666:	d020      	beq.n	800f6aa <UART_SetConfig+0x1732>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66c:	2b07      	cmp	r3, #7
 800f66e:	d01a      	beq.n	800f6a6 <UART_SetConfig+0x172e>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f674:	2b08      	cmp	r3, #8
 800f676:	d014      	beq.n	800f6a2 <UART_SetConfig+0x172a>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f67c:	2b09      	cmp	r3, #9
 800f67e:	d00e      	beq.n	800f69e <UART_SetConfig+0x1726>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f684:	2b0a      	cmp	r3, #10
 800f686:	d008      	beq.n	800f69a <UART_SetConfig+0x1722>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f68c:	2b0b      	cmp	r3, #11
 800f68e:	d102      	bne.n	800f696 <UART_SetConfig+0x171e>
 800f690:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f694:	e016      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f696:	2301      	movs	r3, #1
 800f698:	e014      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f69a:	2380      	movs	r3, #128	; 0x80
 800f69c:	e012      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f69e:	2340      	movs	r3, #64	; 0x40
 800f6a0:	e010      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f6a2:	2320      	movs	r3, #32
 800f6a4:	e00e      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f6a6:	2310      	movs	r3, #16
 800f6a8:	e00c      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f6aa:	230c      	movs	r3, #12
 800f6ac:	e00a      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f6ae:	230a      	movs	r3, #10
 800f6b0:	e008      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f6b2:	2308      	movs	r3, #8
 800f6b4:	e006      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f6b6:	2306      	movs	r3, #6
 800f6b8:	e004      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f6ba:	2304      	movs	r3, #4
 800f6bc:	e002      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f6be:	2302      	movs	r3, #2
 800f6c0:	e000      	b.n	800f6c4 <UART_SetConfig+0x174c>
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6c8:	005a      	lsls	r2, r3, #1
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	085b      	lsrs	r3, r3, #1
 800f6d0:	441a      	add	r2, r3
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6de:	e1f6      	b.n	800face <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6e0:	f107 030c 	add.w	r3, r7, #12
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fb fc61 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6ea:	693a      	ldr	r2, [r7, #16]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d044      	beq.n	800f77e <UART_SetConfig+0x1806>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d03e      	beq.n	800f77a <UART_SetConfig+0x1802>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f700:	2b02      	cmp	r3, #2
 800f702:	d038      	beq.n	800f776 <UART_SetConfig+0x17fe>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f708:	2b03      	cmp	r3, #3
 800f70a:	d032      	beq.n	800f772 <UART_SetConfig+0x17fa>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f710:	2b04      	cmp	r3, #4
 800f712:	d02c      	beq.n	800f76e <UART_SetConfig+0x17f6>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f718:	2b05      	cmp	r3, #5
 800f71a:	d026      	beq.n	800f76a <UART_SetConfig+0x17f2>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f720:	2b06      	cmp	r3, #6
 800f722:	d020      	beq.n	800f766 <UART_SetConfig+0x17ee>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f728:	2b07      	cmp	r3, #7
 800f72a:	d01a      	beq.n	800f762 <UART_SetConfig+0x17ea>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f730:	2b08      	cmp	r3, #8
 800f732:	d014      	beq.n	800f75e <UART_SetConfig+0x17e6>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f738:	2b09      	cmp	r3, #9
 800f73a:	d00e      	beq.n	800f75a <UART_SetConfig+0x17e2>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f740:	2b0a      	cmp	r3, #10
 800f742:	d008      	beq.n	800f756 <UART_SetConfig+0x17de>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f748:	2b0b      	cmp	r3, #11
 800f74a:	d102      	bne.n	800f752 <UART_SetConfig+0x17da>
 800f74c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f750:	e016      	b.n	800f780 <UART_SetConfig+0x1808>
 800f752:	2301      	movs	r3, #1
 800f754:	e014      	b.n	800f780 <UART_SetConfig+0x1808>
 800f756:	2380      	movs	r3, #128	; 0x80
 800f758:	e012      	b.n	800f780 <UART_SetConfig+0x1808>
 800f75a:	2340      	movs	r3, #64	; 0x40
 800f75c:	e010      	b.n	800f780 <UART_SetConfig+0x1808>
 800f75e:	2320      	movs	r3, #32
 800f760:	e00e      	b.n	800f780 <UART_SetConfig+0x1808>
 800f762:	2310      	movs	r3, #16
 800f764:	e00c      	b.n	800f780 <UART_SetConfig+0x1808>
 800f766:	230c      	movs	r3, #12
 800f768:	e00a      	b.n	800f780 <UART_SetConfig+0x1808>
 800f76a:	230a      	movs	r3, #10
 800f76c:	e008      	b.n	800f780 <UART_SetConfig+0x1808>
 800f76e:	2308      	movs	r3, #8
 800f770:	e006      	b.n	800f780 <UART_SetConfig+0x1808>
 800f772:	2306      	movs	r3, #6
 800f774:	e004      	b.n	800f780 <UART_SetConfig+0x1808>
 800f776:	2304      	movs	r3, #4
 800f778:	e002      	b.n	800f780 <UART_SetConfig+0x1808>
 800f77a:	2302      	movs	r3, #2
 800f77c:	e000      	b.n	800f780 <UART_SetConfig+0x1808>
 800f77e:	2301      	movs	r3, #1
 800f780:	fbb2 f3f3 	udiv	r3, r2, r3
 800f784:	005a      	lsls	r2, r3, #1
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	085b      	lsrs	r3, r3, #1
 800f78c:	441a      	add	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	fbb2 f3f3 	udiv	r3, r2, r3
 800f796:	b29b      	uxth	r3, r3
 800f798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f79a:	e198      	b.n	800face <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f79c:	4b87      	ldr	r3, [pc, #540]	; (800f9bc <UART_SetConfig+0x1a44>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f003 0320 	and.w	r3, r3, #32
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d05e      	beq.n	800f866 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7a8:	4b84      	ldr	r3, [pc, #528]	; (800f9bc <UART_SetConfig+0x1a44>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	08db      	lsrs	r3, r3, #3
 800f7ae:	f003 0303 	and.w	r3, r3, #3
 800f7b2:	4a83      	ldr	r2, [pc, #524]	; (800f9c0 <UART_SetConfig+0x1a48>)
 800f7b4:	40da      	lsrs	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d044      	beq.n	800f848 <UART_SetConfig+0x18d0>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d03e      	beq.n	800f844 <UART_SetConfig+0x18cc>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ca:	2b02      	cmp	r3, #2
 800f7cc:	d038      	beq.n	800f840 <UART_SetConfig+0x18c8>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d2:	2b03      	cmp	r3, #3
 800f7d4:	d032      	beq.n	800f83c <UART_SetConfig+0x18c4>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7da:	2b04      	cmp	r3, #4
 800f7dc:	d02c      	beq.n	800f838 <UART_SetConfig+0x18c0>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e2:	2b05      	cmp	r3, #5
 800f7e4:	d026      	beq.n	800f834 <UART_SetConfig+0x18bc>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ea:	2b06      	cmp	r3, #6
 800f7ec:	d020      	beq.n	800f830 <UART_SetConfig+0x18b8>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f2:	2b07      	cmp	r3, #7
 800f7f4:	d01a      	beq.n	800f82c <UART_SetConfig+0x18b4>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7fa:	2b08      	cmp	r3, #8
 800f7fc:	d014      	beq.n	800f828 <UART_SetConfig+0x18b0>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f802:	2b09      	cmp	r3, #9
 800f804:	d00e      	beq.n	800f824 <UART_SetConfig+0x18ac>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f80a:	2b0a      	cmp	r3, #10
 800f80c:	d008      	beq.n	800f820 <UART_SetConfig+0x18a8>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f812:	2b0b      	cmp	r3, #11
 800f814:	d102      	bne.n	800f81c <UART_SetConfig+0x18a4>
 800f816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f81a:	e016      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f81c:	2301      	movs	r3, #1
 800f81e:	e014      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f820:	2380      	movs	r3, #128	; 0x80
 800f822:	e012      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f824:	2340      	movs	r3, #64	; 0x40
 800f826:	e010      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f828:	2320      	movs	r3, #32
 800f82a:	e00e      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f82c:	2310      	movs	r3, #16
 800f82e:	e00c      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f830:	230c      	movs	r3, #12
 800f832:	e00a      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f834:	230a      	movs	r3, #10
 800f836:	e008      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f838:	2308      	movs	r3, #8
 800f83a:	e006      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f83c:	2306      	movs	r3, #6
 800f83e:	e004      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f840:	2304      	movs	r3, #4
 800f842:	e002      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f844:	2302      	movs	r3, #2
 800f846:	e000      	b.n	800f84a <UART_SetConfig+0x18d2>
 800f848:	2301      	movs	r3, #1
 800f84a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f84e:	005a      	lsls	r2, r3, #1
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	085b      	lsrs	r3, r3, #1
 800f856:	441a      	add	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f860:	b29b      	uxth	r3, r3
 800f862:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800f864:	e133      	b.n	800face <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d043      	beq.n	800f8f6 <UART_SetConfig+0x197e>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f872:	2b01      	cmp	r3, #1
 800f874:	d03d      	beq.n	800f8f2 <UART_SetConfig+0x197a>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d037      	beq.n	800f8ee <UART_SetConfig+0x1976>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f882:	2b03      	cmp	r3, #3
 800f884:	d031      	beq.n	800f8ea <UART_SetConfig+0x1972>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88a:	2b04      	cmp	r3, #4
 800f88c:	d02b      	beq.n	800f8e6 <UART_SetConfig+0x196e>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f892:	2b05      	cmp	r3, #5
 800f894:	d025      	beq.n	800f8e2 <UART_SetConfig+0x196a>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89a:	2b06      	cmp	r3, #6
 800f89c:	d01f      	beq.n	800f8de <UART_SetConfig+0x1966>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a2:	2b07      	cmp	r3, #7
 800f8a4:	d019      	beq.n	800f8da <UART_SetConfig+0x1962>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8aa:	2b08      	cmp	r3, #8
 800f8ac:	d013      	beq.n	800f8d6 <UART_SetConfig+0x195e>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b2:	2b09      	cmp	r3, #9
 800f8b4:	d00d      	beq.n	800f8d2 <UART_SetConfig+0x195a>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ba:	2b0a      	cmp	r3, #10
 800f8bc:	d007      	beq.n	800f8ce <UART_SetConfig+0x1956>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c2:	2b0b      	cmp	r3, #11
 800f8c4:	d101      	bne.n	800f8ca <UART_SetConfig+0x1952>
 800f8c6:	4b3f      	ldr	r3, [pc, #252]	; (800f9c4 <UART_SetConfig+0x1a4c>)
 800f8c8:	e016      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8ca:	4b3f      	ldr	r3, [pc, #252]	; (800f9c8 <UART_SetConfig+0x1a50>)
 800f8cc:	e014      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8ce:	4b3f      	ldr	r3, [pc, #252]	; (800f9cc <UART_SetConfig+0x1a54>)
 800f8d0:	e012      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8d2:	4b3f      	ldr	r3, [pc, #252]	; (800f9d0 <UART_SetConfig+0x1a58>)
 800f8d4:	e010      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8d6:	4b3f      	ldr	r3, [pc, #252]	; (800f9d4 <UART_SetConfig+0x1a5c>)
 800f8d8:	e00e      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8da:	4b3f      	ldr	r3, [pc, #252]	; (800f9d8 <UART_SetConfig+0x1a60>)
 800f8dc:	e00c      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8de:	4b3f      	ldr	r3, [pc, #252]	; (800f9dc <UART_SetConfig+0x1a64>)
 800f8e0:	e00a      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8e2:	4b3f      	ldr	r3, [pc, #252]	; (800f9e0 <UART_SetConfig+0x1a68>)
 800f8e4:	e008      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8e6:	4b3f      	ldr	r3, [pc, #252]	; (800f9e4 <UART_SetConfig+0x1a6c>)
 800f8e8:	e006      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8ea:	4b3f      	ldr	r3, [pc, #252]	; (800f9e8 <UART_SetConfig+0x1a70>)
 800f8ec:	e004      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8ee:	4b3f      	ldr	r3, [pc, #252]	; (800f9ec <UART_SetConfig+0x1a74>)
 800f8f0:	e002      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8f2:	4b33      	ldr	r3, [pc, #204]	; (800f9c0 <UART_SetConfig+0x1a48>)
 800f8f4:	e000      	b.n	800f8f8 <UART_SetConfig+0x1980>
 800f8f6:	4b34      	ldr	r3, [pc, #208]	; (800f9c8 <UART_SetConfig+0x1a50>)
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	6852      	ldr	r2, [r2, #4]
 800f8fc:	0852      	lsrs	r2, r2, #1
 800f8fe:	441a      	add	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	fbb2 f3f3 	udiv	r3, r2, r3
 800f908:	b29b      	uxth	r3, r3
 800f90a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f90c:	e0df      	b.n	800face <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f912:	2b00      	cmp	r3, #0
 800f914:	d045      	beq.n	800f9a2 <UART_SetConfig+0x1a2a>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d03f      	beq.n	800f99e <UART_SetConfig+0x1a26>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f922:	2b02      	cmp	r3, #2
 800f924:	d039      	beq.n	800f99a <UART_SetConfig+0x1a22>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92a:	2b03      	cmp	r3, #3
 800f92c:	d033      	beq.n	800f996 <UART_SetConfig+0x1a1e>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f932:	2b04      	cmp	r3, #4
 800f934:	d02d      	beq.n	800f992 <UART_SetConfig+0x1a1a>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93a:	2b05      	cmp	r3, #5
 800f93c:	d027      	beq.n	800f98e <UART_SetConfig+0x1a16>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f942:	2b06      	cmp	r3, #6
 800f944:	d021      	beq.n	800f98a <UART_SetConfig+0x1a12>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94a:	2b07      	cmp	r3, #7
 800f94c:	d01b      	beq.n	800f986 <UART_SetConfig+0x1a0e>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f952:	2b08      	cmp	r3, #8
 800f954:	d015      	beq.n	800f982 <UART_SetConfig+0x1a0a>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95a:	2b09      	cmp	r3, #9
 800f95c:	d00f      	beq.n	800f97e <UART_SetConfig+0x1a06>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f962:	2b0a      	cmp	r3, #10
 800f964:	d008      	beq.n	800f978 <UART_SetConfig+0x1a00>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96a:	2b0b      	cmp	r3, #11
 800f96c:	d102      	bne.n	800f974 <UART_SetConfig+0x19fc>
 800f96e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800f972:	e017      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f974:	4b18      	ldr	r3, [pc, #96]	; (800f9d8 <UART_SetConfig+0x1a60>)
 800f976:	e015      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f978:	f24f 4324 	movw	r3, #62500	; 0xf424
 800f97c:	e012      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f97e:	4b1c      	ldr	r3, [pc, #112]	; (800f9f0 <UART_SetConfig+0x1a78>)
 800f980:	e010      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f982:	4b1c      	ldr	r3, [pc, #112]	; (800f9f4 <UART_SetConfig+0x1a7c>)
 800f984:	e00e      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f986:	4b0f      	ldr	r3, [pc, #60]	; (800f9c4 <UART_SetConfig+0x1a4c>)
 800f988:	e00c      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f98a:	4b1b      	ldr	r3, [pc, #108]	; (800f9f8 <UART_SetConfig+0x1a80>)
 800f98c:	e00a      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f98e:	4b1b      	ldr	r3, [pc, #108]	; (800f9fc <UART_SetConfig+0x1a84>)
 800f990:	e008      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f992:	4b0e      	ldr	r3, [pc, #56]	; (800f9cc <UART_SetConfig+0x1a54>)
 800f994:	e006      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f996:	4b1a      	ldr	r3, [pc, #104]	; (800fa00 <UART_SetConfig+0x1a88>)
 800f998:	e004      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f99a:	4b0d      	ldr	r3, [pc, #52]	; (800f9d0 <UART_SetConfig+0x1a58>)
 800f99c:	e002      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f99e:	4b0d      	ldr	r3, [pc, #52]	; (800f9d4 <UART_SetConfig+0x1a5c>)
 800f9a0:	e000      	b.n	800f9a4 <UART_SetConfig+0x1a2c>
 800f9a2:	4b0d      	ldr	r3, [pc, #52]	; (800f9d8 <UART_SetConfig+0x1a60>)
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	6852      	ldr	r2, [r2, #4]
 800f9a8:	0852      	lsrs	r2, r2, #1
 800f9aa:	441a      	add	r2, r3
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9b8:	e089      	b.n	800face <UART_SetConfig+0x1b56>
 800f9ba:	bf00      	nop
 800f9bc:	58024400 	.word	0x58024400
 800f9c0:	03d09000 	.word	0x03d09000
 800f9c4:	0007a120 	.word	0x0007a120
 800f9c8:	07a12000 	.word	0x07a12000
 800f9cc:	000f4240 	.word	0x000f4240
 800f9d0:	001e8480 	.word	0x001e8480
 800f9d4:	003d0900 	.word	0x003d0900
 800f9d8:	007a1200 	.word	0x007a1200
 800f9dc:	00a2c2aa 	.word	0x00a2c2aa
 800f9e0:	00c35000 	.word	0x00c35000
 800f9e4:	00f42400 	.word	0x00f42400
 800f9e8:	01458554 	.word	0x01458554
 800f9ec:	01e84800 	.word	0x01e84800
 800f9f0:	0001e848 	.word	0x0001e848
 800f9f4:	0003d090 	.word	0x0003d090
 800f9f8:	000a2c2a 	.word	0x000a2c2a
 800f9fc:	000c3500 	.word	0x000c3500
 800fa00:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d04f      	beq.n	800faac <UART_SetConfig+0x1b34>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d048      	beq.n	800faa6 <UART_SetConfig+0x1b2e>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	d041      	beq.n	800faa0 <UART_SetConfig+0x1b28>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	d03a      	beq.n	800fa9a <UART_SetConfig+0x1b22>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa28:	2b04      	cmp	r3, #4
 800fa2a:	d033      	beq.n	800fa94 <UART_SetConfig+0x1b1c>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa30:	2b05      	cmp	r3, #5
 800fa32:	d02c      	beq.n	800fa8e <UART_SetConfig+0x1b16>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa38:	2b06      	cmp	r3, #6
 800fa3a:	d025      	beq.n	800fa88 <UART_SetConfig+0x1b10>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa40:	2b07      	cmp	r3, #7
 800fa42:	d01e      	beq.n	800fa82 <UART_SetConfig+0x1b0a>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa48:	2b08      	cmp	r3, #8
 800fa4a:	d017      	beq.n	800fa7c <UART_SetConfig+0x1b04>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa50:	2b09      	cmp	r3, #9
 800fa52:	d010      	beq.n	800fa76 <UART_SetConfig+0x1afe>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa58:	2b0a      	cmp	r3, #10
 800fa5a:	d009      	beq.n	800fa70 <UART_SetConfig+0x1af8>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa60:	2b0b      	cmp	r3, #11
 800fa62:	d102      	bne.n	800fa6a <UART_SetConfig+0x1af2>
 800fa64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa68:	e022      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800fa6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fa6e:	e01f      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800fa70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa74:	e01c      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800fa76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa7a:	e019      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800fa7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fa80:	e016      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800fa82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa86:	e013      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800fa88:	f241 5354 	movw	r3, #5460	; 0x1554
 800fa8c:	e010      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800fa8e:	f641 1398 	movw	r3, #6552	; 0x1998
 800fa92:	e00d      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800fa94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa98:	e00a      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800fa9a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800fa9e:	e007      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800faa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800faa4:	e004      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800faa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800faaa:	e001      	b.n	800fab0 <UART_SetConfig+0x1b38>
 800faac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	6852      	ldr	r2, [r2, #4]
 800fab4:	0852      	lsrs	r2, r2, #1
 800fab6:	441a      	add	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fac4:	e003      	b.n	800face <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800fac6:	2301      	movs	r3, #1
 800fac8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800facc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800face:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fad0:	2b0f      	cmp	r3, #15
 800fad2:	d916      	bls.n	800fb02 <UART_SetConfig+0x1b8a>
 800fad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fada:	d212      	bcs.n	800fb02 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fade:	b29b      	uxth	r3, r3
 800fae0:	f023 030f 	bic.w	r3, r3, #15
 800fae4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae8:	085b      	lsrs	r3, r3, #1
 800faea:	b29b      	uxth	r3, r3
 800faec:	f003 0307 	and.w	r3, r3, #7
 800faf0:	b29a      	uxth	r2, r3
 800faf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800faf4:	4313      	orrs	r3, r2
 800faf6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fafe:	60da      	str	r2, [r3, #12]
 800fb00:	e3a3      	b.n	801024a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800fb02:	2301      	movs	r3, #1
 800fb04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb08:	e39f      	b.n	801024a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800fb0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fb0e:	2b40      	cmp	r3, #64	; 0x40
 800fb10:	f200 8388 	bhi.w	8010224 <UART_SetConfig+0x22ac>
 800fb14:	a201      	add	r2, pc, #4	; (adr r2, 800fb1c <UART_SetConfig+0x1ba4>)
 800fb16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb1a:	bf00      	nop
 800fb1c:	0800fc21 	.word	0x0800fc21
 800fb20:	0800fcd7 	.word	0x0800fcd7
 800fb24:	08010225 	.word	0x08010225
 800fb28:	08010225 	.word	0x08010225
 800fb2c:	0800fd8d 	.word	0x0800fd8d
 800fb30:	08010225 	.word	0x08010225
 800fb34:	08010225 	.word	0x08010225
 800fb38:	08010225 	.word	0x08010225
 800fb3c:	0800fe47 	.word	0x0800fe47
 800fb40:	08010225 	.word	0x08010225
 800fb44:	08010225 	.word	0x08010225
 800fb48:	08010225 	.word	0x08010225
 800fb4c:	08010225 	.word	0x08010225
 800fb50:	08010225 	.word	0x08010225
 800fb54:	08010225 	.word	0x08010225
 800fb58:	08010225 	.word	0x08010225
 800fb5c:	0800ff01 	.word	0x0800ff01
 800fb60:	08010225 	.word	0x08010225
 800fb64:	08010225 	.word	0x08010225
 800fb68:	08010225 	.word	0x08010225
 800fb6c:	08010225 	.word	0x08010225
 800fb70:	08010225 	.word	0x08010225
 800fb74:	08010225 	.word	0x08010225
 800fb78:	08010225 	.word	0x08010225
 800fb7c:	08010225 	.word	0x08010225
 800fb80:	08010225 	.word	0x08010225
 800fb84:	08010225 	.word	0x08010225
 800fb88:	08010225 	.word	0x08010225
 800fb8c:	08010225 	.word	0x08010225
 800fb90:	08010225 	.word	0x08010225
 800fb94:	08010225 	.word	0x08010225
 800fb98:	08010225 	.word	0x08010225
 800fb9c:	08010071 	.word	0x08010071
 800fba0:	08010225 	.word	0x08010225
 800fba4:	08010225 	.word	0x08010225
 800fba8:	08010225 	.word	0x08010225
 800fbac:	08010225 	.word	0x08010225
 800fbb0:	08010225 	.word	0x08010225
 800fbb4:	08010225 	.word	0x08010225
 800fbb8:	08010225 	.word	0x08010225
 800fbbc:	08010225 	.word	0x08010225
 800fbc0:	08010225 	.word	0x08010225
 800fbc4:	08010225 	.word	0x08010225
 800fbc8:	08010225 	.word	0x08010225
 800fbcc:	08010225 	.word	0x08010225
 800fbd0:	08010225 	.word	0x08010225
 800fbd4:	08010225 	.word	0x08010225
 800fbd8:	08010225 	.word	0x08010225
 800fbdc:	08010225 	.word	0x08010225
 800fbe0:	08010225 	.word	0x08010225
 800fbe4:	08010225 	.word	0x08010225
 800fbe8:	08010225 	.word	0x08010225
 800fbec:	08010225 	.word	0x08010225
 800fbf0:	08010225 	.word	0x08010225
 800fbf4:	08010225 	.word	0x08010225
 800fbf8:	08010225 	.word	0x08010225
 800fbfc:	08010225 	.word	0x08010225
 800fc00:	08010225 	.word	0x08010225
 800fc04:	08010225 	.word	0x08010225
 800fc08:	08010225 	.word	0x08010225
 800fc0c:	08010225 	.word	0x08010225
 800fc10:	08010225 	.word	0x08010225
 800fc14:	08010225 	.word	0x08010225
 800fc18:	08010225 	.word	0x08010225
 800fc1c:	08010165 	.word	0x08010165
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc20:	f7f9 fee0 	bl	80099e4 <HAL_RCC_GetPCLK1Freq>
 800fc24:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d044      	beq.n	800fcb8 <UART_SetConfig+0x1d40>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d03e      	beq.n	800fcb4 <UART_SetConfig+0x1d3c>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d038      	beq.n	800fcb0 <UART_SetConfig+0x1d38>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc42:	2b03      	cmp	r3, #3
 800fc44:	d032      	beq.n	800fcac <UART_SetConfig+0x1d34>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4a:	2b04      	cmp	r3, #4
 800fc4c:	d02c      	beq.n	800fca8 <UART_SetConfig+0x1d30>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc52:	2b05      	cmp	r3, #5
 800fc54:	d026      	beq.n	800fca4 <UART_SetConfig+0x1d2c>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5a:	2b06      	cmp	r3, #6
 800fc5c:	d020      	beq.n	800fca0 <UART_SetConfig+0x1d28>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc62:	2b07      	cmp	r3, #7
 800fc64:	d01a      	beq.n	800fc9c <UART_SetConfig+0x1d24>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc6a:	2b08      	cmp	r3, #8
 800fc6c:	d014      	beq.n	800fc98 <UART_SetConfig+0x1d20>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc72:	2b09      	cmp	r3, #9
 800fc74:	d00e      	beq.n	800fc94 <UART_SetConfig+0x1d1c>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc7a:	2b0a      	cmp	r3, #10
 800fc7c:	d008      	beq.n	800fc90 <UART_SetConfig+0x1d18>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc82:	2b0b      	cmp	r3, #11
 800fc84:	d102      	bne.n	800fc8c <UART_SetConfig+0x1d14>
 800fc86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc8a:	e016      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e014      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fc90:	2380      	movs	r3, #128	; 0x80
 800fc92:	e012      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fc94:	2340      	movs	r3, #64	; 0x40
 800fc96:	e010      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fc98:	2320      	movs	r3, #32
 800fc9a:	e00e      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fc9c:	2310      	movs	r3, #16
 800fc9e:	e00c      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fca0:	230c      	movs	r3, #12
 800fca2:	e00a      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fca4:	230a      	movs	r3, #10
 800fca6:	e008      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fca8:	2308      	movs	r3, #8
 800fcaa:	e006      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fcac:	2306      	movs	r3, #6
 800fcae:	e004      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fcb0:	2304      	movs	r3, #4
 800fcb2:	e002      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fcb4:	2302      	movs	r3, #2
 800fcb6:	e000      	b.n	800fcba <UART_SetConfig+0x1d42>
 800fcb8:	2301      	movs	r3, #1
 800fcba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcbc:	fbb2 f2f3 	udiv	r2, r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	085b      	lsrs	r3, r3, #1
 800fcc6:	441a      	add	r2, r3
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcd0:	b29b      	uxth	r3, r3
 800fcd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fcd4:	e2aa      	b.n	801022c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fcd6:	f7f9 fe9b 	bl	8009a10 <HAL_RCC_GetPCLK2Freq>
 800fcda:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d044      	beq.n	800fd6e <UART_SetConfig+0x1df6>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d03e      	beq.n	800fd6a <UART_SetConfig+0x1df2>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d038      	beq.n	800fd66 <UART_SetConfig+0x1dee>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf8:	2b03      	cmp	r3, #3
 800fcfa:	d032      	beq.n	800fd62 <UART_SetConfig+0x1dea>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd00:	2b04      	cmp	r3, #4
 800fd02:	d02c      	beq.n	800fd5e <UART_SetConfig+0x1de6>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd08:	2b05      	cmp	r3, #5
 800fd0a:	d026      	beq.n	800fd5a <UART_SetConfig+0x1de2>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd10:	2b06      	cmp	r3, #6
 800fd12:	d020      	beq.n	800fd56 <UART_SetConfig+0x1dde>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd18:	2b07      	cmp	r3, #7
 800fd1a:	d01a      	beq.n	800fd52 <UART_SetConfig+0x1dda>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd20:	2b08      	cmp	r3, #8
 800fd22:	d014      	beq.n	800fd4e <UART_SetConfig+0x1dd6>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd28:	2b09      	cmp	r3, #9
 800fd2a:	d00e      	beq.n	800fd4a <UART_SetConfig+0x1dd2>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd30:	2b0a      	cmp	r3, #10
 800fd32:	d008      	beq.n	800fd46 <UART_SetConfig+0x1dce>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd38:	2b0b      	cmp	r3, #11
 800fd3a:	d102      	bne.n	800fd42 <UART_SetConfig+0x1dca>
 800fd3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd40:	e016      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd42:	2301      	movs	r3, #1
 800fd44:	e014      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd46:	2380      	movs	r3, #128	; 0x80
 800fd48:	e012      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd4a:	2340      	movs	r3, #64	; 0x40
 800fd4c:	e010      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd4e:	2320      	movs	r3, #32
 800fd50:	e00e      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd52:	2310      	movs	r3, #16
 800fd54:	e00c      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd56:	230c      	movs	r3, #12
 800fd58:	e00a      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd5a:	230a      	movs	r3, #10
 800fd5c:	e008      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd5e:	2308      	movs	r3, #8
 800fd60:	e006      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd62:	2306      	movs	r3, #6
 800fd64:	e004      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd66:	2304      	movs	r3, #4
 800fd68:	e002      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd6a:	2302      	movs	r3, #2
 800fd6c:	e000      	b.n	800fd70 <UART_SetConfig+0x1df8>
 800fd6e:	2301      	movs	r3, #1
 800fd70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd72:	fbb2 f2f3 	udiv	r2, r2, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	085b      	lsrs	r3, r3, #1
 800fd7c:	441a      	add	r2, r3
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd8a:	e24f      	b.n	801022c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd8c:	f107 0318 	add.w	r3, r7, #24
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7fa ffbf 	bl	800ad14 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd96:	69fa      	ldr	r2, [r7, #28]
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d044      	beq.n	800fe2a <UART_SetConfig+0x1eb2>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d03e      	beq.n	800fe26 <UART_SetConfig+0x1eae>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	d038      	beq.n	800fe22 <UART_SetConfig+0x1eaa>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb4:	2b03      	cmp	r3, #3
 800fdb6:	d032      	beq.n	800fe1e <UART_SetConfig+0x1ea6>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdbc:	2b04      	cmp	r3, #4
 800fdbe:	d02c      	beq.n	800fe1a <UART_SetConfig+0x1ea2>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc4:	2b05      	cmp	r3, #5
 800fdc6:	d026      	beq.n	800fe16 <UART_SetConfig+0x1e9e>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdcc:	2b06      	cmp	r3, #6
 800fdce:	d020      	beq.n	800fe12 <UART_SetConfig+0x1e9a>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd4:	2b07      	cmp	r3, #7
 800fdd6:	d01a      	beq.n	800fe0e <UART_SetConfig+0x1e96>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fddc:	2b08      	cmp	r3, #8
 800fdde:	d014      	beq.n	800fe0a <UART_SetConfig+0x1e92>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde4:	2b09      	cmp	r3, #9
 800fde6:	d00e      	beq.n	800fe06 <UART_SetConfig+0x1e8e>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdec:	2b0a      	cmp	r3, #10
 800fdee:	d008      	beq.n	800fe02 <UART_SetConfig+0x1e8a>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf4:	2b0b      	cmp	r3, #11
 800fdf6:	d102      	bne.n	800fdfe <UART_SetConfig+0x1e86>
 800fdf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fdfc:	e016      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e014      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe02:	2380      	movs	r3, #128	; 0x80
 800fe04:	e012      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe06:	2340      	movs	r3, #64	; 0x40
 800fe08:	e010      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe0a:	2320      	movs	r3, #32
 800fe0c:	e00e      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe0e:	2310      	movs	r3, #16
 800fe10:	e00c      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe12:	230c      	movs	r3, #12
 800fe14:	e00a      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe16:	230a      	movs	r3, #10
 800fe18:	e008      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe1a:	2308      	movs	r3, #8
 800fe1c:	e006      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe1e:	2306      	movs	r3, #6
 800fe20:	e004      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe22:	2304      	movs	r3, #4
 800fe24:	e002      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe26:	2302      	movs	r3, #2
 800fe28:	e000      	b.n	800fe2c <UART_SetConfig+0x1eb4>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	fbb2 f2f3 	udiv	r2, r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	085b      	lsrs	r3, r3, #1
 800fe36:	441a      	add	r2, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fe44:	e1f2      	b.n	801022c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe46:	f107 030c 	add.w	r3, r7, #12
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fb f8ae 	bl	800afac <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe50:	693a      	ldr	r2, [r7, #16]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d044      	beq.n	800fee4 <UART_SetConfig+0x1f6c>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d03e      	beq.n	800fee0 <UART_SetConfig+0x1f68>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	d038      	beq.n	800fedc <UART_SetConfig+0x1f64>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d032      	beq.n	800fed8 <UART_SetConfig+0x1f60>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe76:	2b04      	cmp	r3, #4
 800fe78:	d02c      	beq.n	800fed4 <UART_SetConfig+0x1f5c>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe7e:	2b05      	cmp	r3, #5
 800fe80:	d026      	beq.n	800fed0 <UART_SetConfig+0x1f58>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe86:	2b06      	cmp	r3, #6
 800fe88:	d020      	beq.n	800fecc <UART_SetConfig+0x1f54>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8e:	2b07      	cmp	r3, #7
 800fe90:	d01a      	beq.n	800fec8 <UART_SetConfig+0x1f50>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe96:	2b08      	cmp	r3, #8
 800fe98:	d014      	beq.n	800fec4 <UART_SetConfig+0x1f4c>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9e:	2b09      	cmp	r3, #9
 800fea0:	d00e      	beq.n	800fec0 <UART_SetConfig+0x1f48>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea6:	2b0a      	cmp	r3, #10
 800fea8:	d008      	beq.n	800febc <UART_SetConfig+0x1f44>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feae:	2b0b      	cmp	r3, #11
 800feb0:	d102      	bne.n	800feb8 <UART_SetConfig+0x1f40>
 800feb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800feb6:	e016      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800feb8:	2301      	movs	r3, #1
 800feba:	e014      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800febc:	2380      	movs	r3, #128	; 0x80
 800febe:	e012      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800fec0:	2340      	movs	r3, #64	; 0x40
 800fec2:	e010      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800fec4:	2320      	movs	r3, #32
 800fec6:	e00e      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800fec8:	2310      	movs	r3, #16
 800feca:	e00c      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800fecc:	230c      	movs	r3, #12
 800fece:	e00a      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800fed0:	230a      	movs	r3, #10
 800fed2:	e008      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800fed4:	2308      	movs	r3, #8
 800fed6:	e006      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800fed8:	2306      	movs	r3, #6
 800feda:	e004      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800fedc:	2304      	movs	r3, #4
 800fede:	e002      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800fee0:	2302      	movs	r3, #2
 800fee2:	e000      	b.n	800fee6 <UART_SetConfig+0x1f6e>
 800fee4:	2301      	movs	r3, #1
 800fee6:	fbb2 f2f3 	udiv	r2, r2, r3
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	085b      	lsrs	r3, r3, #1
 800fef0:	441a      	add	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fefe:	e195      	b.n	801022c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff00:	4b87      	ldr	r3, [pc, #540]	; (8010120 <UART_SetConfig+0x21a8>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	f003 0320 	and.w	r3, r3, #32
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d05d      	beq.n	800ffc8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff0c:	4b84      	ldr	r3, [pc, #528]	; (8010120 <UART_SetConfig+0x21a8>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	08db      	lsrs	r3, r3, #3
 800ff12:	f003 0303 	and.w	r3, r3, #3
 800ff16:	4a83      	ldr	r2, [pc, #524]	; (8010124 <UART_SetConfig+0x21ac>)
 800ff18:	40da      	lsrs	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d044      	beq.n	800ffac <UART_SetConfig+0x2034>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d03e      	beq.n	800ffa8 <UART_SetConfig+0x2030>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff2e:	2b02      	cmp	r3, #2
 800ff30:	d038      	beq.n	800ffa4 <UART_SetConfig+0x202c>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff36:	2b03      	cmp	r3, #3
 800ff38:	d032      	beq.n	800ffa0 <UART_SetConfig+0x2028>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3e:	2b04      	cmp	r3, #4
 800ff40:	d02c      	beq.n	800ff9c <UART_SetConfig+0x2024>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff46:	2b05      	cmp	r3, #5
 800ff48:	d026      	beq.n	800ff98 <UART_SetConfig+0x2020>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4e:	2b06      	cmp	r3, #6
 800ff50:	d020      	beq.n	800ff94 <UART_SetConfig+0x201c>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff56:	2b07      	cmp	r3, #7
 800ff58:	d01a      	beq.n	800ff90 <UART_SetConfig+0x2018>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5e:	2b08      	cmp	r3, #8
 800ff60:	d014      	beq.n	800ff8c <UART_SetConfig+0x2014>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff66:	2b09      	cmp	r3, #9
 800ff68:	d00e      	beq.n	800ff88 <UART_SetConfig+0x2010>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6e:	2b0a      	cmp	r3, #10
 800ff70:	d008      	beq.n	800ff84 <UART_SetConfig+0x200c>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff76:	2b0b      	cmp	r3, #11
 800ff78:	d102      	bne.n	800ff80 <UART_SetConfig+0x2008>
 800ff7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff7e:	e016      	b.n	800ffae <UART_SetConfig+0x2036>
 800ff80:	2301      	movs	r3, #1
 800ff82:	e014      	b.n	800ffae <UART_SetConfig+0x2036>
 800ff84:	2380      	movs	r3, #128	; 0x80
 800ff86:	e012      	b.n	800ffae <UART_SetConfig+0x2036>
 800ff88:	2340      	movs	r3, #64	; 0x40
 800ff8a:	e010      	b.n	800ffae <UART_SetConfig+0x2036>
 800ff8c:	2320      	movs	r3, #32
 800ff8e:	e00e      	b.n	800ffae <UART_SetConfig+0x2036>
 800ff90:	2310      	movs	r3, #16
 800ff92:	e00c      	b.n	800ffae <UART_SetConfig+0x2036>
 800ff94:	230c      	movs	r3, #12
 800ff96:	e00a      	b.n	800ffae <UART_SetConfig+0x2036>
 800ff98:	230a      	movs	r3, #10
 800ff9a:	e008      	b.n	800ffae <UART_SetConfig+0x2036>
 800ff9c:	2308      	movs	r3, #8
 800ff9e:	e006      	b.n	800ffae <UART_SetConfig+0x2036>
 800ffa0:	2306      	movs	r3, #6
 800ffa2:	e004      	b.n	800ffae <UART_SetConfig+0x2036>
 800ffa4:	2304      	movs	r3, #4
 800ffa6:	e002      	b.n	800ffae <UART_SetConfig+0x2036>
 800ffa8:	2302      	movs	r3, #2
 800ffaa:	e000      	b.n	800ffae <UART_SetConfig+0x2036>
 800ffac:	2301      	movs	r3, #1
 800ffae:	fbb2 f2f3 	udiv	r2, r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	085b      	lsrs	r3, r3, #1
 800ffb8:	441a      	add	r2, r3
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800ffc6:	e131      	b.n	801022c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d043      	beq.n	8010058 <UART_SetConfig+0x20e0>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d03d      	beq.n	8010054 <UART_SetConfig+0x20dc>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffdc:	2b02      	cmp	r3, #2
 800ffde:	d037      	beq.n	8010050 <UART_SetConfig+0x20d8>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe4:	2b03      	cmp	r3, #3
 800ffe6:	d031      	beq.n	801004c <UART_SetConfig+0x20d4>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffec:	2b04      	cmp	r3, #4
 800ffee:	d02b      	beq.n	8010048 <UART_SetConfig+0x20d0>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff4:	2b05      	cmp	r3, #5
 800fff6:	d025      	beq.n	8010044 <UART_SetConfig+0x20cc>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fffc:	2b06      	cmp	r3, #6
 800fffe:	d01f      	beq.n	8010040 <UART_SetConfig+0x20c8>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010004:	2b07      	cmp	r3, #7
 8010006:	d019      	beq.n	801003c <UART_SetConfig+0x20c4>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000c:	2b08      	cmp	r3, #8
 801000e:	d013      	beq.n	8010038 <UART_SetConfig+0x20c0>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010014:	2b09      	cmp	r3, #9
 8010016:	d00d      	beq.n	8010034 <UART_SetConfig+0x20bc>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001c:	2b0a      	cmp	r3, #10
 801001e:	d007      	beq.n	8010030 <UART_SetConfig+0x20b8>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010024:	2b0b      	cmp	r3, #11
 8010026:	d101      	bne.n	801002c <UART_SetConfig+0x20b4>
 8010028:	4b3f      	ldr	r3, [pc, #252]	; (8010128 <UART_SetConfig+0x21b0>)
 801002a:	e016      	b.n	801005a <UART_SetConfig+0x20e2>
 801002c:	4b3d      	ldr	r3, [pc, #244]	; (8010124 <UART_SetConfig+0x21ac>)
 801002e:	e014      	b.n	801005a <UART_SetConfig+0x20e2>
 8010030:	4b3e      	ldr	r3, [pc, #248]	; (801012c <UART_SetConfig+0x21b4>)
 8010032:	e012      	b.n	801005a <UART_SetConfig+0x20e2>
 8010034:	4b3e      	ldr	r3, [pc, #248]	; (8010130 <UART_SetConfig+0x21b8>)
 8010036:	e010      	b.n	801005a <UART_SetConfig+0x20e2>
 8010038:	4b3e      	ldr	r3, [pc, #248]	; (8010134 <UART_SetConfig+0x21bc>)
 801003a:	e00e      	b.n	801005a <UART_SetConfig+0x20e2>
 801003c:	4b3e      	ldr	r3, [pc, #248]	; (8010138 <UART_SetConfig+0x21c0>)
 801003e:	e00c      	b.n	801005a <UART_SetConfig+0x20e2>
 8010040:	4b3e      	ldr	r3, [pc, #248]	; (801013c <UART_SetConfig+0x21c4>)
 8010042:	e00a      	b.n	801005a <UART_SetConfig+0x20e2>
 8010044:	4b3e      	ldr	r3, [pc, #248]	; (8010140 <UART_SetConfig+0x21c8>)
 8010046:	e008      	b.n	801005a <UART_SetConfig+0x20e2>
 8010048:	4b3e      	ldr	r3, [pc, #248]	; (8010144 <UART_SetConfig+0x21cc>)
 801004a:	e006      	b.n	801005a <UART_SetConfig+0x20e2>
 801004c:	4b3e      	ldr	r3, [pc, #248]	; (8010148 <UART_SetConfig+0x21d0>)
 801004e:	e004      	b.n	801005a <UART_SetConfig+0x20e2>
 8010050:	4b3e      	ldr	r3, [pc, #248]	; (801014c <UART_SetConfig+0x21d4>)
 8010052:	e002      	b.n	801005a <UART_SetConfig+0x20e2>
 8010054:	4b3e      	ldr	r3, [pc, #248]	; (8010150 <UART_SetConfig+0x21d8>)
 8010056:	e000      	b.n	801005a <UART_SetConfig+0x20e2>
 8010058:	4b32      	ldr	r3, [pc, #200]	; (8010124 <UART_SetConfig+0x21ac>)
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	6852      	ldr	r2, [r2, #4]
 801005e:	0852      	lsrs	r2, r2, #1
 8010060:	441a      	add	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	fbb2 f3f3 	udiv	r3, r2, r3
 801006a:	b29b      	uxth	r3, r3
 801006c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801006e:	e0dd      	b.n	801022c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010074:	2b00      	cmp	r3, #0
 8010076:	d046      	beq.n	8010106 <UART_SetConfig+0x218e>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801007c:	2b01      	cmp	r3, #1
 801007e:	d040      	beq.n	8010102 <UART_SetConfig+0x218a>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010084:	2b02      	cmp	r3, #2
 8010086:	d03a      	beq.n	80100fe <UART_SetConfig+0x2186>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008c:	2b03      	cmp	r3, #3
 801008e:	d034      	beq.n	80100fa <UART_SetConfig+0x2182>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010094:	2b04      	cmp	r3, #4
 8010096:	d02e      	beq.n	80100f6 <UART_SetConfig+0x217e>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801009c:	2b05      	cmp	r3, #5
 801009e:	d028      	beq.n	80100f2 <UART_SetConfig+0x217a>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a4:	2b06      	cmp	r3, #6
 80100a6:	d022      	beq.n	80100ee <UART_SetConfig+0x2176>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ac:	2b07      	cmp	r3, #7
 80100ae:	d01c      	beq.n	80100ea <UART_SetConfig+0x2172>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b4:	2b08      	cmp	r3, #8
 80100b6:	d016      	beq.n	80100e6 <UART_SetConfig+0x216e>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100bc:	2b09      	cmp	r3, #9
 80100be:	d00f      	beq.n	80100e0 <UART_SetConfig+0x2168>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c4:	2b0a      	cmp	r3, #10
 80100c6:	d008      	beq.n	80100da <UART_SetConfig+0x2162>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100cc:	2b0b      	cmp	r3, #11
 80100ce:	d102      	bne.n	80100d6 <UART_SetConfig+0x215e>
 80100d0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80100d4:	e018      	b.n	8010108 <UART_SetConfig+0x2190>
 80100d6:	4b18      	ldr	r3, [pc, #96]	; (8010138 <UART_SetConfig+0x21c0>)
 80100d8:	e016      	b.n	8010108 <UART_SetConfig+0x2190>
 80100da:	f647 2312 	movw	r3, #31250	; 0x7a12
 80100de:	e013      	b.n	8010108 <UART_SetConfig+0x2190>
 80100e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80100e4:	e010      	b.n	8010108 <UART_SetConfig+0x2190>
 80100e6:	4b1b      	ldr	r3, [pc, #108]	; (8010154 <UART_SetConfig+0x21dc>)
 80100e8:	e00e      	b.n	8010108 <UART_SetConfig+0x2190>
 80100ea:	4b0f      	ldr	r3, [pc, #60]	; (8010128 <UART_SetConfig+0x21b0>)
 80100ec:	e00c      	b.n	8010108 <UART_SetConfig+0x2190>
 80100ee:	4b1a      	ldr	r3, [pc, #104]	; (8010158 <UART_SetConfig+0x21e0>)
 80100f0:	e00a      	b.n	8010108 <UART_SetConfig+0x2190>
 80100f2:	4b1a      	ldr	r3, [pc, #104]	; (801015c <UART_SetConfig+0x21e4>)
 80100f4:	e008      	b.n	8010108 <UART_SetConfig+0x2190>
 80100f6:	4b0d      	ldr	r3, [pc, #52]	; (801012c <UART_SetConfig+0x21b4>)
 80100f8:	e006      	b.n	8010108 <UART_SetConfig+0x2190>
 80100fa:	4b19      	ldr	r3, [pc, #100]	; (8010160 <UART_SetConfig+0x21e8>)
 80100fc:	e004      	b.n	8010108 <UART_SetConfig+0x2190>
 80100fe:	4b0c      	ldr	r3, [pc, #48]	; (8010130 <UART_SetConfig+0x21b8>)
 8010100:	e002      	b.n	8010108 <UART_SetConfig+0x2190>
 8010102:	4b0c      	ldr	r3, [pc, #48]	; (8010134 <UART_SetConfig+0x21bc>)
 8010104:	e000      	b.n	8010108 <UART_SetConfig+0x2190>
 8010106:	4b0c      	ldr	r3, [pc, #48]	; (8010138 <UART_SetConfig+0x21c0>)
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	6852      	ldr	r2, [r2, #4]
 801010c:	0852      	lsrs	r2, r2, #1
 801010e:	441a      	add	r2, r3
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	fbb2 f3f3 	udiv	r3, r2, r3
 8010118:	b29b      	uxth	r3, r3
 801011a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801011c:	e086      	b.n	801022c <UART_SetConfig+0x22b4>
 801011e:	bf00      	nop
 8010120:	58024400 	.word	0x58024400
 8010124:	03d09000 	.word	0x03d09000
 8010128:	0003d090 	.word	0x0003d090
 801012c:	0007a120 	.word	0x0007a120
 8010130:	000f4240 	.word	0x000f4240
 8010134:	001e8480 	.word	0x001e8480
 8010138:	003d0900 	.word	0x003d0900
 801013c:	00516155 	.word	0x00516155
 8010140:	0061a800 	.word	0x0061a800
 8010144:	007a1200 	.word	0x007a1200
 8010148:	00a2c2aa 	.word	0x00a2c2aa
 801014c:	00f42400 	.word	0x00f42400
 8010150:	01e84800 	.word	0x01e84800
 8010154:	0001e848 	.word	0x0001e848
 8010158:	00051615 	.word	0x00051615
 801015c:	00061a80 	.word	0x00061a80
 8010160:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010168:	2b00      	cmp	r3, #0
 801016a:	d04e      	beq.n	801020a <UART_SetConfig+0x2292>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010170:	2b01      	cmp	r3, #1
 8010172:	d047      	beq.n	8010204 <UART_SetConfig+0x228c>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010178:	2b02      	cmp	r3, #2
 801017a:	d040      	beq.n	80101fe <UART_SetConfig+0x2286>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010180:	2b03      	cmp	r3, #3
 8010182:	d039      	beq.n	80101f8 <UART_SetConfig+0x2280>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010188:	2b04      	cmp	r3, #4
 801018a:	d032      	beq.n	80101f2 <UART_SetConfig+0x227a>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010190:	2b05      	cmp	r3, #5
 8010192:	d02b      	beq.n	80101ec <UART_SetConfig+0x2274>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010198:	2b06      	cmp	r3, #6
 801019a:	d024      	beq.n	80101e6 <UART_SetConfig+0x226e>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a0:	2b07      	cmp	r3, #7
 80101a2:	d01d      	beq.n	80101e0 <UART_SetConfig+0x2268>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a8:	2b08      	cmp	r3, #8
 80101aa:	d016      	beq.n	80101da <UART_SetConfig+0x2262>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b0:	2b09      	cmp	r3, #9
 80101b2:	d00f      	beq.n	80101d4 <UART_SetConfig+0x225c>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b8:	2b0a      	cmp	r3, #10
 80101ba:	d008      	beq.n	80101ce <UART_SetConfig+0x2256>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c0:	2b0b      	cmp	r3, #11
 80101c2:	d101      	bne.n	80101c8 <UART_SetConfig+0x2250>
 80101c4:	2380      	movs	r3, #128	; 0x80
 80101c6:	e022      	b.n	801020e <UART_SetConfig+0x2296>
 80101c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80101cc:	e01f      	b.n	801020e <UART_SetConfig+0x2296>
 80101ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101d2:	e01c      	b.n	801020e <UART_SetConfig+0x2296>
 80101d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101d8:	e019      	b.n	801020e <UART_SetConfig+0x2296>
 80101da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101de:	e016      	b.n	801020e <UART_SetConfig+0x2296>
 80101e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80101e4:	e013      	b.n	801020e <UART_SetConfig+0x2296>
 80101e6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80101ea:	e010      	b.n	801020e <UART_SetConfig+0x2296>
 80101ec:	f640 43cc 	movw	r3, #3276	; 0xccc
 80101f0:	e00d      	b.n	801020e <UART_SetConfig+0x2296>
 80101f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101f6:	e00a      	b.n	801020e <UART_SetConfig+0x2296>
 80101f8:	f241 5355 	movw	r3, #5461	; 0x1555
 80101fc:	e007      	b.n	801020e <UART_SetConfig+0x2296>
 80101fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010202:	e004      	b.n	801020e <UART_SetConfig+0x2296>
 8010204:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010208:	e001      	b.n	801020e <UART_SetConfig+0x2296>
 801020a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	6852      	ldr	r2, [r2, #4]
 8010212:	0852      	lsrs	r2, r2, #1
 8010214:	441a      	add	r2, r3
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	fbb2 f3f3 	udiv	r3, r2, r3
 801021e:	b29b      	uxth	r3, r3
 8010220:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010222:	e003      	b.n	801022c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8010224:	2301      	movs	r3, #1
 8010226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 801022a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801022c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801022e:	2b0f      	cmp	r3, #15
 8010230:	d908      	bls.n	8010244 <UART_SetConfig+0x22cc>
 8010232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010238:	d204      	bcs.n	8010244 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010240:	60da      	str	r2, [r3, #12]
 8010242:	e002      	b.n	801024a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8010244:	2301      	movs	r3, #1
 8010246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2201      	movs	r2, #1
 801024e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2201      	movs	r2, #1
 8010256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2200      	movs	r2, #0
 801025e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2200      	movs	r2, #0
 8010264:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8010266:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 801026a:	4618      	mov	r0, r3
 801026c:	3740      	adds	r7, #64	; 0x40
 801026e:	46bd      	mov	sp, r7
 8010270:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08010274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010274:	b480      	push	{r7}
 8010276:	b083      	sub	sp, #12
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010280:	f003 0301 	and.w	r3, r3, #1
 8010284:	2b00      	cmp	r3, #0
 8010286:	d00a      	beq.n	801029e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	430a      	orrs	r2, r1
 801029c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102a2:	f003 0302 	and.w	r3, r3, #2
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00a      	beq.n	80102c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	430a      	orrs	r2, r1
 80102be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102c4:	f003 0304 	and.w	r3, r3, #4
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00a      	beq.n	80102e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	430a      	orrs	r2, r1
 80102e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102e6:	f003 0308 	and.w	r3, r3, #8
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d00a      	beq.n	8010304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	430a      	orrs	r2, r1
 8010302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010308:	f003 0310 	and.w	r3, r3, #16
 801030c:	2b00      	cmp	r3, #0
 801030e:	d00a      	beq.n	8010326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	689b      	ldr	r3, [r3, #8]
 8010316:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	430a      	orrs	r2, r1
 8010324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801032a:	f003 0320 	and.w	r3, r3, #32
 801032e:	2b00      	cmp	r3, #0
 8010330:	d00a      	beq.n	8010348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	689b      	ldr	r3, [r3, #8]
 8010338:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	430a      	orrs	r2, r1
 8010346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801034c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010350:	2b00      	cmp	r3, #0
 8010352:	d01a      	beq.n	801038a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	430a      	orrs	r2, r1
 8010368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801036e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010372:	d10a      	bne.n	801038a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	430a      	orrs	r2, r1
 8010388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801038e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00a      	beq.n	80103ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	430a      	orrs	r2, r1
 80103aa:	605a      	str	r2, [r3, #4]
  }
}
 80103ac:	bf00      	nop
 80103ae:	370c      	adds	r7, #12
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b086      	sub	sp, #24
 80103bc:	af02      	add	r7, sp, #8
 80103be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80103c8:	f7f1 fbfc 	bl	8001bc4 <HAL_GetTick>
 80103cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f003 0308 	and.w	r3, r3, #8
 80103d8:	2b08      	cmp	r3, #8
 80103da:	d10e      	bne.n	80103fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80103dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80103e0:	9300      	str	r3, [sp, #0]
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2200      	movs	r2, #0
 80103e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 f82c 	bl	8010448 <UART_WaitOnFlagUntilTimeout>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d001      	beq.n	80103fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80103f6:	2303      	movs	r3, #3
 80103f8:	e022      	b.n	8010440 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f003 0304 	and.w	r3, r3, #4
 8010404:	2b04      	cmp	r3, #4
 8010406:	d10e      	bne.n	8010426 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801040c:	9300      	str	r3, [sp, #0]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2200      	movs	r2, #0
 8010412:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 f816 	bl	8010448 <UART_WaitOnFlagUntilTimeout>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d001      	beq.n	8010426 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010422:	2303      	movs	r3, #3
 8010424:	e00c      	b.n	8010440 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2220      	movs	r2, #32
 801042a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2220      	movs	r2, #32
 8010432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801043e:	2300      	movs	r3, #0
}
 8010440:	4618      	mov	r0, r3
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	603b      	str	r3, [r7, #0]
 8010454:	4613      	mov	r3, r2
 8010456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010458:	e062      	b.n	8010520 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010460:	d05e      	beq.n	8010520 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010462:	f7f1 fbaf 	bl	8001bc4 <HAL_GetTick>
 8010466:	4602      	mov	r2, r0
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	69ba      	ldr	r2, [r7, #24]
 801046e:	429a      	cmp	r2, r3
 8010470:	d302      	bcc.n	8010478 <UART_WaitOnFlagUntilTimeout+0x30>
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d11d      	bne.n	80104b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010486:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	689a      	ldr	r2, [r3, #8]
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	f022 0201 	bic.w	r2, r2, #1
 8010496:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2220      	movs	r2, #32
 801049c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2220      	movs	r2, #32
 80104a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80104b0:	2303      	movs	r3, #3
 80104b2:	e045      	b.n	8010540 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f003 0304 	and.w	r3, r3, #4
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d02e      	beq.n	8010520 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	69db      	ldr	r3, [r3, #28]
 80104c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104d0:	d126      	bne.n	8010520 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80104da:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80104ea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	689a      	ldr	r2, [r3, #8]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f022 0201 	bic.w	r2, r2, #1
 80104fa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2220      	movs	r2, #32
 8010500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2220      	movs	r2, #32
 8010508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2220      	movs	r2, #32
 8010510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2200      	movs	r2, #0
 8010518:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 801051c:	2303      	movs	r3, #3
 801051e:	e00f      	b.n	8010540 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	69da      	ldr	r2, [r3, #28]
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	4013      	ands	r3, r2
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	429a      	cmp	r2, r3
 801052e:	bf0c      	ite	eq
 8010530:	2301      	moveq	r3, #1
 8010532:	2300      	movne	r3, #0
 8010534:	b2db      	uxtb	r3, r3
 8010536:	461a      	mov	r2, r3
 8010538:	79fb      	ldrb	r3, [r7, #7]
 801053a:	429a      	cmp	r2, r3
 801053c:	d08d      	beq.n	801045a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801053e:	2300      	movs	r3, #0
}
 8010540:	4618      	mov	r0, r3
 8010542:	3710      	adds	r7, #16
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010548:	b480      	push	{r7}
 801054a:	b085      	sub	sp, #20
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010556:	2b01      	cmp	r3, #1
 8010558:	d101      	bne.n	801055e <HAL_UARTEx_DisableFifoMode+0x16>
 801055a:	2302      	movs	r3, #2
 801055c:	e027      	b.n	80105ae <HAL_UARTEx_DisableFifoMode+0x66>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2201      	movs	r2, #1
 8010562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2224      	movs	r2, #36	; 0x24
 801056a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f022 0201 	bic.w	r2, r2, #1
 8010584:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801058c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	68fa      	ldr	r2, [r7, #12]
 801059a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2220      	movs	r2, #32
 80105a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2200      	movs	r2, #0
 80105a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80105ac:	2300      	movs	r3, #0
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3714      	adds	r7, #20
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr

080105ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b084      	sub	sp, #16
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
 80105c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	d101      	bne.n	80105d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80105ce:	2302      	movs	r3, #2
 80105d0:	e02d      	b.n	801062e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2201      	movs	r2, #1
 80105d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2224      	movs	r2, #36	; 0x24
 80105de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f022 0201 	bic.w	r2, r2, #1
 80105f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	683a      	ldr	r2, [r7, #0]
 801060a:	430a      	orrs	r2, r1
 801060c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 f850 	bl	80106b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	68fa      	ldr	r2, [r7, #12]
 801061a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2220      	movs	r2, #32
 8010620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801062c:	2300      	movs	r3, #0
}
 801062e:	4618      	mov	r0, r3
 8010630:	3710      	adds	r7, #16
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}

08010636 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010636:	b580      	push	{r7, lr}
 8010638:	b084      	sub	sp, #16
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
 801063e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010646:	2b01      	cmp	r3, #1
 8010648:	d101      	bne.n	801064e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801064a:	2302      	movs	r3, #2
 801064c:	e02d      	b.n	80106aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2201      	movs	r2, #1
 8010652:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2224      	movs	r2, #36	; 0x24
 801065a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f022 0201 	bic.w	r2, r2, #1
 8010674:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	689b      	ldr	r3, [r3, #8]
 801067c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	683a      	ldr	r2, [r7, #0]
 8010686:	430a      	orrs	r2, r1
 8010688:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f000 f812 	bl	80106b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	68fa      	ldr	r2, [r7, #12]
 8010696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2220      	movs	r2, #32
 801069c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2200      	movs	r2, #0
 80106a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80106a8:	2300      	movs	r3, #0
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
	...

080106b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b089      	sub	sp, #36	; 0x24
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80106bc:	4a2f      	ldr	r2, [pc, #188]	; (801077c <UARTEx_SetNbDataToProcess+0xc8>)
 80106be:	f107 0314 	add.w	r3, r7, #20
 80106c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106c6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80106ca:	4a2d      	ldr	r2, [pc, #180]	; (8010780 <UARTEx_SetNbDataToProcess+0xcc>)
 80106cc:	f107 030c 	add.w	r3, r7, #12
 80106d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106d4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d108      	bne.n	80106f2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2201      	movs	r2, #1
 80106e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2201      	movs	r2, #1
 80106ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80106f0:	e03d      	b.n	801076e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80106f2:	2308      	movs	r3, #8
 80106f4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80106f6:	2308      	movs	r3, #8
 80106f8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	689b      	ldr	r3, [r3, #8]
 8010700:	0e5b      	lsrs	r3, r3, #25
 8010702:	b2db      	uxtb	r3, r3
 8010704:	f003 0307 	and.w	r3, r3, #7
 8010708:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	689b      	ldr	r3, [r3, #8]
 8010710:	0f5b      	lsrs	r3, r3, #29
 8010712:	b2db      	uxtb	r3, r3
 8010714:	f003 0307 	and.w	r3, r3, #7
 8010718:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801071a:	7fbb      	ldrb	r3, [r7, #30]
 801071c:	7f3a      	ldrb	r2, [r7, #28]
 801071e:	f107 0120 	add.w	r1, r7, #32
 8010722:	440a      	add	r2, r1
 8010724:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010728:	fb02 f303 	mul.w	r3, r2, r3
 801072c:	7f3a      	ldrb	r2, [r7, #28]
 801072e:	f107 0120 	add.w	r1, r7, #32
 8010732:	440a      	add	r2, r1
 8010734:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010738:	fb93 f3f2 	sdiv	r3, r3, r2
 801073c:	b29a      	uxth	r2, r3
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010744:	7ffb      	ldrb	r3, [r7, #31]
 8010746:	7f7a      	ldrb	r2, [r7, #29]
 8010748:	f107 0120 	add.w	r1, r7, #32
 801074c:	440a      	add	r2, r1
 801074e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010752:	fb02 f303 	mul.w	r3, r2, r3
 8010756:	7f7a      	ldrb	r2, [r7, #29]
 8010758:	f107 0120 	add.w	r1, r7, #32
 801075c:	440a      	add	r2, r1
 801075e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010762:	fb93 f3f2 	sdiv	r3, r3, r2
 8010766:	b29a      	uxth	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801076e:	bf00      	nop
 8010770:	3724      	adds	r7, #36	; 0x24
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	0801b310 	.word	0x0801b310
 8010780:	0801b318 	.word	0x0801b318

08010784 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010784:	b084      	sub	sp, #16
 8010786:	b480      	push	{r7}
 8010788:	b085      	sub	sp, #20
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
 801078e:	f107 001c 	add.w	r0, r7, #28
 8010792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801079a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 801079c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801079e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80107a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80107a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80107a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80107a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80107a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80107aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	4313      	orrs	r3, r2
 80107b0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	685a      	ldr	r2, [r3, #4]
 80107b6:	4b07      	ldr	r3, [pc, #28]	; (80107d4 <SDMMC_Init+0x50>)
 80107b8:	4013      	ands	r3, r2
 80107ba:	68fa      	ldr	r2, [r7, #12]
 80107bc:	431a      	orrs	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80107c2:	2300      	movs	r3, #0
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3714      	adds	r7, #20
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	b004      	add	sp, #16
 80107d0:	4770      	bx	lr
 80107d2:	bf00      	nop
 80107d4:	ffc02c00 	.word	0xffc02c00

080107d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80107d8:	b480      	push	{r7}
 80107da:	b083      	sub	sp, #12
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	370c      	adds	r7, #12
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr

080107f2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80107f2:	b480      	push	{r7}
 80107f4:	b083      	sub	sp, #12
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
 80107fa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	370c      	adds	r7, #12
 801080c:	46bd      	mov	sp, r7
 801080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010812:	4770      	bx	lr

08010814 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010814:	b480      	push	{r7}
 8010816:	b083      	sub	sp, #12
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	f043 0203 	orr.w	r2, r3, #3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010828:	2300      	movs	r3, #0
}
 801082a:	4618      	mov	r0, r3
 801082c:	370c      	adds	r7, #12
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr

08010836 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010836:	b480      	push	{r7}
 8010838:	b083      	sub	sp, #12
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	f003 0303 	and.w	r3, r3, #3
}
 8010846:	4618      	mov	r0, r3
 8010848:	370c      	adds	r7, #12
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr
	...

08010854 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010854:	b480      	push	{r7}
 8010856:	b085      	sub	sp, #20
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801085e:	2300      	movs	r3, #0
 8010860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010872:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010878:	431a      	orrs	r2, r3
                       Command->CPSM);
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801087e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010880:	68fa      	ldr	r2, [r7, #12]
 8010882:	4313      	orrs	r3, r2
 8010884:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	68da      	ldr	r2, [r3, #12]
 801088a:	4b06      	ldr	r3, [pc, #24]	; (80108a4 <SDMMC_SendCommand+0x50>)
 801088c:	4013      	ands	r3, r2
 801088e:	68fa      	ldr	r2, [r7, #12]
 8010890:	431a      	orrs	r2, r3
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010896:	2300      	movs	r3, #0
}
 8010898:	4618      	mov	r0, r3
 801089a:	3714      	adds	r7, #20
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr
 80108a4:	fffee0c0 	.word	0xfffee0c0

080108a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	691b      	ldr	r3, [r3, #16]
 80108b4:	b2db      	uxtb	r3, r3
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	370c      	adds	r7, #12
 80108ba:	46bd      	mov	sp, r7
 80108bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c0:	4770      	bx	lr

080108c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80108c2:	b480      	push	{r7}
 80108c4:	b085      	sub	sp, #20
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	6078      	str	r0, [r7, #4]
 80108ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	3314      	adds	r3, #20
 80108d0:	461a      	mov	r2, r3
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	4413      	add	r3, r2
 80108d6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3714      	adds	r7, #20
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr

080108e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b085      	sub	sp, #20
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80108f2:	2300      	movs	r3, #0
 80108f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	685a      	ldr	r2, [r3, #4]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801090e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010914:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801091a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801091c:	68fa      	ldr	r2, [r7, #12]
 801091e:	4313      	orrs	r3, r2
 8010920:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010926:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	431a      	orrs	r2, r3
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010932:	2300      	movs	r3, #0

}
 8010934:	4618      	mov	r0, r3
 8010936:	3714      	adds	r7, #20
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr

08010940 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b088      	sub	sp, #32
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801094e:	2310      	movs	r3, #16
 8010950:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010958:	2300      	movs	r3, #0
 801095a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801095c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010960:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010962:	f107 0308 	add.w	r3, r7, #8
 8010966:	4619      	mov	r1, r3
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7ff ff73 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801096e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010972:	2110      	movs	r1, #16
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f000 faab 	bl	8010ed0 <SDMMC_GetCmdResp1>
 801097a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801097c:	69fb      	ldr	r3, [r7, #28]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3720      	adds	r7, #32
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010986:	b580      	push	{r7, lr}
 8010988:	b088      	sub	sp, #32
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
 801098e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010994:	2311      	movs	r3, #17
 8010996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010998:	f44f 7380 	mov.w	r3, #256	; 0x100
 801099c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801099e:	2300      	movs	r3, #0
 80109a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109a8:	f107 0308 	add.w	r3, r7, #8
 80109ac:	4619      	mov	r1, r3
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f7ff ff50 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80109b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80109b8:	2111      	movs	r1, #17
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 fa88 	bl	8010ed0 <SDMMC_GetCmdResp1>
 80109c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109c2:	69fb      	ldr	r3, [r7, #28]
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3720      	adds	r7, #32
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b088      	sub	sp, #32
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80109da:	2312      	movs	r3, #18
 80109dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109e4:	2300      	movs	r3, #0
 80109e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109ee:	f107 0308 	add.w	r3, r7, #8
 80109f2:	4619      	mov	r1, r3
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7ff ff2d 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80109fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80109fe:	2112      	movs	r1, #18
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f000 fa65 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010a06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a08:	69fb      	ldr	r3, [r7, #28]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3720      	adds	r7, #32
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}

08010a12 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b088      	sub	sp, #32
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010a20:	2318      	movs	r3, #24
 8010a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a34:	f107 0308 	add.w	r3, r7, #8
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f7ff ff0a 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a44:	2118      	movs	r1, #24
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 fa42 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a4e:	69fb      	ldr	r3, [r7, #28]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3720      	adds	r7, #32
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b088      	sub	sp, #32
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010a66:	2319      	movs	r3, #25
 8010a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a70:	2300      	movs	r3, #0
 8010a72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a7a:	f107 0308 	add.w	r3, r7, #8
 8010a7e:	4619      	mov	r1, r3
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f7ff fee7 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a8a:	2119      	movs	r1, #25
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f000 fa1f 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010a92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a94:	69fb      	ldr	r3, [r7, #28]
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3720      	adds	r7, #32
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
	...

08010aa0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b088      	sub	sp, #32
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010aac:	230c      	movs	r3, #12
 8010aae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010abe:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ad8:	f107 0308 	add.w	r3, r7, #8
 8010adc:	4619      	mov	r1, r3
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f7ff feb8 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010ae4:	4a0b      	ldr	r2, [pc, #44]	; (8010b14 <SDMMC_CmdStopTransfer+0x74>)
 8010ae6:	210c      	movs	r1, #12
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 f9f1 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010aee:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010b02:	d101      	bne.n	8010b08 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010b04:	2300      	movs	r3, #0
 8010b06:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010b08:	69fb      	ldr	r3, [r7, #28]
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3720      	adds	r7, #32
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}
 8010b12:	bf00      	nop
 8010b14:	05f5e100 	.word	0x05f5e100

08010b18 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b08a      	sub	sp, #40	; 0x28
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010b28:	2307      	movs	r3, #7
 8010b2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b30:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b32:	2300      	movs	r3, #0
 8010b34:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b3a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b3c:	f107 0310 	add.w	r3, r7, #16
 8010b40:	4619      	mov	r1, r3
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f7ff fe86 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b4c:	2107      	movs	r1, #7
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f000 f9be 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010b54:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3728      	adds	r7, #40	; 0x28
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b088      	sub	sp, #32
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010b70:	2300      	movs	r3, #0
 8010b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b74:	2300      	movs	r3, #0
 8010b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b7e:	f107 0308 	add.w	r3, r7, #8
 8010b82:	4619      	mov	r1, r3
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7ff fe65 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 f976 	bl	8010e7c <SDMMC_GetCmdError>
 8010b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b92:	69fb      	ldr	r3, [r7, #28]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3720      	adds	r7, #32
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b088      	sub	sp, #32
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010ba4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010baa:	2308      	movs	r3, #8
 8010bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bbe:	f107 0308 	add.w	r3, r7, #8
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7ff fe45 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 fb6a 	bl	80112a4 <SDMMC_GetCmdResp7>
 8010bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bd2:	69fb      	ldr	r3, [r7, #28]
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3720      	adds	r7, #32
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b088      	sub	sp, #32
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010bea:	2337      	movs	r3, #55	; 0x37
 8010bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bfe:	f107 0308 	add.w	r3, r7, #8
 8010c02:	4619      	mov	r1, r3
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f7ff fe25 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c0e:	2137      	movs	r1, #55	; 0x37
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 f95d 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010c16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c18:	69fb      	ldr	r3, [r7, #28]
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3720      	adds	r7, #32
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b088      	sub	sp, #32
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010c30:	2329      	movs	r3, #41	; 0x29
 8010c32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c44:	f107 0308 	add.w	r3, r7, #8
 8010c48:	4619      	mov	r1, r3
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f7ff fe02 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f000 fa75 	bl	8011140 <SDMMC_GetCmdResp3>
 8010c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c58:	69fb      	ldr	r3, [r7, #28]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3720      	adds	r7, #32
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b088      	sub	sp, #32
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
 8010c6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010c70:	2306      	movs	r3, #6
 8010c72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c84:	f107 0308 	add.w	r3, r7, #8
 8010c88:	4619      	mov	r1, r3
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f7ff fde2 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c94:	2106      	movs	r1, #6
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f000 f91a 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c9e:	69fb      	ldr	r3, [r7, #28]
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3720      	adds	r7, #32
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b088      	sub	sp, #32
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010cb4:	2333      	movs	r3, #51	; 0x33
 8010cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010cbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cc8:	f107 0308 	add.w	r3, r7, #8
 8010ccc:	4619      	mov	r1, r3
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f7ff fdc0 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cd8:	2133      	movs	r1, #51	; 0x33
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 f8f8 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010ce0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ce2:	69fb      	ldr	r3, [r7, #28]
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3720      	adds	r7, #32
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b088      	sub	sp, #32
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010cf8:	2302      	movs	r3, #2
 8010cfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010cfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010d00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d02:	2300      	movs	r3, #0
 8010d04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d0c:	f107 0308 	add.w	r3, r7, #8
 8010d10:	4619      	mov	r1, r3
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f7ff fd9e 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 f9c9 	bl	80110b0 <SDMMC_GetCmdResp2>
 8010d1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d20:	69fb      	ldr	r3, [r7, #28]
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3720      	adds	r7, #32
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}

08010d2a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010d2a:	b580      	push	{r7, lr}
 8010d2c:	b088      	sub	sp, #32
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	6078      	str	r0, [r7, #4]
 8010d32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010d38:	2309      	movs	r3, #9
 8010d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010d3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d42:	2300      	movs	r3, #0
 8010d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d4c:	f107 0308 	add.w	r3, r7, #8
 8010d50:	4619      	mov	r1, r3
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f7ff fd7e 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f000 f9a9 	bl	80110b0 <SDMMC_GetCmdResp2>
 8010d5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d60:	69fb      	ldr	r3, [r7, #28]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3720      	adds	r7, #32
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010d6a:	b580      	push	{r7, lr}
 8010d6c:	b088      	sub	sp, #32
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
 8010d72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010d74:	2300      	movs	r3, #0
 8010d76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010d78:	2303      	movs	r3, #3
 8010d7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d82:	2300      	movs	r3, #0
 8010d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d8c:	f107 0308 	add.w	r3, r7, #8
 8010d90:	4619      	mov	r1, r3
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f7ff fd5e 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010d98:	683a      	ldr	r2, [r7, #0]
 8010d9a:	2103      	movs	r1, #3
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 fa0b 	bl	80111b8 <SDMMC_GetCmdResp6>
 8010da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010da4:	69fb      	ldr	r3, [r7, #28]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3720      	adds	r7, #32
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}

08010dae <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010dae:	b580      	push	{r7, lr}
 8010db0:	b088      	sub	sp, #32
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
 8010db6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010dbc:	230d      	movs	r3, #13
 8010dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dd0:	f107 0308 	add.w	r3, r7, #8
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f7ff fd3c 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010de0:	210d      	movs	r1, #13
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f000 f874 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dea:	69fb      	ldr	r3, [r7, #28]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3720      	adds	r7, #32
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b088      	sub	sp, #32
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010e00:	230d      	movs	r3, #13
 8010e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e14:	f107 0308 	add.w	r3, r7, #8
 8010e18:	4619      	mov	r1, r3
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f7ff fd1a 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e24:	210d      	movs	r1, #13
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 f852 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e2e:	69fb      	ldr	r3, [r7, #28]
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3720      	adds	r7, #32
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}

08010e38 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b088      	sub	sp, #32
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8010e40:	2300      	movs	r3, #0
 8010e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8010e44:	230b      	movs	r3, #11
 8010e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e58:	f107 0308 	add.w	r3, r7, #8
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f7ff fcf8 	bl	8010854 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8010e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e68:	210b      	movs	r1, #11
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 f830 	bl	8010ed0 <SDMMC_GetCmdResp1>
 8010e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e72:	69fb      	ldr	r3, [r7, #28]
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3720      	adds	r7, #32
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010e7c:	b490      	push	{r4, r7}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e84:	4b0f      	ldr	r3, [pc, #60]	; (8010ec4 <SDMMC_GetCmdError+0x48>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	4a0f      	ldr	r2, [pc, #60]	; (8010ec8 <SDMMC_GetCmdError+0x4c>)
 8010e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8010e8e:	0a5b      	lsrs	r3, r3, #9
 8010e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e94:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010e98:	4623      	mov	r3, r4
 8010e9a:	1e5c      	subs	r4, r3, #1
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d102      	bne.n	8010ea6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ea4:	e009      	b.n	8010eba <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d0f2      	beq.n	8010e98 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	4a05      	ldr	r2, [pc, #20]	; (8010ecc <SDMMC_GetCmdError+0x50>)
 8010eb6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010eb8:	2300      	movs	r3, #0
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3708      	adds	r7, #8
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bc90      	pop	{r4, r7}
 8010ec2:	4770      	bx	lr
 8010ec4:	2400000c 	.word	0x2400000c
 8010ec8:	10624dd3 	.word	0x10624dd3
 8010ecc:	002000c5 	.word	0x002000c5

08010ed0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010ed0:	b590      	push	{r4, r7, lr}
 8010ed2:	b087      	sub	sp, #28
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	60f8      	str	r0, [r7, #12]
 8010ed8:	460b      	mov	r3, r1
 8010eda:	607a      	str	r2, [r7, #4]
 8010edc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010ede:	4b6f      	ldr	r3, [pc, #444]	; (801109c <SDMMC_GetCmdResp1+0x1cc>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	4a6f      	ldr	r2, [pc, #444]	; (80110a0 <SDMMC_GetCmdResp1+0x1d0>)
 8010ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8010ee8:	0a5b      	lsrs	r3, r3, #9
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010ef0:	4623      	mov	r3, r4
 8010ef2:	1e5c      	subs	r4, r3, #1
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d102      	bne.n	8010efe <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010efc:	e0c9      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f02:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010f04:	697a      	ldr	r2, [r7, #20]
 8010f06:	4b67      	ldr	r3, [pc, #412]	; (80110a4 <SDMMC_GetCmdResp1+0x1d4>)
 8010f08:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d0f0      	beq.n	8010ef0 <SDMMC_GetCmdResp1+0x20>
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d1eb      	bne.n	8010ef0 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f1c:	f003 0304 	and.w	r3, r3, #4
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d004      	beq.n	8010f2e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2204      	movs	r2, #4
 8010f28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f2a:	2304      	movs	r3, #4
 8010f2c:	e0b1      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f32:	f003 0301 	and.w	r3, r3, #1
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d004      	beq.n	8010f44 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f40:	2301      	movs	r3, #1
 8010f42:	e0a6      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	4a58      	ldr	r2, [pc, #352]	; (80110a8 <SDMMC_GetCmdResp1+0x1d8>)
 8010f48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010f4a:	68f8      	ldr	r0, [r7, #12]
 8010f4c:	f7ff fcac 	bl	80108a8 <SDMMC_GetCommandResponse>
 8010f50:	4603      	mov	r3, r0
 8010f52:	461a      	mov	r2, r3
 8010f54:	7afb      	ldrb	r3, [r7, #11]
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d001      	beq.n	8010f5e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	e099      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010f5e:	2100      	movs	r1, #0
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f7ff fcae 	bl	80108c2 <SDMMC_GetResponse>
 8010f66:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010f68:	693a      	ldr	r2, [r7, #16]
 8010f6a:	4b50      	ldr	r3, [pc, #320]	; (80110ac <SDMMC_GetCmdResp1+0x1dc>)
 8010f6c:	4013      	ands	r3, r2
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d101      	bne.n	8010f76 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010f72:	2300      	movs	r3, #0
 8010f74:	e08d      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	da02      	bge.n	8010f82 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010f7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010f80:	e087      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d001      	beq.n	8010f90 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010f8c:	2340      	movs	r3, #64	; 0x40
 8010f8e:	e080      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d001      	beq.n	8010f9e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010f9a:	2380      	movs	r3, #128	; 0x80
 8010f9c:	e079      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d002      	beq.n	8010fae <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010fac:	e071      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d002      	beq.n	8010fbe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010fbc:	e069      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d002      	beq.n	8010fce <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fcc:	e061      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d002      	beq.n	8010fde <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010fdc:	e059      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d002      	beq.n	8010fee <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010fec:	e051      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d002      	beq.n	8010ffe <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010ffc:	e049      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011004:	2b00      	cmp	r3, #0
 8011006:	d002      	beq.n	801100e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801100c:	e041      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011014:	2b00      	cmp	r3, #0
 8011016:	d002      	beq.n	801101e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8011018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801101c:	e039      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011024:	2b00      	cmp	r3, #0
 8011026:	d002      	beq.n	801102e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801102c:	e031      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011038:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801103c:	e029      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011044:	2b00      	cmp	r3, #0
 8011046:	d002      	beq.n	801104e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011048:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801104c:	e021      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011058:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801105c:	e019      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011064:	2b00      	cmp	r3, #0
 8011066:	d002      	beq.n	801106e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011068:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801106c:	e011      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011074:	2b00      	cmp	r3, #0
 8011076:	d002      	beq.n	801107e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011078:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801107c:	e009      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	f003 0308 	and.w	r3, r3, #8
 8011084:	2b00      	cmp	r3, #0
 8011086:	d002      	beq.n	801108e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011088:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801108c:	e001      	b.n	8011092 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801108e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011092:	4618      	mov	r0, r3
 8011094:	371c      	adds	r7, #28
 8011096:	46bd      	mov	sp, r7
 8011098:	bd90      	pop	{r4, r7, pc}
 801109a:	bf00      	nop
 801109c:	2400000c 	.word	0x2400000c
 80110a0:	10624dd3 	.word	0x10624dd3
 80110a4:	00200045 	.word	0x00200045
 80110a8:	002000c5 	.word	0x002000c5
 80110ac:	fdffe008 	.word	0xfdffe008

080110b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80110b0:	b490      	push	{r4, r7}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80110b8:	4b1e      	ldr	r3, [pc, #120]	; (8011134 <SDMMC_GetCmdResp2+0x84>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4a1e      	ldr	r2, [pc, #120]	; (8011138 <SDMMC_GetCmdResp2+0x88>)
 80110be:	fba2 2303 	umull	r2, r3, r2, r3
 80110c2:	0a5b      	lsrs	r3, r3, #9
 80110c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80110c8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80110cc:	4623      	mov	r3, r4
 80110ce:	1e5c      	subs	r4, r3, #1
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d102      	bne.n	80110da <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110d8:	e026      	b.n	8011128 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d0f0      	beq.n	80110cc <SDMMC_GetCmdResp2+0x1c>
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1eb      	bne.n	80110cc <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110f8:	f003 0304 	and.w	r3, r3, #4
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d004      	beq.n	801110a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2204      	movs	r2, #4
 8011104:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011106:	2304      	movs	r3, #4
 8011108:	e00e      	b.n	8011128 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801110e:	f003 0301 	and.w	r3, r3, #1
 8011112:	2b00      	cmp	r3, #0
 8011114:	d004      	beq.n	8011120 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2201      	movs	r2, #1
 801111a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801111c:	2301      	movs	r3, #1
 801111e:	e003      	b.n	8011128 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	4a06      	ldr	r2, [pc, #24]	; (801113c <SDMMC_GetCmdResp2+0x8c>)
 8011124:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011126:	2300      	movs	r3, #0
}
 8011128:	4618      	mov	r0, r3
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bc90      	pop	{r4, r7}
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	2400000c 	.word	0x2400000c
 8011138:	10624dd3 	.word	0x10624dd3
 801113c:	002000c5 	.word	0x002000c5

08011140 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011140:	b490      	push	{r4, r7}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011148:	4b18      	ldr	r3, [pc, #96]	; (80111ac <SDMMC_GetCmdResp3+0x6c>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	4a18      	ldr	r2, [pc, #96]	; (80111b0 <SDMMC_GetCmdResp3+0x70>)
 801114e:	fba2 2303 	umull	r2, r3, r2, r3
 8011152:	0a5b      	lsrs	r3, r3, #9
 8011154:	f241 3288 	movw	r2, #5000	; 0x1388
 8011158:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 801115c:	4623      	mov	r3, r4
 801115e:	1e5c      	subs	r4, r3, #1
 8011160:	2b00      	cmp	r3, #0
 8011162:	d102      	bne.n	801116a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011164:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011168:	e01b      	b.n	80111a2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801116e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011176:	2b00      	cmp	r3, #0
 8011178:	d0f0      	beq.n	801115c <SDMMC_GetCmdResp3+0x1c>
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011180:	2b00      	cmp	r3, #0
 8011182:	d1eb      	bne.n	801115c <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011188:	f003 0304 	and.w	r3, r3, #4
 801118c:	2b00      	cmp	r3, #0
 801118e:	d004      	beq.n	801119a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2204      	movs	r2, #4
 8011194:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011196:	2304      	movs	r3, #4
 8011198:	e003      	b.n	80111a2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4a05      	ldr	r2, [pc, #20]	; (80111b4 <SDMMC_GetCmdResp3+0x74>)
 801119e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80111a0:	2300      	movs	r3, #0
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3710      	adds	r7, #16
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bc90      	pop	{r4, r7}
 80111aa:	4770      	bx	lr
 80111ac:	2400000c 	.word	0x2400000c
 80111b0:	10624dd3 	.word	0x10624dd3
 80111b4:	002000c5 	.word	0x002000c5

080111b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80111b8:	b590      	push	{r4, r7, lr}
 80111ba:	b087      	sub	sp, #28
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	460b      	mov	r3, r1
 80111c2:	607a      	str	r2, [r7, #4]
 80111c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80111c6:	4b34      	ldr	r3, [pc, #208]	; (8011298 <SDMMC_GetCmdResp6+0xe0>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	4a34      	ldr	r2, [pc, #208]	; (801129c <SDMMC_GetCmdResp6+0xe4>)
 80111cc:	fba2 2303 	umull	r2, r3, r2, r3
 80111d0:	0a5b      	lsrs	r3, r3, #9
 80111d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80111d6:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80111da:	4623      	mov	r3, r4
 80111dc:	1e5c      	subs	r4, r3, #1
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d102      	bne.n	80111e8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80111e6:	e052      	b.n	801128e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ec:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d0f0      	beq.n	80111da <SDMMC_GetCmdResp6+0x22>
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d1eb      	bne.n	80111da <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011206:	f003 0304 	and.w	r3, r3, #4
 801120a:	2b00      	cmp	r3, #0
 801120c:	d004      	beq.n	8011218 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2204      	movs	r2, #4
 8011212:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011214:	2304      	movs	r3, #4
 8011216:	e03a      	b.n	801128e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801121c:	f003 0301 	and.w	r3, r3, #1
 8011220:	2b00      	cmp	r3, #0
 8011222:	d004      	beq.n	801122e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2201      	movs	r2, #1
 8011228:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801122a:	2301      	movs	r3, #1
 801122c:	e02f      	b.n	801128e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801122e:	68f8      	ldr	r0, [r7, #12]
 8011230:	f7ff fb3a 	bl	80108a8 <SDMMC_GetCommandResponse>
 8011234:	4603      	mov	r3, r0
 8011236:	461a      	mov	r2, r3
 8011238:	7afb      	ldrb	r3, [r7, #11]
 801123a:	4293      	cmp	r3, r2
 801123c:	d001      	beq.n	8011242 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801123e:	2301      	movs	r3, #1
 8011240:	e025      	b.n	801128e <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	4a16      	ldr	r2, [pc, #88]	; (80112a0 <SDMMC_GetCmdResp6+0xe8>)
 8011246:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011248:	2100      	movs	r1, #0
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f7ff fb39 	bl	80108c2 <SDMMC_GetResponse>
 8011250:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011258:	2b00      	cmp	r3, #0
 801125a:	d106      	bne.n	801126a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	0c1b      	lsrs	r3, r3, #16
 8011260:	b29a      	uxth	r2, r3
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011266:	2300      	movs	r3, #0
 8011268:	e011      	b.n	801128e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011278:	e009      	b.n	801128e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011280:	2b00      	cmp	r3, #0
 8011282:	d002      	beq.n	801128a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011288:	e001      	b.n	801128e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801128a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801128e:	4618      	mov	r0, r3
 8011290:	371c      	adds	r7, #28
 8011292:	46bd      	mov	sp, r7
 8011294:	bd90      	pop	{r4, r7, pc}
 8011296:	bf00      	nop
 8011298:	2400000c 	.word	0x2400000c
 801129c:	10624dd3 	.word	0x10624dd3
 80112a0:	002000c5 	.word	0x002000c5

080112a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80112a4:	b490      	push	{r4, r7}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80112ac:	4b21      	ldr	r3, [pc, #132]	; (8011334 <SDMMC_GetCmdResp7+0x90>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4a21      	ldr	r2, [pc, #132]	; (8011338 <SDMMC_GetCmdResp7+0x94>)
 80112b2:	fba2 2303 	umull	r2, r3, r2, r3
 80112b6:	0a5b      	lsrs	r3, r3, #9
 80112b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80112bc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80112c0:	4623      	mov	r3, r4
 80112c2:	1e5c      	subs	r4, r3, #1
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d102      	bne.n	80112ce <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80112c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80112cc:	e02c      	b.n	8011328 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d0f0      	beq.n	80112c0 <SDMMC_GetCmdResp7+0x1c>
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d1eb      	bne.n	80112c0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112ec:	f003 0304 	and.w	r3, r3, #4
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d004      	beq.n	80112fe <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2204      	movs	r2, #4
 80112f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112fa:	2304      	movs	r3, #4
 80112fc:	e014      	b.n	8011328 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011302:	f003 0301 	and.w	r3, r3, #1
 8011306:	2b00      	cmp	r3, #0
 8011308:	d004      	beq.n	8011314 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2201      	movs	r2, #1
 801130e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011310:	2301      	movs	r3, #1
 8011312:	e009      	b.n	8011328 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801131c:	2b00      	cmp	r3, #0
 801131e:	d002      	beq.n	8011326 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2240      	movs	r2, #64	; 0x40
 8011324:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011326:	2300      	movs	r3, #0

}
 8011328:	4618      	mov	r0, r3
 801132a:	3710      	adds	r7, #16
 801132c:	46bd      	mov	sp, r7
 801132e:	bc90      	pop	{r4, r7}
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	2400000c 	.word	0x2400000c
 8011338:	10624dd3 	.word	0x10624dd3

0801133c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801133c:	b084      	sub	sp, #16
 801133e:	b580      	push	{r7, lr}
 8011340:	b084      	sub	sp, #16
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
 8011346:	f107 001c 	add.w	r0, r7, #28
 801134a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801134e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011350:	2b01      	cmp	r3, #1
 8011352:	d120      	bne.n	8011396 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	68da      	ldr	r2, [r3, #12]
 8011364:	4b25      	ldr	r3, [pc, #148]	; (80113fc <USB_CoreInit+0xc0>)
 8011366:	4013      	ands	r3, r2
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801137a:	2b01      	cmp	r3, #1
 801137c:	d105      	bne.n	801138a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f001 fa66 	bl	801285c <USB_CoreReset>
 8011390:	4603      	mov	r3, r0
 8011392:	73fb      	strb	r3, [r7, #15]
 8011394:	e01a      	b.n	80113cc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f001 fa5a 	bl	801285c <USB_CoreReset>
 80113a8:	4603      	mov	r3, r0
 80113aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80113ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d106      	bne.n	80113c0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	639a      	str	r2, [r3, #56]	; 0x38
 80113be:	e005      	b.n	80113cc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80113cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d10b      	bne.n	80113ea <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	689b      	ldr	r3, [r3, #8]
 80113d6:	f043 0206 	orr.w	r2, r3, #6
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	689b      	ldr	r3, [r3, #8]
 80113e2:	f043 0220 	orr.w	r2, r3, #32
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80113ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3710      	adds	r7, #16
 80113f0:	46bd      	mov	sp, r7
 80113f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80113f6:	b004      	add	sp, #16
 80113f8:	4770      	bx	lr
 80113fa:	bf00      	nop
 80113fc:	ffbdffbf 	.word	0xffbdffbf

08011400 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011400:	b480      	push	{r7}
 8011402:	b087      	sub	sp, #28
 8011404:	af00      	add	r7, sp, #0
 8011406:	60f8      	str	r0, [r7, #12]
 8011408:	60b9      	str	r1, [r7, #8]
 801140a:	4613      	mov	r3, r2
 801140c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801140e:	79fb      	ldrb	r3, [r7, #7]
 8011410:	2b02      	cmp	r3, #2
 8011412:	d165      	bne.n	80114e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	4a41      	ldr	r2, [pc, #260]	; (801151c <USB_SetTurnaroundTime+0x11c>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d906      	bls.n	801142a <USB_SetTurnaroundTime+0x2a>
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	4a40      	ldr	r2, [pc, #256]	; (8011520 <USB_SetTurnaroundTime+0x120>)
 8011420:	4293      	cmp	r3, r2
 8011422:	d802      	bhi.n	801142a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011424:	230f      	movs	r3, #15
 8011426:	617b      	str	r3, [r7, #20]
 8011428:	e062      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	4a3c      	ldr	r2, [pc, #240]	; (8011520 <USB_SetTurnaroundTime+0x120>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d906      	bls.n	8011440 <USB_SetTurnaroundTime+0x40>
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	4a3b      	ldr	r2, [pc, #236]	; (8011524 <USB_SetTurnaroundTime+0x124>)
 8011436:	4293      	cmp	r3, r2
 8011438:	d802      	bhi.n	8011440 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801143a:	230e      	movs	r3, #14
 801143c:	617b      	str	r3, [r7, #20]
 801143e:	e057      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	4a38      	ldr	r2, [pc, #224]	; (8011524 <USB_SetTurnaroundTime+0x124>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d906      	bls.n	8011456 <USB_SetTurnaroundTime+0x56>
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	4a37      	ldr	r2, [pc, #220]	; (8011528 <USB_SetTurnaroundTime+0x128>)
 801144c:	4293      	cmp	r3, r2
 801144e:	d802      	bhi.n	8011456 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011450:	230d      	movs	r3, #13
 8011452:	617b      	str	r3, [r7, #20]
 8011454:	e04c      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	4a33      	ldr	r2, [pc, #204]	; (8011528 <USB_SetTurnaroundTime+0x128>)
 801145a:	4293      	cmp	r3, r2
 801145c:	d906      	bls.n	801146c <USB_SetTurnaroundTime+0x6c>
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	4a32      	ldr	r2, [pc, #200]	; (801152c <USB_SetTurnaroundTime+0x12c>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d802      	bhi.n	801146c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011466:	230c      	movs	r3, #12
 8011468:	617b      	str	r3, [r7, #20]
 801146a:	e041      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	4a2f      	ldr	r2, [pc, #188]	; (801152c <USB_SetTurnaroundTime+0x12c>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d906      	bls.n	8011482 <USB_SetTurnaroundTime+0x82>
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	4a2e      	ldr	r2, [pc, #184]	; (8011530 <USB_SetTurnaroundTime+0x130>)
 8011478:	4293      	cmp	r3, r2
 801147a:	d802      	bhi.n	8011482 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801147c:	230b      	movs	r3, #11
 801147e:	617b      	str	r3, [r7, #20]
 8011480:	e036      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	4a2a      	ldr	r2, [pc, #168]	; (8011530 <USB_SetTurnaroundTime+0x130>)
 8011486:	4293      	cmp	r3, r2
 8011488:	d906      	bls.n	8011498 <USB_SetTurnaroundTime+0x98>
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	4a29      	ldr	r2, [pc, #164]	; (8011534 <USB_SetTurnaroundTime+0x134>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d802      	bhi.n	8011498 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011492:	230a      	movs	r3, #10
 8011494:	617b      	str	r3, [r7, #20]
 8011496:	e02b      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	4a26      	ldr	r2, [pc, #152]	; (8011534 <USB_SetTurnaroundTime+0x134>)
 801149c:	4293      	cmp	r3, r2
 801149e:	d906      	bls.n	80114ae <USB_SetTurnaroundTime+0xae>
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	4a25      	ldr	r2, [pc, #148]	; (8011538 <USB_SetTurnaroundTime+0x138>)
 80114a4:	4293      	cmp	r3, r2
 80114a6:	d802      	bhi.n	80114ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80114a8:	2309      	movs	r3, #9
 80114aa:	617b      	str	r3, [r7, #20]
 80114ac:	e020      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	4a21      	ldr	r2, [pc, #132]	; (8011538 <USB_SetTurnaroundTime+0x138>)
 80114b2:	4293      	cmp	r3, r2
 80114b4:	d906      	bls.n	80114c4 <USB_SetTurnaroundTime+0xc4>
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	4a20      	ldr	r2, [pc, #128]	; (801153c <USB_SetTurnaroundTime+0x13c>)
 80114ba:	4293      	cmp	r3, r2
 80114bc:	d802      	bhi.n	80114c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80114be:	2308      	movs	r3, #8
 80114c0:	617b      	str	r3, [r7, #20]
 80114c2:	e015      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	4a1d      	ldr	r2, [pc, #116]	; (801153c <USB_SetTurnaroundTime+0x13c>)
 80114c8:	4293      	cmp	r3, r2
 80114ca:	d906      	bls.n	80114da <USB_SetTurnaroundTime+0xda>
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	4a1c      	ldr	r2, [pc, #112]	; (8011540 <USB_SetTurnaroundTime+0x140>)
 80114d0:	4293      	cmp	r3, r2
 80114d2:	d802      	bhi.n	80114da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80114d4:	2307      	movs	r3, #7
 80114d6:	617b      	str	r3, [r7, #20]
 80114d8:	e00a      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80114da:	2306      	movs	r3, #6
 80114dc:	617b      	str	r3, [r7, #20]
 80114de:	e007      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80114e0:	79fb      	ldrb	r3, [r7, #7]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d102      	bne.n	80114ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80114e6:	2309      	movs	r3, #9
 80114e8:	617b      	str	r3, [r7, #20]
 80114ea:	e001      	b.n	80114f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80114ec:	2309      	movs	r3, #9
 80114ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	68db      	ldr	r3, [r3, #12]
 80114f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	68da      	ldr	r2, [r3, #12]
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	029b      	lsls	r3, r3, #10
 8011504:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011508:	431a      	orrs	r2, r3
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801150e:	2300      	movs	r3, #0
}
 8011510:	4618      	mov	r0, r3
 8011512:	371c      	adds	r7, #28
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr
 801151c:	00d8acbf 	.word	0x00d8acbf
 8011520:	00e4e1bf 	.word	0x00e4e1bf
 8011524:	00f423ff 	.word	0x00f423ff
 8011528:	0106737f 	.word	0x0106737f
 801152c:	011a499f 	.word	0x011a499f
 8011530:	01312cff 	.word	0x01312cff
 8011534:	014ca43f 	.word	0x014ca43f
 8011538:	016e35ff 	.word	0x016e35ff
 801153c:	01a6ab1f 	.word	0x01a6ab1f
 8011540:	01e847ff 	.word	0x01e847ff

08011544 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011544:	b480      	push	{r7}
 8011546:	b083      	sub	sp, #12
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	f043 0201 	orr.w	r2, r3, #1
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011558:	2300      	movs	r3, #0
}
 801155a:	4618      	mov	r0, r3
 801155c:	370c      	adds	r7, #12
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr

08011566 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011566:	b480      	push	{r7}
 8011568:	b083      	sub	sp, #12
 801156a:	af00      	add	r7, sp, #0
 801156c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	689b      	ldr	r3, [r3, #8]
 8011572:	f023 0201 	bic.w	r2, r3, #1
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801157a:	2300      	movs	r3, #0
}
 801157c:	4618      	mov	r0, r3
 801157e:	370c      	adds	r7, #12
 8011580:	46bd      	mov	sp, r7
 8011582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011586:	4770      	bx	lr

08011588 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	460b      	mov	r3, r1
 8011592:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80115a0:	78fb      	ldrb	r3, [r7, #3]
 80115a2:	2b01      	cmp	r3, #1
 80115a4:	d106      	bne.n	80115b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	60da      	str	r2, [r3, #12]
 80115b2:	e00b      	b.n	80115cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80115b4:	78fb      	ldrb	r3, [r7, #3]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d106      	bne.n	80115c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	60da      	str	r2, [r3, #12]
 80115c6:	e001      	b.n	80115cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80115c8:	2301      	movs	r3, #1
 80115ca:	e003      	b.n	80115d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80115cc:	2032      	movs	r0, #50	; 0x32
 80115ce:	f7f0 fb05 	bl	8001bdc <HAL_Delay>

  return HAL_OK;
 80115d2:	2300      	movs	r3, #0
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80115dc:	b084      	sub	sp, #16
 80115de:	b580      	push	{r7, lr}
 80115e0:	b086      	sub	sp, #24
 80115e2:	af00      	add	r7, sp, #0
 80115e4:	6078      	str	r0, [r7, #4]
 80115e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80115ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80115ee:	2300      	movs	r3, #0
 80115f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80115f6:	2300      	movs	r3, #0
 80115f8:	613b      	str	r3, [r7, #16]
 80115fa:	e009      	b.n	8011610 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80115fc:	687a      	ldr	r2, [r7, #4]
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	3340      	adds	r3, #64	; 0x40
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	4413      	add	r3, r2
 8011606:	2200      	movs	r2, #0
 8011608:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	3301      	adds	r3, #1
 801160e:	613b      	str	r3, [r7, #16]
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	2b0e      	cmp	r3, #14
 8011614:	d9f2      	bls.n	80115fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011618:	2b00      	cmp	r3, #0
 801161a:	d11c      	bne.n	8011656 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	68fa      	ldr	r2, [r7, #12]
 8011626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801162a:	f043 0302 	orr.w	r3, r3, #2
 801162e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011634:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	601a      	str	r2, [r3, #0]
 8011654:	e005      	b.n	8011662 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801165a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011668:	461a      	mov	r2, r3
 801166a:	2300      	movs	r3, #0
 801166c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011674:	4619      	mov	r1, r3
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801167c:	461a      	mov	r2, r3
 801167e:	680b      	ldr	r3, [r1, #0]
 8011680:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011684:	2b01      	cmp	r3, #1
 8011686:	d10c      	bne.n	80116a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168a:	2b00      	cmp	r3, #0
 801168c:	d104      	bne.n	8011698 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801168e:	2100      	movs	r1, #0
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f000 f949 	bl	8011928 <USB_SetDevSpeed>
 8011696:	e008      	b.n	80116aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011698:	2101      	movs	r1, #1
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f000 f944 	bl	8011928 <USB_SetDevSpeed>
 80116a0:	e003      	b.n	80116aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80116a2:	2103      	movs	r1, #3
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f000 f93f 	bl	8011928 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80116aa:	2110      	movs	r1, #16
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f000 f8f3 	bl	8011898 <USB_FlushTxFifo>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d001      	beq.n	80116bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80116b8:	2301      	movs	r3, #1
 80116ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	f000 f911 	bl	80118e4 <USB_FlushRxFifo>
 80116c2:	4603      	mov	r3, r0
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d001      	beq.n	80116cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80116c8:	2301      	movs	r3, #1
 80116ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116d2:	461a      	mov	r2, r3
 80116d4:	2300      	movs	r3, #0
 80116d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116de:	461a      	mov	r2, r3
 80116e0:	2300      	movs	r3, #0
 80116e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116ea:	461a      	mov	r2, r3
 80116ec:	2300      	movs	r3, #0
 80116ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80116f0:	2300      	movs	r3, #0
 80116f2:	613b      	str	r3, [r7, #16]
 80116f4:	e043      	b.n	801177e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	015a      	lsls	r2, r3, #5
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	4413      	add	r3, r2
 80116fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801170c:	d118      	bne.n	8011740 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d10a      	bne.n	801172a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	015a      	lsls	r2, r3, #5
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	4413      	add	r3, r2
 801171c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011720:	461a      	mov	r2, r3
 8011722:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011726:	6013      	str	r3, [r2, #0]
 8011728:	e013      	b.n	8011752 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	015a      	lsls	r2, r3, #5
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	4413      	add	r3, r2
 8011732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011736:	461a      	mov	r2, r3
 8011738:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801173c:	6013      	str	r3, [r2, #0]
 801173e:	e008      	b.n	8011752 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	015a      	lsls	r2, r3, #5
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	4413      	add	r3, r2
 8011748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801174c:	461a      	mov	r2, r3
 801174e:	2300      	movs	r3, #0
 8011750:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	015a      	lsls	r2, r3, #5
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	4413      	add	r3, r2
 801175a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801175e:	461a      	mov	r2, r3
 8011760:	2300      	movs	r3, #0
 8011762:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	015a      	lsls	r2, r3, #5
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	4413      	add	r3, r2
 801176c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011770:	461a      	mov	r2, r3
 8011772:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011776:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	3301      	adds	r3, #1
 801177c:	613b      	str	r3, [r7, #16]
 801177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011780:	693a      	ldr	r2, [r7, #16]
 8011782:	429a      	cmp	r2, r3
 8011784:	d3b7      	bcc.n	80116f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011786:	2300      	movs	r3, #0
 8011788:	613b      	str	r3, [r7, #16]
 801178a:	e043      	b.n	8011814 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	015a      	lsls	r2, r3, #5
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	4413      	add	r3, r2
 8011794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801179e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80117a2:	d118      	bne.n	80117d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d10a      	bne.n	80117c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	015a      	lsls	r2, r3, #5
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	4413      	add	r3, r2
 80117b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117b6:	461a      	mov	r2, r3
 80117b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80117bc:	6013      	str	r3, [r2, #0]
 80117be:	e013      	b.n	80117e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	015a      	lsls	r2, r3, #5
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	4413      	add	r3, r2
 80117c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117cc:	461a      	mov	r2, r3
 80117ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80117d2:	6013      	str	r3, [r2, #0]
 80117d4:	e008      	b.n	80117e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	015a      	lsls	r2, r3, #5
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	4413      	add	r3, r2
 80117de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117e2:	461a      	mov	r2, r3
 80117e4:	2300      	movs	r3, #0
 80117e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	015a      	lsls	r2, r3, #5
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	4413      	add	r3, r2
 80117f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117f4:	461a      	mov	r2, r3
 80117f6:	2300      	movs	r3, #0
 80117f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	015a      	lsls	r2, r3, #5
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	4413      	add	r3, r2
 8011802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011806:	461a      	mov	r2, r3
 8011808:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801180c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	3301      	adds	r3, #1
 8011812:	613b      	str	r3, [r7, #16]
 8011814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011816:	693a      	ldr	r2, [r7, #16]
 8011818:	429a      	cmp	r2, r3
 801181a:	d3b7      	bcc.n	801178c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011822:	691b      	ldr	r3, [r3, #16]
 8011824:	68fa      	ldr	r2, [r7, #12]
 8011826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801182a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801182e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2200      	movs	r2, #0
 8011834:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801183c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011840:	2b00      	cmp	r3, #0
 8011842:	d105      	bne.n	8011850 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	699b      	ldr	r3, [r3, #24]
 8011848:	f043 0210 	orr.w	r2, r3, #16
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	699a      	ldr	r2, [r3, #24]
 8011854:	4b0e      	ldr	r3, [pc, #56]	; (8011890 <USB_DevInit+0x2b4>)
 8011856:	4313      	orrs	r3, r2
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801185c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801185e:	2b00      	cmp	r3, #0
 8011860:	d005      	beq.n	801186e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	699b      	ldr	r3, [r3, #24]
 8011866:	f043 0208 	orr.w	r2, r3, #8
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801186e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011870:	2b01      	cmp	r3, #1
 8011872:	d105      	bne.n	8011880 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	699a      	ldr	r2, [r3, #24]
 8011878:	4b06      	ldr	r3, [pc, #24]	; (8011894 <USB_DevInit+0x2b8>)
 801187a:	4313      	orrs	r3, r2
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011880:	7dfb      	ldrb	r3, [r7, #23]
}
 8011882:	4618      	mov	r0, r3
 8011884:	3718      	adds	r7, #24
 8011886:	46bd      	mov	sp, r7
 8011888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801188c:	b004      	add	sp, #16
 801188e:	4770      	bx	lr
 8011890:	803c3800 	.word	0x803c3800
 8011894:	40000004 	.word	0x40000004

08011898 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011898:	b480      	push	{r7}
 801189a:	b085      	sub	sp, #20
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80118a2:	2300      	movs	r3, #0
 80118a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	019b      	lsls	r3, r3, #6
 80118aa:	f043 0220 	orr.w	r2, r3, #32
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	3301      	adds	r3, #1
 80118b6:	60fb      	str	r3, [r7, #12]
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	4a09      	ldr	r2, [pc, #36]	; (80118e0 <USB_FlushTxFifo+0x48>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	d901      	bls.n	80118c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80118c0:	2303      	movs	r3, #3
 80118c2:	e006      	b.n	80118d2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	691b      	ldr	r3, [r3, #16]
 80118c8:	f003 0320 	and.w	r3, r3, #32
 80118cc:	2b20      	cmp	r3, #32
 80118ce:	d0f0      	beq.n	80118b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80118d0:	2300      	movs	r3, #0
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3714      	adds	r7, #20
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop
 80118e0:	00030d40 	.word	0x00030d40

080118e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b085      	sub	sp, #20
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80118ec:	2300      	movs	r3, #0
 80118ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2210      	movs	r2, #16
 80118f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	3301      	adds	r3, #1
 80118fa:	60fb      	str	r3, [r7, #12]
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	4a09      	ldr	r2, [pc, #36]	; (8011924 <USB_FlushRxFifo+0x40>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d901      	bls.n	8011908 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011904:	2303      	movs	r3, #3
 8011906:	e006      	b.n	8011916 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	691b      	ldr	r3, [r3, #16]
 801190c:	f003 0310 	and.w	r3, r3, #16
 8011910:	2b10      	cmp	r3, #16
 8011912:	d0f0      	beq.n	80118f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011914:	2300      	movs	r3, #0
}
 8011916:	4618      	mov	r0, r3
 8011918:	3714      	adds	r7, #20
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop
 8011924:	00030d40 	.word	0x00030d40

08011928 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011928:	b480      	push	{r7}
 801192a:	b085      	sub	sp, #20
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	460b      	mov	r3, r1
 8011932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	78fb      	ldrb	r3, [r7, #3]
 8011942:	68f9      	ldr	r1, [r7, #12]
 8011944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011948:	4313      	orrs	r3, r2
 801194a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801194c:	2300      	movs	r3, #0
}
 801194e:	4618      	mov	r0, r3
 8011950:	3714      	adds	r7, #20
 8011952:	46bd      	mov	sp, r7
 8011954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011958:	4770      	bx	lr

0801195a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801195a:	b480      	push	{r7}
 801195c:	b087      	sub	sp, #28
 801195e:	af00      	add	r7, sp, #0
 8011960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	f003 0306 	and.w	r3, r3, #6
 8011972:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d102      	bne.n	8011980 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801197a:	2300      	movs	r3, #0
 801197c:	75fb      	strb	r3, [r7, #23]
 801197e:	e00a      	b.n	8011996 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2b02      	cmp	r3, #2
 8011984:	d002      	beq.n	801198c <USB_GetDevSpeed+0x32>
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2b06      	cmp	r3, #6
 801198a:	d102      	bne.n	8011992 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801198c:	2302      	movs	r3, #2
 801198e:	75fb      	strb	r3, [r7, #23]
 8011990:	e001      	b.n	8011996 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011992:	230f      	movs	r3, #15
 8011994:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011996:	7dfb      	ldrb	r3, [r7, #23]
}
 8011998:	4618      	mov	r0, r3
 801199a:	371c      	adds	r7, #28
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr

080119a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80119a4:	b480      	push	{r7}
 80119a6:	b085      	sub	sp, #20
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	785b      	ldrb	r3, [r3, #1]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d139      	bne.n	8011a34 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119c6:	69da      	ldr	r2, [r3, #28]
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	f003 030f 	and.w	r3, r3, #15
 80119d0:	2101      	movs	r1, #1
 80119d2:	fa01 f303 	lsl.w	r3, r1, r3
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	68f9      	ldr	r1, [r7, #12]
 80119da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80119de:	4313      	orrs	r3, r2
 80119e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	015a      	lsls	r2, r3, #5
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	4413      	add	r3, r2
 80119ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d153      	bne.n	8011aa0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	015a      	lsls	r2, r3, #5
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	4413      	add	r3, r2
 8011a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a04:	681a      	ldr	r2, [r3, #0]
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	689b      	ldr	r3, [r3, #8]
 8011a0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	78db      	ldrb	r3, [r3, #3]
 8011a12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	059b      	lsls	r3, r3, #22
 8011a1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a1c:	431a      	orrs	r2, r3
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	0159      	lsls	r1, r3, #5
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	440b      	add	r3, r1
 8011a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	4b20      	ldr	r3, [pc, #128]	; (8011ab0 <USB_ActivateEndpoint+0x10c>)
 8011a2e:	4313      	orrs	r3, r2
 8011a30:	600b      	str	r3, [r1, #0]
 8011a32:	e035      	b.n	8011aa0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a3a:	69da      	ldr	r2, [r3, #28]
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	f003 030f 	and.w	r3, r3, #15
 8011a44:	2101      	movs	r1, #1
 8011a46:	fa01 f303 	lsl.w	r3, r1, r3
 8011a4a:	041b      	lsls	r3, r3, #16
 8011a4c:	68f9      	ldr	r1, [r7, #12]
 8011a4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a52:	4313      	orrs	r3, r2
 8011a54:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	015a      	lsls	r2, r3, #5
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d119      	bne.n	8011aa0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	015a      	lsls	r2, r3, #5
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	4413      	add	r3, r2
 8011a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	689b      	ldr	r3, [r3, #8]
 8011a7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	78db      	ldrb	r3, [r3, #3]
 8011a86:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011a88:	430b      	orrs	r3, r1
 8011a8a:	431a      	orrs	r2, r3
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	0159      	lsls	r1, r3, #5
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	440b      	add	r3, r1
 8011a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a98:	4619      	mov	r1, r3
 8011a9a:	4b05      	ldr	r3, [pc, #20]	; (8011ab0 <USB_ActivateEndpoint+0x10c>)
 8011a9c:	4313      	orrs	r3, r2
 8011a9e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011aa0:	2300      	movs	r3, #0
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3714      	adds	r7, #20
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop
 8011ab0:	10008000 	.word	0x10008000

08011ab4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b085      	sub	sp, #20
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	785b      	ldrb	r3, [r3, #1]
 8011acc:	2b01      	cmp	r3, #1
 8011ace:	d135      	bne.n	8011b3c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	f003 030f 	and.w	r3, r3, #15
 8011ae0:	2101      	movs	r1, #1
 8011ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	43db      	mvns	r3, r3
 8011aea:	68f9      	ldr	r1, [r7, #12]
 8011aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011af0:	4013      	ands	r3, r2
 8011af2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011afa:	69da      	ldr	r2, [r3, #28]
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	f003 030f 	and.w	r3, r3, #15
 8011b04:	2101      	movs	r1, #1
 8011b06:	fa01 f303 	lsl.w	r3, r1, r3
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	43db      	mvns	r3, r3
 8011b0e:	68f9      	ldr	r1, [r7, #12]
 8011b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b14:	4013      	ands	r3, r2
 8011b16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	015a      	lsls	r2, r3, #5
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	4413      	add	r3, r2
 8011b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	0159      	lsls	r1, r3, #5
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	440b      	add	r3, r1
 8011b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b32:	4619      	mov	r1, r3
 8011b34:	4b1f      	ldr	r3, [pc, #124]	; (8011bb4 <USB_DeactivateEndpoint+0x100>)
 8011b36:	4013      	ands	r3, r2
 8011b38:	600b      	str	r3, [r1, #0]
 8011b3a:	e034      	b.n	8011ba6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	f003 030f 	and.w	r3, r3, #15
 8011b4c:	2101      	movs	r1, #1
 8011b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8011b52:	041b      	lsls	r3, r3, #16
 8011b54:	43db      	mvns	r3, r3
 8011b56:	68f9      	ldr	r1, [r7, #12]
 8011b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b5c:	4013      	ands	r3, r2
 8011b5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b66:	69da      	ldr	r2, [r3, #28]
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	f003 030f 	and.w	r3, r3, #15
 8011b70:	2101      	movs	r1, #1
 8011b72:	fa01 f303 	lsl.w	r3, r1, r3
 8011b76:	041b      	lsls	r3, r3, #16
 8011b78:	43db      	mvns	r3, r3
 8011b7a:	68f9      	ldr	r1, [r7, #12]
 8011b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b80:	4013      	ands	r3, r2
 8011b82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	015a      	lsls	r2, r3, #5
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	4413      	add	r3, r2
 8011b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b90:	681a      	ldr	r2, [r3, #0]
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	0159      	lsls	r1, r3, #5
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	440b      	add	r3, r1
 8011b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	4b05      	ldr	r3, [pc, #20]	; (8011bb8 <USB_DeactivateEndpoint+0x104>)
 8011ba2:	4013      	ands	r3, r2
 8011ba4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011ba6:	2300      	movs	r3, #0
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3714      	adds	r7, #20
 8011bac:	46bd      	mov	sp, r7
 8011bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb2:	4770      	bx	lr
 8011bb4:	ec337800 	.word	0xec337800
 8011bb8:	eff37800 	.word	0xeff37800

08011bbc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b08a      	sub	sp, #40	; 0x28
 8011bc0:	af02      	add	r7, sp, #8
 8011bc2:	60f8      	str	r0, [r7, #12]
 8011bc4:	60b9      	str	r1, [r7, #8]
 8011bc6:	4613      	mov	r3, r2
 8011bc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	785b      	ldrb	r3, [r3, #1]
 8011bd8:	2b01      	cmp	r3, #1
 8011bda:	f040 8163 	bne.w	8011ea4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	695b      	ldr	r3, [r3, #20]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d132      	bne.n	8011c4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011be6:	69bb      	ldr	r3, [r7, #24]
 8011be8:	015a      	lsls	r2, r3, #5
 8011bea:	69fb      	ldr	r3, [r7, #28]
 8011bec:	4413      	add	r3, r2
 8011bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bf2:	691a      	ldr	r2, [r3, #16]
 8011bf4:	69bb      	ldr	r3, [r7, #24]
 8011bf6:	0159      	lsls	r1, r3, #5
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	440b      	add	r3, r1
 8011bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c00:	4619      	mov	r1, r3
 8011c02:	4ba5      	ldr	r3, [pc, #660]	; (8011e98 <USB_EPStartXfer+0x2dc>)
 8011c04:	4013      	ands	r3, r2
 8011c06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011c08:	69bb      	ldr	r3, [r7, #24]
 8011c0a:	015a      	lsls	r2, r3, #5
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	4413      	add	r3, r2
 8011c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c14:	691b      	ldr	r3, [r3, #16]
 8011c16:	69ba      	ldr	r2, [r7, #24]
 8011c18:	0151      	lsls	r1, r2, #5
 8011c1a:	69fa      	ldr	r2, [r7, #28]
 8011c1c:	440a      	add	r2, r1
 8011c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011c26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011c28:	69bb      	ldr	r3, [r7, #24]
 8011c2a:	015a      	lsls	r2, r3, #5
 8011c2c:	69fb      	ldr	r3, [r7, #28]
 8011c2e:	4413      	add	r3, r2
 8011c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c34:	691a      	ldr	r2, [r3, #16]
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	0159      	lsls	r1, r3, #5
 8011c3a:	69fb      	ldr	r3, [r7, #28]
 8011c3c:	440b      	add	r3, r1
 8011c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c42:	4619      	mov	r1, r3
 8011c44:	4b95      	ldr	r3, [pc, #596]	; (8011e9c <USB_EPStartXfer+0x2e0>)
 8011c46:	4013      	ands	r3, r2
 8011c48:	610b      	str	r3, [r1, #16]
 8011c4a:	e074      	b.n	8011d36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011c4c:	69bb      	ldr	r3, [r7, #24]
 8011c4e:	015a      	lsls	r2, r3, #5
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	4413      	add	r3, r2
 8011c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c58:	691a      	ldr	r2, [r3, #16]
 8011c5a:	69bb      	ldr	r3, [r7, #24]
 8011c5c:	0159      	lsls	r1, r3, #5
 8011c5e:	69fb      	ldr	r3, [r7, #28]
 8011c60:	440b      	add	r3, r1
 8011c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c66:	4619      	mov	r1, r3
 8011c68:	4b8c      	ldr	r3, [pc, #560]	; (8011e9c <USB_EPStartXfer+0x2e0>)
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	015a      	lsls	r2, r3, #5
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	4413      	add	r3, r2
 8011c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c7a:	691a      	ldr	r2, [r3, #16]
 8011c7c:	69bb      	ldr	r3, [r7, #24]
 8011c7e:	0159      	lsls	r1, r3, #5
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	440b      	add	r3, r1
 8011c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c88:	4619      	mov	r1, r3
 8011c8a:	4b83      	ldr	r3, [pc, #524]	; (8011e98 <USB_EPStartXfer+0x2dc>)
 8011c8c:	4013      	ands	r3, r2
 8011c8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011c90:	69bb      	ldr	r3, [r7, #24]
 8011c92:	015a      	lsls	r2, r3, #5
 8011c94:	69fb      	ldr	r3, [r7, #28]
 8011c96:	4413      	add	r3, r2
 8011c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c9c:	691a      	ldr	r2, [r3, #16]
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	6959      	ldr	r1, [r3, #20]
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	689b      	ldr	r3, [r3, #8]
 8011ca6:	440b      	add	r3, r1
 8011ca8:	1e59      	subs	r1, r3, #1
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	689b      	ldr	r3, [r3, #8]
 8011cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8011cb2:	04d9      	lsls	r1, r3, #19
 8011cb4:	4b7a      	ldr	r3, [pc, #488]	; (8011ea0 <USB_EPStartXfer+0x2e4>)
 8011cb6:	400b      	ands	r3, r1
 8011cb8:	69b9      	ldr	r1, [r7, #24]
 8011cba:	0148      	lsls	r0, r1, #5
 8011cbc:	69f9      	ldr	r1, [r7, #28]
 8011cbe:	4401      	add	r1, r0
 8011cc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011cc4:	4313      	orrs	r3, r2
 8011cc6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011cc8:	69bb      	ldr	r3, [r7, #24]
 8011cca:	015a      	lsls	r2, r3, #5
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	4413      	add	r3, r2
 8011cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cd4:	691a      	ldr	r2, [r3, #16]
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	695b      	ldr	r3, [r3, #20]
 8011cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011cde:	69b9      	ldr	r1, [r7, #24]
 8011ce0:	0148      	lsls	r0, r1, #5
 8011ce2:	69f9      	ldr	r1, [r7, #28]
 8011ce4:	4401      	add	r1, r0
 8011ce6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011cea:	4313      	orrs	r3, r2
 8011cec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	78db      	ldrb	r3, [r3, #3]
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d11f      	bne.n	8011d36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011cf6:	69bb      	ldr	r3, [r7, #24]
 8011cf8:	015a      	lsls	r2, r3, #5
 8011cfa:	69fb      	ldr	r3, [r7, #28]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d02:	691b      	ldr	r3, [r3, #16]
 8011d04:	69ba      	ldr	r2, [r7, #24]
 8011d06:	0151      	lsls	r1, r2, #5
 8011d08:	69fa      	ldr	r2, [r7, #28]
 8011d0a:	440a      	add	r2, r1
 8011d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011d14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	015a      	lsls	r2, r3, #5
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d22:	691b      	ldr	r3, [r3, #16]
 8011d24:	69ba      	ldr	r2, [r7, #24]
 8011d26:	0151      	lsls	r1, r2, #5
 8011d28:	69fa      	ldr	r2, [r7, #28]
 8011d2a:	440a      	add	r2, r1
 8011d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011d34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011d36:	79fb      	ldrb	r3, [r7, #7]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d14b      	bne.n	8011dd4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	691b      	ldr	r3, [r3, #16]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d009      	beq.n	8011d58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011d44:	69bb      	ldr	r3, [r7, #24]
 8011d46:	015a      	lsls	r2, r3, #5
 8011d48:	69fb      	ldr	r3, [r7, #28]
 8011d4a:	4413      	add	r3, r2
 8011d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d50:	461a      	mov	r2, r3
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	691b      	ldr	r3, [r3, #16]
 8011d56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	78db      	ldrb	r3, [r3, #3]
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d128      	bne.n	8011db2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011d60:	69fb      	ldr	r3, [r7, #28]
 8011d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d110      	bne.n	8011d92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011d70:	69bb      	ldr	r3, [r7, #24]
 8011d72:	015a      	lsls	r2, r3, #5
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	4413      	add	r3, r2
 8011d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	69ba      	ldr	r2, [r7, #24]
 8011d80:	0151      	lsls	r1, r2, #5
 8011d82:	69fa      	ldr	r2, [r7, #28]
 8011d84:	440a      	add	r2, r1
 8011d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011d8e:	6013      	str	r3, [r2, #0]
 8011d90:	e00f      	b.n	8011db2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	015a      	lsls	r2, r3, #5
 8011d96:	69fb      	ldr	r3, [r7, #28]
 8011d98:	4413      	add	r3, r2
 8011d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	69ba      	ldr	r2, [r7, #24]
 8011da2:	0151      	lsls	r1, r2, #5
 8011da4:	69fa      	ldr	r2, [r7, #28]
 8011da6:	440a      	add	r2, r1
 8011da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011db0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011db2:	69bb      	ldr	r3, [r7, #24]
 8011db4:	015a      	lsls	r2, r3, #5
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	4413      	add	r3, r2
 8011dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	69ba      	ldr	r2, [r7, #24]
 8011dc2:	0151      	lsls	r1, r2, #5
 8011dc4:	69fa      	ldr	r2, [r7, #28]
 8011dc6:	440a      	add	r2, r1
 8011dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011dd0:	6013      	str	r3, [r2, #0]
 8011dd2:	e133      	b.n	801203c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011dd4:	69bb      	ldr	r3, [r7, #24]
 8011dd6:	015a      	lsls	r2, r3, #5
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	4413      	add	r3, r2
 8011ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	69ba      	ldr	r2, [r7, #24]
 8011de4:	0151      	lsls	r1, r2, #5
 8011de6:	69fa      	ldr	r2, [r7, #28]
 8011de8:	440a      	add	r2, r1
 8011dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011df2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	78db      	ldrb	r3, [r3, #3]
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d015      	beq.n	8011e28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	695b      	ldr	r3, [r3, #20]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	f000 811b 	beq.w	801203c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011e06:	69fb      	ldr	r3, [r7, #28]
 8011e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	f003 030f 	and.w	r3, r3, #15
 8011e16:	2101      	movs	r1, #1
 8011e18:	fa01 f303 	lsl.w	r3, r1, r3
 8011e1c:	69f9      	ldr	r1, [r7, #28]
 8011e1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e22:	4313      	orrs	r3, r2
 8011e24:	634b      	str	r3, [r1, #52]	; 0x34
 8011e26:	e109      	b.n	801203c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011e28:	69fb      	ldr	r3, [r7, #28]
 8011e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e2e:	689b      	ldr	r3, [r3, #8]
 8011e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d110      	bne.n	8011e5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011e38:	69bb      	ldr	r3, [r7, #24]
 8011e3a:	015a      	lsls	r2, r3, #5
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	4413      	add	r3, r2
 8011e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	69ba      	ldr	r2, [r7, #24]
 8011e48:	0151      	lsls	r1, r2, #5
 8011e4a:	69fa      	ldr	r2, [r7, #28]
 8011e4c:	440a      	add	r2, r1
 8011e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011e56:	6013      	str	r3, [r2, #0]
 8011e58:	e00f      	b.n	8011e7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	015a      	lsls	r2, r3, #5
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	4413      	add	r3, r2
 8011e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	69ba      	ldr	r2, [r7, #24]
 8011e6a:	0151      	lsls	r1, r2, #5
 8011e6c:	69fa      	ldr	r2, [r7, #28]
 8011e6e:	440a      	add	r2, r1
 8011e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	68d9      	ldr	r1, [r3, #12]
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	781a      	ldrb	r2, [r3, #0]
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	695b      	ldr	r3, [r3, #20]
 8011e86:	b298      	uxth	r0, r3
 8011e88:	79fb      	ldrb	r3, [r7, #7]
 8011e8a:	9300      	str	r3, [sp, #0]
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f000 fa38 	bl	8012304 <USB_WritePacket>
 8011e94:	e0d2      	b.n	801203c <USB_EPStartXfer+0x480>
 8011e96:	bf00      	nop
 8011e98:	e007ffff 	.word	0xe007ffff
 8011e9c:	fff80000 	.word	0xfff80000
 8011ea0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011ea4:	69bb      	ldr	r3, [r7, #24]
 8011ea6:	015a      	lsls	r2, r3, #5
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	4413      	add	r3, r2
 8011eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eb0:	691a      	ldr	r2, [r3, #16]
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	0159      	lsls	r1, r3, #5
 8011eb6:	69fb      	ldr	r3, [r7, #28]
 8011eb8:	440b      	add	r3, r1
 8011eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	4b61      	ldr	r3, [pc, #388]	; (8012048 <USB_EPStartXfer+0x48c>)
 8011ec2:	4013      	ands	r3, r2
 8011ec4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011ec6:	69bb      	ldr	r3, [r7, #24]
 8011ec8:	015a      	lsls	r2, r3, #5
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	4413      	add	r3, r2
 8011ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ed2:	691a      	ldr	r2, [r3, #16]
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	0159      	lsls	r1, r3, #5
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	440b      	add	r3, r1
 8011edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	4b5a      	ldr	r3, [pc, #360]	; (801204c <USB_EPStartXfer+0x490>)
 8011ee4:	4013      	ands	r3, r2
 8011ee6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	695b      	ldr	r3, [r3, #20]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d123      	bne.n	8011f38 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011ef0:	69bb      	ldr	r3, [r7, #24]
 8011ef2:	015a      	lsls	r2, r3, #5
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011efc:	691a      	ldr	r2, [r3, #16]
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	689b      	ldr	r3, [r3, #8]
 8011f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f06:	69b9      	ldr	r1, [r7, #24]
 8011f08:	0148      	lsls	r0, r1, #5
 8011f0a:	69f9      	ldr	r1, [r7, #28]
 8011f0c:	4401      	add	r1, r0
 8011f0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011f12:	4313      	orrs	r3, r2
 8011f14:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011f16:	69bb      	ldr	r3, [r7, #24]
 8011f18:	015a      	lsls	r2, r3, #5
 8011f1a:	69fb      	ldr	r3, [r7, #28]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f22:	691b      	ldr	r3, [r3, #16]
 8011f24:	69ba      	ldr	r2, [r7, #24]
 8011f26:	0151      	lsls	r1, r2, #5
 8011f28:	69fa      	ldr	r2, [r7, #28]
 8011f2a:	440a      	add	r2, r1
 8011f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011f34:	6113      	str	r3, [r2, #16]
 8011f36:	e033      	b.n	8011fa0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	695a      	ldr	r2, [r3, #20]
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	689b      	ldr	r3, [r3, #8]
 8011f40:	4413      	add	r3, r2
 8011f42:	1e5a      	subs	r2, r3, #1
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	689b      	ldr	r3, [r3, #8]
 8011f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f4c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011f4e:	69bb      	ldr	r3, [r7, #24]
 8011f50:	015a      	lsls	r2, r3, #5
 8011f52:	69fb      	ldr	r3, [r7, #28]
 8011f54:	4413      	add	r3, r2
 8011f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f5a:	691a      	ldr	r2, [r3, #16]
 8011f5c:	8afb      	ldrh	r3, [r7, #22]
 8011f5e:	04d9      	lsls	r1, r3, #19
 8011f60:	4b3b      	ldr	r3, [pc, #236]	; (8012050 <USB_EPStartXfer+0x494>)
 8011f62:	400b      	ands	r3, r1
 8011f64:	69b9      	ldr	r1, [r7, #24]
 8011f66:	0148      	lsls	r0, r1, #5
 8011f68:	69f9      	ldr	r1, [r7, #28]
 8011f6a:	4401      	add	r1, r0
 8011f6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011f70:	4313      	orrs	r3, r2
 8011f72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	015a      	lsls	r2, r3, #5
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	4413      	add	r3, r2
 8011f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f80:	691a      	ldr	r2, [r3, #16]
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	689b      	ldr	r3, [r3, #8]
 8011f86:	8af9      	ldrh	r1, [r7, #22]
 8011f88:	fb01 f303 	mul.w	r3, r1, r3
 8011f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f90:	69b9      	ldr	r1, [r7, #24]
 8011f92:	0148      	lsls	r0, r1, #5
 8011f94:	69f9      	ldr	r1, [r7, #28]
 8011f96:	4401      	add	r1, r0
 8011f98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011fa0:	79fb      	ldrb	r3, [r7, #7]
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d10d      	bne.n	8011fc2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	68db      	ldr	r3, [r3, #12]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d009      	beq.n	8011fc2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	68d9      	ldr	r1, [r3, #12]
 8011fb2:	69bb      	ldr	r3, [r7, #24]
 8011fb4:	015a      	lsls	r2, r3, #5
 8011fb6:	69fb      	ldr	r3, [r7, #28]
 8011fb8:	4413      	add	r3, r2
 8011fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fbe:	460a      	mov	r2, r1
 8011fc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	78db      	ldrb	r3, [r3, #3]
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d128      	bne.n	801201c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fd0:	689b      	ldr	r3, [r3, #8]
 8011fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d110      	bne.n	8011ffc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011fda:	69bb      	ldr	r3, [r7, #24]
 8011fdc:	015a      	lsls	r2, r3, #5
 8011fde:	69fb      	ldr	r3, [r7, #28]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	69ba      	ldr	r2, [r7, #24]
 8011fea:	0151      	lsls	r1, r2, #5
 8011fec:	69fa      	ldr	r2, [r7, #28]
 8011fee:	440a      	add	r2, r1
 8011ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ff4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011ff8:	6013      	str	r3, [r2, #0]
 8011ffa:	e00f      	b.n	801201c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011ffc:	69bb      	ldr	r3, [r7, #24]
 8011ffe:	015a      	lsls	r2, r3, #5
 8012000:	69fb      	ldr	r3, [r7, #28]
 8012002:	4413      	add	r3, r2
 8012004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	69ba      	ldr	r2, [r7, #24]
 801200c:	0151      	lsls	r1, r2, #5
 801200e:	69fa      	ldr	r2, [r7, #28]
 8012010:	440a      	add	r2, r1
 8012012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801201a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801201c:	69bb      	ldr	r3, [r7, #24]
 801201e:	015a      	lsls	r2, r3, #5
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	4413      	add	r3, r2
 8012024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	69ba      	ldr	r2, [r7, #24]
 801202c:	0151      	lsls	r1, r2, #5
 801202e:	69fa      	ldr	r2, [r7, #28]
 8012030:	440a      	add	r2, r1
 8012032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801203a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801203c:	2300      	movs	r3, #0
}
 801203e:	4618      	mov	r0, r3
 8012040:	3720      	adds	r7, #32
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	fff80000 	.word	0xfff80000
 801204c:	e007ffff 	.word	0xe007ffff
 8012050:	1ff80000 	.word	0x1ff80000

08012054 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012054:	b480      	push	{r7}
 8012056:	b087      	sub	sp, #28
 8012058:	af00      	add	r7, sp, #0
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	4613      	mov	r3, r2
 8012060:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	785b      	ldrb	r3, [r3, #1]
 8012070:	2b01      	cmp	r3, #1
 8012072:	f040 80cd 	bne.w	8012210 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	695b      	ldr	r3, [r3, #20]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d132      	bne.n	80120e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	015a      	lsls	r2, r3, #5
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	4413      	add	r3, r2
 8012086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801208a:	691a      	ldr	r2, [r3, #16]
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	0159      	lsls	r1, r3, #5
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	440b      	add	r3, r1
 8012094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012098:	4619      	mov	r1, r3
 801209a:	4b98      	ldr	r3, [pc, #608]	; (80122fc <USB_EP0StartXfer+0x2a8>)
 801209c:	4013      	ands	r3, r2
 801209e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	015a      	lsls	r2, r3, #5
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	4413      	add	r3, r2
 80120a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120ac:	691b      	ldr	r3, [r3, #16]
 80120ae:	693a      	ldr	r2, [r7, #16]
 80120b0:	0151      	lsls	r1, r2, #5
 80120b2:	697a      	ldr	r2, [r7, #20]
 80120b4:	440a      	add	r2, r1
 80120b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80120be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	015a      	lsls	r2, r3, #5
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	4413      	add	r3, r2
 80120c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120cc:	691a      	ldr	r2, [r3, #16]
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	0159      	lsls	r1, r3, #5
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	440b      	add	r3, r1
 80120d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120da:	4619      	mov	r1, r3
 80120dc:	4b88      	ldr	r3, [pc, #544]	; (8012300 <USB_EP0StartXfer+0x2ac>)
 80120de:	4013      	ands	r3, r2
 80120e0:	610b      	str	r3, [r1, #16]
 80120e2:	e04e      	b.n	8012182 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	015a      	lsls	r2, r3, #5
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	4413      	add	r3, r2
 80120ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120f0:	691a      	ldr	r2, [r3, #16]
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	0159      	lsls	r1, r3, #5
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	440b      	add	r3, r1
 80120fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120fe:	4619      	mov	r1, r3
 8012100:	4b7f      	ldr	r3, [pc, #508]	; (8012300 <USB_EP0StartXfer+0x2ac>)
 8012102:	4013      	ands	r3, r2
 8012104:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	015a      	lsls	r2, r3, #5
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	4413      	add	r3, r2
 801210e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012112:	691a      	ldr	r2, [r3, #16]
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	0159      	lsls	r1, r3, #5
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	440b      	add	r3, r1
 801211c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012120:	4619      	mov	r1, r3
 8012122:	4b76      	ldr	r3, [pc, #472]	; (80122fc <USB_EP0StartXfer+0x2a8>)
 8012124:	4013      	ands	r3, r2
 8012126:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	695a      	ldr	r2, [r3, #20]
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	689b      	ldr	r3, [r3, #8]
 8012130:	429a      	cmp	r2, r3
 8012132:	d903      	bls.n	801213c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	689a      	ldr	r2, [r3, #8]
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	015a      	lsls	r2, r3, #5
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	4413      	add	r3, r2
 8012144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012148:	691b      	ldr	r3, [r3, #16]
 801214a:	693a      	ldr	r2, [r7, #16]
 801214c:	0151      	lsls	r1, r2, #5
 801214e:	697a      	ldr	r2, [r7, #20]
 8012150:	440a      	add	r2, r1
 8012152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012156:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801215a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	015a      	lsls	r2, r3, #5
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	4413      	add	r3, r2
 8012164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012168:	691a      	ldr	r2, [r3, #16]
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	695b      	ldr	r3, [r3, #20]
 801216e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012172:	6939      	ldr	r1, [r7, #16]
 8012174:	0148      	lsls	r0, r1, #5
 8012176:	6979      	ldr	r1, [r7, #20]
 8012178:	4401      	add	r1, r0
 801217a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801217e:	4313      	orrs	r3, r2
 8012180:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012182:	79fb      	ldrb	r3, [r7, #7]
 8012184:	2b01      	cmp	r3, #1
 8012186:	d11e      	bne.n	80121c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	691b      	ldr	r3, [r3, #16]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d009      	beq.n	80121a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	015a      	lsls	r2, r3, #5
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	4413      	add	r3, r2
 8012198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801219c:	461a      	mov	r2, r3
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	691b      	ldr	r3, [r3, #16]
 80121a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	015a      	lsls	r2, r3, #5
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	4413      	add	r3, r2
 80121ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	693a      	ldr	r2, [r7, #16]
 80121b4:	0151      	lsls	r1, r2, #5
 80121b6:	697a      	ldr	r2, [r7, #20]
 80121b8:	440a      	add	r2, r1
 80121ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80121c2:	6013      	str	r3, [r2, #0]
 80121c4:	e092      	b.n	80122ec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	015a      	lsls	r2, r3, #5
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	4413      	add	r3, r2
 80121ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	693a      	ldr	r2, [r7, #16]
 80121d6:	0151      	lsls	r1, r2, #5
 80121d8:	697a      	ldr	r2, [r7, #20]
 80121da:	440a      	add	r2, r1
 80121dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80121e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	695b      	ldr	r3, [r3, #20]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d07e      	beq.n	80122ec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	f003 030f 	and.w	r3, r3, #15
 80121fe:	2101      	movs	r1, #1
 8012200:	fa01 f303 	lsl.w	r3, r1, r3
 8012204:	6979      	ldr	r1, [r7, #20]
 8012206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801220a:	4313      	orrs	r3, r2
 801220c:	634b      	str	r3, [r1, #52]	; 0x34
 801220e:	e06d      	b.n	80122ec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012210:	693b      	ldr	r3, [r7, #16]
 8012212:	015a      	lsls	r2, r3, #5
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	4413      	add	r3, r2
 8012218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801221c:	691a      	ldr	r2, [r3, #16]
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	0159      	lsls	r1, r3, #5
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	440b      	add	r3, r1
 8012226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801222a:	4619      	mov	r1, r3
 801222c:	4b34      	ldr	r3, [pc, #208]	; (8012300 <USB_EP0StartXfer+0x2ac>)
 801222e:	4013      	ands	r3, r2
 8012230:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	015a      	lsls	r2, r3, #5
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	4413      	add	r3, r2
 801223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801223e:	691a      	ldr	r2, [r3, #16]
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	0159      	lsls	r1, r3, #5
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	440b      	add	r3, r1
 8012248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801224c:	4619      	mov	r1, r3
 801224e:	4b2b      	ldr	r3, [pc, #172]	; (80122fc <USB_EP0StartXfer+0x2a8>)
 8012250:	4013      	ands	r3, r2
 8012252:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	695b      	ldr	r3, [r3, #20]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d003      	beq.n	8012264 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	689a      	ldr	r2, [r3, #8]
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	015a      	lsls	r2, r3, #5
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	4413      	add	r3, r2
 801226c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012270:	691b      	ldr	r3, [r3, #16]
 8012272:	693a      	ldr	r2, [r7, #16]
 8012274:	0151      	lsls	r1, r2, #5
 8012276:	697a      	ldr	r2, [r7, #20]
 8012278:	440a      	add	r2, r1
 801227a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801227e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012282:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	015a      	lsls	r2, r3, #5
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	4413      	add	r3, r2
 801228c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012290:	691a      	ldr	r2, [r3, #16]
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	689b      	ldr	r3, [r3, #8]
 8012296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801229a:	6939      	ldr	r1, [r7, #16]
 801229c:	0148      	lsls	r0, r1, #5
 801229e:	6979      	ldr	r1, [r7, #20]
 80122a0:	4401      	add	r1, r0
 80122a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80122a6:	4313      	orrs	r3, r2
 80122a8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80122aa:	79fb      	ldrb	r3, [r7, #7]
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	d10d      	bne.n	80122cc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d009      	beq.n	80122cc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	68d9      	ldr	r1, [r3, #12]
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	015a      	lsls	r2, r3, #5
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	4413      	add	r3, r2
 80122c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122c8:	460a      	mov	r2, r1
 80122ca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	015a      	lsls	r2, r3, #5
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	4413      	add	r3, r2
 80122d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	693a      	ldr	r2, [r7, #16]
 80122dc:	0151      	lsls	r1, r2, #5
 80122de:	697a      	ldr	r2, [r7, #20]
 80122e0:	440a      	add	r2, r1
 80122e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80122ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80122ec:	2300      	movs	r3, #0
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	371c      	adds	r7, #28
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop
 80122fc:	e007ffff 	.word	0xe007ffff
 8012300:	fff80000 	.word	0xfff80000

08012304 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012304:	b480      	push	{r7}
 8012306:	b089      	sub	sp, #36	; 0x24
 8012308:	af00      	add	r7, sp, #0
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	60b9      	str	r1, [r7, #8]
 801230e:	4611      	mov	r1, r2
 8012310:	461a      	mov	r2, r3
 8012312:	460b      	mov	r3, r1
 8012314:	71fb      	strb	r3, [r7, #7]
 8012316:	4613      	mov	r3, r2
 8012318:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012322:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012326:	2b00      	cmp	r3, #0
 8012328:	d11a      	bne.n	8012360 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801232a:	88bb      	ldrh	r3, [r7, #4]
 801232c:	3303      	adds	r3, #3
 801232e:	089b      	lsrs	r3, r3, #2
 8012330:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012332:	2300      	movs	r3, #0
 8012334:	61bb      	str	r3, [r7, #24]
 8012336:	e00f      	b.n	8012358 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012338:	79fb      	ldrb	r3, [r7, #7]
 801233a:	031a      	lsls	r2, r3, #12
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	4413      	add	r3, r2
 8012340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012344:	461a      	mov	r2, r3
 8012346:	69fb      	ldr	r3, [r7, #28]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	3304      	adds	r3, #4
 8012350:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	3301      	adds	r3, #1
 8012356:	61bb      	str	r3, [r7, #24]
 8012358:	69ba      	ldr	r2, [r7, #24]
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	429a      	cmp	r2, r3
 801235e:	d3eb      	bcc.n	8012338 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012360:	2300      	movs	r3, #0
}
 8012362:	4618      	mov	r0, r3
 8012364:	3724      	adds	r7, #36	; 0x24
 8012366:	46bd      	mov	sp, r7
 8012368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236c:	4770      	bx	lr

0801236e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801236e:	b480      	push	{r7}
 8012370:	b089      	sub	sp, #36	; 0x24
 8012372:	af00      	add	r7, sp, #0
 8012374:	60f8      	str	r0, [r7, #12]
 8012376:	60b9      	str	r1, [r7, #8]
 8012378:	4613      	mov	r3, r2
 801237a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012384:	88fb      	ldrh	r3, [r7, #6]
 8012386:	3303      	adds	r3, #3
 8012388:	089b      	lsrs	r3, r3, #2
 801238a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801238c:	2300      	movs	r3, #0
 801238e:	61bb      	str	r3, [r7, #24]
 8012390:	e00b      	b.n	80123aa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	601a      	str	r2, [r3, #0]
    pDest++;
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	3304      	adds	r3, #4
 80123a2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80123a4:	69bb      	ldr	r3, [r7, #24]
 80123a6:	3301      	adds	r3, #1
 80123a8:	61bb      	str	r3, [r7, #24]
 80123aa:	69ba      	ldr	r2, [r7, #24]
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d3ef      	bcc.n	8012392 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80123b2:	69fb      	ldr	r3, [r7, #28]
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3724      	adds	r7, #36	; 0x24
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr

080123c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80123c0:	b480      	push	{r7}
 80123c2:	b085      	sub	sp, #20
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	785b      	ldrb	r3, [r3, #1]
 80123d8:	2b01      	cmp	r3, #1
 80123da:	d12c      	bne.n	8012436 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	015a      	lsls	r2, r3, #5
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	4413      	add	r3, r2
 80123e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	db12      	blt.n	8012414 <USB_EPSetStall+0x54>
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d00f      	beq.n	8012414 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	015a      	lsls	r2, r3, #5
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	4413      	add	r3, r2
 80123fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	68ba      	ldr	r2, [r7, #8]
 8012404:	0151      	lsls	r1, r2, #5
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	440a      	add	r2, r1
 801240a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801240e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012412:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	015a      	lsls	r2, r3, #5
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	4413      	add	r3, r2
 801241c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	68ba      	ldr	r2, [r7, #8]
 8012424:	0151      	lsls	r1, r2, #5
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	440a      	add	r2, r1
 801242a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801242e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012432:	6013      	str	r3, [r2, #0]
 8012434:	e02b      	b.n	801248e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	015a      	lsls	r2, r3, #5
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	4413      	add	r3, r2
 801243e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2b00      	cmp	r3, #0
 8012446:	db12      	blt.n	801246e <USB_EPSetStall+0xae>
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00f      	beq.n	801246e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	015a      	lsls	r2, r3, #5
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	4413      	add	r3, r2
 8012456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	68ba      	ldr	r2, [r7, #8]
 801245e:	0151      	lsls	r1, r2, #5
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	440a      	add	r2, r1
 8012464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012468:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801246c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	015a      	lsls	r2, r3, #5
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	4413      	add	r3, r2
 8012476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	68ba      	ldr	r2, [r7, #8]
 801247e:	0151      	lsls	r1, r2, #5
 8012480:	68fa      	ldr	r2, [r7, #12]
 8012482:	440a      	add	r2, r1
 8012484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801248c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801248e:	2300      	movs	r3, #0
}
 8012490:	4618      	mov	r0, r3
 8012492:	3714      	adds	r7, #20
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr

0801249c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801249c:	b480      	push	{r7}
 801249e:	b085      	sub	sp, #20
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	785b      	ldrb	r3, [r3, #1]
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d128      	bne.n	801250a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	015a      	lsls	r2, r3, #5
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	4413      	add	r3, r2
 80124c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	0151      	lsls	r1, r2, #5
 80124ca:	68fa      	ldr	r2, [r7, #12]
 80124cc:	440a      	add	r2, r1
 80124ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80124d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	78db      	ldrb	r3, [r3, #3]
 80124dc:	2b03      	cmp	r3, #3
 80124de:	d003      	beq.n	80124e8 <USB_EPClearStall+0x4c>
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	78db      	ldrb	r3, [r3, #3]
 80124e4:	2b02      	cmp	r3, #2
 80124e6:	d138      	bne.n	801255a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	015a      	lsls	r2, r3, #5
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	4413      	add	r3, r2
 80124f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	68ba      	ldr	r2, [r7, #8]
 80124f8:	0151      	lsls	r1, r2, #5
 80124fa:	68fa      	ldr	r2, [r7, #12]
 80124fc:	440a      	add	r2, r1
 80124fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012506:	6013      	str	r3, [r2, #0]
 8012508:	e027      	b.n	801255a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	015a      	lsls	r2, r3, #5
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	4413      	add	r3, r2
 8012512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	68ba      	ldr	r2, [r7, #8]
 801251a:	0151      	lsls	r1, r2, #5
 801251c:	68fa      	ldr	r2, [r7, #12]
 801251e:	440a      	add	r2, r1
 8012520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012524:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012528:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	78db      	ldrb	r3, [r3, #3]
 801252e:	2b03      	cmp	r3, #3
 8012530:	d003      	beq.n	801253a <USB_EPClearStall+0x9e>
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	78db      	ldrb	r3, [r3, #3]
 8012536:	2b02      	cmp	r3, #2
 8012538:	d10f      	bne.n	801255a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	015a      	lsls	r2, r3, #5
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	4413      	add	r3, r2
 8012542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	68ba      	ldr	r2, [r7, #8]
 801254a:	0151      	lsls	r1, r2, #5
 801254c:	68fa      	ldr	r2, [r7, #12]
 801254e:	440a      	add	r2, r1
 8012550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012558:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801255a:	2300      	movs	r3, #0
}
 801255c:	4618      	mov	r0, r3
 801255e:	3714      	adds	r7, #20
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012568:	b480      	push	{r7}
 801256a:	b085      	sub	sp, #20
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	460b      	mov	r3, r1
 8012572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	68fa      	ldr	r2, [r7, #12]
 8012582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012586:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801258a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012592:	681a      	ldr	r2, [r3, #0]
 8012594:	78fb      	ldrb	r3, [r7, #3]
 8012596:	011b      	lsls	r3, r3, #4
 8012598:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801259c:	68f9      	ldr	r1, [r7, #12]
 801259e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80125a2:	4313      	orrs	r3, r2
 80125a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80125a6:	2300      	movs	r3, #0
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3714      	adds	r7, #20
 80125ac:	46bd      	mov	sp, r7
 80125ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b2:	4770      	bx	lr

080125b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b084      	sub	sp, #16
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	68fa      	ldr	r2, [r7, #12]
 80125ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80125ce:	f023 0302 	bic.w	r3, r3, #2
 80125d2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80125d4:	2003      	movs	r0, #3
 80125d6:	f7ef fb01 	bl	8001bdc <HAL_Delay>

  return HAL_OK;
 80125da:	2300      	movs	r3, #0
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3710      	adds	r7, #16
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}

080125e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80125fe:	f043 0302 	orr.w	r3, r3, #2
 8012602:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012604:	2003      	movs	r0, #3
 8012606:	f7ef fae9 	bl	8001bdc <HAL_Delay>

  return HAL_OK;
 801260a:	2300      	movs	r3, #0
}
 801260c:	4618      	mov	r0, r3
 801260e:	3710      	adds	r7, #16
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}

08012614 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012614:	b480      	push	{r7}
 8012616:	b085      	sub	sp, #20
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	695b      	ldr	r3, [r3, #20]
 8012620:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	699b      	ldr	r3, [r3, #24]
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	4013      	ands	r3, r2
 801262a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801262c:	68fb      	ldr	r3, [r7, #12]
}
 801262e:	4618      	mov	r0, r3
 8012630:	3714      	adds	r7, #20
 8012632:	46bd      	mov	sp, r7
 8012634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012638:	4770      	bx	lr

0801263a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801263a:	b480      	push	{r7}
 801263c:	b085      	sub	sp, #20
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801264c:	699b      	ldr	r3, [r3, #24]
 801264e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012656:	69db      	ldr	r3, [r3, #28]
 8012658:	68ba      	ldr	r2, [r7, #8]
 801265a:	4013      	ands	r3, r2
 801265c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	0c1b      	lsrs	r3, r3, #16
}
 8012662:	4618      	mov	r0, r3
 8012664:	3714      	adds	r7, #20
 8012666:	46bd      	mov	sp, r7
 8012668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266c:	4770      	bx	lr

0801266e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801266e:	b480      	push	{r7}
 8012670:	b085      	sub	sp, #20
 8012672:	af00      	add	r7, sp, #0
 8012674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012680:	699b      	ldr	r3, [r3, #24]
 8012682:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801268a:	69db      	ldr	r3, [r3, #28]
 801268c:	68ba      	ldr	r2, [r7, #8]
 801268e:	4013      	ands	r3, r2
 8012690:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	b29b      	uxth	r3, r3
}
 8012696:	4618      	mov	r0, r3
 8012698:	3714      	adds	r7, #20
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr

080126a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80126a2:	b480      	push	{r7}
 80126a4:	b085      	sub	sp, #20
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
 80126aa:	460b      	mov	r3, r1
 80126ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80126b2:	78fb      	ldrb	r3, [r7, #3]
 80126b4:	015a      	lsls	r2, r3, #5
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	4413      	add	r3, r2
 80126ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126be:	689b      	ldr	r3, [r3, #8]
 80126c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126c8:	695b      	ldr	r3, [r3, #20]
 80126ca:	68ba      	ldr	r2, [r7, #8]
 80126cc:	4013      	ands	r3, r2
 80126ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80126d0:	68bb      	ldr	r3, [r7, #8]
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3714      	adds	r7, #20
 80126d6:	46bd      	mov	sp, r7
 80126d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126dc:	4770      	bx	lr

080126de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80126de:	b480      	push	{r7}
 80126e0:	b087      	sub	sp, #28
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
 80126e6:	460b      	mov	r3, r1
 80126e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126f4:	691b      	ldr	r3, [r3, #16]
 80126f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012700:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012702:	78fb      	ldrb	r3, [r7, #3]
 8012704:	f003 030f 	and.w	r3, r3, #15
 8012708:	68fa      	ldr	r2, [r7, #12]
 801270a:	fa22 f303 	lsr.w	r3, r2, r3
 801270e:	01db      	lsls	r3, r3, #7
 8012710:	b2db      	uxtb	r3, r3
 8012712:	693a      	ldr	r2, [r7, #16]
 8012714:	4313      	orrs	r3, r2
 8012716:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012718:	78fb      	ldrb	r3, [r7, #3]
 801271a:	015a      	lsls	r2, r3, #5
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	4413      	add	r3, r2
 8012720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012724:	689b      	ldr	r3, [r3, #8]
 8012726:	693a      	ldr	r2, [r7, #16]
 8012728:	4013      	ands	r3, r2
 801272a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801272c:	68bb      	ldr	r3, [r7, #8]
}
 801272e:	4618      	mov	r0, r3
 8012730:	371c      	adds	r7, #28
 8012732:	46bd      	mov	sp, r7
 8012734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012738:	4770      	bx	lr

0801273a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801273a:	b480      	push	{r7}
 801273c:	b083      	sub	sp, #12
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	695b      	ldr	r3, [r3, #20]
 8012746:	f003 0301 	and.w	r3, r3, #1
}
 801274a:	4618      	mov	r0, r3
 801274c:	370c      	adds	r7, #12
 801274e:	46bd      	mov	sp, r7
 8012750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012754:	4770      	bx	lr
	...

08012758 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012758:	b480      	push	{r7}
 801275a:	b085      	sub	sp, #20
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012772:	4619      	mov	r1, r3
 8012774:	4b09      	ldr	r3, [pc, #36]	; (801279c <USB_ActivateSetup+0x44>)
 8012776:	4013      	ands	r3, r2
 8012778:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	68fa      	ldr	r2, [r7, #12]
 8012784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801278c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801278e:	2300      	movs	r3, #0
}
 8012790:	4618      	mov	r0, r3
 8012792:	3714      	adds	r7, #20
 8012794:	46bd      	mov	sp, r7
 8012796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279a:	4770      	bx	lr
 801279c:	fffff800 	.word	0xfffff800

080127a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80127a0:	b480      	push	{r7}
 80127a2:	b087      	sub	sp, #28
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60f8      	str	r0, [r7, #12]
 80127a8:	460b      	mov	r3, r1
 80127aa:	607a      	str	r2, [r7, #4]
 80127ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	333c      	adds	r3, #60	; 0x3c
 80127b6:	3304      	adds	r3, #4
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	4a26      	ldr	r2, [pc, #152]	; (8012858 <USB_EP0_OutStart+0xb8>)
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d90a      	bls.n	80127da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80127d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127d4:	d101      	bne.n	80127da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80127d6:	2300      	movs	r3, #0
 80127d8:	e037      	b.n	801284a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127e0:	461a      	mov	r2, r3
 80127e2:	2300      	movs	r3, #0
 80127e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ec:	691b      	ldr	r3, [r3, #16]
 80127ee:	697a      	ldr	r2, [r7, #20]
 80127f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80127f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012800:	691b      	ldr	r3, [r3, #16]
 8012802:	697a      	ldr	r2, [r7, #20]
 8012804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012808:	f043 0318 	orr.w	r3, r3, #24
 801280c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012814:	691b      	ldr	r3, [r3, #16]
 8012816:	697a      	ldr	r2, [r7, #20]
 8012818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801281c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012820:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012822:	7afb      	ldrb	r3, [r7, #11]
 8012824:	2b01      	cmp	r3, #1
 8012826:	d10f      	bne.n	8012848 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801282e:	461a      	mov	r2, r3
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	697a      	ldr	r2, [r7, #20]
 801283e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012842:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012846:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012848:	2300      	movs	r3, #0
}
 801284a:	4618      	mov	r0, r3
 801284c:	371c      	adds	r7, #28
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr
 8012856:	bf00      	nop
 8012858:	4f54300a 	.word	0x4f54300a

0801285c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801285c:	b480      	push	{r7}
 801285e:	b085      	sub	sp, #20
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012864:	2300      	movs	r3, #0
 8012866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	3301      	adds	r3, #1
 801286c:	60fb      	str	r3, [r7, #12]
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	4a13      	ldr	r2, [pc, #76]	; (80128c0 <USB_CoreReset+0x64>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d901      	bls.n	801287a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012876:	2303      	movs	r3, #3
 8012878:	e01b      	b.n	80128b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	691b      	ldr	r3, [r3, #16]
 801287e:	2b00      	cmp	r3, #0
 8012880:	daf2      	bge.n	8012868 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012882:	2300      	movs	r3, #0
 8012884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	691b      	ldr	r3, [r3, #16]
 801288a:	f043 0201 	orr.w	r2, r3, #1
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	3301      	adds	r3, #1
 8012896:	60fb      	str	r3, [r7, #12]
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	4a09      	ldr	r2, [pc, #36]	; (80128c0 <USB_CoreReset+0x64>)
 801289c:	4293      	cmp	r3, r2
 801289e:	d901      	bls.n	80128a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80128a0:	2303      	movs	r3, #3
 80128a2:	e006      	b.n	80128b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	691b      	ldr	r3, [r3, #16]
 80128a8:	f003 0301 	and.w	r3, r3, #1
 80128ac:	2b01      	cmp	r3, #1
 80128ae:	d0f0      	beq.n	8012892 <USB_CoreReset+0x36>

  return HAL_OK;
 80128b0:	2300      	movs	r3, #0
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3714      	adds	r7, #20
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr
 80128be:	bf00      	nop
 80128c0:	00030d40 	.word	0x00030d40

080128c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80128c8:	4904      	ldr	r1, [pc, #16]	; (80128dc <MX_FATFS_Init+0x18>)
 80128ca:	4805      	ldr	r0, [pc, #20]	; (80128e0 <MX_FATFS_Init+0x1c>)
 80128cc:	f007 fdfa 	bl	801a4c4 <FATFS_LinkDriver>
 80128d0:	4603      	mov	r3, r0
 80128d2:	461a      	mov	r2, r3
 80128d4:	4b03      	ldr	r3, [pc, #12]	; (80128e4 <MX_FATFS_Init+0x20>)
 80128d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80128d8:	bf00      	nop
 80128da:	bd80      	pop	{r7, pc}
 80128dc:	2400594c 	.word	0x2400594c
 80128e0:	0801b3d0 	.word	0x0801b3d0
 80128e4:	24005948 	.word	0x24005948

080128e8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80128e8:	b480      	push	{r7}
 80128ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80128ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	46bd      	mov	sp, r7
 80128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f6:	4770      	bx	lr

080128f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80128fe:	2300      	movs	r3, #0
 8012900:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012902:	f000 f86b 	bl	80129dc <BSP_SD_IsDetected>
 8012906:	4603      	mov	r3, r0
 8012908:	2b01      	cmp	r3, #1
 801290a:	d001      	beq.n	8012910 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801290c:	2302      	movs	r3, #2
 801290e:	e005      	b.n	801291c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012910:	4804      	ldr	r0, [pc, #16]	; (8012924 <BSP_SD_Init+0x2c>)
 8012912:	f7f9 fa89 	bl	800be28 <HAL_SD_Init>
 8012916:	4603      	mov	r3, r0
 8012918:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 801291a:	79fb      	ldrb	r3, [r7, #7]
}
 801291c:	4618      	mov	r0, r3
 801291e:	3708      	adds	r7, #8
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}
 8012924:	24001448 	.word	0x24001448

08012928 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b088      	sub	sp, #32
 801292c:	af02      	add	r7, sp, #8
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	607a      	str	r2, [r7, #4]
 8012934:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8012936:	2300      	movs	r3, #0
 8012938:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	9300      	str	r3, [sp, #0]
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	68ba      	ldr	r2, [r7, #8]
 8012942:	68f9      	ldr	r1, [r7, #12]
 8012944:	4806      	ldr	r0, [pc, #24]	; (8012960 <BSP_SD_ReadBlocks+0x38>)
 8012946:	f7f9 fb8d 	bl	800c064 <HAL_SD_ReadBlocks>
 801294a:	4603      	mov	r3, r0
 801294c:	2b00      	cmp	r3, #0
 801294e:	d001      	beq.n	8012954 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012950:	2301      	movs	r3, #1
 8012952:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8012954:	7dfb      	ldrb	r3, [r7, #23]
}
 8012956:	4618      	mov	r0, r3
 8012958:	3718      	adds	r7, #24
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	24001448 	.word	0x24001448

08012964 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b088      	sub	sp, #32
 8012968:	af02      	add	r7, sp, #8
 801296a:	60f8      	str	r0, [r7, #12]
 801296c:	60b9      	str	r1, [r7, #8]
 801296e:	607a      	str	r2, [r7, #4]
 8012970:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8012972:	2300      	movs	r3, #0
 8012974:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	9300      	str	r3, [sp, #0]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	68ba      	ldr	r2, [r7, #8]
 801297e:	68f9      	ldr	r1, [r7, #12]
 8012980:	4806      	ldr	r0, [pc, #24]	; (801299c <BSP_SD_WriteBlocks+0x38>)
 8012982:	f7f9 fcf9 	bl	800c378 <HAL_SD_WriteBlocks>
 8012986:	4603      	mov	r3, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	d001      	beq.n	8012990 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801298c:	2301      	movs	r3, #1
 801298e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8012990:	7dfb      	ldrb	r3, [r7, #23]
}
 8012992:	4618      	mov	r0, r3
 8012994:	3718      	adds	r7, #24
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	24001448 	.word	0x24001448

080129a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80129a4:	4805      	ldr	r0, [pc, #20]	; (80129bc <BSP_SD_GetCardState+0x1c>)
 80129a6:	f7fa f9b1 	bl	800cd0c <HAL_SD_GetCardState>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b04      	cmp	r3, #4
 80129ae:	bf14      	ite	ne
 80129b0:	2301      	movne	r3, #1
 80129b2:	2300      	moveq	r3, #0
 80129b4:	b2db      	uxtb	r3, r3
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	24001448 	.word	0x24001448

080129c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80129c8:	6879      	ldr	r1, [r7, #4]
 80129ca:	4803      	ldr	r0, [pc, #12]	; (80129d8 <BSP_SD_GetCardInfo+0x18>)
 80129cc:	f7fa f8c8 	bl	800cb60 <HAL_SD_GetCardInfo>
}
 80129d0:	bf00      	nop
 80129d2:	3708      	adds	r7, #8
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	24001448 	.word	0x24001448

080129dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80129e2:	2301      	movs	r3, #1
 80129e4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80129e6:	f000 f80b 	bl	8012a00 <BSP_PlatformIsDetected>
 80129ea:	4603      	mov	r3, r0
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d101      	bne.n	80129f4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80129f0:	2300      	movs	r3, #0
 80129f2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80129f4:	79fb      	ldrb	r3, [r7, #7]
 80129f6:	b2db      	uxtb	r3, r3
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3708      	adds	r7, #8
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}

08012a00 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012a06:	2301      	movs	r3, #1
 8012a08:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012a0a:	2120      	movs	r1, #32
 8012a0c:	4806      	ldr	r0, [pc, #24]	; (8012a28 <BSP_PlatformIsDetected+0x28>)
 8012a0e:	f7f4 fdf5 	bl	80075fc <HAL_GPIO_ReadPin>
 8012a12:	4603      	mov	r3, r0
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d001      	beq.n	8012a1c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8012a1c:	79fb      	ldrb	r3, [r7, #7]
}  
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
 8012a26:	bf00      	nop
 8012a28:	58021800 	.word	0x58021800

08012a2c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	4603      	mov	r3, r0
 8012a34:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012a36:	4b0b      	ldr	r3, [pc, #44]	; (8012a64 <SD_CheckStatus+0x38>)
 8012a38:	2201      	movs	r2, #1
 8012a3a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012a3c:	f7ff ffb0 	bl	80129a0 <BSP_SD_GetCardState>
 8012a40:	4603      	mov	r3, r0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d107      	bne.n	8012a56 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012a46:	4b07      	ldr	r3, [pc, #28]	; (8012a64 <SD_CheckStatus+0x38>)
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	f023 0301 	bic.w	r3, r3, #1
 8012a50:	b2da      	uxtb	r2, r3
 8012a52:	4b04      	ldr	r3, [pc, #16]	; (8012a64 <SD_CheckStatus+0x38>)
 8012a54:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012a56:	4b03      	ldr	r3, [pc, #12]	; (8012a64 <SD_CheckStatus+0x38>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	b2db      	uxtb	r3, r3
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3708      	adds	r7, #8
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd80      	pop	{r7, pc}
 8012a64:	24000019 	.word	0x24000019

08012a68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	4603      	mov	r3, r0
 8012a70:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8012a72:	4b0b      	ldr	r3, [pc, #44]	; (8012aa0 <SD_initialize+0x38>)
 8012a74:	2201      	movs	r2, #1
 8012a76:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012a78:	f7ff ff3e 	bl	80128f8 <BSP_SD_Init>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d107      	bne.n	8012a92 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8012a82:	79fb      	ldrb	r3, [r7, #7]
 8012a84:	4618      	mov	r0, r3
 8012a86:	f7ff ffd1 	bl	8012a2c <SD_CheckStatus>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	4b04      	ldr	r3, [pc, #16]	; (8012aa0 <SD_initialize+0x38>)
 8012a90:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012a92:	4b03      	ldr	r3, [pc, #12]	; (8012aa0 <SD_initialize+0x38>)
 8012a94:	781b      	ldrb	r3, [r3, #0]
 8012a96:	b2db      	uxtb	r3, r3
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3708      	adds	r7, #8
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	24000019 	.word	0x24000019

08012aa4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	4603      	mov	r3, r0
 8012aac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012aae:	79fb      	ldrb	r3, [r7, #7]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7ff ffbb 	bl	8012a2c <SD_CheckStatus>
 8012ab6:	4603      	mov	r3, r0
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b086      	sub	sp, #24
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60b9      	str	r1, [r7, #8]
 8012ac8:	607a      	str	r2, [r7, #4]
 8012aca:	603b      	str	r3, [r7, #0]
 8012acc:	4603      	mov	r3, r0
 8012ace:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8012ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ad8:	683a      	ldr	r2, [r7, #0]
 8012ada:	6879      	ldr	r1, [r7, #4]
 8012adc:	68b8      	ldr	r0, [r7, #8]
 8012ade:	f7ff ff23 	bl	8012928 <BSP_SD_ReadBlocks>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d107      	bne.n	8012af8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012ae8:	bf00      	nop
 8012aea:	f7ff ff59 	bl	80129a0 <BSP_SD_GetCardState>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d1fa      	bne.n	8012aea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8012af4:	2300      	movs	r3, #0
 8012af6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8012af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3718      	adds	r7, #24
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}

08012b02 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012b02:	b580      	push	{r7, lr}
 8012b04:	b086      	sub	sp, #24
 8012b06:	af00      	add	r7, sp, #0
 8012b08:	60b9      	str	r1, [r7, #8]
 8012b0a:	607a      	str	r2, [r7, #4]
 8012b0c:	603b      	str	r3, [r7, #0]
 8012b0e:	4603      	mov	r3, r0
 8012b10:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012b12:	2301      	movs	r3, #1
 8012b14:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8012b16:	f04f 33ff 	mov.w	r3, #4294967295
 8012b1a:	683a      	ldr	r2, [r7, #0]
 8012b1c:	6879      	ldr	r1, [r7, #4]
 8012b1e:	68b8      	ldr	r0, [r7, #8]
 8012b20:	f7ff ff20 	bl	8012964 <BSP_SD_WriteBlocks>
 8012b24:	4603      	mov	r3, r0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d107      	bne.n	8012b3a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8012b2a:	bf00      	nop
 8012b2c:	f7ff ff38 	bl	80129a0 <BSP_SD_GetCardState>
 8012b30:	4603      	mov	r3, r0
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d1fa      	bne.n	8012b2c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8012b36:	2300      	movs	r3, #0
 8012b38:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8012b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3718      	adds	r7, #24
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b08c      	sub	sp, #48	; 0x30
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	603a      	str	r2, [r7, #0]
 8012b4e:	71fb      	strb	r3, [r7, #7]
 8012b50:	460b      	mov	r3, r1
 8012b52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012b54:	2301      	movs	r3, #1
 8012b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012b5a:	4b25      	ldr	r3, [pc, #148]	; (8012bf0 <SD_ioctl+0xac>)
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	b2db      	uxtb	r3, r3
 8012b60:	f003 0301 	and.w	r3, r3, #1
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d001      	beq.n	8012b6c <SD_ioctl+0x28>
 8012b68:	2303      	movs	r3, #3
 8012b6a:	e03c      	b.n	8012be6 <SD_ioctl+0xa2>

  switch (cmd)
 8012b6c:	79bb      	ldrb	r3, [r7, #6]
 8012b6e:	2b03      	cmp	r3, #3
 8012b70:	d834      	bhi.n	8012bdc <SD_ioctl+0x98>
 8012b72:	a201      	add	r2, pc, #4	; (adr r2, 8012b78 <SD_ioctl+0x34>)
 8012b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b78:	08012b89 	.word	0x08012b89
 8012b7c:	08012b91 	.word	0x08012b91
 8012b80:	08012ba9 	.word	0x08012ba9
 8012b84:	08012bc3 	.word	0x08012bc3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012b8e:	e028      	b.n	8012be2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012b90:	f107 0308 	add.w	r3, r7, #8
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7ff ff13 	bl	80129c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012b9a:	6a3a      	ldr	r2, [r7, #32]
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012ba6:	e01c      	b.n	8012be2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012ba8:	f107 0308 	add.w	r3, r7, #8
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7ff ff07 	bl	80129c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb4:	b29a      	uxth	r2, r3
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012bc0:	e00f      	b.n	8012be2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012bc2:	f107 0308 	add.w	r3, r7, #8
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff fefa 	bl	80129c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bce:	0a5a      	lsrs	r2, r3, #9
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012bda:	e002      	b.n	8012be2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012bdc:	2304      	movs	r3, #4
 8012bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3730      	adds	r7, #48	; 0x30
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	24000019 	.word	0x24000019

08012bf4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	7c1b      	ldrb	r3, [r3, #16]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d115      	bne.n	8012c34 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8012c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c0c:	2202      	movs	r2, #2
 8012c0e:	2101      	movs	r1, #1
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f008 f8be 	bl	801ad92 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2201      	movs	r2, #1
 8012c1a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8012c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c22:	2202      	movs	r2, #2
 8012c24:	2181      	movs	r1, #129	; 0x81
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f008 f8b3 	bl	801ad92 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	62da      	str	r2, [r3, #44]	; 0x2c
 8012c32:	e012      	b.n	8012c5a <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8012c34:	2340      	movs	r3, #64	; 0x40
 8012c36:	2202      	movs	r2, #2
 8012c38:	2101      	movs	r1, #1
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f008 f8a9 	bl	801ad92 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2201      	movs	r2, #1
 8012c44:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8012c48:	2340      	movs	r3, #64	; 0x40
 8012c4a:	2202      	movs	r2, #2
 8012c4c:	2181      	movs	r1, #129	; 0x81
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f008 f89f 	bl	801ad92 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	2201      	movs	r2, #1
 8012c58:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8012c5a:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8012c5e:	f008 fa35 	bl	801b0cc <malloc>
 8012c62:	4603      	mov	r3, r0
 8012c64:	461a      	mov	r2, r3
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d101      	bne.n	8012c7a <USBD_MSC_Init+0x86>
  {
    return USBD_FAIL;
 8012c76:	2302      	movs	r3, #2
 8012c78:	e003      	b.n	8012c82 <USBD_MSC_Init+0x8e>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f000 f9db 	bl	8013036 <MSC_BOT_Init>

  return USBD_OK;
 8012c80:	2300      	movs	r3, #0
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3708      	adds	r7, #8
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}

08012c8a <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8012c8a:	b580      	push	{r7, lr}
 8012c8c:	b082      	sub	sp, #8
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	6078      	str	r0, [r7, #4]
 8012c92:	460b      	mov	r3, r1
 8012c94:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8012c96:	2101      	movs	r1, #1
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f008 f8a0 	bl	801adde <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8012ca6:	2181      	movs	r1, #129	; 0x81
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f008 f898 	bl	801adde <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f000 fa08 	bl	80130ca <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d009      	beq.n	8012cd8 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f008 fa06 	bl	801b0dc <free>
    pdev->pClassData  = NULL;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8012cd8:	2300      	movs	r3, #0
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3708      	adds	r7, #8
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
	...

08012ce4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b086      	sub	sp, #24
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cf4:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d04d      	beq.n	8012da6 <USBD_MSC_Setup+0xc2>
 8012d0a:	2b20      	cmp	r3, #32
 8012d0c:	f040 8113 	bne.w	8012f36 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	785b      	ldrb	r3, [r3, #1]
 8012d14:	2bfe      	cmp	r3, #254	; 0xfe
 8012d16:	d002      	beq.n	8012d1e <USBD_MSC_Setup+0x3a>
 8012d18:	2bff      	cmp	r3, #255	; 0xff
 8012d1a:	d024      	beq.n	8012d66 <USBD_MSC_Setup+0x82>
 8012d1c:	e03b      	b.n	8012d96 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	885b      	ldrh	r3, [r3, #2]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d118      	bne.n	8012d58 <USBD_MSC_Setup+0x74>
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	88db      	ldrh	r3, [r3, #6]
 8012d2a:	2b01      	cmp	r3, #1
 8012d2c:	d114      	bne.n	8012d58 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	da0f      	bge.n	8012d58 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d3e:	699b      	ldr	r3, [r3, #24]
 8012d40:	4798      	blx	r3
 8012d42:	4603      	mov	r3, r0
 8012d44:	461a      	mov	r2, r3
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	4619      	mov	r1, r3
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f002 f9cd 	bl	80150f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012d56:	e025      	b.n	8012da4 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8012d58:	6839      	ldr	r1, [r7, #0]
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f002 f95d 	bl	801501a <USBD_CtlError>
            ret = USBD_FAIL;
 8012d60:	2302      	movs	r3, #2
 8012d62:	75fb      	strb	r3, [r7, #23]
          break;
 8012d64:	e01e      	b.n	8012da4 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	885b      	ldrh	r3, [r3, #2]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d10c      	bne.n	8012d88 <USBD_MSC_Setup+0xa4>
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	88db      	ldrh	r3, [r3, #6]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d108      	bne.n	8012d88 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	db03      	blt.n	8012d88 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f000 f988 	bl	8013096 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012d86:	e00d      	b.n	8012da4 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8012d88:	6839      	ldr	r1, [r7, #0]
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f002 f945 	bl	801501a <USBD_CtlError>
            ret = USBD_FAIL;
 8012d90:	2302      	movs	r3, #2
 8012d92:	75fb      	strb	r3, [r7, #23]
          break;
 8012d94:	e006      	b.n	8012da4 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012d96:	6839      	ldr	r1, [r7, #0]
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f002 f93e 	bl	801501a <USBD_CtlError>
          ret = USBD_FAIL;
 8012d9e:	2302      	movs	r3, #2
 8012da0:	75fb      	strb	r3, [r7, #23]
          break;
 8012da2:	bf00      	nop
      }
      break;
 8012da4:	e0ce      	b.n	8012f44 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	785b      	ldrb	r3, [r3, #1]
 8012daa:	2b0b      	cmp	r3, #11
 8012dac:	f200 80bb 	bhi.w	8012f26 <USBD_MSC_Setup+0x242>
 8012db0:	a201      	add	r2, pc, #4	; (adr r2, 8012db8 <USBD_MSC_Setup+0xd4>)
 8012db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012db6:	bf00      	nop
 8012db8:	08012de9 	.word	0x08012de9
 8012dbc:	08012e5f 	.word	0x08012e5f
 8012dc0:	08012f27 	.word	0x08012f27
 8012dc4:	08012f27 	.word	0x08012f27
 8012dc8:	08012f27 	.word	0x08012f27
 8012dcc:	08012f27 	.word	0x08012f27
 8012dd0:	08012f27 	.word	0x08012f27
 8012dd4:	08012f27 	.word	0x08012f27
 8012dd8:	08012f27 	.word	0x08012f27
 8012ddc:	08012f27 	.word	0x08012f27
 8012de0:	08012e11 	.word	0x08012e11
 8012de4:	08012e39 	.word	0x08012e39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012dee:	2b03      	cmp	r3, #3
 8012df0:	d107      	bne.n	8012e02 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8012df2:	f107 030e 	add.w	r3, r7, #14
 8012df6:	2202      	movs	r2, #2
 8012df8:	4619      	mov	r1, r3
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f002 f978 	bl	80150f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012e00:	e098      	b.n	8012f34 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8012e02:	6839      	ldr	r1, [r7, #0]
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f002 f908 	bl	801501a <USBD_CtlError>
            ret = USBD_FAIL;
 8012e0a:	2302      	movs	r3, #2
 8012e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8012e0e:	e091      	b.n	8012f34 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e16:	2b03      	cmp	r3, #3
 8012e18:	d107      	bne.n	8012e2a <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	3304      	adds	r3, #4
 8012e1e:	2201      	movs	r2, #1
 8012e20:	4619      	mov	r1, r3
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f002 f964 	bl	80150f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012e28:	e084      	b.n	8012f34 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8012e2a:	6839      	ldr	r1, [r7, #0]
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f002 f8f4 	bl	801501a <USBD_CtlError>
            ret = USBD_FAIL;
 8012e32:	2302      	movs	r3, #2
 8012e34:	75fb      	strb	r3, [r7, #23]
          break;
 8012e36:	e07d      	b.n	8012f34 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e3e:	2b03      	cmp	r3, #3
 8012e40:	d106      	bne.n	8012e50 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	885b      	ldrh	r3, [r3, #2]
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	461a      	mov	r2, r3
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012e4e:	e071      	b.n	8012f34 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8012e50:	6839      	ldr	r1, [r7, #0]
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f002 f8e1 	bl	801501a <USBD_CtlError>
            ret = USBD_FAIL;
 8012e58:	2302      	movs	r3, #2
 8012e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8012e5c:	e06a      	b.n	8012f34 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	889b      	ldrh	r3, [r3, #4]
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	4619      	mov	r1, r3
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f007 ffd8 	bl	801ae1c <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	889b      	ldrh	r3, [r3, #4]
 8012e70:	b2db      	uxtb	r3, r3
 8012e72:	4619      	mov	r1, r3
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f007 ffb2 	bl	801adde <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	889b      	ldrh	r3, [r3, #4]
 8012e7e:	b25b      	sxtb	r3, r3
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	da23      	bge.n	8012ecc <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	889b      	ldrh	r3, [r3, #4]
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	f003 020f 	and.w	r2, r3, #15
 8012e8e:	6879      	ldr	r1, [r7, #4]
 8012e90:	4613      	mov	r3, r2
 8012e92:	009b      	lsls	r3, r3, #2
 8012e94:	4413      	add	r3, r2
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	440b      	add	r3, r1
 8012e9a:	3318      	adds	r3, #24
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	7c1b      	ldrb	r3, [r3, #16]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d107      	bne.n	8012eb8 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8012ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012eac:	2202      	movs	r2, #2
 8012eae:	2181      	movs	r1, #129	; 0x81
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f007 ff6e 	bl	801ad92 <USBD_LL_OpenEP>
 8012eb6:	e005      	b.n	8012ec4 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8012eb8:	2340      	movs	r3, #64	; 0x40
 8012eba:	2202      	movs	r2, #2
 8012ebc:	2181      	movs	r1, #129	; 0x81
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f007 ff67 	bl	801ad92 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8012eca:	e024      	b.n	8012f16 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	889b      	ldrh	r3, [r3, #4]
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	f003 020f 	and.w	r2, r3, #15
 8012ed6:	6879      	ldr	r1, [r7, #4]
 8012ed8:	4613      	mov	r3, r2
 8012eda:	009b      	lsls	r3, r3, #2
 8012edc:	4413      	add	r3, r2
 8012ede:	009b      	lsls	r3, r3, #2
 8012ee0:	440b      	add	r3, r1
 8012ee2:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	7c1b      	ldrb	r3, [r3, #16]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d107      	bne.n	8012f02 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8012ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ef6:	2202      	movs	r2, #2
 8012ef8:	2101      	movs	r1, #1
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f007 ff49 	bl	801ad92 <USBD_LL_OpenEP>
 8012f00:	e005      	b.n	8012f0e <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8012f02:	2340      	movs	r3, #64	; 0x40
 8012f04:	2202      	movs	r2, #2
 8012f06:	2101      	movs	r1, #1
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f007 ff42 	bl	801ad92 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2201      	movs	r2, #1
 8012f12:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	889b      	ldrh	r3, [r3, #4]
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 fa52 	bl	80133c8 <MSC_BOT_CplClrFeature>
          break;
 8012f24:	e006      	b.n	8012f34 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8012f26:	6839      	ldr	r1, [r7, #0]
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f002 f876 	bl	801501a <USBD_CtlError>
          ret = USBD_FAIL;
 8012f2e:	2302      	movs	r3, #2
 8012f30:	75fb      	strb	r3, [r7, #23]
          break;
 8012f32:	bf00      	nop
      }
      break;
 8012f34:	e006      	b.n	8012f44 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8012f36:	6839      	ldr	r1, [r7, #0]
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f002 f86e 	bl	801501a <USBD_CtlError>
      ret = USBD_FAIL;
 8012f3e:	2302      	movs	r3, #2
 8012f40:	75fb      	strb	r3, [r7, #23]
      break;
 8012f42:	bf00      	nop
  }

  return ret;
 8012f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f46:	4618      	mov	r0, r3
 8012f48:	3718      	adds	r7, #24
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd80      	pop	{r7, pc}
 8012f4e:	bf00      	nop

08012f50 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b082      	sub	sp, #8
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	460b      	mov	r3, r1
 8012f5a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8012f5c:	78fb      	ldrb	r3, [r7, #3]
 8012f5e:	4619      	mov	r1, r3
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f000 f8c3 	bl	80130ec <MSC_BOT_DataIn>

  return USBD_OK;
 8012f66:	2300      	movs	r3, #0
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3708      	adds	r7, #8
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	460b      	mov	r3, r1
 8012f7a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8012f7c:	78fb      	ldrb	r3, [r7, #3]
 8012f7e:	4619      	mov	r1, r3
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f000 f8e4 	bl	801314e <MSC_BOT_DataOut>

  return USBD_OK;
 8012f86:	2300      	movs	r3, #0
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3708      	adds	r7, #8
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012f90:	b480      	push	{r7}
 8012f92:	b083      	sub	sp, #12
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2220      	movs	r2, #32
 8012f9c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8012f9e:	4b03      	ldr	r3, [pc, #12]	; (8012fac <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr
 8012fac:	24000054 	.word	0x24000054

08012fb0 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b083      	sub	sp, #12
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2220      	movs	r2, #32
 8012fbc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8012fbe:	4b03      	ldr	r3, [pc, #12]	; (8012fcc <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	370c      	adds	r7, #12
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr
 8012fcc:	24000074 	.word	0x24000074

08012fd0 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	b083      	sub	sp, #12
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2220      	movs	r2, #32
 8012fdc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8012fde:	4b03      	ldr	r3, [pc, #12]	; (8012fec <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	370c      	adds	r7, #12
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fea:	4770      	bx	lr
 8012fec:	24000094 	.word	0x24000094

08012ff0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	b083      	sub	sp, #12
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	220a      	movs	r2, #10
 8012ffc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8012ffe:	4b03      	ldr	r3, [pc, #12]	; (801300c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013000:	4618      	mov	r0, r3
 8013002:	370c      	adds	r7, #12
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr
 801300c:	240000b4 	.word	0x240000b4

08013010 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8013010:	b480      	push	{r7}
 8013012:	b083      	sub	sp, #12
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d003      	beq.n	8013028 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	683a      	ldr	r2, [r7, #0]
 8013024:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8013028:	2300      	movs	r3, #0
}
 801302a:	4618      	mov	r0, r3
 801302c:	370c      	adds	r7, #12
 801302e:	46bd      	mov	sp, r7
 8013030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013034:	4770      	bx	lr

08013036 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8013036:	b580      	push	{r7, lr}
 8013038:	b084      	sub	sp, #16
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013044:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	2200      	movs	r2, #0
 801304a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	2200      	movs	r2, #0
 8013050:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2200      	movs	r2, #0
 8013056:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	2200      	movs	r2, #0
 801305e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2000      	movs	r0, #0
 801306c:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801306e:	2101      	movs	r1, #1
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f007 fed3 	bl	801ae1c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8013076:	2181      	movs	r1, #129	; 0x81
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f007 fecf 	bl	801ae1c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8013084:	231f      	movs	r3, #31
 8013086:	2101      	movs	r1, #1
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f007 ff92 	bl	801afb2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 801308e:	bf00      	nop
 8013090:	3710      	adds	r7, #16
 8013092:	46bd      	mov	sp, r7
 8013094:	bd80      	pop	{r7, pc}

08013096 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8013096:	b580      	push	{r7, lr}
 8013098:	b084      	sub	sp, #16
 801309a:	af00      	add	r7, sp, #0
 801309c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130a4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2200      	movs	r2, #0
 80130aa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	2201      	movs	r2, #1
 80130b0:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80130b8:	231f      	movs	r3, #31
 80130ba:	2101      	movs	r1, #1
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f007 ff78 	bl	801afb2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80130c2:	bf00      	nop
 80130c4:	3710      	adds	r7, #16
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}

080130ca <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80130ca:	b480      	push	{r7}
 80130cc:	b085      	sub	sp, #20
 80130ce:	af00      	add	r7, sp, #0
 80130d0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130d8:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2200      	movs	r2, #0
 80130de:	721a      	strb	r2, [r3, #8]
}
 80130e0:	bf00      	nop
 80130e2:	3714      	adds	r7, #20
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr

080130ec <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b084      	sub	sp, #16
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	460b      	mov	r3, r1
 80130f6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130fe:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	7a1b      	ldrb	r3, [r3, #8]
 8013104:	2b02      	cmp	r3, #2
 8013106:	d004      	beq.n	8013112 <MSC_BOT_DataIn+0x26>
 8013108:	2b02      	cmp	r3, #2
 801310a:	db19      	blt.n	8013140 <MSC_BOT_DataIn+0x54>
 801310c:	2b04      	cmp	r3, #4
 801310e:	dc17      	bgt.n	8013140 <MSC_BOT_DataIn+0x54>
 8013110:	e011      	b.n	8013136 <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801311e:	461a      	mov	r2, r3
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f000 f979 	bl	8013418 <SCSI_ProcessCmd>
 8013126:	4603      	mov	r3, r0
 8013128:	2b00      	cmp	r3, #0
 801312a:	da0b      	bge.n	8013144 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801312c:	2101      	movs	r1, #1
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f000 f8f0 	bl	8013314 <MSC_BOT_SendCSW>
      }
      break;
 8013134:	e006      	b.n	8013144 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013136:	2100      	movs	r1, #0
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 f8eb 	bl	8013314 <MSC_BOT_SendCSW>
      break;
 801313e:	e002      	b.n	8013146 <MSC_BOT_DataIn+0x5a>

    default:
      break;
 8013140:	bf00      	nop
 8013142:	e000      	b.n	8013146 <MSC_BOT_DataIn+0x5a>
      break;
 8013144:	bf00      	nop
  }
}
 8013146:	bf00      	nop
 8013148:	3710      	adds	r7, #16
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}

0801314e <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 801314e:	b580      	push	{r7, lr}
 8013150:	b084      	sub	sp, #16
 8013152:	af00      	add	r7, sp, #0
 8013154:	6078      	str	r0, [r7, #4]
 8013156:	460b      	mov	r3, r1
 8013158:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013160:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	7a1b      	ldrb	r3, [r3, #8]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d002      	beq.n	8013170 <MSC_BOT_DataOut+0x22>
 801316a:	2b01      	cmp	r3, #1
 801316c:	d004      	beq.n	8013178 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801316e:	e015      	b.n	801319c <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f000 f817 	bl	80131a4 <MSC_BOT_CBW_Decode>
      break;
 8013176:	e011      	b.n	801319c <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013184:	461a      	mov	r2, r3
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f000 f946 	bl	8013418 <SCSI_ProcessCmd>
 801318c:	4603      	mov	r3, r0
 801318e:	2b00      	cmp	r3, #0
 8013190:	da03      	bge.n	801319a <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013192:	2101      	movs	r1, #1
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f000 f8bd 	bl	8013314 <MSC_BOT_SendCSW>
      break;
 801319a:	bf00      	nop
  }
}
 801319c:	bf00      	nop
 801319e:	3710      	adds	r7, #16
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}

080131a4 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b084      	sub	sp, #16
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131b2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80131cc:	2101      	movs	r1, #1
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f007 ff12 	bl	801aff8 <USBD_LL_GetRxDataSize>
 80131d4:	4603      	mov	r3, r0
 80131d6:	2b1f      	cmp	r3, #31
 80131d8:	d114      	bne.n	8013204 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80131e0:	4a32      	ldr	r2, [pc, #200]	; (80132ac <MSC_BOT_CBW_Decode+0x108>)
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d10e      	bne.n	8013204 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d809      	bhi.n	8013204 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d004      	beq.n	8013204 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8013200:	2b10      	cmp	r3, #16
 8013202:	d90e      	bls.n	8013222 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801320a:	2320      	movs	r3, #32
 801320c:	2205      	movs	r2, #5
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f000 fc4b 	bl	8013aaa <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2202      	movs	r2, #2
 8013218:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f000 f8a6 	bl	801336c <MSC_BOT_Abort>
 8013220:	e041      	b.n	80132a6 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801322e:	461a      	mov	r2, r3
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f000 f8f1 	bl	8013418 <SCSI_ProcessCmd>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	da0c      	bge.n	8013256 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	7a1b      	ldrb	r3, [r3, #8]
 8013240:	2b05      	cmp	r3, #5
 8013242:	d104      	bne.n	801324e <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013244:	2101      	movs	r1, #1
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f000 f864 	bl	8013314 <MSC_BOT_SendCSW>
 801324c:	e02b      	b.n	80132a6 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f000 f88c 	bl	801336c <MSC_BOT_Abort>
 8013254:	e027      	b.n	80132a6 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	7a1b      	ldrb	r3, [r3, #8]
 801325a:	2b02      	cmp	r3, #2
 801325c:	d022      	beq.n	80132a4 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013262:	2b01      	cmp	r3, #1
 8013264:	d01e      	beq.n	80132a4 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801326a:	2b03      	cmp	r3, #3
 801326c:	d01a      	beq.n	80132a4 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	895b      	ldrh	r3, [r3, #10]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d009      	beq.n	801328a <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	f103 010c 	add.w	r1, r3, #12
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	895b      	ldrh	r3, [r3, #10]
 8013280:	461a      	mov	r2, r3
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f000 f814 	bl	80132b0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013288:	e00d      	b.n	80132a6 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	895b      	ldrh	r3, [r3, #10]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d104      	bne.n	801329c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013292:	2100      	movs	r1, #0
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f000 f83d 	bl	8013314 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801329a:	e004      	b.n	80132a6 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f000 f865 	bl	801336c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80132a2:	e000      	b.n	80132a6 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80132a4:	bf00      	nop
    }
  }
}
 80132a6:	3710      	adds	r7, #16
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	43425355 	.word	0x43425355

080132b0 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b086      	sub	sp, #24
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	4613      	mov	r3, r2
 80132bc:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132c4:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80132cc:	88fb      	ldrh	r3, [r7, #6]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d204      	bcs.n	80132dc <MSC_BOT_SendData+0x2c>
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80132d8:	b29b      	uxth	r3, r3
 80132da:	e000      	b.n	80132de <MSC_BOT_SendData+0x2e>
 80132dc:	88fb      	ldrh	r3, [r7, #6]
 80132de:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80132e6:	88fb      	ldrh	r3, [r7, #6]
 80132e8:	1ad2      	subs	r2, r2, r3
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	2200      	movs	r2, #0
 80132f4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	2204      	movs	r2, #4
 80132fc:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80132fe:	8a7b      	ldrh	r3, [r7, #18]
 8013300:	68ba      	ldr	r2, [r7, #8]
 8013302:	2181      	movs	r1, #129	; 0x81
 8013304:	68f8      	ldr	r0, [r7, #12]
 8013306:	f007 fe31 	bl	801af6c <USBD_LL_Transmit>
}
 801330a:	bf00      	nop
 801330c:	3718      	adds	r7, #24
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
	...

08013314 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b084      	sub	sp, #16
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	460b      	mov	r3, r1
 801331e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013326:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	4a0f      	ldr	r2, [pc, #60]	; (8013368 <MSC_BOT_SendCSW+0x54>)
 801332c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	78fa      	ldrb	r2, [r7, #3]
 8013334:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	2200      	movs	r2, #0
 801333c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8013344:	230d      	movs	r3, #13
 8013346:	2181      	movs	r1, #129	; 0x81
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f007 fe0f 	bl	801af6c <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8013354:	231f      	movs	r3, #31
 8013356:	2101      	movs	r1, #1
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f007 fe2a 	bl	801afb2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 801335e:	bf00      	nop
 8013360:	3710      	adds	r7, #16
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	53425355 	.word	0x53425355

0801336c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b084      	sub	sp, #16
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801337a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8013382:	2b00      	cmp	r3, #0
 8013384:	d10c      	bne.n	80133a0 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 801338c:	2b00      	cmp	r3, #0
 801338e:	d007      	beq.n	80133a0 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013394:	2b00      	cmp	r3, #0
 8013396:	d103      	bne.n	80133a0 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013398:	2101      	movs	r1, #1
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f007 fd5d 	bl	801ae5a <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80133a0:	2181      	movs	r1, #129	; 0x81
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f007 fd59 	bl	801ae5a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	7a5b      	ldrb	r3, [r3, #9]
 80133ac:	2b02      	cmp	r3, #2
 80133ae:	d107      	bne.n	80133c0 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80133b6:	231f      	movs	r3, #31
 80133b8:	2101      	movs	r1, #1
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f007 fdf9 	bl	801afb2 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 80133c0:	bf00      	nop
 80133c2:	3710      	adds	r7, #16
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	460b      	mov	r3, r1
 80133d2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133da:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	7a5b      	ldrb	r3, [r3, #9]
 80133e0:	2b02      	cmp	r3, #2
 80133e2:	d107      	bne.n	80133f4 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80133e4:	2181      	movs	r1, #129	; 0x81
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f007 fd37 	bl	801ae5a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2200      	movs	r2, #0
 80133f0:	725a      	strb	r2, [r3, #9]
 80133f2:	e00d      	b.n	8013410 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80133f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	da08      	bge.n	801340e <MSC_BOT_CplClrFeature+0x46>
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	7a5b      	ldrb	r3, [r3, #9]
 8013400:	2b01      	cmp	r3, #1
 8013402:	d004      	beq.n	801340e <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013404:	2101      	movs	r1, #1
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f7ff ff84 	bl	8013314 <MSC_BOT_SendCSW>
 801340c:	e000      	b.n	8013410 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 801340e:	bf00      	nop
  }
}
 8013410:	3710      	adds	r7, #16
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
	...

08013418 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b084      	sub	sp, #16
 801341c:	af00      	add	r7, sp, #0
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	460b      	mov	r3, r1
 8013422:	607a      	str	r2, [r7, #4]
 8013424:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	2b5a      	cmp	r3, #90	; 0x5a
 801342c:	f200 810e 	bhi.w	801364c <SCSI_ProcessCmd+0x234>
 8013430:	a201      	add	r2, pc, #4	; (adr r2, 8013438 <SCSI_ProcessCmd+0x20>)
 8013432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013436:	bf00      	nop
 8013438:	080135a5 	.word	0x080135a5
 801343c:	0801364d 	.word	0x0801364d
 8013440:	0801364d 	.word	0x0801364d
 8013444:	080135b3 	.word	0x080135b3
 8013448:	0801364d 	.word	0x0801364d
 801344c:	0801364d 	.word	0x0801364d
 8013450:	0801364d 	.word	0x0801364d
 8013454:	0801364d 	.word	0x0801364d
 8013458:	0801364d 	.word	0x0801364d
 801345c:	0801364d 	.word	0x0801364d
 8013460:	0801364d 	.word	0x0801364d
 8013464:	0801364d 	.word	0x0801364d
 8013468:	0801364d 	.word	0x0801364d
 801346c:	0801364d 	.word	0x0801364d
 8013470:	0801364d 	.word	0x0801364d
 8013474:	0801364d 	.word	0x0801364d
 8013478:	0801364d 	.word	0x0801364d
 801347c:	0801364d 	.word	0x0801364d
 8013480:	080135c1 	.word	0x080135c1
 8013484:	0801364d 	.word	0x0801364d
 8013488:	0801364d 	.word	0x0801364d
 801348c:	0801364d 	.word	0x0801364d
 8013490:	0801364d 	.word	0x0801364d
 8013494:	0801364d 	.word	0x0801364d
 8013498:	0801364d 	.word	0x0801364d
 801349c:	0801364d 	.word	0x0801364d
 80134a0:	080135eb 	.word	0x080135eb
 80134a4:	080135cf 	.word	0x080135cf
 80134a8:	0801364d 	.word	0x0801364d
 80134ac:	0801364d 	.word	0x0801364d
 80134b0:	080135dd 	.word	0x080135dd
 80134b4:	0801364d 	.word	0x0801364d
 80134b8:	0801364d 	.word	0x0801364d
 80134bc:	0801364d 	.word	0x0801364d
 80134c0:	0801364d 	.word	0x0801364d
 80134c4:	08013607 	.word	0x08013607
 80134c8:	0801364d 	.word	0x0801364d
 80134cc:	08013615 	.word	0x08013615
 80134d0:	0801364d 	.word	0x0801364d
 80134d4:	0801364d 	.word	0x0801364d
 80134d8:	08013623 	.word	0x08013623
 80134dc:	0801364d 	.word	0x0801364d
 80134e0:	08013631 	.word	0x08013631
 80134e4:	0801364d 	.word	0x0801364d
 80134e8:	0801364d 	.word	0x0801364d
 80134ec:	0801364d 	.word	0x0801364d
 80134f0:	0801364d 	.word	0x0801364d
 80134f4:	0801363f 	.word	0x0801363f
 80134f8:	0801364d 	.word	0x0801364d
 80134fc:	0801364d 	.word	0x0801364d
 8013500:	0801364d 	.word	0x0801364d
 8013504:	0801364d 	.word	0x0801364d
 8013508:	0801364d 	.word	0x0801364d
 801350c:	0801364d 	.word	0x0801364d
 8013510:	0801364d 	.word	0x0801364d
 8013514:	0801364d 	.word	0x0801364d
 8013518:	0801364d 	.word	0x0801364d
 801351c:	0801364d 	.word	0x0801364d
 8013520:	0801364d 	.word	0x0801364d
 8013524:	0801364d 	.word	0x0801364d
 8013528:	0801364d 	.word	0x0801364d
 801352c:	0801364d 	.word	0x0801364d
 8013530:	0801364d 	.word	0x0801364d
 8013534:	0801364d 	.word	0x0801364d
 8013538:	0801364d 	.word	0x0801364d
 801353c:	0801364d 	.word	0x0801364d
 8013540:	0801364d 	.word	0x0801364d
 8013544:	0801364d 	.word	0x0801364d
 8013548:	0801364d 	.word	0x0801364d
 801354c:	0801364d 	.word	0x0801364d
 8013550:	0801364d 	.word	0x0801364d
 8013554:	0801364d 	.word	0x0801364d
 8013558:	0801364d 	.word	0x0801364d
 801355c:	0801364d 	.word	0x0801364d
 8013560:	0801364d 	.word	0x0801364d
 8013564:	0801364d 	.word	0x0801364d
 8013568:	0801364d 	.word	0x0801364d
 801356c:	0801364d 	.word	0x0801364d
 8013570:	0801364d 	.word	0x0801364d
 8013574:	0801364d 	.word	0x0801364d
 8013578:	0801364d 	.word	0x0801364d
 801357c:	0801364d 	.word	0x0801364d
 8013580:	0801364d 	.word	0x0801364d
 8013584:	0801364d 	.word	0x0801364d
 8013588:	0801364d 	.word	0x0801364d
 801358c:	0801364d 	.word	0x0801364d
 8013590:	0801364d 	.word	0x0801364d
 8013594:	0801364d 	.word	0x0801364d
 8013598:	0801364d 	.word	0x0801364d
 801359c:	0801364d 	.word	0x0801364d
 80135a0:	080135f9 	.word	0x080135f9
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 80135a4:	7afb      	ldrb	r3, [r7, #11]
 80135a6:	687a      	ldr	r2, [r7, #4]
 80135a8:	4619      	mov	r1, r3
 80135aa:	68f8      	ldr	r0, [r7, #12]
 80135ac:	f000 f85c 	bl	8013668 <SCSI_TestUnitReady>
      break;
 80135b0:	e055      	b.n	801365e <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 80135b2:	7afb      	ldrb	r3, [r7, #11]
 80135b4:	687a      	ldr	r2, [r7, #4]
 80135b6:	4619      	mov	r1, r3
 80135b8:	68f8      	ldr	r0, [r7, #12]
 80135ba:	f000 fa0b 	bl	80139d4 <SCSI_RequestSense>
      break;
 80135be:	e04e      	b.n	801365e <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 80135c0:	7afb      	ldrb	r3, [r7, #11]
 80135c2:	687a      	ldr	r2, [r7, #4]
 80135c4:	4619      	mov	r1, r3
 80135c6:	68f8      	ldr	r0, [r7, #12]
 80135c8:	f000 f888 	bl	80136dc <SCSI_Inquiry>
      break;
 80135cc:	e047      	b.n	801365e <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80135ce:	7afb      	ldrb	r3, [r7, #11]
 80135d0:	687a      	ldr	r2, [r7, #4]
 80135d2:	4619      	mov	r1, r3
 80135d4:	68f8      	ldr	r0, [r7, #12]
 80135d6:	f000 faa2 	bl	8013b1e <SCSI_StartStopUnit>
      break;
 80135da:	e040      	b.n	801365e <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80135dc:	7afb      	ldrb	r3, [r7, #11]
 80135de:	687a      	ldr	r2, [r7, #4]
 80135e0:	4619      	mov	r1, r3
 80135e2:	68f8      	ldr	r0, [r7, #12]
 80135e4:	f000 fa9b 	bl	8013b1e <SCSI_StartStopUnit>
      break;
 80135e8:	e039      	b.n	801365e <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 80135ea:	7afb      	ldrb	r3, [r7, #11]
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	4619      	mov	r1, r3
 80135f0:	68f8      	ldr	r0, [r7, #12]
 80135f2:	f000 f99f 	bl	8013934 <SCSI_ModeSense6>
      break;
 80135f6:	e032      	b.n	801365e <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 80135f8:	7afb      	ldrb	r3, [r7, #11]
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	4619      	mov	r1, r3
 80135fe:	68f8      	ldr	r0, [r7, #12]
 8013600:	f000 f9c0 	bl	8013984 <SCSI_ModeSense10>
      break;
 8013604:	e02b      	b.n	801365e <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8013606:	7afb      	ldrb	r3, [r7, #11]
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	4619      	mov	r1, r3
 801360c:	68f8      	ldr	r0, [r7, #12]
 801360e:	f000 f92c 	bl	801386a <SCSI_ReadFormatCapacity>
      break;
 8013612:	e024      	b.n	801365e <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8013614:	7afb      	ldrb	r3, [r7, #11]
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	4619      	mov	r1, r3
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f000 f8be 	bl	801379c <SCSI_ReadCapacity10>
      break;
 8013620:	e01d      	b.n	801365e <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8013622:	7afb      	ldrb	r3, [r7, #11]
 8013624:	687a      	ldr	r2, [r7, #4]
 8013626:	4619      	mov	r1, r3
 8013628:	68f8      	ldr	r0, [r7, #12]
 801362a:	f000 fa8d 	bl	8013b48 <SCSI_Read10>
      break;
 801362e:	e016      	b.n	801365e <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8013630:	7afb      	ldrb	r3, [r7, #11]
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	4619      	mov	r1, r3
 8013636:	68f8      	ldr	r0, [r7, #12]
 8013638:	f000 fb12 	bl	8013c60 <SCSI_Write10>
      break;
 801363c:	e00f      	b.n	801365e <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 801363e:	7afb      	ldrb	r3, [r7, #11]
 8013640:	687a      	ldr	r2, [r7, #4]
 8013642:	4619      	mov	r1, r3
 8013644:	68f8      	ldr	r0, [r7, #12]
 8013646:	f000 fbbb 	bl	8013dc0 <SCSI_Verify10>
      break;
 801364a:	e008      	b.n	801365e <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801364c:	7af9      	ldrb	r1, [r7, #11]
 801364e:	2320      	movs	r3, #32
 8013650:	2205      	movs	r2, #5
 8013652:	68f8      	ldr	r0, [r7, #12]
 8013654:	f000 fa29 	bl	8013aaa <SCSI_SenseCode>
      return -1;
 8013658:	f04f 33ff 	mov.w	r3, #4294967295
 801365c:	e000      	b.n	8013660 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 801365e:	2300      	movs	r3, #0
}
 8013660:	4618      	mov	r0, r3
 8013662:	3710      	adds	r7, #16
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b086      	sub	sp, #24
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	460b      	mov	r3, r1
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801367c:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013684:	2b00      	cmp	r3, #0
 8013686:	d00a      	beq.n	801369e <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013688:	697b      	ldr	r3, [r7, #20]
 801368a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801368e:	2320      	movs	r3, #32
 8013690:	2205      	movs	r2, #5
 8013692:	68f8      	ldr	r0, [r7, #12]
 8013694:	f000 fa09 	bl	8013aaa <SCSI_SenseCode>

    return -1;
 8013698:	f04f 33ff 	mov.w	r3, #4294967295
 801369c:	e019      	b.n	80136d2 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136a4:	689b      	ldr	r3, [r3, #8]
 80136a6:	7afa      	ldrb	r2, [r7, #11]
 80136a8:	4610      	mov	r0, r2
 80136aa:	4798      	blx	r3
 80136ac:	4603      	mov	r3, r0
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d00b      	beq.n	80136ca <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80136b2:	7af9      	ldrb	r1, [r7, #11]
 80136b4:	233a      	movs	r3, #58	; 0x3a
 80136b6:	2202      	movs	r2, #2
 80136b8:	68f8      	ldr	r0, [r7, #12]
 80136ba:	f000 f9f6 	bl	8013aaa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	2205      	movs	r2, #5
 80136c2:	721a      	strb	r2, [r3, #8]

    return -1;
 80136c4:	f04f 33ff 	mov.w	r3, #4294967295
 80136c8:	e003      	b.n	80136d2 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	2200      	movs	r2, #0
 80136ce:	815a      	strh	r2, [r3, #10]

  return 0;
 80136d0:	2300      	movs	r3, #0
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3718      	adds	r7, #24
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
	...

080136dc <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80136dc:	b480      	push	{r7}
 80136de:	b089      	sub	sp, #36	; 0x24
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	60f8      	str	r0, [r7, #12]
 80136e4:	460b      	mov	r3, r1
 80136e6:	607a      	str	r2, [r7, #4]
 80136e8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136f0:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	3301      	adds	r3, #1
 80136f6:	781b      	ldrb	r3, [r3, #0]
 80136f8:	f003 0301 	and.w	r3, r3, #1
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d014      	beq.n	801372a <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8013700:	2307      	movs	r3, #7
 8013702:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8013704:	69bb      	ldr	r3, [r7, #24]
 8013706:	8bfa      	ldrh	r2, [r7, #30]
 8013708:	815a      	strh	r2, [r3, #10]

    while (len)
 801370a:	e00a      	b.n	8013722 <SCSI_Inquiry+0x46>
    {
      len--;
 801370c:	8bfb      	ldrh	r3, [r7, #30]
 801370e:	3b01      	subs	r3, #1
 8013710:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8013712:	8bfa      	ldrh	r2, [r7, #30]
 8013714:	8bfb      	ldrh	r3, [r7, #30]
 8013716:	4920      	ldr	r1, [pc, #128]	; (8013798 <SCSI_Inquiry+0xbc>)
 8013718:	5c89      	ldrb	r1, [r1, r2]
 801371a:	69ba      	ldr	r2, [r7, #24]
 801371c:	4413      	add	r3, r2
 801371e:	460a      	mov	r2, r1
 8013720:	731a      	strb	r2, [r3, #12]
    while (len)
 8013722:	8bfb      	ldrh	r3, [r7, #30]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d1f1      	bne.n	801370c <SCSI_Inquiry+0x30>
 8013728:	e02e      	b.n	8013788 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013730:	69d9      	ldr	r1, [r3, #28]
 8013732:	7afa      	ldrb	r2, [r7, #11]
 8013734:	4613      	mov	r3, r2
 8013736:	00db      	lsls	r3, r3, #3
 8013738:	4413      	add	r3, r2
 801373a:	009b      	lsls	r3, r3, #2
 801373c:	440b      	add	r3, r1
 801373e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	3304      	adds	r3, #4
 8013744:	781b      	ldrb	r3, [r3, #0]
 8013746:	b29b      	uxth	r3, r3
 8013748:	3305      	adds	r3, #5
 801374a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	3304      	adds	r3, #4
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	b29b      	uxth	r3, r3
 8013754:	8bfa      	ldrh	r2, [r7, #30]
 8013756:	429a      	cmp	r2, r3
 8013758:	d303      	bcc.n	8013762 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	3304      	adds	r3, #4
 801375e:	781b      	ldrb	r3, [r3, #0]
 8013760:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	8bfa      	ldrh	r2, [r7, #30]
 8013766:	815a      	strh	r2, [r3, #10]

    while (len)
 8013768:	e00b      	b.n	8013782 <SCSI_Inquiry+0xa6>
    {
      len--;
 801376a:	8bfb      	ldrh	r3, [r7, #30]
 801376c:	3b01      	subs	r3, #1
 801376e:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8013770:	8bfb      	ldrh	r3, [r7, #30]
 8013772:	697a      	ldr	r2, [r7, #20]
 8013774:	441a      	add	r2, r3
 8013776:	8bfb      	ldrh	r3, [r7, #30]
 8013778:	7811      	ldrb	r1, [r2, #0]
 801377a:	69ba      	ldr	r2, [r7, #24]
 801377c:	4413      	add	r3, r2
 801377e:	460a      	mov	r2, r1
 8013780:	731a      	strb	r2, [r3, #12]
    while (len)
 8013782:	8bfb      	ldrh	r3, [r7, #30]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d1f0      	bne.n	801376a <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8013788:	2300      	movs	r3, #0
}
 801378a:	4618      	mov	r0, r3
 801378c:	3724      	adds	r7, #36	; 0x24
 801378e:	46bd      	mov	sp, r7
 8013790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013794:	4770      	bx	lr
 8013796:	bf00      	nop
 8013798:	0801b3e4 	.word	0x0801b3e4

0801379c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b086      	sub	sp, #24
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	60f8      	str	r0, [r7, #12]
 80137a4:	460b      	mov	r3, r1
 80137a6:	607a      	str	r2, [r7, #4]
 80137a8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137b0:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	697a      	ldr	r2, [r7, #20]
 80137bc:	f502 7118 	add.w	r1, r2, #608	; 0x260
 80137c0:	697a      	ldr	r2, [r7, #20]
 80137c2:	f202 225e 	addw	r2, r2, #606	; 0x25e
 80137c6:	7af8      	ldrb	r0, [r7, #11]
 80137c8:	4798      	blx	r3
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d008      	beq.n	80137e2 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80137d0:	7af9      	ldrb	r1, [r7, #11]
 80137d2:	233a      	movs	r3, #58	; 0x3a
 80137d4:	2202      	movs	r2, #2
 80137d6:	68f8      	ldr	r0, [r7, #12]
 80137d8:	f000 f967 	bl	8013aaa <SCSI_SenseCode>
    return -1;
 80137dc:	f04f 33ff 	mov.w	r3, #4294967295
 80137e0:	e03f      	b.n	8013862 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80137e8:	3b01      	subs	r3, #1
 80137ea:	0e1b      	lsrs	r3, r3, #24
 80137ec:	b2da      	uxtb	r2, r3
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80137f8:	3b01      	subs	r3, #1
 80137fa:	0c1b      	lsrs	r3, r3, #16
 80137fc:	b2da      	uxtb	r2, r3
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8013802:	697b      	ldr	r3, [r7, #20]
 8013804:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8013808:	3b01      	subs	r3, #1
 801380a:	0a1b      	lsrs	r3, r3, #8
 801380c:	b2da      	uxtb	r2, r3
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8013818:	b2db      	uxtb	r3, r3
 801381a:	3b01      	subs	r3, #1
 801381c:	b2da      	uxtb	r2, r3
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013828:	161b      	asrs	r3, r3, #24
 801382a:	b2da      	uxtb	r2, r3
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013836:	141b      	asrs	r3, r3, #16
 8013838:	b2da      	uxtb	r2, r3
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013844:	0a1b      	lsrs	r3, r3, #8
 8013846:	b29b      	uxth	r3, r3
 8013848:	b2da      	uxtb	r2, r3
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013854:	b2da      	uxtb	r2, r3
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	2208      	movs	r2, #8
 801385e:	815a      	strh	r2, [r3, #10]
    return 0;
 8013860:	2300      	movs	r3, #0
  }
}
 8013862:	4618      	mov	r0, r3
 8013864:	3718      	adds	r7, #24
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}

0801386a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 801386a:	b580      	push	{r7, lr}
 801386c:	b088      	sub	sp, #32
 801386e:	af00      	add	r7, sp, #0
 8013870:	60f8      	str	r0, [r7, #12]
 8013872:	460b      	mov	r3, r1
 8013874:	607a      	str	r2, [r7, #4]
 8013876:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801387e:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8013880:	2300      	movs	r3, #0
 8013882:	83fb      	strh	r3, [r7, #30]
 8013884:	e007      	b.n	8013896 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8013886:	8bfb      	ldrh	r3, [r7, #30]
 8013888:	69ba      	ldr	r2, [r7, #24]
 801388a:	4413      	add	r3, r2
 801388c:	2200      	movs	r2, #0
 801388e:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8013890:	8bfb      	ldrh	r3, [r7, #30]
 8013892:	3301      	adds	r3, #1
 8013894:	83fb      	strh	r3, [r7, #30]
 8013896:	8bfb      	ldrh	r3, [r7, #30]
 8013898:	2b0b      	cmp	r3, #11
 801389a:	d9f4      	bls.n	8013886 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	f107 0216 	add.w	r2, r7, #22
 80138a8:	f107 0110 	add.w	r1, r7, #16
 80138ac:	7af8      	ldrb	r0, [r7, #11]
 80138ae:	4798      	blx	r3
 80138b0:	4603      	mov	r3, r0
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d008      	beq.n	80138c8 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80138b6:	7af9      	ldrb	r1, [r7, #11]
 80138b8:	233a      	movs	r3, #58	; 0x3a
 80138ba:	2202      	movs	r2, #2
 80138bc:	68f8      	ldr	r0, [r7, #12]
 80138be:	f000 f8f4 	bl	8013aaa <SCSI_SenseCode>
    return -1;
 80138c2:	f04f 33ff 	mov.w	r3, #4294967295
 80138c6:	e030      	b.n	801392a <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	2208      	movs	r2, #8
 80138cc:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	3b01      	subs	r3, #1
 80138d2:	0e1b      	lsrs	r3, r3, #24
 80138d4:	b2da      	uxtb	r2, r3
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	3b01      	subs	r3, #1
 80138de:	0c1b      	lsrs	r3, r3, #16
 80138e0:	b2da      	uxtb	r2, r3
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	3b01      	subs	r3, #1
 80138ea:	0a1b      	lsrs	r3, r3, #8
 80138ec:	b2da      	uxtb	r2, r3
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	3b01      	subs	r3, #1
 80138f8:	b2da      	uxtb	r2, r3
 80138fa:	69bb      	ldr	r3, [r7, #24]
 80138fc:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80138fe:	69bb      	ldr	r3, [r7, #24]
 8013900:	2202      	movs	r2, #2
 8013902:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8013904:	8afb      	ldrh	r3, [r7, #22]
 8013906:	141b      	asrs	r3, r3, #16
 8013908:	b2da      	uxtb	r2, r3
 801390a:	69bb      	ldr	r3, [r7, #24]
 801390c:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801390e:	8afb      	ldrh	r3, [r7, #22]
 8013910:	0a1b      	lsrs	r3, r3, #8
 8013912:	b29b      	uxth	r3, r3
 8013914:	b2da      	uxtb	r2, r3
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 801391a:	8afb      	ldrh	r3, [r7, #22]
 801391c:	b2da      	uxtb	r2, r3
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8013922:	69bb      	ldr	r3, [r7, #24]
 8013924:	220c      	movs	r2, #12
 8013926:	815a      	strh	r2, [r3, #10]
    return 0;
 8013928:	2300      	movs	r3, #0
  }
}
 801392a:	4618      	mov	r0, r3
 801392c:	3720      	adds	r7, #32
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
	...

08013934 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013934:	b480      	push	{r7}
 8013936:	b087      	sub	sp, #28
 8013938:	af00      	add	r7, sp, #0
 801393a:	60f8      	str	r0, [r7, #12]
 801393c:	460b      	mov	r3, r1
 801393e:	607a      	str	r2, [r7, #4]
 8013940:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013948:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 801394a:	2308      	movs	r3, #8
 801394c:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	8afa      	ldrh	r2, [r7, #22]
 8013952:	815a      	strh	r2, [r3, #10]

  while (len)
 8013954:	e00a      	b.n	801396c <SCSI_ModeSense6+0x38>
  {
    len--;
 8013956:	8afb      	ldrh	r3, [r7, #22]
 8013958:	3b01      	subs	r3, #1
 801395a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 801395c:	8afa      	ldrh	r2, [r7, #22]
 801395e:	8afb      	ldrh	r3, [r7, #22]
 8013960:	4907      	ldr	r1, [pc, #28]	; (8013980 <SCSI_ModeSense6+0x4c>)
 8013962:	5c89      	ldrb	r1, [r1, r2]
 8013964:	693a      	ldr	r2, [r7, #16]
 8013966:	4413      	add	r3, r2
 8013968:	460a      	mov	r2, r1
 801396a:	731a      	strb	r2, [r3, #12]
  while (len)
 801396c:	8afb      	ldrh	r3, [r7, #22]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d1f1      	bne.n	8013956 <SCSI_ModeSense6+0x22>
  }
  return 0;
 8013972:	2300      	movs	r3, #0
}
 8013974:	4618      	mov	r0, r3
 8013976:	371c      	adds	r7, #28
 8013978:	46bd      	mov	sp, r7
 801397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397e:	4770      	bx	lr
 8013980:	0801b3ec 	.word	0x0801b3ec

08013984 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013984:	b480      	push	{r7}
 8013986:	b087      	sub	sp, #28
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	460b      	mov	r3, r1
 801398e:	607a      	str	r2, [r7, #4]
 8013990:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8013992:	2308      	movs	r3, #8
 8013994:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801399c:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	8afa      	ldrh	r2, [r7, #22]
 80139a2:	815a      	strh	r2, [r3, #10]

  while (len)
 80139a4:	e00a      	b.n	80139bc <SCSI_ModeSense10+0x38>
  {
    len--;
 80139a6:	8afb      	ldrh	r3, [r7, #22]
 80139a8:	3b01      	subs	r3, #1
 80139aa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80139ac:	8afa      	ldrh	r2, [r7, #22]
 80139ae:	8afb      	ldrh	r3, [r7, #22]
 80139b0:	4907      	ldr	r1, [pc, #28]	; (80139d0 <SCSI_ModeSense10+0x4c>)
 80139b2:	5c89      	ldrb	r1, [r1, r2]
 80139b4:	693a      	ldr	r2, [r7, #16]
 80139b6:	4413      	add	r3, r2
 80139b8:	460a      	mov	r2, r1
 80139ba:	731a      	strb	r2, [r3, #12]
  while (len)
 80139bc:	8afb      	ldrh	r3, [r7, #22]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d1f1      	bne.n	80139a6 <SCSI_ModeSense10+0x22>
  }

  return 0;
 80139c2:	2300      	movs	r3, #0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	371c      	adds	r7, #28
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr
 80139d0:	0801b3f4 	.word	0x0801b3f4

080139d4 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80139d4:	b480      	push	{r7}
 80139d6:	b087      	sub	sp, #28
 80139d8:	af00      	add	r7, sp, #0
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	460b      	mov	r3, r1
 80139de:	607a      	str	r2, [r7, #4]
 80139e0:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139e8:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80139ea:	2300      	movs	r3, #0
 80139ec:	75fb      	strb	r3, [r7, #23]
 80139ee:	e007      	b.n	8013a00 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80139f0:	7dfb      	ldrb	r3, [r7, #23]
 80139f2:	693a      	ldr	r2, [r7, #16]
 80139f4:	4413      	add	r3, r2
 80139f6:	2200      	movs	r2, #0
 80139f8:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80139fa:	7dfb      	ldrb	r3, [r7, #23]
 80139fc:	3301      	adds	r3, #1
 80139fe:	75fb      	strb	r3, [r7, #23]
 8013a00:	7dfb      	ldrb	r3, [r7, #23]
 8013a02:	2b11      	cmp	r3, #17
 8013a04:	d9f4      	bls.n	80139f0 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	2270      	movs	r2, #112	; 0x70
 8013a0a:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	220c      	movs	r2, #12
 8013a10:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	d02e      	beq.n	8013a80 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013a28:	693a      	ldr	r2, [r7, #16]
 8013a2a:	3347      	adds	r3, #71	; 0x47
 8013a2c:	00db      	lsls	r3, r3, #3
 8013a2e:	4413      	add	r3, r2
 8013a30:	791a      	ldrb	r2, [r3, #4]
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013a3c:	693a      	ldr	r2, [r7, #16]
 8013a3e:	3347      	adds	r3, #71	; 0x47
 8013a40:	00db      	lsls	r3, r3, #3
 8013a42:	4413      	add	r3, r2
 8013a44:	7a5a      	ldrb	r2, [r3, #9]
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013a50:	693a      	ldr	r2, [r7, #16]
 8013a52:	3347      	adds	r3, #71	; 0x47
 8013a54:	00db      	lsls	r3, r3, #3
 8013a56:	4413      	add	r3, r2
 8013a58:	7a1a      	ldrb	r2, [r3, #8]
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013a64:	3301      	adds	r3, #1
 8013a66:	b2da      	uxtb	r2, r3
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013a74:	2b04      	cmp	r3, #4
 8013a76:	d103      	bne.n	8013a80 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8013a80:	693b      	ldr	r3, [r7, #16]
 8013a82:	2212      	movs	r2, #18
 8013a84:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	3304      	adds	r3, #4
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	2b12      	cmp	r3, #18
 8013a8e:	d805      	bhi.n	8013a9c <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	3304      	adds	r3, #4
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8013a9c:	2300      	movs	r3, #0
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	371c      	adds	r7, #28
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa8:	4770      	bx	lr

08013aaa <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8013aaa:	b480      	push	{r7}
 8013aac:	b085      	sub	sp, #20
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	6078      	str	r0, [r7, #4]
 8013ab2:	4608      	mov	r0, r1
 8013ab4:	4611      	mov	r1, r2
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	4603      	mov	r3, r0
 8013aba:	70fb      	strb	r3, [r7, #3]
 8013abc:	460b      	mov	r3, r1
 8013abe:	70bb      	strb	r3, [r7, #2]
 8013ac0:	4613      	mov	r3, r2
 8013ac2:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013aca:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013ad2:	68fa      	ldr	r2, [r7, #12]
 8013ad4:	3347      	adds	r3, #71	; 0x47
 8013ad6:	00db      	lsls	r3, r3, #3
 8013ad8:	4413      	add	r3, r2
 8013ada:	78ba      	ldrb	r2, [r7, #2]
 8013adc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013ae4:	68fa      	ldr	r2, [r7, #12]
 8013ae6:	3347      	adds	r3, #71	; 0x47
 8013ae8:	00db      	lsls	r3, r3, #3
 8013aea:	4413      	add	r3, r2
 8013aec:	2200      	movs	r2, #0
 8013aee:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013af6:	3301      	adds	r3, #1
 8013af8:	b2da      	uxtb	r2, r3
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013b06:	2b04      	cmp	r3, #4
 8013b08:	d103      	bne.n	8013b12 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8013b12:	bf00      	nop
 8013b14:	3714      	adds	r7, #20
 8013b16:	46bd      	mov	sp, r7
 8013b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1c:	4770      	bx	lr

08013b1e <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013b1e:	b480      	push	{r7}
 8013b20:	b087      	sub	sp, #28
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	60f8      	str	r0, [r7, #12]
 8013b26:	460b      	mov	r3, r1
 8013b28:	607a      	str	r2, [r7, #4]
 8013b2a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b32:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	2200      	movs	r2, #0
 8013b38:	815a      	strh	r2, [r3, #10]
  return 0;
 8013b3a:	2300      	movs	r3, #0
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	371c      	adds	r7, #28
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr

08013b48 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b086      	sub	sp, #24
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	60f8      	str	r0, [r7, #12]
 8013b50:	460b      	mov	r3, r1
 8013b52:	607a      	str	r2, [r7, #4]
 8013b54:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b5c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	7a1b      	ldrb	r3, [r3, #8]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d16e      	bne.n	8013c44 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8013b6c:	b25b      	sxtb	r3, r3
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	db0a      	blt.n	8013b88 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013b78:	2320      	movs	r3, #32
 8013b7a:	2205      	movs	r2, #5
 8013b7c:	68f8      	ldr	r0, [r7, #12]
 8013b7e:	f7ff ff94 	bl	8013aaa <SCSI_SenseCode>
      return -1;
 8013b82:	f04f 33ff 	mov.w	r3, #4294967295
 8013b86:	e067      	b.n	8013c58 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b8e:	689b      	ldr	r3, [r3, #8]
 8013b90:	7afa      	ldrb	r2, [r7, #11]
 8013b92:	4610      	mov	r0, r2
 8013b94:	4798      	blx	r3
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d008      	beq.n	8013bae <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013b9c:	7af9      	ldrb	r1, [r7, #11]
 8013b9e:	233a      	movs	r3, #58	; 0x3a
 8013ba0:	2202      	movs	r2, #2
 8013ba2:	68f8      	ldr	r0, [r7, #12]
 8013ba4:	f7ff ff81 	bl	8013aaa <SCSI_SenseCode>
      return -1;
 8013ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bac:	e054      	b.n	8013c58 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	3302      	adds	r3, #2
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	3303      	adds	r3, #3
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013bbe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	3304      	adds	r3, #4
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013bc8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	3205      	adds	r2, #5
 8013bce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013bd0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	3307      	adds	r3, #7
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	021b      	lsls	r3, r3, #8
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	3208      	adds	r2, #8
 8013be4:	7812      	ldrb	r2, [r2, #0]
 8013be6:	431a      	orrs	r2, r3
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013bfa:	7af9      	ldrb	r1, [r7, #11]
 8013bfc:	68f8      	ldr	r0, [r7, #12]
 8013bfe:	f000 f912 	bl	8013e26 <SCSI_CheckAddressRange>
 8013c02:	4603      	mov	r3, r0
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	da02      	bge.n	8013c0e <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013c08:	f04f 33ff 	mov.w	r3, #4294967295
 8013c0c:	e024      	b.n	8013c58 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013c0e:	697b      	ldr	r3, [r7, #20]
 8013c10:	2202      	movs	r2, #2
 8013c12:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013c20:	6979      	ldr	r1, [r7, #20]
 8013c22:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8013c26:	fb01 f303 	mul.w	r3, r1, r3
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	d00a      	beq.n	8013c44 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013c34:	2320      	movs	r3, #32
 8013c36:	2205      	movs	r2, #5
 8013c38:	68f8      	ldr	r0, [r7, #12]
 8013c3a:	f7ff ff36 	bl	8013aaa <SCSI_SenseCode>
      return -1;
 8013c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c42:	e009      	b.n	8013c58 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c4a:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8013c4c:	7afb      	ldrb	r3, [r7, #11]
 8013c4e:	4619      	mov	r1, r3
 8013c50:	68f8      	ldr	r0, [r7, #12]
 8013c52:	f000 f90a 	bl	8013e6a <SCSI_ProcessRead>
 8013c56:	4603      	mov	r3, r0
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3718      	adds	r7, #24
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b086      	sub	sp, #24
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	60f8      	str	r0, [r7, #12]
 8013c68:	460b      	mov	r3, r1
 8013c6a:	607a      	str	r2, [r7, #4]
 8013c6c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c74:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	7a1b      	ldrb	r3, [r3, #8]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	f040 8096 	bne.w	8013dac <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8013c86:	b25b      	sxtb	r3, r3
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	da0a      	bge.n	8013ca2 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013c92:	2320      	movs	r3, #32
 8013c94:	2205      	movs	r2, #5
 8013c96:	68f8      	ldr	r0, [r7, #12]
 8013c98:	f7ff ff07 	bl	8013aaa <SCSI_SenseCode>
      return -1;
 8013c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ca0:	e08a      	b.n	8013db8 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ca8:	689b      	ldr	r3, [r3, #8]
 8013caa:	7afa      	ldrb	r2, [r7, #11]
 8013cac:	4610      	mov	r0, r2
 8013cae:	4798      	blx	r3
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d008      	beq.n	8013cc8 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013cb6:	7af9      	ldrb	r1, [r7, #11]
 8013cb8:	233a      	movs	r3, #58	; 0x3a
 8013cba:	2202      	movs	r2, #2
 8013cbc:	68f8      	ldr	r0, [r7, #12]
 8013cbe:	f7ff fef4 	bl	8013aaa <SCSI_SenseCode>
      return -1;
 8013cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8013cc6:	e077      	b.n	8013db8 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013cce:	68db      	ldr	r3, [r3, #12]
 8013cd0:	7afa      	ldrb	r2, [r7, #11]
 8013cd2:	4610      	mov	r0, r2
 8013cd4:	4798      	blx	r3
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d008      	beq.n	8013cee <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013cdc:	7af9      	ldrb	r1, [r7, #11]
 8013cde:	2327      	movs	r3, #39	; 0x27
 8013ce0:	2202      	movs	r2, #2
 8013ce2:	68f8      	ldr	r0, [r7, #12]
 8013ce4:	f7ff fee1 	bl	8013aaa <SCSI_SenseCode>
      return -1;
 8013ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8013cec:	e064      	b.n	8013db8 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	3302      	adds	r3, #2
 8013cf2:	781b      	ldrb	r3, [r3, #0]
 8013cf4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	3303      	adds	r3, #3
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013cfe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	3304      	adds	r3, #4
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013d08:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	3205      	adds	r2, #5
 8013d0e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013d10:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	3307      	adds	r3, #7
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013d20:	687a      	ldr	r2, [r7, #4]
 8013d22:	3208      	adds	r2, #8
 8013d24:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013d26:	431a      	orrs	r2, r3
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013d3a:	7af9      	ldrb	r1, [r7, #11]
 8013d3c:	68f8      	ldr	r0, [r7, #12]
 8013d3e:	f000 f872 	bl	8013e26 <SCSI_CheckAddressRange>
 8013d42:	4603      	mov	r3, r0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	da02      	bge.n	8013d4e <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013d48:	f04f 33ff 	mov.w	r3, #4294967295
 8013d4c:	e034      	b.n	8013db8 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013d54:	697a      	ldr	r2, [r7, #20]
 8013d56:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8013d5a:	fb02 f303 	mul.w	r3, r2, r3
 8013d5e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013d66:	693a      	ldr	r2, [r7, #16]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d00a      	beq.n	8013d82 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013d72:	2320      	movs	r3, #32
 8013d74:	2205      	movs	r2, #5
 8013d76:	68f8      	ldr	r0, [r7, #12]
 8013d78:	f7ff fe97 	bl	8013aaa <SCSI_SenseCode>
      return -1;
 8013d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d80:	e01a      	b.n	8013db8 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013d88:	bf28      	it	cs
 8013d8a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013d8e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	2201      	movs	r2, #1
 8013d94:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	f103 020c 	add.w	r2, r3, #12
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	b29b      	uxth	r3, r3
 8013da0:	2101      	movs	r1, #1
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f007 f905 	bl	801afb2 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8013da8:	2300      	movs	r3, #0
 8013daa:	e005      	b.n	8013db8 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8013dac:	7afb      	ldrb	r3, [r7, #11]
 8013dae:	4619      	mov	r1, r3
 8013db0:	68f8      	ldr	r0, [r7, #12]
 8013db2:	f000 f8ce 	bl	8013f52 <SCSI_ProcessWrite>
 8013db6:	4603      	mov	r3, r0
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	3718      	adds	r7, #24
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b086      	sub	sp, #24
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	60f8      	str	r0, [r7, #12]
 8013dc8:	460b      	mov	r3, r1
 8013dca:	607a      	str	r2, [r7, #4]
 8013dcc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dd4:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	781b      	ldrb	r3, [r3, #0]
 8013ddc:	f003 0302 	and.w	r3, r3, #2
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d008      	beq.n	8013df6 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8013de4:	7af9      	ldrb	r1, [r7, #11]
 8013de6:	2324      	movs	r3, #36	; 0x24
 8013de8:	2205      	movs	r2, #5
 8013dea:	68f8      	ldr	r0, [r7, #12]
 8013dec:	f7ff fe5d 	bl	8013aaa <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8013df0:	f04f 33ff 	mov.w	r3, #4294967295
 8013df4:	e013      	b.n	8013e1e <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013e02:	7af9      	ldrb	r1, [r7, #11]
 8013e04:	68f8      	ldr	r0, [r7, #12]
 8013e06:	f000 f80e 	bl	8013e26 <SCSI_CheckAddressRange>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	da02      	bge.n	8013e16 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8013e10:	f04f 33ff 	mov.w	r3, #4294967295
 8013e14:	e003      	b.n	8013e1e <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	815a      	strh	r2, [r3, #10]
  return 0;
 8013e1c:	2300      	movs	r3, #0
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3718      	adds	r7, #24
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}

08013e26 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8013e26:	b580      	push	{r7, lr}
 8013e28:	b086      	sub	sp, #24
 8013e2a:	af00      	add	r7, sp, #0
 8013e2c:	60f8      	str	r0, [r7, #12]
 8013e2e:	607a      	str	r2, [r7, #4]
 8013e30:	603b      	str	r3, [r7, #0]
 8013e32:	460b      	mov	r3, r1
 8013e34:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e3c:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	441a      	add	r2, r3
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d908      	bls.n	8013e60 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8013e4e:	7af9      	ldrb	r1, [r7, #11]
 8013e50:	2321      	movs	r3, #33	; 0x21
 8013e52:	2205      	movs	r2, #5
 8013e54:	68f8      	ldr	r0, [r7, #12]
 8013e56:	f7ff fe28 	bl	8013aaa <SCSI_SenseCode>
    return -1;
 8013e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8013e5e:	e000      	b.n	8013e62 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8013e60:	2300      	movs	r3, #0
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	3718      	adds	r7, #24
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}

08013e6a <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8013e6a:	b590      	push	{r4, r7, lr}
 8013e6c:	b085      	sub	sp, #20
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
 8013e72:	460b      	mov	r3, r1
 8013e74:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e7c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013e84:	68fa      	ldr	r2, [r7, #12]
 8013e86:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8013e8a:	fb02 f303 	mul.w	r3, r2, r3
 8013e8e:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e96:	bf28      	it	cs
 8013e98:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013e9c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ea4:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013eb8:	4618      	mov	r0, r3
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	78f8      	ldrb	r0, [r7, #3]
 8013ec4:	47a0      	blx	r4
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	da08      	bge.n	8013ede <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8013ecc:	78f9      	ldrb	r1, [r7, #3]
 8013ece:	2311      	movs	r3, #17
 8013ed0:	2204      	movs	r2, #4
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f7ff fde9 	bl	8013aaa <SCSI_SenseCode>
    return -1;
 8013ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8013edc:	e035      	b.n	8013f4a <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	f103 020c 	add.w	r2, r3, #12
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	b29b      	uxth	r3, r3
 8013ee8:	2181      	movs	r1, #129	; 0x81
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f007 f83e 	bl	801af6c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013efc:	4619      	mov	r1, r3
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	fbb3 f3f1 	udiv	r3, r3, r1
 8013f04:	441a      	add	r2, r3
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013f18:	4619      	mov	r1, r3
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013f20:	1ad2      	subs	r2, r2, r3
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	1ad2      	subs	r2, r2, r3
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d102      	bne.n	8013f48 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2203      	movs	r2, #3
 8013f46:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8013f48:	2300      	movs	r3, #0
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3714      	adds	r7, #20
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd90      	pop	{r4, r7, pc}

08013f52 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8013f52:	b590      	push	{r4, r7, lr}
 8013f54:	b085      	sub	sp, #20
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f64:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013f6c:	68fa      	ldr	r2, [r7, #12]
 8013f6e:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8013f72:	fb02 f303 	mul.w	r3, r2, r3
 8013f76:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f7e:	bf28      	it	cs
 8013f80:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013f84:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f8c:	695c      	ldr	r4, [r3, #20]
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	f103 010c 	add.w	r1, r3, #12
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	78f8      	ldrb	r0, [r7, #3]
 8013fac:	47a0      	blx	r4
 8013fae:	4603      	mov	r3, r0
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	da08      	bge.n	8013fc6 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8013fb4:	78f9      	ldrb	r1, [r7, #3]
 8013fb6:	2303      	movs	r3, #3
 8013fb8:	2204      	movs	r2, #4
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f7ff fd75 	bl	8013aaa <SCSI_SenseCode>

    return -1;
 8013fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8013fc4:	e045      	b.n	8014052 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8013fda:	441a      	add	r2, r3
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013fee:	4619      	mov	r1, r3
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ff6:	1ad2      	subs	r2, r2, r3
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	1ad2      	subs	r2, r2, r3
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014014:	2b00      	cmp	r3, #0
 8014016:	d104      	bne.n	8014022 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014018:	2100      	movs	r1, #0
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f7ff f97a 	bl	8013314 <MSC_BOT_SendCSW>
 8014020:	e016      	b.n	8014050 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014028:	68fa      	ldr	r2, [r7, #12]
 801402a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 801402e:	fb02 f303 	mul.w	r3, r2, r3
 8014032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014036:	bf28      	it	cs
 8014038:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801403c:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	f103 020c 	add.w	r2, r3, #12
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	b29b      	uxth	r3, r3
 8014048:	2101      	movs	r1, #1
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f006 ffb1 	bl	801afb2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8014050:	2300      	movs	r3, #0
}
 8014052:	4618      	mov	r0, r3
 8014054:	3714      	adds	r7, #20
 8014056:	46bd      	mov	sp, r7
 8014058:	bd90      	pop	{r4, r7, pc}

0801405a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801405a:	b580      	push	{r7, lr}
 801405c:	b084      	sub	sp, #16
 801405e:	af00      	add	r7, sp, #0
 8014060:	60f8      	str	r0, [r7, #12]
 8014062:	60b9      	str	r1, [r7, #8]
 8014064:	4613      	mov	r3, r2
 8014066:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d101      	bne.n	8014072 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801406e:	2302      	movs	r3, #2
 8014070:	e01a      	b.n	80140a8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014078:	2b00      	cmp	r3, #0
 801407a:	d003      	beq.n	8014084 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	2200      	movs	r2, #0
 8014080:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d003      	beq.n	8014092 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	68ba      	ldr	r2, [r7, #8]
 801408e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	2201      	movs	r2, #1
 8014096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	79fa      	ldrb	r2, [r7, #7]
 801409e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80140a0:	68f8      	ldr	r0, [r7, #12]
 80140a2:	f006 fe0b 	bl	801acbc <USBD_LL_Init>

  return USBD_OK;
 80140a6:	2300      	movs	r3, #0
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	3710      	adds	r7, #16
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80140b0:	b480      	push	{r7}
 80140b2:	b085      	sub	sp, #20
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80140ba:	2300      	movs	r3, #0
 80140bc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d006      	beq.n	80140d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	683a      	ldr	r2, [r7, #0]
 80140c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80140cc:	2300      	movs	r3, #0
 80140ce:	73fb      	strb	r3, [r7, #15]
 80140d0:	e001      	b.n	80140d6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80140d2:	2302      	movs	r3, #2
 80140d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80140d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3714      	adds	r7, #20
 80140dc:	46bd      	mov	sp, r7
 80140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e2:	4770      	bx	lr

080140e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f006 fe35 	bl	801ad5c <USBD_LL_Start>

  return USBD_OK;
 80140f2:	2300      	movs	r3, #0
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3708      	adds	r7, #8
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}

080140fc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80140fc:	b480      	push	{r7}
 80140fe:	b083      	sub	sp, #12
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014104:	2300      	movs	r3, #0
}
 8014106:	4618      	mov	r0, r3
 8014108:	370c      	adds	r7, #12
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr

08014112 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8014112:	b580      	push	{r7, lr}
 8014114:	b084      	sub	sp, #16
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
 801411a:	460b      	mov	r3, r1
 801411c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801411e:	2302      	movs	r3, #2
 8014120:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014128:	2b00      	cmp	r3, #0
 801412a:	d00c      	beq.n	8014146 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	78fa      	ldrb	r2, [r7, #3]
 8014136:	4611      	mov	r1, r2
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	4798      	blx	r3
 801413c:	4603      	mov	r3, r0
 801413e:	2b00      	cmp	r3, #0
 8014140:	d101      	bne.n	8014146 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8014142:	2300      	movs	r3, #0
 8014144:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8014146:	7bfb      	ldrb	r3, [r7, #15]
}
 8014148:	4618      	mov	r0, r3
 801414a:	3710      	adds	r7, #16
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	460b      	mov	r3, r1
 801415a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	78fa      	ldrb	r2, [r7, #3]
 8014166:	4611      	mov	r1, r2
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	4798      	blx	r3

  return USBD_OK;
 801416c:	2300      	movs	r3, #0
}
 801416e:	4618      	mov	r0, r3
 8014170:	3708      	adds	r7, #8
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}

08014176 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014176:	b580      	push	{r7, lr}
 8014178:	b082      	sub	sp, #8
 801417a:	af00      	add	r7, sp, #0
 801417c:	6078      	str	r0, [r7, #4]
 801417e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8014186:	6839      	ldr	r1, [r7, #0]
 8014188:	4618      	mov	r0, r3
 801418a:	f000 ff09 	bl	8014fa0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2201      	movs	r2, #1
 8014192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801419c:	461a      	mov	r2, r3
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80141aa:	f003 031f 	and.w	r3, r3, #31
 80141ae:	2b01      	cmp	r3, #1
 80141b0:	d00c      	beq.n	80141cc <USBD_LL_SetupStage+0x56>
 80141b2:	2b01      	cmp	r3, #1
 80141b4:	d302      	bcc.n	80141bc <USBD_LL_SetupStage+0x46>
 80141b6:	2b02      	cmp	r3, #2
 80141b8:	d010      	beq.n	80141dc <USBD_LL_SetupStage+0x66>
 80141ba:	e017      	b.n	80141ec <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80141c2:	4619      	mov	r1, r3
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	f000 fa09 	bl	80145dc <USBD_StdDevReq>
      break;
 80141ca:	e01a      	b.n	8014202 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80141d2:	4619      	mov	r1, r3
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f000 fa6b 	bl	80146b0 <USBD_StdItfReq>
      break;
 80141da:	e012      	b.n	8014202 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80141e2:	4619      	mov	r1, r3
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f000 faa9 	bl	801473c <USBD_StdEPReq>
      break;
 80141ea:	e00a      	b.n	8014202 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80141f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80141f6:	b2db      	uxtb	r3, r3
 80141f8:	4619      	mov	r1, r3
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f006 fe2d 	bl	801ae5a <USBD_LL_StallEP>
      break;
 8014200:	bf00      	nop
  }

  return USBD_OK;
 8014202:	2300      	movs	r3, #0
}
 8014204:	4618      	mov	r0, r3
 8014206:	3708      	adds	r7, #8
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b086      	sub	sp, #24
 8014210:	af00      	add	r7, sp, #0
 8014212:	60f8      	str	r0, [r7, #12]
 8014214:	460b      	mov	r3, r1
 8014216:	607a      	str	r2, [r7, #4]
 8014218:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801421a:	7afb      	ldrb	r3, [r7, #11]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d14b      	bne.n	80142b8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014226:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801422e:	2b03      	cmp	r3, #3
 8014230:	d134      	bne.n	801429c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	68da      	ldr	r2, [r3, #12]
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	691b      	ldr	r3, [r3, #16]
 801423a:	429a      	cmp	r2, r3
 801423c:	d919      	bls.n	8014272 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	68da      	ldr	r2, [r3, #12]
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	691b      	ldr	r3, [r3, #16]
 8014246:	1ad2      	subs	r2, r2, r3
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	68da      	ldr	r2, [r3, #12]
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8014254:	429a      	cmp	r2, r3
 8014256:	d203      	bcs.n	8014260 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801425c:	b29b      	uxth	r3, r3
 801425e:	e002      	b.n	8014266 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8014264:	b29b      	uxth	r3, r3
 8014266:	461a      	mov	r2, r3
 8014268:	6879      	ldr	r1, [r7, #4]
 801426a:	68f8      	ldr	r0, [r7, #12]
 801426c:	f000 ff6e 	bl	801514c <USBD_CtlContinueRx>
 8014270:	e038      	b.n	80142e4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014278:	691b      	ldr	r3, [r3, #16]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d00a      	beq.n	8014294 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014284:	2b03      	cmp	r3, #3
 8014286:	d105      	bne.n	8014294 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801428e:	691b      	ldr	r3, [r3, #16]
 8014290:	68f8      	ldr	r0, [r7, #12]
 8014292:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f000 ff6b 	bl	8015170 <USBD_CtlSendStatus>
 801429a:	e023      	b.n	80142e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80142a2:	2b05      	cmp	r3, #5
 80142a4:	d11e      	bne.n	80142e4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	2200      	movs	r2, #0
 80142aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80142ae:	2100      	movs	r1, #0
 80142b0:	68f8      	ldr	r0, [r7, #12]
 80142b2:	f006 fdd2 	bl	801ae5a <USBD_LL_StallEP>
 80142b6:	e015      	b.n	80142e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80142be:	699b      	ldr	r3, [r3, #24]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d00d      	beq.n	80142e0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80142ca:	2b03      	cmp	r3, #3
 80142cc:	d108      	bne.n	80142e0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80142d4:	699b      	ldr	r3, [r3, #24]
 80142d6:	7afa      	ldrb	r2, [r7, #11]
 80142d8:	4611      	mov	r1, r2
 80142da:	68f8      	ldr	r0, [r7, #12]
 80142dc:	4798      	blx	r3
 80142de:	e001      	b.n	80142e4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80142e0:	2302      	movs	r3, #2
 80142e2:	e000      	b.n	80142e6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80142e4:	2300      	movs	r3, #0
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3718      	adds	r7, #24
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}

080142ee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80142ee:	b580      	push	{r7, lr}
 80142f0:	b086      	sub	sp, #24
 80142f2:	af00      	add	r7, sp, #0
 80142f4:	60f8      	str	r0, [r7, #12]
 80142f6:	460b      	mov	r3, r1
 80142f8:	607a      	str	r2, [r7, #4]
 80142fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80142fc:	7afb      	ldrb	r3, [r7, #11]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d17f      	bne.n	8014402 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	3314      	adds	r3, #20
 8014306:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801430e:	2b02      	cmp	r3, #2
 8014310:	d15c      	bne.n	80143cc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	68da      	ldr	r2, [r3, #12]
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	691b      	ldr	r3, [r3, #16]
 801431a:	429a      	cmp	r2, r3
 801431c:	d915      	bls.n	801434a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	68da      	ldr	r2, [r3, #12]
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	691b      	ldr	r3, [r3, #16]
 8014326:	1ad2      	subs	r2, r2, r3
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	b29b      	uxth	r3, r3
 8014332:	461a      	mov	r2, r3
 8014334:	6879      	ldr	r1, [r7, #4]
 8014336:	68f8      	ldr	r0, [r7, #12]
 8014338:	f000 fef6 	bl	8015128 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801433c:	2300      	movs	r3, #0
 801433e:	2200      	movs	r2, #0
 8014340:	2100      	movs	r1, #0
 8014342:	68f8      	ldr	r0, [r7, #12]
 8014344:	f006 fe35 	bl	801afb2 <USBD_LL_PrepareReceive>
 8014348:	e04e      	b.n	80143e8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801434a:	697b      	ldr	r3, [r7, #20]
 801434c:	689b      	ldr	r3, [r3, #8]
 801434e:	697a      	ldr	r2, [r7, #20]
 8014350:	6912      	ldr	r2, [r2, #16]
 8014352:	fbb3 f1f2 	udiv	r1, r3, r2
 8014356:	fb02 f201 	mul.w	r2, r2, r1
 801435a:	1a9b      	subs	r3, r3, r2
 801435c:	2b00      	cmp	r3, #0
 801435e:	d11c      	bne.n	801439a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	689a      	ldr	r2, [r3, #8]
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014368:	429a      	cmp	r2, r3
 801436a:	d316      	bcc.n	801439a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	689a      	ldr	r2, [r3, #8]
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014376:	429a      	cmp	r2, r3
 8014378:	d20f      	bcs.n	801439a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801437a:	2200      	movs	r2, #0
 801437c:	2100      	movs	r1, #0
 801437e:	68f8      	ldr	r0, [r7, #12]
 8014380:	f000 fed2 	bl	8015128 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	2200      	movs	r2, #0
 8014388:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801438c:	2300      	movs	r3, #0
 801438e:	2200      	movs	r2, #0
 8014390:	2100      	movs	r1, #0
 8014392:	68f8      	ldr	r0, [r7, #12]
 8014394:	f006 fe0d 	bl	801afb2 <USBD_LL_PrepareReceive>
 8014398:	e026      	b.n	80143e8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143a0:	68db      	ldr	r3, [r3, #12]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d00a      	beq.n	80143bc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80143ac:	2b03      	cmp	r3, #3
 80143ae:	d105      	bne.n	80143bc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143b6:	68db      	ldr	r3, [r3, #12]
 80143b8:	68f8      	ldr	r0, [r7, #12]
 80143ba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80143bc:	2180      	movs	r1, #128	; 0x80
 80143be:	68f8      	ldr	r0, [r7, #12]
 80143c0:	f006 fd4b 	bl	801ae5a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f000 fee6 	bl	8015196 <USBD_CtlReceiveStatus>
 80143ca:	e00d      	b.n	80143e8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80143d2:	2b04      	cmp	r3, #4
 80143d4:	d004      	beq.n	80143e0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d103      	bne.n	80143e8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80143e0:	2180      	movs	r1, #128	; 0x80
 80143e2:	68f8      	ldr	r0, [r7, #12]
 80143e4:	f006 fd39 	bl	801ae5a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80143ee:	2b01      	cmp	r3, #1
 80143f0:	d11d      	bne.n	801442e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80143f2:	68f8      	ldr	r0, [r7, #12]
 80143f4:	f7ff fe82 	bl	80140fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2200      	movs	r2, #0
 80143fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014400:	e015      	b.n	801442e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014408:	695b      	ldr	r3, [r3, #20]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d00d      	beq.n	801442a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8014414:	2b03      	cmp	r3, #3
 8014416:	d108      	bne.n	801442a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801441e:	695b      	ldr	r3, [r3, #20]
 8014420:	7afa      	ldrb	r2, [r7, #11]
 8014422:	4611      	mov	r1, r2
 8014424:	68f8      	ldr	r0, [r7, #12]
 8014426:	4798      	blx	r3
 8014428:	e001      	b.n	801442e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801442a:	2302      	movs	r3, #2
 801442c:	e000      	b.n	8014430 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801442e:	2300      	movs	r3, #0
}
 8014430:	4618      	mov	r0, r3
 8014432:	3718      	adds	r7, #24
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014440:	2340      	movs	r3, #64	; 0x40
 8014442:	2200      	movs	r2, #0
 8014444:	2100      	movs	r1, #0
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f006 fca3 	bl	801ad92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2201      	movs	r2, #1
 8014450:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2240      	movs	r2, #64	; 0x40
 8014458:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801445c:	2340      	movs	r3, #64	; 0x40
 801445e:	2200      	movs	r2, #0
 8014460:	2180      	movs	r1, #128	; 0x80
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f006 fc95 	bl	801ad92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2201      	movs	r2, #1
 801446c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	2240      	movs	r2, #64	; 0x40
 8014472:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2201      	movs	r2, #1
 8014478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2200      	movs	r2, #0
 8014480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2200      	movs	r2, #0
 8014488:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2200      	movs	r2, #0
 801448e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014498:	2b00      	cmp	r3, #0
 801449a:	d009      	beq.n	80144b0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	687a      	ldr	r2, [r7, #4]
 80144a6:	6852      	ldr	r2, [r2, #4]
 80144a8:	b2d2      	uxtb	r2, r2
 80144aa:	4611      	mov	r1, r2
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	4798      	blx	r3
  }

  return USBD_OK;
 80144b0:	2300      	movs	r3, #0
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3708      	adds	r7, #8
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}

080144ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80144ba:	b480      	push	{r7}
 80144bc:	b083      	sub	sp, #12
 80144be:	af00      	add	r7, sp, #0
 80144c0:	6078      	str	r0, [r7, #4]
 80144c2:	460b      	mov	r3, r1
 80144c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	78fa      	ldrb	r2, [r7, #3]
 80144ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	370c      	adds	r7, #12
 80144d2:	46bd      	mov	sp, r7
 80144d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d8:	4770      	bx	lr

080144da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80144da:	b480      	push	{r7}
 80144dc:	b083      	sub	sp, #12
 80144de:	af00      	add	r7, sp, #0
 80144e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2204      	movs	r2, #4
 80144f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80144f6:	2300      	movs	r3, #0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	370c      	adds	r7, #12
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr

08014504 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014504:	b480      	push	{r7}
 8014506:	b083      	sub	sp, #12
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014512:	2b04      	cmp	r3, #4
 8014514:	d105      	bne.n	8014522 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014522:	2300      	movs	r3, #0
}
 8014524:	4618      	mov	r0, r3
 8014526:	370c      	adds	r7, #12
 8014528:	46bd      	mov	sp, r7
 801452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452e:	4770      	bx	lr

08014530 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801453e:	2b03      	cmp	r3, #3
 8014540:	d10b      	bne.n	801455a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014548:	69db      	ldr	r3, [r3, #28]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d005      	beq.n	801455a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014554:	69db      	ldr	r3, [r3, #28]
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801455a:	2300      	movs	r3, #0
}
 801455c:	4618      	mov	r0, r3
 801455e:	3708      	adds	r7, #8
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014564:	b480      	push	{r7}
 8014566:	b083      	sub	sp, #12
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
 801456c:	460b      	mov	r3, r1
 801456e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8014570:	2300      	movs	r3, #0
}
 8014572:	4618      	mov	r0, r3
 8014574:	370c      	adds	r7, #12
 8014576:	46bd      	mov	sp, r7
 8014578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457c:	4770      	bx	lr

0801457e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801457e:	b480      	push	{r7}
 8014580:	b083      	sub	sp, #12
 8014582:	af00      	add	r7, sp, #0
 8014584:	6078      	str	r0, [r7, #4]
 8014586:	460b      	mov	r3, r1
 8014588:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801458a:	2300      	movs	r3, #0
}
 801458c:	4618      	mov	r0, r3
 801458e:	370c      	adds	r7, #12
 8014590:	46bd      	mov	sp, r7
 8014592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014596:	4770      	bx	lr

08014598 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014598:	b480      	push	{r7}
 801459a:	b083      	sub	sp, #12
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80145a0:	2300      	movs	r3, #0
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	370c      	adds	r7, #12
 80145a6:	46bd      	mov	sp, r7
 80145a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ac:	4770      	bx	lr

080145ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80145ae:	b580      	push	{r7, lr}
 80145b0:	b082      	sub	sp, #8
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	2201      	movs	r2, #1
 80145ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	6852      	ldr	r2, [r2, #4]
 80145ca:	b2d2      	uxtb	r2, r2
 80145cc:	4611      	mov	r1, r2
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	4798      	blx	r3

  return USBD_OK;
 80145d2:	2300      	movs	r3, #0
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b084      	sub	sp, #16
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80145e6:	2300      	movs	r3, #0
 80145e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	781b      	ldrb	r3, [r3, #0]
 80145ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80145f2:	2b20      	cmp	r3, #32
 80145f4:	d004      	beq.n	8014600 <USBD_StdDevReq+0x24>
 80145f6:	2b40      	cmp	r3, #64	; 0x40
 80145f8:	d002      	beq.n	8014600 <USBD_StdDevReq+0x24>
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d008      	beq.n	8014610 <USBD_StdDevReq+0x34>
 80145fe:	e04c      	b.n	801469a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014606:	689b      	ldr	r3, [r3, #8]
 8014608:	6839      	ldr	r1, [r7, #0]
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	4798      	blx	r3
      break;
 801460e:	e049      	b.n	80146a4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	785b      	ldrb	r3, [r3, #1]
 8014614:	2b09      	cmp	r3, #9
 8014616:	d83a      	bhi.n	801468e <USBD_StdDevReq+0xb2>
 8014618:	a201      	add	r2, pc, #4	; (adr r2, 8014620 <USBD_StdDevReq+0x44>)
 801461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801461e:	bf00      	nop
 8014620:	08014671 	.word	0x08014671
 8014624:	08014685 	.word	0x08014685
 8014628:	0801468f 	.word	0x0801468f
 801462c:	0801467b 	.word	0x0801467b
 8014630:	0801468f 	.word	0x0801468f
 8014634:	08014653 	.word	0x08014653
 8014638:	08014649 	.word	0x08014649
 801463c:	0801468f 	.word	0x0801468f
 8014640:	08014667 	.word	0x08014667
 8014644:	0801465d 	.word	0x0801465d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014648:	6839      	ldr	r1, [r7, #0]
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f000 f9d4 	bl	80149f8 <USBD_GetDescriptor>
          break;
 8014650:	e022      	b.n	8014698 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014652:	6839      	ldr	r1, [r7, #0]
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f000 fb37 	bl	8014cc8 <USBD_SetAddress>
          break;
 801465a:	e01d      	b.n	8014698 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801465c:	6839      	ldr	r1, [r7, #0]
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	f000 fb74 	bl	8014d4c <USBD_SetConfig>
          break;
 8014664:	e018      	b.n	8014698 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014666:	6839      	ldr	r1, [r7, #0]
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f000 fbfd 	bl	8014e68 <USBD_GetConfig>
          break;
 801466e:	e013      	b.n	8014698 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014670:	6839      	ldr	r1, [r7, #0]
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f000 fc2c 	bl	8014ed0 <USBD_GetStatus>
          break;
 8014678:	e00e      	b.n	8014698 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801467a:	6839      	ldr	r1, [r7, #0]
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f000 fc5a 	bl	8014f36 <USBD_SetFeature>
          break;
 8014682:	e009      	b.n	8014698 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014684:	6839      	ldr	r1, [r7, #0]
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f000 fc69 	bl	8014f5e <USBD_ClrFeature>
          break;
 801468c:	e004      	b.n	8014698 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801468e:	6839      	ldr	r1, [r7, #0]
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f000 fcc2 	bl	801501a <USBD_CtlError>
          break;
 8014696:	bf00      	nop
      }
      break;
 8014698:	e004      	b.n	80146a4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801469a:	6839      	ldr	r1, [r7, #0]
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f000 fcbc 	bl	801501a <USBD_CtlError>
      break;
 80146a2:	bf00      	nop
  }

  return ret;
 80146a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3710      	adds	r7, #16
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop

080146b0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80146ba:	2300      	movs	r3, #0
 80146bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	781b      	ldrb	r3, [r3, #0]
 80146c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80146c6:	2b20      	cmp	r3, #32
 80146c8:	d003      	beq.n	80146d2 <USBD_StdItfReq+0x22>
 80146ca:	2b40      	cmp	r3, #64	; 0x40
 80146cc:	d001      	beq.n	80146d2 <USBD_StdItfReq+0x22>
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d12a      	bne.n	8014728 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146d8:	3b01      	subs	r3, #1
 80146da:	2b02      	cmp	r3, #2
 80146dc:	d81d      	bhi.n	801471a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	889b      	ldrh	r3, [r3, #4]
 80146e2:	b2db      	uxtb	r3, r3
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	d813      	bhi.n	8014710 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146ee:	689b      	ldr	r3, [r3, #8]
 80146f0:	6839      	ldr	r1, [r7, #0]
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	4798      	blx	r3
 80146f6:	4603      	mov	r3, r0
 80146f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	88db      	ldrh	r3, [r3, #6]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d110      	bne.n	8014724 <USBD_StdItfReq+0x74>
 8014702:	7bfb      	ldrb	r3, [r7, #15]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d10d      	bne.n	8014724 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f000 fd31 	bl	8015170 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801470e:	e009      	b.n	8014724 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8014710:	6839      	ldr	r1, [r7, #0]
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f000 fc81 	bl	801501a <USBD_CtlError>
          break;
 8014718:	e004      	b.n	8014724 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801471a:	6839      	ldr	r1, [r7, #0]
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f000 fc7c 	bl	801501a <USBD_CtlError>
          break;
 8014722:	e000      	b.n	8014726 <USBD_StdItfReq+0x76>
          break;
 8014724:	bf00      	nop
      }
      break;
 8014726:	e004      	b.n	8014732 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8014728:	6839      	ldr	r1, [r7, #0]
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f000 fc75 	bl	801501a <USBD_CtlError>
      break;
 8014730:	bf00      	nop
  }

  return USBD_OK;
 8014732:	2300      	movs	r3, #0
}
 8014734:	4618      	mov	r0, r3
 8014736:	3710      	adds	r7, #16
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014746:	2300      	movs	r3, #0
 8014748:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	889b      	ldrh	r3, [r3, #4]
 801474e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014758:	2b20      	cmp	r3, #32
 801475a:	d004      	beq.n	8014766 <USBD_StdEPReq+0x2a>
 801475c:	2b40      	cmp	r3, #64	; 0x40
 801475e:	d002      	beq.n	8014766 <USBD_StdEPReq+0x2a>
 8014760:	2b00      	cmp	r3, #0
 8014762:	d008      	beq.n	8014776 <USBD_StdEPReq+0x3a>
 8014764:	e13d      	b.n	80149e2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801476c:	689b      	ldr	r3, [r3, #8]
 801476e:	6839      	ldr	r1, [r7, #0]
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	4798      	blx	r3
      break;
 8014774:	e13a      	b.n	80149ec <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801477e:	2b20      	cmp	r3, #32
 8014780:	d10a      	bne.n	8014798 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014788:	689b      	ldr	r3, [r3, #8]
 801478a:	6839      	ldr	r1, [r7, #0]
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	4798      	blx	r3
 8014790:	4603      	mov	r3, r0
 8014792:	73fb      	strb	r3, [r7, #15]

        return ret;
 8014794:	7bfb      	ldrb	r3, [r7, #15]
 8014796:	e12a      	b.n	80149ee <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	785b      	ldrb	r3, [r3, #1]
 801479c:	2b01      	cmp	r3, #1
 801479e:	d03e      	beq.n	801481e <USBD_StdEPReq+0xe2>
 80147a0:	2b03      	cmp	r3, #3
 80147a2:	d002      	beq.n	80147aa <USBD_StdEPReq+0x6e>
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d070      	beq.n	801488a <USBD_StdEPReq+0x14e>
 80147a8:	e115      	b.n	80149d6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147b0:	2b02      	cmp	r3, #2
 80147b2:	d002      	beq.n	80147ba <USBD_StdEPReq+0x7e>
 80147b4:	2b03      	cmp	r3, #3
 80147b6:	d015      	beq.n	80147e4 <USBD_StdEPReq+0xa8>
 80147b8:	e02b      	b.n	8014812 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147ba:	7bbb      	ldrb	r3, [r7, #14]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d00c      	beq.n	80147da <USBD_StdEPReq+0x9e>
 80147c0:	7bbb      	ldrb	r3, [r7, #14]
 80147c2:	2b80      	cmp	r3, #128	; 0x80
 80147c4:	d009      	beq.n	80147da <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80147c6:	7bbb      	ldrb	r3, [r7, #14]
 80147c8:	4619      	mov	r1, r3
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f006 fb45 	bl	801ae5a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80147d0:	2180      	movs	r1, #128	; 0x80
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f006 fb41 	bl	801ae5a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80147d8:	e020      	b.n	801481c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80147da:	6839      	ldr	r1, [r7, #0]
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f000 fc1c 	bl	801501a <USBD_CtlError>
              break;
 80147e2:	e01b      	b.n	801481c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	885b      	ldrh	r3, [r3, #2]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d10e      	bne.n	801480a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80147ec:	7bbb      	ldrb	r3, [r7, #14]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d00b      	beq.n	801480a <USBD_StdEPReq+0xce>
 80147f2:	7bbb      	ldrb	r3, [r7, #14]
 80147f4:	2b80      	cmp	r3, #128	; 0x80
 80147f6:	d008      	beq.n	801480a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	88db      	ldrh	r3, [r3, #6]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d104      	bne.n	801480a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014800:	7bbb      	ldrb	r3, [r7, #14]
 8014802:	4619      	mov	r1, r3
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f006 fb28 	bl	801ae5a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f000 fcb0 	bl	8015170 <USBD_CtlSendStatus>

              break;
 8014810:	e004      	b.n	801481c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8014812:	6839      	ldr	r1, [r7, #0]
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f000 fc00 	bl	801501a <USBD_CtlError>
              break;
 801481a:	bf00      	nop
          }
          break;
 801481c:	e0e0      	b.n	80149e0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014824:	2b02      	cmp	r3, #2
 8014826:	d002      	beq.n	801482e <USBD_StdEPReq+0xf2>
 8014828:	2b03      	cmp	r3, #3
 801482a:	d015      	beq.n	8014858 <USBD_StdEPReq+0x11c>
 801482c:	e026      	b.n	801487c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801482e:	7bbb      	ldrb	r3, [r7, #14]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d00c      	beq.n	801484e <USBD_StdEPReq+0x112>
 8014834:	7bbb      	ldrb	r3, [r7, #14]
 8014836:	2b80      	cmp	r3, #128	; 0x80
 8014838:	d009      	beq.n	801484e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801483a:	7bbb      	ldrb	r3, [r7, #14]
 801483c:	4619      	mov	r1, r3
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f006 fb0b 	bl	801ae5a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014844:	2180      	movs	r1, #128	; 0x80
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f006 fb07 	bl	801ae5a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801484c:	e01c      	b.n	8014888 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801484e:	6839      	ldr	r1, [r7, #0]
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f000 fbe2 	bl	801501a <USBD_CtlError>
              break;
 8014856:	e017      	b.n	8014888 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	885b      	ldrh	r3, [r3, #2]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d112      	bne.n	8014886 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014860:	7bbb      	ldrb	r3, [r7, #14]
 8014862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014866:	2b00      	cmp	r3, #0
 8014868:	d004      	beq.n	8014874 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801486a:	7bbb      	ldrb	r3, [r7, #14]
 801486c:	4619      	mov	r1, r3
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f006 fb12 	bl	801ae98 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f000 fc7b 	bl	8015170 <USBD_CtlSendStatus>
              }
              break;
 801487a:	e004      	b.n	8014886 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 801487c:	6839      	ldr	r1, [r7, #0]
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f000 fbcb 	bl	801501a <USBD_CtlError>
              break;
 8014884:	e000      	b.n	8014888 <USBD_StdEPReq+0x14c>
              break;
 8014886:	bf00      	nop
          }
          break;
 8014888:	e0aa      	b.n	80149e0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014890:	2b02      	cmp	r3, #2
 8014892:	d002      	beq.n	801489a <USBD_StdEPReq+0x15e>
 8014894:	2b03      	cmp	r3, #3
 8014896:	d032      	beq.n	80148fe <USBD_StdEPReq+0x1c2>
 8014898:	e097      	b.n	80149ca <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801489a:	7bbb      	ldrb	r3, [r7, #14]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d007      	beq.n	80148b0 <USBD_StdEPReq+0x174>
 80148a0:	7bbb      	ldrb	r3, [r7, #14]
 80148a2:	2b80      	cmp	r3, #128	; 0x80
 80148a4:	d004      	beq.n	80148b0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80148a6:	6839      	ldr	r1, [r7, #0]
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 fbb6 	bl	801501a <USBD_CtlError>
                break;
 80148ae:	e091      	b.n	80149d4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80148b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	da0b      	bge.n	80148d0 <USBD_StdEPReq+0x194>
 80148b8:	7bbb      	ldrb	r3, [r7, #14]
 80148ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80148be:	4613      	mov	r3, r2
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	4413      	add	r3, r2
 80148c4:	009b      	lsls	r3, r3, #2
 80148c6:	3310      	adds	r3, #16
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	4413      	add	r3, r2
 80148cc:	3304      	adds	r3, #4
 80148ce:	e00b      	b.n	80148e8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80148d0:	7bbb      	ldrb	r3, [r7, #14]
 80148d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80148d6:	4613      	mov	r3, r2
 80148d8:	009b      	lsls	r3, r3, #2
 80148da:	4413      	add	r3, r2
 80148dc:	009b      	lsls	r3, r3, #2
 80148de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80148e2:	687a      	ldr	r2, [r7, #4]
 80148e4:	4413      	add	r3, r2
 80148e6:	3304      	adds	r3, #4
 80148e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	2200      	movs	r2, #0
 80148ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	2202      	movs	r2, #2
 80148f4:	4619      	mov	r1, r3
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f000 fbfa 	bl	80150f0 <USBD_CtlSendData>
              break;
 80148fc:	e06a      	b.n	80149d4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80148fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014902:	2b00      	cmp	r3, #0
 8014904:	da11      	bge.n	801492a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014906:	7bbb      	ldrb	r3, [r7, #14]
 8014908:	f003 020f 	and.w	r2, r3, #15
 801490c:	6879      	ldr	r1, [r7, #4]
 801490e:	4613      	mov	r3, r2
 8014910:	009b      	lsls	r3, r3, #2
 8014912:	4413      	add	r3, r2
 8014914:	009b      	lsls	r3, r3, #2
 8014916:	440b      	add	r3, r1
 8014918:	3318      	adds	r3, #24
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d117      	bne.n	8014950 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8014920:	6839      	ldr	r1, [r7, #0]
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f000 fb79 	bl	801501a <USBD_CtlError>
                  break;
 8014928:	e054      	b.n	80149d4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801492a:	7bbb      	ldrb	r3, [r7, #14]
 801492c:	f003 020f 	and.w	r2, r3, #15
 8014930:	6879      	ldr	r1, [r7, #4]
 8014932:	4613      	mov	r3, r2
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	4413      	add	r3, r2
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	440b      	add	r3, r1
 801493c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d104      	bne.n	8014950 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8014946:	6839      	ldr	r1, [r7, #0]
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f000 fb66 	bl	801501a <USBD_CtlError>
                  break;
 801494e:	e041      	b.n	80149d4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014954:	2b00      	cmp	r3, #0
 8014956:	da0b      	bge.n	8014970 <USBD_StdEPReq+0x234>
 8014958:	7bbb      	ldrb	r3, [r7, #14]
 801495a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801495e:	4613      	mov	r3, r2
 8014960:	009b      	lsls	r3, r3, #2
 8014962:	4413      	add	r3, r2
 8014964:	009b      	lsls	r3, r3, #2
 8014966:	3310      	adds	r3, #16
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	4413      	add	r3, r2
 801496c:	3304      	adds	r3, #4
 801496e:	e00b      	b.n	8014988 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014970:	7bbb      	ldrb	r3, [r7, #14]
 8014972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014976:	4613      	mov	r3, r2
 8014978:	009b      	lsls	r3, r3, #2
 801497a:	4413      	add	r3, r2
 801497c:	009b      	lsls	r3, r3, #2
 801497e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014982:	687a      	ldr	r2, [r7, #4]
 8014984:	4413      	add	r3, r2
 8014986:	3304      	adds	r3, #4
 8014988:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801498a:	7bbb      	ldrb	r3, [r7, #14]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d002      	beq.n	8014996 <USBD_StdEPReq+0x25a>
 8014990:	7bbb      	ldrb	r3, [r7, #14]
 8014992:	2b80      	cmp	r3, #128	; 0x80
 8014994:	d103      	bne.n	801499e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	2200      	movs	r2, #0
 801499a:	601a      	str	r2, [r3, #0]
 801499c:	e00e      	b.n	80149bc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801499e:	7bbb      	ldrb	r3, [r7, #14]
 80149a0:	4619      	mov	r1, r3
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f006 fa97 	bl	801aed6 <USBD_LL_IsStallEP>
 80149a8:	4603      	mov	r3, r0
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d003      	beq.n	80149b6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	2201      	movs	r2, #1
 80149b2:	601a      	str	r2, [r3, #0]
 80149b4:	e002      	b.n	80149bc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	2200      	movs	r2, #0
 80149ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	2202      	movs	r2, #2
 80149c0:	4619      	mov	r1, r3
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	f000 fb94 	bl	80150f0 <USBD_CtlSendData>
              break;
 80149c8:	e004      	b.n	80149d4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80149ca:	6839      	ldr	r1, [r7, #0]
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f000 fb24 	bl	801501a <USBD_CtlError>
              break;
 80149d2:	bf00      	nop
          }
          break;
 80149d4:	e004      	b.n	80149e0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80149d6:	6839      	ldr	r1, [r7, #0]
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f000 fb1e 	bl	801501a <USBD_CtlError>
          break;
 80149de:	bf00      	nop
      }
      break;
 80149e0:	e004      	b.n	80149ec <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80149e2:	6839      	ldr	r1, [r7, #0]
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f000 fb18 	bl	801501a <USBD_CtlError>
      break;
 80149ea:	bf00      	nop
  }

  return ret;
 80149ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3710      	adds	r7, #16
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
	...

080149f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b084      	sub	sp, #16
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
 8014a00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014a02:	2300      	movs	r3, #0
 8014a04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014a06:	2300      	movs	r3, #0
 8014a08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	885b      	ldrh	r3, [r3, #2]
 8014a12:	0a1b      	lsrs	r3, r3, #8
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	3b01      	subs	r3, #1
 8014a18:	2b06      	cmp	r3, #6
 8014a1a:	f200 8128 	bhi.w	8014c6e <USBD_GetDescriptor+0x276>
 8014a1e:	a201      	add	r2, pc, #4	; (adr r2, 8014a24 <USBD_GetDescriptor+0x2c>)
 8014a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a24:	08014a41 	.word	0x08014a41
 8014a28:	08014a59 	.word	0x08014a59
 8014a2c:	08014a99 	.word	0x08014a99
 8014a30:	08014c6f 	.word	0x08014c6f
 8014a34:	08014c6f 	.word	0x08014c6f
 8014a38:	08014c0f 	.word	0x08014c0f
 8014a3c:	08014c3b 	.word	0x08014c3b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	687a      	ldr	r2, [r7, #4]
 8014a4a:	7c12      	ldrb	r2, [r2, #16]
 8014a4c:	f107 0108 	add.w	r1, r7, #8
 8014a50:	4610      	mov	r0, r2
 8014a52:	4798      	blx	r3
 8014a54:	60f8      	str	r0, [r7, #12]
      break;
 8014a56:	e112      	b.n	8014c7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	7c1b      	ldrb	r3, [r3, #16]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d10d      	bne.n	8014a7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a68:	f107 0208 	add.w	r2, r7, #8
 8014a6c:	4610      	mov	r0, r2
 8014a6e:	4798      	blx	r3
 8014a70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	3301      	adds	r3, #1
 8014a76:	2202      	movs	r2, #2
 8014a78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014a7a:	e100      	b.n	8014c7e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a84:	f107 0208 	add.w	r2, r7, #8
 8014a88:	4610      	mov	r0, r2
 8014a8a:	4798      	blx	r3
 8014a8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	3301      	adds	r3, #1
 8014a92:	2202      	movs	r2, #2
 8014a94:	701a      	strb	r2, [r3, #0]
      break;
 8014a96:	e0f2      	b.n	8014c7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	885b      	ldrh	r3, [r3, #2]
 8014a9c:	b2db      	uxtb	r3, r3
 8014a9e:	2b05      	cmp	r3, #5
 8014aa0:	f200 80ac 	bhi.w	8014bfc <USBD_GetDescriptor+0x204>
 8014aa4:	a201      	add	r2, pc, #4	; (adr r2, 8014aac <USBD_GetDescriptor+0xb4>)
 8014aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014aaa:	bf00      	nop
 8014aac:	08014ac5 	.word	0x08014ac5
 8014ab0:	08014af9 	.word	0x08014af9
 8014ab4:	08014b2d 	.word	0x08014b2d
 8014ab8:	08014b61 	.word	0x08014b61
 8014abc:	08014b95 	.word	0x08014b95
 8014ac0:	08014bc9 	.word	0x08014bc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014aca:	685b      	ldr	r3, [r3, #4]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d00b      	beq.n	8014ae8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014ad6:	685b      	ldr	r3, [r3, #4]
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	7c12      	ldrb	r2, [r2, #16]
 8014adc:	f107 0108 	add.w	r1, r7, #8
 8014ae0:	4610      	mov	r0, r2
 8014ae2:	4798      	blx	r3
 8014ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ae6:	e091      	b.n	8014c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014ae8:	6839      	ldr	r1, [r7, #0]
 8014aea:	6878      	ldr	r0, [r7, #4]
 8014aec:	f000 fa95 	bl	801501a <USBD_CtlError>
            err++;
 8014af0:	7afb      	ldrb	r3, [r7, #11]
 8014af2:	3301      	adds	r3, #1
 8014af4:	72fb      	strb	r3, [r7, #11]
          break;
 8014af6:	e089      	b.n	8014c0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014afe:	689b      	ldr	r3, [r3, #8]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d00b      	beq.n	8014b1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b0a:	689b      	ldr	r3, [r3, #8]
 8014b0c:	687a      	ldr	r2, [r7, #4]
 8014b0e:	7c12      	ldrb	r2, [r2, #16]
 8014b10:	f107 0108 	add.w	r1, r7, #8
 8014b14:	4610      	mov	r0, r2
 8014b16:	4798      	blx	r3
 8014b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b1a:	e077      	b.n	8014c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014b1c:	6839      	ldr	r1, [r7, #0]
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	f000 fa7b 	bl	801501a <USBD_CtlError>
            err++;
 8014b24:	7afb      	ldrb	r3, [r7, #11]
 8014b26:	3301      	adds	r3, #1
 8014b28:	72fb      	strb	r3, [r7, #11]
          break;
 8014b2a:	e06f      	b.n	8014c0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d00b      	beq.n	8014b50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	687a      	ldr	r2, [r7, #4]
 8014b42:	7c12      	ldrb	r2, [r2, #16]
 8014b44:	f107 0108 	add.w	r1, r7, #8
 8014b48:	4610      	mov	r0, r2
 8014b4a:	4798      	blx	r3
 8014b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b4e:	e05d      	b.n	8014c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014b50:	6839      	ldr	r1, [r7, #0]
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f000 fa61 	bl	801501a <USBD_CtlError>
            err++;
 8014b58:	7afb      	ldrb	r3, [r7, #11]
 8014b5a:	3301      	adds	r3, #1
 8014b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8014b5e:	e055      	b.n	8014c0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b66:	691b      	ldr	r3, [r3, #16]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d00b      	beq.n	8014b84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b72:	691b      	ldr	r3, [r3, #16]
 8014b74:	687a      	ldr	r2, [r7, #4]
 8014b76:	7c12      	ldrb	r2, [r2, #16]
 8014b78:	f107 0108 	add.w	r1, r7, #8
 8014b7c:	4610      	mov	r0, r2
 8014b7e:	4798      	blx	r3
 8014b80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b82:	e043      	b.n	8014c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014b84:	6839      	ldr	r1, [r7, #0]
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f000 fa47 	bl	801501a <USBD_CtlError>
            err++;
 8014b8c:	7afb      	ldrb	r3, [r7, #11]
 8014b8e:	3301      	adds	r3, #1
 8014b90:	72fb      	strb	r3, [r7, #11]
          break;
 8014b92:	e03b      	b.n	8014c0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014b9a:	695b      	ldr	r3, [r3, #20]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d00b      	beq.n	8014bb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014ba6:	695b      	ldr	r3, [r3, #20]
 8014ba8:	687a      	ldr	r2, [r7, #4]
 8014baa:	7c12      	ldrb	r2, [r2, #16]
 8014bac:	f107 0108 	add.w	r1, r7, #8
 8014bb0:	4610      	mov	r0, r2
 8014bb2:	4798      	blx	r3
 8014bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bb6:	e029      	b.n	8014c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014bb8:	6839      	ldr	r1, [r7, #0]
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f000 fa2d 	bl	801501a <USBD_CtlError>
            err++;
 8014bc0:	7afb      	ldrb	r3, [r7, #11]
 8014bc2:	3301      	adds	r3, #1
 8014bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8014bc6:	e021      	b.n	8014c0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014bce:	699b      	ldr	r3, [r3, #24]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d00b      	beq.n	8014bec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014bda:	699b      	ldr	r3, [r3, #24]
 8014bdc:	687a      	ldr	r2, [r7, #4]
 8014bde:	7c12      	ldrb	r2, [r2, #16]
 8014be0:	f107 0108 	add.w	r1, r7, #8
 8014be4:	4610      	mov	r0, r2
 8014be6:	4798      	blx	r3
 8014be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bea:	e00f      	b.n	8014c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014bec:	6839      	ldr	r1, [r7, #0]
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f000 fa13 	bl	801501a <USBD_CtlError>
            err++;
 8014bf4:	7afb      	ldrb	r3, [r7, #11]
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8014bfa:	e007      	b.n	8014c0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014bfc:	6839      	ldr	r1, [r7, #0]
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f000 fa0b 	bl	801501a <USBD_CtlError>
          err++;
 8014c04:	7afb      	ldrb	r3, [r7, #11]
 8014c06:	3301      	adds	r3, #1
 8014c08:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8014c0a:	e038      	b.n	8014c7e <USBD_GetDescriptor+0x286>
 8014c0c:	e037      	b.n	8014c7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	7c1b      	ldrb	r3, [r3, #16]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d109      	bne.n	8014c2a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c1e:	f107 0208 	add.w	r2, r7, #8
 8014c22:	4610      	mov	r0, r2
 8014c24:	4798      	blx	r3
 8014c26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014c28:	e029      	b.n	8014c7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014c2a:	6839      	ldr	r1, [r7, #0]
 8014c2c:	6878      	ldr	r0, [r7, #4]
 8014c2e:	f000 f9f4 	bl	801501a <USBD_CtlError>
        err++;
 8014c32:	7afb      	ldrb	r3, [r7, #11]
 8014c34:	3301      	adds	r3, #1
 8014c36:	72fb      	strb	r3, [r7, #11]
      break;
 8014c38:	e021      	b.n	8014c7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	7c1b      	ldrb	r3, [r3, #16]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d10d      	bne.n	8014c5e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c4a:	f107 0208 	add.w	r2, r7, #8
 8014c4e:	4610      	mov	r0, r2
 8014c50:	4798      	blx	r3
 8014c52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	3301      	adds	r3, #1
 8014c58:	2207      	movs	r2, #7
 8014c5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014c5c:	e00f      	b.n	8014c7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014c5e:	6839      	ldr	r1, [r7, #0]
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f000 f9da 	bl	801501a <USBD_CtlError>
        err++;
 8014c66:	7afb      	ldrb	r3, [r7, #11]
 8014c68:	3301      	adds	r3, #1
 8014c6a:	72fb      	strb	r3, [r7, #11]
      break;
 8014c6c:	e007      	b.n	8014c7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014c6e:	6839      	ldr	r1, [r7, #0]
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f000 f9d2 	bl	801501a <USBD_CtlError>
      err++;
 8014c76:	7afb      	ldrb	r3, [r7, #11]
 8014c78:	3301      	adds	r3, #1
 8014c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8014c7c:	bf00      	nop
  }

  if (err != 0U)
 8014c7e:	7afb      	ldrb	r3, [r7, #11]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d11c      	bne.n	8014cbe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014c84:	893b      	ldrh	r3, [r7, #8]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d011      	beq.n	8014cae <USBD_GetDescriptor+0x2b6>
 8014c8a:	683b      	ldr	r3, [r7, #0]
 8014c8c:	88db      	ldrh	r3, [r3, #6]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d00d      	beq.n	8014cae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	88da      	ldrh	r2, [r3, #6]
 8014c96:	893b      	ldrh	r3, [r7, #8]
 8014c98:	4293      	cmp	r3, r2
 8014c9a:	bf28      	it	cs
 8014c9c:	4613      	movcs	r3, r2
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014ca2:	893b      	ldrh	r3, [r7, #8]
 8014ca4:	461a      	mov	r2, r3
 8014ca6:	68f9      	ldr	r1, [r7, #12]
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f000 fa21 	bl	80150f0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8014cae:	683b      	ldr	r3, [r7, #0]
 8014cb0:	88db      	ldrh	r3, [r3, #6]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d104      	bne.n	8014cc0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f000 fa5a 	bl	8015170 <USBD_CtlSendStatus>
 8014cbc:	e000      	b.n	8014cc0 <USBD_GetDescriptor+0x2c8>
    return;
 8014cbe:	bf00      	nop
    }
  }
}
 8014cc0:	3710      	adds	r7, #16
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}
 8014cc6:	bf00      	nop

08014cc8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b084      	sub	sp, #16
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	889b      	ldrh	r3, [r3, #4]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d130      	bne.n	8014d3c <USBD_SetAddress+0x74>
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	88db      	ldrh	r3, [r3, #6]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d12c      	bne.n	8014d3c <USBD_SetAddress+0x74>
 8014ce2:	683b      	ldr	r3, [r7, #0]
 8014ce4:	885b      	ldrh	r3, [r3, #2]
 8014ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8014ce8:	d828      	bhi.n	8014d3c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	885b      	ldrh	r3, [r3, #2]
 8014cee:	b2db      	uxtb	r3, r3
 8014cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cfc:	2b03      	cmp	r3, #3
 8014cfe:	d104      	bne.n	8014d0a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014d00:	6839      	ldr	r1, [r7, #0]
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f000 f989 	bl	801501a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d08:	e01c      	b.n	8014d44 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	7bfa      	ldrb	r2, [r7, #15]
 8014d0e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014d12:	7bfb      	ldrb	r3, [r7, #15]
 8014d14:	4619      	mov	r1, r3
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f006 f909 	bl	801af2e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f000 fa27 	bl	8015170 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014d22:	7bfb      	ldrb	r3, [r7, #15]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d004      	beq.n	8014d32 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	2202      	movs	r2, #2
 8014d2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d30:	e008      	b.n	8014d44 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	2201      	movs	r2, #1
 8014d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d3a:	e003      	b.n	8014d44 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014d3c:	6839      	ldr	r1, [r7, #0]
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f000 f96b 	bl	801501a <USBD_CtlError>
  }
}
 8014d44:	bf00      	nop
 8014d46:	3710      	adds	r7, #16
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}

08014d4c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b082      	sub	sp, #8
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	885b      	ldrh	r3, [r3, #2]
 8014d5a:	b2da      	uxtb	r2, r3
 8014d5c:	4b41      	ldr	r3, [pc, #260]	; (8014e64 <USBD_SetConfig+0x118>)
 8014d5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014d60:	4b40      	ldr	r3, [pc, #256]	; (8014e64 <USBD_SetConfig+0x118>)
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	d904      	bls.n	8014d72 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8014d68:	6839      	ldr	r1, [r7, #0]
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f000 f955 	bl	801501a <USBD_CtlError>
 8014d70:	e075      	b.n	8014e5e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d78:	2b02      	cmp	r3, #2
 8014d7a:	d002      	beq.n	8014d82 <USBD_SetConfig+0x36>
 8014d7c:	2b03      	cmp	r3, #3
 8014d7e:	d023      	beq.n	8014dc8 <USBD_SetConfig+0x7c>
 8014d80:	e062      	b.n	8014e48 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8014d82:	4b38      	ldr	r3, [pc, #224]	; (8014e64 <USBD_SetConfig+0x118>)
 8014d84:	781b      	ldrb	r3, [r3, #0]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d01a      	beq.n	8014dc0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8014d8a:	4b36      	ldr	r3, [pc, #216]	; (8014e64 <USBD_SetConfig+0x118>)
 8014d8c:	781b      	ldrb	r3, [r3, #0]
 8014d8e:	461a      	mov	r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2203      	movs	r2, #3
 8014d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014d9c:	4b31      	ldr	r3, [pc, #196]	; (8014e64 <USBD_SetConfig+0x118>)
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	4619      	mov	r1, r3
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f7ff f9b5 	bl	8014112 <USBD_SetClassConfig>
 8014da8:	4603      	mov	r3, r0
 8014daa:	2b02      	cmp	r3, #2
 8014dac:	d104      	bne.n	8014db8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8014dae:	6839      	ldr	r1, [r7, #0]
 8014db0:	6878      	ldr	r0, [r7, #4]
 8014db2:	f000 f932 	bl	801501a <USBD_CtlError>
            return;
 8014db6:	e052      	b.n	8014e5e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f000 f9d9 	bl	8015170 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014dbe:	e04e      	b.n	8014e5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014dc0:	6878      	ldr	r0, [r7, #4]
 8014dc2:	f000 f9d5 	bl	8015170 <USBD_CtlSendStatus>
        break;
 8014dc6:	e04a      	b.n	8014e5e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014dc8:	4b26      	ldr	r3, [pc, #152]	; (8014e64 <USBD_SetConfig+0x118>)
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d112      	bne.n	8014df6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2202      	movs	r2, #2
 8014dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8014dd8:	4b22      	ldr	r3, [pc, #136]	; (8014e64 <USBD_SetConfig+0x118>)
 8014dda:	781b      	ldrb	r3, [r3, #0]
 8014ddc:	461a      	mov	r2, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014de2:	4b20      	ldr	r3, [pc, #128]	; (8014e64 <USBD_SetConfig+0x118>)
 8014de4:	781b      	ldrb	r3, [r3, #0]
 8014de6:	4619      	mov	r1, r3
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f7ff f9b1 	bl	8014150 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f000 f9be 	bl	8015170 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014df4:	e033      	b.n	8014e5e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8014df6:	4b1b      	ldr	r3, [pc, #108]	; (8014e64 <USBD_SetConfig+0x118>)
 8014df8:	781b      	ldrb	r3, [r3, #0]
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	685b      	ldr	r3, [r3, #4]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d01d      	beq.n	8014e40 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	685b      	ldr	r3, [r3, #4]
 8014e08:	b2db      	uxtb	r3, r3
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f7ff f99f 	bl	8014150 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014e12:	4b14      	ldr	r3, [pc, #80]	; (8014e64 <USBD_SetConfig+0x118>)
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	461a      	mov	r2, r3
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014e1c:	4b11      	ldr	r3, [pc, #68]	; (8014e64 <USBD_SetConfig+0x118>)
 8014e1e:	781b      	ldrb	r3, [r3, #0]
 8014e20:	4619      	mov	r1, r3
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f7ff f975 	bl	8014112 <USBD_SetClassConfig>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	2b02      	cmp	r3, #2
 8014e2c:	d104      	bne.n	8014e38 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8014e2e:	6839      	ldr	r1, [r7, #0]
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f000 f8f2 	bl	801501a <USBD_CtlError>
            return;
 8014e36:	e012      	b.n	8014e5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f000 f999 	bl	8015170 <USBD_CtlSendStatus>
        break;
 8014e3e:	e00e      	b.n	8014e5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f000 f995 	bl	8015170 <USBD_CtlSendStatus>
        break;
 8014e46:	e00a      	b.n	8014e5e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8014e48:	6839      	ldr	r1, [r7, #0]
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f000 f8e5 	bl	801501a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014e50:	4b04      	ldr	r3, [pc, #16]	; (8014e64 <USBD_SetConfig+0x118>)
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	4619      	mov	r1, r3
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f7ff f97a 	bl	8014150 <USBD_ClrClassConfig>
        break;
 8014e5c:	bf00      	nop
    }
  }
}
 8014e5e:	3708      	adds	r7, #8
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	240002cc 	.word	0x240002cc

08014e68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	88db      	ldrh	r3, [r3, #6]
 8014e76:	2b01      	cmp	r3, #1
 8014e78:	d004      	beq.n	8014e84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014e7a:	6839      	ldr	r1, [r7, #0]
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f000 f8cc 	bl	801501a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014e82:	e021      	b.n	8014ec8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e8a:	2b01      	cmp	r3, #1
 8014e8c:	db17      	blt.n	8014ebe <USBD_GetConfig+0x56>
 8014e8e:	2b02      	cmp	r3, #2
 8014e90:	dd02      	ble.n	8014e98 <USBD_GetConfig+0x30>
 8014e92:	2b03      	cmp	r3, #3
 8014e94:	d00b      	beq.n	8014eae <USBD_GetConfig+0x46>
 8014e96:	e012      	b.n	8014ebe <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	3308      	adds	r3, #8
 8014ea2:	2201      	movs	r2, #1
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	6878      	ldr	r0, [r7, #4]
 8014ea8:	f000 f922 	bl	80150f0 <USBD_CtlSendData>
        break;
 8014eac:	e00c      	b.n	8014ec8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	3304      	adds	r3, #4
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f000 f91a 	bl	80150f0 <USBD_CtlSendData>
        break;
 8014ebc:	e004      	b.n	8014ec8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8014ebe:	6839      	ldr	r1, [r7, #0]
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f000 f8aa 	bl	801501a <USBD_CtlError>
        break;
 8014ec6:	bf00      	nop
}
 8014ec8:	bf00      	nop
 8014eca:	3708      	adds	r7, #8
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}

08014ed0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ee0:	3b01      	subs	r3, #1
 8014ee2:	2b02      	cmp	r3, #2
 8014ee4:	d81e      	bhi.n	8014f24 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	88db      	ldrh	r3, [r3, #6]
 8014eea:	2b02      	cmp	r3, #2
 8014eec:	d004      	beq.n	8014ef8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8014eee:	6839      	ldr	r1, [r7, #0]
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	f000 f892 	bl	801501a <USBD_CtlError>
        break;
 8014ef6:	e01a      	b.n	8014f2e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2201      	movs	r2, #1
 8014efc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d005      	beq.n	8014f14 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	68db      	ldr	r3, [r3, #12]
 8014f0c:	f043 0202 	orr.w	r2, r3, #2
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	330c      	adds	r3, #12
 8014f18:	2202      	movs	r2, #2
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f000 f8e7 	bl	80150f0 <USBD_CtlSendData>
      break;
 8014f22:	e004      	b.n	8014f2e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8014f24:	6839      	ldr	r1, [r7, #0]
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f000 f877 	bl	801501a <USBD_CtlError>
      break;
 8014f2c:	bf00      	nop
  }
}
 8014f2e:	bf00      	nop
 8014f30:	3708      	adds	r7, #8
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}

08014f36 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014f36:	b580      	push	{r7, lr}
 8014f38:	b082      	sub	sp, #8
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	6078      	str	r0, [r7, #4]
 8014f3e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	885b      	ldrh	r3, [r3, #2]
 8014f44:	2b01      	cmp	r3, #1
 8014f46:	d106      	bne.n	8014f56 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8014f50:	6878      	ldr	r0, [r7, #4]
 8014f52:	f000 f90d 	bl	8015170 <USBD_CtlSendStatus>
  }
}
 8014f56:	bf00      	nop
 8014f58:	3708      	adds	r7, #8
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}

08014f5e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014f5e:	b580      	push	{r7, lr}
 8014f60:	b082      	sub	sp, #8
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	6078      	str	r0, [r7, #4]
 8014f66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f6e:	3b01      	subs	r3, #1
 8014f70:	2b02      	cmp	r3, #2
 8014f72:	d80b      	bhi.n	8014f8c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	885b      	ldrh	r3, [r3, #2]
 8014f78:	2b01      	cmp	r3, #1
 8014f7a:	d10c      	bne.n	8014f96 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2200      	movs	r2, #0
 8014f80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8014f84:	6878      	ldr	r0, [r7, #4]
 8014f86:	f000 f8f3 	bl	8015170 <USBD_CtlSendStatus>
      }
      break;
 8014f8a:	e004      	b.n	8014f96 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8014f8c:	6839      	ldr	r1, [r7, #0]
 8014f8e:	6878      	ldr	r0, [r7, #4]
 8014f90:	f000 f843 	bl	801501a <USBD_CtlError>
      break;
 8014f94:	e000      	b.n	8014f98 <USBD_ClrFeature+0x3a>
      break;
 8014f96:	bf00      	nop
  }
}
 8014f98:	bf00      	nop
 8014f9a:	3708      	adds	r7, #8
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014fa0:	b480      	push	{r7}
 8014fa2:	b083      	sub	sp, #12
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	781a      	ldrb	r2, [r3, #0]
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	785a      	ldrb	r2, [r3, #1]
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	3302      	adds	r3, #2
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	683b      	ldr	r3, [r7, #0]
 8014fc4:	3303      	adds	r3, #3
 8014fc6:	781b      	ldrb	r3, [r3, #0]
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	021b      	lsls	r3, r3, #8
 8014fcc:	b29b      	uxth	r3, r3
 8014fce:	4413      	add	r3, r2
 8014fd0:	b29a      	uxth	r2, r3
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	3304      	adds	r3, #4
 8014fda:	781b      	ldrb	r3, [r3, #0]
 8014fdc:	b29a      	uxth	r2, r3
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	3305      	adds	r3, #5
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	b29b      	uxth	r3, r3
 8014fe6:	021b      	lsls	r3, r3, #8
 8014fe8:	b29b      	uxth	r3, r3
 8014fea:	4413      	add	r3, r2
 8014fec:	b29a      	uxth	r2, r3
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	3306      	adds	r3, #6
 8014ff6:	781b      	ldrb	r3, [r3, #0]
 8014ff8:	b29a      	uxth	r2, r3
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	3307      	adds	r3, #7
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	b29b      	uxth	r3, r3
 8015002:	021b      	lsls	r3, r3, #8
 8015004:	b29b      	uxth	r3, r3
 8015006:	4413      	add	r3, r2
 8015008:	b29a      	uxth	r2, r3
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	80da      	strh	r2, [r3, #6]

}
 801500e:	bf00      	nop
 8015010:	370c      	adds	r7, #12
 8015012:	46bd      	mov	sp, r7
 8015014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015018:	4770      	bx	lr

0801501a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801501a:	b580      	push	{r7, lr}
 801501c:	b082      	sub	sp, #8
 801501e:	af00      	add	r7, sp, #0
 8015020:	6078      	str	r0, [r7, #4]
 8015022:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8015024:	2180      	movs	r1, #128	; 0x80
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f005 ff17 	bl	801ae5a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801502c:	2100      	movs	r1, #0
 801502e:	6878      	ldr	r0, [r7, #4]
 8015030:	f005 ff13 	bl	801ae5a <USBD_LL_StallEP>
}
 8015034:	bf00      	nop
 8015036:	3708      	adds	r7, #8
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}

0801503c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b086      	sub	sp, #24
 8015040:	af00      	add	r7, sp, #0
 8015042:	60f8      	str	r0, [r7, #12]
 8015044:	60b9      	str	r1, [r7, #8]
 8015046:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015048:	2300      	movs	r3, #0
 801504a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d032      	beq.n	80150b8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8015052:	68f8      	ldr	r0, [r7, #12]
 8015054:	f000 f834 	bl	80150c0 <USBD_GetLen>
 8015058:	4603      	mov	r3, r0
 801505a:	3301      	adds	r3, #1
 801505c:	b29b      	uxth	r3, r3
 801505e:	005b      	lsls	r3, r3, #1
 8015060:	b29a      	uxth	r2, r3
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8015066:	7dfb      	ldrb	r3, [r7, #23]
 8015068:	1c5a      	adds	r2, r3, #1
 801506a:	75fa      	strb	r2, [r7, #23]
 801506c:	461a      	mov	r2, r3
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	4413      	add	r3, r2
 8015072:	687a      	ldr	r2, [r7, #4]
 8015074:	7812      	ldrb	r2, [r2, #0]
 8015076:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8015078:	7dfb      	ldrb	r3, [r7, #23]
 801507a:	1c5a      	adds	r2, r3, #1
 801507c:	75fa      	strb	r2, [r7, #23]
 801507e:	461a      	mov	r2, r3
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	4413      	add	r3, r2
 8015084:	2203      	movs	r2, #3
 8015086:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8015088:	e012      	b.n	80150b0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	1c5a      	adds	r2, r3, #1
 801508e:	60fa      	str	r2, [r7, #12]
 8015090:	7dfa      	ldrb	r2, [r7, #23]
 8015092:	1c51      	adds	r1, r2, #1
 8015094:	75f9      	strb	r1, [r7, #23]
 8015096:	4611      	mov	r1, r2
 8015098:	68ba      	ldr	r2, [r7, #8]
 801509a:	440a      	add	r2, r1
 801509c:	781b      	ldrb	r3, [r3, #0]
 801509e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80150a0:	7dfb      	ldrb	r3, [r7, #23]
 80150a2:	1c5a      	adds	r2, r3, #1
 80150a4:	75fa      	strb	r2, [r7, #23]
 80150a6:	461a      	mov	r2, r3
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	4413      	add	r3, r2
 80150ac:	2200      	movs	r2, #0
 80150ae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d1e8      	bne.n	801508a <USBD_GetString+0x4e>
    }
  }
}
 80150b8:	bf00      	nop
 80150ba:	3718      	adds	r7, #24
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}

080150c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80150c0:	b480      	push	{r7}
 80150c2:	b085      	sub	sp, #20
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80150c8:	2300      	movs	r3, #0
 80150ca:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80150cc:	e005      	b.n	80150da <USBD_GetLen+0x1a>
  {
    len++;
 80150ce:	7bfb      	ldrb	r3, [r7, #15]
 80150d0:	3301      	adds	r3, #1
 80150d2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	3301      	adds	r3, #1
 80150d8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d1f5      	bne.n	80150ce <USBD_GetLen+0xe>
  }

  return len;
 80150e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3714      	adds	r7, #20
 80150e8:	46bd      	mov	sp, r7
 80150ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ee:	4770      	bx	lr

080150f0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	60f8      	str	r0, [r7, #12]
 80150f8:	60b9      	str	r1, [r7, #8]
 80150fa:	4613      	mov	r3, r2
 80150fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	2202      	movs	r2, #2
 8015102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015106:	88fa      	ldrh	r2, [r7, #6]
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801510c:	88fa      	ldrh	r2, [r7, #6]
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015112:	88fb      	ldrh	r3, [r7, #6]
 8015114:	68ba      	ldr	r2, [r7, #8]
 8015116:	2100      	movs	r1, #0
 8015118:	68f8      	ldr	r0, [r7, #12]
 801511a:	f005 ff27 	bl	801af6c <USBD_LL_Transmit>

  return USBD_OK;
 801511e:	2300      	movs	r3, #0
}
 8015120:	4618      	mov	r0, r3
 8015122:	3710      	adds	r7, #16
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}

08015128 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b084      	sub	sp, #16
 801512c:	af00      	add	r7, sp, #0
 801512e:	60f8      	str	r0, [r7, #12]
 8015130:	60b9      	str	r1, [r7, #8]
 8015132:	4613      	mov	r3, r2
 8015134:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015136:	88fb      	ldrh	r3, [r7, #6]
 8015138:	68ba      	ldr	r2, [r7, #8]
 801513a:	2100      	movs	r1, #0
 801513c:	68f8      	ldr	r0, [r7, #12]
 801513e:	f005 ff15 	bl	801af6c <USBD_LL_Transmit>

  return USBD_OK;
 8015142:	2300      	movs	r3, #0
}
 8015144:	4618      	mov	r0, r3
 8015146:	3710      	adds	r7, #16
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}

0801514c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b084      	sub	sp, #16
 8015150:	af00      	add	r7, sp, #0
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	4613      	mov	r3, r2
 8015158:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801515a:	88fb      	ldrh	r3, [r7, #6]
 801515c:	68ba      	ldr	r2, [r7, #8]
 801515e:	2100      	movs	r1, #0
 8015160:	68f8      	ldr	r0, [r7, #12]
 8015162:	f005 ff26 	bl	801afb2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015166:	2300      	movs	r3, #0
}
 8015168:	4618      	mov	r0, r3
 801516a:	3710      	adds	r7, #16
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}

08015170 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b082      	sub	sp, #8
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2204      	movs	r2, #4
 801517c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015180:	2300      	movs	r3, #0
 8015182:	2200      	movs	r2, #0
 8015184:	2100      	movs	r1, #0
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f005 fef0 	bl	801af6c <USBD_LL_Transmit>

  return USBD_OK;
 801518c:	2300      	movs	r3, #0
}
 801518e:	4618      	mov	r0, r3
 8015190:	3708      	adds	r7, #8
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}

08015196 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015196:	b580      	push	{r7, lr}
 8015198:	b082      	sub	sp, #8
 801519a:	af00      	add	r7, sp, #0
 801519c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	2205      	movs	r2, #5
 80151a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151a6:	2300      	movs	r3, #0
 80151a8:	2200      	movs	r2, #0
 80151aa:	2100      	movs	r1, #0
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f005 ff00 	bl	801afb2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80151b2:	2300      	movs	r3, #0
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	3708      	adds	r7, #8
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}

080151bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b084      	sub	sp, #16
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	4603      	mov	r3, r0
 80151c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80151c6:	79fb      	ldrb	r3, [r7, #7]
 80151c8:	4a08      	ldr	r2, [pc, #32]	; (80151ec <disk_status+0x30>)
 80151ca:	009b      	lsls	r3, r3, #2
 80151cc:	4413      	add	r3, r2
 80151ce:	685b      	ldr	r3, [r3, #4]
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	79fa      	ldrb	r2, [r7, #7]
 80151d4:	4905      	ldr	r1, [pc, #20]	; (80151ec <disk_status+0x30>)
 80151d6:	440a      	add	r2, r1
 80151d8:	7b12      	ldrb	r2, [r2, #12]
 80151da:	4610      	mov	r0, r2
 80151dc:	4798      	blx	r3
 80151de:	4603      	mov	r3, r0
 80151e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80151e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80151e4:	4618      	mov	r0, r3
 80151e6:	3710      	adds	r7, #16
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}
 80151ec:	240002fc 	.word	0x240002fc

080151f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b084      	sub	sp, #16
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	4603      	mov	r3, r0
 80151f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80151fa:	2300      	movs	r3, #0
 80151fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80151fe:	79fb      	ldrb	r3, [r7, #7]
 8015200:	4a0d      	ldr	r2, [pc, #52]	; (8015238 <disk_initialize+0x48>)
 8015202:	5cd3      	ldrb	r3, [r2, r3]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d111      	bne.n	801522c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8015208:	79fb      	ldrb	r3, [r7, #7]
 801520a:	4a0b      	ldr	r2, [pc, #44]	; (8015238 <disk_initialize+0x48>)
 801520c:	2101      	movs	r1, #1
 801520e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015210:	79fb      	ldrb	r3, [r7, #7]
 8015212:	4a09      	ldr	r2, [pc, #36]	; (8015238 <disk_initialize+0x48>)
 8015214:	009b      	lsls	r3, r3, #2
 8015216:	4413      	add	r3, r2
 8015218:	685b      	ldr	r3, [r3, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	79fa      	ldrb	r2, [r7, #7]
 801521e:	4906      	ldr	r1, [pc, #24]	; (8015238 <disk_initialize+0x48>)
 8015220:	440a      	add	r2, r1
 8015222:	7b12      	ldrb	r2, [r2, #12]
 8015224:	4610      	mov	r0, r2
 8015226:	4798      	blx	r3
 8015228:	4603      	mov	r3, r0
 801522a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801522c:	7bfb      	ldrb	r3, [r7, #15]
}
 801522e:	4618      	mov	r0, r3
 8015230:	3710      	adds	r7, #16
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}
 8015236:	bf00      	nop
 8015238:	240002fc 	.word	0x240002fc

0801523c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801523c:	b590      	push	{r4, r7, lr}
 801523e:	b087      	sub	sp, #28
 8015240:	af00      	add	r7, sp, #0
 8015242:	60b9      	str	r1, [r7, #8]
 8015244:	607a      	str	r2, [r7, #4]
 8015246:	603b      	str	r3, [r7, #0]
 8015248:	4603      	mov	r3, r0
 801524a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801524c:	7bfb      	ldrb	r3, [r7, #15]
 801524e:	4a0a      	ldr	r2, [pc, #40]	; (8015278 <disk_read+0x3c>)
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	4413      	add	r3, r2
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	689c      	ldr	r4, [r3, #8]
 8015258:	7bfb      	ldrb	r3, [r7, #15]
 801525a:	4a07      	ldr	r2, [pc, #28]	; (8015278 <disk_read+0x3c>)
 801525c:	4413      	add	r3, r2
 801525e:	7b18      	ldrb	r0, [r3, #12]
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	687a      	ldr	r2, [r7, #4]
 8015264:	68b9      	ldr	r1, [r7, #8]
 8015266:	47a0      	blx	r4
 8015268:	4603      	mov	r3, r0
 801526a:	75fb      	strb	r3, [r7, #23]
  return res;
 801526c:	7dfb      	ldrb	r3, [r7, #23]
}
 801526e:	4618      	mov	r0, r3
 8015270:	371c      	adds	r7, #28
 8015272:	46bd      	mov	sp, r7
 8015274:	bd90      	pop	{r4, r7, pc}
 8015276:	bf00      	nop
 8015278:	240002fc 	.word	0x240002fc

0801527c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801527c:	b590      	push	{r4, r7, lr}
 801527e:	b087      	sub	sp, #28
 8015280:	af00      	add	r7, sp, #0
 8015282:	60b9      	str	r1, [r7, #8]
 8015284:	607a      	str	r2, [r7, #4]
 8015286:	603b      	str	r3, [r7, #0]
 8015288:	4603      	mov	r3, r0
 801528a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801528c:	7bfb      	ldrb	r3, [r7, #15]
 801528e:	4a0a      	ldr	r2, [pc, #40]	; (80152b8 <disk_write+0x3c>)
 8015290:	009b      	lsls	r3, r3, #2
 8015292:	4413      	add	r3, r2
 8015294:	685b      	ldr	r3, [r3, #4]
 8015296:	68dc      	ldr	r4, [r3, #12]
 8015298:	7bfb      	ldrb	r3, [r7, #15]
 801529a:	4a07      	ldr	r2, [pc, #28]	; (80152b8 <disk_write+0x3c>)
 801529c:	4413      	add	r3, r2
 801529e:	7b18      	ldrb	r0, [r3, #12]
 80152a0:	683b      	ldr	r3, [r7, #0]
 80152a2:	687a      	ldr	r2, [r7, #4]
 80152a4:	68b9      	ldr	r1, [r7, #8]
 80152a6:	47a0      	blx	r4
 80152a8:	4603      	mov	r3, r0
 80152aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80152ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	371c      	adds	r7, #28
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd90      	pop	{r4, r7, pc}
 80152b6:	bf00      	nop
 80152b8:	240002fc 	.word	0x240002fc

080152bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b084      	sub	sp, #16
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	4603      	mov	r3, r0
 80152c4:	603a      	str	r2, [r7, #0]
 80152c6:	71fb      	strb	r3, [r7, #7]
 80152c8:	460b      	mov	r3, r1
 80152ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80152cc:	79fb      	ldrb	r3, [r7, #7]
 80152ce:	4a09      	ldr	r2, [pc, #36]	; (80152f4 <disk_ioctl+0x38>)
 80152d0:	009b      	lsls	r3, r3, #2
 80152d2:	4413      	add	r3, r2
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	691b      	ldr	r3, [r3, #16]
 80152d8:	79fa      	ldrb	r2, [r7, #7]
 80152da:	4906      	ldr	r1, [pc, #24]	; (80152f4 <disk_ioctl+0x38>)
 80152dc:	440a      	add	r2, r1
 80152de:	7b10      	ldrb	r0, [r2, #12]
 80152e0:	79b9      	ldrb	r1, [r7, #6]
 80152e2:	683a      	ldr	r2, [r7, #0]
 80152e4:	4798      	blx	r3
 80152e6:	4603      	mov	r3, r0
 80152e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80152ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	3710      	adds	r7, #16
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}
 80152f4:	240002fc 	.word	0x240002fc

080152f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80152f8:	b480      	push	{r7}
 80152fa:	b085      	sub	sp, #20
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	3301      	adds	r3, #1
 8015304:	781b      	ldrb	r3, [r3, #0]
 8015306:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8015308:	89fb      	ldrh	r3, [r7, #14]
 801530a:	021b      	lsls	r3, r3, #8
 801530c:	b21a      	sxth	r2, r3
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	781b      	ldrb	r3, [r3, #0]
 8015312:	b21b      	sxth	r3, r3
 8015314:	4313      	orrs	r3, r2
 8015316:	b21b      	sxth	r3, r3
 8015318:	81fb      	strh	r3, [r7, #14]
	return rv;
 801531a:	89fb      	ldrh	r3, [r7, #14]
}
 801531c:	4618      	mov	r0, r3
 801531e:	3714      	adds	r7, #20
 8015320:	46bd      	mov	sp, r7
 8015322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015326:	4770      	bx	lr

08015328 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015328:	b480      	push	{r7}
 801532a:	b085      	sub	sp, #20
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	3303      	adds	r3, #3
 8015334:	781b      	ldrb	r3, [r3, #0]
 8015336:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	021b      	lsls	r3, r3, #8
 801533c:	687a      	ldr	r2, [r7, #4]
 801533e:	3202      	adds	r2, #2
 8015340:	7812      	ldrb	r2, [r2, #0]
 8015342:	4313      	orrs	r3, r2
 8015344:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	021b      	lsls	r3, r3, #8
 801534a:	687a      	ldr	r2, [r7, #4]
 801534c:	3201      	adds	r2, #1
 801534e:	7812      	ldrb	r2, [r2, #0]
 8015350:	4313      	orrs	r3, r2
 8015352:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	021b      	lsls	r3, r3, #8
 8015358:	687a      	ldr	r2, [r7, #4]
 801535a:	7812      	ldrb	r2, [r2, #0]
 801535c:	4313      	orrs	r3, r2
 801535e:	60fb      	str	r3, [r7, #12]
	return rv;
 8015360:	68fb      	ldr	r3, [r7, #12]
}
 8015362:	4618      	mov	r0, r3
 8015364:	3714      	adds	r7, #20
 8015366:	46bd      	mov	sp, r7
 8015368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536c:	4770      	bx	lr

0801536e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 801536e:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8015372:	b085      	sub	sp, #20
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	3307      	adds	r3, #7
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	b2db      	uxtb	r3, r3
 8015380:	f04f 0400 	mov.w	r4, #0
 8015384:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 8015388:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801538c:	f04f 0b00 	mov.w	fp, #0
 8015390:	f04f 0c00 	mov.w	ip, #0
 8015394:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8015398:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 801539c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80153a0:	687a      	ldr	r2, [r7, #4]
 80153a2:	3206      	adds	r2, #6
 80153a4:	7812      	ldrb	r2, [r2, #0]
 80153a6:	b2d1      	uxtb	r1, r2
 80153a8:	f04f 0200 	mov.w	r2, #0
 80153ac:	ea4b 0301 	orr.w	r3, fp, r1
 80153b0:	ea4c 0402 	orr.w	r4, ip, r2
 80153b4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 80153b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80153bc:	f04f 0b00 	mov.w	fp, #0
 80153c0:	f04f 0c00 	mov.w	ip, #0
 80153c4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80153c8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80153cc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80153d0:	687a      	ldr	r2, [r7, #4]
 80153d2:	3205      	adds	r2, #5
 80153d4:	7812      	ldrb	r2, [r2, #0]
 80153d6:	b2d1      	uxtb	r1, r2
 80153d8:	f04f 0200 	mov.w	r2, #0
 80153dc:	ea4b 0301 	orr.w	r3, fp, r1
 80153e0:	ea4c 0402 	orr.w	r4, ip, r2
 80153e4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 80153e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80153ec:	f04f 0b00 	mov.w	fp, #0
 80153f0:	f04f 0c00 	mov.w	ip, #0
 80153f4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80153f8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80153fc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8015400:	687a      	ldr	r2, [r7, #4]
 8015402:	3204      	adds	r2, #4
 8015404:	7812      	ldrb	r2, [r2, #0]
 8015406:	b2d1      	uxtb	r1, r2
 8015408:	f04f 0200 	mov.w	r2, #0
 801540c:	ea4b 0301 	orr.w	r3, fp, r1
 8015410:	ea4c 0402 	orr.w	r4, ip, r2
 8015414:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8015418:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801541c:	f04f 0b00 	mov.w	fp, #0
 8015420:	f04f 0c00 	mov.w	ip, #0
 8015424:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8015428:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 801542c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8015430:	687a      	ldr	r2, [r7, #4]
 8015432:	3203      	adds	r2, #3
 8015434:	7812      	ldrb	r2, [r2, #0]
 8015436:	b2d1      	uxtb	r1, r2
 8015438:	f04f 0200 	mov.w	r2, #0
 801543c:	ea4b 0301 	orr.w	r3, fp, r1
 8015440:	ea4c 0402 	orr.w	r4, ip, r2
 8015444:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8015448:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801544c:	f04f 0b00 	mov.w	fp, #0
 8015450:	f04f 0c00 	mov.w	ip, #0
 8015454:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8015458:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 801545c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8015460:	687a      	ldr	r2, [r7, #4]
 8015462:	3202      	adds	r2, #2
 8015464:	7812      	ldrb	r2, [r2, #0]
 8015466:	b2d1      	uxtb	r1, r2
 8015468:	f04f 0200 	mov.w	r2, #0
 801546c:	ea4b 0301 	orr.w	r3, fp, r1
 8015470:	ea4c 0402 	orr.w	r4, ip, r2
 8015474:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 8015478:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801547c:	f04f 0b00 	mov.w	fp, #0
 8015480:	f04f 0c00 	mov.w	ip, #0
 8015484:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8015488:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 801548c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8015490:	687a      	ldr	r2, [r7, #4]
 8015492:	3201      	adds	r2, #1
 8015494:	7812      	ldrb	r2, [r2, #0]
 8015496:	b2d1      	uxtb	r1, r2
 8015498:	f04f 0200 	mov.w	r2, #0
 801549c:	ea4b 0301 	orr.w	r3, fp, r1
 80154a0:	ea4c 0402 	orr.w	r4, ip, r2
 80154a4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 80154a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80154ac:	f04f 0b00 	mov.w	fp, #0
 80154b0:	f04f 0c00 	mov.w	ip, #0
 80154b4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80154b8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80154bc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80154c0:	687a      	ldr	r2, [r7, #4]
 80154c2:	7812      	ldrb	r2, [r2, #0]
 80154c4:	b2d1      	uxtb	r1, r2
 80154c6:	f04f 0200 	mov.w	r2, #0
 80154ca:	ea4b 0301 	orr.w	r3, fp, r1
 80154ce:	ea4c 0402 	orr.w	r4, ip, r2
 80154d2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 80154d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 80154da:	4618      	mov	r0, r3
 80154dc:	4621      	mov	r1, r4
 80154de:	3714      	adds	r7, #20
 80154e0:	46bd      	mov	sp, r7
 80154e2:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80154e6:	4770      	bx	lr

080154e8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80154e8:	b480      	push	{r7}
 80154ea:	b083      	sub	sp, #12
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	460b      	mov	r3, r1
 80154f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	1c5a      	adds	r2, r3, #1
 80154f8:	607a      	str	r2, [r7, #4]
 80154fa:	887a      	ldrh	r2, [r7, #2]
 80154fc:	b2d2      	uxtb	r2, r2
 80154fe:	701a      	strb	r2, [r3, #0]
 8015500:	887b      	ldrh	r3, [r7, #2]
 8015502:	0a1b      	lsrs	r3, r3, #8
 8015504:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	1c5a      	adds	r2, r3, #1
 801550a:	607a      	str	r2, [r7, #4]
 801550c:	887a      	ldrh	r2, [r7, #2]
 801550e:	b2d2      	uxtb	r2, r2
 8015510:	701a      	strb	r2, [r3, #0]
}
 8015512:	bf00      	nop
 8015514:	370c      	adds	r7, #12
 8015516:	46bd      	mov	sp, r7
 8015518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551c:	4770      	bx	lr

0801551e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801551e:	b480      	push	{r7}
 8015520:	b083      	sub	sp, #12
 8015522:	af00      	add	r7, sp, #0
 8015524:	6078      	str	r0, [r7, #4]
 8015526:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	1c5a      	adds	r2, r3, #1
 801552c:	607a      	str	r2, [r7, #4]
 801552e:	683a      	ldr	r2, [r7, #0]
 8015530:	b2d2      	uxtb	r2, r2
 8015532:	701a      	strb	r2, [r3, #0]
 8015534:	683b      	ldr	r3, [r7, #0]
 8015536:	0a1b      	lsrs	r3, r3, #8
 8015538:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	1c5a      	adds	r2, r3, #1
 801553e:	607a      	str	r2, [r7, #4]
 8015540:	683a      	ldr	r2, [r7, #0]
 8015542:	b2d2      	uxtb	r2, r2
 8015544:	701a      	strb	r2, [r3, #0]
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	0a1b      	lsrs	r3, r3, #8
 801554a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	1c5a      	adds	r2, r3, #1
 8015550:	607a      	str	r2, [r7, #4]
 8015552:	683a      	ldr	r2, [r7, #0]
 8015554:	b2d2      	uxtb	r2, r2
 8015556:	701a      	strb	r2, [r3, #0]
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	0a1b      	lsrs	r3, r3, #8
 801555c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	1c5a      	adds	r2, r3, #1
 8015562:	607a      	str	r2, [r7, #4]
 8015564:	683a      	ldr	r2, [r7, #0]
 8015566:	b2d2      	uxtb	r2, r2
 8015568:	701a      	strb	r2, [r3, #0]
}
 801556a:	bf00      	nop
 801556c:	370c      	adds	r7, #12
 801556e:	46bd      	mov	sp, r7
 8015570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015574:	4770      	bx	lr

08015576 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8015576:	b490      	push	{r4, r7}
 8015578:	b084      	sub	sp, #16
 801557a:	af00      	add	r7, sp, #0
 801557c:	60f8      	str	r0, [r7, #12]
 801557e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	1c5a      	adds	r2, r3, #1
 8015586:	60fa      	str	r2, [r7, #12]
 8015588:	783a      	ldrb	r2, [r7, #0]
 801558a:	701a      	strb	r2, [r3, #0]
 801558c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015590:	f04f 0300 	mov.w	r3, #0
 8015594:	f04f 0400 	mov.w	r4, #0
 8015598:	0a0b      	lsrs	r3, r1, #8
 801559a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801559e:	0a14      	lsrs	r4, r2, #8
 80155a0:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	1c5a      	adds	r2, r3, #1
 80155a8:	60fa      	str	r2, [r7, #12]
 80155aa:	783a      	ldrb	r2, [r7, #0]
 80155ac:	701a      	strb	r2, [r3, #0]
 80155ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80155b2:	f04f 0300 	mov.w	r3, #0
 80155b6:	f04f 0400 	mov.w	r4, #0
 80155ba:	0a0b      	lsrs	r3, r1, #8
 80155bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80155c0:	0a14      	lsrs	r4, r2, #8
 80155c2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	1c5a      	adds	r2, r3, #1
 80155ca:	60fa      	str	r2, [r7, #12]
 80155cc:	783a      	ldrb	r2, [r7, #0]
 80155ce:	701a      	strb	r2, [r3, #0]
 80155d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80155d4:	f04f 0300 	mov.w	r3, #0
 80155d8:	f04f 0400 	mov.w	r4, #0
 80155dc:	0a0b      	lsrs	r3, r1, #8
 80155de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80155e2:	0a14      	lsrs	r4, r2, #8
 80155e4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	1c5a      	adds	r2, r3, #1
 80155ec:	60fa      	str	r2, [r7, #12]
 80155ee:	783a      	ldrb	r2, [r7, #0]
 80155f0:	701a      	strb	r2, [r3, #0]
 80155f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80155f6:	f04f 0300 	mov.w	r3, #0
 80155fa:	f04f 0400 	mov.w	r4, #0
 80155fe:	0a0b      	lsrs	r3, r1, #8
 8015600:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015604:	0a14      	lsrs	r4, r2, #8
 8015606:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	1c5a      	adds	r2, r3, #1
 801560e:	60fa      	str	r2, [r7, #12]
 8015610:	783a      	ldrb	r2, [r7, #0]
 8015612:	701a      	strb	r2, [r3, #0]
 8015614:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015618:	f04f 0300 	mov.w	r3, #0
 801561c:	f04f 0400 	mov.w	r4, #0
 8015620:	0a0b      	lsrs	r3, r1, #8
 8015622:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015626:	0a14      	lsrs	r4, r2, #8
 8015628:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	1c5a      	adds	r2, r3, #1
 8015630:	60fa      	str	r2, [r7, #12]
 8015632:	783a      	ldrb	r2, [r7, #0]
 8015634:	701a      	strb	r2, [r3, #0]
 8015636:	e9d7 1200 	ldrd	r1, r2, [r7]
 801563a:	f04f 0300 	mov.w	r3, #0
 801563e:	f04f 0400 	mov.w	r4, #0
 8015642:	0a0b      	lsrs	r3, r1, #8
 8015644:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015648:	0a14      	lsrs	r4, r2, #8
 801564a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	1c5a      	adds	r2, r3, #1
 8015652:	60fa      	str	r2, [r7, #12]
 8015654:	783a      	ldrb	r2, [r7, #0]
 8015656:	701a      	strb	r2, [r3, #0]
 8015658:	e9d7 1200 	ldrd	r1, r2, [r7]
 801565c:	f04f 0300 	mov.w	r3, #0
 8015660:	f04f 0400 	mov.w	r4, #0
 8015664:	0a0b      	lsrs	r3, r1, #8
 8015666:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801566a:	0a14      	lsrs	r4, r2, #8
 801566c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	1c5a      	adds	r2, r3, #1
 8015674:	60fa      	str	r2, [r7, #12]
 8015676:	783a      	ldrb	r2, [r7, #0]
 8015678:	701a      	strb	r2, [r3, #0]
}
 801567a:	bf00      	nop
 801567c:	3710      	adds	r7, #16
 801567e:	46bd      	mov	sp, r7
 8015680:	bc90      	pop	{r4, r7}
 8015682:	4770      	bx	lr

08015684 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015684:	b480      	push	{r7}
 8015686:	b087      	sub	sp, #28
 8015688:	af00      	add	r7, sp, #0
 801568a:	60f8      	str	r0, [r7, #12]
 801568c:	60b9      	str	r1, [r7, #8]
 801568e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d00d      	beq.n	80156ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801569e:	693a      	ldr	r2, [r7, #16]
 80156a0:	1c53      	adds	r3, r2, #1
 80156a2:	613b      	str	r3, [r7, #16]
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	1c59      	adds	r1, r3, #1
 80156a8:	6179      	str	r1, [r7, #20]
 80156aa:	7812      	ldrb	r2, [r2, #0]
 80156ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	3b01      	subs	r3, #1
 80156b2:	607b      	str	r3, [r7, #4]
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d1f1      	bne.n	801569e <mem_cpy+0x1a>
	}
}
 80156ba:	bf00      	nop
 80156bc:	371c      	adds	r7, #28
 80156be:	46bd      	mov	sp, r7
 80156c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c4:	4770      	bx	lr

080156c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80156c6:	b480      	push	{r7}
 80156c8:	b087      	sub	sp, #28
 80156ca:	af00      	add	r7, sp, #0
 80156cc:	60f8      	str	r0, [r7, #12]
 80156ce:	60b9      	str	r1, [r7, #8]
 80156d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	1c5a      	adds	r2, r3, #1
 80156da:	617a      	str	r2, [r7, #20]
 80156dc:	68ba      	ldr	r2, [r7, #8]
 80156de:	b2d2      	uxtb	r2, r2
 80156e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	3b01      	subs	r3, #1
 80156e6:	607b      	str	r3, [r7, #4]
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d1f3      	bne.n	80156d6 <mem_set+0x10>
}
 80156ee:	bf00      	nop
 80156f0:	371c      	adds	r7, #28
 80156f2:	46bd      	mov	sp, r7
 80156f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f8:	4770      	bx	lr

080156fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80156fa:	b480      	push	{r7}
 80156fc:	b089      	sub	sp, #36	; 0x24
 80156fe:	af00      	add	r7, sp, #0
 8015700:	60f8      	str	r0, [r7, #12]
 8015702:	60b9      	str	r1, [r7, #8]
 8015704:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	61fb      	str	r3, [r7, #28]
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801570e:	2300      	movs	r3, #0
 8015710:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015712:	69fb      	ldr	r3, [r7, #28]
 8015714:	1c5a      	adds	r2, r3, #1
 8015716:	61fa      	str	r2, [r7, #28]
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	4619      	mov	r1, r3
 801571c:	69bb      	ldr	r3, [r7, #24]
 801571e:	1c5a      	adds	r2, r3, #1
 8015720:	61ba      	str	r2, [r7, #24]
 8015722:	781b      	ldrb	r3, [r3, #0]
 8015724:	1acb      	subs	r3, r1, r3
 8015726:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	3b01      	subs	r3, #1
 801572c:	607b      	str	r3, [r7, #4]
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d002      	beq.n	801573a <mem_cmp+0x40>
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d0eb      	beq.n	8015712 <mem_cmp+0x18>

	return r;
 801573a:	697b      	ldr	r3, [r7, #20]
}
 801573c:	4618      	mov	r0, r3
 801573e:	3724      	adds	r7, #36	; 0x24
 8015740:	46bd      	mov	sp, r7
 8015742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015746:	4770      	bx	lr

08015748 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8015748:	b480      	push	{r7}
 801574a:	b083      	sub	sp, #12
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
 8015750:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015752:	e002      	b.n	801575a <chk_chr+0x12>
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	3301      	adds	r3, #1
 8015758:	607b      	str	r3, [r7, #4]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	781b      	ldrb	r3, [r3, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d005      	beq.n	801576e <chk_chr+0x26>
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	781b      	ldrb	r3, [r3, #0]
 8015766:	461a      	mov	r2, r3
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	4293      	cmp	r3, r2
 801576c:	d1f2      	bne.n	8015754 <chk_chr+0xc>
	return *str;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	781b      	ldrb	r3, [r3, #0]
}
 8015772:	4618      	mov	r0, r3
 8015774:	370c      	adds	r7, #12
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr
	...

08015780 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015780:	b480      	push	{r7}
 8015782:	b085      	sub	sp, #20
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801578a:	2300      	movs	r3, #0
 801578c:	60bb      	str	r3, [r7, #8]
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	60fb      	str	r3, [r7, #12]
 8015792:	e029      	b.n	80157e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8015794:	4a27      	ldr	r2, [pc, #156]	; (8015834 <chk_lock+0xb4>)
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	011b      	lsls	r3, r3, #4
 801579a:	4413      	add	r3, r2
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d01d      	beq.n	80157de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80157a2:	4a24      	ldr	r2, [pc, #144]	; (8015834 <chk_lock+0xb4>)
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	011b      	lsls	r3, r3, #4
 80157a8:	4413      	add	r3, r2
 80157aa:	681a      	ldr	r2, [r3, #0]
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d116      	bne.n	80157e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80157b4:	4a1f      	ldr	r2, [pc, #124]	; (8015834 <chk_lock+0xb4>)
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	011b      	lsls	r3, r3, #4
 80157ba:	4413      	add	r3, r2
 80157bc:	3304      	adds	r3, #4
 80157be:	681a      	ldr	r2, [r3, #0]
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80157c4:	429a      	cmp	r2, r3
 80157c6:	d10c      	bne.n	80157e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80157c8:	4a1a      	ldr	r2, [pc, #104]	; (8015834 <chk_lock+0xb4>)
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	011b      	lsls	r3, r3, #4
 80157ce:	4413      	add	r3, r2
 80157d0:	3308      	adds	r3, #8
 80157d2:	681a      	ldr	r2, [r3, #0]
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80157d8:	429a      	cmp	r2, r3
 80157da:	d102      	bne.n	80157e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80157dc:	e007      	b.n	80157ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80157de:	2301      	movs	r3, #1
 80157e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	3301      	adds	r3, #1
 80157e6:	60fb      	str	r3, [r7, #12]
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	2b01      	cmp	r3, #1
 80157ec:	d9d2      	bls.n	8015794 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2b02      	cmp	r3, #2
 80157f2:	d109      	bne.n	8015808 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d102      	bne.n	8015800 <chk_lock+0x80>
 80157fa:	683b      	ldr	r3, [r7, #0]
 80157fc:	2b02      	cmp	r3, #2
 80157fe:	d101      	bne.n	8015804 <chk_lock+0x84>
 8015800:	2300      	movs	r3, #0
 8015802:	e010      	b.n	8015826 <chk_lock+0xa6>
 8015804:	2312      	movs	r3, #18
 8015806:	e00e      	b.n	8015826 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015808:	683b      	ldr	r3, [r7, #0]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d108      	bne.n	8015820 <chk_lock+0xa0>
 801580e:	4a09      	ldr	r2, [pc, #36]	; (8015834 <chk_lock+0xb4>)
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	011b      	lsls	r3, r3, #4
 8015814:	4413      	add	r3, r2
 8015816:	330c      	adds	r3, #12
 8015818:	881b      	ldrh	r3, [r3, #0]
 801581a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801581e:	d101      	bne.n	8015824 <chk_lock+0xa4>
 8015820:	2310      	movs	r3, #16
 8015822:	e000      	b.n	8015826 <chk_lock+0xa6>
 8015824:	2300      	movs	r3, #0
}
 8015826:	4618      	mov	r0, r3
 8015828:	3714      	adds	r7, #20
 801582a:	46bd      	mov	sp, r7
 801582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015830:	4770      	bx	lr
 8015832:	bf00      	nop
 8015834:	240002dc 	.word	0x240002dc

08015838 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015838:	b480      	push	{r7}
 801583a:	b083      	sub	sp, #12
 801583c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801583e:	2300      	movs	r3, #0
 8015840:	607b      	str	r3, [r7, #4]
 8015842:	e002      	b.n	801584a <enq_lock+0x12>
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	3301      	adds	r3, #1
 8015848:	607b      	str	r3, [r7, #4]
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2b01      	cmp	r3, #1
 801584e:	d806      	bhi.n	801585e <enq_lock+0x26>
 8015850:	4a09      	ldr	r2, [pc, #36]	; (8015878 <enq_lock+0x40>)
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	011b      	lsls	r3, r3, #4
 8015856:	4413      	add	r3, r2
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d1f2      	bne.n	8015844 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	2b02      	cmp	r3, #2
 8015862:	bf14      	ite	ne
 8015864:	2301      	movne	r3, #1
 8015866:	2300      	moveq	r3, #0
 8015868:	b2db      	uxtb	r3, r3
}
 801586a:	4618      	mov	r0, r3
 801586c:	370c      	adds	r7, #12
 801586e:	46bd      	mov	sp, r7
 8015870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015874:	4770      	bx	lr
 8015876:	bf00      	nop
 8015878:	240002dc 	.word	0x240002dc

0801587c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801587c:	b480      	push	{r7}
 801587e:	b085      	sub	sp, #20
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
 8015884:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015886:	2300      	movs	r3, #0
 8015888:	60fb      	str	r3, [r7, #12]
 801588a:	e01f      	b.n	80158cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801588c:	4a41      	ldr	r2, [pc, #260]	; (8015994 <inc_lock+0x118>)
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	011b      	lsls	r3, r3, #4
 8015892:	4413      	add	r3, r2
 8015894:	681a      	ldr	r2, [r3, #0]
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	429a      	cmp	r2, r3
 801589c:	d113      	bne.n	80158c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801589e:	4a3d      	ldr	r2, [pc, #244]	; (8015994 <inc_lock+0x118>)
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	011b      	lsls	r3, r3, #4
 80158a4:	4413      	add	r3, r2
 80158a6:	3304      	adds	r3, #4
 80158a8:	681a      	ldr	r2, [r3, #0]
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d109      	bne.n	80158c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80158b2:	4a38      	ldr	r2, [pc, #224]	; (8015994 <inc_lock+0x118>)
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	011b      	lsls	r3, r3, #4
 80158b8:	4413      	add	r3, r2
 80158ba:	3308      	adds	r3, #8
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80158c2:	429a      	cmp	r2, r3
 80158c4:	d006      	beq.n	80158d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	3301      	adds	r3, #1
 80158ca:	60fb      	str	r3, [r7, #12]
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	2b01      	cmp	r3, #1
 80158d0:	d9dc      	bls.n	801588c <inc_lock+0x10>
 80158d2:	e000      	b.n	80158d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80158d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	2b02      	cmp	r3, #2
 80158da:	d132      	bne.n	8015942 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80158dc:	2300      	movs	r3, #0
 80158de:	60fb      	str	r3, [r7, #12]
 80158e0:	e002      	b.n	80158e8 <inc_lock+0x6c>
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	3301      	adds	r3, #1
 80158e6:	60fb      	str	r3, [r7, #12]
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	2b01      	cmp	r3, #1
 80158ec:	d806      	bhi.n	80158fc <inc_lock+0x80>
 80158ee:	4a29      	ldr	r2, [pc, #164]	; (8015994 <inc_lock+0x118>)
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	011b      	lsls	r3, r3, #4
 80158f4:	4413      	add	r3, r2
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d1f2      	bne.n	80158e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	2b02      	cmp	r3, #2
 8015900:	d101      	bne.n	8015906 <inc_lock+0x8a>
 8015902:	2300      	movs	r3, #0
 8015904:	e040      	b.n	8015988 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	681a      	ldr	r2, [r3, #0]
 801590a:	4922      	ldr	r1, [pc, #136]	; (8015994 <inc_lock+0x118>)
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	011b      	lsls	r3, r3, #4
 8015910:	440b      	add	r3, r1
 8015912:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	689a      	ldr	r2, [r3, #8]
 8015918:	491e      	ldr	r1, [pc, #120]	; (8015994 <inc_lock+0x118>)
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	011b      	lsls	r3, r3, #4
 801591e:	440b      	add	r3, r1
 8015920:	3304      	adds	r3, #4
 8015922:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015928:	491a      	ldr	r1, [pc, #104]	; (8015994 <inc_lock+0x118>)
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	011b      	lsls	r3, r3, #4
 801592e:	440b      	add	r3, r1
 8015930:	3308      	adds	r3, #8
 8015932:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015934:	4a17      	ldr	r2, [pc, #92]	; (8015994 <inc_lock+0x118>)
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	011b      	lsls	r3, r3, #4
 801593a:	4413      	add	r3, r2
 801593c:	330c      	adds	r3, #12
 801593e:	2200      	movs	r2, #0
 8015940:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d009      	beq.n	801595c <inc_lock+0xe0>
 8015948:	4a12      	ldr	r2, [pc, #72]	; (8015994 <inc_lock+0x118>)
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	011b      	lsls	r3, r3, #4
 801594e:	4413      	add	r3, r2
 8015950:	330c      	adds	r3, #12
 8015952:	881b      	ldrh	r3, [r3, #0]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d001      	beq.n	801595c <inc_lock+0xe0>
 8015958:	2300      	movs	r3, #0
 801595a:	e015      	b.n	8015988 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d108      	bne.n	8015974 <inc_lock+0xf8>
 8015962:	4a0c      	ldr	r2, [pc, #48]	; (8015994 <inc_lock+0x118>)
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	011b      	lsls	r3, r3, #4
 8015968:	4413      	add	r3, r2
 801596a:	330c      	adds	r3, #12
 801596c:	881b      	ldrh	r3, [r3, #0]
 801596e:	3301      	adds	r3, #1
 8015970:	b29a      	uxth	r2, r3
 8015972:	e001      	b.n	8015978 <inc_lock+0xfc>
 8015974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015978:	4906      	ldr	r1, [pc, #24]	; (8015994 <inc_lock+0x118>)
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	011b      	lsls	r3, r3, #4
 801597e:	440b      	add	r3, r1
 8015980:	330c      	adds	r3, #12
 8015982:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	3301      	adds	r3, #1
}
 8015988:	4618      	mov	r0, r3
 801598a:	3714      	adds	r7, #20
 801598c:	46bd      	mov	sp, r7
 801598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015992:	4770      	bx	lr
 8015994:	240002dc 	.word	0x240002dc

08015998 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015998:	b480      	push	{r7}
 801599a:	b085      	sub	sp, #20
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	3b01      	subs	r3, #1
 80159a4:	607b      	str	r3, [r7, #4]
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	2b01      	cmp	r3, #1
 80159aa:	d825      	bhi.n	80159f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80159ac:	4a17      	ldr	r2, [pc, #92]	; (8015a0c <dec_lock+0x74>)
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	011b      	lsls	r3, r3, #4
 80159b2:	4413      	add	r3, r2
 80159b4:	330c      	adds	r3, #12
 80159b6:	881b      	ldrh	r3, [r3, #0]
 80159b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80159ba:	89fb      	ldrh	r3, [r7, #14]
 80159bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80159c0:	d101      	bne.n	80159c6 <dec_lock+0x2e>
 80159c2:	2300      	movs	r3, #0
 80159c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80159c6:	89fb      	ldrh	r3, [r7, #14]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d002      	beq.n	80159d2 <dec_lock+0x3a>
 80159cc:	89fb      	ldrh	r3, [r7, #14]
 80159ce:	3b01      	subs	r3, #1
 80159d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80159d2:	4a0e      	ldr	r2, [pc, #56]	; (8015a0c <dec_lock+0x74>)
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	011b      	lsls	r3, r3, #4
 80159d8:	4413      	add	r3, r2
 80159da:	330c      	adds	r3, #12
 80159dc:	89fa      	ldrh	r2, [r7, #14]
 80159de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80159e0:	89fb      	ldrh	r3, [r7, #14]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d105      	bne.n	80159f2 <dec_lock+0x5a>
 80159e6:	4a09      	ldr	r2, [pc, #36]	; (8015a0c <dec_lock+0x74>)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	011b      	lsls	r3, r3, #4
 80159ec:	4413      	add	r3, r2
 80159ee:	2200      	movs	r2, #0
 80159f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80159f2:	2300      	movs	r3, #0
 80159f4:	737b      	strb	r3, [r7, #13]
 80159f6:	e001      	b.n	80159fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80159f8:	2302      	movs	r3, #2
 80159fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80159fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	3714      	adds	r7, #20
 8015a02:	46bd      	mov	sp, r7
 8015a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a08:	4770      	bx	lr
 8015a0a:	bf00      	nop
 8015a0c:	240002dc 	.word	0x240002dc

08015a10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015a10:	b480      	push	{r7}
 8015a12:	b085      	sub	sp, #20
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015a18:	2300      	movs	r3, #0
 8015a1a:	60fb      	str	r3, [r7, #12]
 8015a1c:	e010      	b.n	8015a40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015a1e:	4a0d      	ldr	r2, [pc, #52]	; (8015a54 <clear_lock+0x44>)
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	011b      	lsls	r3, r3, #4
 8015a24:	4413      	add	r3, r2
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	687a      	ldr	r2, [r7, #4]
 8015a2a:	429a      	cmp	r2, r3
 8015a2c:	d105      	bne.n	8015a3a <clear_lock+0x2a>
 8015a2e:	4a09      	ldr	r2, [pc, #36]	; (8015a54 <clear_lock+0x44>)
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	011b      	lsls	r3, r3, #4
 8015a34:	4413      	add	r3, r2
 8015a36:	2200      	movs	r2, #0
 8015a38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	3301      	adds	r3, #1
 8015a3e:	60fb      	str	r3, [r7, #12]
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	2b01      	cmp	r3, #1
 8015a44:	d9eb      	bls.n	8015a1e <clear_lock+0xe>
	}
}
 8015a46:	bf00      	nop
 8015a48:	3714      	adds	r7, #20
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a50:	4770      	bx	lr
 8015a52:	bf00      	nop
 8015a54:	240002dc 	.word	0x240002dc

08015a58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b086      	sub	sp, #24
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015a60:	2300      	movs	r3, #0
 8015a62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	78db      	ldrb	r3, [r3, #3]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d034      	beq.n	8015ad6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	7858      	ldrb	r0, [r3, #1]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	697a      	ldr	r2, [r7, #20]
 8015a80:	f7ff fbfc 	bl	801527c <disk_write>
 8015a84:	4603      	mov	r3, r0
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d002      	beq.n	8015a90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015a8a:	2301      	movs	r3, #1
 8015a8c:	73fb      	strb	r3, [r7, #15]
 8015a8e:	e022      	b.n	8015ad6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2200      	movs	r2, #0
 8015a94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a9a:	697a      	ldr	r2, [r7, #20]
 8015a9c:	1ad2      	subs	r2, r2, r3
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa2:	429a      	cmp	r2, r3
 8015aa4:	d217      	bcs.n	8015ad6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	789b      	ldrb	r3, [r3, #2]
 8015aaa:	613b      	str	r3, [r7, #16]
 8015aac:	e010      	b.n	8015ad0 <sync_window+0x78>
					wsect += fs->fsize;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ab2:	697a      	ldr	r2, [r7, #20]
 8015ab4:	4413      	add	r3, r2
 8015ab6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	7858      	ldrb	r0, [r3, #1]
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	697a      	ldr	r2, [r7, #20]
 8015ac6:	f7ff fbd9 	bl	801527c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	3b01      	subs	r3, #1
 8015ace:	613b      	str	r3, [r7, #16]
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	2b01      	cmp	r3, #1
 8015ad4:	d8eb      	bhi.n	8015aae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3718      	adds	r7, #24
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}

08015ae0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b084      	sub	sp, #16
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015aea:	2300      	movs	r3, #0
 8015aec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015af2:	683a      	ldr	r2, [r7, #0]
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d01b      	beq.n	8015b30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f7ff ffad 	bl	8015a58 <sync_window>
 8015afe:	4603      	mov	r3, r0
 8015b00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015b02:	7bfb      	ldrb	r3, [r7, #15]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d113      	bne.n	8015b30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	7858      	ldrb	r0, [r3, #1]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015b12:	2301      	movs	r3, #1
 8015b14:	683a      	ldr	r2, [r7, #0]
 8015b16:	f7ff fb91 	bl	801523c <disk_read>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d004      	beq.n	8015b2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015b20:	f04f 33ff 	mov.w	r3, #4294967295
 8015b24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015b26:	2301      	movs	r3, #1
 8015b28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	683a      	ldr	r2, [r7, #0]
 8015b2e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8015b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3710      	adds	r7, #16
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}
	...

08015b3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b084      	sub	sp, #16
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f7ff ff87 	bl	8015a58 <sync_window>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015b4e:	7bfb      	ldrb	r3, [r7, #15]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d159      	bne.n	8015c08 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	781b      	ldrb	r3, [r3, #0]
 8015b58:	2b03      	cmp	r3, #3
 8015b5a:	d149      	bne.n	8015bf0 <sync_fs+0xb4>
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	791b      	ldrb	r3, [r3, #4]
 8015b60:	2b01      	cmp	r3, #1
 8015b62:	d145      	bne.n	8015bf0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	899b      	ldrh	r3, [r3, #12]
 8015b6e:	461a      	mov	r2, r3
 8015b70:	2100      	movs	r1, #0
 8015b72:	f7ff fda8 	bl	80156c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	333c      	adds	r3, #60	; 0x3c
 8015b7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015b7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7ff fcb0 	bl	80154e8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	333c      	adds	r3, #60	; 0x3c
 8015b8c:	4921      	ldr	r1, [pc, #132]	; (8015c14 <sync_fs+0xd8>)
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f7ff fcc5 	bl	801551e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	333c      	adds	r3, #60	; 0x3c
 8015b98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015b9c:	491e      	ldr	r1, [pc, #120]	; (8015c18 <sync_fs+0xdc>)
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f7ff fcbd 	bl	801551e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	333c      	adds	r3, #60	; 0x3c
 8015ba8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	69db      	ldr	r3, [r3, #28]
 8015bb0:	4619      	mov	r1, r3
 8015bb2:	4610      	mov	r0, r2
 8015bb4:	f7ff fcb3 	bl	801551e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	333c      	adds	r3, #60	; 0x3c
 8015bbc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	699b      	ldr	r3, [r3, #24]
 8015bc4:	4619      	mov	r1, r3
 8015bc6:	4610      	mov	r0, r2
 8015bc8:	f7ff fca9 	bl	801551e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bd0:	1c5a      	adds	r2, r3, #1
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	7858      	ldrb	r0, [r3, #1]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015be4:	2301      	movs	r3, #1
 8015be6:	f7ff fb49 	bl	801527c <disk_write>
			fs->fsi_flag = 0;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2200      	movs	r2, #0
 8015bee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	785b      	ldrb	r3, [r3, #1]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	2100      	movs	r1, #0
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7ff fb5f 	bl	80152bc <disk_ioctl>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d001      	beq.n	8015c08 <sync_fs+0xcc>
 8015c04:	2301      	movs	r3, #1
 8015c06:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	3710      	adds	r7, #16
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}
 8015c12:	bf00      	nop
 8015c14:	41615252 	.word	0x41615252
 8015c18:	61417272 	.word	0x61417272

08015c1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015c1c:	b480      	push	{r7}
 8015c1e:	b083      	sub	sp, #12
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
 8015c24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	3b02      	subs	r3, #2
 8015c2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	6a1b      	ldr	r3, [r3, #32]
 8015c30:	3b02      	subs	r3, #2
 8015c32:	683a      	ldr	r2, [r7, #0]
 8015c34:	429a      	cmp	r2, r3
 8015c36:	d301      	bcc.n	8015c3c <clust2sect+0x20>
 8015c38:	2300      	movs	r3, #0
 8015c3a:	e008      	b.n	8015c4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	895b      	ldrh	r3, [r3, #10]
 8015c40:	461a      	mov	r2, r3
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	fb03 f202 	mul.w	r2, r3, r2
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c4c:	4413      	add	r3, r2
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	370c      	adds	r7, #12
 8015c52:	46bd      	mov	sp, r7
 8015c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c58:	4770      	bx	lr
	...

08015c5c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015c5c:	b590      	push	{r4, r7, lr}
 8015c5e:	b089      	sub	sp, #36	; 0x24
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
 8015c64:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	2b01      	cmp	r3, #1
 8015c70:	d904      	bls.n	8015c7c <get_fat+0x20>
 8015c72:	69bb      	ldr	r3, [r7, #24]
 8015c74:	6a1b      	ldr	r3, [r3, #32]
 8015c76:	683a      	ldr	r2, [r7, #0]
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d302      	bcc.n	8015c82 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	61fb      	str	r3, [r7, #28]
 8015c80:	e13a      	b.n	8015ef8 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015c82:	f04f 33ff 	mov.w	r3, #4294967295
 8015c86:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8015c88:	69bb      	ldr	r3, [r7, #24]
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	3b01      	subs	r3, #1
 8015c8e:	2b03      	cmp	r3, #3
 8015c90:	f200 8126 	bhi.w	8015ee0 <get_fat+0x284>
 8015c94:	a201      	add	r2, pc, #4	; (adr r2, 8015c9c <get_fat+0x40>)
 8015c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c9a:	bf00      	nop
 8015c9c:	08015cad 	.word	0x08015cad
 8015ca0:	08015d5b 	.word	0x08015d5b
 8015ca4:	08015da7 	.word	0x08015da7
 8015ca8:	08015df7 	.word	0x08015df7
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	60fb      	str	r3, [r7, #12]
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	085b      	lsrs	r3, r3, #1
 8015cb4:	68fa      	ldr	r2, [r7, #12]
 8015cb6:	4413      	add	r3, r2
 8015cb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015cba:	69bb      	ldr	r3, [r7, #24]
 8015cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cbe:	69bb      	ldr	r3, [r7, #24]
 8015cc0:	899b      	ldrh	r3, [r3, #12]
 8015cc2:	4619      	mov	r1, r3
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8015cca:	4413      	add	r3, r2
 8015ccc:	4619      	mov	r1, r3
 8015cce:	69b8      	ldr	r0, [r7, #24]
 8015cd0:	f7ff ff06 	bl	8015ae0 <move_window>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	f040 8105 	bne.w	8015ee6 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	1c5a      	adds	r2, r3, #1
 8015ce0:	60fa      	str	r2, [r7, #12]
 8015ce2:	69ba      	ldr	r2, [r7, #24]
 8015ce4:	8992      	ldrh	r2, [r2, #12]
 8015ce6:	fbb3 f1f2 	udiv	r1, r3, r2
 8015cea:	fb02 f201 	mul.w	r2, r2, r1
 8015cee:	1a9b      	subs	r3, r3, r2
 8015cf0:	69ba      	ldr	r2, [r7, #24]
 8015cf2:	4413      	add	r3, r2
 8015cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015cf8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015cfa:	69bb      	ldr	r3, [r7, #24]
 8015cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cfe:	69bb      	ldr	r3, [r7, #24]
 8015d00:	899b      	ldrh	r3, [r3, #12]
 8015d02:	4619      	mov	r1, r3
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d0a:	4413      	add	r3, r2
 8015d0c:	4619      	mov	r1, r3
 8015d0e:	69b8      	ldr	r0, [r7, #24]
 8015d10:	f7ff fee6 	bl	8015ae0 <move_window>
 8015d14:	4603      	mov	r3, r0
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	f040 80e7 	bne.w	8015eea <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015d1c:	69bb      	ldr	r3, [r7, #24]
 8015d1e:	899b      	ldrh	r3, [r3, #12]
 8015d20:	461a      	mov	r2, r3
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	fbb3 f1f2 	udiv	r1, r3, r2
 8015d28:	fb02 f201 	mul.w	r2, r2, r1
 8015d2c:	1a9b      	subs	r3, r3, r2
 8015d2e:	69ba      	ldr	r2, [r7, #24]
 8015d30:	4413      	add	r3, r2
 8015d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d36:	021b      	lsls	r3, r3, #8
 8015d38:	461a      	mov	r2, r3
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	4313      	orrs	r3, r2
 8015d3e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	f003 0301 	and.w	r3, r3, #1
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d002      	beq.n	8015d50 <get_fat+0xf4>
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	091b      	lsrs	r3, r3, #4
 8015d4e:	e002      	b.n	8015d56 <get_fat+0xfa>
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015d56:	61fb      	str	r3, [r7, #28]
			break;
 8015d58:	e0ce      	b.n	8015ef8 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015d5a:	69bb      	ldr	r3, [r7, #24]
 8015d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d5e:	69bb      	ldr	r3, [r7, #24]
 8015d60:	899b      	ldrh	r3, [r3, #12]
 8015d62:	085b      	lsrs	r3, r3, #1
 8015d64:	b29b      	uxth	r3, r3
 8015d66:	4619      	mov	r1, r3
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d6e:	4413      	add	r3, r2
 8015d70:	4619      	mov	r1, r3
 8015d72:	69b8      	ldr	r0, [r7, #24]
 8015d74:	f7ff feb4 	bl	8015ae0 <move_window>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	f040 80b7 	bne.w	8015eee <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015d80:	69bb      	ldr	r3, [r7, #24]
 8015d82:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015d86:	683b      	ldr	r3, [r7, #0]
 8015d88:	005b      	lsls	r3, r3, #1
 8015d8a:	69ba      	ldr	r2, [r7, #24]
 8015d8c:	8992      	ldrh	r2, [r2, #12]
 8015d8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8015d92:	fb02 f200 	mul.w	r2, r2, r0
 8015d96:	1a9b      	subs	r3, r3, r2
 8015d98:	440b      	add	r3, r1
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7ff faac 	bl	80152f8 <ld_word>
 8015da0:	4603      	mov	r3, r0
 8015da2:	61fb      	str	r3, [r7, #28]
			break;
 8015da4:	e0a8      	b.n	8015ef8 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015da6:	69bb      	ldr	r3, [r7, #24]
 8015da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015daa:	69bb      	ldr	r3, [r7, #24]
 8015dac:	899b      	ldrh	r3, [r3, #12]
 8015dae:	089b      	lsrs	r3, r3, #2
 8015db0:	b29b      	uxth	r3, r3
 8015db2:	4619      	mov	r1, r3
 8015db4:	683b      	ldr	r3, [r7, #0]
 8015db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8015dba:	4413      	add	r3, r2
 8015dbc:	4619      	mov	r1, r3
 8015dbe:	69b8      	ldr	r0, [r7, #24]
 8015dc0:	f7ff fe8e 	bl	8015ae0 <move_window>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	f040 8093 	bne.w	8015ef2 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015dcc:	69bb      	ldr	r3, [r7, #24]
 8015dce:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	009b      	lsls	r3, r3, #2
 8015dd6:	69ba      	ldr	r2, [r7, #24]
 8015dd8:	8992      	ldrh	r2, [r2, #12]
 8015dda:	fbb3 f0f2 	udiv	r0, r3, r2
 8015dde:	fb02 f200 	mul.w	r2, r2, r0
 8015de2:	1a9b      	subs	r3, r3, r2
 8015de4:	440b      	add	r3, r1
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7ff fa9e 	bl	8015328 <ld_dword>
 8015dec:	4603      	mov	r3, r0
 8015dee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015df2:	61fb      	str	r3, [r7, #28]
			break;
 8015df4:	e080      	b.n	8015ef8 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8015dfc:	4323      	orrs	r3, r4
 8015dfe:	d06f      	beq.n	8015ee0 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	689b      	ldr	r3, [r3, #8]
 8015e04:	683a      	ldr	r2, [r7, #0]
 8015e06:	1ad3      	subs	r3, r2, r3
 8015e08:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8015e10:	f113 30ff 	adds.w	r0, r3, #4294967295
 8015e14:	f144 31ff 	adc.w	r1, r4, #4294967295
 8015e18:	69bb      	ldr	r3, [r7, #24]
 8015e1a:	899b      	ldrh	r3, [r3, #12]
 8015e1c:	b29b      	uxth	r3, r3
 8015e1e:	f04f 0400 	mov.w	r4, #0
 8015e22:	461a      	mov	r2, r3
 8015e24:	4623      	mov	r3, r4
 8015e26:	f7ea fa57 	bl	80002d8 <__aeabi_uldivmod>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	460c      	mov	r4, r1
 8015e2e:	461a      	mov	r2, r3
 8015e30:	69bb      	ldr	r3, [r7, #24]
 8015e32:	895b      	ldrh	r3, [r3, #10]
 8015e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e38:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	79db      	ldrb	r3, [r3, #7]
 8015e3e:	2b02      	cmp	r3, #2
 8015e40:	d10e      	bne.n	8015e60 <get_fat+0x204>
					if (cofs <= clen) {
 8015e42:	697a      	ldr	r2, [r7, #20]
 8015e44:	693b      	ldr	r3, [r7, #16]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d80a      	bhi.n	8015e60 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8015e4a:	697a      	ldr	r2, [r7, #20]
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	429a      	cmp	r2, r3
 8015e50:	d002      	beq.n	8015e58 <get_fat+0x1fc>
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	3301      	adds	r3, #1
 8015e56:	e001      	b.n	8015e5c <get_fat+0x200>
 8015e58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015e5c:	61fb      	str	r3, [r7, #28]
						break;
 8015e5e:	e04b      	b.n	8015ef8 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	79db      	ldrb	r3, [r3, #7]
 8015e64:	2b03      	cmp	r3, #3
 8015e66:	d108      	bne.n	8015e7a <get_fat+0x21e>
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	699b      	ldr	r3, [r3, #24]
 8015e6c:	697a      	ldr	r2, [r7, #20]
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	d203      	bcs.n	8015e7a <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	3301      	adds	r3, #1
 8015e76:	61fb      	str	r3, [r7, #28]
					break;
 8015e78:	e03e      	b.n	8015ef8 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	79db      	ldrb	r3, [r3, #7]
 8015e7e:	2b02      	cmp	r3, #2
 8015e80:	d02e      	beq.n	8015ee0 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	69db      	ldr	r3, [r3, #28]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d003      	beq.n	8015e92 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8015e8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015e8e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8015e90:	e032      	b.n	8015ef8 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015e92:	69bb      	ldr	r3, [r7, #24]
 8015e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e96:	69bb      	ldr	r3, [r7, #24]
 8015e98:	899b      	ldrh	r3, [r3, #12]
 8015e9a:	089b      	lsrs	r3, r3, #2
 8015e9c:	b29b      	uxth	r3, r3
 8015e9e:	4619      	mov	r1, r3
 8015ea0:	683b      	ldr	r3, [r7, #0]
 8015ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8015ea6:	4413      	add	r3, r2
 8015ea8:	4619      	mov	r1, r3
 8015eaa:	69b8      	ldr	r0, [r7, #24]
 8015eac:	f7ff fe18 	bl	8015ae0 <move_window>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d11f      	bne.n	8015ef6 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8015eb6:	69bb      	ldr	r3, [r7, #24]
 8015eb8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015ebc:	683b      	ldr	r3, [r7, #0]
 8015ebe:	009b      	lsls	r3, r3, #2
 8015ec0:	69ba      	ldr	r2, [r7, #24]
 8015ec2:	8992      	ldrh	r2, [r2, #12]
 8015ec4:	fbb3 f0f2 	udiv	r0, r3, r2
 8015ec8:	fb02 f200 	mul.w	r2, r2, r0
 8015ecc:	1a9b      	subs	r3, r3, r2
 8015ece:	440b      	add	r3, r1
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7ff fa29 	bl	8015328 <ld_dword>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015edc:	61fb      	str	r3, [r7, #28]
					break;
 8015ede:	e00b      	b.n	8015ef8 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	61fb      	str	r3, [r7, #28]
 8015ee4:	e008      	b.n	8015ef8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015ee6:	bf00      	nop
 8015ee8:	e006      	b.n	8015ef8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015eea:	bf00      	nop
 8015eec:	e004      	b.n	8015ef8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015eee:	bf00      	nop
 8015ef0:	e002      	b.n	8015ef8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015ef2:	bf00      	nop
 8015ef4:	e000      	b.n	8015ef8 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015ef6:	bf00      	nop
		}
	}

	return val;
 8015ef8:	69fb      	ldr	r3, [r7, #28]
}
 8015efa:	4618      	mov	r0, r3
 8015efc:	3724      	adds	r7, #36	; 0x24
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd90      	pop	{r4, r7, pc}
 8015f02:	bf00      	nop

08015f04 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015f04:	b590      	push	{r4, r7, lr}
 8015f06:	b089      	sub	sp, #36	; 0x24
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	60f8      	str	r0, [r7, #12]
 8015f0c:	60b9      	str	r1, [r7, #8]
 8015f0e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015f10:	2302      	movs	r3, #2
 8015f12:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	2b01      	cmp	r3, #1
 8015f18:	f240 8111 	bls.w	801613e <put_fat+0x23a>
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	6a1b      	ldr	r3, [r3, #32]
 8015f20:	68ba      	ldr	r2, [r7, #8]
 8015f22:	429a      	cmp	r2, r3
 8015f24:	f080 810b 	bcs.w	801613e <put_fat+0x23a>
		switch (fs->fs_type) {
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	781b      	ldrb	r3, [r3, #0]
 8015f2c:	3b01      	subs	r3, #1
 8015f2e:	2b03      	cmp	r3, #3
 8015f30:	f200 8105 	bhi.w	801613e <put_fat+0x23a>
 8015f34:	a201      	add	r2, pc, #4	; (adr r2, 8015f3c <put_fat+0x38>)
 8015f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f3a:	bf00      	nop
 8015f3c:	08015f4d 	.word	0x08015f4d
 8015f40:	08016051 	.word	0x08016051
 8015f44:	080160a7 	.word	0x080160a7
 8015f48:	080160a7 	.word	0x080160a7
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	61bb      	str	r3, [r7, #24]
 8015f50:	69bb      	ldr	r3, [r7, #24]
 8015f52:	085b      	lsrs	r3, r3, #1
 8015f54:	69ba      	ldr	r2, [r7, #24]
 8015f56:	4413      	add	r3, r2
 8015f58:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	899b      	ldrh	r3, [r3, #12]
 8015f62:	4619      	mov	r1, r3
 8015f64:	69bb      	ldr	r3, [r7, #24]
 8015f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f6a:	4413      	add	r3, r2
 8015f6c:	4619      	mov	r1, r3
 8015f6e:	68f8      	ldr	r0, [r7, #12]
 8015f70:	f7ff fdb6 	bl	8015ae0 <move_window>
 8015f74:	4603      	mov	r3, r0
 8015f76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015f78:	7ffb      	ldrb	r3, [r7, #31]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	f040 80d8 	bne.w	8016130 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015f86:	69bb      	ldr	r3, [r7, #24]
 8015f88:	1c5a      	adds	r2, r3, #1
 8015f8a:	61ba      	str	r2, [r7, #24]
 8015f8c:	68fa      	ldr	r2, [r7, #12]
 8015f8e:	8992      	ldrh	r2, [r2, #12]
 8015f90:	fbb3 f0f2 	udiv	r0, r3, r2
 8015f94:	fb02 f200 	mul.w	r2, r2, r0
 8015f98:	1a9b      	subs	r3, r3, r2
 8015f9a:	440b      	add	r3, r1
 8015f9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	f003 0301 	and.w	r3, r3, #1
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d00d      	beq.n	8015fc4 <put_fat+0xc0>
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	b25b      	sxtb	r3, r3
 8015fae:	f003 030f 	and.w	r3, r3, #15
 8015fb2:	b25a      	sxtb	r2, r3
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	b2db      	uxtb	r3, r3
 8015fb8:	011b      	lsls	r3, r3, #4
 8015fba:	b25b      	sxtb	r3, r3
 8015fbc:	4313      	orrs	r3, r2
 8015fbe:	b25b      	sxtb	r3, r3
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	e001      	b.n	8015fc8 <put_fat+0xc4>
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	b2db      	uxtb	r3, r3
 8015fc8:	697a      	ldr	r2, [r7, #20]
 8015fca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	2201      	movs	r2, #1
 8015fd0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	899b      	ldrh	r3, [r3, #12]
 8015fda:	4619      	mov	r1, r3
 8015fdc:	69bb      	ldr	r3, [r7, #24]
 8015fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8015fe2:	4413      	add	r3, r2
 8015fe4:	4619      	mov	r1, r3
 8015fe6:	68f8      	ldr	r0, [r7, #12]
 8015fe8:	f7ff fd7a 	bl	8015ae0 <move_window>
 8015fec:	4603      	mov	r3, r0
 8015fee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015ff0:	7ffb      	ldrb	r3, [r7, #31]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	f040 809e 	bne.w	8016134 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	899b      	ldrh	r3, [r3, #12]
 8016002:	461a      	mov	r2, r3
 8016004:	69bb      	ldr	r3, [r7, #24]
 8016006:	fbb3 f0f2 	udiv	r0, r3, r2
 801600a:	fb02 f200 	mul.w	r2, r2, r0
 801600e:	1a9b      	subs	r3, r3, r2
 8016010:	440b      	add	r3, r1
 8016012:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	f003 0301 	and.w	r3, r3, #1
 801601a:	2b00      	cmp	r3, #0
 801601c:	d003      	beq.n	8016026 <put_fat+0x122>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	091b      	lsrs	r3, r3, #4
 8016022:	b2db      	uxtb	r3, r3
 8016024:	e00e      	b.n	8016044 <put_fat+0x140>
 8016026:	697b      	ldr	r3, [r7, #20]
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	b25b      	sxtb	r3, r3
 801602c:	f023 030f 	bic.w	r3, r3, #15
 8016030:	b25a      	sxtb	r2, r3
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	0a1b      	lsrs	r3, r3, #8
 8016036:	b25b      	sxtb	r3, r3
 8016038:	f003 030f 	and.w	r3, r3, #15
 801603c:	b25b      	sxtb	r3, r3
 801603e:	4313      	orrs	r3, r2
 8016040:	b25b      	sxtb	r3, r3
 8016042:	b2db      	uxtb	r3, r3
 8016044:	697a      	ldr	r2, [r7, #20]
 8016046:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2201      	movs	r2, #1
 801604c:	70da      	strb	r2, [r3, #3]
			break;
 801604e:	e076      	b.n	801613e <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	899b      	ldrh	r3, [r3, #12]
 8016058:	085b      	lsrs	r3, r3, #1
 801605a:	b29b      	uxth	r3, r3
 801605c:	4619      	mov	r1, r3
 801605e:	68bb      	ldr	r3, [r7, #8]
 8016060:	fbb3 f3f1 	udiv	r3, r3, r1
 8016064:	4413      	add	r3, r2
 8016066:	4619      	mov	r1, r3
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f7ff fd39 	bl	8015ae0 <move_window>
 801606e:	4603      	mov	r3, r0
 8016070:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016072:	7ffb      	ldrb	r3, [r7, #31]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d15f      	bne.n	8016138 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	005b      	lsls	r3, r3, #1
 8016082:	68fa      	ldr	r2, [r7, #12]
 8016084:	8992      	ldrh	r2, [r2, #12]
 8016086:	fbb3 f0f2 	udiv	r0, r3, r2
 801608a:	fb02 f200 	mul.w	r2, r2, r0
 801608e:	1a9b      	subs	r3, r3, r2
 8016090:	440b      	add	r3, r1
 8016092:	687a      	ldr	r2, [r7, #4]
 8016094:	b292      	uxth	r2, r2
 8016096:	4611      	mov	r1, r2
 8016098:	4618      	mov	r0, r3
 801609a:	f7ff fa25 	bl	80154e8 <st_word>
			fs->wflag = 1;
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	2201      	movs	r2, #1
 80160a2:	70da      	strb	r2, [r3, #3]
			break;
 80160a4:	e04b      	b.n	801613e <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	899b      	ldrh	r3, [r3, #12]
 80160ae:	089b      	lsrs	r3, r3, #2
 80160b0:	b29b      	uxth	r3, r3
 80160b2:	4619      	mov	r1, r3
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80160ba:	4413      	add	r3, r2
 80160bc:	4619      	mov	r1, r3
 80160be:	68f8      	ldr	r0, [r7, #12]
 80160c0:	f7ff fd0e 	bl	8015ae0 <move_window>
 80160c4:	4603      	mov	r3, r0
 80160c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80160c8:	7ffb      	ldrb	r3, [r7, #31]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d136      	bne.n	801613c <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	781b      	ldrb	r3, [r3, #0]
 80160d2:	2b04      	cmp	r3, #4
 80160d4:	d017      	beq.n	8016106 <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	009b      	lsls	r3, r3, #2
 80160e6:	68fa      	ldr	r2, [r7, #12]
 80160e8:	8992      	ldrh	r2, [r2, #12]
 80160ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80160ee:	fb02 f200 	mul.w	r2, r2, r0
 80160f2:	1a9b      	subs	r3, r3, r2
 80160f4:	440b      	add	r3, r1
 80160f6:	4618      	mov	r0, r3
 80160f8:	f7ff f916 	bl	8015328 <ld_dword>
 80160fc:	4603      	mov	r3, r0
 80160fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016102:	4323      	orrs	r3, r4
 8016104:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801610c:	68bb      	ldr	r3, [r7, #8]
 801610e:	009b      	lsls	r3, r3, #2
 8016110:	68fa      	ldr	r2, [r7, #12]
 8016112:	8992      	ldrh	r2, [r2, #12]
 8016114:	fbb3 f0f2 	udiv	r0, r3, r2
 8016118:	fb02 f200 	mul.w	r2, r2, r0
 801611c:	1a9b      	subs	r3, r3, r2
 801611e:	440b      	add	r3, r1
 8016120:	6879      	ldr	r1, [r7, #4]
 8016122:	4618      	mov	r0, r3
 8016124:	f7ff f9fb 	bl	801551e <st_dword>
			fs->wflag = 1;
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	2201      	movs	r2, #1
 801612c:	70da      	strb	r2, [r3, #3]
			break;
 801612e:	e006      	b.n	801613e <put_fat+0x23a>
			if (res != FR_OK) break;
 8016130:	bf00      	nop
 8016132:	e004      	b.n	801613e <put_fat+0x23a>
			if (res != FR_OK) break;
 8016134:	bf00      	nop
 8016136:	e002      	b.n	801613e <put_fat+0x23a>
			if (res != FR_OK) break;
 8016138:	bf00      	nop
 801613a:	e000      	b.n	801613e <put_fat+0x23a>
			if (res != FR_OK) break;
 801613c:	bf00      	nop
		}
	}
	return res;
 801613e:	7ffb      	ldrb	r3, [r7, #31]
}
 8016140:	4618      	mov	r0, r3
 8016142:	3724      	adds	r7, #36	; 0x24
 8016144:	46bd      	mov	sp, r7
 8016146:	bd90      	pop	{r4, r7, pc}

08016148 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b08a      	sub	sp, #40	; 0x28
 801614c:	af00      	add	r7, sp, #0
 801614e:	60f8      	str	r0, [r7, #12]
 8016150:	60b9      	str	r1, [r7, #8]
 8016152:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	3b02      	subs	r3, #2
 8016158:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	6a1b      	ldr	r3, [r3, #32]
 801615e:	3b02      	subs	r3, #2
 8016160:	68ba      	ldr	r2, [r7, #8]
 8016162:	429a      	cmp	r2, r3
 8016164:	d301      	bcc.n	801616a <find_bitmap+0x22>
 8016166:	2300      	movs	r3, #0
 8016168:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	61fb      	str	r3, [r7, #28]
 801616e:	69fb      	ldr	r3, [r7, #28]
 8016170:	61bb      	str	r3, [r7, #24]
 8016172:	2300      	movs	r3, #0
 8016174:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801617a:	69fb      	ldr	r3, [r7, #28]
 801617c:	08db      	lsrs	r3, r3, #3
 801617e:	68f9      	ldr	r1, [r7, #12]
 8016180:	8989      	ldrh	r1, [r1, #12]
 8016182:	fbb3 f3f1 	udiv	r3, r3, r1
 8016186:	4413      	add	r3, r2
 8016188:	4619      	mov	r1, r3
 801618a:	68f8      	ldr	r0, [r7, #12]
 801618c:	f7ff fca8 	bl	8015ae0 <move_window>
 8016190:	4603      	mov	r3, r0
 8016192:	2b00      	cmp	r3, #0
 8016194:	d002      	beq.n	801619c <find_bitmap+0x54>
 8016196:	f04f 33ff 	mov.w	r3, #4294967295
 801619a:	e058      	b.n	801624e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 801619c:	69fb      	ldr	r3, [r7, #28]
 801619e:	08db      	lsrs	r3, r3, #3
 80161a0:	68fa      	ldr	r2, [r7, #12]
 80161a2:	8992      	ldrh	r2, [r2, #12]
 80161a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80161a8:	fb02 f201 	mul.w	r2, r2, r1
 80161ac:	1a9b      	subs	r3, r3, r2
 80161ae:	623b      	str	r3, [r7, #32]
 80161b0:	69fb      	ldr	r3, [r7, #28]
 80161b2:	f003 0307 	and.w	r3, r3, #7
 80161b6:	2201      	movs	r2, #1
 80161b8:	fa02 f303 	lsl.w	r3, r2, r3
 80161bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80161c0:	68fa      	ldr	r2, [r7, #12]
 80161c2:	6a3b      	ldr	r3, [r7, #32]
 80161c4:	4413      	add	r3, r2
 80161c6:	333c      	adds	r3, #60	; 0x3c
 80161c8:	781a      	ldrb	r2, [r3, #0]
 80161ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161ce:	4013      	ands	r3, r2
 80161d0:	74fb      	strb	r3, [r7, #19]
 80161d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161d6:	005b      	lsls	r3, r3, #1
 80161d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80161dc:	69fb      	ldr	r3, [r7, #28]
 80161de:	3301      	adds	r3, #1
 80161e0:	61fb      	str	r3, [r7, #28]
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	6a1b      	ldr	r3, [r3, #32]
 80161e6:	3b02      	subs	r3, #2
 80161e8:	69fa      	ldr	r2, [r7, #28]
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d307      	bcc.n	80161fe <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 80161ee:	2300      	movs	r3, #0
 80161f0:	61fb      	str	r3, [r7, #28]
 80161f2:	2300      	movs	r3, #0
 80161f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	899b      	ldrh	r3, [r3, #12]
 80161fc:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80161fe:	7cfb      	ldrb	r3, [r7, #19]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d109      	bne.n	8016218 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	3301      	adds	r3, #1
 8016208:	617b      	str	r3, [r7, #20]
 801620a:	697a      	ldr	r2, [r7, #20]
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	429a      	cmp	r2, r3
 8016210:	d106      	bne.n	8016220 <find_bitmap+0xd8>
 8016212:	69bb      	ldr	r3, [r7, #24]
 8016214:	3302      	adds	r3, #2
 8016216:	e01a      	b.n	801624e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8016218:	69fb      	ldr	r3, [r7, #28]
 801621a:	61bb      	str	r3, [r7, #24]
 801621c:	2300      	movs	r3, #0
 801621e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8016220:	69fa      	ldr	r2, [r7, #28]
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	429a      	cmp	r2, r3
 8016226:	d101      	bne.n	801622c <find_bitmap+0xe4>
 8016228:	2300      	movs	r3, #0
 801622a:	e010      	b.n	801624e <find_bitmap+0x106>
			} while (bm);
 801622c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016230:	2b00      	cmp	r3, #0
 8016232:	d1c5      	bne.n	80161c0 <find_bitmap+0x78>
			bm = 1;
 8016234:	2301      	movs	r3, #1
 8016236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 801623a:	6a3b      	ldr	r3, [r7, #32]
 801623c:	3301      	adds	r3, #1
 801623e:	623b      	str	r3, [r7, #32]
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	899b      	ldrh	r3, [r3, #12]
 8016244:	461a      	mov	r2, r3
 8016246:	6a3b      	ldr	r3, [r7, #32]
 8016248:	4293      	cmp	r3, r2
 801624a:	d3b9      	bcc.n	80161c0 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 801624c:	e793      	b.n	8016176 <find_bitmap+0x2e>
	}
}
 801624e:	4618      	mov	r0, r3
 8016250:	3728      	adds	r7, #40	; 0x28
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}

08016256 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8016256:	b580      	push	{r7, lr}
 8016258:	b088      	sub	sp, #32
 801625a:	af00      	add	r7, sp, #0
 801625c:	60f8      	str	r0, [r7, #12]
 801625e:	60b9      	str	r1, [r7, #8]
 8016260:	607a      	str	r2, [r7, #4]
 8016262:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	3b02      	subs	r3, #2
 8016268:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801626e:	68bb      	ldr	r3, [r7, #8]
 8016270:	08db      	lsrs	r3, r3, #3
 8016272:	68f9      	ldr	r1, [r7, #12]
 8016274:	8989      	ldrh	r1, [r1, #12]
 8016276:	fbb3 f3f1 	udiv	r3, r3, r1
 801627a:	4413      	add	r3, r2
 801627c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	08db      	lsrs	r3, r3, #3
 8016282:	68fa      	ldr	r2, [r7, #12]
 8016284:	8992      	ldrh	r2, [r2, #12]
 8016286:	fbb3 f1f2 	udiv	r1, r3, r2
 801628a:	fb02 f201 	mul.w	r2, r2, r1
 801628e:	1a9b      	subs	r3, r3, r2
 8016290:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8016292:	68bb      	ldr	r3, [r7, #8]
 8016294:	f003 0307 	and.w	r3, r3, #7
 8016298:	2201      	movs	r2, #1
 801629a:	fa02 f303 	lsl.w	r3, r2, r3
 801629e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	1c5a      	adds	r2, r3, #1
 80162a4:	617a      	str	r2, [r7, #20]
 80162a6:	4619      	mov	r1, r3
 80162a8:	68f8      	ldr	r0, [r7, #12]
 80162aa:	f7ff fc19 	bl	8015ae0 <move_window>
 80162ae:	4603      	mov	r3, r0
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d001      	beq.n	80162b8 <change_bitmap+0x62>
 80162b4:	2301      	movs	r3, #1
 80162b6:	e03f      	b.n	8016338 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80162b8:	68fa      	ldr	r2, [r7, #12]
 80162ba:	69bb      	ldr	r3, [r7, #24]
 80162bc:	4413      	add	r3, r2
 80162be:	333c      	adds	r3, #60	; 0x3c
 80162c0:	781a      	ldrb	r2, [r3, #0]
 80162c2:	7ffb      	ldrb	r3, [r7, #31]
 80162c4:	4013      	ands	r3, r2
 80162c6:	b2db      	uxtb	r3, r3
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	bf14      	ite	ne
 80162cc:	2301      	movne	r3, #1
 80162ce:	2300      	moveq	r3, #0
 80162d0:	b2db      	uxtb	r3, r3
 80162d2:	461a      	mov	r2, r3
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	4293      	cmp	r3, r2
 80162d8:	d101      	bne.n	80162de <change_bitmap+0x88>
 80162da:	2302      	movs	r3, #2
 80162dc:	e02c      	b.n	8016338 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 80162de:	68fa      	ldr	r2, [r7, #12]
 80162e0:	69bb      	ldr	r3, [r7, #24]
 80162e2:	4413      	add	r3, r2
 80162e4:	333c      	adds	r3, #60	; 0x3c
 80162e6:	781a      	ldrb	r2, [r3, #0]
 80162e8:	7ffb      	ldrb	r3, [r7, #31]
 80162ea:	4053      	eors	r3, r2
 80162ec:	b2d9      	uxtb	r1, r3
 80162ee:	68fa      	ldr	r2, [r7, #12]
 80162f0:	69bb      	ldr	r3, [r7, #24]
 80162f2:	4413      	add	r3, r2
 80162f4:	333c      	adds	r3, #60	; 0x3c
 80162f6:	460a      	mov	r2, r1
 80162f8:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	2201      	movs	r2, #1
 80162fe:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	3b01      	subs	r3, #1
 8016304:	607b      	str	r3, [r7, #4]
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d101      	bne.n	8016310 <change_bitmap+0xba>
 801630c:	2300      	movs	r3, #0
 801630e:	e013      	b.n	8016338 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8016310:	7ffb      	ldrb	r3, [r7, #31]
 8016312:	005b      	lsls	r3, r3, #1
 8016314:	77fb      	strb	r3, [r7, #31]
 8016316:	7ffb      	ldrb	r3, [r7, #31]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d1cd      	bne.n	80162b8 <change_bitmap+0x62>
			bm = 1;
 801631c:	2301      	movs	r3, #1
 801631e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8016320:	69bb      	ldr	r3, [r7, #24]
 8016322:	3301      	adds	r3, #1
 8016324:	61bb      	str	r3, [r7, #24]
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	899b      	ldrh	r3, [r3, #12]
 801632a:	461a      	mov	r2, r3
 801632c:	69bb      	ldr	r3, [r7, #24]
 801632e:	4293      	cmp	r3, r2
 8016330:	d3c2      	bcc.n	80162b8 <change_bitmap+0x62>
		i = 0;
 8016332:	2300      	movs	r3, #0
 8016334:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8016336:	e7b3      	b.n	80162a0 <change_bitmap+0x4a>
	}
}
 8016338:	4618      	mov	r0, r3
 801633a:	3720      	adds	r7, #32
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b086      	sub	sp, #24
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	79db      	ldrb	r3, [r3, #7]
 801634c:	2b03      	cmp	r3, #3
 801634e:	d121      	bne.n	8016394 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	689b      	ldr	r3, [r3, #8]
 8016354:	617b      	str	r3, [r7, #20]
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	699b      	ldr	r3, [r3, #24]
 801635a:	613b      	str	r3, [r7, #16]
 801635c:	e014      	b.n	8016388 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	6818      	ldr	r0, [r3, #0]
 8016362:	697b      	ldr	r3, [r7, #20]
 8016364:	3301      	adds	r3, #1
 8016366:	461a      	mov	r2, r3
 8016368:	6979      	ldr	r1, [r7, #20]
 801636a:	f7ff fdcb 	bl	8015f04 <put_fat>
 801636e:	4603      	mov	r3, r0
 8016370:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8016372:	7bfb      	ldrb	r3, [r7, #15]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d001      	beq.n	801637c <fill_first_frag+0x3c>
 8016378:	7bfb      	ldrb	r3, [r7, #15]
 801637a:	e00c      	b.n	8016396 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 801637c:	697b      	ldr	r3, [r7, #20]
 801637e:	3301      	adds	r3, #1
 8016380:	617b      	str	r3, [r7, #20]
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	3b01      	subs	r3, #1
 8016386:	613b      	str	r3, [r7, #16]
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d1e7      	bne.n	801635e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2200      	movs	r2, #0
 8016392:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8016394:	2300      	movs	r3, #0
}
 8016396:	4618      	mov	r0, r3
 8016398:	3718      	adds	r7, #24
 801639a:	46bd      	mov	sp, r7
 801639c:	bd80      	pop	{r7, pc}

0801639e <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 801639e:	b580      	push	{r7, lr}
 80163a0:	b086      	sub	sp, #24
 80163a2:	af00      	add	r7, sp, #0
 80163a4:	60f8      	str	r0, [r7, #12]
 80163a6:	60b9      	str	r1, [r7, #8]
 80163a8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80163aa:	e020      	b.n	80163ee <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	6818      	ldr	r0, [r3, #0]
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	69db      	ldr	r3, [r3, #28]
 80163b4:	68ba      	ldr	r2, [r7, #8]
 80163b6:	1ad3      	subs	r3, r2, r3
 80163b8:	1c59      	adds	r1, r3, #1
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	69db      	ldr	r3, [r3, #28]
 80163be:	2b01      	cmp	r3, #1
 80163c0:	d905      	bls.n	80163ce <fill_last_frag+0x30>
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	69db      	ldr	r3, [r3, #28]
 80163c6:	68ba      	ldr	r2, [r7, #8]
 80163c8:	1ad3      	subs	r3, r2, r3
 80163ca:	3302      	adds	r3, #2
 80163cc:	e000      	b.n	80163d0 <fill_last_frag+0x32>
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	461a      	mov	r2, r3
 80163d2:	f7ff fd97 	bl	8015f04 <put_fat>
 80163d6:	4603      	mov	r3, r0
 80163d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80163da:	7dfb      	ldrb	r3, [r7, #23]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d001      	beq.n	80163e4 <fill_last_frag+0x46>
 80163e0:	7dfb      	ldrb	r3, [r7, #23]
 80163e2:	e009      	b.n	80163f8 <fill_last_frag+0x5a>
		obj->n_frag--;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	69db      	ldr	r3, [r3, #28]
 80163e8:	1e5a      	subs	r2, r3, #1
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	69db      	ldr	r3, [r3, #28]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d1da      	bne.n	80163ac <fill_last_frag+0xe>
	}
	return FR_OK;
 80163f6:	2300      	movs	r3, #0
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3718      	adds	r7, #24
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}

08016400 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b08a      	sub	sp, #40	; 0x28
 8016404:	af00      	add	r7, sp, #0
 8016406:	60f8      	str	r0, [r7, #12]
 8016408:	60b9      	str	r1, [r7, #8]
 801640a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801640c:	2300      	movs	r3, #0
 801640e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8016416:	68bb      	ldr	r3, [r7, #8]
 8016418:	627b      	str	r3, [r7, #36]	; 0x24
 801641a:	68bb      	ldr	r3, [r7, #8]
 801641c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	2b01      	cmp	r3, #1
 8016422:	d904      	bls.n	801642e <remove_chain+0x2e>
 8016424:	69bb      	ldr	r3, [r7, #24]
 8016426:	6a1b      	ldr	r3, [r3, #32]
 8016428:	68ba      	ldr	r2, [r7, #8]
 801642a:	429a      	cmp	r2, r3
 801642c:	d301      	bcc.n	8016432 <remove_chain+0x32>
 801642e:	2302      	movs	r3, #2
 8016430:	e096      	b.n	8016560 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d014      	beq.n	8016462 <remove_chain+0x62>
 8016438:	69bb      	ldr	r3, [r7, #24]
 801643a:	781b      	ldrb	r3, [r3, #0]
 801643c:	2b04      	cmp	r3, #4
 801643e:	d103      	bne.n	8016448 <remove_chain+0x48>
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	79db      	ldrb	r3, [r3, #7]
 8016444:	2b02      	cmp	r3, #2
 8016446:	d00c      	beq.n	8016462 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016448:	f04f 32ff 	mov.w	r2, #4294967295
 801644c:	6879      	ldr	r1, [r7, #4]
 801644e:	69b8      	ldr	r0, [r7, #24]
 8016450:	f7ff fd58 	bl	8015f04 <put_fat>
 8016454:	4603      	mov	r3, r0
 8016456:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8016458:	7ffb      	ldrb	r3, [r7, #31]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d001      	beq.n	8016462 <remove_chain+0x62>
 801645e:	7ffb      	ldrb	r3, [r7, #31]
 8016460:	e07e      	b.n	8016560 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016462:	68b9      	ldr	r1, [r7, #8]
 8016464:	68f8      	ldr	r0, [r7, #12]
 8016466:	f7ff fbf9 	bl	8015c5c <get_fat>
 801646a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801646c:	697b      	ldr	r3, [r7, #20]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d055      	beq.n	801651e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016472:	697b      	ldr	r3, [r7, #20]
 8016474:	2b01      	cmp	r3, #1
 8016476:	d101      	bne.n	801647c <remove_chain+0x7c>
 8016478:	2302      	movs	r3, #2
 801647a:	e071      	b.n	8016560 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016482:	d101      	bne.n	8016488 <remove_chain+0x88>
 8016484:	2301      	movs	r3, #1
 8016486:	e06b      	b.n	8016560 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8016488:	69bb      	ldr	r3, [r7, #24]
 801648a:	781b      	ldrb	r3, [r3, #0]
 801648c:	2b04      	cmp	r3, #4
 801648e:	d00b      	beq.n	80164a8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016490:	2200      	movs	r2, #0
 8016492:	68b9      	ldr	r1, [r7, #8]
 8016494:	69b8      	ldr	r0, [r7, #24]
 8016496:	f7ff fd35 	bl	8015f04 <put_fat>
 801649a:	4603      	mov	r3, r0
 801649c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801649e:	7ffb      	ldrb	r3, [r7, #31]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d001      	beq.n	80164a8 <remove_chain+0xa8>
 80164a4:	7ffb      	ldrb	r3, [r7, #31]
 80164a6:	e05b      	b.n	8016560 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80164a8:	69bb      	ldr	r3, [r7, #24]
 80164aa:	69da      	ldr	r2, [r3, #28]
 80164ac:	69bb      	ldr	r3, [r7, #24]
 80164ae:	6a1b      	ldr	r3, [r3, #32]
 80164b0:	3b02      	subs	r3, #2
 80164b2:	429a      	cmp	r2, r3
 80164b4:	d20b      	bcs.n	80164ce <remove_chain+0xce>
			fs->free_clst++;
 80164b6:	69bb      	ldr	r3, [r7, #24]
 80164b8:	69db      	ldr	r3, [r3, #28]
 80164ba:	1c5a      	adds	r2, r3, #1
 80164bc:	69bb      	ldr	r3, [r7, #24]
 80164be:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 80164c0:	69bb      	ldr	r3, [r7, #24]
 80164c2:	791b      	ldrb	r3, [r3, #4]
 80164c4:	f043 0301 	orr.w	r3, r3, #1
 80164c8:	b2da      	uxtb	r2, r3
 80164ca:	69bb      	ldr	r3, [r7, #24]
 80164cc:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80164ce:	6a3b      	ldr	r3, [r7, #32]
 80164d0:	3301      	adds	r3, #1
 80164d2:	697a      	ldr	r2, [r7, #20]
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d102      	bne.n	80164de <remove_chain+0xde>
			ecl = nxt;
 80164d8:	697b      	ldr	r3, [r7, #20]
 80164da:	623b      	str	r3, [r7, #32]
 80164dc:	e017      	b.n	801650e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80164de:	69bb      	ldr	r3, [r7, #24]
 80164e0:	781b      	ldrb	r3, [r3, #0]
 80164e2:	2b04      	cmp	r3, #4
 80164e4:	d10f      	bne.n	8016506 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80164e6:	6a3a      	ldr	r2, [r7, #32]
 80164e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ea:	1ad3      	subs	r3, r2, r3
 80164ec:	1c5a      	adds	r2, r3, #1
 80164ee:	2300      	movs	r3, #0
 80164f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80164f2:	69b8      	ldr	r0, [r7, #24]
 80164f4:	f7ff feaf 	bl	8016256 <change_bitmap>
 80164f8:	4603      	mov	r3, r0
 80164fa:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80164fc:	7ffb      	ldrb	r3, [r7, #31]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d001      	beq.n	8016506 <remove_chain+0x106>
 8016502:	7ffb      	ldrb	r3, [r7, #31]
 8016504:	e02c      	b.n	8016560 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8016506:	697b      	ldr	r3, [r7, #20]
 8016508:	623b      	str	r3, [r7, #32]
 801650a:	6a3b      	ldr	r3, [r7, #32]
 801650c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 801650e:	697b      	ldr	r3, [r7, #20]
 8016510:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016512:	69bb      	ldr	r3, [r7, #24]
 8016514:	6a1b      	ldr	r3, [r3, #32]
 8016516:	68ba      	ldr	r2, [r7, #8]
 8016518:	429a      	cmp	r2, r3
 801651a:	d3a2      	bcc.n	8016462 <remove_chain+0x62>
 801651c:	e000      	b.n	8016520 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 801651e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8016520:	69bb      	ldr	r3, [r7, #24]
 8016522:	781b      	ldrb	r3, [r3, #0]
 8016524:	2b04      	cmp	r3, #4
 8016526:	d11a      	bne.n	801655e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d103      	bne.n	8016536 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	2200      	movs	r2, #0
 8016532:	71da      	strb	r2, [r3, #7]
 8016534:	e013      	b.n	801655e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	79db      	ldrb	r3, [r3, #7]
 801653a:	2b03      	cmp	r3, #3
 801653c:	d10f      	bne.n	801655e <remove_chain+0x15e>
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	689b      	ldr	r3, [r3, #8]
 8016542:	687a      	ldr	r2, [r7, #4]
 8016544:	429a      	cmp	r2, r3
 8016546:	d30a      	bcc.n	801655e <remove_chain+0x15e>
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	689a      	ldr	r2, [r3, #8]
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	699b      	ldr	r3, [r3, #24]
 8016550:	4413      	add	r3, r2
 8016552:	687a      	ldr	r2, [r7, #4]
 8016554:	429a      	cmp	r2, r3
 8016556:	d802      	bhi.n	801655e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	2202      	movs	r2, #2
 801655c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 801655e:	2300      	movs	r3, #0
}
 8016560:	4618      	mov	r0, r3
 8016562:	3728      	adds	r7, #40	; 0x28
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}

08016568 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b088      	sub	sp, #32
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
 8016570:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d10d      	bne.n	801659a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	699b      	ldr	r3, [r3, #24]
 8016582:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016584:	69bb      	ldr	r3, [r7, #24]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d004      	beq.n	8016594 <create_chain+0x2c>
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	6a1b      	ldr	r3, [r3, #32]
 801658e:	69ba      	ldr	r2, [r7, #24]
 8016590:	429a      	cmp	r2, r3
 8016592:	d31b      	bcc.n	80165cc <create_chain+0x64>
 8016594:	2301      	movs	r3, #1
 8016596:	61bb      	str	r3, [r7, #24]
 8016598:	e018      	b.n	80165cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801659a:	6839      	ldr	r1, [r7, #0]
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f7ff fb5d 	bl	8015c5c <get_fat>
 80165a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	2b01      	cmp	r3, #1
 80165a8:	d801      	bhi.n	80165ae <create_chain+0x46>
 80165aa:	2301      	movs	r3, #1
 80165ac:	e0d9      	b.n	8016762 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165b4:	d101      	bne.n	80165ba <create_chain+0x52>
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	e0d3      	b.n	8016762 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80165ba:	693b      	ldr	r3, [r7, #16]
 80165bc:	6a1b      	ldr	r3, [r3, #32]
 80165be:	68fa      	ldr	r2, [r7, #12]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d201      	bcs.n	80165c8 <create_chain+0x60>
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	e0cc      	b.n	8016762 <create_chain+0x1fa>
		scl = clst;
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80165cc:	693b      	ldr	r3, [r7, #16]
 80165ce:	781b      	ldrb	r3, [r3, #0]
 80165d0:	2b04      	cmp	r3, #4
 80165d2:	d164      	bne.n	801669e <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80165d4:	2201      	movs	r2, #1
 80165d6:	69b9      	ldr	r1, [r7, #24]
 80165d8:	6938      	ldr	r0, [r7, #16]
 80165da:	f7ff fdb5 	bl	8016148 <find_bitmap>
 80165de:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80165e0:	69fb      	ldr	r3, [r7, #28]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d003      	beq.n	80165ee <create_chain+0x86>
 80165e6:	69fb      	ldr	r3, [r7, #28]
 80165e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165ec:	d101      	bne.n	80165f2 <create_chain+0x8a>
 80165ee:	69fb      	ldr	r3, [r7, #28]
 80165f0:	e0b7      	b.n	8016762 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80165f2:	2301      	movs	r3, #1
 80165f4:	2201      	movs	r2, #1
 80165f6:	69f9      	ldr	r1, [r7, #28]
 80165f8:	6938      	ldr	r0, [r7, #16]
 80165fa:	f7ff fe2c 	bl	8016256 <change_bitmap>
 80165fe:	4603      	mov	r3, r0
 8016600:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8016602:	7dfb      	ldrb	r3, [r7, #23]
 8016604:	2b02      	cmp	r3, #2
 8016606:	d101      	bne.n	801660c <create_chain+0xa4>
 8016608:	2301      	movs	r3, #1
 801660a:	e0aa      	b.n	8016762 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 801660c:	7dfb      	ldrb	r3, [r7, #23]
 801660e:	2b01      	cmp	r3, #1
 8016610:	d102      	bne.n	8016618 <create_chain+0xb0>
 8016612:	f04f 33ff 	mov.w	r3, #4294967295
 8016616:	e0a4      	b.n	8016762 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d103      	bne.n	8016626 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2202      	movs	r2, #2
 8016622:	71da      	strb	r2, [r3, #7]
 8016624:	e011      	b.n	801664a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	79db      	ldrb	r3, [r3, #7]
 801662a:	2b02      	cmp	r3, #2
 801662c:	d10d      	bne.n	801664a <create_chain+0xe2>
 801662e:	69bb      	ldr	r3, [r7, #24]
 8016630:	3301      	adds	r3, #1
 8016632:	69fa      	ldr	r2, [r7, #28]
 8016634:	429a      	cmp	r2, r3
 8016636:	d008      	beq.n	801664a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	689b      	ldr	r3, [r3, #8]
 801663c:	69ba      	ldr	r2, [r7, #24]
 801663e:	1ad2      	subs	r2, r2, r3
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2203      	movs	r2, #3
 8016648:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	79db      	ldrb	r3, [r3, #7]
 801664e:	2b02      	cmp	r3, #2
 8016650:	d064      	beq.n	801671c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8016652:	683b      	ldr	r3, [r7, #0]
 8016654:	3301      	adds	r3, #1
 8016656:	69fa      	ldr	r2, [r7, #28]
 8016658:	429a      	cmp	r2, r3
 801665a:	d10b      	bne.n	8016674 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	69db      	ldr	r3, [r3, #28]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d003      	beq.n	801666c <create_chain+0x104>
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	69db      	ldr	r3, [r3, #28]
 8016668:	3301      	adds	r3, #1
 801666a:	e000      	b.n	801666e <create_chain+0x106>
 801666c:	2302      	movs	r3, #2
 801666e:	687a      	ldr	r2, [r7, #4]
 8016670:	61d3      	str	r3, [r2, #28]
 8016672:	e053      	b.n	801671c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	69db      	ldr	r3, [r3, #28]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d102      	bne.n	8016682 <create_chain+0x11a>
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2201      	movs	r2, #1
 8016680:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8016682:	69fa      	ldr	r2, [r7, #28]
 8016684:	6839      	ldr	r1, [r7, #0]
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f7ff fe89 	bl	801639e <fill_last_frag>
 801668c:	4603      	mov	r3, r0
 801668e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8016690:	7dfb      	ldrb	r3, [r7, #23]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d142      	bne.n	801671c <create_chain+0x1b4>
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2201      	movs	r2, #1
 801669a:	61da      	str	r2, [r3, #28]
 801669c:	e03e      	b.n	801671c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801669e:	69bb      	ldr	r3, [r7, #24]
 80166a0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80166a2:	69fb      	ldr	r3, [r7, #28]
 80166a4:	3301      	adds	r3, #1
 80166a6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80166a8:	693b      	ldr	r3, [r7, #16]
 80166aa:	6a1b      	ldr	r3, [r3, #32]
 80166ac:	69fa      	ldr	r2, [r7, #28]
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d307      	bcc.n	80166c2 <create_chain+0x15a>
				ncl = 2;
 80166b2:	2302      	movs	r3, #2
 80166b4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80166b6:	69fa      	ldr	r2, [r7, #28]
 80166b8:	69bb      	ldr	r3, [r7, #24]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d901      	bls.n	80166c2 <create_chain+0x15a>
 80166be:	2300      	movs	r3, #0
 80166c0:	e04f      	b.n	8016762 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80166c2:	69f9      	ldr	r1, [r7, #28]
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f7ff fac9 	bl	8015c5c <get_fat>
 80166ca:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d00e      	beq.n	80166f0 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	2b01      	cmp	r3, #1
 80166d6:	d003      	beq.n	80166e0 <create_chain+0x178>
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166de:	d101      	bne.n	80166e4 <create_chain+0x17c>
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	e03e      	b.n	8016762 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 80166e4:	69fa      	ldr	r2, [r7, #28]
 80166e6:	69bb      	ldr	r3, [r7, #24]
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d1da      	bne.n	80166a2 <create_chain+0x13a>
 80166ec:	2300      	movs	r3, #0
 80166ee:	e038      	b.n	8016762 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 80166f0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80166f2:	f04f 32ff 	mov.w	r2, #4294967295
 80166f6:	69f9      	ldr	r1, [r7, #28]
 80166f8:	6938      	ldr	r0, [r7, #16]
 80166fa:	f7ff fc03 	bl	8015f04 <put_fat>
 80166fe:	4603      	mov	r3, r0
 8016700:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8016702:	7dfb      	ldrb	r3, [r7, #23]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d109      	bne.n	801671c <create_chain+0x1b4>
 8016708:	683b      	ldr	r3, [r7, #0]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d006      	beq.n	801671c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801670e:	69fa      	ldr	r2, [r7, #28]
 8016710:	6839      	ldr	r1, [r7, #0]
 8016712:	6938      	ldr	r0, [r7, #16]
 8016714:	f7ff fbf6 	bl	8015f04 <put_fat>
 8016718:	4603      	mov	r3, r0
 801671a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801671c:	7dfb      	ldrb	r3, [r7, #23]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d116      	bne.n	8016750 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	69fa      	ldr	r2, [r7, #28]
 8016726:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016728:	693b      	ldr	r3, [r7, #16]
 801672a:	69da      	ldr	r2, [r3, #28]
 801672c:	693b      	ldr	r3, [r7, #16]
 801672e:	6a1b      	ldr	r3, [r3, #32]
 8016730:	3b02      	subs	r3, #2
 8016732:	429a      	cmp	r2, r3
 8016734:	d804      	bhi.n	8016740 <create_chain+0x1d8>
 8016736:	693b      	ldr	r3, [r7, #16]
 8016738:	69db      	ldr	r3, [r3, #28]
 801673a:	1e5a      	subs	r2, r3, #1
 801673c:	693b      	ldr	r3, [r7, #16]
 801673e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8016740:	693b      	ldr	r3, [r7, #16]
 8016742:	791b      	ldrb	r3, [r3, #4]
 8016744:	f043 0301 	orr.w	r3, r3, #1
 8016748:	b2da      	uxtb	r2, r3
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	711a      	strb	r2, [r3, #4]
 801674e:	e007      	b.n	8016760 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8016750:	7dfb      	ldrb	r3, [r7, #23]
 8016752:	2b01      	cmp	r3, #1
 8016754:	d102      	bne.n	801675c <create_chain+0x1f4>
 8016756:	f04f 33ff 	mov.w	r3, #4294967295
 801675a:	e000      	b.n	801675e <create_chain+0x1f6>
 801675c:	2301      	movs	r3, #1
 801675e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8016760:	69fb      	ldr	r3, [r7, #28]
}
 8016762:	4618      	mov	r0, r3
 8016764:	3720      	adds	r7, #32
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}

0801676a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801676a:	b590      	push	{r4, r7, lr}
 801676c:	b089      	sub	sp, #36	; 0x24
 801676e:	af00      	add	r7, sp, #0
 8016770:	60f8      	str	r0, [r7, #12]
 8016772:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016780:	3304      	adds	r3, #4
 8016782:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016784:	697b      	ldr	r3, [r7, #20]
 8016786:	899b      	ldrh	r3, [r3, #12]
 8016788:	b29b      	uxth	r3, r3
 801678a:	f04f 0400 	mov.w	r4, #0
 801678e:	461a      	mov	r2, r3
 8016790:	4623      	mov	r3, r4
 8016792:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016796:	f7e9 fd9f 	bl	80002d8 <__aeabi_uldivmod>
 801679a:	4603      	mov	r3, r0
 801679c:	460c      	mov	r4, r1
 801679e:	4618      	mov	r0, r3
 80167a0:	4621      	mov	r1, r4
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	895b      	ldrh	r3, [r3, #10]
 80167a6:	b29b      	uxth	r3, r3
 80167a8:	f04f 0400 	mov.w	r4, #0
 80167ac:	461a      	mov	r2, r3
 80167ae:	4623      	mov	r3, r4
 80167b0:	f7e9 fd92 	bl	80002d8 <__aeabi_uldivmod>
 80167b4:	4603      	mov	r3, r0
 80167b6:	460c      	mov	r4, r1
 80167b8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80167ba:	69bb      	ldr	r3, [r7, #24]
 80167bc:	1d1a      	adds	r2, r3, #4
 80167be:	61ba      	str	r2, [r7, #24]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80167c4:	693b      	ldr	r3, [r7, #16]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d101      	bne.n	80167ce <clmt_clust+0x64>
 80167ca:	2300      	movs	r3, #0
 80167cc:	e010      	b.n	80167f0 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 80167ce:	69fa      	ldr	r2, [r7, #28]
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d307      	bcc.n	80167e6 <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 80167d6:	69fa      	ldr	r2, [r7, #28]
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	1ad3      	subs	r3, r2, r3
 80167dc:	61fb      	str	r3, [r7, #28]
 80167de:	69bb      	ldr	r3, [r7, #24]
 80167e0:	3304      	adds	r3, #4
 80167e2:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80167e4:	e7e9      	b.n	80167ba <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 80167e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80167e8:	69bb      	ldr	r3, [r7, #24]
 80167ea:	681a      	ldr	r2, [r3, #0]
 80167ec:	69fb      	ldr	r3, [r7, #28]
 80167ee:	4413      	add	r3, r2
}
 80167f0:	4618      	mov	r0, r3
 80167f2:	3724      	adds	r7, #36	; 0x24
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd90      	pop	{r4, r7, pc}

080167f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b086      	sub	sp, #24
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
 8016800:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	781b      	ldrb	r3, [r3, #0]
 801680c:	2b04      	cmp	r3, #4
 801680e:	d102      	bne.n	8016816 <dir_sdi+0x1e>
 8016810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016814:	e001      	b.n	801681a <dir_sdi+0x22>
 8016816:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	429a      	cmp	r2, r3
 801681e:	d904      	bls.n	801682a <dir_sdi+0x32>
 8016820:	683b      	ldr	r3, [r7, #0]
 8016822:	f003 031f 	and.w	r3, r3, #31
 8016826:	2b00      	cmp	r3, #0
 8016828:	d001      	beq.n	801682e <dir_sdi+0x36>
		return FR_INT_ERR;
 801682a:	2302      	movs	r3, #2
 801682c:	e074      	b.n	8016918 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	683a      	ldr	r2, [r7, #0]
 8016832:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	689b      	ldr	r3, [r3, #8]
 8016838:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d109      	bne.n	8016854 <dir_sdi+0x5c>
 8016840:	693b      	ldr	r3, [r7, #16]
 8016842:	781b      	ldrb	r3, [r3, #0]
 8016844:	2b02      	cmp	r3, #2
 8016846:	d905      	bls.n	8016854 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8016848:	693b      	ldr	r3, [r7, #16]
 801684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801684c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	2200      	movs	r2, #0
 8016852:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8016854:	697b      	ldr	r3, [r7, #20]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d10c      	bne.n	8016874 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	095b      	lsrs	r3, r3, #5
 801685e:	693a      	ldr	r2, [r7, #16]
 8016860:	8912      	ldrh	r2, [r2, #8]
 8016862:	4293      	cmp	r3, r2
 8016864:	d301      	bcc.n	801686a <dir_sdi+0x72>
 8016866:	2302      	movs	r3, #2
 8016868:	e056      	b.n	8016918 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 801686a:	693b      	ldr	r3, [r7, #16]
 801686c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	639a      	str	r2, [r3, #56]	; 0x38
 8016872:	e02d      	b.n	80168d0 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016874:	693b      	ldr	r3, [r7, #16]
 8016876:	895b      	ldrh	r3, [r3, #10]
 8016878:	461a      	mov	r2, r3
 801687a:	693b      	ldr	r3, [r7, #16]
 801687c:	899b      	ldrh	r3, [r3, #12]
 801687e:	fb03 f302 	mul.w	r3, r3, r2
 8016882:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016884:	e019      	b.n	80168ba <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6979      	ldr	r1, [r7, #20]
 801688a:	4618      	mov	r0, r3
 801688c:	f7ff f9e6 	bl	8015c5c <get_fat>
 8016890:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016898:	d101      	bne.n	801689e <dir_sdi+0xa6>
 801689a:	2301      	movs	r3, #1
 801689c:	e03c      	b.n	8016918 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801689e:	697b      	ldr	r3, [r7, #20]
 80168a0:	2b01      	cmp	r3, #1
 80168a2:	d904      	bls.n	80168ae <dir_sdi+0xb6>
 80168a4:	693b      	ldr	r3, [r7, #16]
 80168a6:	6a1b      	ldr	r3, [r3, #32]
 80168a8:	697a      	ldr	r2, [r7, #20]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d301      	bcc.n	80168b2 <dir_sdi+0xba>
 80168ae:	2302      	movs	r3, #2
 80168b0:	e032      	b.n	8016918 <dir_sdi+0x120>
			ofs -= csz;
 80168b2:	683a      	ldr	r2, [r7, #0]
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	1ad3      	subs	r3, r2, r3
 80168b8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80168ba:	683a      	ldr	r2, [r7, #0]
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	429a      	cmp	r2, r3
 80168c0:	d2e1      	bcs.n	8016886 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 80168c2:	6979      	ldr	r1, [r7, #20]
 80168c4:	6938      	ldr	r0, [r7, #16]
 80168c6:	f7ff f9a9 	bl	8015c1c <clust2sect>
 80168ca:	4602      	mov	r2, r0
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	697a      	ldr	r2, [r7, #20]
 80168d4:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d101      	bne.n	80168e2 <dir_sdi+0xea>
 80168de:	2302      	movs	r3, #2
 80168e0:	e01a      	b.n	8016918 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80168e6:	693b      	ldr	r3, [r7, #16]
 80168e8:	899b      	ldrh	r3, [r3, #12]
 80168ea:	4619      	mov	r1, r3
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80168f2:	441a      	add	r2, r3
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80168f8:	693b      	ldr	r3, [r7, #16]
 80168fa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	899b      	ldrh	r3, [r3, #12]
 8016902:	461a      	mov	r2, r3
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	fbb3 f0f2 	udiv	r0, r3, r2
 801690a:	fb02 f200 	mul.w	r2, r2, r0
 801690e:	1a9b      	subs	r3, r3, r2
 8016910:	18ca      	adds	r2, r1, r3
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8016916:	2300      	movs	r3, #0
}
 8016918:	4618      	mov	r0, r3
 801691a:	3718      	adds	r7, #24
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}

08016920 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b086      	sub	sp, #24
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016934:	3320      	adds	r3, #32
 8016936:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801693c:	2b00      	cmp	r3, #0
 801693e:	d00b      	beq.n	8016958 <dir_next+0x38>
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	781b      	ldrb	r3, [r3, #0]
 8016944:	2b04      	cmp	r3, #4
 8016946:	d102      	bne.n	801694e <dir_next+0x2e>
 8016948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801694c:	e001      	b.n	8016952 <dir_next+0x32>
 801694e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	429a      	cmp	r2, r3
 8016956:	d801      	bhi.n	801695c <dir_next+0x3c>
 8016958:	2304      	movs	r3, #4
 801695a:	e0c3      	b.n	8016ae4 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	899b      	ldrh	r3, [r3, #12]
 8016960:	461a      	mov	r2, r3
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	fbb3 f1f2 	udiv	r1, r3, r2
 8016968:	fb02 f201 	mul.w	r2, r2, r1
 801696c:	1a9b      	subs	r3, r3, r2
 801696e:	2b00      	cmp	r3, #0
 8016970:	f040 80a5 	bne.w	8016abe <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016978:	1c5a      	adds	r2, r3, #1
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016982:	2b00      	cmp	r3, #0
 8016984:	d10b      	bne.n	801699e <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	095b      	lsrs	r3, r3, #5
 801698a:	68fa      	ldr	r2, [r7, #12]
 801698c:	8912      	ldrh	r2, [r2, #8]
 801698e:	4293      	cmp	r3, r2
 8016990:	f0c0 8095 	bcc.w	8016abe <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2200      	movs	r2, #0
 8016998:	639a      	str	r2, [r3, #56]	; 0x38
 801699a:	2304      	movs	r3, #4
 801699c:	e0a2      	b.n	8016ae4 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	899b      	ldrh	r3, [r3, #12]
 80169a2:	461a      	mov	r2, r3
 80169a4:	68bb      	ldr	r3, [r7, #8]
 80169a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80169aa:	68fa      	ldr	r2, [r7, #12]
 80169ac:	8952      	ldrh	r2, [r2, #10]
 80169ae:	3a01      	subs	r2, #1
 80169b0:	4013      	ands	r3, r2
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	f040 8083 	bne.w	8016abe <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80169b8:	687a      	ldr	r2, [r7, #4]
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169be:	4619      	mov	r1, r3
 80169c0:	4610      	mov	r0, r2
 80169c2:	f7ff f94b 	bl	8015c5c <get_fat>
 80169c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80169c8:	697b      	ldr	r3, [r7, #20]
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d801      	bhi.n	80169d2 <dir_next+0xb2>
 80169ce:	2302      	movs	r3, #2
 80169d0:	e088      	b.n	8016ae4 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80169d2:	697b      	ldr	r3, [r7, #20]
 80169d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169d8:	d101      	bne.n	80169de <dir_next+0xbe>
 80169da:	2301      	movs	r3, #1
 80169dc:	e082      	b.n	8016ae4 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	6a1b      	ldr	r3, [r3, #32]
 80169e2:	697a      	ldr	r2, [r7, #20]
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d360      	bcc.n	8016aaa <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d104      	bne.n	80169f8 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2200      	movs	r2, #0
 80169f2:	639a      	str	r2, [r3, #56]	; 0x38
 80169f4:	2304      	movs	r3, #4
 80169f6:	e075      	b.n	8016ae4 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80169f8:	687a      	ldr	r2, [r7, #4]
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169fe:	4619      	mov	r1, r3
 8016a00:	4610      	mov	r0, r2
 8016a02:	f7ff fdb1 	bl	8016568 <create_chain>
 8016a06:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016a08:	697b      	ldr	r3, [r7, #20]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d101      	bne.n	8016a12 <dir_next+0xf2>
 8016a0e:	2307      	movs	r3, #7
 8016a10:	e068      	b.n	8016ae4 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	2b01      	cmp	r3, #1
 8016a16:	d101      	bne.n	8016a1c <dir_next+0xfc>
 8016a18:	2302      	movs	r3, #2
 8016a1a:	e063      	b.n	8016ae4 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016a1c:	697b      	ldr	r3, [r7, #20]
 8016a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a22:	d101      	bne.n	8016a28 <dir_next+0x108>
 8016a24:	2301      	movs	r3, #1
 8016a26:	e05d      	b.n	8016ae4 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	79db      	ldrb	r3, [r3, #7]
 8016a2c:	f043 0304 	orr.w	r3, r3, #4
 8016a30:	b2da      	uxtb	r2, r3
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016a36:	68f8      	ldr	r0, [r7, #12]
 8016a38:	f7ff f80e 	bl	8015a58 <sync_window>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d001      	beq.n	8016a46 <dir_next+0x126>
 8016a42:	2301      	movs	r3, #1
 8016a44:	e04e      	b.n	8016ae4 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	899b      	ldrh	r3, [r3, #12]
 8016a50:	461a      	mov	r2, r3
 8016a52:	2100      	movs	r1, #0
 8016a54:	f7fe fe37 	bl	80156c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016a58:	2300      	movs	r3, #0
 8016a5a:	613b      	str	r3, [r7, #16]
 8016a5c:	6979      	ldr	r1, [r7, #20]
 8016a5e:	68f8      	ldr	r0, [r7, #12]
 8016a60:	f7ff f8dc 	bl	8015c1c <clust2sect>
 8016a64:	4602      	mov	r2, r0
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	639a      	str	r2, [r3, #56]	; 0x38
 8016a6a:	e012      	b.n	8016a92 <dir_next+0x172>
						fs->wflag = 1;
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	2201      	movs	r2, #1
 8016a70:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016a72:	68f8      	ldr	r0, [r7, #12]
 8016a74:	f7fe fff0 	bl	8015a58 <sync_window>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d001      	beq.n	8016a82 <dir_next+0x162>
 8016a7e:	2301      	movs	r3, #1
 8016a80:	e030      	b.n	8016ae4 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	3301      	adds	r3, #1
 8016a86:	613b      	str	r3, [r7, #16]
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a8c:	1c5a      	adds	r2, r3, #1
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	639a      	str	r2, [r3, #56]	; 0x38
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	895b      	ldrh	r3, [r3, #10]
 8016a96:	461a      	mov	r2, r3
 8016a98:	693b      	ldr	r3, [r7, #16]
 8016a9a:	4293      	cmp	r3, r2
 8016a9c:	d3e6      	bcc.n	8016a6c <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016aa2:	693b      	ldr	r3, [r7, #16]
 8016aa4:	1ad2      	subs	r2, r2, r3
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	697a      	ldr	r2, [r7, #20]
 8016aae:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8016ab0:	6979      	ldr	r1, [r7, #20]
 8016ab2:	68f8      	ldr	r0, [r7, #12]
 8016ab4:	f7ff f8b2 	bl	8015c1c <clust2sect>
 8016ab8:	4602      	mov	r2, r0
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	68ba      	ldr	r2, [r7, #8]
 8016ac2:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	899b      	ldrh	r3, [r3, #12]
 8016ace:	461a      	mov	r2, r3
 8016ad0:	68bb      	ldr	r3, [r7, #8]
 8016ad2:	fbb3 f0f2 	udiv	r0, r3, r2
 8016ad6:	fb02 f200 	mul.w	r2, r2, r0
 8016ada:	1a9b      	subs	r3, r3, r2
 8016adc:	18ca      	adds	r2, r1, r3
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8016ae2:	2300      	movs	r3, #0
}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	3718      	adds	r7, #24
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}

08016aec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b086      	sub	sp, #24
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
 8016af4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8016afc:	2100      	movs	r1, #0
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	f7ff fe7a 	bl	80167f8 <dir_sdi>
 8016b04:	4603      	mov	r3, r0
 8016b06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016b08:	7dfb      	ldrb	r3, [r7, #23]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d140      	bne.n	8016b90 <dir_alloc+0xa4>
		n = 0;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b16:	4619      	mov	r1, r3
 8016b18:	68f8      	ldr	r0, [r7, #12]
 8016b1a:	f7fe ffe1 	bl	8015ae0 <move_window>
 8016b1e:	4603      	mov	r3, r0
 8016b20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016b22:	7dfb      	ldrb	r3, [r7, #23]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d132      	bne.n	8016b8e <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	2b04      	cmp	r3, #4
 8016b2e:	d108      	bne.n	8016b42 <dir_alloc+0x56>
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	b25b      	sxtb	r3, r3
 8016b38:	43db      	mvns	r3, r3
 8016b3a:	b2db      	uxtb	r3, r3
 8016b3c:	09db      	lsrs	r3, r3, #7
 8016b3e:	b2db      	uxtb	r3, r3
 8016b40:	e00f      	b.n	8016b62 <dir_alloc+0x76>
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2be5      	cmp	r3, #229	; 0xe5
 8016b4a:	d004      	beq.n	8016b56 <dir_alloc+0x6a>
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d101      	bne.n	8016b5a <dir_alloc+0x6e>
 8016b56:	2301      	movs	r3, #1
 8016b58:	e000      	b.n	8016b5c <dir_alloc+0x70>
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	f003 0301 	and.w	r3, r3, #1
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d007      	beq.n	8016b76 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016b66:	693b      	ldr	r3, [r7, #16]
 8016b68:	3301      	adds	r3, #1
 8016b6a:	613b      	str	r3, [r7, #16]
 8016b6c:	693a      	ldr	r2, [r7, #16]
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	429a      	cmp	r2, r3
 8016b72:	d102      	bne.n	8016b7a <dir_alloc+0x8e>
 8016b74:	e00c      	b.n	8016b90 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016b76:	2300      	movs	r3, #0
 8016b78:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016b7a:	2101      	movs	r1, #1
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f7ff fecf 	bl	8016920 <dir_next>
 8016b82:	4603      	mov	r3, r0
 8016b84:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8016b86:	7dfb      	ldrb	r3, [r7, #23]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d0c2      	beq.n	8016b12 <dir_alloc+0x26>
 8016b8c:	e000      	b.n	8016b90 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8016b8e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016b90:	7dfb      	ldrb	r3, [r7, #23]
 8016b92:	2b04      	cmp	r3, #4
 8016b94:	d101      	bne.n	8016b9a <dir_alloc+0xae>
 8016b96:	2307      	movs	r3, #7
 8016b98:	75fb      	strb	r3, [r7, #23]
	return res;
 8016b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	3718      	adds	r7, #24
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b084      	sub	sp, #16
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	331a      	adds	r3, #26
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f7fe fba0 	bl	80152f8 <ld_word>
 8016bb8:	4603      	mov	r3, r0
 8016bba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	781b      	ldrb	r3, [r3, #0]
 8016bc0:	2b03      	cmp	r3, #3
 8016bc2:	d109      	bne.n	8016bd8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	3314      	adds	r3, #20
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7fe fb95 	bl	80152f8 <ld_word>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	041b      	lsls	r3, r3, #16
 8016bd2:	68fa      	ldr	r2, [r7, #12]
 8016bd4:	4313      	orrs	r3, r2
 8016bd6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
}
 8016bda:	4618      	mov	r0, r3
 8016bdc:	3710      	adds	r7, #16
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}

08016be2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016be2:	b580      	push	{r7, lr}
 8016be4:	b084      	sub	sp, #16
 8016be6:	af00      	add	r7, sp, #0
 8016be8:	60f8      	str	r0, [r7, #12]
 8016bea:	60b9      	str	r1, [r7, #8]
 8016bec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016bee:	68bb      	ldr	r3, [r7, #8]
 8016bf0:	331a      	adds	r3, #26
 8016bf2:	687a      	ldr	r2, [r7, #4]
 8016bf4:	b292      	uxth	r2, r2
 8016bf6:	4611      	mov	r1, r2
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f7fe fc75 	bl	80154e8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	781b      	ldrb	r3, [r3, #0]
 8016c02:	2b03      	cmp	r3, #3
 8016c04:	d109      	bne.n	8016c1a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	f103 0214 	add.w	r2, r3, #20
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	0c1b      	lsrs	r3, r3, #16
 8016c10:	b29b      	uxth	r3, r3
 8016c12:	4619      	mov	r1, r3
 8016c14:	4610      	mov	r0, r2
 8016c16:	f7fe fc67 	bl	80154e8 <st_word>
	}
}
 8016c1a:	bf00      	nop
 8016c1c:	3710      	adds	r7, #16
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}
	...

08016c24 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8016c24:	b590      	push	{r4, r7, lr}
 8016c26:	b087      	sub	sp, #28
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
 8016c2c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	331a      	adds	r3, #26
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7fe fb60 	bl	80152f8 <ld_word>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d001      	beq.n	8016c42 <cmp_lfn+0x1e>
 8016c3e:	2300      	movs	r3, #0
 8016c40:	e059      	b.n	8016cf6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	781b      	ldrb	r3, [r3, #0]
 8016c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016c4a:	1e5a      	subs	r2, r3, #1
 8016c4c:	4613      	mov	r3, r2
 8016c4e:	005b      	lsls	r3, r3, #1
 8016c50:	4413      	add	r3, r2
 8016c52:	009b      	lsls	r3, r3, #2
 8016c54:	4413      	add	r3, r2
 8016c56:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016c58:	2301      	movs	r3, #1
 8016c5a:	81fb      	strh	r3, [r7, #14]
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	613b      	str	r3, [r7, #16]
 8016c60:	e033      	b.n	8016cca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016c62:	4a27      	ldr	r2, [pc, #156]	; (8016d00 <cmp_lfn+0xdc>)
 8016c64:	693b      	ldr	r3, [r7, #16]
 8016c66:	4413      	add	r3, r2
 8016c68:	781b      	ldrb	r3, [r3, #0]
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	4413      	add	r3, r2
 8016c70:	4618      	mov	r0, r3
 8016c72:	f7fe fb41 	bl	80152f8 <ld_word>
 8016c76:	4603      	mov	r3, r0
 8016c78:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8016c7a:	89fb      	ldrh	r3, [r7, #14]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d01a      	beq.n	8016cb6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8016c80:	697b      	ldr	r3, [r7, #20]
 8016c82:	2bfe      	cmp	r3, #254	; 0xfe
 8016c84:	d812      	bhi.n	8016cac <cmp_lfn+0x88>
 8016c86:	89bb      	ldrh	r3, [r7, #12]
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f003 fc67 	bl	801a55c <ff_wtoupper>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	461c      	mov	r4, r3
 8016c92:	697b      	ldr	r3, [r7, #20]
 8016c94:	1c5a      	adds	r2, r3, #1
 8016c96:	617a      	str	r2, [r7, #20]
 8016c98:	005b      	lsls	r3, r3, #1
 8016c9a:	687a      	ldr	r2, [r7, #4]
 8016c9c:	4413      	add	r3, r2
 8016c9e:	881b      	ldrh	r3, [r3, #0]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f003 fc5b 	bl	801a55c <ff_wtoupper>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	429c      	cmp	r4, r3
 8016caa:	d001      	beq.n	8016cb0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8016cac:	2300      	movs	r3, #0
 8016cae:	e022      	b.n	8016cf6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8016cb0:	89bb      	ldrh	r3, [r7, #12]
 8016cb2:	81fb      	strh	r3, [r7, #14]
 8016cb4:	e006      	b.n	8016cc4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8016cb6:	89bb      	ldrh	r3, [r7, #12]
 8016cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016cbc:	4293      	cmp	r3, r2
 8016cbe:	d001      	beq.n	8016cc4 <cmp_lfn+0xa0>
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	e018      	b.n	8016cf6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	3301      	adds	r3, #1
 8016cc8:	613b      	str	r3, [r7, #16]
 8016cca:	693b      	ldr	r3, [r7, #16]
 8016ccc:	2b0c      	cmp	r3, #12
 8016cce:	d9c8      	bls.n	8016c62 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8016cd0:	683b      	ldr	r3, [r7, #0]
 8016cd2:	781b      	ldrb	r3, [r3, #0]
 8016cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d00b      	beq.n	8016cf4 <cmp_lfn+0xd0>
 8016cdc:	89fb      	ldrh	r3, [r7, #14]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d008      	beq.n	8016cf4 <cmp_lfn+0xd0>
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	005b      	lsls	r3, r3, #1
 8016ce6:	687a      	ldr	r2, [r7, #4]
 8016ce8:	4413      	add	r3, r2
 8016cea:	881b      	ldrh	r3, [r3, #0]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d001      	beq.n	8016cf4 <cmp_lfn+0xd0>
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	e000      	b.n	8016cf6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8016cf4:	2301      	movs	r3, #1
}
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	371c      	adds	r7, #28
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	bd90      	pop	{r4, r7, pc}
 8016cfe:	bf00      	nop
 8016d00:	0801b47c 	.word	0x0801b47c

08016d04 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b086      	sub	sp, #24
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
 8016d0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8016d0e:	683b      	ldr	r3, [r7, #0]
 8016d10:	331a      	adds	r3, #26
 8016d12:	4618      	mov	r0, r3
 8016d14:	f7fe faf0 	bl	80152f8 <ld_word>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d001      	beq.n	8016d22 <pick_lfn+0x1e>
 8016d1e:	2300      	movs	r3, #0
 8016d20:	e04d      	b.n	8016dbe <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8016d22:	683b      	ldr	r3, [r7, #0]
 8016d24:	781b      	ldrb	r3, [r3, #0]
 8016d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016d2a:	1e5a      	subs	r2, r3, #1
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	4413      	add	r3, r2
 8016d32:	009b      	lsls	r3, r3, #2
 8016d34:	4413      	add	r3, r2
 8016d36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016d38:	2301      	movs	r3, #1
 8016d3a:	81fb      	strh	r3, [r7, #14]
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	613b      	str	r3, [r7, #16]
 8016d40:	e028      	b.n	8016d94 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016d42:	4a21      	ldr	r2, [pc, #132]	; (8016dc8 <pick_lfn+0xc4>)
 8016d44:	693b      	ldr	r3, [r7, #16]
 8016d46:	4413      	add	r3, r2
 8016d48:	781b      	ldrb	r3, [r3, #0]
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	4413      	add	r3, r2
 8016d50:	4618      	mov	r0, r3
 8016d52:	f7fe fad1 	bl	80152f8 <ld_word>
 8016d56:	4603      	mov	r3, r0
 8016d58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8016d5a:	89fb      	ldrh	r3, [r7, #14]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d00f      	beq.n	8016d80 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8016d60:	697b      	ldr	r3, [r7, #20]
 8016d62:	2bfe      	cmp	r3, #254	; 0xfe
 8016d64:	d901      	bls.n	8016d6a <pick_lfn+0x66>
 8016d66:	2300      	movs	r3, #0
 8016d68:	e029      	b.n	8016dbe <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8016d6a:	89bb      	ldrh	r3, [r7, #12]
 8016d6c:	81fb      	strh	r3, [r7, #14]
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	1c5a      	adds	r2, r3, #1
 8016d72:	617a      	str	r2, [r7, #20]
 8016d74:	005b      	lsls	r3, r3, #1
 8016d76:	687a      	ldr	r2, [r7, #4]
 8016d78:	4413      	add	r3, r2
 8016d7a:	89fa      	ldrh	r2, [r7, #14]
 8016d7c:	801a      	strh	r2, [r3, #0]
 8016d7e:	e006      	b.n	8016d8e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8016d80:	89bb      	ldrh	r3, [r7, #12]
 8016d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d86:	4293      	cmp	r3, r2
 8016d88:	d001      	beq.n	8016d8e <pick_lfn+0x8a>
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	e017      	b.n	8016dbe <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016d8e:	693b      	ldr	r3, [r7, #16]
 8016d90:	3301      	adds	r3, #1
 8016d92:	613b      	str	r3, [r7, #16]
 8016d94:	693b      	ldr	r3, [r7, #16]
 8016d96:	2b0c      	cmp	r3, #12
 8016d98:	d9d3      	bls.n	8016d42 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	781b      	ldrb	r3, [r3, #0]
 8016d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d00a      	beq.n	8016dbc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	2bfe      	cmp	r3, #254	; 0xfe
 8016daa:	d901      	bls.n	8016db0 <pick_lfn+0xac>
 8016dac:	2300      	movs	r3, #0
 8016dae:	e006      	b.n	8016dbe <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8016db0:	697b      	ldr	r3, [r7, #20]
 8016db2:	005b      	lsls	r3, r3, #1
 8016db4:	687a      	ldr	r2, [r7, #4]
 8016db6:	4413      	add	r3, r2
 8016db8:	2200      	movs	r2, #0
 8016dba:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8016dbc:	2301      	movs	r3, #1
}
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	3718      	adds	r7, #24
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	bd80      	pop	{r7, pc}
 8016dc6:	bf00      	nop
 8016dc8:	0801b47c 	.word	0x0801b47c

08016dcc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b088      	sub	sp, #32
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	60f8      	str	r0, [r7, #12]
 8016dd4:	60b9      	str	r1, [r7, #8]
 8016dd6:	4611      	mov	r1, r2
 8016dd8:	461a      	mov	r2, r3
 8016dda:	460b      	mov	r3, r1
 8016ddc:	71fb      	strb	r3, [r7, #7]
 8016dde:	4613      	mov	r3, r2
 8016de0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	330d      	adds	r3, #13
 8016de6:	79ba      	ldrb	r2, [r7, #6]
 8016de8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8016dea:	68bb      	ldr	r3, [r7, #8]
 8016dec:	330b      	adds	r3, #11
 8016dee:	220f      	movs	r2, #15
 8016df0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8016df2:	68bb      	ldr	r3, [r7, #8]
 8016df4:	330c      	adds	r3, #12
 8016df6:	2200      	movs	r2, #0
 8016df8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	331a      	adds	r3, #26
 8016dfe:	2100      	movs	r1, #0
 8016e00:	4618      	mov	r0, r3
 8016e02:	f7fe fb71 	bl	80154e8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016e06:	79fb      	ldrb	r3, [r7, #7]
 8016e08:	1e5a      	subs	r2, r3, #1
 8016e0a:	4613      	mov	r3, r2
 8016e0c:	005b      	lsls	r3, r3, #1
 8016e0e:	4413      	add	r3, r2
 8016e10:	009b      	lsls	r3, r3, #2
 8016e12:	4413      	add	r3, r2
 8016e14:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8016e16:	2300      	movs	r3, #0
 8016e18:	82fb      	strh	r3, [r7, #22]
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016e1e:	8afb      	ldrh	r3, [r7, #22]
 8016e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e24:	4293      	cmp	r3, r2
 8016e26:	d007      	beq.n	8016e38 <put_lfn+0x6c>
 8016e28:	69fb      	ldr	r3, [r7, #28]
 8016e2a:	1c5a      	adds	r2, r3, #1
 8016e2c:	61fa      	str	r2, [r7, #28]
 8016e2e:	005b      	lsls	r3, r3, #1
 8016e30:	68fa      	ldr	r2, [r7, #12]
 8016e32:	4413      	add	r3, r2
 8016e34:	881b      	ldrh	r3, [r3, #0]
 8016e36:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8016e38:	4a17      	ldr	r2, [pc, #92]	; (8016e98 <put_lfn+0xcc>)
 8016e3a:	69bb      	ldr	r3, [r7, #24]
 8016e3c:	4413      	add	r3, r2
 8016e3e:	781b      	ldrb	r3, [r3, #0]
 8016e40:	461a      	mov	r2, r3
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	4413      	add	r3, r2
 8016e46:	8afa      	ldrh	r2, [r7, #22]
 8016e48:	4611      	mov	r1, r2
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f7fe fb4c 	bl	80154e8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016e50:	8afb      	ldrh	r3, [r7, #22]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d102      	bne.n	8016e5c <put_lfn+0x90>
 8016e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e5a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8016e5c:	69bb      	ldr	r3, [r7, #24]
 8016e5e:	3301      	adds	r3, #1
 8016e60:	61bb      	str	r3, [r7, #24]
 8016e62:	69bb      	ldr	r3, [r7, #24]
 8016e64:	2b0c      	cmp	r3, #12
 8016e66:	d9da      	bls.n	8016e1e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8016e68:	8afb      	ldrh	r3, [r7, #22]
 8016e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e6e:	4293      	cmp	r3, r2
 8016e70:	d006      	beq.n	8016e80 <put_lfn+0xb4>
 8016e72:	69fb      	ldr	r3, [r7, #28]
 8016e74:	005b      	lsls	r3, r3, #1
 8016e76:	68fa      	ldr	r2, [r7, #12]
 8016e78:	4413      	add	r3, r2
 8016e7a:	881b      	ldrh	r3, [r3, #0]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d103      	bne.n	8016e88 <put_lfn+0xbc>
 8016e80:	79fb      	ldrb	r3, [r7, #7]
 8016e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e86:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	79fa      	ldrb	r2, [r7, #7]
 8016e8c:	701a      	strb	r2, [r3, #0]
}
 8016e8e:	bf00      	nop
 8016e90:	3720      	adds	r7, #32
 8016e92:	46bd      	mov	sp, r7
 8016e94:	bd80      	pop	{r7, pc}
 8016e96:	bf00      	nop
 8016e98:	0801b47c 	.word	0x0801b47c

08016e9c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b08c      	sub	sp, #48	; 0x30
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	60f8      	str	r0, [r7, #12]
 8016ea4:	60b9      	str	r1, [r7, #8]
 8016ea6:	607a      	str	r2, [r7, #4]
 8016ea8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8016eaa:	220b      	movs	r2, #11
 8016eac:	68b9      	ldr	r1, [r7, #8]
 8016eae:	68f8      	ldr	r0, [r7, #12]
 8016eb0:	f7fe fbe8 	bl	8015684 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	2b05      	cmp	r3, #5
 8016eb8:	d929      	bls.n	8016f0e <gen_numname+0x72>
		sr = seq;
 8016eba:	683b      	ldr	r3, [r7, #0]
 8016ebc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8016ebe:	e020      	b.n	8016f02 <gen_numname+0x66>
			wc = *lfn++;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	1c9a      	adds	r2, r3, #2
 8016ec4:	607a      	str	r2, [r7, #4]
 8016ec6:	881b      	ldrh	r3, [r3, #0]
 8016ec8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8016eca:	2300      	movs	r3, #0
 8016ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ece:	e015      	b.n	8016efc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8016ed0:	69fb      	ldr	r3, [r7, #28]
 8016ed2:	005a      	lsls	r2, r3, #1
 8016ed4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ed6:	f003 0301 	and.w	r3, r3, #1
 8016eda:	4413      	add	r3, r2
 8016edc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8016ede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ee0:	085b      	lsrs	r3, r3, #1
 8016ee2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8016ee4:	69fb      	ldr	r3, [r7, #28]
 8016ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d003      	beq.n	8016ef6 <gen_numname+0x5a>
 8016eee:	69fa      	ldr	r2, [r7, #28]
 8016ef0:	4b31      	ldr	r3, [pc, #196]	; (8016fb8 <gen_numname+0x11c>)
 8016ef2:	4053      	eors	r3, r2
 8016ef4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8016ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef8:	3301      	adds	r3, #1
 8016efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8016efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efe:	2b0f      	cmp	r3, #15
 8016f00:	d9e6      	bls.n	8016ed0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	881b      	ldrh	r3, [r3, #0]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d1da      	bne.n	8016ec0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8016f0a:	69fb      	ldr	r3, [r7, #28]
 8016f0c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8016f0e:	2307      	movs	r3, #7
 8016f10:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016f12:	683b      	ldr	r3, [r7, #0]
 8016f14:	b2db      	uxtb	r3, r3
 8016f16:	f003 030f 	and.w	r3, r3, #15
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	3330      	adds	r3, #48	; 0x30
 8016f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8016f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f26:	2b39      	cmp	r3, #57	; 0x39
 8016f28:	d904      	bls.n	8016f34 <gen_numname+0x98>
 8016f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f2e:	3307      	adds	r3, #7
 8016f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8016f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f36:	1e5a      	subs	r2, r3, #1
 8016f38:	62ba      	str	r2, [r7, #40]	; 0x28
 8016f3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016f3e:	4413      	add	r3, r2
 8016f40:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016f44:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	091b      	lsrs	r3, r3, #4
 8016f4c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8016f4e:	683b      	ldr	r3, [r7, #0]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d1de      	bne.n	8016f12 <gen_numname+0x76>
	ns[i] = '~';
 8016f54:	f107 0214 	add.w	r2, r7, #20
 8016f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f5a:	4413      	add	r3, r2
 8016f5c:	227e      	movs	r2, #126	; 0x7e
 8016f5e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016f60:	2300      	movs	r3, #0
 8016f62:	627b      	str	r3, [r7, #36]	; 0x24
 8016f64:	e002      	b.n	8016f6c <gen_numname+0xd0>
 8016f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f68:	3301      	adds	r3, #1
 8016f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8016f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f70:	429a      	cmp	r2, r3
 8016f72:	d205      	bcs.n	8016f80 <gen_numname+0xe4>
 8016f74:	68fa      	ldr	r2, [r7, #12]
 8016f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f78:	4413      	add	r3, r2
 8016f7a:	781b      	ldrb	r3, [r3, #0]
 8016f7c:	2b20      	cmp	r3, #32
 8016f7e:	d1f2      	bne.n	8016f66 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f82:	2b07      	cmp	r3, #7
 8016f84:	d808      	bhi.n	8016f98 <gen_numname+0xfc>
 8016f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f88:	1c5a      	adds	r2, r3, #1
 8016f8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8016f8c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016f90:	4413      	add	r3, r2
 8016f92:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8016f96:	e000      	b.n	8016f9a <gen_numname+0xfe>
 8016f98:	2120      	movs	r1, #32
 8016f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f9c:	1c5a      	adds	r2, r3, #1
 8016f9e:	627a      	str	r2, [r7, #36]	; 0x24
 8016fa0:	68fa      	ldr	r2, [r7, #12]
 8016fa2:	4413      	add	r3, r2
 8016fa4:	460a      	mov	r2, r1
 8016fa6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8016fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016faa:	2b07      	cmp	r3, #7
 8016fac:	d9e8      	bls.n	8016f80 <gen_numname+0xe4>
}
 8016fae:	bf00      	nop
 8016fb0:	3730      	adds	r7, #48	; 0x30
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	bd80      	pop	{r7, pc}
 8016fb6:	bf00      	nop
 8016fb8:	00011021 	.word	0x00011021

08016fbc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8016fbc:	b480      	push	{r7}
 8016fbe:	b085      	sub	sp, #20
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8016fc8:	230b      	movs	r3, #11
 8016fca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8016fcc:	7bfb      	ldrb	r3, [r7, #15]
 8016fce:	b2da      	uxtb	r2, r3
 8016fd0:	0852      	lsrs	r2, r2, #1
 8016fd2:	01db      	lsls	r3, r3, #7
 8016fd4:	4313      	orrs	r3, r2
 8016fd6:	b2da      	uxtb	r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	1c59      	adds	r1, r3, #1
 8016fdc:	6079      	str	r1, [r7, #4]
 8016fde:	781b      	ldrb	r3, [r3, #0]
 8016fe0:	4413      	add	r3, r2
 8016fe2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	3b01      	subs	r3, #1
 8016fe8:	60bb      	str	r3, [r7, #8]
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d1ed      	bne.n	8016fcc <sum_sfn+0x10>
	return sum;
 8016ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3714      	adds	r7, #20
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffc:	4770      	bx	lr

08016ffe <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8016ffe:	b480      	push	{r7}
 8017000:	b087      	sub	sp, #28
 8017002:	af00      	add	r7, sp, #0
 8017004:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	3301      	adds	r3, #1
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	3301      	adds	r3, #1
 801700e:	015b      	lsls	r3, r3, #5
 8017010:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8017012:	2300      	movs	r3, #0
 8017014:	827b      	strh	r3, [r7, #18]
 8017016:	2300      	movs	r3, #0
 8017018:	617b      	str	r3, [r7, #20]
 801701a:	e018      	b.n	801704e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	2b02      	cmp	r3, #2
 8017020:	d103      	bne.n	801702a <xdir_sum+0x2c>
			i++;
 8017022:	697b      	ldr	r3, [r7, #20]
 8017024:	3301      	adds	r3, #1
 8017026:	617b      	str	r3, [r7, #20]
 8017028:	e00e      	b.n	8017048 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 801702a:	8a7b      	ldrh	r3, [r7, #18]
 801702c:	03db      	lsls	r3, r3, #15
 801702e:	b29a      	uxth	r2, r3
 8017030:	8a7b      	ldrh	r3, [r7, #18]
 8017032:	085b      	lsrs	r3, r3, #1
 8017034:	b29b      	uxth	r3, r3
 8017036:	4413      	add	r3, r2
 8017038:	b29a      	uxth	r2, r3
 801703a:	6879      	ldr	r1, [r7, #4]
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	440b      	add	r3, r1
 8017040:	781b      	ldrb	r3, [r3, #0]
 8017042:	b29b      	uxth	r3, r3
 8017044:	4413      	add	r3, r2
 8017046:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8017048:	697b      	ldr	r3, [r7, #20]
 801704a:	3301      	adds	r3, #1
 801704c:	617b      	str	r3, [r7, #20]
 801704e:	697a      	ldr	r2, [r7, #20]
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	429a      	cmp	r2, r3
 8017054:	d3e2      	bcc.n	801701c <xdir_sum+0x1e>
		}
	}
	return sum;
 8017056:	8a7b      	ldrh	r3, [r7, #18]
}
 8017058:	4618      	mov	r0, r3
 801705a:	371c      	adds	r7, #28
 801705c:	46bd      	mov	sp, r7
 801705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017062:	4770      	bx	lr

08017064 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b084      	sub	sp, #16
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 801706c:	2300      	movs	r3, #0
 801706e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8017070:	e01f      	b.n	80170b2 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8017072:	89bb      	ldrh	r3, [r7, #12]
 8017074:	4618      	mov	r0, r3
 8017076:	f003 fa71 	bl	801a55c <ff_wtoupper>
 801707a:	4603      	mov	r3, r0
 801707c:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 801707e:	89fb      	ldrh	r3, [r7, #14]
 8017080:	03db      	lsls	r3, r3, #15
 8017082:	b29a      	uxth	r2, r3
 8017084:	89fb      	ldrh	r3, [r7, #14]
 8017086:	085b      	lsrs	r3, r3, #1
 8017088:	b29b      	uxth	r3, r3
 801708a:	4413      	add	r3, r2
 801708c:	b29a      	uxth	r2, r3
 801708e:	89bb      	ldrh	r3, [r7, #12]
 8017090:	b2db      	uxtb	r3, r3
 8017092:	b29b      	uxth	r3, r3
 8017094:	4413      	add	r3, r2
 8017096:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8017098:	89fb      	ldrh	r3, [r7, #14]
 801709a:	03db      	lsls	r3, r3, #15
 801709c:	b29a      	uxth	r2, r3
 801709e:	89fb      	ldrh	r3, [r7, #14]
 80170a0:	085b      	lsrs	r3, r3, #1
 80170a2:	b29b      	uxth	r3, r3
 80170a4:	4413      	add	r3, r2
 80170a6:	b29a      	uxth	r2, r3
 80170a8:	89bb      	ldrh	r3, [r7, #12]
 80170aa:	0a1b      	lsrs	r3, r3, #8
 80170ac:	b29b      	uxth	r3, r3
 80170ae:	4413      	add	r3, r2
 80170b0:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	1c9a      	adds	r2, r3, #2
 80170b6:	607a      	str	r2, [r7, #4]
 80170b8:	881b      	ldrh	r3, [r3, #0]
 80170ba:	81bb      	strh	r3, [r7, #12]
 80170bc:	89bb      	ldrh	r3, [r7, #12]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d1d7      	bne.n	8017072 <xname_sum+0xe>
	}
	return sum;
 80170c2:	89fb      	ldrh	r3, [r7, #14]
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	3710      	adds	r7, #16
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bd80      	pop	{r7, pc}

080170cc <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80170cc:	b590      	push	{r4, r7, lr}
 80170ce:	b087      	sub	sp, #28
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	695b      	ldr	r3, [r3, #20]
 80170da:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	681a      	ldr	r2, [r3, #0]
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170e4:	4619      	mov	r1, r3
 80170e6:	4610      	mov	r0, r2
 80170e8:	f7fe fcfa 	bl	8015ae0 <move_window>
 80170ec:	4603      	mov	r3, r0
 80170ee:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80170f0:	7bfb      	ldrb	r3, [r7, #15]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d001      	beq.n	80170fa <load_xdir+0x2e>
 80170f6:	7bfb      	ldrb	r3, [r7, #15]
 80170f8:	e09f      	b.n	801723a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170fe:	781b      	ldrb	r3, [r3, #0]
 8017100:	2b85      	cmp	r3, #133	; 0x85
 8017102:	d001      	beq.n	8017108 <load_xdir+0x3c>
 8017104:	2302      	movs	r3, #2
 8017106:	e098      	b.n	801723a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801710c:	2220      	movs	r2, #32
 801710e:	4619      	mov	r1, r3
 8017110:	6938      	ldr	r0, [r7, #16]
 8017112:	f7fe fab7 	bl	8015684 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8017116:	693b      	ldr	r3, [r7, #16]
 8017118:	3301      	adds	r3, #1
 801711a:	781b      	ldrb	r3, [r3, #0]
 801711c:	3301      	adds	r3, #1
 801711e:	015b      	lsls	r3, r3, #5
 8017120:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8017122:	68bb      	ldr	r3, [r7, #8]
 8017124:	2b5f      	cmp	r3, #95	; 0x5f
 8017126:	d903      	bls.n	8017130 <load_xdir+0x64>
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 801712e:	d901      	bls.n	8017134 <load_xdir+0x68>
 8017130:	2302      	movs	r3, #2
 8017132:	e082      	b.n	801723a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8017134:	2100      	movs	r1, #0
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	f7ff fbf2 	bl	8016920 <dir_next>
 801713c:	4603      	mov	r3, r0
 801713e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8017140:	7bfb      	ldrb	r3, [r7, #15]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d001      	beq.n	801714a <load_xdir+0x7e>
 8017146:	7bfb      	ldrb	r3, [r7, #15]
 8017148:	e077      	b.n	801723a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	681a      	ldr	r2, [r3, #0]
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017152:	4619      	mov	r1, r3
 8017154:	4610      	mov	r0, r2
 8017156:	f7fe fcc3 	bl	8015ae0 <move_window>
 801715a:	4603      	mov	r3, r0
 801715c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801715e:	7bfb      	ldrb	r3, [r7, #15]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d001      	beq.n	8017168 <load_xdir+0x9c>
 8017164:	7bfb      	ldrb	r3, [r7, #15]
 8017166:	e068      	b.n	801723a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	2bc0      	cmp	r3, #192	; 0xc0
 8017170:	d001      	beq.n	8017176 <load_xdir+0xaa>
 8017172:	2302      	movs	r3, #2
 8017174:	e061      	b.n	801723a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8017176:	693b      	ldr	r3, [r7, #16]
 8017178:	f103 0020 	add.w	r0, r3, #32
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017180:	2220      	movs	r2, #32
 8017182:	4619      	mov	r1, r3
 8017184:	f7fe fa7e 	bl	8015684 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8017188:	693b      	ldr	r3, [r7, #16]
 801718a:	3323      	adds	r3, #35	; 0x23
 801718c:	781b      	ldrb	r3, [r3, #0]
 801718e:	332c      	adds	r3, #44	; 0x2c
 8017190:	4a2c      	ldr	r2, [pc, #176]	; (8017244 <load_xdir+0x178>)
 8017192:	fba2 2303 	umull	r2, r3, r2, r3
 8017196:	08db      	lsrs	r3, r3, #3
 8017198:	015b      	lsls	r3, r3, #5
 801719a:	68ba      	ldr	r2, [r7, #8]
 801719c:	429a      	cmp	r2, r3
 801719e:	d201      	bcs.n	80171a4 <load_xdir+0xd8>
 80171a0:	2302      	movs	r3, #2
 80171a2:	e04a      	b.n	801723a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80171a4:	2340      	movs	r3, #64	; 0x40
 80171a6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80171a8:	2100      	movs	r1, #0
 80171aa:	6878      	ldr	r0, [r7, #4]
 80171ac:	f7ff fbb8 	bl	8016920 <dir_next>
 80171b0:	4603      	mov	r3, r0
 80171b2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80171b4:	7bfb      	ldrb	r3, [r7, #15]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d001      	beq.n	80171be <load_xdir+0xf2>
 80171ba:	7bfb      	ldrb	r3, [r7, #15]
 80171bc:	e03d      	b.n	801723a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	681a      	ldr	r2, [r3, #0]
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171c6:	4619      	mov	r1, r3
 80171c8:	4610      	mov	r0, r2
 80171ca:	f7fe fc89 	bl	8015ae0 <move_window>
 80171ce:	4603      	mov	r3, r0
 80171d0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80171d2:	7bfb      	ldrb	r3, [r7, #15]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d001      	beq.n	80171dc <load_xdir+0x110>
 80171d8:	7bfb      	ldrb	r3, [r7, #15]
 80171da:	e02e      	b.n	801723a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	2bc1      	cmp	r3, #193	; 0xc1
 80171e4:	d001      	beq.n	80171ea <load_xdir+0x11e>
 80171e6:	2302      	movs	r3, #2
 80171e8:	e027      	b.n	801723a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80171ea:	697b      	ldr	r3, [r7, #20]
 80171ec:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80171f0:	d208      	bcs.n	8017204 <load_xdir+0x138>
 80171f2:	693a      	ldr	r2, [r7, #16]
 80171f4:	697b      	ldr	r3, [r7, #20]
 80171f6:	18d0      	adds	r0, r2, r3
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171fc:	2220      	movs	r2, #32
 80171fe:	4619      	mov	r1, r3
 8017200:	f7fe fa40 	bl	8015684 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8017204:	697b      	ldr	r3, [r7, #20]
 8017206:	3320      	adds	r3, #32
 8017208:	617b      	str	r3, [r7, #20]
 801720a:	697a      	ldr	r2, [r7, #20]
 801720c:	68bb      	ldr	r3, [r7, #8]
 801720e:	429a      	cmp	r2, r3
 8017210:	d3ca      	bcc.n	80171a8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8017212:	697b      	ldr	r3, [r7, #20]
 8017214:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8017218:	d80e      	bhi.n	8017238 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 801721a:	6938      	ldr	r0, [r7, #16]
 801721c:	f7ff feef 	bl	8016ffe <xdir_sum>
 8017220:	4603      	mov	r3, r0
 8017222:	461c      	mov	r4, r3
 8017224:	693b      	ldr	r3, [r7, #16]
 8017226:	3302      	adds	r3, #2
 8017228:	4618      	mov	r0, r3
 801722a:	f7fe f865 	bl	80152f8 <ld_word>
 801722e:	4603      	mov	r3, r0
 8017230:	429c      	cmp	r4, r3
 8017232:	d001      	beq.n	8017238 <load_xdir+0x16c>
 8017234:	2302      	movs	r3, #2
 8017236:	e000      	b.n	801723a <load_xdir+0x16e>
	}
	return FR_OK;
 8017238:	2300      	movs	r3, #0
}
 801723a:	4618      	mov	r0, r3
 801723c:	371c      	adds	r7, #28
 801723e:	46bd      	mov	sp, r7
 8017240:	bd90      	pop	{r4, r7, pc}
 8017242:	bf00      	nop
 8017244:	88888889 	.word	0x88888889

08017248 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8017248:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801724c:	b084      	sub	sp, #16
 801724e:	af00      	add	r7, sp, #0
 8017250:	6078      	str	r0, [r7, #4]
 8017252:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	681a      	ldr	r2, [r3, #0]
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	6a1a      	ldr	r2, [r3, #32]
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8017264:	683b      	ldr	r3, [r7, #0]
 8017266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017268:	b2da      	uxtb	r2, r3
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 801726e:	683b      	ldr	r3, [r7, #0]
 8017270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017272:	469b      	mov	fp, r3
 8017274:	f04f 0c00 	mov.w	ip, #0
 8017278:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 801727c:	f04f 0200 	mov.w	r2, #0
 8017280:	ea0b 0301 	and.w	r3, fp, r1
 8017284:	ea0c 0402 	and.w	r4, ip, r2
 8017288:	687a      	ldr	r2, [r7, #4]
 801728a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 801728e:	683b      	ldr	r3, [r7, #0]
 8017290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801729a:	4619      	mov	r1, r3
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f7ff faab 	bl	80167f8 <dir_sdi>
 80172a2:	4603      	mov	r3, r0
 80172a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80172a6:	7bfb      	ldrb	r3, [r7, #15]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d104      	bne.n	80172b6 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 80172ac:	6878      	ldr	r0, [r7, #4]
 80172ae:	f7ff ff0d 	bl	80170cc <load_xdir>
 80172b2:	4603      	mov	r3, r0
 80172b4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80172b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	3710      	adds	r7, #16
 80172bc:	46bd      	mov	sp, r7
 80172be:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080172c2 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80172c2:	b590      	push	{r4, r7, lr}
 80172c4:	b087      	sub	sp, #28
 80172c6:	af00      	add	r7, sp, #0
 80172c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	695b      	ldr	r3, [r3, #20]
 80172d0:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	1c9c      	adds	r4, r3, #2
 80172d6:	68f8      	ldr	r0, [r7, #12]
 80172d8:	f7ff fe91 	bl	8016ffe <xdir_sum>
 80172dc:	4603      	mov	r3, r0
 80172de:	4619      	mov	r1, r3
 80172e0:	4620      	mov	r0, r4
 80172e2:	f7fe f901 	bl	80154e8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	3301      	adds	r3, #1
 80172ea:	781b      	ldrb	r3, [r3, #0]
 80172ec:	3301      	adds	r3, #1
 80172ee:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80172f4:	4619      	mov	r1, r3
 80172f6:	6878      	ldr	r0, [r7, #4]
 80172f8:	f7ff fa7e 	bl	80167f8 <dir_sdi>
 80172fc:	4603      	mov	r3, r0
 80172fe:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8017300:	e026      	b.n	8017350 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681a      	ldr	r2, [r3, #0]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801730a:	4619      	mov	r1, r3
 801730c:	4610      	mov	r0, r2
 801730e:	f7fe fbe7 	bl	8015ae0 <move_window>
 8017312:	4603      	mov	r3, r0
 8017314:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017316:	7dfb      	ldrb	r3, [r7, #23]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d11d      	bne.n	8017358 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017320:	2220      	movs	r2, #32
 8017322:	68f9      	ldr	r1, [r7, #12]
 8017324:	4618      	mov	r0, r3
 8017326:	f7fe f9ad 	bl	8015684 <mem_cpy>
		dp->obj.fs->wflag = 1;
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	2201      	movs	r2, #1
 8017330:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8017332:	693b      	ldr	r3, [r7, #16]
 8017334:	3b01      	subs	r3, #1
 8017336:	613b      	str	r3, [r7, #16]
 8017338:	693b      	ldr	r3, [r7, #16]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d00e      	beq.n	801735c <store_xdir+0x9a>
		dirb += SZDIRE;
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	3320      	adds	r3, #32
 8017342:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8017344:	2100      	movs	r1, #0
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	f7ff faea 	bl	8016920 <dir_next>
 801734c:	4603      	mov	r3, r0
 801734e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8017350:	7dfb      	ldrb	r3, [r7, #23]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d0d5      	beq.n	8017302 <store_xdir+0x40>
 8017356:	e002      	b.n	801735e <store_xdir+0x9c>
		if (res != FR_OK) break;
 8017358:	bf00      	nop
 801735a:	e000      	b.n	801735e <store_xdir+0x9c>
		if (--nent == 0) break;
 801735c:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 801735e:	7dfb      	ldrb	r3, [r7, #23]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d002      	beq.n	801736a <store_xdir+0xa8>
 8017364:	7dfb      	ldrb	r3, [r7, #23]
 8017366:	2b01      	cmp	r3, #1
 8017368:	d101      	bne.n	801736e <store_xdir+0xac>
 801736a:	7dfb      	ldrb	r3, [r7, #23]
 801736c:	e000      	b.n	8017370 <store_xdir+0xae>
 801736e:	2302      	movs	r3, #2
}
 8017370:	4618      	mov	r0, r3
 8017372:	371c      	adds	r7, #28
 8017374:	46bd      	mov	sp, r7
 8017376:	bd90      	pop	{r4, r7, pc}

08017378 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8017378:	b590      	push	{r4, r7, lr}
 801737a:	b085      	sub	sp, #20
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8017382:	2240      	movs	r2, #64	; 0x40
 8017384:	2100      	movs	r1, #0
 8017386:	6878      	ldr	r0, [r7, #4]
 8017388:	f7fe f99d 	bl	80156c6 <mem_set>
	dirb[XDIR_Type] = 0x85;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2285      	movs	r2, #133	; 0x85
 8017390:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	3320      	adds	r3, #32
 8017396:	22c0      	movs	r2, #192	; 0xc0
 8017398:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 801739a:	2300      	movs	r3, #0
 801739c:	72bb      	strb	r3, [r7, #10]
 801739e:	2301      	movs	r3, #1
 80173a0:	72fb      	strb	r3, [r7, #11]
 80173a2:	2301      	movs	r3, #1
 80173a4:	813b      	strh	r3, [r7, #8]
 80173a6:	2340      	movs	r3, #64	; 0x40
 80173a8:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	1c5a      	adds	r2, r3, #1
 80173ae:	60fa      	str	r2, [r7, #12]
 80173b0:	687a      	ldr	r2, [r7, #4]
 80173b2:	4413      	add	r3, r2
 80173b4:	22c1      	movs	r2, #193	; 0xc1
 80173b6:	701a      	strb	r2, [r3, #0]
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	1c5a      	adds	r2, r3, #1
 80173bc:	60fa      	str	r2, [r7, #12]
 80173be:	687a      	ldr	r2, [r7, #4]
 80173c0:	4413      	add	r3, r2
 80173c2:	2200      	movs	r2, #0
 80173c4:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80173c6:	893b      	ldrh	r3, [r7, #8]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d00b      	beq.n	80173e4 <create_xdir+0x6c>
 80173cc:	7abb      	ldrb	r3, [r7, #10]
 80173ce:	005b      	lsls	r3, r3, #1
 80173d0:	683a      	ldr	r2, [r7, #0]
 80173d2:	4413      	add	r3, r2
 80173d4:	881b      	ldrh	r3, [r3, #0]
 80173d6:	813b      	strh	r3, [r7, #8]
 80173d8:	893b      	ldrh	r3, [r7, #8]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d002      	beq.n	80173e4 <create_xdir+0x6c>
 80173de:	7abb      	ldrb	r3, [r7, #10]
 80173e0:	3301      	adds	r3, #1
 80173e2:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80173e4:	687a      	ldr	r2, [r7, #4]
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	4413      	add	r3, r2
 80173ea:	893a      	ldrh	r2, [r7, #8]
 80173ec:	4611      	mov	r1, r2
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7fe f87a 	bl	80154e8 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	3302      	adds	r3, #2
 80173f8:	60fb      	str	r3, [r7, #12]
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	f003 031f 	and.w	r3, r3, #31
 8017400:	2b00      	cmp	r3, #0
 8017402:	d1e0      	bne.n	80173c6 <create_xdir+0x4e>
		nb++;
 8017404:	7afb      	ldrb	r3, [r7, #11]
 8017406:	3301      	adds	r3, #1
 8017408:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 801740a:	7abb      	ldrb	r3, [r7, #10]
 801740c:	005b      	lsls	r3, r3, #1
 801740e:	683a      	ldr	r2, [r7, #0]
 8017410:	4413      	add	r3, r2
 8017412:	881b      	ldrh	r3, [r3, #0]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d1c8      	bne.n	80173aa <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	3323      	adds	r3, #35	; 0x23
 801741c:	7aba      	ldrb	r2, [r7, #10]
 801741e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	3301      	adds	r3, #1
 8017424:	7afa      	ldrb	r2, [r7, #11]
 8017426:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801742e:	6838      	ldr	r0, [r7, #0]
 8017430:	f7ff fe18 	bl	8017064 <xname_sum>
 8017434:	4603      	mov	r3, r0
 8017436:	4619      	mov	r1, r3
 8017438:	4620      	mov	r0, r4
 801743a:	f7fe f855 	bl	80154e8 <st_word>
}
 801743e:	bf00      	nop
 8017440:	3714      	adds	r7, #20
 8017442:	46bd      	mov	sp, r7
 8017444:	bd90      	pop	{r4, r7, pc}

08017446 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8017446:	b580      	push	{r7, lr}
 8017448:	b086      	sub	sp, #24
 801744a:	af00      	add	r7, sp, #0
 801744c:	6078      	str	r0, [r7, #4]
 801744e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8017450:	2304      	movs	r3, #4
 8017452:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801745a:	23ff      	movs	r3, #255	; 0xff
 801745c:	757b      	strb	r3, [r7, #21]
 801745e:	23ff      	movs	r3, #255	; 0xff
 8017460:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8017462:	e09f      	b.n	80175a4 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017468:	4619      	mov	r1, r3
 801746a:	6938      	ldr	r0, [r7, #16]
 801746c:	f7fe fb38 	bl	8015ae0 <move_window>
 8017470:	4603      	mov	r3, r0
 8017472:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017474:	7dfb      	ldrb	r3, [r7, #23]
 8017476:	2b00      	cmp	r3, #0
 8017478:	f040 809a 	bne.w	80175b0 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017480:	781b      	ldrb	r3, [r3, #0]
 8017482:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8017484:	7dbb      	ldrb	r3, [r7, #22]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d102      	bne.n	8017490 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801748a:	2304      	movs	r3, #4
 801748c:	75fb      	strb	r3, [r7, #23]
 801748e:	e096      	b.n	80175be <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	2b04      	cmp	r3, #4
 8017496:	d118      	bne.n	80174ca <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8017498:	7dbb      	ldrb	r3, [r7, #22]
 801749a:	2b85      	cmp	r3, #133	; 0x85
 801749c:	d179      	bne.n	8017592 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f7ff fe10 	bl	80170cc <load_xdir>
 80174ac:	4603      	mov	r3, r0
 80174ae:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80174b0:	7dfb      	ldrb	r3, [r7, #23]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d17e      	bne.n	80175b4 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80174b6:	693b      	ldr	r3, [r7, #16]
 80174b8:	695b      	ldr	r3, [r3, #20]
 80174ba:	3304      	adds	r3, #4
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80174c2:	b2da      	uxtb	r2, r3
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	719a      	strb	r2, [r3, #6]
					}
					break;
 80174c8:	e074      	b.n	80175b4 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80174ce:	330b      	adds	r3, #11
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80174d6:	73fb      	strb	r3, [r7, #15]
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	7bfa      	ldrb	r2, [r7, #15]
 80174dc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80174de:	7dbb      	ldrb	r3, [r7, #22]
 80174e0:	2be5      	cmp	r3, #229	; 0xe5
 80174e2:	d00e      	beq.n	8017502 <dir_read+0xbc>
 80174e4:	7dbb      	ldrb	r3, [r7, #22]
 80174e6:	2b2e      	cmp	r3, #46	; 0x2e
 80174e8:	d00b      	beq.n	8017502 <dir_read+0xbc>
 80174ea:	7bfb      	ldrb	r3, [r7, #15]
 80174ec:	f023 0320 	bic.w	r3, r3, #32
 80174f0:	2b08      	cmp	r3, #8
 80174f2:	bf0c      	ite	eq
 80174f4:	2301      	moveq	r3, #1
 80174f6:	2300      	movne	r3, #0
 80174f8:	b2db      	uxtb	r3, r3
 80174fa:	461a      	mov	r2, r3
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	4293      	cmp	r3, r2
 8017500:	d002      	beq.n	8017508 <dir_read+0xc2>
				ord = 0xFF;
 8017502:	23ff      	movs	r3, #255	; 0xff
 8017504:	757b      	strb	r3, [r7, #21]
 8017506:	e044      	b.n	8017592 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8017508:	7bfb      	ldrb	r3, [r7, #15]
 801750a:	2b0f      	cmp	r3, #15
 801750c:	d12f      	bne.n	801756e <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801750e:	7dbb      	ldrb	r3, [r7, #22]
 8017510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017514:	2b00      	cmp	r3, #0
 8017516:	d00d      	beq.n	8017534 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801751c:	7b5b      	ldrb	r3, [r3, #13]
 801751e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8017520:	7dbb      	ldrb	r3, [r7, #22]
 8017522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017526:	75bb      	strb	r3, [r7, #22]
 8017528:	7dbb      	ldrb	r3, [r7, #22]
 801752a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017534:	7dba      	ldrb	r2, [r7, #22]
 8017536:	7d7b      	ldrb	r3, [r7, #21]
 8017538:	429a      	cmp	r2, r3
 801753a:	d115      	bne.n	8017568 <dir_read+0x122>
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017540:	330d      	adds	r3, #13
 8017542:	781b      	ldrb	r3, [r3, #0]
 8017544:	7d3a      	ldrb	r2, [r7, #20]
 8017546:	429a      	cmp	r2, r3
 8017548:	d10e      	bne.n	8017568 <dir_read+0x122>
 801754a:	693b      	ldr	r3, [r7, #16]
 801754c:	691a      	ldr	r2, [r3, #16]
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017552:	4619      	mov	r1, r3
 8017554:	4610      	mov	r0, r2
 8017556:	f7ff fbd5 	bl	8016d04 <pick_lfn>
 801755a:	4603      	mov	r3, r0
 801755c:	2b00      	cmp	r3, #0
 801755e:	d003      	beq.n	8017568 <dir_read+0x122>
 8017560:	7d7b      	ldrb	r3, [r7, #21]
 8017562:	3b01      	subs	r3, #1
 8017564:	b2db      	uxtb	r3, r3
 8017566:	e000      	b.n	801756a <dir_read+0x124>
 8017568:	23ff      	movs	r3, #255	; 0xff
 801756a:	757b      	strb	r3, [r7, #21]
 801756c:	e011      	b.n	8017592 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801756e:	7d7b      	ldrb	r3, [r7, #21]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d109      	bne.n	8017588 <dir_read+0x142>
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017578:	4618      	mov	r0, r3
 801757a:	f7ff fd1f 	bl	8016fbc <sum_sfn>
 801757e:	4603      	mov	r3, r0
 8017580:	461a      	mov	r2, r3
 8017582:	7d3b      	ldrb	r3, [r7, #20]
 8017584:	4293      	cmp	r3, r2
 8017586:	d017      	beq.n	80175b8 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	f04f 32ff 	mov.w	r2, #4294967295
 801758e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8017590:	e012      	b.n	80175b8 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8017592:	2100      	movs	r1, #0
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f7ff f9c3 	bl	8016920 <dir_next>
 801759a:	4603      	mov	r3, r0
 801759c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801759e:	7dfb      	ldrb	r3, [r7, #23]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d10b      	bne.n	80175bc <dir_read+0x176>
	while (dp->sect) {
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	f47f af5b 	bne.w	8017464 <dir_read+0x1e>
 80175ae:	e006      	b.n	80175be <dir_read+0x178>
		if (res != FR_OK) break;
 80175b0:	bf00      	nop
 80175b2:	e004      	b.n	80175be <dir_read+0x178>
					break;
 80175b4:	bf00      	nop
 80175b6:	e002      	b.n	80175be <dir_read+0x178>
					break;
 80175b8:	bf00      	nop
 80175ba:	e000      	b.n	80175be <dir_read+0x178>
		if (res != FR_OK) break;
 80175bc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80175be:	7dfb      	ldrb	r3, [r7, #23]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d002      	beq.n	80175ca <dir_read+0x184>
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2200      	movs	r2, #0
 80175c8:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 80175ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3718      	adds	r7, #24
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80175d4:	b590      	push	{r4, r7, lr}
 80175d6:	b089      	sub	sp, #36	; 0x24
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80175e2:	2100      	movs	r1, #0
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f7ff f907 	bl	80167f8 <dir_sdi>
 80175ea:	4603      	mov	r3, r0
 80175ec:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80175ee:	7ffb      	ldrb	r3, [r7, #31]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d001      	beq.n	80175f8 <dir_find+0x24>
 80175f4:	7ffb      	ldrb	r3, [r7, #31]
 80175f6:	e112      	b.n	801781e <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	781b      	ldrb	r3, [r3, #0]
 80175fc:	2b04      	cmp	r3, #4
 80175fe:	d164      	bne.n	80176ca <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	691b      	ldr	r3, [r3, #16]
 8017604:	4618      	mov	r0, r3
 8017606:	f7ff fd2d 	bl	8017064 <xname_sum>
 801760a:	4603      	mov	r3, r0
 801760c:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 801760e:	e04f      	b.n	80176b0 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	695b      	ldr	r3, [r3, #20]
 8017614:	3324      	adds	r3, #36	; 0x24
 8017616:	4618      	mov	r0, r3
 8017618:	f7fd fe6e 	bl	80152f8 <ld_word>
 801761c:	4603      	mov	r3, r0
 801761e:	461a      	mov	r2, r3
 8017620:	893b      	ldrh	r3, [r7, #8]
 8017622:	4293      	cmp	r3, r2
 8017624:	d000      	beq.n	8017628 <dir_find+0x54>
 8017626:	e043      	b.n	80176b0 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	695b      	ldr	r3, [r3, #20]
 801762c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017630:	76fb      	strb	r3, [r7, #27]
 8017632:	2340      	movs	r3, #64	; 0x40
 8017634:	617b      	str	r3, [r7, #20]
 8017636:	2300      	movs	r3, #0
 8017638:	613b      	str	r3, [r7, #16]
 801763a:	e029      	b.n	8017690 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	f003 031f 	and.w	r3, r3, #31
 8017642:	2b00      	cmp	r3, #0
 8017644:	d102      	bne.n	801764c <dir_find+0x78>
 8017646:	697b      	ldr	r3, [r7, #20]
 8017648:	3302      	adds	r3, #2
 801764a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	695a      	ldr	r2, [r3, #20]
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	4413      	add	r3, r2
 8017654:	4618      	mov	r0, r3
 8017656:	f7fd fe4f 	bl	80152f8 <ld_word>
 801765a:	4603      	mov	r3, r0
 801765c:	4618      	mov	r0, r3
 801765e:	f002 ff7d 	bl	801a55c <ff_wtoupper>
 8017662:	4603      	mov	r3, r0
 8017664:	461c      	mov	r4, r3
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	691a      	ldr	r2, [r3, #16]
 801766a:	693b      	ldr	r3, [r7, #16]
 801766c:	005b      	lsls	r3, r3, #1
 801766e:	4413      	add	r3, r2
 8017670:	881b      	ldrh	r3, [r3, #0]
 8017672:	4618      	mov	r0, r3
 8017674:	f002 ff72 	bl	801a55c <ff_wtoupper>
 8017678:	4603      	mov	r3, r0
 801767a:	429c      	cmp	r4, r3
 801767c:	d10c      	bne.n	8017698 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 801767e:	7efb      	ldrb	r3, [r7, #27]
 8017680:	3b01      	subs	r3, #1
 8017682:	76fb      	strb	r3, [r7, #27]
 8017684:	697b      	ldr	r3, [r7, #20]
 8017686:	3302      	adds	r3, #2
 8017688:	617b      	str	r3, [r7, #20]
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	3301      	adds	r3, #1
 801768e:	613b      	str	r3, [r7, #16]
 8017690:	7efb      	ldrb	r3, [r7, #27]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d1d2      	bne.n	801763c <dir_find+0x68>
 8017696:	e000      	b.n	801769a <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8017698:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801769a:	7efb      	ldrb	r3, [r7, #27]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d107      	bne.n	80176b0 <dir_find+0xdc>
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	691a      	ldr	r2, [r3, #16]
 80176a4:	693b      	ldr	r3, [r7, #16]
 80176a6:	005b      	lsls	r3, r3, #1
 80176a8:	4413      	add	r3, r2
 80176aa:	881b      	ldrh	r3, [r3, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d009      	beq.n	80176c4 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80176b0:	2100      	movs	r1, #0
 80176b2:	6878      	ldr	r0, [r7, #4]
 80176b4:	f7ff fec7 	bl	8017446 <dir_read>
 80176b8:	4603      	mov	r3, r0
 80176ba:	77fb      	strb	r3, [r7, #31]
 80176bc:	7ffb      	ldrb	r3, [r7, #31]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d0a6      	beq.n	8017610 <dir_find+0x3c>
 80176c2:	e000      	b.n	80176c6 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80176c4:	bf00      	nop
		}
		return res;
 80176c6:	7ffb      	ldrb	r3, [r7, #31]
 80176c8:	e0a9      	b.n	801781e <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80176ca:	23ff      	movs	r3, #255	; 0xff
 80176cc:	773b      	strb	r3, [r7, #28]
 80176ce:	7f3b      	ldrb	r3, [r7, #28]
 80176d0:	777b      	strb	r3, [r7, #29]
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	f04f 32ff 	mov.w	r2, #4294967295
 80176d8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176de:	4619      	mov	r1, r3
 80176e0:	68f8      	ldr	r0, [r7, #12]
 80176e2:	f7fe f9fd 	bl	8015ae0 <move_window>
 80176e6:	4603      	mov	r3, r0
 80176e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80176ea:	7ffb      	ldrb	r3, [r7, #31]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	f040 8090 	bne.w	8017812 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176f6:	781b      	ldrb	r3, [r3, #0]
 80176f8:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80176fa:	7fbb      	ldrb	r3, [r7, #30]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d102      	bne.n	8017706 <dir_find+0x132>
 8017700:	2304      	movs	r3, #4
 8017702:	77fb      	strb	r3, [r7, #31]
 8017704:	e08a      	b.n	801781c <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801770a:	330b      	adds	r3, #11
 801770c:	781b      	ldrb	r3, [r3, #0]
 801770e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017712:	72fb      	strb	r3, [r7, #11]
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	7afa      	ldrb	r2, [r7, #11]
 8017718:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801771a:	7fbb      	ldrb	r3, [r7, #30]
 801771c:	2be5      	cmp	r3, #229	; 0xe5
 801771e:	d007      	beq.n	8017730 <dir_find+0x15c>
 8017720:	7afb      	ldrb	r3, [r7, #11]
 8017722:	f003 0308 	and.w	r3, r3, #8
 8017726:	2b00      	cmp	r3, #0
 8017728:	d009      	beq.n	801773e <dir_find+0x16a>
 801772a:	7afb      	ldrb	r3, [r7, #11]
 801772c:	2b0f      	cmp	r3, #15
 801772e:	d006      	beq.n	801773e <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017730:	23ff      	movs	r3, #255	; 0xff
 8017732:	777b      	strb	r3, [r7, #29]
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	f04f 32ff 	mov.w	r2, #4294967295
 801773a:	64da      	str	r2, [r3, #76]	; 0x4c
 801773c:	e05e      	b.n	80177fc <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801773e:	7afb      	ldrb	r3, [r7, #11]
 8017740:	2b0f      	cmp	r3, #15
 8017742:	d136      	bne.n	80177b2 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801774e:	2b00      	cmp	r3, #0
 8017750:	d154      	bne.n	80177fc <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8017752:	7fbb      	ldrb	r3, [r7, #30]
 8017754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017758:	2b00      	cmp	r3, #0
 801775a:	d00d      	beq.n	8017778 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017760:	7b5b      	ldrb	r3, [r3, #13]
 8017762:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8017764:	7fbb      	ldrb	r3, [r7, #30]
 8017766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801776a:	77bb      	strb	r3, [r7, #30]
 801776c:	7fbb      	ldrb	r3, [r7, #30]
 801776e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017778:	7fba      	ldrb	r2, [r7, #30]
 801777a:	7f7b      	ldrb	r3, [r7, #29]
 801777c:	429a      	cmp	r2, r3
 801777e:	d115      	bne.n	80177ac <dir_find+0x1d8>
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017784:	330d      	adds	r3, #13
 8017786:	781b      	ldrb	r3, [r3, #0]
 8017788:	7f3a      	ldrb	r2, [r7, #28]
 801778a:	429a      	cmp	r2, r3
 801778c:	d10e      	bne.n	80177ac <dir_find+0x1d8>
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	691a      	ldr	r2, [r3, #16]
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017796:	4619      	mov	r1, r3
 8017798:	4610      	mov	r0, r2
 801779a:	f7ff fa43 	bl	8016c24 <cmp_lfn>
 801779e:	4603      	mov	r3, r0
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d003      	beq.n	80177ac <dir_find+0x1d8>
 80177a4:	7f7b      	ldrb	r3, [r7, #29]
 80177a6:	3b01      	subs	r3, #1
 80177a8:	b2db      	uxtb	r3, r3
 80177aa:	e000      	b.n	80177ae <dir_find+0x1da>
 80177ac:	23ff      	movs	r3, #255	; 0xff
 80177ae:	777b      	strb	r3, [r7, #29]
 80177b0:	e024      	b.n	80177fc <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80177b2:	7f7b      	ldrb	r3, [r7, #29]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d109      	bne.n	80177cc <dir_find+0x1f8>
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177bc:	4618      	mov	r0, r3
 80177be:	f7ff fbfd 	bl	8016fbc <sum_sfn>
 80177c2:	4603      	mov	r3, r0
 80177c4:	461a      	mov	r2, r3
 80177c6:	7f3b      	ldrb	r3, [r7, #28]
 80177c8:	4293      	cmp	r3, r2
 80177ca:	d024      	beq.n	8017816 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80177d2:	f003 0301 	and.w	r3, r3, #1
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d10a      	bne.n	80177f0 <dir_find+0x21c>
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	3340      	adds	r3, #64	; 0x40
 80177e2:	220b      	movs	r2, #11
 80177e4:	4619      	mov	r1, r3
 80177e6:	f7fd ff88 	bl	80156fa <mem_cmp>
 80177ea:	4603      	mov	r3, r0
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d014      	beq.n	801781a <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80177f0:	23ff      	movs	r3, #255	; 0xff
 80177f2:	777b      	strb	r3, [r7, #29]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f04f 32ff 	mov.w	r2, #4294967295
 80177fa:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80177fc:	2100      	movs	r1, #0
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	f7ff f88e 	bl	8016920 <dir_next>
 8017804:	4603      	mov	r3, r0
 8017806:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8017808:	7ffb      	ldrb	r3, [r7, #31]
 801780a:	2b00      	cmp	r3, #0
 801780c:	f43f af65 	beq.w	80176da <dir_find+0x106>
 8017810:	e004      	b.n	801781c <dir_find+0x248>
		if (res != FR_OK) break;
 8017812:	bf00      	nop
 8017814:	e002      	b.n	801781c <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017816:	bf00      	nop
 8017818:	e000      	b.n	801781c <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801781a:	bf00      	nop

	return res;
 801781c:	7ffb      	ldrb	r3, [r7, #31]
}
 801781e:	4618      	mov	r0, r3
 8017820:	3724      	adds	r7, #36	; 0x24
 8017822:	46bd      	mov	sp, r7
 8017824:	bd90      	pop	{r4, r7, pc}
	...

08017828 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017828:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801782c:	b0a0      	sub	sp, #128	; 0x80
 801782e:	af00      	add	r7, sp, #0
 8017830:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801783e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8017842:	2b00      	cmp	r3, #0
 8017844:	d001      	beq.n	801784a <dir_register+0x22>
 8017846:	2306      	movs	r3, #6
 8017848:	e198      	b.n	8017b7c <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801784a:	2300      	movs	r3, #0
 801784c:	677b      	str	r3, [r7, #116]	; 0x74
 801784e:	e002      	b.n	8017856 <dir_register+0x2e>
 8017850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017852:	3301      	adds	r3, #1
 8017854:	677b      	str	r3, [r7, #116]	; 0x74
 8017856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017858:	691a      	ldr	r2, [r3, #16]
 801785a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801785c:	005b      	lsls	r3, r3, #1
 801785e:	4413      	add	r3, r2
 8017860:	881b      	ldrh	r3, [r3, #0]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d1f4      	bne.n	8017850 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8017866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017868:	781b      	ldrb	r3, [r3, #0]
 801786a:	2b04      	cmp	r3, #4
 801786c:	f040 80a9 	bne.w	80179c2 <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8017870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017872:	330e      	adds	r3, #14
 8017874:	4aa7      	ldr	r2, [pc, #668]	; (8017b14 <dir_register+0x2ec>)
 8017876:	fba2 2303 	umull	r2, r3, r2, r3
 801787a:	08db      	lsrs	r3, r3, #3
 801787c:	3302      	adds	r3, #2
 801787e:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8017880:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8017882:	6878      	ldr	r0, [r7, #4]
 8017884:	f7ff f932 	bl	8016aec <dir_alloc>
 8017888:	4603      	mov	r3, r0
 801788a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 801788e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017892:	2b00      	cmp	r3, #0
 8017894:	d002      	beq.n	801789c <dir_register+0x74>
 8017896:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801789a:	e16f      	b.n	8017b7c <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80178a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80178a2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80178a6:	440b      	add	r3, r1
 80178a8:	015b      	lsls	r3, r3, #5
 80178aa:	1ad2      	subs	r2, r2, r3
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	689b      	ldr	r3, [r3, #8]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d07a      	beq.n	80179ae <dir_register+0x186>
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	79db      	ldrb	r3, [r3, #7]
 80178bc:	f003 0304 	and.w	r3, r3, #4
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d074      	beq.n	80179ae <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80178ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80178cc:	895b      	ldrh	r3, [r3, #10]
 80178ce:	4618      	mov	r0, r3
 80178d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80178d2:	899b      	ldrh	r3, [r3, #12]
 80178d4:	fb03 f300 	mul.w	r3, r3, r0
 80178d8:	469b      	mov	fp, r3
 80178da:	f04f 0c00 	mov.w	ip, #0
 80178de:	eb1b 0301 	adds.w	r3, fp, r1
 80178e2:	eb4c 0402 	adc.w	r4, ip, r2
 80178e6:	687a      	ldr	r2, [r7, #4]
 80178e8:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7fe fd26 	bl	8016340 <fill_first_frag>
 80178f4:	4603      	mov	r3, r0
 80178f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80178fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d002      	beq.n	8017908 <dir_register+0xe0>
 8017902:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017906:	e139      	b.n	8017b7c <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8017908:	6878      	ldr	r0, [r7, #4]
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801790e:	f04f 32ff 	mov.w	r2, #4294967295
 8017912:	4619      	mov	r1, r3
 8017914:	f7fe fd43 	bl	801639e <fill_last_frag>
 8017918:	4603      	mov	r3, r0
 801791a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801791e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017922:	2b00      	cmp	r3, #0
 8017924:	d002      	beq.n	801792c <dir_register+0x104>
 8017926:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801792a:	e127      	b.n	8017b7c <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 801792c:	687a      	ldr	r2, [r7, #4]
 801792e:	f107 0308 	add.w	r3, r7, #8
 8017932:	4611      	mov	r1, r2
 8017934:	4618      	mov	r0, r3
 8017936:	f7ff fc87 	bl	8017248 <load_obj_dir>
 801793a:	4603      	mov	r3, r0
 801793c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8017940:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017944:	2b00      	cmp	r3, #0
 8017946:	d002      	beq.n	801794e <dir_register+0x126>
 8017948:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801794c:	e116      	b.n	8017b7c <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 801794e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017950:	695b      	ldr	r3, [r3, #20]
 8017952:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801795c:	461a      	mov	r2, r3
 801795e:	4623      	mov	r3, r4
 8017960:	4608      	mov	r0, r1
 8017962:	f7fd fe08 	bl	8015576 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8017966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017968:	695b      	ldr	r3, [r3, #20]
 801796a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8017974:	461a      	mov	r2, r3
 8017976:	4623      	mov	r3, r4
 8017978:	4608      	mov	r0, r1
 801797a:	f7fd fdfc 	bl	8015576 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	79da      	ldrb	r2, [r3, #7]
 8017982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017984:	695b      	ldr	r3, [r3, #20]
 8017986:	3321      	adds	r3, #33	; 0x21
 8017988:	f042 0201 	orr.w	r2, r2, #1
 801798c:	b2d2      	uxtb	r2, r2
 801798e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8017990:	f107 0308 	add.w	r3, r7, #8
 8017994:	4618      	mov	r0, r3
 8017996:	f7ff fc94 	bl	80172c2 <store_xdir>
 801799a:	4603      	mov	r3, r0
 801799c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80179a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d002      	beq.n	80179ae <dir_register+0x186>
 80179a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80179ac:	e0e6      	b.n	8017b7c <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80179ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179b0:	695a      	ldr	r2, [r3, #20]
 80179b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179b4:	691b      	ldr	r3, [r3, #16]
 80179b6:	4619      	mov	r1, r3
 80179b8:	4610      	mov	r0, r2
 80179ba:	f7ff fcdd 	bl	8017378 <create_xdir>
		return FR_OK;
 80179be:	2300      	movs	r3, #0
 80179c0:	e0dc      	b.n	8017b7c <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80179c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80179cc:	220c      	movs	r2, #12
 80179ce:	4618      	mov	r0, r3
 80179d0:	f7fd fe58 	bl	8015684 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80179d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80179d8:	f003 0301 	and.w	r3, r3, #1
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d033      	beq.n	8017a48 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2240      	movs	r2, #64	; 0x40
 80179e4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 80179e8:	2301      	movs	r3, #1
 80179ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80179ec:	e016      	b.n	8017a1c <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80179f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179f6:	691a      	ldr	r2, [r3, #16]
 80179f8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80179fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80179fe:	f7ff fa4d 	bl	8016e9c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8017a02:	6878      	ldr	r0, [r7, #4]
 8017a04:	f7ff fde6 	bl	80175d4 <dir_find>
 8017a08:	4603      	mov	r3, r0
 8017a0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8017a0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d106      	bne.n	8017a24 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 8017a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a18:	3301      	adds	r3, #1
 8017a1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8017a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a1e:	2b63      	cmp	r3, #99	; 0x63
 8017a20:	d9e5      	bls.n	80179ee <dir_register+0x1c6>
 8017a22:	e000      	b.n	8017a26 <dir_register+0x1fe>
			if (res != FR_OK) break;
 8017a24:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8017a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a28:	2b64      	cmp	r3, #100	; 0x64
 8017a2a:	d101      	bne.n	8017a30 <dir_register+0x208>
 8017a2c:	2307      	movs	r3, #7
 8017a2e:	e0a5      	b.n	8017b7c <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8017a30:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017a34:	2b04      	cmp	r3, #4
 8017a36:	d002      	beq.n	8017a3e <dir_register+0x216>
 8017a38:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017a3c:	e09e      	b.n	8017b7c <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8017a3e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8017a48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017a4c:	f003 0302 	and.w	r3, r3, #2
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d007      	beq.n	8017a64 <dir_register+0x23c>
 8017a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017a56:	330c      	adds	r3, #12
 8017a58:	4a2f      	ldr	r2, [pc, #188]	; (8017b18 <dir_register+0x2f0>)
 8017a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8017a5e:	089b      	lsrs	r3, r3, #2
 8017a60:	3301      	adds	r3, #1
 8017a62:	e000      	b.n	8017a66 <dir_register+0x23e>
 8017a64:	2301      	movs	r3, #1
 8017a66:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8017a68:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8017a6a:	6878      	ldr	r0, [r7, #4]
 8017a6c:	f7ff f83e 	bl	8016aec <dir_alloc>
 8017a70:	4603      	mov	r3, r0
 8017a72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8017a76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d14f      	bne.n	8017b1e <dir_register+0x2f6>
 8017a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017a80:	3b01      	subs	r3, #1
 8017a82:	673b      	str	r3, [r7, #112]	; 0x70
 8017a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d049      	beq.n	8017b1e <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017a90:	015b      	lsls	r3, r3, #5
 8017a92:	1ad3      	subs	r3, r2, r3
 8017a94:	4619      	mov	r1, r3
 8017a96:	6878      	ldr	r0, [r7, #4]
 8017a98:	f7fe feae 	bl	80167f8 <dir_sdi>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8017aa2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d139      	bne.n	8017b1e <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	3340      	adds	r3, #64	; 0x40
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f7ff fa84 	bl	8016fbc <sum_sfn>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017abe:	4619      	mov	r1, r3
 8017ac0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017ac2:	f7fe f80d 	bl	8015ae0 <move_window>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8017acc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d123      	bne.n	8017b1c <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8017ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ad6:	6918      	ldr	r0, [r3, #16]
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8017adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017ade:	b2da      	uxtb	r2, r3
 8017ae0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8017ae4:	f7ff f972 	bl	8016dcc <put_lfn>
				fs->wflag = 1;
 8017ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017aea:	2201      	movs	r2, #1
 8017aec:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8017aee:	2100      	movs	r1, #0
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	f7fe ff15 	bl	8016920 <dir_next>
 8017af6:	4603      	mov	r3, r0
 8017af8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8017afc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d10c      	bne.n	8017b1e <dir_register+0x2f6>
 8017b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017b06:	3b01      	subs	r3, #1
 8017b08:	673b      	str	r3, [r7, #112]	; 0x70
 8017b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d1d4      	bne.n	8017aba <dir_register+0x292>
 8017b10:	e005      	b.n	8017b1e <dir_register+0x2f6>
 8017b12:	bf00      	nop
 8017b14:	88888889 	.word	0x88888889
 8017b18:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8017b1c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017b1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d128      	bne.n	8017b78 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b2a:	4619      	mov	r1, r3
 8017b2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017b2e:	f7fd ffd7 	bl	8015ae0 <move_window>
 8017b32:	4603      	mov	r3, r0
 8017b34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8017b38:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d11b      	bne.n	8017b78 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b44:	2220      	movs	r2, #32
 8017b46:	2100      	movs	r1, #0
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f7fd fdbc 	bl	80156c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	3340      	adds	r3, #64	; 0x40
 8017b56:	220b      	movs	r2, #11
 8017b58:	4619      	mov	r1, r3
 8017b5a:	f7fd fd93 	bl	8015684 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b68:	330c      	adds	r3, #12
 8017b6a:	f002 0218 	and.w	r2, r2, #24
 8017b6e:	b2d2      	uxtb	r2, r2
 8017b70:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8017b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b74:	2201      	movs	r2, #1
 8017b76:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017b78:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	3780      	adds	r7, #128	; 0x80
 8017b80:	46bd      	mov	sp, r7
 8017b82:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8017b86:	bf00      	nop

08017b88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b08a      	sub	sp, #40	; 0x28
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
 8017b90:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8017b92:	683b      	ldr	r3, [r7, #0]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	613b      	str	r3, [r7, #16]
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	691b      	ldr	r3, [r3, #16]
 8017b9e:	60fb      	str	r3, [r7, #12]
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	617b      	str	r3, [r7, #20]
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8017ba8:	69bb      	ldr	r3, [r7, #24]
 8017baa:	1c5a      	adds	r2, r3, #1
 8017bac:	61ba      	str	r2, [r7, #24]
 8017bae:	693a      	ldr	r2, [r7, #16]
 8017bb0:	4413      	add	r3, r2
 8017bb2:	781b      	ldrb	r3, [r3, #0]
 8017bb4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8017bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bb8:	2b1f      	cmp	r3, #31
 8017bba:	d940      	bls.n	8017c3e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8017bbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bbe:	2b2f      	cmp	r3, #47	; 0x2f
 8017bc0:	d006      	beq.n	8017bd0 <create_name+0x48>
 8017bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bc4:	2b5c      	cmp	r3, #92	; 0x5c
 8017bc6:	d110      	bne.n	8017bea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017bc8:	e002      	b.n	8017bd0 <create_name+0x48>
 8017bca:	69bb      	ldr	r3, [r7, #24]
 8017bcc:	3301      	adds	r3, #1
 8017bce:	61bb      	str	r3, [r7, #24]
 8017bd0:	693a      	ldr	r2, [r7, #16]
 8017bd2:	69bb      	ldr	r3, [r7, #24]
 8017bd4:	4413      	add	r3, r2
 8017bd6:	781b      	ldrb	r3, [r3, #0]
 8017bd8:	2b2f      	cmp	r3, #47	; 0x2f
 8017bda:	d0f6      	beq.n	8017bca <create_name+0x42>
 8017bdc:	693a      	ldr	r2, [r7, #16]
 8017bde:	69bb      	ldr	r3, [r7, #24]
 8017be0:	4413      	add	r3, r2
 8017be2:	781b      	ldrb	r3, [r3, #0]
 8017be4:	2b5c      	cmp	r3, #92	; 0x5c
 8017be6:	d0f0      	beq.n	8017bca <create_name+0x42>
			break;
 8017be8:	e02a      	b.n	8017c40 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8017bea:	697b      	ldr	r3, [r7, #20]
 8017bec:	2bfe      	cmp	r3, #254	; 0xfe
 8017bee:	d901      	bls.n	8017bf4 <create_name+0x6c>
 8017bf0:	2306      	movs	r3, #6
 8017bf2:	e177      	b.n	8017ee4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8017bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bf6:	b2db      	uxtb	r3, r3
 8017bf8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8017bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bfc:	2101      	movs	r1, #1
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f002 fc70 	bl	801a4e4 <ff_convert>
 8017c04:	4603      	mov	r3, r0
 8017c06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8017c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d101      	bne.n	8017c12 <create_name+0x8a>
 8017c0e:	2306      	movs	r3, #6
 8017c10:	e168      	b.n	8017ee4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8017c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c14:	2b7f      	cmp	r3, #127	; 0x7f
 8017c16:	d809      	bhi.n	8017c2c <create_name+0xa4>
 8017c18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c1a:	4619      	mov	r1, r3
 8017c1c:	48b3      	ldr	r0, [pc, #716]	; (8017eec <create_name+0x364>)
 8017c1e:	f7fd fd93 	bl	8015748 <chk_chr>
 8017c22:	4603      	mov	r3, r0
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d001      	beq.n	8017c2c <create_name+0xa4>
 8017c28:	2306      	movs	r3, #6
 8017c2a:	e15b      	b.n	8017ee4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8017c2c:	697b      	ldr	r3, [r7, #20]
 8017c2e:	1c5a      	adds	r2, r3, #1
 8017c30:	617a      	str	r2, [r7, #20]
 8017c32:	005b      	lsls	r3, r3, #1
 8017c34:	68fa      	ldr	r2, [r7, #12]
 8017c36:	4413      	add	r3, r2
 8017c38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c3a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8017c3c:	e7b4      	b.n	8017ba8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8017c3e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8017c40:	693a      	ldr	r2, [r7, #16]
 8017c42:	69bb      	ldr	r3, [r7, #24]
 8017c44:	441a      	add	r2, r3
 8017c46:	683b      	ldr	r3, [r7, #0]
 8017c48:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c4c:	2b1f      	cmp	r3, #31
 8017c4e:	d801      	bhi.n	8017c54 <create_name+0xcc>
 8017c50:	2304      	movs	r3, #4
 8017c52:	e000      	b.n	8017c56 <create_name+0xce>
 8017c54:	2300      	movs	r3, #0
 8017c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017c5a:	e011      	b.n	8017c80 <create_name+0xf8>
		w = lfn[di - 1];
 8017c5c:	697a      	ldr	r2, [r7, #20]
 8017c5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017c62:	4413      	add	r3, r2
 8017c64:	005b      	lsls	r3, r3, #1
 8017c66:	68fa      	ldr	r2, [r7, #12]
 8017c68:	4413      	add	r3, r2
 8017c6a:	881b      	ldrh	r3, [r3, #0]
 8017c6c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8017c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c70:	2b20      	cmp	r3, #32
 8017c72:	d002      	beq.n	8017c7a <create_name+0xf2>
 8017c74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c76:	2b2e      	cmp	r3, #46	; 0x2e
 8017c78:	d106      	bne.n	8017c88 <create_name+0x100>
		di--;
 8017c7a:	697b      	ldr	r3, [r7, #20]
 8017c7c:	3b01      	subs	r3, #1
 8017c7e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017c80:	697b      	ldr	r3, [r7, #20]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d1ea      	bne.n	8017c5c <create_name+0xd4>
 8017c86:	e000      	b.n	8017c8a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8017c88:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8017c8a:	697b      	ldr	r3, [r7, #20]
 8017c8c:	005b      	lsls	r3, r3, #1
 8017c8e:	68fa      	ldr	r2, [r7, #12]
 8017c90:	4413      	add	r3, r2
 8017c92:	2200      	movs	r2, #0
 8017c94:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8017c96:	697b      	ldr	r3, [r7, #20]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d101      	bne.n	8017ca0 <create_name+0x118>
 8017c9c:	2306      	movs	r3, #6
 8017c9e:	e121      	b.n	8017ee4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	3340      	adds	r3, #64	; 0x40
 8017ca4:	220b      	movs	r2, #11
 8017ca6:	2120      	movs	r1, #32
 8017ca8:	4618      	mov	r0, r3
 8017caa:	f7fd fd0c 	bl	80156c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8017cae:	2300      	movs	r3, #0
 8017cb0:	61bb      	str	r3, [r7, #24]
 8017cb2:	e002      	b.n	8017cba <create_name+0x132>
 8017cb4:	69bb      	ldr	r3, [r7, #24]
 8017cb6:	3301      	adds	r3, #1
 8017cb8:	61bb      	str	r3, [r7, #24]
 8017cba:	69bb      	ldr	r3, [r7, #24]
 8017cbc:	005b      	lsls	r3, r3, #1
 8017cbe:	68fa      	ldr	r2, [r7, #12]
 8017cc0:	4413      	add	r3, r2
 8017cc2:	881b      	ldrh	r3, [r3, #0]
 8017cc4:	2b20      	cmp	r3, #32
 8017cc6:	d0f5      	beq.n	8017cb4 <create_name+0x12c>
 8017cc8:	69bb      	ldr	r3, [r7, #24]
 8017cca:	005b      	lsls	r3, r3, #1
 8017ccc:	68fa      	ldr	r2, [r7, #12]
 8017cce:	4413      	add	r3, r2
 8017cd0:	881b      	ldrh	r3, [r3, #0]
 8017cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8017cd4:	d0ee      	beq.n	8017cb4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8017cd6:	69bb      	ldr	r3, [r7, #24]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d009      	beq.n	8017cf0 <create_name+0x168>
 8017cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ce0:	f043 0303 	orr.w	r3, r3, #3
 8017ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8017ce8:	e002      	b.n	8017cf0 <create_name+0x168>
 8017cea:	697b      	ldr	r3, [r7, #20]
 8017cec:	3b01      	subs	r3, #1
 8017cee:	617b      	str	r3, [r7, #20]
 8017cf0:	697b      	ldr	r3, [r7, #20]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d009      	beq.n	8017d0a <create_name+0x182>
 8017cf6:	697a      	ldr	r2, [r7, #20]
 8017cf8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017cfc:	4413      	add	r3, r2
 8017cfe:	005b      	lsls	r3, r3, #1
 8017d00:	68fa      	ldr	r2, [r7, #12]
 8017d02:	4413      	add	r3, r2
 8017d04:	881b      	ldrh	r3, [r3, #0]
 8017d06:	2b2e      	cmp	r3, #46	; 0x2e
 8017d08:	d1ef      	bne.n	8017cea <create_name+0x162>

	i = b = 0; ni = 8;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017d10:	2300      	movs	r3, #0
 8017d12:	623b      	str	r3, [r7, #32]
 8017d14:	2308      	movs	r3, #8
 8017d16:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8017d18:	69bb      	ldr	r3, [r7, #24]
 8017d1a:	1c5a      	adds	r2, r3, #1
 8017d1c:	61ba      	str	r2, [r7, #24]
 8017d1e:	005b      	lsls	r3, r3, #1
 8017d20:	68fa      	ldr	r2, [r7, #12]
 8017d22:	4413      	add	r3, r2
 8017d24:	881b      	ldrh	r3, [r3, #0]
 8017d26:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8017d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	f000 8090 	beq.w	8017e50 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8017d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d32:	2b20      	cmp	r3, #32
 8017d34:	d006      	beq.n	8017d44 <create_name+0x1bc>
 8017d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d38:	2b2e      	cmp	r3, #46	; 0x2e
 8017d3a:	d10a      	bne.n	8017d52 <create_name+0x1ca>
 8017d3c:	69ba      	ldr	r2, [r7, #24]
 8017d3e:	697b      	ldr	r3, [r7, #20]
 8017d40:	429a      	cmp	r2, r3
 8017d42:	d006      	beq.n	8017d52 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8017d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d48:	f043 0303 	orr.w	r3, r3, #3
 8017d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017d50:	e07d      	b.n	8017e4e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8017d52:	6a3a      	ldr	r2, [r7, #32]
 8017d54:	69fb      	ldr	r3, [r7, #28]
 8017d56:	429a      	cmp	r2, r3
 8017d58:	d203      	bcs.n	8017d62 <create_name+0x1da>
 8017d5a:	69ba      	ldr	r2, [r7, #24]
 8017d5c:	697b      	ldr	r3, [r7, #20]
 8017d5e:	429a      	cmp	r2, r3
 8017d60:	d123      	bne.n	8017daa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8017d62:	69fb      	ldr	r3, [r7, #28]
 8017d64:	2b0b      	cmp	r3, #11
 8017d66:	d106      	bne.n	8017d76 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8017d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d6c:	f043 0303 	orr.w	r3, r3, #3
 8017d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017d74:	e06f      	b.n	8017e56 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8017d76:	69ba      	ldr	r2, [r7, #24]
 8017d78:	697b      	ldr	r3, [r7, #20]
 8017d7a:	429a      	cmp	r2, r3
 8017d7c:	d005      	beq.n	8017d8a <create_name+0x202>
 8017d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d82:	f043 0303 	orr.w	r3, r3, #3
 8017d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8017d8a:	69ba      	ldr	r2, [r7, #24]
 8017d8c:	697b      	ldr	r3, [r7, #20]
 8017d8e:	429a      	cmp	r2, r3
 8017d90:	d860      	bhi.n	8017e54 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8017d92:	697b      	ldr	r3, [r7, #20]
 8017d94:	61bb      	str	r3, [r7, #24]
 8017d96:	2308      	movs	r3, #8
 8017d98:	623b      	str	r3, [r7, #32]
 8017d9a:	230b      	movs	r3, #11
 8017d9c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8017d9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017da2:	009b      	lsls	r3, r3, #2
 8017da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017da8:	e051      	b.n	8017e4e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8017daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017dac:	2b7f      	cmp	r3, #127	; 0x7f
 8017dae:	d914      	bls.n	8017dda <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8017db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017db2:	2100      	movs	r1, #0
 8017db4:	4618      	mov	r0, r3
 8017db6:	f002 fb95 	bl	801a4e4 <ff_convert>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8017dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d004      	beq.n	8017dce <create_name+0x246>
 8017dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017dc6:	3b80      	subs	r3, #128	; 0x80
 8017dc8:	4a49      	ldr	r2, [pc, #292]	; (8017ef0 <create_name+0x368>)
 8017dca:	5cd3      	ldrb	r3, [r2, r3]
 8017dcc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8017dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017dd2:	f043 0302 	orr.w	r3, r3, #2
 8017dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8017dda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d007      	beq.n	8017df0 <create_name+0x268>
 8017de0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017de2:	4619      	mov	r1, r3
 8017de4:	4843      	ldr	r0, [pc, #268]	; (8017ef4 <create_name+0x36c>)
 8017de6:	f7fd fcaf 	bl	8015748 <chk_chr>
 8017dea:	4603      	mov	r3, r0
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d008      	beq.n	8017e02 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8017df0:	235f      	movs	r3, #95	; 0x5f
 8017df2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017df8:	f043 0303 	orr.w	r3, r3, #3
 8017dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017e00:	e01b      	b.n	8017e3a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8017e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017e04:	2b40      	cmp	r3, #64	; 0x40
 8017e06:	d909      	bls.n	8017e1c <create_name+0x294>
 8017e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017e0a:	2b5a      	cmp	r3, #90	; 0x5a
 8017e0c:	d806      	bhi.n	8017e1c <create_name+0x294>
					b |= 2;
 8017e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e12:	f043 0302 	orr.w	r3, r3, #2
 8017e16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017e1a:	e00e      	b.n	8017e3a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8017e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017e1e:	2b60      	cmp	r3, #96	; 0x60
 8017e20:	d90b      	bls.n	8017e3a <create_name+0x2b2>
 8017e22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017e24:	2b7a      	cmp	r3, #122	; 0x7a
 8017e26:	d808      	bhi.n	8017e3a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8017e28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e2c:	f043 0301 	orr.w	r3, r3, #1
 8017e30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017e36:	3b20      	subs	r3, #32
 8017e38:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8017e3a:	6a3b      	ldr	r3, [r7, #32]
 8017e3c:	1c5a      	adds	r2, r3, #1
 8017e3e:	623a      	str	r2, [r7, #32]
 8017e40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017e42:	b2d1      	uxtb	r1, r2
 8017e44:	687a      	ldr	r2, [r7, #4]
 8017e46:	4413      	add	r3, r2
 8017e48:	460a      	mov	r2, r1
 8017e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8017e4e:	e763      	b.n	8017d18 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8017e50:	bf00      	nop
 8017e52:	e000      	b.n	8017e56 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8017e54:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017e5c:	2be5      	cmp	r3, #229	; 0xe5
 8017e5e:	d103      	bne.n	8017e68 <create_name+0x2e0>
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	2205      	movs	r2, #5
 8017e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8017e68:	69fb      	ldr	r3, [r7, #28]
 8017e6a:	2b08      	cmp	r3, #8
 8017e6c:	d104      	bne.n	8017e78 <create_name+0x2f0>
 8017e6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e72:	009b      	lsls	r3, r3, #2
 8017e74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8017e78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e7c:	f003 030c 	and.w	r3, r3, #12
 8017e80:	2b0c      	cmp	r3, #12
 8017e82:	d005      	beq.n	8017e90 <create_name+0x308>
 8017e84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e88:	f003 0303 	and.w	r3, r3, #3
 8017e8c:	2b03      	cmp	r3, #3
 8017e8e:	d105      	bne.n	8017e9c <create_name+0x314>
 8017e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e94:	f043 0302 	orr.w	r3, r3, #2
 8017e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8017e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ea0:	f003 0302 	and.w	r3, r3, #2
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d117      	bne.n	8017ed8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8017ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017eac:	f003 0303 	and.w	r3, r3, #3
 8017eb0:	2b01      	cmp	r3, #1
 8017eb2:	d105      	bne.n	8017ec0 <create_name+0x338>
 8017eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017eb8:	f043 0310 	orr.w	r3, r3, #16
 8017ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8017ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ec4:	f003 030c 	and.w	r3, r3, #12
 8017ec8:	2b04      	cmp	r3, #4
 8017eca:	d105      	bne.n	8017ed8 <create_name+0x350>
 8017ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ed0:	f043 0308 	orr.w	r3, r3, #8
 8017ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017ede:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8017ee2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	3728      	adds	r7, #40	; 0x28
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	bd80      	pop	{r7, pc}
 8017eec:	0801b320 	.word	0x0801b320
 8017ef0:	0801b3fc 	.word	0x0801b3fc
 8017ef4:	0801b32c 	.word	0x0801b32c

08017ef8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017ef8:	b590      	push	{r4, r7, lr}
 8017efa:	b087      	sub	sp, #28
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017f06:	693b      	ldr	r3, [r7, #16]
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017f0c:	e002      	b.n	8017f14 <follow_path+0x1c>
 8017f0e:	683b      	ldr	r3, [r7, #0]
 8017f10:	3301      	adds	r3, #1
 8017f12:	603b      	str	r3, [r7, #0]
 8017f14:	683b      	ldr	r3, [r7, #0]
 8017f16:	781b      	ldrb	r3, [r3, #0]
 8017f18:	2b2f      	cmp	r3, #47	; 0x2f
 8017f1a:	d0f8      	beq.n	8017f0e <follow_path+0x16>
 8017f1c:	683b      	ldr	r3, [r7, #0]
 8017f1e:	781b      	ldrb	r3, [r3, #0]
 8017f20:	2b5c      	cmp	r3, #92	; 0x5c
 8017f22:	d0f4      	beq.n	8017f0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017f24:	693b      	ldr	r3, [r7, #16]
 8017f26:	2200      	movs	r2, #0
 8017f28:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8017f2a:	693b      	ldr	r3, [r7, #16]
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	781b      	ldrb	r3, [r3, #0]
 8017f34:	2b1f      	cmp	r3, #31
 8017f36:	d80a      	bhi.n	8017f4e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	2280      	movs	r2, #128	; 0x80
 8017f3c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8017f40:	2100      	movs	r1, #0
 8017f42:	6878      	ldr	r0, [r7, #4]
 8017f44:	f7fe fc58 	bl	80167f8 <dir_sdi>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	75fb      	strb	r3, [r7, #23]
 8017f4c:	e07c      	b.n	8018048 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017f4e:	463b      	mov	r3, r7
 8017f50:	4619      	mov	r1, r3
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	f7ff fe18 	bl	8017b88 <create_name>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017f5c:	7dfb      	ldrb	r3, [r7, #23]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d16d      	bne.n	801803e <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017f62:	6878      	ldr	r0, [r7, #4]
 8017f64:	f7ff fb36 	bl	80175d4 <dir_find>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8017f72:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017f74:	7dfb      	ldrb	r3, [r7, #23]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d00a      	beq.n	8017f90 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017f7a:	7dfb      	ldrb	r3, [r7, #23]
 8017f7c:	2b04      	cmp	r3, #4
 8017f7e:	d160      	bne.n	8018042 <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017f80:	7afb      	ldrb	r3, [r7, #11]
 8017f82:	f003 0304 	and.w	r3, r3, #4
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d15b      	bne.n	8018042 <follow_path+0x14a>
 8017f8a:	2305      	movs	r3, #5
 8017f8c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017f8e:	e058      	b.n	8018042 <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017f90:	7afb      	ldrb	r3, [r7, #11]
 8017f92:	f003 0304 	and.w	r3, r3, #4
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d155      	bne.n	8018046 <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017f9a:	693b      	ldr	r3, [r7, #16]
 8017f9c:	799b      	ldrb	r3, [r3, #6]
 8017f9e:	f003 0310 	and.w	r3, r3, #16
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d102      	bne.n	8017fac <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8017fa6:	2305      	movs	r3, #5
 8017fa8:	75fb      	strb	r3, [r7, #23]
 8017faa:	e04d      	b.n	8018048 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	781b      	ldrb	r3, [r3, #0]
 8017fb0:	2b04      	cmp	r3, #4
 8017fb2:	d12f      	bne.n	8018014 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 8017fb4:	693b      	ldr	r3, [r7, #16]
 8017fb6:	689a      	ldr	r2, [r3, #8]
 8017fb8:	693b      	ldr	r3, [r7, #16]
 8017fba:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8017fbc:	693b      	ldr	r3, [r7, #16]
 8017fbe:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8017fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8017fc6:	693a      	ldr	r2, [r7, #16]
 8017fc8:	79d2      	ldrb	r2, [r2, #7]
 8017fca:	431a      	orrs	r2, r3
 8017fcc:	693b      	ldr	r3, [r7, #16]
 8017fce:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017fd4:	693b      	ldr	r3, [r7, #16]
 8017fd6:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	695b      	ldr	r3, [r3, #20]
 8017fdc:	3334      	adds	r3, #52	; 0x34
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f7fd f9a2 	bl	8015328 <ld_dword>
 8017fe4:	4602      	mov	r2, r0
 8017fe6:	693b      	ldr	r3, [r7, #16]
 8017fe8:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	695b      	ldr	r3, [r3, #20]
 8017fee:	3321      	adds	r3, #33	; 0x21
 8017ff0:	781b      	ldrb	r3, [r3, #0]
 8017ff2:	f003 0302 	and.w	r3, r3, #2
 8017ff6:	b2da      	uxtb	r2, r3
 8017ff8:	693b      	ldr	r3, [r7, #16]
 8017ffa:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	695b      	ldr	r3, [r3, #20]
 8018000:	3338      	adds	r3, #56	; 0x38
 8018002:	4618      	mov	r0, r3
 8018004:	f7fd f9b3 	bl	801536e <ld_qword>
 8018008:	4603      	mov	r3, r0
 801800a:	460c      	mov	r4, r1
 801800c:	693a      	ldr	r2, [r7, #16]
 801800e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8018012:	e79c      	b.n	8017f4e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801801e:	68fa      	ldr	r2, [r7, #12]
 8018020:	8992      	ldrh	r2, [r2, #12]
 8018022:	fbb3 f0f2 	udiv	r0, r3, r2
 8018026:	fb02 f200 	mul.w	r2, r2, r0
 801802a:	1a9b      	subs	r3, r3, r2
 801802c:	440b      	add	r3, r1
 801802e:	4619      	mov	r1, r3
 8018030:	68f8      	ldr	r0, [r7, #12]
 8018032:	f7fe fdb7 	bl	8016ba4 <ld_clust>
 8018036:	4602      	mov	r2, r0
 8018038:	693b      	ldr	r3, [r7, #16]
 801803a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801803c:	e787      	b.n	8017f4e <follow_path+0x56>
			if (res != FR_OK) break;
 801803e:	bf00      	nop
 8018040:	e002      	b.n	8018048 <follow_path+0x150>
				break;
 8018042:	bf00      	nop
 8018044:	e000      	b.n	8018048 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018046:	bf00      	nop
			}
		}
	}

	return res;
 8018048:	7dfb      	ldrb	r3, [r7, #23]
}
 801804a:	4618      	mov	r0, r3
 801804c:	371c      	adds	r7, #28
 801804e:	46bd      	mov	sp, r7
 8018050:	bd90      	pop	{r4, r7, pc}

08018052 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8018052:	b480      	push	{r7}
 8018054:	b087      	sub	sp, #28
 8018056:	af00      	add	r7, sp, #0
 8018058:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801805a:	f04f 33ff 	mov.w	r3, #4294967295
 801805e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d031      	beq.n	80180cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	617b      	str	r3, [r7, #20]
 801806e:	e002      	b.n	8018076 <get_ldnumber+0x24>
 8018070:	697b      	ldr	r3, [r7, #20]
 8018072:	3301      	adds	r3, #1
 8018074:	617b      	str	r3, [r7, #20]
 8018076:	697b      	ldr	r3, [r7, #20]
 8018078:	781b      	ldrb	r3, [r3, #0]
 801807a:	2b1f      	cmp	r3, #31
 801807c:	d903      	bls.n	8018086 <get_ldnumber+0x34>
 801807e:	697b      	ldr	r3, [r7, #20]
 8018080:	781b      	ldrb	r3, [r3, #0]
 8018082:	2b3a      	cmp	r3, #58	; 0x3a
 8018084:	d1f4      	bne.n	8018070 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018086:	697b      	ldr	r3, [r7, #20]
 8018088:	781b      	ldrb	r3, [r3, #0]
 801808a:	2b3a      	cmp	r3, #58	; 0x3a
 801808c:	d11c      	bne.n	80180c8 <get_ldnumber+0x76>
			tp = *path;
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	1c5a      	adds	r2, r3, #1
 8018098:	60fa      	str	r2, [r7, #12]
 801809a:	781b      	ldrb	r3, [r3, #0]
 801809c:	3b30      	subs	r3, #48	; 0x30
 801809e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80180a0:	68bb      	ldr	r3, [r7, #8]
 80180a2:	2b09      	cmp	r3, #9
 80180a4:	d80e      	bhi.n	80180c4 <get_ldnumber+0x72>
 80180a6:	68fa      	ldr	r2, [r7, #12]
 80180a8:	697b      	ldr	r3, [r7, #20]
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d10a      	bne.n	80180c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80180ae:	68bb      	ldr	r3, [r7, #8]
 80180b0:	2b01      	cmp	r3, #1
 80180b2:	d807      	bhi.n	80180c4 <get_ldnumber+0x72>
					vol = (int)i;
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80180b8:	697b      	ldr	r3, [r7, #20]
 80180ba:	3301      	adds	r3, #1
 80180bc:	617b      	str	r3, [r7, #20]
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	697a      	ldr	r2, [r7, #20]
 80180c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80180c4:	693b      	ldr	r3, [r7, #16]
 80180c6:	e002      	b.n	80180ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80180c8:	2300      	movs	r3, #0
 80180ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80180cc:	693b      	ldr	r3, [r7, #16]
}
 80180ce:	4618      	mov	r0, r3
 80180d0:	371c      	adds	r7, #28
 80180d2:	46bd      	mov	sp, r7
 80180d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d8:	4770      	bx	lr
	...

080180dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b082      	sub	sp, #8
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
 80180e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	2200      	movs	r2, #0
 80180ea:	70da      	strb	r2, [r3, #3]
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	f04f 32ff 	mov.w	r2, #4294967295
 80180f2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80180f4:	6839      	ldr	r1, [r7, #0]
 80180f6:	6878      	ldr	r0, [r7, #4]
 80180f8:	f7fd fcf2 	bl	8015ae0 <move_window>
 80180fc:	4603      	mov	r3, r0
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d001      	beq.n	8018106 <check_fs+0x2a>
 8018102:	2304      	movs	r3, #4
 8018104:	e044      	b.n	8018190 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	333c      	adds	r3, #60	; 0x3c
 801810a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801810e:	4618      	mov	r0, r3
 8018110:	f7fd f8f2 	bl	80152f8 <ld_word>
 8018114:	4603      	mov	r3, r0
 8018116:	461a      	mov	r2, r3
 8018118:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801811c:	429a      	cmp	r2, r3
 801811e:	d001      	beq.n	8018124 <check_fs+0x48>
 8018120:	2303      	movs	r3, #3
 8018122:	e035      	b.n	8018190 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801812a:	2be9      	cmp	r3, #233	; 0xe9
 801812c:	d009      	beq.n	8018142 <check_fs+0x66>
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018134:	2beb      	cmp	r3, #235	; 0xeb
 8018136:	d11e      	bne.n	8018176 <check_fs+0x9a>
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801813e:	2b90      	cmp	r3, #144	; 0x90
 8018140:	d119      	bne.n	8018176 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	333c      	adds	r3, #60	; 0x3c
 8018146:	3336      	adds	r3, #54	; 0x36
 8018148:	4618      	mov	r0, r3
 801814a:	f7fd f8ed 	bl	8015328 <ld_dword>
 801814e:	4603      	mov	r3, r0
 8018150:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018154:	4a10      	ldr	r2, [pc, #64]	; (8018198 <check_fs+0xbc>)
 8018156:	4293      	cmp	r3, r2
 8018158:	d101      	bne.n	801815e <check_fs+0x82>
 801815a:	2300      	movs	r3, #0
 801815c:	e018      	b.n	8018190 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	333c      	adds	r3, #60	; 0x3c
 8018162:	3352      	adds	r3, #82	; 0x52
 8018164:	4618      	mov	r0, r3
 8018166:	f7fd f8df 	bl	8015328 <ld_dword>
 801816a:	4602      	mov	r2, r0
 801816c:	4b0b      	ldr	r3, [pc, #44]	; (801819c <check_fs+0xc0>)
 801816e:	429a      	cmp	r2, r3
 8018170:	d101      	bne.n	8018176 <check_fs+0x9a>
 8018172:	2300      	movs	r3, #0
 8018174:	e00c      	b.n	8018190 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	333c      	adds	r3, #60	; 0x3c
 801817a:	220b      	movs	r2, #11
 801817c:	4908      	ldr	r1, [pc, #32]	; (80181a0 <check_fs+0xc4>)
 801817e:	4618      	mov	r0, r3
 8018180:	f7fd fabb 	bl	80156fa <mem_cmp>
 8018184:	4603      	mov	r3, r0
 8018186:	2b00      	cmp	r3, #0
 8018188:	d101      	bne.n	801818e <check_fs+0xb2>
 801818a:	2301      	movs	r3, #1
 801818c:	e000      	b.n	8018190 <check_fs+0xb4>
#endif
	return 2;
 801818e:	2302      	movs	r3, #2
}
 8018190:	4618      	mov	r0, r3
 8018192:	3708      	adds	r7, #8
 8018194:	46bd      	mov	sp, r7
 8018196:	bd80      	pop	{r7, pc}
 8018198:	00544146 	.word	0x00544146
 801819c:	33544146 	.word	0x33544146
 80181a0:	0801b334 	.word	0x0801b334

080181a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80181a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80181a8:	b098      	sub	sp, #96	; 0x60
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	60f8      	str	r0, [r7, #12]
 80181ae:	60b9      	str	r1, [r7, #8]
 80181b0:	4613      	mov	r3, r2
 80181b2:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80181b4:	68bb      	ldr	r3, [r7, #8]
 80181b6:	2200      	movs	r2, #0
 80181b8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80181ba:	68f8      	ldr	r0, [r7, #12]
 80181bc:	f7ff ff49 	bl	8018052 <get_ldnumber>
 80181c0:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 80181c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	da01      	bge.n	80181cc <find_volume+0x28>
 80181c8:	230b      	movs	r3, #11
 80181ca:	e368      	b.n	801889e <find_volume+0x6fa>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80181cc:	4aaa      	ldr	r2, [pc, #680]	; (8018478 <find_volume+0x2d4>)
 80181ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80181d4:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80181d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d101      	bne.n	80181e0 <find_volume+0x3c>
 80181dc:	230c      	movs	r3, #12
 80181de:	e35e      	b.n	801889e <find_volume+0x6fa>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80181e4:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80181e6:	79fb      	ldrb	r3, [r7, #7]
 80181e8:	f023 0301 	bic.w	r3, r3, #1
 80181ec:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80181ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80181f0:	781b      	ldrb	r3, [r3, #0]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d01a      	beq.n	801822c <find_volume+0x88>
		stat = disk_status(fs->drv);
 80181f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80181f8:	785b      	ldrb	r3, [r3, #1]
 80181fa:	4618      	mov	r0, r3
 80181fc:	f7fc ffde 	bl	80151bc <disk_status>
 8018200:	4603      	mov	r3, r0
 8018202:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8018206:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801820a:	f003 0301 	and.w	r3, r3, #1
 801820e:	2b00      	cmp	r3, #0
 8018210:	d10c      	bne.n	801822c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018212:	79fb      	ldrb	r3, [r7, #7]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d007      	beq.n	8018228 <find_volume+0x84>
 8018218:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801821c:	f003 0304 	and.w	r3, r3, #4
 8018220:	2b00      	cmp	r3, #0
 8018222:	d001      	beq.n	8018228 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8018224:	230a      	movs	r3, #10
 8018226:	e33a      	b.n	801889e <find_volume+0x6fa>
			}
			return FR_OK;				/* The file system object is valid */
 8018228:	2300      	movs	r3, #0
 801822a:	e338      	b.n	801889e <find_volume+0x6fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801822c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801822e:	2200      	movs	r2, #0
 8018230:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018234:	b2da      	uxtb	r2, r3
 8018236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018238:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801823a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801823c:	785b      	ldrb	r3, [r3, #1]
 801823e:	4618      	mov	r0, r3
 8018240:	f7fc ffd6 	bl	80151f0 <disk_initialize>
 8018244:	4603      	mov	r3, r0
 8018246:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801824a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801824e:	f003 0301 	and.w	r3, r3, #1
 8018252:	2b00      	cmp	r3, #0
 8018254:	d001      	beq.n	801825a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018256:	2303      	movs	r3, #3
 8018258:	e321      	b.n	801889e <find_volume+0x6fa>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801825a:	79fb      	ldrb	r3, [r7, #7]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d007      	beq.n	8018270 <find_volume+0xcc>
 8018260:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018264:	f003 0304 	and.w	r3, r3, #4
 8018268:	2b00      	cmp	r3, #0
 801826a:	d001      	beq.n	8018270 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 801826c:	230a      	movs	r3, #10
 801826e:	e316      	b.n	801889e <find_volume+0x6fa>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8018270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018272:	7858      	ldrb	r0, [r3, #1]
 8018274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018276:	330c      	adds	r3, #12
 8018278:	461a      	mov	r2, r3
 801827a:	2102      	movs	r1, #2
 801827c:	f7fd f81e 	bl	80152bc <disk_ioctl>
 8018280:	4603      	mov	r3, r0
 8018282:	2b00      	cmp	r3, #0
 8018284:	d001      	beq.n	801828a <find_volume+0xe6>
 8018286:	2301      	movs	r3, #1
 8018288:	e309      	b.n	801889e <find_volume+0x6fa>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801828a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801828c:	899b      	ldrh	r3, [r3, #12]
 801828e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018292:	d80d      	bhi.n	80182b0 <find_volume+0x10c>
 8018294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018296:	899b      	ldrh	r3, [r3, #12]
 8018298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801829c:	d308      	bcc.n	80182b0 <find_volume+0x10c>
 801829e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182a0:	899b      	ldrh	r3, [r3, #12]
 80182a2:	461a      	mov	r2, r3
 80182a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182a6:	899b      	ldrh	r3, [r3, #12]
 80182a8:	3b01      	subs	r3, #1
 80182aa:	4013      	ands	r3, r2
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d001      	beq.n	80182b4 <find_volume+0x110>
 80182b0:	2301      	movs	r3, #1
 80182b2:	e2f4      	b.n	801889e <find_volume+0x6fa>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80182b4:	2300      	movs	r3, #0
 80182b6:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80182b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80182ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80182bc:	f7ff ff0e 	bl	80180dc <check_fs>
 80182c0:	4603      	mov	r3, r0
 80182c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80182c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80182ca:	2b02      	cmp	r3, #2
 80182cc:	d14b      	bne.n	8018366 <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80182ce:	2300      	movs	r3, #0
 80182d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80182d2:	e01f      	b.n	8018314 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80182d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182d6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80182da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80182dc:	011b      	lsls	r3, r3, #4
 80182de:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80182e2:	4413      	add	r3, r2
 80182e4:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80182e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182e8:	3304      	adds	r3, #4
 80182ea:	781b      	ldrb	r3, [r3, #0]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d006      	beq.n	80182fe <find_volume+0x15a>
 80182f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182f2:	3308      	adds	r3, #8
 80182f4:	4618      	mov	r0, r3
 80182f6:	f7fd f817 	bl	8015328 <ld_dword>
 80182fa:	4602      	mov	r2, r0
 80182fc:	e000      	b.n	8018300 <find_volume+0x15c>
 80182fe:	2200      	movs	r2, #0
 8018300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018302:	009b      	lsls	r3, r3, #2
 8018304:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8018308:	440b      	add	r3, r1
 801830a:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801830e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018310:	3301      	adds	r3, #1
 8018312:	64bb      	str	r3, [r7, #72]	; 0x48
 8018314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018316:	2b03      	cmp	r3, #3
 8018318:	d9dc      	bls.n	80182d4 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801831a:	2300      	movs	r3, #0
 801831c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 801831e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018320:	2b00      	cmp	r3, #0
 8018322:	d002      	beq.n	801832a <find_volume+0x186>
 8018324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018326:	3b01      	subs	r3, #1
 8018328:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 801832a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801832c:	009b      	lsls	r3, r3, #2
 801832e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8018332:	4413      	add	r3, r2
 8018334:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8018338:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801833a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801833c:	2b00      	cmp	r3, #0
 801833e:	d005      	beq.n	801834c <find_volume+0x1a8>
 8018340:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018342:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018344:	f7ff feca 	bl	80180dc <check_fs>
 8018348:	4603      	mov	r3, r0
 801834a:	e000      	b.n	801834e <find_volume+0x1aa>
 801834c:	2303      	movs	r3, #3
 801834e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018356:	2b01      	cmp	r3, #1
 8018358:	d905      	bls.n	8018366 <find_volume+0x1c2>
 801835a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801835c:	3301      	adds	r3, #1
 801835e:	64bb      	str	r3, [r7, #72]	; 0x48
 8018360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018362:	2b03      	cmp	r3, #3
 8018364:	d9e1      	bls.n	801832a <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801836a:	2b04      	cmp	r3, #4
 801836c:	d101      	bne.n	8018372 <find_volume+0x1ce>
 801836e:	2301      	movs	r3, #1
 8018370:	e295      	b.n	801889e <find_volume+0x6fa>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018376:	2b01      	cmp	r3, #1
 8018378:	d901      	bls.n	801837e <find_volume+0x1da>
 801837a:	230d      	movs	r3, #13
 801837c:	e28f      	b.n	801889e <find_volume+0x6fa>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 801837e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018382:	2b01      	cmp	r3, #1
 8018384:	f040 8101 	bne.w	801858a <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8018388:	230b      	movs	r3, #11
 801838a:	64bb      	str	r3, [r7, #72]	; 0x48
 801838c:	e002      	b.n	8018394 <find_volume+0x1f0>
 801838e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018390:	3301      	adds	r3, #1
 8018392:	64bb      	str	r3, [r7, #72]	; 0x48
 8018394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018396:	2b3f      	cmp	r3, #63	; 0x3f
 8018398:	d806      	bhi.n	80183a8 <find_volume+0x204>
 801839a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801839c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801839e:	4413      	add	r3, r2
 80183a0:	333c      	adds	r3, #60	; 0x3c
 80183a2:	781b      	ldrb	r3, [r3, #0]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d0f2      	beq.n	801838e <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80183a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80183aa:	2b3f      	cmp	r3, #63	; 0x3f
 80183ac:	d801      	bhi.n	80183b2 <find_volume+0x20e>
 80183ae:	230d      	movs	r3, #13
 80183b0:	e275      	b.n	801889e <find_volume+0x6fa>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80183b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183b4:	333c      	adds	r3, #60	; 0x3c
 80183b6:	3368      	adds	r3, #104	; 0x68
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7fc ff9d 	bl	80152f8 <ld_word>
 80183be:	4603      	mov	r3, r0
 80183c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80183c4:	d001      	beq.n	80183ca <find_volume+0x226>
 80183c6:	230d      	movs	r3, #13
 80183c8:	e269      	b.n	801889e <find_volume+0x6fa>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80183ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183cc:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80183d0:	461a      	mov	r2, r3
 80183d2:	2301      	movs	r3, #1
 80183d4:	4093      	lsls	r3, r2
 80183d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80183d8:	8992      	ldrh	r2, [r2, #12]
 80183da:	4293      	cmp	r3, r2
 80183dc:	d001      	beq.n	80183e2 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 80183de:	230d      	movs	r3, #13
 80183e0:	e25d      	b.n	801889e <find_volume+0x6fa>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80183e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183e4:	333c      	adds	r3, #60	; 0x3c
 80183e6:	3348      	adds	r3, #72	; 0x48
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7fc ffc0 	bl	801536e <ld_qword>
 80183ee:	460a      	mov	r2, r1
 80183f0:	4601      	mov	r1, r0
 80183f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80183f4:	469b      	mov	fp, r3
 80183f6:	f04f 0c00 	mov.w	ip, #0
 80183fa:	eb1b 0301 	adds.w	r3, fp, r1
 80183fe:	eb4c 0402 	adc.w	r4, ip, r2
 8018402:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8018406:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801840a:	2c01      	cmp	r4, #1
 801840c:	bf08      	it	eq
 801840e:	2b00      	cmpeq	r3, #0
 8018410:	d301      	bcc.n	8018416 <find_volume+0x272>
 8018412:	230d      	movs	r3, #13
 8018414:	e243      	b.n	801889e <find_volume+0x6fa>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8018416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018418:	333c      	adds	r3, #60	; 0x3c
 801841a:	3354      	adds	r3, #84	; 0x54
 801841c:	4618      	mov	r0, r3
 801841e:	f7fc ff83 	bl	8015328 <ld_dword>
 8018422:	4602      	mov	r2, r0
 8018424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018426:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8018428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801842a:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 801842e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018430:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8018432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018434:	789b      	ldrb	r3, [r3, #2]
 8018436:	2b01      	cmp	r3, #1
 8018438:	d001      	beq.n	801843e <find_volume+0x29a>
 801843a:	230d      	movs	r3, #13
 801843c:	e22f      	b.n	801889e <find_volume+0x6fa>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 801843e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018440:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8018444:	461a      	mov	r2, r3
 8018446:	2301      	movs	r3, #1
 8018448:	4093      	lsls	r3, r2
 801844a:	b29a      	uxth	r2, r3
 801844c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801844e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8018450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018452:	895b      	ldrh	r3, [r3, #10]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d101      	bne.n	801845c <find_volume+0x2b8>
 8018458:	230d      	movs	r3, #13
 801845a:	e220      	b.n	801889e <find_volume+0x6fa>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 801845c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801845e:	333c      	adds	r3, #60	; 0x3c
 8018460:	335c      	adds	r3, #92	; 0x5c
 8018462:	4618      	mov	r0, r3
 8018464:	f7fc ff60 	bl	8015328 <ld_dword>
 8018468:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 801846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801846c:	4a03      	ldr	r2, [pc, #12]	; (801847c <find_volume+0x2d8>)
 801846e:	4293      	cmp	r3, r2
 8018470:	d906      	bls.n	8018480 <find_volume+0x2dc>
 8018472:	230d      	movs	r3, #13
 8018474:	e213      	b.n	801889e <find_volume+0x6fa>
 8018476:	bf00      	nop
 8018478:	240002d0 	.word	0x240002d0
 801847c:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8018480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018482:	1c9a      	adds	r2, r3, #2
 8018484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018486:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8018488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801848a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801848c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 801848e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018490:	333c      	adds	r3, #60	; 0x3c
 8018492:	3358      	adds	r3, #88	; 0x58
 8018494:	4618      	mov	r0, r3
 8018496:	f7fc ff47 	bl	8015328 <ld_dword>
 801849a:	4602      	mov	r2, r0
 801849c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801849e:	441a      	add	r2, r3
 80184a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184a2:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80184a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184a6:	333c      	adds	r3, #60	; 0x3c
 80184a8:	3350      	adds	r3, #80	; 0x50
 80184aa:	4618      	mov	r0, r3
 80184ac:	f7fc ff3c 	bl	8015328 <ld_dword>
 80184b0:	4602      	mov	r2, r0
 80184b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80184b4:	441a      	add	r2, r3
 80184b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184b8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80184ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80184be:	4619      	mov	r1, r3
 80184c0:	f04f 0200 	mov.w	r2, #0
 80184c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184c6:	895b      	ldrh	r3, [r3, #10]
 80184c8:	4618      	mov	r0, r3
 80184ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184cc:	fb03 f300 	mul.w	r3, r3, r0
 80184d0:	469b      	mov	fp, r3
 80184d2:	f04f 0c00 	mov.w	ip, #0
 80184d6:	eb1b 0301 	adds.w	r3, fp, r1
 80184da:	eb4c 0402 	adc.w	r4, ip, r2
 80184de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80184e2:	42a2      	cmp	r2, r4
 80184e4:	bf08      	it	eq
 80184e6:	4299      	cmpeq	r1, r3
 80184e8:	d201      	bcs.n	80184ee <find_volume+0x34a>
 80184ea:	230d      	movs	r3, #13
 80184ec:	e1d7      	b.n	801889e <find_volume+0x6fa>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80184ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184f0:	333c      	adds	r3, #60	; 0x3c
 80184f2:	3360      	adds	r3, #96	; 0x60
 80184f4:	4618      	mov	r0, r3
 80184f6:	f7fc ff17 	bl	8015328 <ld_dword>
 80184fa:	4602      	mov	r2, r0
 80184fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184fe:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8018500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018504:	4619      	mov	r1, r3
 8018506:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018508:	f7fd fb88 	bl	8015c1c <clust2sect>
 801850c:	4603      	mov	r3, r0
 801850e:	4619      	mov	r1, r3
 8018510:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018512:	f7fd fae5 	bl	8015ae0 <move_window>
 8018516:	4603      	mov	r3, r0
 8018518:	2b00      	cmp	r3, #0
 801851a:	d001      	beq.n	8018520 <find_volume+0x37c>
 801851c:	2301      	movs	r3, #1
 801851e:	e1be      	b.n	801889e <find_volume+0x6fa>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8018520:	2300      	movs	r3, #0
 8018522:	64bb      	str	r3, [r7, #72]	; 0x48
 8018524:	e015      	b.n	8018552 <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8018526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801852a:	4413      	add	r3, r2
 801852c:	333c      	adds	r3, #60	; 0x3c
 801852e:	781b      	ldrb	r3, [r3, #0]
 8018530:	2b81      	cmp	r3, #129	; 0x81
 8018532:	d10b      	bne.n	801854c <find_volume+0x3a8>
 8018534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018536:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801853a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801853c:	3314      	adds	r3, #20
 801853e:	4413      	add	r3, r2
 8018540:	4618      	mov	r0, r3
 8018542:	f7fc fef1 	bl	8015328 <ld_dword>
 8018546:	4603      	mov	r3, r0
 8018548:	2b02      	cmp	r3, #2
 801854a:	d009      	beq.n	8018560 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 801854c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801854e:	3320      	adds	r3, #32
 8018550:	64bb      	str	r3, [r7, #72]	; 0x48
 8018552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018554:	899b      	ldrh	r3, [r3, #12]
 8018556:	461a      	mov	r2, r3
 8018558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801855a:	4293      	cmp	r3, r2
 801855c:	d3e3      	bcc.n	8018526 <find_volume+0x382>
 801855e:	e000      	b.n	8018562 <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8018560:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8018562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018564:	899b      	ldrh	r3, [r3, #12]
 8018566:	461a      	mov	r2, r3
 8018568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801856a:	4293      	cmp	r3, r2
 801856c:	d101      	bne.n	8018572 <find_volume+0x3ce>
 801856e:	230d      	movs	r3, #13
 8018570:	e195      	b.n	801889e <find_volume+0x6fa>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018574:	f04f 32ff 	mov.w	r2, #4294967295
 8018578:	61da      	str	r2, [r3, #28]
 801857a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801857c:	69da      	ldr	r2, [r3, #28]
 801857e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018580:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8018582:	2304      	movs	r3, #4
 8018584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018588:	e177      	b.n	801887a <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801858a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801858c:	333c      	adds	r3, #60	; 0x3c
 801858e:	330b      	adds	r3, #11
 8018590:	4618      	mov	r0, r3
 8018592:	f7fc feb1 	bl	80152f8 <ld_word>
 8018596:	4603      	mov	r3, r0
 8018598:	461a      	mov	r2, r3
 801859a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801859c:	899b      	ldrh	r3, [r3, #12]
 801859e:	429a      	cmp	r2, r3
 80185a0:	d001      	beq.n	80185a6 <find_volume+0x402>
 80185a2:	230d      	movs	r3, #13
 80185a4:	e17b      	b.n	801889e <find_volume+0x6fa>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80185a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185a8:	333c      	adds	r3, #60	; 0x3c
 80185aa:	3316      	adds	r3, #22
 80185ac:	4618      	mov	r0, r3
 80185ae:	f7fc fea3 	bl	80152f8 <ld_word>
 80185b2:	4603      	mov	r3, r0
 80185b4:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80185b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d106      	bne.n	80185ca <find_volume+0x426>
 80185bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185be:	333c      	adds	r3, #60	; 0x3c
 80185c0:	3324      	adds	r3, #36	; 0x24
 80185c2:	4618      	mov	r0, r3
 80185c4:	f7fc feb0 	bl	8015328 <ld_dword>
 80185c8:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 80185ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80185ce:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80185d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185d2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80185d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185d8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80185da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185dc:	789b      	ldrb	r3, [r3, #2]
 80185de:	2b01      	cmp	r3, #1
 80185e0:	d005      	beq.n	80185ee <find_volume+0x44a>
 80185e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185e4:	789b      	ldrb	r3, [r3, #2]
 80185e6:	2b02      	cmp	r3, #2
 80185e8:	d001      	beq.n	80185ee <find_volume+0x44a>
 80185ea:	230d      	movs	r3, #13
 80185ec:	e157      	b.n	801889e <find_volume+0x6fa>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80185ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185f0:	789b      	ldrb	r3, [r3, #2]
 80185f2:	461a      	mov	r2, r3
 80185f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185f6:	fb02 f303 	mul.w	r3, r2, r3
 80185fa:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80185fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185fe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8018602:	b29a      	uxth	r2, r3
 8018604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018606:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8018608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801860a:	895b      	ldrh	r3, [r3, #10]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d008      	beq.n	8018622 <find_volume+0x47e>
 8018610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018612:	895b      	ldrh	r3, [r3, #10]
 8018614:	461a      	mov	r2, r3
 8018616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018618:	895b      	ldrh	r3, [r3, #10]
 801861a:	3b01      	subs	r3, #1
 801861c:	4013      	ands	r3, r2
 801861e:	2b00      	cmp	r3, #0
 8018620:	d001      	beq.n	8018626 <find_volume+0x482>
 8018622:	230d      	movs	r3, #13
 8018624:	e13b      	b.n	801889e <find_volume+0x6fa>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018628:	333c      	adds	r3, #60	; 0x3c
 801862a:	3311      	adds	r3, #17
 801862c:	4618      	mov	r0, r3
 801862e:	f7fc fe63 	bl	80152f8 <ld_word>
 8018632:	4603      	mov	r3, r0
 8018634:	461a      	mov	r2, r3
 8018636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018638:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801863a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801863c:	891b      	ldrh	r3, [r3, #8]
 801863e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018640:	8992      	ldrh	r2, [r2, #12]
 8018642:	0952      	lsrs	r2, r2, #5
 8018644:	b292      	uxth	r2, r2
 8018646:	fbb3 f1f2 	udiv	r1, r3, r2
 801864a:	fb02 f201 	mul.w	r2, r2, r1
 801864e:	1a9b      	subs	r3, r3, r2
 8018650:	b29b      	uxth	r3, r3
 8018652:	2b00      	cmp	r3, #0
 8018654:	d001      	beq.n	801865a <find_volume+0x4b6>
 8018656:	230d      	movs	r3, #13
 8018658:	e121      	b.n	801889e <find_volume+0x6fa>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801865a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801865c:	333c      	adds	r3, #60	; 0x3c
 801865e:	3313      	adds	r3, #19
 8018660:	4618      	mov	r0, r3
 8018662:	f7fc fe49 	bl	80152f8 <ld_word>
 8018666:	4603      	mov	r3, r0
 8018668:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801866a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801866c:	2b00      	cmp	r3, #0
 801866e:	d106      	bne.n	801867e <find_volume+0x4da>
 8018670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018672:	333c      	adds	r3, #60	; 0x3c
 8018674:	3320      	adds	r3, #32
 8018676:	4618      	mov	r0, r3
 8018678:	f7fc fe56 	bl	8015328 <ld_dword>
 801867c:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801867e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018680:	333c      	adds	r3, #60	; 0x3c
 8018682:	330e      	adds	r3, #14
 8018684:	4618      	mov	r0, r3
 8018686:	f7fc fe37 	bl	80152f8 <ld_word>
 801868a:	4603      	mov	r3, r0
 801868c:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801868e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018690:	2b00      	cmp	r3, #0
 8018692:	d101      	bne.n	8018698 <find_volume+0x4f4>
 8018694:	230d      	movs	r3, #13
 8018696:	e102      	b.n	801889e <find_volume+0x6fa>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018698:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801869a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801869c:	4413      	add	r3, r2
 801869e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80186a0:	8911      	ldrh	r1, [r2, #8]
 80186a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80186a4:	8992      	ldrh	r2, [r2, #12]
 80186a6:	0952      	lsrs	r2, r2, #5
 80186a8:	b292      	uxth	r2, r2
 80186aa:	fbb1 f2f2 	udiv	r2, r1, r2
 80186ae:	b292      	uxth	r2, r2
 80186b0:	4413      	add	r3, r2
 80186b2:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80186b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80186b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186b8:	429a      	cmp	r2, r3
 80186ba:	d201      	bcs.n	80186c0 <find_volume+0x51c>
 80186bc:	230d      	movs	r3, #13
 80186be:	e0ee      	b.n	801889e <find_volume+0x6fa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80186c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80186c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186c4:	1ad3      	subs	r3, r2, r3
 80186c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80186c8:	8952      	ldrh	r2, [r2, #10]
 80186ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80186ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80186d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d101      	bne.n	80186da <find_volume+0x536>
 80186d6:	230d      	movs	r3, #13
 80186d8:	e0e1      	b.n	801889e <find_volume+0x6fa>
		fmt = FS_FAT32;
 80186da:	2303      	movs	r3, #3
 80186dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80186e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80186e6:	4293      	cmp	r3, r2
 80186e8:	d802      	bhi.n	80186f0 <find_volume+0x54c>
 80186ea:	2302      	movs	r3, #2
 80186ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80186f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80186f6:	4293      	cmp	r3, r2
 80186f8:	d802      	bhi.n	8018700 <find_volume+0x55c>
 80186fa:	2301      	movs	r3, #1
 80186fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018702:	1c9a      	adds	r2, r3, #2
 8018704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018706:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8018708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801870a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801870c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801870e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018712:	441a      	add	r2, r3
 8018714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018716:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8018718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801871c:	441a      	add	r2, r3
 801871e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018720:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8018722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018726:	2b03      	cmp	r3, #3
 8018728:	d11e      	bne.n	8018768 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801872a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801872c:	333c      	adds	r3, #60	; 0x3c
 801872e:	332a      	adds	r3, #42	; 0x2a
 8018730:	4618      	mov	r0, r3
 8018732:	f7fc fde1 	bl	80152f8 <ld_word>
 8018736:	4603      	mov	r3, r0
 8018738:	2b00      	cmp	r3, #0
 801873a:	d001      	beq.n	8018740 <find_volume+0x59c>
 801873c:	230d      	movs	r3, #13
 801873e:	e0ae      	b.n	801889e <find_volume+0x6fa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8018740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018742:	891b      	ldrh	r3, [r3, #8]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d001      	beq.n	801874c <find_volume+0x5a8>
 8018748:	230d      	movs	r3, #13
 801874a:	e0a8      	b.n	801889e <find_volume+0x6fa>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801874c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801874e:	333c      	adds	r3, #60	; 0x3c
 8018750:	332c      	adds	r3, #44	; 0x2c
 8018752:	4618      	mov	r0, r3
 8018754:	f7fc fde8 	bl	8015328 <ld_dword>
 8018758:	4602      	mov	r2, r0
 801875a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801875c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801875e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018760:	6a1b      	ldr	r3, [r3, #32]
 8018762:	009b      	lsls	r3, r3, #2
 8018764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018766:	e01f      	b.n	80187a8 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801876a:	891b      	ldrh	r3, [r3, #8]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d101      	bne.n	8018774 <find_volume+0x5d0>
 8018770:	230d      	movs	r3, #13
 8018772:	e094      	b.n	801889e <find_volume+0x6fa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801877a:	441a      	add	r2, r3
 801877c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801877e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8018780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018784:	2b02      	cmp	r3, #2
 8018786:	d103      	bne.n	8018790 <find_volume+0x5ec>
 8018788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801878a:	6a1b      	ldr	r3, [r3, #32]
 801878c:	005b      	lsls	r3, r3, #1
 801878e:	e00a      	b.n	80187a6 <find_volume+0x602>
 8018790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018792:	6a1a      	ldr	r2, [r3, #32]
 8018794:	4613      	mov	r3, r2
 8018796:	005b      	lsls	r3, r3, #1
 8018798:	4413      	add	r3, r2
 801879a:	085a      	lsrs	r2, r3, #1
 801879c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801879e:	6a1b      	ldr	r3, [r3, #32]
 80187a0:	f003 0301 	and.w	r3, r3, #1
 80187a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80187a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80187a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80187ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187ae:	899b      	ldrh	r3, [r3, #12]
 80187b0:	4619      	mov	r1, r3
 80187b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80187b4:	440b      	add	r3, r1
 80187b6:	3b01      	subs	r3, #1
 80187b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80187ba:	8989      	ldrh	r1, [r1, #12]
 80187bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80187c0:	429a      	cmp	r2, r3
 80187c2:	d201      	bcs.n	80187c8 <find_volume+0x624>
 80187c4:	230d      	movs	r3, #13
 80187c6:	e06a      	b.n	801889e <find_volume+0x6fa>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80187c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187ca:	f04f 32ff 	mov.w	r2, #4294967295
 80187ce:	61da      	str	r2, [r3, #28]
 80187d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187d2:	69da      	ldr	r2, [r3, #28]
 80187d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187d6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80187d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187da:	2280      	movs	r2, #128	; 0x80
 80187dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80187de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80187e2:	2b03      	cmp	r3, #3
 80187e4:	d149      	bne.n	801887a <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80187e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187e8:	333c      	adds	r3, #60	; 0x3c
 80187ea:	3330      	adds	r3, #48	; 0x30
 80187ec:	4618      	mov	r0, r3
 80187ee:	f7fc fd83 	bl	80152f8 <ld_word>
 80187f2:	4603      	mov	r3, r0
 80187f4:	2b01      	cmp	r3, #1
 80187f6:	d140      	bne.n	801887a <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 80187f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80187fa:	3301      	adds	r3, #1
 80187fc:	4619      	mov	r1, r3
 80187fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018800:	f7fd f96e 	bl	8015ae0 <move_window>
 8018804:	4603      	mov	r3, r0
 8018806:	2b00      	cmp	r3, #0
 8018808:	d137      	bne.n	801887a <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 801880a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801880c:	2200      	movs	r2, #0
 801880e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018812:	333c      	adds	r3, #60	; 0x3c
 8018814:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018818:	4618      	mov	r0, r3
 801881a:	f7fc fd6d 	bl	80152f8 <ld_word>
 801881e:	4603      	mov	r3, r0
 8018820:	461a      	mov	r2, r3
 8018822:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018826:	429a      	cmp	r2, r3
 8018828:	d127      	bne.n	801887a <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801882a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801882c:	333c      	adds	r3, #60	; 0x3c
 801882e:	4618      	mov	r0, r3
 8018830:	f7fc fd7a 	bl	8015328 <ld_dword>
 8018834:	4602      	mov	r2, r0
 8018836:	4b1c      	ldr	r3, [pc, #112]	; (80188a8 <find_volume+0x704>)
 8018838:	429a      	cmp	r2, r3
 801883a:	d11e      	bne.n	801887a <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801883c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801883e:	333c      	adds	r3, #60	; 0x3c
 8018840:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018844:	4618      	mov	r0, r3
 8018846:	f7fc fd6f 	bl	8015328 <ld_dword>
 801884a:	4602      	mov	r2, r0
 801884c:	4b17      	ldr	r3, [pc, #92]	; (80188ac <find_volume+0x708>)
 801884e:	429a      	cmp	r2, r3
 8018850:	d113      	bne.n	801887a <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018854:	333c      	adds	r3, #60	; 0x3c
 8018856:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801885a:	4618      	mov	r0, r3
 801885c:	f7fc fd64 	bl	8015328 <ld_dword>
 8018860:	4602      	mov	r2, r0
 8018862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018864:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018868:	333c      	adds	r3, #60	; 0x3c
 801886a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801886e:	4618      	mov	r0, r3
 8018870:	f7fc fd5a 	bl	8015328 <ld_dword>
 8018874:	4602      	mov	r2, r0
 8018876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018878:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801887a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801887c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8018880:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018882:	4b0b      	ldr	r3, [pc, #44]	; (80188b0 <find_volume+0x70c>)
 8018884:	881b      	ldrh	r3, [r3, #0]
 8018886:	3301      	adds	r3, #1
 8018888:	b29a      	uxth	r2, r3
 801888a:	4b09      	ldr	r3, [pc, #36]	; (80188b0 <find_volume+0x70c>)
 801888c:	801a      	strh	r2, [r3, #0]
 801888e:	4b08      	ldr	r3, [pc, #32]	; (80188b0 <find_volume+0x70c>)
 8018890:	881a      	ldrh	r2, [r3, #0]
 8018892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018894:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018896:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018898:	f7fd f8ba 	bl	8015a10 <clear_lock>
#endif
	return FR_OK;
 801889c:	2300      	movs	r3, #0
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3760      	adds	r7, #96	; 0x60
 80188a2:	46bd      	mov	sp, r7
 80188a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80188a8:	41615252 	.word	0x41615252
 80188ac:	61417272 	.word	0x61417272
 80188b0:	240002d8 	.word	0x240002d8

080188b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b084      	sub	sp, #16
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
 80188bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80188be:	2309      	movs	r3, #9
 80188c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d01c      	beq.n	8018902 <validate+0x4e>
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d018      	beq.n	8018902 <validate+0x4e>
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	781b      	ldrb	r3, [r3, #0]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d013      	beq.n	8018902 <validate+0x4e>
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	889a      	ldrh	r2, [r3, #4]
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	88db      	ldrh	r3, [r3, #6]
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d10c      	bne.n	8018902 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	785b      	ldrb	r3, [r3, #1]
 80188ee:	4618      	mov	r0, r3
 80188f0:	f7fc fc64 	bl	80151bc <disk_status>
 80188f4:	4603      	mov	r3, r0
 80188f6:	f003 0301 	and.w	r3, r3, #1
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d101      	bne.n	8018902 <validate+0x4e>
			res = FR_OK;
 80188fe:	2300      	movs	r3, #0
 8018900:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018902:	7bfb      	ldrb	r3, [r7, #15]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d102      	bne.n	801890e <validate+0x5a>
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	e000      	b.n	8018910 <validate+0x5c>
 801890e:	2300      	movs	r3, #0
 8018910:	683a      	ldr	r2, [r7, #0]
 8018912:	6013      	str	r3, [r2, #0]
	return res;
 8018914:	7bfb      	ldrb	r3, [r7, #15]
}
 8018916:	4618      	mov	r0, r3
 8018918:	3710      	adds	r7, #16
 801891a:	46bd      	mov	sp, r7
 801891c:	bd80      	pop	{r7, pc}
	...

08018920 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b088      	sub	sp, #32
 8018924:	af00      	add	r7, sp, #0
 8018926:	60f8      	str	r0, [r7, #12]
 8018928:	60b9      	str	r1, [r7, #8]
 801892a:	4613      	mov	r3, r2
 801892c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801892e:	68bb      	ldr	r3, [r7, #8]
 8018930:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018932:	f107 0310 	add.w	r3, r7, #16
 8018936:	4618      	mov	r0, r3
 8018938:	f7ff fb8b 	bl	8018052 <get_ldnumber>
 801893c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801893e:	69fb      	ldr	r3, [r7, #28]
 8018940:	2b00      	cmp	r3, #0
 8018942:	da01      	bge.n	8018948 <f_mount+0x28>
 8018944:	230b      	movs	r3, #11
 8018946:	e02b      	b.n	80189a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018948:	4a17      	ldr	r2, [pc, #92]	; (80189a8 <f_mount+0x88>)
 801894a:	69fb      	ldr	r3, [r7, #28]
 801894c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018950:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018952:	69bb      	ldr	r3, [r7, #24]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d005      	beq.n	8018964 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018958:	69b8      	ldr	r0, [r7, #24]
 801895a:	f7fd f859 	bl	8015a10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801895e:	69bb      	ldr	r3, [r7, #24]
 8018960:	2200      	movs	r2, #0
 8018962:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d002      	beq.n	8018970 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	2200      	movs	r2, #0
 801896e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018970:	68fa      	ldr	r2, [r7, #12]
 8018972:	490d      	ldr	r1, [pc, #52]	; (80189a8 <f_mount+0x88>)
 8018974:	69fb      	ldr	r3, [r7, #28]
 8018976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d002      	beq.n	8018986 <f_mount+0x66>
 8018980:	79fb      	ldrb	r3, [r7, #7]
 8018982:	2b01      	cmp	r3, #1
 8018984:	d001      	beq.n	801898a <f_mount+0x6a>
 8018986:	2300      	movs	r3, #0
 8018988:	e00a      	b.n	80189a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801898a:	f107 010c 	add.w	r1, r7, #12
 801898e:	f107 0308 	add.w	r3, r7, #8
 8018992:	2200      	movs	r2, #0
 8018994:	4618      	mov	r0, r3
 8018996:	f7ff fc05 	bl	80181a4 <find_volume>
 801899a:	4603      	mov	r3, r0
 801899c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801899e:	7dfb      	ldrb	r3, [r7, #23]
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3720      	adds	r7, #32
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}
 80189a8:	240002d0 	.word	0x240002d0

080189ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80189ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80189b0:	b0a4      	sub	sp, #144	; 0x90
 80189b2:	af00      	add	r7, sp, #0
 80189b4:	60f8      	str	r0, [r7, #12]
 80189b6:	60b9      	str	r1, [r7, #8]
 80189b8:	4613      	mov	r3, r2
 80189ba:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d101      	bne.n	80189c6 <f_open+0x1a>
 80189c2:	2309      	movs	r3, #9
 80189c4:	e2bd      	b.n	8018f42 <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80189c6:	79fb      	ldrb	r3, [r7, #7]
 80189c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80189cc:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80189ce:	79fa      	ldrb	r2, [r7, #7]
 80189d0:	f107 0114 	add.w	r1, r7, #20
 80189d4:	f107 0308 	add.w	r3, r7, #8
 80189d8:	4618      	mov	r0, r3
 80189da:	f7ff fbe3 	bl	80181a4 <find_volume>
 80189de:	4603      	mov	r3, r0
 80189e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 80189e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	f040 82a1 	bne.w	8018f30 <f_open+0x584>
		dj.obj.fs = fs;
 80189ee:	697b      	ldr	r3, [r7, #20]
 80189f0:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 80189f2:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80189f6:	f001 fe3b 	bl	801a670 <ff_memalloc>
 80189fa:	67f8      	str	r0, [r7, #124]	; 0x7c
 80189fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d101      	bne.n	8018a06 <f_open+0x5a>
 8018a02:	2311      	movs	r3, #17
 8018a04:	e29d      	b.n	8018f42 <f_open+0x596>
 8018a06:	697b      	ldr	r3, [r7, #20]
 8018a08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8018a0a:	611a      	str	r2, [r3, #16]
 8018a0c:	697b      	ldr	r3, [r7, #20]
 8018a0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8018a10:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8018a14:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8018a16:	68ba      	ldr	r2, [r7, #8]
 8018a18:	f107 0318 	add.w	r3, r7, #24
 8018a1c:	4611      	mov	r1, r2
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f7ff fa6a 	bl	8017ef8 <follow_path>
 8018a24:	4603      	mov	r3, r0
 8018a26:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018a2a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d11a      	bne.n	8018a68 <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018a32:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8018a36:	b25b      	sxtb	r3, r3
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	da03      	bge.n	8018a44 <f_open+0x98>
				res = FR_INVALID_NAME;
 8018a3c:	2306      	movs	r3, #6
 8018a3e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8018a42:	e011      	b.n	8018a68 <f_open+0xbc>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018a44:	79fb      	ldrb	r3, [r7, #7]
 8018a46:	f023 0301 	bic.w	r3, r3, #1
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	bf14      	ite	ne
 8018a4e:	2301      	movne	r3, #1
 8018a50:	2300      	moveq	r3, #0
 8018a52:	b2db      	uxtb	r3, r3
 8018a54:	461a      	mov	r2, r3
 8018a56:	f107 0318 	add.w	r3, r7, #24
 8018a5a:	4611      	mov	r1, r2
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f7fc fe8f 	bl	8015780 <chk_lock>
 8018a62:	4603      	mov	r3, r0
 8018a64:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018a68:	79fb      	ldrb	r3, [r7, #7]
 8018a6a:	f003 031c 	and.w	r3, r3, #28
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	f000 8109 	beq.w	8018c86 <f_open+0x2da>
			if (res != FR_OK) {					/* No file, create new */
 8018a74:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d017      	beq.n	8018aac <f_open+0x100>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018a7c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018a80:	2b04      	cmp	r3, #4
 8018a82:	d10e      	bne.n	8018aa2 <f_open+0xf6>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018a84:	f7fc fed8 	bl	8015838 <enq_lock>
 8018a88:	4603      	mov	r3, r0
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d006      	beq.n	8018a9c <f_open+0xf0>
 8018a8e:	f107 0318 	add.w	r3, r7, #24
 8018a92:	4618      	mov	r0, r3
 8018a94:	f7fe fec8 	bl	8017828 <dir_register>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	e000      	b.n	8018a9e <f_open+0xf2>
 8018a9c:	2312      	movs	r3, #18
 8018a9e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8018aa2:	79fb      	ldrb	r3, [r7, #7]
 8018aa4:	f043 0308 	orr.w	r3, r3, #8
 8018aa8:	71fb      	strb	r3, [r7, #7]
 8018aaa:	e010      	b.n	8018ace <f_open+0x122>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018aac:	7fbb      	ldrb	r3, [r7, #30]
 8018aae:	f003 0311 	and.w	r3, r3, #17
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d003      	beq.n	8018abe <f_open+0x112>
					res = FR_DENIED;
 8018ab6:	2307      	movs	r3, #7
 8018ab8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8018abc:	e007      	b.n	8018ace <f_open+0x122>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018abe:	79fb      	ldrb	r3, [r7, #7]
 8018ac0:	f003 0304 	and.w	r3, r3, #4
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d002      	beq.n	8018ace <f_open+0x122>
 8018ac8:	2308      	movs	r3, #8
 8018aca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018ace:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	f040 80f1 	bne.w	8018cba <f_open+0x30e>
 8018ad8:	79fb      	ldrb	r3, [r7, #7]
 8018ada:	f003 0308 	and.w	r3, r3, #8
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	f000 80eb 	beq.w	8018cba <f_open+0x30e>
				dw = GET_FATTIME();
 8018ae4:	f7f9 ff00 	bl	80128e8 <get_fattime>
 8018ae8:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8018aea:	697b      	ldr	r3, [r7, #20]
 8018aec:	781b      	ldrb	r3, [r3, #0]
 8018aee:	2b04      	cmp	r3, #4
 8018af0:	f040 8082 	bne.w	8018bf8 <f_open+0x24c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8018af4:	697a      	ldr	r2, [r7, #20]
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8018afa:	697b      	ldr	r3, [r7, #20]
 8018afc:	695b      	ldr	r3, [r3, #20]
 8018afe:	3334      	adds	r3, #52	; 0x34
 8018b00:	4618      	mov	r0, r3
 8018b02:	f7fc fc11 	bl	8015328 <ld_dword>
 8018b06:	4602      	mov	r2, r0
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8018b0c:	697b      	ldr	r3, [r7, #20]
 8018b0e:	695b      	ldr	r3, [r3, #20]
 8018b10:	3338      	adds	r3, #56	; 0x38
 8018b12:	4618      	mov	r0, r3
 8018b14:	f7fc fc2b 	bl	801536e <ld_qword>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	460c      	mov	r4, r1
 8018b1c:	68fa      	ldr	r2, [r7, #12]
 8018b1e:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8018b22:	697b      	ldr	r3, [r7, #20]
 8018b24:	695b      	ldr	r3, [r3, #20]
 8018b26:	3321      	adds	r3, #33	; 0x21
 8018b28:	781b      	ldrb	r3, [r3, #0]
 8018b2a:	f003 0302 	and.w	r3, r3, #2
 8018b2e:	b2da      	uxtb	r2, r3
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	2200      	movs	r2, #0
 8018b38:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8018b3a:	697b      	ldr	r3, [r7, #20]
 8018b3c:	695b      	ldr	r3, [r3, #20]
 8018b3e:	3308      	adds	r3, #8
 8018b40:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8018b42:	4618      	mov	r0, r3
 8018b44:	f7fc fceb 	bl	801551e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	695b      	ldr	r3, [r3, #20]
 8018b4c:	3314      	adds	r3, #20
 8018b4e:	2200      	movs	r2, #0
 8018b50:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8018b52:	697b      	ldr	r3, [r7, #20]
 8018b54:	695b      	ldr	r3, [r3, #20]
 8018b56:	330c      	adds	r3, #12
 8018b58:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	f7fc fcdf 	bl	801551e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8018b60:	697b      	ldr	r3, [r7, #20]
 8018b62:	695b      	ldr	r3, [r3, #20]
 8018b64:	3315      	adds	r3, #21
 8018b66:	2200      	movs	r2, #0
 8018b68:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8018b6a:	697b      	ldr	r3, [r7, #20]
 8018b6c:	695b      	ldr	r3, [r3, #20]
 8018b6e:	3304      	adds	r3, #4
 8018b70:	2220      	movs	r2, #32
 8018b72:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8018b74:	697b      	ldr	r3, [r7, #20]
 8018b76:	695b      	ldr	r3, [r3, #20]
 8018b78:	3334      	adds	r3, #52	; 0x34
 8018b7a:	2100      	movs	r1, #0
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	f7fc fcce 	bl	801551e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8018b82:	697b      	ldr	r3, [r7, #20]
 8018b84:	695b      	ldr	r3, [r3, #20]
 8018b86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018b8a:	f04f 0200 	mov.w	r2, #0
 8018b8e:	f04f 0300 	mov.w	r3, #0
 8018b92:	4608      	mov	r0, r1
 8018b94:	f7fc fcef 	bl	8015576 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8018b98:	697b      	ldr	r3, [r7, #20]
 8018b9a:	695b      	ldr	r3, [r3, #20]
 8018b9c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8018ba0:	f04f 0200 	mov.w	r2, #0
 8018ba4:	f04f 0300 	mov.w	r3, #0
 8018ba8:	4608      	mov	r0, r1
 8018baa:	f7fc fce4 	bl	8015576 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8018bae:	697b      	ldr	r3, [r7, #20]
 8018bb0:	695b      	ldr	r3, [r3, #20]
 8018bb2:	3321      	adds	r3, #33	; 0x21
 8018bb4:	2201      	movs	r2, #1
 8018bb6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8018bb8:	f107 0318 	add.w	r3, r7, #24
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	f7fe fb80 	bl	80172c2 <store_xdir>
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8018bc8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d174      	bne.n	8018cba <f_open+0x30e>
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	689b      	ldr	r3, [r3, #8]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d070      	beq.n	8018cba <f_open+0x30e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8018bd8:	68f8      	ldr	r0, [r7, #12]
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	689b      	ldr	r3, [r3, #8]
 8018bde:	2200      	movs	r2, #0
 8018be0:	4619      	mov	r1, r3
 8018be2:	f7fd fc0d 	bl	8016400 <remove_chain>
 8018be6:	4603      	mov	r3, r0
 8018be8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	689a      	ldr	r2, [r3, #8]
 8018bf0:	697b      	ldr	r3, [r7, #20]
 8018bf2:	3a01      	subs	r2, #1
 8018bf4:	619a      	str	r2, [r3, #24]
 8018bf6:	e060      	b.n	8018cba <f_open+0x30e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018bfa:	330e      	adds	r3, #14
 8018bfc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f7fc fc8d 	bl	801551e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c06:	3316      	adds	r3, #22
 8018c08:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7fc fc87 	bl	801551e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c12:	330b      	adds	r3, #11
 8018c14:	2220      	movs	r2, #32
 8018c16:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018c18:	697b      	ldr	r3, [r7, #20]
 8018c1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018c1c:	4611      	mov	r1, r2
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f7fd ffc0 	bl	8016ba4 <ld_clust>
 8018c24:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018c26:	697b      	ldr	r3, [r7, #20]
 8018c28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	f7fd ffd8 	bl	8016be2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c34:	331c      	adds	r3, #28
 8018c36:	2100      	movs	r1, #0
 8018c38:	4618      	mov	r0, r3
 8018c3a:	f7fc fc70 	bl	801551e <st_dword>
					fs->wflag = 1;
 8018c3e:	697b      	ldr	r3, [r7, #20]
 8018c40:	2201      	movs	r2, #1
 8018c42:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d037      	beq.n	8018cba <f_open+0x30e>
						dw = fs->winsect;
 8018c4a:	697b      	ldr	r3, [r7, #20]
 8018c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c4e:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 8018c50:	f107 0318 	add.w	r3, r7, #24
 8018c54:	2200      	movs	r2, #0
 8018c56:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018c58:	4618      	mov	r0, r3
 8018c5a:	f7fd fbd1 	bl	8016400 <remove_chain>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 8018c64:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d126      	bne.n	8018cba <f_open+0x30e>
							res = move_window(fs, dw);
 8018c6c:	697b      	ldr	r3, [r7, #20]
 8018c6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8018c70:	4618      	mov	r0, r3
 8018c72:	f7fc ff35 	bl	8015ae0 <move_window>
 8018c76:	4603      	mov	r3, r0
 8018c78:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018c7c:	697b      	ldr	r3, [r7, #20]
 8018c7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018c80:	3a01      	subs	r2, #1
 8018c82:	619a      	str	r2, [r3, #24]
 8018c84:	e019      	b.n	8018cba <f_open+0x30e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018c86:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d115      	bne.n	8018cba <f_open+0x30e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018c8e:	7fbb      	ldrb	r3, [r7, #30]
 8018c90:	f003 0310 	and.w	r3, r3, #16
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d003      	beq.n	8018ca0 <f_open+0x2f4>
					res = FR_NO_FILE;
 8018c98:	2304      	movs	r3, #4
 8018c9a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8018c9e:	e00c      	b.n	8018cba <f_open+0x30e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018ca0:	79fb      	ldrb	r3, [r7, #7]
 8018ca2:	f003 0302 	and.w	r3, r3, #2
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d007      	beq.n	8018cba <f_open+0x30e>
 8018caa:	7fbb      	ldrb	r3, [r7, #30]
 8018cac:	f003 0301 	and.w	r3, r3, #1
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d002      	beq.n	8018cba <f_open+0x30e>
						res = FR_DENIED;
 8018cb4:	2307      	movs	r3, #7
 8018cb6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 8018cba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d128      	bne.n	8018d14 <f_open+0x368>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018cc2:	79fb      	ldrb	r3, [r7, #7]
 8018cc4:	f003 0308 	and.w	r3, r3, #8
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d003      	beq.n	8018cd4 <f_open+0x328>
				mode |= FA_MODIFIED;
 8018ccc:	79fb      	ldrb	r3, [r7, #7]
 8018cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cd2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018cd4:	697b      	ldr	r3, [r7, #20]
 8018cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8018cdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018ce2:	79fb      	ldrb	r3, [r7, #7]
 8018ce4:	f023 0301 	bic.w	r3, r3, #1
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	bf14      	ite	ne
 8018cec:	2301      	movne	r3, #1
 8018cee:	2300      	moveq	r3, #0
 8018cf0:	b2db      	uxtb	r3, r3
 8018cf2:	461a      	mov	r2, r3
 8018cf4:	f107 0318 	add.w	r3, r7, #24
 8018cf8:	4611      	mov	r1, r2
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f7fc fdbe 	bl	801587c <inc_lock>
 8018d00:	4602      	mov	r2, r0
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d102      	bne.n	8018d14 <f_open+0x368>
 8018d0e:	2302      	movs	r3, #2
 8018d10:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018d14:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	f040 8106 	bne.w	8018f2a <f_open+0x57e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8018d1e:	697b      	ldr	r3, [r7, #20]
 8018d20:	781b      	ldrb	r3, [r3, #0]
 8018d22:	2b04      	cmp	r3, #4
 8018d24:	d12b      	bne.n	8018d7e <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8018d26:	6a3a      	ldr	r2, [r7, #32]
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8018d2c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8018d30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8018d34:	7ffa      	ldrb	r2, [r7, #31]
 8018d36:	431a      	orrs	r2, r3
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8018d3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8018d42:	697b      	ldr	r3, [r7, #20]
 8018d44:	695b      	ldr	r3, [r3, #20]
 8018d46:	3334      	adds	r3, #52	; 0x34
 8018d48:	4618      	mov	r0, r3
 8018d4a:	f7fc faed 	bl	8015328 <ld_dword>
 8018d4e:	4602      	mov	r2, r0
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8018d54:	697b      	ldr	r3, [r7, #20]
 8018d56:	695b      	ldr	r3, [r3, #20]
 8018d58:	3338      	adds	r3, #56	; 0x38
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f7fc fb07 	bl	801536e <ld_qword>
 8018d60:	4603      	mov	r3, r0
 8018d62:	460c      	mov	r4, r1
 8018d64:	68fa      	ldr	r2, [r7, #12]
 8018d66:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8018d6a:	697b      	ldr	r3, [r7, #20]
 8018d6c:	695b      	ldr	r3, [r3, #20]
 8018d6e:	3321      	adds	r3, #33	; 0x21
 8018d70:	781b      	ldrb	r3, [r3, #0]
 8018d72:	f003 0302 	and.w	r3, r3, #2
 8018d76:	b2da      	uxtb	r2, r3
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	71da      	strb	r2, [r3, #7]
 8018d7c:	e013      	b.n	8018da6 <f_open+0x3fa>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018d7e:	697b      	ldr	r3, [r7, #20]
 8018d80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018d82:	4611      	mov	r1, r2
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7fd ff0d 	bl	8016ba4 <ld_clust>
 8018d8a:	4602      	mov	r2, r0
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d92:	331c      	adds	r3, #28
 8018d94:	4618      	mov	r0, r3
 8018d96:	f7fc fac7 	bl	8015328 <ld_dword>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	f04f 0400 	mov.w	r4, #0
 8018da0:	68fa      	ldr	r2, [r7, #12]
 8018da2:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	2200      	movs	r2, #0
 8018daa:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018dac:	697a      	ldr	r2, [r7, #20]
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018db2:	697b      	ldr	r3, [r7, #20]
 8018db4:	88da      	ldrh	r2, [r3, #6]
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	79fa      	ldrb	r2, [r7, #7]
 8018dbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018dd0:	68fa      	ldr	r2, [r7, #12]
 8018dd2:	f04f 0300 	mov.w	r3, #0
 8018dd6:	f04f 0400 	mov.w	r4, #0
 8018dda:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	3354      	adds	r3, #84	; 0x54
 8018de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018de6:	2100      	movs	r1, #0
 8018de8:	4618      	mov	r0, r3
 8018dea:	f7fc fc6c 	bl	80156c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018dee:	79fb      	ldrb	r3, [r7, #7]
 8018df0:	f003 0320 	and.w	r3, r3, #32
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	f000 8098 	beq.w	8018f2a <f_open+0x57e>
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018e00:	4323      	orrs	r3, r4
 8018e02:	f000 8092 	beq.w	8018f2a <f_open+0x57e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018e0c:	68fa      	ldr	r2, [r7, #12]
 8018e0e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018e12:	697b      	ldr	r3, [r7, #20]
 8018e14:	895b      	ldrh	r3, [r3, #10]
 8018e16:	461a      	mov	r2, r3
 8018e18:	697b      	ldr	r3, [r7, #20]
 8018e1a:	899b      	ldrh	r3, [r3, #12]
 8018e1c:	fb03 f302 	mul.w	r3, r3, r2
 8018e20:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	689b      	ldr	r3, [r3, #8]
 8018e26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018e30:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8018e34:	e024      	b.n	8018e80 <f_open+0x4d4>
					clst = get_fat(&fp->obj, clst);
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	f7fc ff0d 	bl	8015c5c <get_fat>
 8018e42:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 8018e46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018e4a:	2b01      	cmp	r3, #1
 8018e4c:	d802      	bhi.n	8018e54 <f_open+0x4a8>
 8018e4e:	2302      	movs	r3, #2
 8018e50:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e5c:	d102      	bne.n	8018e64 <f_open+0x4b8>
 8018e5e:	2301      	movs	r3, #1
 8018e60:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018e64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018e66:	469b      	mov	fp, r3
 8018e68:	f04f 0c00 	mov.w	ip, #0
 8018e6c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8018e70:	460b      	mov	r3, r1
 8018e72:	4614      	mov	r4, r2
 8018e74:	ebb3 030b 	subs.w	r3, r3, fp
 8018e78:	eb64 040c 	sbc.w	r4, r4, ip
 8018e7c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8018e80:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d109      	bne.n	8018e9c <f_open+0x4f0>
 8018e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018e8a:	4619      	mov	r1, r3
 8018e8c:	f04f 0200 	mov.w	r2, #0
 8018e90:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8018e94:	42a2      	cmp	r2, r4
 8018e96:	bf08      	it	eq
 8018e98:	4299      	cmpeq	r1, r3
 8018e9a:	d3cc      	bcc.n	8018e36 <f_open+0x48a>
				}
				fp->clust = clst;
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018ea2:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018ea4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d13e      	bne.n	8018f2a <f_open+0x57e>
 8018eac:	697b      	ldr	r3, [r7, #20]
 8018eae:	899b      	ldrh	r3, [r3, #12]
 8018eb0:	b29b      	uxth	r3, r3
 8018eb2:	f04f 0400 	mov.w	r4, #0
 8018eb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8018eba:	461a      	mov	r2, r3
 8018ebc:	4623      	mov	r3, r4
 8018ebe:	f7e7 fa0b 	bl	80002d8 <__aeabi_uldivmod>
 8018ec2:	461c      	mov	r4, r3
 8018ec4:	4613      	mov	r3, r2
 8018ec6:	4323      	orrs	r3, r4
 8018ec8:	d02f      	beq.n	8018f2a <f_open+0x57e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018eca:	697b      	ldr	r3, [r7, #20]
 8018ecc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	f7fc fea3 	bl	8015c1c <clust2sect>
 8018ed6:	66f8      	str	r0, [r7, #108]	; 0x6c
 8018ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d103      	bne.n	8018ee6 <f_open+0x53a>
						res = FR_INT_ERR;
 8018ede:	2302      	movs	r3, #2
 8018ee0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8018ee4:	e021      	b.n	8018f2a <f_open+0x57e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018ee6:	697b      	ldr	r3, [r7, #20]
 8018ee8:	899b      	ldrh	r3, [r3, #12]
 8018eea:	b29b      	uxth	r3, r3
 8018eec:	f04f 0400 	mov.w	r4, #0
 8018ef0:	461a      	mov	r2, r3
 8018ef2:	4623      	mov	r3, r4
 8018ef4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8018ef8:	f7e7 f9ee 	bl	80002d8 <__aeabi_uldivmod>
 8018efc:	4603      	mov	r3, r0
 8018efe:	460c      	mov	r4, r1
 8018f00:	461a      	mov	r2, r3
 8018f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f04:	441a      	add	r2, r3
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018f0a:	697b      	ldr	r3, [r7, #20]
 8018f0c:	7858      	ldrb	r0, [r3, #1]
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018f18:	2301      	movs	r3, #1
 8018f1a:	f7fc f98f 	bl	801523c <disk_read>
 8018f1e:	4603      	mov	r3, r0
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d002      	beq.n	8018f2a <f_open+0x57e>
 8018f24:	2301      	movs	r3, #1
 8018f26:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 8018f2a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8018f2c:	f001 fbac 	bl	801a688 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018f30:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d002      	beq.n	8018f3e <f_open+0x592>
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	2200      	movs	r2, #0
 8018f3c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018f3e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	3790      	adds	r7, #144	; 0x90
 8018f46:	46bd      	mov	sp, r7
 8018f48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08018f4c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8018f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f4e:	b091      	sub	sp, #68	; 0x44
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	60b9      	str	r1, [r7, #8]
 8018f56:	607a      	str	r2, [r7, #4]
 8018f58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8018f5a:	68bb      	ldr	r3, [r7, #8]
 8018f5c:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	2200      	movs	r2, #0
 8018f62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	f107 0214 	add.w	r2, r7, #20
 8018f6a:	4611      	mov	r1, r2
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	f7ff fca1 	bl	80188b4 <validate>
 8018f72:	4603      	mov	r3, r0
 8018f74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018f78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d108      	bne.n	8018f92 <f_read+0x46>
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8018f8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d002      	beq.n	8018f98 <f_read+0x4c>
 8018f92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018f96:	e16a      	b.n	801926e <f_read+0x322>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018f9e:	f003 0301 	and.w	r3, r3, #1
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d101      	bne.n	8018faa <f_read+0x5e>
 8018fa6:	2307      	movs	r3, #7
 8018fa8:	e161      	b.n	801926e <f_read+0x322>
	remain = fp->obj.objsize - fp->fptr;
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 8018fb6:	460b      	mov	r3, r1
 8018fb8:	4614      	mov	r4, r2
 8018fba:	1b5b      	subs	r3, r3, r5
 8018fbc:	eb64 0406 	sbc.w	r4, r4, r6
 8018fc0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	f04f 0400 	mov.w	r4, #0
 8018fca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8018fce:	42a2      	cmp	r2, r4
 8018fd0:	bf08      	it	eq
 8018fd2:	4299      	cmpeq	r1, r3
 8018fd4:	f080 8146 	bcs.w	8019264 <f_read+0x318>
 8018fd8:	6a3b      	ldr	r3, [r7, #32]
 8018fda:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8018fdc:	e142      	b.n	8019264 <f_read+0x318>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8018fe4:	697b      	ldr	r3, [r7, #20]
 8018fe6:	899b      	ldrh	r3, [r3, #12]
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	f04f 0400 	mov.w	r4, #0
 8018fee:	461a      	mov	r2, r3
 8018ff0:	4623      	mov	r3, r4
 8018ff2:	f7e7 f971 	bl	80002d8 <__aeabi_uldivmod>
 8018ff6:	461c      	mov	r4, r3
 8018ff8:	4613      	mov	r3, r2
 8018ffa:	4323      	orrs	r3, r4
 8018ffc:	f040 80eb 	bne.w	80191d6 <f_read+0x28a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8019006:	697b      	ldr	r3, [r7, #20]
 8019008:	899b      	ldrh	r3, [r3, #12]
 801900a:	b29b      	uxth	r3, r3
 801900c:	f04f 0400 	mov.w	r4, #0
 8019010:	461a      	mov	r2, r3
 8019012:	4623      	mov	r3, r4
 8019014:	f7e7 f960 	bl	80002d8 <__aeabi_uldivmod>
 8019018:	4603      	mov	r3, r0
 801901a:	460c      	mov	r4, r1
 801901c:	461a      	mov	r2, r3
 801901e:	697b      	ldr	r3, [r7, #20]
 8019020:	895b      	ldrh	r3, [r3, #10]
 8019022:	3b01      	subs	r3, #1
 8019024:	4013      	ands	r3, r2
 8019026:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8019028:	69fb      	ldr	r3, [r7, #28]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d134      	bne.n	8019098 <f_read+0x14c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019034:	4323      	orrs	r3, r4
 8019036:	d103      	bne.n	8019040 <f_read+0xf4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	689b      	ldr	r3, [r3, #8]
 801903c:	63bb      	str	r3, [r7, #56]	; 0x38
 801903e:	e015      	b.n	801906c <f_read+0x120>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019044:	2b00      	cmp	r3, #0
 8019046:	d009      	beq.n	801905c <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801904e:	461a      	mov	r2, r3
 8019050:	4623      	mov	r3, r4
 8019052:	68f8      	ldr	r0, [r7, #12]
 8019054:	f7fd fb89 	bl	801676a <clmt_clust>
 8019058:	63b8      	str	r0, [r7, #56]	; 0x38
 801905a:	e007      	b.n	801906c <f_read+0x120>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801905c:	68fa      	ldr	r2, [r7, #12]
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019062:	4619      	mov	r1, r3
 8019064:	4610      	mov	r0, r2
 8019066:	f7fc fdf9 	bl	8015c5c <get_fat>
 801906a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801906e:	2b01      	cmp	r3, #1
 8019070:	d805      	bhi.n	801907e <f_read+0x132>
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	2202      	movs	r2, #2
 8019076:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801907a:	2302      	movs	r3, #2
 801907c:	e0f7      	b.n	801926e <f_read+0x322>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801907e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019084:	d105      	bne.n	8019092 <f_read+0x146>
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	2201      	movs	r2, #1
 801908a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801908e:	2301      	movs	r3, #1
 8019090:	e0ed      	b.n	801926e <f_read+0x322>
				fp->clust = clst;				/* Update current cluster */
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019096:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019098:	697a      	ldr	r2, [r7, #20]
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801909e:	4619      	mov	r1, r3
 80190a0:	4610      	mov	r0, r2
 80190a2:	f7fc fdbb 	bl	8015c1c <clust2sect>
 80190a6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80190a8:	69bb      	ldr	r3, [r7, #24]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d105      	bne.n	80190ba <f_read+0x16e>
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	2202      	movs	r2, #2
 80190b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80190b6:	2302      	movs	r3, #2
 80190b8:	e0d9      	b.n	801926e <f_read+0x322>
			sect += csect;
 80190ba:	69ba      	ldr	r2, [r7, #24]
 80190bc:	69fb      	ldr	r3, [r7, #28]
 80190be:	4413      	add	r3, r2
 80190c0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80190c2:	697b      	ldr	r3, [r7, #20]
 80190c4:	899b      	ldrh	r3, [r3, #12]
 80190c6:	461a      	mov	r2, r3
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80190ce:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 80190d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d043      	beq.n	801915e <f_read+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80190d6:	69fa      	ldr	r2, [r7, #28]
 80190d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190da:	4413      	add	r3, r2
 80190dc:	697a      	ldr	r2, [r7, #20]
 80190de:	8952      	ldrh	r2, [r2, #10]
 80190e0:	4293      	cmp	r3, r2
 80190e2:	d905      	bls.n	80190f0 <f_read+0x1a4>
					cc = fs->csize - csect;
 80190e4:	697b      	ldr	r3, [r7, #20]
 80190e6:	895b      	ldrh	r3, [r3, #10]
 80190e8:	461a      	mov	r2, r3
 80190ea:	69fb      	ldr	r3, [r7, #28]
 80190ec:	1ad3      	subs	r3, r2, r3
 80190ee:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80190f0:	697b      	ldr	r3, [r7, #20]
 80190f2:	7858      	ldrb	r0, [r3, #1]
 80190f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190f6:	69ba      	ldr	r2, [r7, #24]
 80190f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80190fa:	f7fc f89f 	bl	801523c <disk_read>
 80190fe:	4603      	mov	r3, r0
 8019100:	2b00      	cmp	r3, #0
 8019102:	d005      	beq.n	8019110 <f_read+0x1c4>
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	2201      	movs	r2, #1
 8019108:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801910c:	2301      	movs	r3, #1
 801910e:	e0ae      	b.n	801926e <f_read+0x322>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019116:	b25b      	sxtb	r3, r3
 8019118:	2b00      	cmp	r3, #0
 801911a:	da18      	bge.n	801914e <f_read+0x202>
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019120:	69bb      	ldr	r3, [r7, #24]
 8019122:	1ad3      	subs	r3, r2, r3
 8019124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019126:	429a      	cmp	r2, r3
 8019128:	d911      	bls.n	801914e <f_read+0x202>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801912e:	69bb      	ldr	r3, [r7, #24]
 8019130:	1ad3      	subs	r3, r2, r3
 8019132:	697a      	ldr	r2, [r7, #20]
 8019134:	8992      	ldrh	r2, [r2, #12]
 8019136:	fb02 f303 	mul.w	r3, r2, r3
 801913a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801913c:	18d0      	adds	r0, r2, r3
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8019144:	697b      	ldr	r3, [r7, #20]
 8019146:	899b      	ldrh	r3, [r3, #12]
 8019148:	461a      	mov	r2, r3
 801914a:	f7fc fa9b 	bl	8015684 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801914e:	697b      	ldr	r3, [r7, #20]
 8019150:	899b      	ldrh	r3, [r3, #12]
 8019152:	461a      	mov	r2, r3
 8019154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019156:	fb02 f303 	mul.w	r3, r2, r3
 801915a:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 801915c:	e067      	b.n	801922e <f_read+0x2e2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019162:	69ba      	ldr	r2, [r7, #24]
 8019164:	429a      	cmp	r2, r3
 8019166:	d033      	beq.n	80191d0 <f_read+0x284>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801916e:	b25b      	sxtb	r3, r3
 8019170:	2b00      	cmp	r3, #0
 8019172:	da1b      	bge.n	80191ac <f_read+0x260>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019174:	697b      	ldr	r3, [r7, #20]
 8019176:	7858      	ldrb	r0, [r3, #1]
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019182:	2301      	movs	r3, #1
 8019184:	f7fc f87a 	bl	801527c <disk_write>
 8019188:	4603      	mov	r3, r0
 801918a:	2b00      	cmp	r3, #0
 801918c:	d005      	beq.n	801919a <f_read+0x24e>
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	2201      	movs	r2, #1
 8019192:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019196:	2301      	movs	r3, #1
 8019198:	e069      	b.n	801926e <f_read+0x322>
					fp->flag &= (BYTE)~FA_DIRTY;
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80191a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80191a4:	b2da      	uxtb	r2, r3
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80191ac:	697b      	ldr	r3, [r7, #20]
 80191ae:	7858      	ldrb	r0, [r3, #1]
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80191b6:	2301      	movs	r3, #1
 80191b8:	69ba      	ldr	r2, [r7, #24]
 80191ba:	f7fc f83f 	bl	801523c <disk_read>
 80191be:	4603      	mov	r3, r0
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d005      	beq.n	80191d0 <f_read+0x284>
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	2201      	movs	r2, #1
 80191c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80191cc:	2301      	movs	r3, #1
 80191ce:	e04e      	b.n	801926e <f_read+0x322>
			}
#endif
			fp->sect = sect;
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	69ba      	ldr	r2, [r7, #24]
 80191d4:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80191d6:	697b      	ldr	r3, [r7, #20]
 80191d8:	899b      	ldrh	r3, [r3, #12]
 80191da:	4618      	mov	r0, r3
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80191e2:	697a      	ldr	r2, [r7, #20]
 80191e4:	8992      	ldrh	r2, [r2, #12]
 80191e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80191ea:	fb02 f201 	mul.w	r2, r2, r1
 80191ee:	1a9b      	subs	r3, r3, r2
 80191f0:	1ac3      	subs	r3, r0, r3
 80191f2:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80191f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	429a      	cmp	r2, r3
 80191fa:	d901      	bls.n	8019200 <f_read+0x2b4>
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801920c:	697b      	ldr	r3, [r7, #20]
 801920e:	899b      	ldrh	r3, [r3, #12]
 8019210:	b29b      	uxth	r3, r3
 8019212:	f04f 0400 	mov.w	r4, #0
 8019216:	461a      	mov	r2, r3
 8019218:	4623      	mov	r3, r4
 801921a:	f7e7 f85d 	bl	80002d8 <__aeabi_uldivmod>
 801921e:	461c      	mov	r4, r3
 8019220:	4613      	mov	r3, r2
 8019222:	442b      	add	r3, r5
 8019224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019226:	4619      	mov	r1, r3
 8019228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801922a:	f7fc fa2b 	bl	8015684 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801922e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019232:	4413      	add	r3, r2
 8019234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801923e:	461d      	mov	r5, r3
 8019240:	f04f 0600 	mov.w	r6, #0
 8019244:	186b      	adds	r3, r5, r1
 8019246:	eb46 0402 	adc.w	r4, r6, r2
 801924a:	68fa      	ldr	r2, [r7, #12]
 801924c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	681a      	ldr	r2, [r3, #0]
 8019254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019256:	441a      	add	r2, r3
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	601a      	str	r2, [r3, #0]
 801925c:	687a      	ldr	r2, [r7, #4]
 801925e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019260:	1ad3      	subs	r3, r2, r3
 8019262:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	2b00      	cmp	r3, #0
 8019268:	f47f aeb9 	bne.w	8018fde <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801926c:	2300      	movs	r3, #0
}
 801926e:	4618      	mov	r0, r3
 8019270:	3744      	adds	r7, #68	; 0x44
 8019272:	46bd      	mov	sp, r7
 8019274:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019276 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019278:	b08d      	sub	sp, #52	; 0x34
 801927a:	af00      	add	r7, sp, #0
 801927c:	60f8      	str	r0, [r7, #12]
 801927e:	60b9      	str	r1, [r7, #8]
 8019280:	607a      	str	r2, [r7, #4]
 8019282:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019284:	68bb      	ldr	r3, [r7, #8]
 8019286:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019288:	683b      	ldr	r3, [r7, #0]
 801928a:	2200      	movs	r2, #0
 801928c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	f107 0210 	add.w	r2, r7, #16
 8019294:	4611      	mov	r1, r2
 8019296:	4618      	mov	r0, r3
 8019298:	f7ff fb0c 	bl	80188b4 <validate>
 801929c:	4603      	mov	r3, r0
 801929e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80192a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d108      	bne.n	80192bc <f_write+0x46>
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80192b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80192b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d002      	beq.n	80192c2 <f_write+0x4c>
 80192bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80192c0:	e1ab      	b.n	801961a <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80192c8:	f003 0302 	and.w	r3, r3, #2
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d101      	bne.n	80192d4 <f_write+0x5e>
 80192d0:	2307      	movs	r3, #7
 80192d2:	e1a2      	b.n	801961a <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80192d4:	693b      	ldr	r3, [r7, #16]
 80192d6:	781b      	ldrb	r3, [r3, #0]
 80192d8:	2b04      	cmp	r3, #4
 80192da:	f000 818e 	beq.w	80195fa <f_write+0x384>
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80192e4:	461a      	mov	r2, r3
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	441a      	add	r2, r3
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80192f0:	429a      	cmp	r2, r3
 80192f2:	f080 8182 	bcs.w	80195fa <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80192fc:	43db      	mvns	r3, r3
 80192fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019300:	e17b      	b.n	80195fa <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8019308:	693b      	ldr	r3, [r7, #16]
 801930a:	899b      	ldrh	r3, [r3, #12]
 801930c:	b29b      	uxth	r3, r3
 801930e:	f04f 0400 	mov.w	r4, #0
 8019312:	461a      	mov	r2, r3
 8019314:	4623      	mov	r3, r4
 8019316:	f7e6 ffdf 	bl	80002d8 <__aeabi_uldivmod>
 801931a:	461c      	mov	r4, r3
 801931c:	4613      	mov	r3, r2
 801931e:	4323      	orrs	r3, r4
 8019320:	f040 810c 	bne.w	801953c <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801932a:	693b      	ldr	r3, [r7, #16]
 801932c:	899b      	ldrh	r3, [r3, #12]
 801932e:	b29b      	uxth	r3, r3
 8019330:	f04f 0400 	mov.w	r4, #0
 8019334:	461a      	mov	r2, r3
 8019336:	4623      	mov	r3, r4
 8019338:	f7e6 ffce 	bl	80002d8 <__aeabi_uldivmod>
 801933c:	4603      	mov	r3, r0
 801933e:	460c      	mov	r4, r1
 8019340:	461a      	mov	r2, r3
 8019342:	693b      	ldr	r3, [r7, #16]
 8019344:	895b      	ldrh	r3, [r3, #10]
 8019346:	3b01      	subs	r3, #1
 8019348:	4013      	ands	r3, r2
 801934a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801934c:	69bb      	ldr	r3, [r7, #24]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d148      	bne.n	80193e4 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019358:	4323      	orrs	r3, r4
 801935a:	d10c      	bne.n	8019376 <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	689b      	ldr	r3, [r3, #8]
 8019360:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019364:	2b00      	cmp	r3, #0
 8019366:	d11c      	bne.n	80193a2 <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	2100      	movs	r1, #0
 801936c:	4618      	mov	r0, r3
 801936e:	f7fd f8fb 	bl	8016568 <create_chain>
 8019372:	62b8      	str	r0, [r7, #40]	; 0x28
 8019374:	e015      	b.n	80193a2 <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801937a:	2b00      	cmp	r3, #0
 801937c:	d009      	beq.n	8019392 <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019384:	461a      	mov	r2, r3
 8019386:	4623      	mov	r3, r4
 8019388:	68f8      	ldr	r0, [r7, #12]
 801938a:	f7fd f9ee 	bl	801676a <clmt_clust>
 801938e:	62b8      	str	r0, [r7, #40]	; 0x28
 8019390:	e007      	b.n	80193a2 <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019392:	68fa      	ldr	r2, [r7, #12]
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019398:	4619      	mov	r1, r3
 801939a:	4610      	mov	r0, r2
 801939c:	f7fd f8e4 	bl	8016568 <create_chain>
 80193a0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80193a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	f000 812d 	beq.w	8019604 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80193aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ac:	2b01      	cmp	r3, #1
 80193ae:	d105      	bne.n	80193bc <f_write+0x146>
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	2202      	movs	r2, #2
 80193b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80193b8:	2302      	movs	r3, #2
 80193ba:	e12e      	b.n	801961a <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80193bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193c2:	d105      	bne.n	80193d0 <f_write+0x15a>
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	2201      	movs	r2, #1
 80193c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80193cc:	2301      	movs	r3, #1
 80193ce:	e124      	b.n	801961a <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80193d4:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	689b      	ldr	r3, [r3, #8]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d102      	bne.n	80193e4 <f_write+0x16e>
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80193e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80193ea:	b25b      	sxtb	r3, r3
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	da1b      	bge.n	8019428 <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80193f0:	693b      	ldr	r3, [r7, #16]
 80193f2:	7858      	ldrb	r0, [r3, #1]
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80193fe:	2301      	movs	r3, #1
 8019400:	f7fb ff3c 	bl	801527c <disk_write>
 8019404:	4603      	mov	r3, r0
 8019406:	2b00      	cmp	r3, #0
 8019408:	d005      	beq.n	8019416 <f_write+0x1a0>
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	2201      	movs	r2, #1
 801940e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019412:	2301      	movs	r3, #1
 8019414:	e101      	b.n	801961a <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801941c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019420:	b2da      	uxtb	r2, r3
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019428:	693a      	ldr	r2, [r7, #16]
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801942e:	4619      	mov	r1, r3
 8019430:	4610      	mov	r0, r2
 8019432:	f7fc fbf3 	bl	8015c1c <clust2sect>
 8019436:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019438:	697b      	ldr	r3, [r7, #20]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d105      	bne.n	801944a <f_write+0x1d4>
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	2202      	movs	r2, #2
 8019442:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019446:	2302      	movs	r3, #2
 8019448:	e0e7      	b.n	801961a <f_write+0x3a4>
			sect += csect;
 801944a:	697a      	ldr	r2, [r7, #20]
 801944c:	69bb      	ldr	r3, [r7, #24]
 801944e:	4413      	add	r3, r2
 8019450:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019452:	693b      	ldr	r3, [r7, #16]
 8019454:	899b      	ldrh	r3, [r3, #12]
 8019456:	461a      	mov	r2, r3
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	fbb3 f3f2 	udiv	r3, r3, r2
 801945e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019460:	6a3b      	ldr	r3, [r7, #32]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d046      	beq.n	80194f4 <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019466:	69ba      	ldr	r2, [r7, #24]
 8019468:	6a3b      	ldr	r3, [r7, #32]
 801946a:	4413      	add	r3, r2
 801946c:	693a      	ldr	r2, [r7, #16]
 801946e:	8952      	ldrh	r2, [r2, #10]
 8019470:	4293      	cmp	r3, r2
 8019472:	d905      	bls.n	8019480 <f_write+0x20a>
					cc = fs->csize - csect;
 8019474:	693b      	ldr	r3, [r7, #16]
 8019476:	895b      	ldrh	r3, [r3, #10]
 8019478:	461a      	mov	r2, r3
 801947a:	69bb      	ldr	r3, [r7, #24]
 801947c:	1ad3      	subs	r3, r2, r3
 801947e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019480:	693b      	ldr	r3, [r7, #16]
 8019482:	7858      	ldrb	r0, [r3, #1]
 8019484:	6a3b      	ldr	r3, [r7, #32]
 8019486:	697a      	ldr	r2, [r7, #20]
 8019488:	69f9      	ldr	r1, [r7, #28]
 801948a:	f7fb fef7 	bl	801527c <disk_write>
 801948e:	4603      	mov	r3, r0
 8019490:	2b00      	cmp	r3, #0
 8019492:	d005      	beq.n	80194a0 <f_write+0x22a>
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	2201      	movs	r2, #1
 8019498:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801949c:	2301      	movs	r3, #1
 801949e:	e0bc      	b.n	801961a <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	1ad3      	subs	r3, r2, r3
 80194a8:	6a3a      	ldr	r2, [r7, #32]
 80194aa:	429a      	cmp	r2, r3
 80194ac:	d91a      	bls.n	80194e4 <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80194b8:	697b      	ldr	r3, [r7, #20]
 80194ba:	1ad3      	subs	r3, r2, r3
 80194bc:	693a      	ldr	r2, [r7, #16]
 80194be:	8992      	ldrh	r2, [r2, #12]
 80194c0:	fb02 f303 	mul.w	r3, r2, r3
 80194c4:	69fa      	ldr	r2, [r7, #28]
 80194c6:	18d1      	adds	r1, r2, r3
 80194c8:	693b      	ldr	r3, [r7, #16]
 80194ca:	899b      	ldrh	r3, [r3, #12]
 80194cc:	461a      	mov	r2, r3
 80194ce:	f7fc f8d9 	bl	8015684 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80194d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80194dc:	b2da      	uxtb	r2, r3
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80194e4:	693b      	ldr	r3, [r7, #16]
 80194e6:	899b      	ldrh	r3, [r3, #12]
 80194e8:	461a      	mov	r2, r3
 80194ea:	6a3b      	ldr	r3, [r7, #32]
 80194ec:	fb02 f303 	mul.w	r3, r2, r3
 80194f0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80194f2:	e058      	b.n	80195a6 <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194f8:	697a      	ldr	r2, [r7, #20]
 80194fa:	429a      	cmp	r2, r3
 80194fc:	d01b      	beq.n	8019536 <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801950a:	42a2      	cmp	r2, r4
 801950c:	bf08      	it	eq
 801950e:	4299      	cmpeq	r1, r3
 8019510:	d211      	bcs.n	8019536 <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019512:	693b      	ldr	r3, [r7, #16]
 8019514:	7858      	ldrb	r0, [r3, #1]
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801951c:	2301      	movs	r3, #1
 801951e:	697a      	ldr	r2, [r7, #20]
 8019520:	f7fb fe8c 	bl	801523c <disk_read>
 8019524:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019526:	2b00      	cmp	r3, #0
 8019528:	d005      	beq.n	8019536 <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	2201      	movs	r2, #1
 801952e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019532:	2301      	movs	r3, #1
 8019534:	e071      	b.n	801961a <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	697a      	ldr	r2, [r7, #20]
 801953a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801953c:	693b      	ldr	r3, [r7, #16]
 801953e:	899b      	ldrh	r3, [r3, #12]
 8019540:	4618      	mov	r0, r3
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019548:	693a      	ldr	r2, [r7, #16]
 801954a:	8992      	ldrh	r2, [r2, #12]
 801954c:	fbb3 f1f2 	udiv	r1, r3, r2
 8019550:	fb02 f201 	mul.w	r2, r2, r1
 8019554:	1a9b      	subs	r3, r3, r2
 8019556:	1ac3      	subs	r3, r0, r3
 8019558:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801955a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	429a      	cmp	r2, r3
 8019560:	d901      	bls.n	8019566 <f_write+0x2f0>
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	f103 0554 	add.w	r5, r3, #84	; 0x54
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8019572:	693b      	ldr	r3, [r7, #16]
 8019574:	899b      	ldrh	r3, [r3, #12]
 8019576:	b29b      	uxth	r3, r3
 8019578:	f04f 0400 	mov.w	r4, #0
 801957c:	461a      	mov	r2, r3
 801957e:	4623      	mov	r3, r4
 8019580:	f7e6 feaa 	bl	80002d8 <__aeabi_uldivmod>
 8019584:	461c      	mov	r4, r3
 8019586:	4613      	mov	r3, r2
 8019588:	442b      	add	r3, r5
 801958a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801958c:	69f9      	ldr	r1, [r7, #28]
 801958e:	4618      	mov	r0, r3
 8019590:	f7fc f878 	bl	8015684 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801959a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801959e:	b2da      	uxtb	r2, r3
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80195a6:	69fa      	ldr	r2, [r7, #28]
 80195a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195aa:	4413      	add	r3, r2
 80195ac:	61fb      	str	r3, [r7, #28]
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80195b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195b6:	461d      	mov	r5, r3
 80195b8:	f04f 0600 	mov.w	r6, #0
 80195bc:	186b      	adds	r3, r5, r1
 80195be:	eb46 0402 	adc.w	r4, r6, r2
 80195c2:	68fa      	ldr	r2, [r7, #12]
 80195c4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80195ce:	68fa      	ldr	r2, [r7, #12]
 80195d0:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 80195d4:	4294      	cmp	r4, r2
 80195d6:	bf08      	it	eq
 80195d8:	428b      	cmpeq	r3, r1
 80195da:	d201      	bcs.n	80195e0 <f_write+0x36a>
 80195dc:	460b      	mov	r3, r1
 80195de:	4614      	mov	r4, r2
 80195e0:	68fa      	ldr	r2, [r7, #12]
 80195e2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	681a      	ldr	r2, [r3, #0]
 80195ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ec:	441a      	add	r2, r3
 80195ee:	683b      	ldr	r3, [r7, #0]
 80195f0:	601a      	str	r2, [r3, #0]
 80195f2:	687a      	ldr	r2, [r7, #4]
 80195f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195f6:	1ad3      	subs	r3, r2, r3
 80195f8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	f47f ae80 	bne.w	8019302 <f_write+0x8c>
 8019602:	e000      	b.n	8019606 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019604:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801960c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019610:	b2da      	uxtb	r2, r3
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8019618:	2300      	movs	r3, #0
}
 801961a:	4618      	mov	r0, r3
 801961c:	3734      	adds	r7, #52	; 0x34
 801961e:	46bd      	mov	sp, r7
 8019620:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019622 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019622:	b590      	push	{r4, r7, lr}
 8019624:	b09d      	sub	sp, #116	; 0x74
 8019626:	af00      	add	r7, sp, #0
 8019628:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8019630:	4611      	mov	r1, r2
 8019632:	4618      	mov	r0, r3
 8019634:	f7ff f93e 	bl	80188b4 <validate>
 8019638:	4603      	mov	r3, r0
 801963a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 801963e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8019642:	2b00      	cmp	r3, #0
 8019644:	f040 811d 	bne.w	8019882 <f_sync+0x260>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801964e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019652:	2b00      	cmp	r3, #0
 8019654:	f000 8115 	beq.w	8019882 <f_sync+0x260>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801965e:	b25b      	sxtb	r3, r3
 8019660:	2b00      	cmp	r3, #0
 8019662:	da17      	bge.n	8019694 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019666:	7858      	ldrb	r0, [r3, #1]
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019672:	2301      	movs	r3, #1
 8019674:	f7fb fe02 	bl	801527c <disk_write>
 8019678:	4603      	mov	r3, r0
 801967a:	2b00      	cmp	r3, #0
 801967c:	d001      	beq.n	8019682 <f_sync+0x60>
 801967e:	2301      	movs	r3, #1
 8019680:	e101      	b.n	8019886 <f_sync+0x264>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801968c:	b2da      	uxtb	r2, r3
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019694:	f7f9 f928 	bl	80128e8 <get_fattime>
 8019698:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801969a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801969c:	781b      	ldrb	r3, [r3, #0]
 801969e:	2b04      	cmp	r3, #4
 80196a0:	f040 80a4 	bne.w	80197ec <f_sync+0x1ca>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	4618      	mov	r0, r3
 80196a8:	f7fc fe4a 	bl	8016340 <fill_first_frag>
 80196ac:	4603      	mov	r3, r0
 80196ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80196b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d10a      	bne.n	80196d0 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80196ba:	6878      	ldr	r0, [r7, #4]
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196c0:	f04f 32ff 	mov.w	r2, #4294967295
 80196c4:	4619      	mov	r1, r3
 80196c6:	f7fc fe6a 	bl	801639e <fill_last_frag>
 80196ca:	4603      	mov	r3, r0
 80196cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 80196d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	f040 80d4 	bne.w	8019882 <f_sync+0x260>
					INIT_NAMBUF(fs);
 80196da:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80196de:	f000 ffc7 	bl	801a670 <ff_memalloc>
 80196e2:	6638      	str	r0, [r7, #96]	; 0x60
 80196e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d101      	bne.n	80196ee <f_sync+0xcc>
 80196ea:	2311      	movs	r3, #17
 80196ec:	e0cb      	b.n	8019886 <f_sync+0x264>
 80196ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80196f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80196f2:	611a      	str	r2, [r3, #16]
 80196f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80196f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80196f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80196fc:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80196fe:	687a      	ldr	r2, [r7, #4]
 8019700:	f107 0308 	add.w	r3, r7, #8
 8019704:	4611      	mov	r1, r2
 8019706:	4618      	mov	r0, r3
 8019708:	f7fd fd9e 	bl	8017248 <load_obj_dir>
 801970c:	4603      	mov	r3, r0
 801970e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 8019712:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8019716:	2b00      	cmp	r3, #0
 8019718:	d164      	bne.n	80197e4 <f_sync+0x1c2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 801971a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801971c:	695b      	ldr	r3, [r3, #20]
 801971e:	3304      	adds	r3, #4
 8019720:	781a      	ldrb	r2, [r3, #0]
 8019722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019724:	695b      	ldr	r3, [r3, #20]
 8019726:	3304      	adds	r3, #4
 8019728:	f042 0220 	orr.w	r2, r2, #32
 801972c:	b2d2      	uxtb	r2, r2
 801972e:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	79da      	ldrb	r2, [r3, #7]
 8019734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019736:	695b      	ldr	r3, [r3, #20]
 8019738:	3321      	adds	r3, #33	; 0x21
 801973a:	f042 0201 	orr.w	r2, r2, #1
 801973e:	b2d2      	uxtb	r2, r2
 8019740:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8019742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019744:	695b      	ldr	r3, [r3, #20]
 8019746:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	689b      	ldr	r3, [r3, #8]
 801974e:	4619      	mov	r1, r3
 8019750:	4610      	mov	r0, r2
 8019752:	f7fb fee4 	bl	801551e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8019756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019758:	695b      	ldr	r3, [r3, #20]
 801975a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8019764:	461a      	mov	r2, r3
 8019766:	4623      	mov	r3, r4
 8019768:	4608      	mov	r0, r1
 801976a:	f7fb ff04 	bl	8015576 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 801976e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019770:	695b      	ldr	r3, [r3, #20]
 8019772:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801977c:	461a      	mov	r2, r3
 801977e:	4623      	mov	r3, r4
 8019780:	4608      	mov	r0, r1
 8019782:	f7fb fef8 	bl	8015576 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8019786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019788:	695b      	ldr	r3, [r3, #20]
 801978a:	330c      	adds	r3, #12
 801978c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801978e:	4618      	mov	r0, r3
 8019790:	f7fb fec5 	bl	801551e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8019794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019796:	695b      	ldr	r3, [r3, #20]
 8019798:	3315      	adds	r3, #21
 801979a:	2200      	movs	r2, #0
 801979c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 801979e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197a0:	695b      	ldr	r3, [r3, #20]
 80197a2:	3310      	adds	r3, #16
 80197a4:	2100      	movs	r1, #0
 80197a6:	4618      	mov	r0, r3
 80197a8:	f7fb feb9 	bl	801551e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80197ac:	f107 0308 	add.w	r3, r7, #8
 80197b0:	4618      	mov	r0, r3
 80197b2:	f7fd fd86 	bl	80172c2 <store_xdir>
 80197b6:	4603      	mov	r3, r0
 80197b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 80197bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d10f      	bne.n	80197e4 <f_sync+0x1c2>
							res = sync_fs(fs);
 80197c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197c6:	4618      	mov	r0, r3
 80197c8:	f7fc f9b8 	bl	8015b3c <sync_fs>
 80197cc:	4603      	mov	r3, r0
 80197ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80197d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80197dc:	b2da      	uxtb	r2, r3
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 80197e4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80197e6:	f000 ff4f 	bl	801a688 <ff_memfree>
 80197ea:	e04a      	b.n	8019882 <f_sync+0x260>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80197ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80197f2:	4619      	mov	r1, r3
 80197f4:	4610      	mov	r0, r2
 80197f6:	f7fc f973 	bl	8015ae0 <move_window>
 80197fa:	4603      	mov	r3, r0
 80197fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8019800:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8019804:	2b00      	cmp	r3, #0
 8019806:	d13c      	bne.n	8019882 <f_sync+0x260>
					dir = fp->dir_ptr;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801980c:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801980e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019810:	330b      	adds	r3, #11
 8019812:	781a      	ldrb	r2, [r3, #0]
 8019814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019816:	330b      	adds	r3, #11
 8019818:	f042 0220 	orr.w	r2, r2, #32
 801981c:	b2d2      	uxtb	r2, r2
 801981e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6818      	ldr	r0, [r3, #0]
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	689b      	ldr	r3, [r3, #8]
 8019828:	461a      	mov	r2, r3
 801982a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801982c:	f7fd f9d9 	bl	8016be2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019832:	f103 021c 	add.w	r2, r3, #28
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801983c:	4619      	mov	r1, r3
 801983e:	4610      	mov	r0, r2
 8019840:	f7fb fe6d 	bl	801551e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019846:	3316      	adds	r3, #22
 8019848:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801984a:	4618      	mov	r0, r3
 801984c:	f7fb fe67 	bl	801551e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019852:	3312      	adds	r3, #18
 8019854:	2100      	movs	r1, #0
 8019856:	4618      	mov	r0, r3
 8019858:	f7fb fe46 	bl	80154e8 <st_word>
					fs->wflag = 1;
 801985c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801985e:	2201      	movs	r2, #1
 8019860:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019864:	4618      	mov	r0, r3
 8019866:	f7fc f969 	bl	8015b3c <sync_fs>
 801986a:	4603      	mov	r3, r0
 801986c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801987a:	b2da      	uxtb	r2, r3
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019882:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8019886:	4618      	mov	r0, r3
 8019888:	3774      	adds	r7, #116	; 0x74
 801988a:	46bd      	mov	sp, r7
 801988c:	bd90      	pop	{r4, r7, pc}

0801988e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801988e:	b580      	push	{r7, lr}
 8019890:	b084      	sub	sp, #16
 8019892:	af00      	add	r7, sp, #0
 8019894:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019896:	6878      	ldr	r0, [r7, #4]
 8019898:	f7ff fec3 	bl	8019622 <f_sync>
 801989c:	4603      	mov	r3, r0
 801989e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80198a0:	7bfb      	ldrb	r3, [r7, #15]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d118      	bne.n	80198d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	f107 0208 	add.w	r2, r7, #8
 80198ac:	4611      	mov	r1, r2
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7ff f800 	bl	80188b4 <validate>
 80198b4:	4603      	mov	r3, r0
 80198b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80198b8:	7bfb      	ldrb	r3, [r7, #15]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d10c      	bne.n	80198d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198c2:	4618      	mov	r0, r3
 80198c4:	f7fc f868 	bl	8015998 <dec_lock>
 80198c8:	4603      	mov	r3, r0
 80198ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80198cc:	7bfb      	ldrb	r3, [r7, #15]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d102      	bne.n	80198d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	2200      	movs	r2, #0
 80198d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80198d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80198da:	4618      	mov	r0, r3
 80198dc:	3710      	adds	r7, #16
 80198de:	46bd      	mov	sp, r7
 80198e0:	bd80      	pop	{r7, pc}

080198e2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80198e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198e4:	b095      	sub	sp, #84	; 0x54
 80198e6:	af00      	add	r7, sp, #0
 80198e8:	60f8      	str	r0, [r7, #12]
 80198ea:	e9c7 2300 	strd	r2, r3, [r7]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	f107 0210 	add.w	r2, r7, #16
 80198f4:	4611      	mov	r1, r2
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7fe ffdc 	bl	80188b4 <validate>
 80198fc:	4603      	mov	r3, r0
 80198fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8019902:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019906:	2b00      	cmp	r3, #0
 8019908:	d104      	bne.n	8019914 <f_lseek+0x32>
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019910:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 8019914:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019918:	2b00      	cmp	r3, #0
 801991a:	d10e      	bne.n	801993a <f_lseek+0x58>
 801991c:	693b      	ldr	r3, [r7, #16]
 801991e:	781b      	ldrb	r3, [r3, #0]
 8019920:	2b04      	cmp	r3, #4
 8019922:	d10a      	bne.n	801993a <f_lseek+0x58>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8019924:	68f8      	ldr	r0, [r7, #12]
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801992a:	f04f 32ff 	mov.w	r2, #4294967295
 801992e:	4619      	mov	r1, r3
 8019930:	f7fc fd35 	bl	801639e <fill_last_frag>
 8019934:	4603      	mov	r3, r0
 8019936:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801993a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801993e:	2b00      	cmp	r3, #0
 8019940:	d002      	beq.n	8019948 <f_lseek+0x66>
 8019942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019946:	e2d5      	b.n	8019ef4 <f_lseek+0x612>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801994c:	2b00      	cmp	r3, #0
 801994e:	f000 8104 	beq.w	8019b5a <f_lseek+0x278>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8019952:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019956:	f1b4 3fff 	cmp.w	r4, #4294967295
 801995a:	bf08      	it	eq
 801995c:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 8019960:	d15c      	bne.n	8019a1c <f_lseek+0x13a>
			tbl = fp->cltbl;
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019966:	637b      	str	r3, [r7, #52]	; 0x34
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8019968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801996a:	1d1a      	adds	r2, r3, #4
 801996c:	637a      	str	r2, [r7, #52]	; 0x34
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	61fb      	str	r3, [r7, #28]
 8019972:	2302      	movs	r3, #2
 8019974:	63bb      	str	r3, [r7, #56]	; 0x38
			cl = fp->obj.sclust;		/* Origin of the chain */
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	689b      	ldr	r3, [r3, #8]
 801997a:	643b      	str	r3, [r7, #64]	; 0x40
			if (cl) {
 801997c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801997e:	2b00      	cmp	r3, #0
 8019980:	d03c      	beq.n	80199fc <f_lseek+0x11a>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8019982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019984:	61bb      	str	r3, [r7, #24]
 8019986:	2300      	movs	r3, #0
 8019988:	63fb      	str	r3, [r7, #60]	; 0x3c
 801998a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801998c:	3302      	adds	r3, #2
 801998e:	63bb      	str	r3, [r7, #56]	; 0x38
					do {
						pcl = cl; ncl++;
 8019990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019992:	617b      	str	r3, [r7, #20]
 8019994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019996:	3301      	adds	r3, #1
 8019998:	63fb      	str	r3, [r7, #60]	; 0x3c
						cl = get_fat(&fp->obj, cl);
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801999e:	4618      	mov	r0, r3
 80199a0:	f7fc f95c 	bl	8015c5c <get_fat>
 80199a4:	6438      	str	r0, [r7, #64]	; 0x40
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80199a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80199a8:	2b01      	cmp	r3, #1
 80199aa:	d805      	bhi.n	80199b8 <f_lseek+0xd6>
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	2202      	movs	r2, #2
 80199b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80199b4:	2302      	movs	r3, #2
 80199b6:	e29d      	b.n	8019ef4 <f_lseek+0x612>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80199b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80199ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199be:	d105      	bne.n	80199cc <f_lseek+0xea>
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	2201      	movs	r2, #1
 80199c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80199c8:	2301      	movs	r3, #1
 80199ca:	e293      	b.n	8019ef4 <f_lseek+0x612>
					} while (cl == pcl + 1);
 80199cc:	697b      	ldr	r3, [r7, #20]
 80199ce:	3301      	adds	r3, #1
 80199d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80199d2:	429a      	cmp	r2, r3
 80199d4:	d0dc      	beq.n	8019990 <f_lseek+0xae>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80199d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199d8:	69fb      	ldr	r3, [r7, #28]
 80199da:	429a      	cmp	r2, r3
 80199dc:	d809      	bhi.n	80199f2 <f_lseek+0x110>
						*tbl++ = ncl; *tbl++ = tcl;
 80199de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199e0:	1d1a      	adds	r2, r3, #4
 80199e2:	637a      	str	r2, [r7, #52]	; 0x34
 80199e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80199e6:	601a      	str	r2, [r3, #0]
 80199e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199ea:	1d1a      	adds	r2, r3, #4
 80199ec:	637a      	str	r2, [r7, #52]	; 0x34
 80199ee:	69ba      	ldr	r2, [r7, #24]
 80199f0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80199f2:	693b      	ldr	r3, [r7, #16]
 80199f4:	6a1b      	ldr	r3, [r3, #32]
 80199f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80199f8:	429a      	cmp	r2, r3
 80199fa:	d3c2      	bcc.n	8019982 <f_lseek+0xa0>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a02:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8019a04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a06:	69fb      	ldr	r3, [r7, #28]
 8019a08:	429a      	cmp	r2, r3
 8019a0a:	d803      	bhi.n	8019a14 <f_lseek+0x132>
				*tbl = 0;		/* Terminate table */
 8019a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a0e:	2200      	movs	r2, #0
 8019a10:	601a      	str	r2, [r3, #0]
 8019a12:	e26d      	b.n	8019ef0 <f_lseek+0x60e>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8019a14:	2311      	movs	r3, #17
 8019a16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8019a1a:	e269      	b.n	8019ef0 <f_lseek+0x60e>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8019a1c:	68fb      	ldr	r3, [r7, #12]
 8019a1e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8019a22:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019a26:	42a2      	cmp	r2, r4
 8019a28:	bf08      	it	eq
 8019a2a:	4299      	cmpeq	r1, r3
 8019a2c:	d204      	bcs.n	8019a38 <f_lseek+0x156>
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8019a34:	e9c7 3400 	strd	r3, r4, [r7]
			fp->fptr = ofs;				/* Set file pointer */
 8019a38:	68fa      	ldr	r2, [r7, #12]
 8019a3a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019a3e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			if (ofs) {
 8019a42:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019a46:	4323      	orrs	r3, r4
 8019a48:	f000 8252 	beq.w	8019ef0 <f_lseek+0x60e>
				fp->clust = clmt_clust(fp, ofs - 1);
 8019a4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019a50:	f113 31ff 	adds.w	r1, r3, #4294967295
 8019a54:	f144 32ff 	adc.w	r2, r4, #4294967295
 8019a58:	4613      	mov	r3, r2
 8019a5a:	460a      	mov	r2, r1
 8019a5c:	68f8      	ldr	r0, [r7, #12]
 8019a5e:	f7fc fe84 	bl	801676a <clmt_clust>
 8019a62:	4602      	mov	r2, r0
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 8019a68:	693a      	ldr	r2, [r7, #16]
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a6e:	4619      	mov	r1, r3
 8019a70:	4610      	mov	r0, r2
 8019a72:	f7fc f8d3 	bl	8015c1c <clust2sect>
 8019a76:	6238      	str	r0, [r7, #32]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8019a78:	6a3b      	ldr	r3, [r7, #32]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d105      	bne.n	8019a8a <f_lseek+0x1a8>
 8019a7e:	68fb      	ldr	r3, [r7, #12]
 8019a80:	2202      	movs	r2, #2
 8019a82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019a86:	2302      	movs	r3, #2
 8019a88:	e234      	b.n	8019ef4 <f_lseek+0x612>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8019a8a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019a8e:	f113 30ff 	adds.w	r0, r3, #4294967295
 8019a92:	f144 31ff 	adc.w	r1, r4, #4294967295
 8019a96:	693b      	ldr	r3, [r7, #16]
 8019a98:	899b      	ldrh	r3, [r3, #12]
 8019a9a:	b29b      	uxth	r3, r3
 8019a9c:	f04f 0400 	mov.w	r4, #0
 8019aa0:	461a      	mov	r2, r3
 8019aa2:	4623      	mov	r3, r4
 8019aa4:	f7e6 fc18 	bl	80002d8 <__aeabi_uldivmod>
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	460c      	mov	r4, r1
 8019aac:	461a      	mov	r2, r3
 8019aae:	693b      	ldr	r3, [r7, #16]
 8019ab0:	895b      	ldrh	r3, [r3, #10]
 8019ab2:	3b01      	subs	r3, #1
 8019ab4:	4013      	ands	r3, r2
 8019ab6:	6a3a      	ldr	r2, [r7, #32]
 8019ab8:	4413      	add	r3, r2
 8019aba:	623b      	str	r3, [r7, #32]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8019ac2:	693b      	ldr	r3, [r7, #16]
 8019ac4:	899b      	ldrh	r3, [r3, #12]
 8019ac6:	b29b      	uxth	r3, r3
 8019ac8:	f04f 0400 	mov.w	r4, #0
 8019acc:	461a      	mov	r2, r3
 8019ace:	4623      	mov	r3, r4
 8019ad0:	f7e6 fc02 	bl	80002d8 <__aeabi_uldivmod>
 8019ad4:	461c      	mov	r4, r3
 8019ad6:	4613      	mov	r3, r2
 8019ad8:	4323      	orrs	r3, r4
 8019ada:	f000 8209 	beq.w	8019ef0 <f_lseek+0x60e>
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ae2:	6a3a      	ldr	r2, [r7, #32]
 8019ae4:	429a      	cmp	r2, r3
 8019ae6:	f000 8203 	beq.w	8019ef0 <f_lseek+0x60e>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019af0:	b25b      	sxtb	r3, r3
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	da1b      	bge.n	8019b2e <f_lseek+0x24c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019af6:	693b      	ldr	r3, [r7, #16]
 8019af8:	7858      	ldrb	r0, [r3, #1]
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019b04:	2301      	movs	r3, #1
 8019b06:	f7fb fbb9 	bl	801527c <disk_write>
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d005      	beq.n	8019b1c <f_lseek+0x23a>
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	2201      	movs	r2, #1
 8019b14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019b18:	2301      	movs	r3, #1
 8019b1a:	e1eb      	b.n	8019ef4 <f_lseek+0x612>
						fp->flag &= (BYTE)~FA_DIRTY;
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b26:	b2da      	uxtb	r2, r3
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8019b2e:	693b      	ldr	r3, [r7, #16]
 8019b30:	7858      	ldrb	r0, [r3, #1]
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8019b38:	2301      	movs	r3, #1
 8019b3a:	6a3a      	ldr	r2, [r7, #32]
 8019b3c:	f7fb fb7e 	bl	801523c <disk_read>
 8019b40:	4603      	mov	r3, r0
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d005      	beq.n	8019b52 <f_lseek+0x270>
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	2201      	movs	r2, #1
 8019b4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019b4e:	2301      	movs	r3, #1
 8019b50:	e1d0      	b.n	8019ef4 <f_lseek+0x612>
#endif
					fp->sect = dsc;
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	6a3a      	ldr	r2, [r7, #32]
 8019b56:	645a      	str	r2, [r3, #68]	; 0x44
 8019b58:	e1ca      	b.n	8019ef0 <f_lseek+0x60e>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 8019b5a:	693b      	ldr	r3, [r7, #16]
 8019b5c:	781b      	ldrb	r3, [r3, #0]
 8019b5e:	2b04      	cmp	r3, #4
 8019b60:	d00b      	beq.n	8019b7a <f_lseek+0x298>
 8019b62:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019b66:	2c01      	cmp	r4, #1
 8019b68:	bf08      	it	eq
 8019b6a:	2b00      	cmpeq	r3, #0
 8019b6c:	d305      	bcc.n	8019b7a <f_lseek+0x298>
 8019b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8019b72:	f04f 0400 	mov.w	r4, #0
 8019b76:	e9c7 3400 	strd	r3, r4, [r7]
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8019b80:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019b84:	42a2      	cmp	r2, r4
 8019b86:	bf08      	it	eq
 8019b88:	4299      	cmpeq	r1, r3
 8019b8a:	d20b      	bcs.n	8019ba4 <f_lseek+0x2c2>
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019b92:	f003 0302 	and.w	r3, r3, #2
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d104      	bne.n	8019ba4 <f_lseek+0x2c2>
			ofs = fp->obj.objsize;
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8019ba0:	e9c7 3400 	strd	r3, r4, [r7]
		}
		ifptr = fp->fptr;
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019baa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		fp->fptr = nsect = 0;
 8019bae:	2300      	movs	r3, #0
 8019bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8019bb2:	68fa      	ldr	r2, [r7, #12]
 8019bb4:	f04f 0300 	mov.w	r3, #0
 8019bb8:	f04f 0400 	mov.w	r4, #0
 8019bbc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if (ofs) {
 8019bc0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019bc4:	4323      	orrs	r3, r4
 8019bc6:	f000 812e 	beq.w	8019e26 <f_lseek+0x544>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8019bca:	693b      	ldr	r3, [r7, #16]
 8019bcc:	895b      	ldrh	r3, [r3, #10]
 8019bce:	461a      	mov	r2, r3
 8019bd0:	693b      	ldr	r3, [r7, #16]
 8019bd2:	899b      	ldrh	r3, [r3, #12]
 8019bd4:	fb03 f302 	mul.w	r3, r3, r2
 8019bd8:	627b      	str	r3, [r7, #36]	; 0x24
			if (ifptr > 0 &&
 8019bda:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8019bde:	4323      	orrs	r3, r4
 8019be0:	d048      	beq.n	8019c74 <f_lseek+0x392>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8019be2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019be6:	f113 30ff 	adds.w	r0, r3, #4294967295
 8019bea:	f144 31ff 	adc.w	r1, r4, #4294967295
 8019bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf0:	f04f 0400 	mov.w	r4, #0
 8019bf4:	461a      	mov	r2, r3
 8019bf6:	4623      	mov	r3, r4
 8019bf8:	f7e6 fb6e 	bl	80002d8 <__aeabi_uldivmod>
 8019bfc:	4603      	mov	r3, r0
 8019bfe:	460c      	mov	r4, r1
 8019c00:	461d      	mov	r5, r3
 8019c02:	4626      	mov	r6, r4
 8019c04:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8019c08:	f113 30ff 	adds.w	r0, r3, #4294967295
 8019c0c:	f144 31ff 	adc.w	r1, r4, #4294967295
 8019c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c12:	f04f 0400 	mov.w	r4, #0
 8019c16:	461a      	mov	r2, r3
 8019c18:	4623      	mov	r3, r4
 8019c1a:	f7e6 fb5d 	bl	80002d8 <__aeabi_uldivmod>
 8019c1e:	4603      	mov	r3, r0
 8019c20:	460c      	mov	r4, r1
			if (ifptr > 0 &&
 8019c22:	42a6      	cmp	r6, r4
 8019c24:	bf08      	it	eq
 8019c26:	429d      	cmpeq	r5, r3
 8019c28:	d324      	bcc.n	8019c74 <f_lseek+0x392>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8019c2a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8019c2e:	f113 31ff 	adds.w	r1, r3, #4294967295
 8019c32:	f144 32ff 	adc.w	r2, r4, #4294967295
 8019c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c38:	3b01      	subs	r3, #1
 8019c3a:	f04f 0400 	mov.w	r4, #0
 8019c3e:	ea6f 0503 	mvn.w	r5, r3
 8019c42:	ea6f 0604 	mvn.w	r6, r4
 8019c46:	ea05 0301 	and.w	r3, r5, r1
 8019c4a:	ea06 0402 	and.w	r4, r6, r2
 8019c4e:	68fa      	ldr	r2, [r7, #12]
 8019c50:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				ofs -= fp->fptr;
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 8019c5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8019c5e:	460b      	mov	r3, r1
 8019c60:	4614      	mov	r4, r2
 8019c62:	1b5b      	subs	r3, r3, r5
 8019c64:	eb64 0406 	sbc.w	r4, r4, r6
 8019c68:	e9c7 3400 	strd	r3, r4, [r7]
				clst = fp->clust;
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8019c72:	e024      	b.n	8019cbe <f_lseek+0x3dc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	689b      	ldr	r3, [r3, #8]
 8019c78:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8019c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d11b      	bne.n	8019cb8 <f_lseek+0x3d6>
					clst = create_chain(&fp->obj, 0);
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	2100      	movs	r1, #0
 8019c84:	4618      	mov	r0, r3
 8019c86:	f7fc fc6f 	bl	8016568 <create_chain>
 8019c8a:	64b8      	str	r0, [r7, #72]	; 0x48
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019c8e:	2b01      	cmp	r3, #1
 8019c90:	d105      	bne.n	8019c9e <f_lseek+0x3bc>
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	2202      	movs	r2, #2
 8019c96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019c9a:	2302      	movs	r3, #2
 8019c9c:	e12a      	b.n	8019ef4 <f_lseek+0x612>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ca4:	d105      	bne.n	8019cb2 <f_lseek+0x3d0>
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	2201      	movs	r2, #1
 8019caa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019cae:	2301      	movs	r3, #1
 8019cb0:	e120      	b.n	8019ef4 <f_lseek+0x612>
					fp->obj.sclust = clst;
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019cb6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019cbc:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (clst != 0) {
 8019cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	f000 80b0 	beq.w	8019e26 <f_lseek+0x544>
				while (ofs > bcs) {						/* Cluster following loop */
 8019cc6:	e06a      	b.n	8019d9e <f_lseek+0x4bc>
					ofs -= bcs; fp->fptr += bcs;
 8019cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cca:	461d      	mov	r5, r3
 8019ccc:	f04f 0600 	mov.w	r6, #0
 8019cd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8019cd4:	460b      	mov	r3, r1
 8019cd6:	4614      	mov	r4, r2
 8019cd8:	1b5b      	subs	r3, r3, r5
 8019cda:	eb64 0406 	sbc.w	r4, r4, r6
 8019cde:	e9c7 3400 	strd	r3, r4, [r7]
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8019ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cea:	461d      	mov	r5, r3
 8019cec:	f04f 0600 	mov.w	r6, #0
 8019cf0:	186b      	adds	r3, r5, r1
 8019cf2:	eb46 0402 	adc.w	r4, r6, r2
 8019cf6:	68fa      	ldr	r2, [r7, #12]
 8019cf8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019d02:	f003 0302 	and.w	r3, r3, #2
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d028      	beq.n	8019d5c <f_lseek+0x47a>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019d10:	68fa      	ldr	r2, [r7, #12]
 8019d12:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8019d16:	42a2      	cmp	r2, r4
 8019d18:	bf08      	it	eq
 8019d1a:	4299      	cmpeq	r1, r3
 8019d1c:	d20e      	bcs.n	8019d3c <f_lseek+0x45a>
							fp->obj.objsize = fp->fptr;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019d24:	68fa      	ldr	r2, [r7, #12]
 8019d26:	e9c2 3404 	strd	r3, r4, [r2, #16]
							fp->flag |= FA_MODIFIED;
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d34:	b2da      	uxtb	r2, r3
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019d40:	4618      	mov	r0, r3
 8019d42:	f7fc fc11 	bl	8016568 <create_chain>
 8019d46:	64b8      	str	r0, [r7, #72]	; 0x48
						if (clst == 0) {				/* Clip file size in case of disk full */
 8019d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d10c      	bne.n	8019d68 <f_lseek+0x486>
							ofs = 0; break;
 8019d4e:	f04f 0300 	mov.w	r3, #0
 8019d52:	f04f 0400 	mov.w	r4, #0
 8019d56:	e9c7 3400 	strd	r3, r4, [r7]
 8019d5a:	e02a      	b.n	8019db2 <f_lseek+0x4d0>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019d60:	4618      	mov	r0, r3
 8019d62:	f7fb ff7b 	bl	8015c5c <get_fat>
 8019d66:	64b8      	str	r0, [r7, #72]	; 0x48
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d6e:	d105      	bne.n	8019d7c <f_lseek+0x49a>
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	2201      	movs	r2, #1
 8019d74:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019d78:	2301      	movs	r3, #1
 8019d7a:	e0bb      	b.n	8019ef4 <f_lseek+0x612>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8019d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019d7e:	2b01      	cmp	r3, #1
 8019d80:	d904      	bls.n	8019d8c <f_lseek+0x4aa>
 8019d82:	693b      	ldr	r3, [r7, #16]
 8019d84:	6a1b      	ldr	r3, [r3, #32]
 8019d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019d88:	429a      	cmp	r2, r3
 8019d8a:	d305      	bcc.n	8019d98 <f_lseek+0x4b6>
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	2202      	movs	r2, #2
 8019d90:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019d94:	2302      	movs	r3, #2
 8019d96:	e0ad      	b.n	8019ef4 <f_lseek+0x612>
					fp->clust = clst;
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019d9c:	641a      	str	r2, [r3, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8019d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019da0:	4619      	mov	r1, r3
 8019da2:	f04f 0200 	mov.w	r2, #0
 8019da6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019daa:	42a2      	cmp	r2, r4
 8019dac:	bf08      	it	eq
 8019dae:	4299      	cmpeq	r1, r3
 8019db0:	d38a      	bcc.n	8019cc8 <f_lseek+0x3e6>
				}
				fp->fptr += ofs;
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8019db8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019dbc:	185d      	adds	r5, r3, r1
 8019dbe:	eb44 0602 	adc.w	r6, r4, r2
 8019dc2:	68fa      	ldr	r2, [r7, #12]
 8019dc4:	e9c2 560e 	strd	r5, r6, [r2, #56]	; 0x38
				if (ofs % SS(fs)) {
 8019dc8:	693b      	ldr	r3, [r7, #16]
 8019dca:	899b      	ldrh	r3, [r3, #12]
 8019dcc:	b29b      	uxth	r3, r3
 8019dce:	f04f 0400 	mov.w	r4, #0
 8019dd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019dd6:	461a      	mov	r2, r3
 8019dd8:	4623      	mov	r3, r4
 8019dda:	f7e6 fa7d 	bl	80002d8 <__aeabi_uldivmod>
 8019dde:	461c      	mov	r4, r3
 8019de0:	4613      	mov	r3, r2
 8019de2:	4323      	orrs	r3, r4
 8019de4:	d01f      	beq.n	8019e26 <f_lseek+0x544>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8019de6:	693b      	ldr	r3, [r7, #16]
 8019de8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7fb ff16 	bl	8015c1c <clust2sect>
 8019df0:	6478      	str	r0, [r7, #68]	; 0x44
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8019df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d105      	bne.n	8019e04 <f_lseek+0x522>
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	2202      	movs	r2, #2
 8019dfc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019e00:	2302      	movs	r3, #2
 8019e02:	e077      	b.n	8019ef4 <f_lseek+0x612>
					nsect += (DWORD)(ofs / SS(fs));
 8019e04:	693b      	ldr	r3, [r7, #16]
 8019e06:	899b      	ldrh	r3, [r3, #12]
 8019e08:	b29b      	uxth	r3, r3
 8019e0a:	f04f 0400 	mov.w	r4, #0
 8019e0e:	461a      	mov	r2, r3
 8019e10:	4623      	mov	r3, r4
 8019e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019e16:	f7e6 fa5f 	bl	80002d8 <__aeabi_uldivmod>
 8019e1a:	4603      	mov	r3, r0
 8019e1c:	460c      	mov	r4, r1
 8019e1e:	461a      	mov	r2, r3
 8019e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e22:	4413      	add	r3, r2
 8019e24:	647b      	str	r3, [r7, #68]	; 0x44
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019e2c:	68fa      	ldr	r2, [r7, #12]
 8019e2e:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8019e32:	42a2      	cmp	r2, r4
 8019e34:	bf08      	it	eq
 8019e36:	4299      	cmpeq	r1, r3
 8019e38:	d20e      	bcs.n	8019e58 <f_lseek+0x576>
			fp->obj.objsize = fp->fptr;
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019e40:	68fa      	ldr	r2, [r7, #12]
 8019e42:	e9c2 3404 	strd	r3, r4, [r2, #16]
			fp->flag |= FA_MODIFIED;
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e50:	b2da      	uxtb	r2, r3
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8019e5e:	693b      	ldr	r3, [r7, #16]
 8019e60:	899b      	ldrh	r3, [r3, #12]
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	f04f 0400 	mov.w	r4, #0
 8019e68:	461a      	mov	r2, r3
 8019e6a:	4623      	mov	r3, r4
 8019e6c:	f7e6 fa34 	bl	80002d8 <__aeabi_uldivmod>
 8019e70:	461c      	mov	r4, r3
 8019e72:	4613      	mov	r3, r2
 8019e74:	4323      	orrs	r3, r4
 8019e76:	d03b      	beq.n	8019ef0 <f_lseek+0x60e>
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019e7e:	429a      	cmp	r2, r3
 8019e80:	d036      	beq.n	8019ef0 <f_lseek+0x60e>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019e88:	b25b      	sxtb	r3, r3
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	da1b      	bge.n	8019ec6 <f_lseek+0x5e4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019e8e:	693b      	ldr	r3, [r7, #16]
 8019e90:	7858      	ldrb	r0, [r3, #1]
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	f7fb f9ed 	bl	801527c <disk_write>
 8019ea2:	4603      	mov	r3, r0
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d005      	beq.n	8019eb4 <f_lseek+0x5d2>
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	2201      	movs	r2, #1
 8019eac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019eb0:	2301      	movs	r3, #1
 8019eb2:	e01f      	b.n	8019ef4 <f_lseek+0x612>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019ebe:	b2da      	uxtb	r2, r3
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8019ec6:	693b      	ldr	r3, [r7, #16]
 8019ec8:	7858      	ldrb	r0, [r3, #1]
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8019ed0:	2301      	movs	r3, #1
 8019ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019ed4:	f7fb f9b2 	bl	801523c <disk_read>
 8019ed8:	4603      	mov	r3, r0
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d005      	beq.n	8019eea <f_lseek+0x608>
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	2201      	movs	r2, #1
 8019ee2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019ee6:	2301      	movs	r3, #1
 8019ee8:	e004      	b.n	8019ef4 <f_lseek+0x612>
#endif
			fp->sect = nsect;
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019eee:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8019ef0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	3754      	adds	r7, #84	; 0x54
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019efc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	b084      	sub	sp, #16
 8019f00:	af00      	add	r7, sp, #0
 8019f02:	6078      	str	r0, [r7, #4]
 8019f04:	460b      	mov	r3, r1
 8019f06:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8019f08:	78fb      	ldrb	r3, [r7, #3]
 8019f0a:	2b0a      	cmp	r3, #10
 8019f0c:	d103      	bne.n	8019f16 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8019f0e:	210d      	movs	r1, #13
 8019f10:	6878      	ldr	r0, [r7, #4]
 8019f12:	f7ff fff3 	bl	8019efc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	685b      	ldr	r3, [r3, #4]
 8019f1a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	db25      	blt.n	8019f6e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	1c5a      	adds	r2, r3, #1
 8019f26:	60fa      	str	r2, [r7, #12]
 8019f28:	687a      	ldr	r2, [r7, #4]
 8019f2a:	4413      	add	r3, r2
 8019f2c:	78fa      	ldrb	r2, [r7, #3]
 8019f2e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	2b3c      	cmp	r3, #60	; 0x3c
 8019f34:	dd12      	ble.n	8019f5c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	6818      	ldr	r0, [r3, #0]
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	f103 010c 	add.w	r1, r3, #12
 8019f40:	68fa      	ldr	r2, [r7, #12]
 8019f42:	f107 0308 	add.w	r3, r7, #8
 8019f46:	f7ff f996 	bl	8019276 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8019f4a:	68ba      	ldr	r2, [r7, #8]
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	429a      	cmp	r2, r3
 8019f50:	d101      	bne.n	8019f56 <putc_bfd+0x5a>
 8019f52:	2300      	movs	r3, #0
 8019f54:	e001      	b.n	8019f5a <putc_bfd+0x5e>
 8019f56:	f04f 33ff 	mov.w	r3, #4294967295
 8019f5a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	68fa      	ldr	r2, [r7, #12]
 8019f60:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	689b      	ldr	r3, [r3, #8]
 8019f66:	1c5a      	adds	r2, r3, #1
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	609a      	str	r2, [r3, #8]
 8019f6c:	e000      	b.n	8019f70 <putc_bfd+0x74>
	if (i < 0) return;
 8019f6e:	bf00      	nop
}
 8019f70:	3710      	adds	r7, #16
 8019f72:	46bd      	mov	sp, r7
 8019f74:	bd80      	pop	{r7, pc}

08019f76 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8019f76:	b580      	push	{r7, lr}
 8019f78:	b084      	sub	sp, #16
 8019f7a:	af00      	add	r7, sp, #0
 8019f7c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	685b      	ldr	r3, [r3, #4]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	db17      	blt.n	8019fb6 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	6818      	ldr	r0, [r3, #0]
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	f103 010c 	add.w	r1, r3, #12
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	685b      	ldr	r3, [r3, #4]
 8019f94:	461a      	mov	r2, r3
 8019f96:	f107 030c 	add.w	r3, r7, #12
 8019f9a:	f7ff f96c 	bl	8019276 <f_write>
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d108      	bne.n	8019fb6 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	685b      	ldr	r3, [r3, #4]
 8019fa8:	461a      	mov	r2, r3
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	429a      	cmp	r2, r3
 8019fae:	d102      	bne.n	8019fb6 <putc_flush+0x40>
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	689b      	ldr	r3, [r3, #8]
 8019fb4:	e001      	b.n	8019fba <putc_flush+0x44>
	return EOF;
 8019fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019fba:	4618      	mov	r0, r3
 8019fbc:	3710      	adds	r7, #16
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd80      	pop	{r7, pc}

08019fc2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8019fc2:	b480      	push	{r7}
 8019fc4:	b083      	sub	sp, #12
 8019fc6:	af00      	add	r7, sp, #0
 8019fc8:	6078      	str	r0, [r7, #4]
 8019fca:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	683a      	ldr	r2, [r7, #0]
 8019fd0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	2200      	movs	r2, #0
 8019fd6:	605a      	str	r2, [r3, #4]
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	685a      	ldr	r2, [r3, #4]
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	609a      	str	r2, [r3, #8]
}
 8019fe0:	bf00      	nop
 8019fe2:	370c      	adds	r7, #12
 8019fe4:	46bd      	mov	sp, r7
 8019fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fea:	4770      	bx	lr

08019fec <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8019fec:	b40e      	push	{r1, r2, r3}
 8019fee:	b580      	push	{r7, lr}
 8019ff0:	b0a7      	sub	sp, #156	; 0x9c
 8019ff2:	af00      	add	r7, sp, #0
 8019ff4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8019ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019ffa:	6879      	ldr	r1, [r7, #4]
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	f7ff ffe0 	bl	8019fc2 <putc_init>

	va_start(arp, fmt);
 801a002:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801a006:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 801a008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a00c:	1c5a      	adds	r2, r3, #1
 801a00e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a012:	781b      	ldrb	r3, [r3, #0]
 801a014:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 801a018:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	f000 81f4 	beq.w	801a40a <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 801a022:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a026:	2b25      	cmp	r3, #37	; 0x25
 801a028:	d008      	beq.n	801a03c <f_printf+0x50>
			putc_bfd(&pb, c);
 801a02a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801a02e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a032:	4611      	mov	r1, r2
 801a034:	4618      	mov	r0, r3
 801a036:	f7ff ff61 	bl	8019efc <putc_bfd>
			continue;
 801a03a:	e1e5      	b.n	801a408 <f_printf+0x41c>
		}
		w = f = 0;
 801a03c:	2300      	movs	r3, #0
 801a03e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801a042:	2300      	movs	r3, #0
 801a044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 801a048:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a04c:	1c5a      	adds	r2, r3, #1
 801a04e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a052:	781b      	ldrb	r3, [r3, #0]
 801a054:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 801a058:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a05c:	2b30      	cmp	r3, #48	; 0x30
 801a05e:	d10b      	bne.n	801a078 <f_printf+0x8c>
			f = 1; c = *fmt++;
 801a060:	2301      	movs	r3, #1
 801a062:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801a066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a06a:	1c5a      	adds	r2, r3, #1
 801a06c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a070:	781b      	ldrb	r3, [r3, #0]
 801a072:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801a076:	e024      	b.n	801a0c2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 801a078:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a07c:	2b2d      	cmp	r3, #45	; 0x2d
 801a07e:	d120      	bne.n	801a0c2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 801a080:	2302      	movs	r3, #2
 801a082:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801a086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a08a:	1c5a      	adds	r2, r3, #1
 801a08c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a090:	781b      	ldrb	r3, [r3, #0]
 801a092:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801a096:	e014      	b.n	801a0c2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 801a098:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a09c:	4613      	mov	r3, r2
 801a09e:	009b      	lsls	r3, r3, #2
 801a0a0:	4413      	add	r3, r2
 801a0a2:	005b      	lsls	r3, r3, #1
 801a0a4:	461a      	mov	r2, r3
 801a0a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a0aa:	4413      	add	r3, r2
 801a0ac:	3b30      	subs	r3, #48	; 0x30
 801a0ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 801a0b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a0b6:	1c5a      	adds	r2, r3, #1
 801a0b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a0bc:	781b      	ldrb	r3, [r3, #0]
 801a0be:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 801a0c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a0c6:	2b2f      	cmp	r3, #47	; 0x2f
 801a0c8:	d903      	bls.n	801a0d2 <f_printf+0xe6>
 801a0ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a0ce:	2b39      	cmp	r3, #57	; 0x39
 801a0d0:	d9e2      	bls.n	801a098 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801a0d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a0d6:	2b6c      	cmp	r3, #108	; 0x6c
 801a0d8:	d003      	beq.n	801a0e2 <f_printf+0xf6>
 801a0da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a0de:	2b4c      	cmp	r3, #76	; 0x4c
 801a0e0:	d10d      	bne.n	801a0fe <f_printf+0x112>
			f |= 4; c = *fmt++;
 801a0e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a0e6:	f043 0304 	orr.w	r3, r3, #4
 801a0ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801a0ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a0f2:	1c5a      	adds	r2, r3, #1
 801a0f4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a0f8:	781b      	ldrb	r3, [r3, #0]
 801a0fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 801a0fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a102:	2b00      	cmp	r3, #0
 801a104:	f000 8183 	beq.w	801a40e <f_printf+0x422>
		d = c;
 801a108:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a10c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 801a110:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801a114:	2b60      	cmp	r3, #96	; 0x60
 801a116:	d908      	bls.n	801a12a <f_printf+0x13e>
 801a118:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801a11c:	2b7a      	cmp	r3, #122	; 0x7a
 801a11e:	d804      	bhi.n	801a12a <f_printf+0x13e>
 801a120:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801a124:	3b20      	subs	r3, #32
 801a126:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 801a12a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801a12e:	3b42      	subs	r3, #66	; 0x42
 801a130:	2b16      	cmp	r3, #22
 801a132:	f200 8098 	bhi.w	801a266 <f_printf+0x27a>
 801a136:	a201      	add	r2, pc, #4	; (adr r2, 801a13c <f_printf+0x150>)
 801a138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a13c:	0801a247 	.word	0x0801a247
 801a140:	0801a22f 	.word	0x0801a22f
 801a144:	0801a257 	.word	0x0801a257
 801a148:	0801a267 	.word	0x0801a267
 801a14c:	0801a267 	.word	0x0801a267
 801a150:	0801a267 	.word	0x0801a267
 801a154:	0801a267 	.word	0x0801a267
 801a158:	0801a267 	.word	0x0801a267
 801a15c:	0801a267 	.word	0x0801a267
 801a160:	0801a267 	.word	0x0801a267
 801a164:	0801a267 	.word	0x0801a267
 801a168:	0801a267 	.word	0x0801a267
 801a16c:	0801a267 	.word	0x0801a267
 801a170:	0801a24f 	.word	0x0801a24f
 801a174:	0801a267 	.word	0x0801a267
 801a178:	0801a267 	.word	0x0801a267
 801a17c:	0801a267 	.word	0x0801a267
 801a180:	0801a199 	.word	0x0801a199
 801a184:	0801a267 	.word	0x0801a267
 801a188:	0801a257 	.word	0x0801a257
 801a18c:	0801a267 	.word	0x0801a267
 801a190:	0801a267 	.word	0x0801a267
 801a194:	0801a25f 	.word	0x0801a25f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801a198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a19a:	1d1a      	adds	r2, r3, #4
 801a19c:	67ba      	str	r2, [r7, #120]	; 0x78
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a1a8:	e004      	b.n	801a1b4 <f_printf+0x1c8>
 801a1aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a1ae:	3301      	adds	r3, #1
 801a1b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a1b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801a1b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a1ba:	4413      	add	r3, r2
 801a1bc:	781b      	ldrb	r3, [r3, #0]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d1f3      	bne.n	801a1aa <f_printf+0x1be>
			if (!(f & 2)) {
 801a1c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a1c6:	f003 0302 	and.w	r3, r3, #2
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d11a      	bne.n	801a204 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 801a1ce:	e005      	b.n	801a1dc <f_printf+0x1f0>
 801a1d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a1d4:	2120      	movs	r1, #32
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	f7ff fe90 	bl	8019efc <putc_bfd>
 801a1dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a1e0:	1c5a      	adds	r2, r3, #1
 801a1e2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801a1e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a1ea:	429a      	cmp	r2, r3
 801a1ec:	d8f0      	bhi.n	801a1d0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 801a1ee:	e009      	b.n	801a204 <f_printf+0x218>
 801a1f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a1f2:	1c5a      	adds	r2, r3, #1
 801a1f4:	67fa      	str	r2, [r7, #124]	; 0x7c
 801a1f6:	781a      	ldrb	r2, [r3, #0]
 801a1f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a1fc:	4611      	mov	r1, r2
 801a1fe:	4618      	mov	r0, r3
 801a200:	f7ff fe7c 	bl	8019efc <putc_bfd>
 801a204:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a206:	781b      	ldrb	r3, [r3, #0]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d1f1      	bne.n	801a1f0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 801a20c:	e005      	b.n	801a21a <f_printf+0x22e>
 801a20e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a212:	2120      	movs	r1, #32
 801a214:	4618      	mov	r0, r3
 801a216:	f7ff fe71 	bl	8019efc <putc_bfd>
 801a21a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a21e:	1c5a      	adds	r2, r3, #1
 801a220:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801a224:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a228:	429a      	cmp	r2, r3
 801a22a:	d8f0      	bhi.n	801a20e <f_printf+0x222>
			continue;
 801a22c:	e0ec      	b.n	801a408 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801a22e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a230:	1d1a      	adds	r2, r3, #4
 801a232:	67ba      	str	r2, [r7, #120]	; 0x78
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	b2da      	uxtb	r2, r3
 801a238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a23c:	4611      	mov	r1, r2
 801a23e:	4618      	mov	r0, r3
 801a240:	f7ff fe5c 	bl	8019efc <putc_bfd>
 801a244:	e0e0      	b.n	801a408 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 801a246:	2302      	movs	r3, #2
 801a248:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801a24c:	e014      	b.n	801a278 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801a24e:	2308      	movs	r3, #8
 801a250:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801a254:	e010      	b.n	801a278 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801a256:	230a      	movs	r3, #10
 801a258:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801a25c:	e00c      	b.n	801a278 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801a25e:	2310      	movs	r3, #16
 801a260:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801a264:	e008      	b.n	801a278 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801a266:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801a26a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a26e:	4611      	mov	r1, r2
 801a270:	4618      	mov	r0, r3
 801a272:	f7ff fe43 	bl	8019efc <putc_bfd>
 801a276:	e0c7      	b.n	801a408 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801a278:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a27c:	f003 0304 	and.w	r3, r3, #4
 801a280:	2b00      	cmp	r3, #0
 801a282:	d004      	beq.n	801a28e <f_printf+0x2a2>
 801a284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a286:	1d1a      	adds	r2, r3, #4
 801a288:	67ba      	str	r2, [r7, #120]	; 0x78
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	e00c      	b.n	801a2a8 <f_printf+0x2bc>
 801a28e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801a292:	2b44      	cmp	r3, #68	; 0x44
 801a294:	d104      	bne.n	801a2a0 <f_printf+0x2b4>
 801a296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a298:	1d1a      	adds	r2, r3, #4
 801a29a:	67ba      	str	r2, [r7, #120]	; 0x78
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	e003      	b.n	801a2a8 <f_printf+0x2bc>
 801a2a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a2a2:	1d1a      	adds	r2, r3, #4
 801a2a4:	67ba      	str	r2, [r7, #120]	; 0x78
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 801a2ac:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801a2b0:	2b44      	cmp	r3, #68	; 0x44
 801a2b2:	d10e      	bne.n	801a2d2 <f_printf+0x2e6>
 801a2b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	da0a      	bge.n	801a2d2 <f_printf+0x2e6>
			v = 0 - v;
 801a2bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a2c0:	425b      	negs	r3, r3
 801a2c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 801a2c6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a2ca:	f043 0308 	orr.w	r3, r3, #8
 801a2ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 801a2d8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 801a2dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a2e0:	fbb3 f1f2 	udiv	r1, r3, r2
 801a2e4:	fb02 f201 	mul.w	r2, r2, r1
 801a2e8:	1a9b      	subs	r3, r3, r2
 801a2ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 801a2ee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801a2f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801a2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a2fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801a2fe:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801a302:	2b09      	cmp	r3, #9
 801a304:	d90b      	bls.n	801a31e <f_printf+0x332>
 801a306:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801a30a:	2b78      	cmp	r3, #120	; 0x78
 801a30c:	d101      	bne.n	801a312 <f_printf+0x326>
 801a30e:	2227      	movs	r2, #39	; 0x27
 801a310:	e000      	b.n	801a314 <f_printf+0x328>
 801a312:	2207      	movs	r2, #7
 801a314:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801a318:	4413      	add	r3, r2
 801a31a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 801a31e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a322:	1c5a      	adds	r2, r3, #1
 801a324:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801a328:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801a32c:	3230      	adds	r2, #48	; 0x30
 801a32e:	b2d2      	uxtb	r2, r2
 801a330:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801a334:	440b      	add	r3, r1
 801a336:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 801a33a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d003      	beq.n	801a34a <f_printf+0x35e>
 801a342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a346:	2b1f      	cmp	r3, #31
 801a348:	d9c6      	bls.n	801a2d8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 801a34a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a34e:	f003 0308 	and.w	r3, r3, #8
 801a352:	2b00      	cmp	r3, #0
 801a354:	d00a      	beq.n	801a36c <f_printf+0x380>
 801a356:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a35a:	1c5a      	adds	r2, r3, #1
 801a35c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801a360:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801a364:	4413      	add	r3, r2
 801a366:	222d      	movs	r2, #45	; 0x2d
 801a368:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 801a36c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a374:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a378:	f003 0301 	and.w	r3, r3, #1
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d001      	beq.n	801a384 <f_printf+0x398>
 801a380:	2330      	movs	r3, #48	; 0x30
 801a382:	e000      	b.n	801a386 <f_printf+0x39a>
 801a384:	2320      	movs	r3, #32
 801a386:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801a38a:	e007      	b.n	801a39c <f_printf+0x3b0>
 801a38c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801a390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a394:	4611      	mov	r1, r2
 801a396:	4618      	mov	r0, r3
 801a398:	f7ff fdb0 	bl	8019efc <putc_bfd>
 801a39c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a3a0:	f003 0302 	and.w	r3, r3, #2
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d108      	bne.n	801a3ba <f_printf+0x3ce>
 801a3a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a3ac:	1c5a      	adds	r2, r3, #1
 801a3ae:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801a3b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a3b6:	429a      	cmp	r2, r3
 801a3b8:	d8e8      	bhi.n	801a38c <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 801a3ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a3be:	3b01      	subs	r3, #1
 801a3c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a3c4:	f107 020c 	add.w	r2, r7, #12
 801a3c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a3cc:	4413      	add	r3, r2
 801a3ce:	781a      	ldrb	r2, [r3, #0]
 801a3d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a3d4:	4611      	mov	r1, r2
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	f7ff fd90 	bl	8019efc <putc_bfd>
		} while (i);
 801a3dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d1ea      	bne.n	801a3ba <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 801a3e4:	e007      	b.n	801a3f6 <f_printf+0x40a>
 801a3e6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801a3ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a3ee:	4611      	mov	r1, r2
 801a3f0:	4618      	mov	r0, r3
 801a3f2:	f7ff fd83 	bl	8019efc <putc_bfd>
 801a3f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a3fa:	1c5a      	adds	r2, r3, #1
 801a3fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801a400:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a404:	429a      	cmp	r2, r3
 801a406:	d8ee      	bhi.n	801a3e6 <f_printf+0x3fa>
		c = *fmt++;
 801a408:	e5fe      	b.n	801a008 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801a40a:	bf00      	nop
 801a40c:	e000      	b.n	801a410 <f_printf+0x424>
		if (!c) break;
 801a40e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 801a410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a414:	4618      	mov	r0, r3
 801a416:	f7ff fdae 	bl	8019f76 <putc_flush>
 801a41a:	4603      	mov	r3, r0
}
 801a41c:	4618      	mov	r0, r3
 801a41e:	379c      	adds	r7, #156	; 0x9c
 801a420:	46bd      	mov	sp, r7
 801a422:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a426:	b003      	add	sp, #12
 801a428:	4770      	bx	lr
 801a42a:	bf00      	nop

0801a42c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a42c:	b480      	push	{r7}
 801a42e:	b087      	sub	sp, #28
 801a430:	af00      	add	r7, sp, #0
 801a432:	60f8      	str	r0, [r7, #12]
 801a434:	60b9      	str	r1, [r7, #8]
 801a436:	4613      	mov	r3, r2
 801a438:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a43a:	2301      	movs	r3, #1
 801a43c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a43e:	2300      	movs	r3, #0
 801a440:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a442:	4b1f      	ldr	r3, [pc, #124]	; (801a4c0 <FATFS_LinkDriverEx+0x94>)
 801a444:	7b9b      	ldrb	r3, [r3, #14]
 801a446:	b2db      	uxtb	r3, r3
 801a448:	2b01      	cmp	r3, #1
 801a44a:	d831      	bhi.n	801a4b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a44c:	4b1c      	ldr	r3, [pc, #112]	; (801a4c0 <FATFS_LinkDriverEx+0x94>)
 801a44e:	7b9b      	ldrb	r3, [r3, #14]
 801a450:	b2db      	uxtb	r3, r3
 801a452:	461a      	mov	r2, r3
 801a454:	4b1a      	ldr	r3, [pc, #104]	; (801a4c0 <FATFS_LinkDriverEx+0x94>)
 801a456:	2100      	movs	r1, #0
 801a458:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a45a:	4b19      	ldr	r3, [pc, #100]	; (801a4c0 <FATFS_LinkDriverEx+0x94>)
 801a45c:	7b9b      	ldrb	r3, [r3, #14]
 801a45e:	b2db      	uxtb	r3, r3
 801a460:	4a17      	ldr	r2, [pc, #92]	; (801a4c0 <FATFS_LinkDriverEx+0x94>)
 801a462:	009b      	lsls	r3, r3, #2
 801a464:	4413      	add	r3, r2
 801a466:	68fa      	ldr	r2, [r7, #12]
 801a468:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a46a:	4b15      	ldr	r3, [pc, #84]	; (801a4c0 <FATFS_LinkDriverEx+0x94>)
 801a46c:	7b9b      	ldrb	r3, [r3, #14]
 801a46e:	b2db      	uxtb	r3, r3
 801a470:	461a      	mov	r2, r3
 801a472:	4b13      	ldr	r3, [pc, #76]	; (801a4c0 <FATFS_LinkDriverEx+0x94>)
 801a474:	4413      	add	r3, r2
 801a476:	79fa      	ldrb	r2, [r7, #7]
 801a478:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 801a47a:	4b11      	ldr	r3, [pc, #68]	; (801a4c0 <FATFS_LinkDriverEx+0x94>)
 801a47c:	7b9b      	ldrb	r3, [r3, #14]
 801a47e:	b2db      	uxtb	r3, r3
 801a480:	1c5a      	adds	r2, r3, #1
 801a482:	b2d1      	uxtb	r1, r2
 801a484:	4a0e      	ldr	r2, [pc, #56]	; (801a4c0 <FATFS_LinkDriverEx+0x94>)
 801a486:	7391      	strb	r1, [r2, #14]
 801a488:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a48a:	7dbb      	ldrb	r3, [r7, #22]
 801a48c:	3330      	adds	r3, #48	; 0x30
 801a48e:	b2da      	uxtb	r2, r3
 801a490:	68bb      	ldr	r3, [r7, #8]
 801a492:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a494:	68bb      	ldr	r3, [r7, #8]
 801a496:	3301      	adds	r3, #1
 801a498:	223a      	movs	r2, #58	; 0x3a
 801a49a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a49c:	68bb      	ldr	r3, [r7, #8]
 801a49e:	3302      	adds	r3, #2
 801a4a0:	222f      	movs	r2, #47	; 0x2f
 801a4a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	3303      	adds	r3, #3
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	371c      	adds	r7, #28
 801a4b6:	46bd      	mov	sp, r7
 801a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4bc:	4770      	bx	lr
 801a4be:	bf00      	nop
 801a4c0:	240002fc 	.word	0x240002fc

0801a4c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a4c4:	b580      	push	{r7, lr}
 801a4c6:	b082      	sub	sp, #8
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	6078      	str	r0, [r7, #4]
 801a4cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a4ce:	2200      	movs	r2, #0
 801a4d0:	6839      	ldr	r1, [r7, #0]
 801a4d2:	6878      	ldr	r0, [r7, #4]
 801a4d4:	f7ff ffaa 	bl	801a42c <FATFS_LinkDriverEx>
 801a4d8:	4603      	mov	r3, r0
}
 801a4da:	4618      	mov	r0, r3
 801a4dc:	3708      	adds	r7, #8
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	bd80      	pop	{r7, pc}
	...

0801a4e4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	b085      	sub	sp, #20
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	4603      	mov	r3, r0
 801a4ec:	6039      	str	r1, [r7, #0]
 801a4ee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a4f0:	88fb      	ldrh	r3, [r7, #6]
 801a4f2:	2b7f      	cmp	r3, #127	; 0x7f
 801a4f4:	d802      	bhi.n	801a4fc <ff_convert+0x18>
		c = chr;
 801a4f6:	88fb      	ldrh	r3, [r7, #6]
 801a4f8:	81fb      	strh	r3, [r7, #14]
 801a4fa:	e025      	b.n	801a548 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a4fc:	683b      	ldr	r3, [r7, #0]
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d00b      	beq.n	801a51a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a502:	88fb      	ldrh	r3, [r7, #6]
 801a504:	2bff      	cmp	r3, #255	; 0xff
 801a506:	d805      	bhi.n	801a514 <ff_convert+0x30>
 801a508:	88fb      	ldrh	r3, [r7, #6]
 801a50a:	3b80      	subs	r3, #128	; 0x80
 801a50c:	4a12      	ldr	r2, [pc, #72]	; (801a558 <ff_convert+0x74>)
 801a50e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a512:	e000      	b.n	801a516 <ff_convert+0x32>
 801a514:	2300      	movs	r3, #0
 801a516:	81fb      	strh	r3, [r7, #14]
 801a518:	e016      	b.n	801a548 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a51a:	2300      	movs	r3, #0
 801a51c:	81fb      	strh	r3, [r7, #14]
 801a51e:	e009      	b.n	801a534 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a520:	89fb      	ldrh	r3, [r7, #14]
 801a522:	4a0d      	ldr	r2, [pc, #52]	; (801a558 <ff_convert+0x74>)
 801a524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a528:	88fa      	ldrh	r2, [r7, #6]
 801a52a:	429a      	cmp	r2, r3
 801a52c:	d006      	beq.n	801a53c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a52e:	89fb      	ldrh	r3, [r7, #14]
 801a530:	3301      	adds	r3, #1
 801a532:	81fb      	strh	r3, [r7, #14]
 801a534:	89fb      	ldrh	r3, [r7, #14]
 801a536:	2b7f      	cmp	r3, #127	; 0x7f
 801a538:	d9f2      	bls.n	801a520 <ff_convert+0x3c>
 801a53a:	e000      	b.n	801a53e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a53c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a53e:	89fb      	ldrh	r3, [r7, #14]
 801a540:	3380      	adds	r3, #128	; 0x80
 801a542:	b29b      	uxth	r3, r3
 801a544:	b2db      	uxtb	r3, r3
 801a546:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a548:	89fb      	ldrh	r3, [r7, #14]
}
 801a54a:	4618      	mov	r0, r3
 801a54c:	3714      	adds	r7, #20
 801a54e:	46bd      	mov	sp, r7
 801a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a554:	4770      	bx	lr
 801a556:	bf00      	nop
 801a558:	0801b48c 	.word	0x0801b48c

0801a55c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a55c:	b480      	push	{r7}
 801a55e:	b087      	sub	sp, #28
 801a560:	af00      	add	r7, sp, #0
 801a562:	4603      	mov	r3, r0
 801a564:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a566:	88fb      	ldrh	r3, [r7, #6]
 801a568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a56c:	d201      	bcs.n	801a572 <ff_wtoupper+0x16>
 801a56e:	4b3e      	ldr	r3, [pc, #248]	; (801a668 <ff_wtoupper+0x10c>)
 801a570:	e000      	b.n	801a574 <ff_wtoupper+0x18>
 801a572:	4b3e      	ldr	r3, [pc, #248]	; (801a66c <ff_wtoupper+0x110>)
 801a574:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a576:	697b      	ldr	r3, [r7, #20]
 801a578:	1c9a      	adds	r2, r3, #2
 801a57a:	617a      	str	r2, [r7, #20]
 801a57c:	881b      	ldrh	r3, [r3, #0]
 801a57e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a580:	8a7b      	ldrh	r3, [r7, #18]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d068      	beq.n	801a658 <ff_wtoupper+0xfc>
 801a586:	88fa      	ldrh	r2, [r7, #6]
 801a588:	8a7b      	ldrh	r3, [r7, #18]
 801a58a:	429a      	cmp	r2, r3
 801a58c:	d364      	bcc.n	801a658 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a58e:	697b      	ldr	r3, [r7, #20]
 801a590:	1c9a      	adds	r2, r3, #2
 801a592:	617a      	str	r2, [r7, #20]
 801a594:	881b      	ldrh	r3, [r3, #0]
 801a596:	823b      	strh	r3, [r7, #16]
 801a598:	8a3b      	ldrh	r3, [r7, #16]
 801a59a:	0a1b      	lsrs	r3, r3, #8
 801a59c:	81fb      	strh	r3, [r7, #14]
 801a59e:	8a3b      	ldrh	r3, [r7, #16]
 801a5a0:	b2db      	uxtb	r3, r3
 801a5a2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a5a4:	88fa      	ldrh	r2, [r7, #6]
 801a5a6:	8a79      	ldrh	r1, [r7, #18]
 801a5a8:	8a3b      	ldrh	r3, [r7, #16]
 801a5aa:	440b      	add	r3, r1
 801a5ac:	429a      	cmp	r2, r3
 801a5ae:	da49      	bge.n	801a644 <ff_wtoupper+0xe8>
			switch (cmd) {
 801a5b0:	89fb      	ldrh	r3, [r7, #14]
 801a5b2:	2b08      	cmp	r3, #8
 801a5b4:	d84f      	bhi.n	801a656 <ff_wtoupper+0xfa>
 801a5b6:	a201      	add	r2, pc, #4	; (adr r2, 801a5bc <ff_wtoupper+0x60>)
 801a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5bc:	0801a5e1 	.word	0x0801a5e1
 801a5c0:	0801a5f3 	.word	0x0801a5f3
 801a5c4:	0801a609 	.word	0x0801a609
 801a5c8:	0801a611 	.word	0x0801a611
 801a5cc:	0801a619 	.word	0x0801a619
 801a5d0:	0801a621 	.word	0x0801a621
 801a5d4:	0801a629 	.word	0x0801a629
 801a5d8:	0801a631 	.word	0x0801a631
 801a5dc:	0801a639 	.word	0x0801a639
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a5e0:	88fa      	ldrh	r2, [r7, #6]
 801a5e2:	8a7b      	ldrh	r3, [r7, #18]
 801a5e4:	1ad3      	subs	r3, r2, r3
 801a5e6:	005b      	lsls	r3, r3, #1
 801a5e8:	697a      	ldr	r2, [r7, #20]
 801a5ea:	4413      	add	r3, r2
 801a5ec:	881b      	ldrh	r3, [r3, #0]
 801a5ee:	80fb      	strh	r3, [r7, #6]
 801a5f0:	e027      	b.n	801a642 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a5f2:	88fa      	ldrh	r2, [r7, #6]
 801a5f4:	8a7b      	ldrh	r3, [r7, #18]
 801a5f6:	1ad3      	subs	r3, r2, r3
 801a5f8:	b29b      	uxth	r3, r3
 801a5fa:	f003 0301 	and.w	r3, r3, #1
 801a5fe:	b29b      	uxth	r3, r3
 801a600:	88fa      	ldrh	r2, [r7, #6]
 801a602:	1ad3      	subs	r3, r2, r3
 801a604:	80fb      	strh	r3, [r7, #6]
 801a606:	e01c      	b.n	801a642 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a608:	88fb      	ldrh	r3, [r7, #6]
 801a60a:	3b10      	subs	r3, #16
 801a60c:	80fb      	strh	r3, [r7, #6]
 801a60e:	e018      	b.n	801a642 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a610:	88fb      	ldrh	r3, [r7, #6]
 801a612:	3b20      	subs	r3, #32
 801a614:	80fb      	strh	r3, [r7, #6]
 801a616:	e014      	b.n	801a642 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a618:	88fb      	ldrh	r3, [r7, #6]
 801a61a:	3b30      	subs	r3, #48	; 0x30
 801a61c:	80fb      	strh	r3, [r7, #6]
 801a61e:	e010      	b.n	801a642 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a620:	88fb      	ldrh	r3, [r7, #6]
 801a622:	3b1a      	subs	r3, #26
 801a624:	80fb      	strh	r3, [r7, #6]
 801a626:	e00c      	b.n	801a642 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a628:	88fb      	ldrh	r3, [r7, #6]
 801a62a:	3308      	adds	r3, #8
 801a62c:	80fb      	strh	r3, [r7, #6]
 801a62e:	e008      	b.n	801a642 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a630:	88fb      	ldrh	r3, [r7, #6]
 801a632:	3b50      	subs	r3, #80	; 0x50
 801a634:	80fb      	strh	r3, [r7, #6]
 801a636:	e004      	b.n	801a642 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a638:	88fb      	ldrh	r3, [r7, #6]
 801a63a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a63e:	80fb      	strh	r3, [r7, #6]
 801a640:	bf00      	nop
			}
			break;
 801a642:	e008      	b.n	801a656 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a644:	89fb      	ldrh	r3, [r7, #14]
 801a646:	2b00      	cmp	r3, #0
 801a648:	d195      	bne.n	801a576 <ff_wtoupper+0x1a>
 801a64a:	8a3b      	ldrh	r3, [r7, #16]
 801a64c:	005b      	lsls	r3, r3, #1
 801a64e:	697a      	ldr	r2, [r7, #20]
 801a650:	4413      	add	r3, r2
 801a652:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a654:	e78f      	b.n	801a576 <ff_wtoupper+0x1a>
			break;
 801a656:	bf00      	nop
	}

	return chr;
 801a658:	88fb      	ldrh	r3, [r7, #6]
}
 801a65a:	4618      	mov	r0, r3
 801a65c:	371c      	adds	r7, #28
 801a65e:	46bd      	mov	sp, r7
 801a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a664:	4770      	bx	lr
 801a666:	bf00      	nop
 801a668:	0801b58c 	.word	0x0801b58c
 801a66c:	0801b780 	.word	0x0801b780

0801a670 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b082      	sub	sp, #8
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801a678:	6878      	ldr	r0, [r7, #4]
 801a67a:	f000 fd27 	bl	801b0cc <malloc>
 801a67e:	4603      	mov	r3, r0
}
 801a680:	4618      	mov	r0, r3
 801a682:	3708      	adds	r7, #8
 801a684:	46bd      	mov	sp, r7
 801a686:	bd80      	pop	{r7, pc}

0801a688 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801a688:	b580      	push	{r7, lr}
 801a68a:	b082      	sub	sp, #8
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 801a690:	6878      	ldr	r0, [r7, #4]
 801a692:	f000 fd23 	bl	801b0dc <free>
}
 801a696:	bf00      	nop
 801a698:	3708      	adds	r7, #8
 801a69a:	46bd      	mov	sp, r7
 801a69c:	bd80      	pop	{r7, pc}
	...

0801a6a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	4913      	ldr	r1, [pc, #76]	; (801a6f4 <MX_USB_DEVICE_Init+0x54>)
 801a6a8:	4813      	ldr	r0, [pc, #76]	; (801a6f8 <MX_USB_DEVICE_Init+0x58>)
 801a6aa:	f7f9 fcd6 	bl	801405a <USBD_Init>
 801a6ae:	4603      	mov	r3, r0
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d001      	beq.n	801a6b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a6b4:	f7e6 fe04 	bl	80012c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801a6b8:	4910      	ldr	r1, [pc, #64]	; (801a6fc <MX_USB_DEVICE_Init+0x5c>)
 801a6ba:	480f      	ldr	r0, [pc, #60]	; (801a6f8 <MX_USB_DEVICE_Init+0x58>)
 801a6bc:	f7f9 fcf8 	bl	80140b0 <USBD_RegisterClass>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d001      	beq.n	801a6ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a6c6:	f7e6 fdfb 	bl	80012c0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801a6ca:	490d      	ldr	r1, [pc, #52]	; (801a700 <MX_USB_DEVICE_Init+0x60>)
 801a6cc:	480a      	ldr	r0, [pc, #40]	; (801a6f8 <MX_USB_DEVICE_Init+0x58>)
 801a6ce:	f7f8 fc9f 	bl	8013010 <USBD_MSC_RegisterStorage>
 801a6d2:	4603      	mov	r3, r0
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d001      	beq.n	801a6dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a6d8:	f7e6 fdf2 	bl	80012c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a6dc:	4806      	ldr	r0, [pc, #24]	; (801a6f8 <MX_USB_DEVICE_Init+0x58>)
 801a6de:	f7f9 fd01 	bl	80140e4 <USBD_Start>
 801a6e2:	4603      	mov	r3, r0
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d001      	beq.n	801a6ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a6e8:	f7e6 fdea 	bl	80012c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a6ec:	f7ee fa3a 	bl	8008b64 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a6f0:	bf00      	nop
 801a6f2:	bd80      	pop	{r7, pc}
 801a6f4:	240000c0 	.word	0x240000c0
 801a6f8:	240079e4 	.word	0x240079e4
 801a6fc:	2400001c 	.word	0x2400001c
 801a700:	24000110 	.word	0x24000110

0801a704 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a704:	b480      	push	{r7}
 801a706:	b083      	sub	sp, #12
 801a708:	af00      	add	r7, sp, #0
 801a70a:	4603      	mov	r3, r0
 801a70c:	6039      	str	r1, [r7, #0]
 801a70e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a710:	683b      	ldr	r3, [r7, #0]
 801a712:	2212      	movs	r2, #18
 801a714:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a716:	4b03      	ldr	r3, [pc, #12]	; (801a724 <USBD_FS_DeviceDescriptor+0x20>)
}
 801a718:	4618      	mov	r0, r3
 801a71a:	370c      	adds	r7, #12
 801a71c:	46bd      	mov	sp, r7
 801a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a722:	4770      	bx	lr
 801a724:	240000dc 	.word	0x240000dc

0801a728 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a728:	b480      	push	{r7}
 801a72a:	b083      	sub	sp, #12
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	4603      	mov	r3, r0
 801a730:	6039      	str	r1, [r7, #0]
 801a732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a734:	683b      	ldr	r3, [r7, #0]
 801a736:	2204      	movs	r2, #4
 801a738:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a73a:	4b03      	ldr	r3, [pc, #12]	; (801a748 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a73c:	4618      	mov	r0, r3
 801a73e:	370c      	adds	r7, #12
 801a740:	46bd      	mov	sp, r7
 801a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a746:	4770      	bx	lr
 801a748:	240000f0 	.word	0x240000f0

0801a74c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b082      	sub	sp, #8
 801a750:	af00      	add	r7, sp, #0
 801a752:	4603      	mov	r3, r0
 801a754:	6039      	str	r1, [r7, #0]
 801a756:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a758:	79fb      	ldrb	r3, [r7, #7]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d105      	bne.n	801a76a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a75e:	683a      	ldr	r2, [r7, #0]
 801a760:	4907      	ldr	r1, [pc, #28]	; (801a780 <USBD_FS_ProductStrDescriptor+0x34>)
 801a762:	4808      	ldr	r0, [pc, #32]	; (801a784 <USBD_FS_ProductStrDescriptor+0x38>)
 801a764:	f7fa fc6a 	bl	801503c <USBD_GetString>
 801a768:	e004      	b.n	801a774 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a76a:	683a      	ldr	r2, [r7, #0]
 801a76c:	4904      	ldr	r1, [pc, #16]	; (801a780 <USBD_FS_ProductStrDescriptor+0x34>)
 801a76e:	4805      	ldr	r0, [pc, #20]	; (801a784 <USBD_FS_ProductStrDescriptor+0x38>)
 801a770:	f7fa fc64 	bl	801503c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a774:	4b02      	ldr	r3, [pc, #8]	; (801a780 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a776:	4618      	mov	r0, r3
 801a778:	3708      	adds	r7, #8
 801a77a:	46bd      	mov	sp, r7
 801a77c:	bd80      	pop	{r7, pc}
 801a77e:	bf00      	nop
 801a780:	24007ca8 	.word	0x24007ca8
 801a784:	0801b374 	.word	0x0801b374

0801a788 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a788:	b580      	push	{r7, lr}
 801a78a:	b082      	sub	sp, #8
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	4603      	mov	r3, r0
 801a790:	6039      	str	r1, [r7, #0]
 801a792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a794:	683a      	ldr	r2, [r7, #0]
 801a796:	4904      	ldr	r1, [pc, #16]	; (801a7a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a798:	4804      	ldr	r0, [pc, #16]	; (801a7ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a79a:	f7fa fc4f 	bl	801503c <USBD_GetString>
  return USBD_StrDesc;
 801a79e:	4b02      	ldr	r3, [pc, #8]	; (801a7a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a7a0:	4618      	mov	r0, r3
 801a7a2:	3708      	adds	r7, #8
 801a7a4:	46bd      	mov	sp, r7
 801a7a6:	bd80      	pop	{r7, pc}
 801a7a8:	24007ca8 	.word	0x24007ca8
 801a7ac:	0801b388 	.word	0x0801b388

0801a7b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a7b0:	b580      	push	{r7, lr}
 801a7b2:	b082      	sub	sp, #8
 801a7b4:	af00      	add	r7, sp, #0
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	6039      	str	r1, [r7, #0]
 801a7ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a7bc:	683b      	ldr	r3, [r7, #0]
 801a7be:	221a      	movs	r2, #26
 801a7c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a7c2:	f000 f843 	bl	801a84c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a7c6:	4b02      	ldr	r3, [pc, #8]	; (801a7d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	3708      	adds	r7, #8
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	bd80      	pop	{r7, pc}
 801a7d0:	240000f4 	.word	0x240000f4

0801a7d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b082      	sub	sp, #8
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	4603      	mov	r3, r0
 801a7dc:	6039      	str	r1, [r7, #0]
 801a7de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a7e0:	79fb      	ldrb	r3, [r7, #7]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d105      	bne.n	801a7f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a7e6:	683a      	ldr	r2, [r7, #0]
 801a7e8:	4907      	ldr	r1, [pc, #28]	; (801a808 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a7ea:	4808      	ldr	r0, [pc, #32]	; (801a80c <USBD_FS_ConfigStrDescriptor+0x38>)
 801a7ec:	f7fa fc26 	bl	801503c <USBD_GetString>
 801a7f0:	e004      	b.n	801a7fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a7f2:	683a      	ldr	r2, [r7, #0]
 801a7f4:	4904      	ldr	r1, [pc, #16]	; (801a808 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a7f6:	4805      	ldr	r0, [pc, #20]	; (801a80c <USBD_FS_ConfigStrDescriptor+0x38>)
 801a7f8:	f7fa fc20 	bl	801503c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a7fc:	4b02      	ldr	r3, [pc, #8]	; (801a808 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a7fe:	4618      	mov	r0, r3
 801a800:	3708      	adds	r7, #8
 801a802:	46bd      	mov	sp, r7
 801a804:	bd80      	pop	{r7, pc}
 801a806:	bf00      	nop
 801a808:	24007ca8 	.word	0x24007ca8
 801a80c:	0801b39c 	.word	0x0801b39c

0801a810 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b082      	sub	sp, #8
 801a814:	af00      	add	r7, sp, #0
 801a816:	4603      	mov	r3, r0
 801a818:	6039      	str	r1, [r7, #0]
 801a81a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a81c:	79fb      	ldrb	r3, [r7, #7]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d105      	bne.n	801a82e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a822:	683a      	ldr	r2, [r7, #0]
 801a824:	4907      	ldr	r1, [pc, #28]	; (801a844 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a826:	4808      	ldr	r0, [pc, #32]	; (801a848 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a828:	f7fa fc08 	bl	801503c <USBD_GetString>
 801a82c:	e004      	b.n	801a838 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a82e:	683a      	ldr	r2, [r7, #0]
 801a830:	4904      	ldr	r1, [pc, #16]	; (801a844 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a832:	4805      	ldr	r0, [pc, #20]	; (801a848 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a834:	f7fa fc02 	bl	801503c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a838:	4b02      	ldr	r3, [pc, #8]	; (801a844 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a83a:	4618      	mov	r0, r3
 801a83c:	3708      	adds	r7, #8
 801a83e:	46bd      	mov	sp, r7
 801a840:	bd80      	pop	{r7, pc}
 801a842:	bf00      	nop
 801a844:	24007ca8 	.word	0x24007ca8
 801a848:	0801b3a8 	.word	0x0801b3a8

0801a84c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b084      	sub	sp, #16
 801a850:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a852:	4b0f      	ldr	r3, [pc, #60]	; (801a890 <Get_SerialNum+0x44>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a858:	4b0e      	ldr	r3, [pc, #56]	; (801a894 <Get_SerialNum+0x48>)
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a85e:	4b0e      	ldr	r3, [pc, #56]	; (801a898 <Get_SerialNum+0x4c>)
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a864:	68fa      	ldr	r2, [r7, #12]
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	4413      	add	r3, r2
 801a86a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d009      	beq.n	801a886 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a872:	2208      	movs	r2, #8
 801a874:	4909      	ldr	r1, [pc, #36]	; (801a89c <Get_SerialNum+0x50>)
 801a876:	68f8      	ldr	r0, [r7, #12]
 801a878:	f000 f814 	bl	801a8a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a87c:	2204      	movs	r2, #4
 801a87e:	4908      	ldr	r1, [pc, #32]	; (801a8a0 <Get_SerialNum+0x54>)
 801a880:	68b8      	ldr	r0, [r7, #8]
 801a882:	f000 f80f 	bl	801a8a4 <IntToUnicode>
  }
}
 801a886:	bf00      	nop
 801a888:	3710      	adds	r7, #16
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd80      	pop	{r7, pc}
 801a88e:	bf00      	nop
 801a890:	1ff1e800 	.word	0x1ff1e800
 801a894:	1ff1e804 	.word	0x1ff1e804
 801a898:	1ff1e808 	.word	0x1ff1e808
 801a89c:	240000f6 	.word	0x240000f6
 801a8a0:	24000106 	.word	0x24000106

0801a8a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a8a4:	b480      	push	{r7}
 801a8a6:	b087      	sub	sp, #28
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	60f8      	str	r0, [r7, #12]
 801a8ac:	60b9      	str	r1, [r7, #8]
 801a8ae:	4613      	mov	r3, r2
 801a8b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	75fb      	strb	r3, [r7, #23]
 801a8ba:	e027      	b.n	801a90c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	0f1b      	lsrs	r3, r3, #28
 801a8c0:	2b09      	cmp	r3, #9
 801a8c2:	d80b      	bhi.n	801a8dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	0f1b      	lsrs	r3, r3, #28
 801a8c8:	b2da      	uxtb	r2, r3
 801a8ca:	7dfb      	ldrb	r3, [r7, #23]
 801a8cc:	005b      	lsls	r3, r3, #1
 801a8ce:	4619      	mov	r1, r3
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	440b      	add	r3, r1
 801a8d4:	3230      	adds	r2, #48	; 0x30
 801a8d6:	b2d2      	uxtb	r2, r2
 801a8d8:	701a      	strb	r2, [r3, #0]
 801a8da:	e00a      	b.n	801a8f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	0f1b      	lsrs	r3, r3, #28
 801a8e0:	b2da      	uxtb	r2, r3
 801a8e2:	7dfb      	ldrb	r3, [r7, #23]
 801a8e4:	005b      	lsls	r3, r3, #1
 801a8e6:	4619      	mov	r1, r3
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	440b      	add	r3, r1
 801a8ec:	3237      	adds	r2, #55	; 0x37
 801a8ee:	b2d2      	uxtb	r2, r2
 801a8f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	011b      	lsls	r3, r3, #4
 801a8f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a8f8:	7dfb      	ldrb	r3, [r7, #23]
 801a8fa:	005b      	lsls	r3, r3, #1
 801a8fc:	3301      	adds	r3, #1
 801a8fe:	68ba      	ldr	r2, [r7, #8]
 801a900:	4413      	add	r3, r2
 801a902:	2200      	movs	r2, #0
 801a904:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a906:	7dfb      	ldrb	r3, [r7, #23]
 801a908:	3301      	adds	r3, #1
 801a90a:	75fb      	strb	r3, [r7, #23]
 801a90c:	7dfa      	ldrb	r2, [r7, #23]
 801a90e:	79fb      	ldrb	r3, [r7, #7]
 801a910:	429a      	cmp	r2, r3
 801a912:	d3d3      	bcc.n	801a8bc <IntToUnicode+0x18>
  }
}
 801a914:	bf00      	nop
 801a916:	371c      	adds	r7, #28
 801a918:	46bd      	mov	sp, r7
 801a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a91e:	4770      	bx	lr

0801a920 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801a920:	b480      	push	{r7}
 801a922:	b083      	sub	sp, #12
 801a924:	af00      	add	r7, sp, #0
 801a926:	4603      	mov	r3, r0
 801a928:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801a92a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801a92c:	4618      	mov	r0, r3
 801a92e:	370c      	adds	r7, #12
 801a930:	46bd      	mov	sp, r7
 801a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a936:	4770      	bx	lr

0801a938 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b084      	sub	sp, #16
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	4603      	mov	r3, r0
 801a940:	60b9      	str	r1, [r7, #8]
 801a942:	607a      	str	r2, [r7, #4]
 801a944:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 801a946:	490b      	ldr	r1, [pc, #44]	; (801a974 <STORAGE_GetCapacity_FS+0x3c>)
 801a948:	480b      	ldr	r0, [pc, #44]	; (801a978 <STORAGE_GetCapacity_FS+0x40>)
 801a94a:	f7f2 f909 	bl	800cb60 <HAL_SD_GetCardInfo>
 801a94e:	4603      	mov	r3, r0
 801a950:	2b00      	cmp	r3, #0
 801a952:	d10a      	bne.n	801a96a <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 801a954:	4b07      	ldr	r3, [pc, #28]	; (801a974 <STORAGE_GetCapacity_FS+0x3c>)
 801a956:	699a      	ldr	r2, [r3, #24]
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 801a95c:	4b05      	ldr	r3, [pc, #20]	; (801a974 <STORAGE_GetCapacity_FS+0x3c>)
 801a95e:	69db      	ldr	r3, [r3, #28]
 801a960:	b29a      	uxth	r2, r3
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801a966:	2300      	movs	r3, #0
 801a968:	e7ff      	b.n	801a96a <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 801a96a:	4618      	mov	r0, r3
 801a96c:	3710      	adds	r7, #16
 801a96e:	46bd      	mov	sp, r7
 801a970:	bd80      	pop	{r7, pc}
 801a972:	bf00      	nop
 801a974:	24002628 	.word	0x24002628
 801a978:	24001448 	.word	0x24001448

0801a97c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801a97c:	b480      	push	{r7}
 801a97e:	b083      	sub	sp, #12
 801a980:	af00      	add	r7, sp, #0
 801a982:	4603      	mov	r3, r0
 801a984:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a986:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a988:	4618      	mov	r0, r3
 801a98a:	370c      	adds	r7, #12
 801a98c:	46bd      	mov	sp, r7
 801a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a992:	4770      	bx	lr

0801a994 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801a994:	b480      	push	{r7}
 801a996:	b083      	sub	sp, #12
 801a998:	af00      	add	r7, sp, #0
 801a99a:	4603      	mov	r3, r0
 801a99c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801a99e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	370c      	adds	r7, #12
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9aa:	4770      	bx	lr

0801a9ac <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b086      	sub	sp, #24
 801a9b0:	af02      	add	r7, sp, #8
 801a9b2:	60b9      	str	r1, [r7, #8]
 801a9b4:	607a      	str	r2, [r7, #4]
 801a9b6:	461a      	mov	r2, r3
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	73fb      	strb	r3, [r7, #15]
 801a9bc:	4613      	mov	r3, r2
 801a9be:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 801a9c0:	89ba      	ldrh	r2, [r7, #12]
 801a9c2:	230a      	movs	r3, #10
 801a9c4:	9300      	str	r3, [sp, #0]
 801a9c6:	4613      	mov	r3, r2
 801a9c8:	687a      	ldr	r2, [r7, #4]
 801a9ca:	68b9      	ldr	r1, [r7, #8]
 801a9cc:	4805      	ldr	r0, [pc, #20]	; (801a9e4 <STORAGE_Read_FS+0x38>)
 801a9ce:	f7f1 fb49 	bl	800c064 <HAL_SD_ReadBlocks>
 801a9d2:	4603      	mov	r3, r0
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d101      	bne.n	801a9dc <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 801a9d8:	2300      	movs	r3, #0
 801a9da:	e7ff      	b.n	801a9dc <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 801a9dc:	4618      	mov	r0, r3
 801a9de:	3710      	adds	r7, #16
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}
 801a9e4:	24001448 	.word	0x24001448

0801a9e8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b086      	sub	sp, #24
 801a9ec:	af02      	add	r7, sp, #8
 801a9ee:	60b9      	str	r1, [r7, #8]
 801a9f0:	607a      	str	r2, [r7, #4]
 801a9f2:	461a      	mov	r2, r3
 801a9f4:	4603      	mov	r3, r0
 801a9f6:	73fb      	strb	r3, [r7, #15]
 801a9f8:	4613      	mov	r3, r2
 801a9fa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 801a9fc:	89ba      	ldrh	r2, [r7, #12]
 801a9fe:	230a      	movs	r3, #10
 801aa00:	9300      	str	r3, [sp, #0]
 801aa02:	4613      	mov	r3, r2
 801aa04:	687a      	ldr	r2, [r7, #4]
 801aa06:	68b9      	ldr	r1, [r7, #8]
 801aa08:	4805      	ldr	r0, [pc, #20]	; (801aa20 <STORAGE_Write_FS+0x38>)
 801aa0a:	f7f1 fcb5 	bl	800c378 <HAL_SD_WriteBlocks>
 801aa0e:	4603      	mov	r3, r0
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d101      	bne.n	801aa18 <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 801aa14:	2300      	movs	r3, #0
 801aa16:	e7ff      	b.n	801aa18 <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 801aa18:	4618      	mov	r0, r3
 801aa1a:	3710      	adds	r7, #16
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	bd80      	pop	{r7, pc}
 801aa20:	24001448 	.word	0x24001448

0801aa24 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801aa24:	b480      	push	{r7}
 801aa26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801aa28:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa32:	4770      	bx	lr

0801aa34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b08a      	sub	sp, #40	; 0x28
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801aa3c:	f107 0314 	add.w	r3, r7, #20
 801aa40:	2200      	movs	r2, #0
 801aa42:	601a      	str	r2, [r3, #0]
 801aa44:	605a      	str	r2, [r3, #4]
 801aa46:	609a      	str	r2, [r3, #8]
 801aa48:	60da      	str	r2, [r3, #12]
 801aa4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	4a1e      	ldr	r2, [pc, #120]	; (801aacc <HAL_PCD_MspInit+0x98>)
 801aa52:	4293      	cmp	r3, r2
 801aa54:	d136      	bne.n	801aac4 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801aa56:	4b1e      	ldr	r3, [pc, #120]	; (801aad0 <HAL_PCD_MspInit+0x9c>)
 801aa58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801aa5c:	4a1c      	ldr	r2, [pc, #112]	; (801aad0 <HAL_PCD_MspInit+0x9c>)
 801aa5e:	f043 0301 	orr.w	r3, r3, #1
 801aa62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801aa66:	4b1a      	ldr	r3, [pc, #104]	; (801aad0 <HAL_PCD_MspInit+0x9c>)
 801aa68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801aa6c:	f003 0301 	and.w	r3, r3, #1
 801aa70:	613b      	str	r3, [r7, #16]
 801aa72:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801aa74:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801aa78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801aa7a:	2302      	movs	r3, #2
 801aa7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aa7e:	2300      	movs	r3, #0
 801aa80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801aa82:	2300      	movs	r3, #0
 801aa84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801aa86:	230a      	movs	r3, #10
 801aa88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801aa8a:	f107 0314 	add.w	r3, r7, #20
 801aa8e:	4619      	mov	r1, r3
 801aa90:	4810      	ldr	r0, [pc, #64]	; (801aad4 <HAL_PCD_MspInit+0xa0>)
 801aa92:	f7ec fc03 	bl	800729c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801aa96:	4b0e      	ldr	r3, [pc, #56]	; (801aad0 <HAL_PCD_MspInit+0x9c>)
 801aa98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801aa9c:	4a0c      	ldr	r2, [pc, #48]	; (801aad0 <HAL_PCD_MspInit+0x9c>)
 801aa9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801aaa2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801aaa6:	4b0a      	ldr	r3, [pc, #40]	; (801aad0 <HAL_PCD_MspInit+0x9c>)
 801aaa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801aaac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801aab0:	60fb      	str	r3, [r7, #12]
 801aab2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801aab4:	2200      	movs	r2, #0
 801aab6:	2100      	movs	r1, #0
 801aab8:	2065      	movs	r0, #101	; 0x65
 801aaba:	f7e8 fdf6 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801aabe:	2065      	movs	r0, #101	; 0x65
 801aac0:	f7e8 fe0d 	bl	80036de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801aac4:	bf00      	nop
 801aac6:	3728      	adds	r7, #40	; 0x28
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}
 801aacc:	40080000 	.word	0x40080000
 801aad0:	58024400 	.word	0x58024400
 801aad4:	58020000 	.word	0x58020000

0801aad8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b082      	sub	sp, #8
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801aaec:	4619      	mov	r1, r3
 801aaee:	4610      	mov	r0, r2
 801aaf0:	f7f9 fb41 	bl	8014176 <USBD_LL_SetupStage>
}
 801aaf4:	bf00      	nop
 801aaf6:	3708      	adds	r7, #8
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	bd80      	pop	{r7, pc}

0801aafc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b082      	sub	sp, #8
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
 801ab04:	460b      	mov	r3, r1
 801ab06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801ab0e:	78fa      	ldrb	r2, [r7, #3]
 801ab10:	6879      	ldr	r1, [r7, #4]
 801ab12:	4613      	mov	r3, r2
 801ab14:	00db      	lsls	r3, r3, #3
 801ab16:	1a9b      	subs	r3, r3, r2
 801ab18:	009b      	lsls	r3, r3, #2
 801ab1a:	440b      	add	r3, r1
 801ab1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ab20:	681a      	ldr	r2, [r3, #0]
 801ab22:	78fb      	ldrb	r3, [r7, #3]
 801ab24:	4619      	mov	r1, r3
 801ab26:	f7f9 fb71 	bl	801420c <USBD_LL_DataOutStage>
}
 801ab2a:	bf00      	nop
 801ab2c:	3708      	adds	r7, #8
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	bd80      	pop	{r7, pc}

0801ab32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab32:	b580      	push	{r7, lr}
 801ab34:	b082      	sub	sp, #8
 801ab36:	af00      	add	r7, sp, #0
 801ab38:	6078      	str	r0, [r7, #4]
 801ab3a:	460b      	mov	r3, r1
 801ab3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801ab44:	78fa      	ldrb	r2, [r7, #3]
 801ab46:	6879      	ldr	r1, [r7, #4]
 801ab48:	4613      	mov	r3, r2
 801ab4a:	00db      	lsls	r3, r3, #3
 801ab4c:	1a9b      	subs	r3, r3, r2
 801ab4e:	009b      	lsls	r3, r3, #2
 801ab50:	440b      	add	r3, r1
 801ab52:	3348      	adds	r3, #72	; 0x48
 801ab54:	681a      	ldr	r2, [r3, #0]
 801ab56:	78fb      	ldrb	r3, [r7, #3]
 801ab58:	4619      	mov	r1, r3
 801ab5a:	f7f9 fbc8 	bl	80142ee <USBD_LL_DataInStage>
}
 801ab5e:	bf00      	nop
 801ab60:	3708      	adds	r7, #8
 801ab62:	46bd      	mov	sp, r7
 801ab64:	bd80      	pop	{r7, pc}

0801ab66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab66:	b580      	push	{r7, lr}
 801ab68:	b082      	sub	sp, #8
 801ab6a:	af00      	add	r7, sp, #0
 801ab6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801ab74:	4618      	mov	r0, r3
 801ab76:	f7f9 fcdb 	bl	8014530 <USBD_LL_SOF>
}
 801ab7a:	bf00      	nop
 801ab7c:	3708      	adds	r7, #8
 801ab7e:	46bd      	mov	sp, r7
 801ab80:	bd80      	pop	{r7, pc}

0801ab82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801ab82:	b580      	push	{r7, lr}
 801ab84:	b084      	sub	sp, #16
 801ab86:	af00      	add	r7, sp, #0
 801ab88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801ab8a:	2301      	movs	r3, #1
 801ab8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	68db      	ldr	r3, [r3, #12]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d102      	bne.n	801ab9c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801ab96:	2300      	movs	r3, #0
 801ab98:	73fb      	strb	r3, [r7, #15]
 801ab9a:	e008      	b.n	801abae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	68db      	ldr	r3, [r3, #12]
 801aba0:	2b02      	cmp	r3, #2
 801aba2:	d102      	bne.n	801abaa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801aba4:	2301      	movs	r3, #1
 801aba6:	73fb      	strb	r3, [r7, #15]
 801aba8:	e001      	b.n	801abae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801abaa:	f7e6 fb89 	bl	80012c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801abb4:	7bfa      	ldrb	r2, [r7, #15]
 801abb6:	4611      	mov	r1, r2
 801abb8:	4618      	mov	r0, r3
 801abba:	f7f9 fc7e 	bl	80144ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7f9 fc37 	bl	8014438 <USBD_LL_Reset>
}
 801abca:	bf00      	nop
 801abcc:	3710      	adds	r7, #16
 801abce:	46bd      	mov	sp, r7
 801abd0:	bd80      	pop	{r7, pc}
	...

0801abd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b082      	sub	sp, #8
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801abe2:	4618      	mov	r0, r3
 801abe4:	f7f9 fc79 	bl	80144da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	687a      	ldr	r2, [r7, #4]
 801abf4:	6812      	ldr	r2, [r2, #0]
 801abf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801abfa:	f043 0301 	orr.w	r3, r3, #1
 801abfe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	6a1b      	ldr	r3, [r3, #32]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d005      	beq.n	801ac14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ac08:	4b04      	ldr	r3, [pc, #16]	; (801ac1c <HAL_PCD_SuspendCallback+0x48>)
 801ac0a:	691b      	ldr	r3, [r3, #16]
 801ac0c:	4a03      	ldr	r2, [pc, #12]	; (801ac1c <HAL_PCD_SuspendCallback+0x48>)
 801ac0e:	f043 0306 	orr.w	r3, r3, #6
 801ac12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801ac14:	bf00      	nop
 801ac16:	3708      	adds	r7, #8
 801ac18:	46bd      	mov	sp, r7
 801ac1a:	bd80      	pop	{r7, pc}
 801ac1c:	e000ed00 	.word	0xe000ed00

0801ac20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b082      	sub	sp, #8
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f7f9 fc68 	bl	8014504 <USBD_LL_Resume>
}
 801ac34:	bf00      	nop
 801ac36:	3708      	adds	r7, #8
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	bd80      	pop	{r7, pc}

0801ac3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b082      	sub	sp, #8
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
 801ac44:	460b      	mov	r3, r1
 801ac46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801ac4e:	78fa      	ldrb	r2, [r7, #3]
 801ac50:	4611      	mov	r1, r2
 801ac52:	4618      	mov	r0, r3
 801ac54:	f7f9 fc93 	bl	801457e <USBD_LL_IsoOUTIncomplete>
}
 801ac58:	bf00      	nop
 801ac5a:	3708      	adds	r7, #8
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	bd80      	pop	{r7, pc}

0801ac60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b082      	sub	sp, #8
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
 801ac68:	460b      	mov	r3, r1
 801ac6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801ac72:	78fa      	ldrb	r2, [r7, #3]
 801ac74:	4611      	mov	r1, r2
 801ac76:	4618      	mov	r0, r3
 801ac78:	f7f9 fc74 	bl	8014564 <USBD_LL_IsoINIncomplete>
}
 801ac7c:	bf00      	nop
 801ac7e:	3708      	adds	r7, #8
 801ac80:	46bd      	mov	sp, r7
 801ac82:	bd80      	pop	{r7, pc}

0801ac84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b082      	sub	sp, #8
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801ac92:	4618      	mov	r0, r3
 801ac94:	f7f9 fc80 	bl	8014598 <USBD_LL_DevConnected>
}
 801ac98:	bf00      	nop
 801ac9a:	3708      	adds	r7, #8
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	bd80      	pop	{r7, pc}

0801aca0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aca0:	b580      	push	{r7, lr}
 801aca2:	b082      	sub	sp, #8
 801aca4:	af00      	add	r7, sp, #0
 801aca6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801acae:	4618      	mov	r0, r3
 801acb0:	f7f9 fc7d 	bl	80145ae <USBD_LL_DevDisconnected>
}
 801acb4:	bf00      	nop
 801acb6:	3708      	adds	r7, #8
 801acb8:	46bd      	mov	sp, r7
 801acba:	bd80      	pop	{r7, pc}

0801acbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b082      	sub	sp, #8
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	781b      	ldrb	r3, [r3, #0]
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d13e      	bne.n	801ad4a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801accc:	4a21      	ldr	r2, [pc, #132]	; (801ad54 <USBD_LL_Init+0x98>)
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	4a1f      	ldr	r2, [pc, #124]	; (801ad54 <USBD_LL_Init+0x98>)
 801acd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801acdc:	4b1d      	ldr	r3, [pc, #116]	; (801ad54 <USBD_LL_Init+0x98>)
 801acde:	4a1e      	ldr	r2, [pc, #120]	; (801ad58 <USBD_LL_Init+0x9c>)
 801ace0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801ace2:	4b1c      	ldr	r3, [pc, #112]	; (801ad54 <USBD_LL_Init+0x98>)
 801ace4:	2209      	movs	r2, #9
 801ace6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801ace8:	4b1a      	ldr	r3, [pc, #104]	; (801ad54 <USBD_LL_Init+0x98>)
 801acea:	2202      	movs	r2, #2
 801acec:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801acee:	4b19      	ldr	r3, [pc, #100]	; (801ad54 <USBD_LL_Init+0x98>)
 801acf0:	2200      	movs	r2, #0
 801acf2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801acf4:	4b17      	ldr	r3, [pc, #92]	; (801ad54 <USBD_LL_Init+0x98>)
 801acf6:	2202      	movs	r2, #2
 801acf8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801acfa:	4b16      	ldr	r3, [pc, #88]	; (801ad54 <USBD_LL_Init+0x98>)
 801acfc:	2200      	movs	r2, #0
 801acfe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ad00:	4b14      	ldr	r3, [pc, #80]	; (801ad54 <USBD_LL_Init+0x98>)
 801ad02:	2200      	movs	r2, #0
 801ad04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ad06:	4b13      	ldr	r3, [pc, #76]	; (801ad54 <USBD_LL_Init+0x98>)
 801ad08:	2200      	movs	r2, #0
 801ad0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801ad0c:	4b11      	ldr	r3, [pc, #68]	; (801ad54 <USBD_LL_Init+0x98>)
 801ad0e:	2200      	movs	r2, #0
 801ad10:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801ad12:	4b10      	ldr	r3, [pc, #64]	; (801ad54 <USBD_LL_Init+0x98>)
 801ad14:	2200      	movs	r2, #0
 801ad16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801ad18:	4b0e      	ldr	r3, [pc, #56]	; (801ad54 <USBD_LL_Init+0x98>)
 801ad1a:	2200      	movs	r2, #0
 801ad1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ad1e:	480d      	ldr	r0, [pc, #52]	; (801ad54 <USBD_LL_Init+0x98>)
 801ad20:	f7ec fcdd 	bl	80076de <HAL_PCD_Init>
 801ad24:	4603      	mov	r3, r0
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d001      	beq.n	801ad2e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801ad2a:	f7e6 fac9 	bl	80012c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801ad2e:	2180      	movs	r1, #128	; 0x80
 801ad30:	4808      	ldr	r0, [pc, #32]	; (801ad54 <USBD_LL_Init+0x98>)
 801ad32:	f7ed fe9c 	bl	8008a6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801ad36:	2240      	movs	r2, #64	; 0x40
 801ad38:	2100      	movs	r1, #0
 801ad3a:	4806      	ldr	r0, [pc, #24]	; (801ad54 <USBD_LL_Init+0x98>)
 801ad3c:	f7ed fe50 	bl	80089e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ad40:	2280      	movs	r2, #128	; 0x80
 801ad42:	2101      	movs	r1, #1
 801ad44:	4803      	ldr	r0, [pc, #12]	; (801ad54 <USBD_LL_Init+0x98>)
 801ad46:	f7ed fe4b 	bl	80089e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801ad4a:	2300      	movs	r3, #0
}
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	3708      	adds	r7, #8
 801ad50:	46bd      	mov	sp, r7
 801ad52:	bd80      	pop	{r7, pc}
 801ad54:	24007ea8 	.word	0x24007ea8
 801ad58:	40080000 	.word	0x40080000

0801ad5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ad5c:	b580      	push	{r7, lr}
 801ad5e:	b084      	sub	sp, #16
 801ad60:	af00      	add	r7, sp, #0
 801ad62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad64:	2300      	movs	r3, #0
 801ad66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad68:	2300      	movs	r3, #0
 801ad6a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ad72:	4618      	mov	r0, r3
 801ad74:	f7ec fdd7 	bl	8007926 <HAL_PCD_Start>
 801ad78:	4603      	mov	r3, r0
 801ad7a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801ad7c:	7bfb      	ldrb	r3, [r7, #15]
 801ad7e:	4618      	mov	r0, r3
 801ad80:	f000 f94e 	bl	801b020 <USBD_Get_USB_Status>
 801ad84:	4603      	mov	r3, r0
 801ad86:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801ad88:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	3710      	adds	r7, #16
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	bd80      	pop	{r7, pc}

0801ad92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ad92:	b580      	push	{r7, lr}
 801ad94:	b084      	sub	sp, #16
 801ad96:	af00      	add	r7, sp, #0
 801ad98:	6078      	str	r0, [r7, #4]
 801ad9a:	4608      	mov	r0, r1
 801ad9c:	4611      	mov	r1, r2
 801ad9e:	461a      	mov	r2, r3
 801ada0:	4603      	mov	r3, r0
 801ada2:	70fb      	strb	r3, [r7, #3]
 801ada4:	460b      	mov	r3, r1
 801ada6:	70bb      	strb	r3, [r7, #2]
 801ada8:	4613      	mov	r3, r2
 801adaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801adac:	2300      	movs	r3, #0
 801adae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801adb0:	2300      	movs	r3, #0
 801adb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801adba:	78bb      	ldrb	r3, [r7, #2]
 801adbc:	883a      	ldrh	r2, [r7, #0]
 801adbe:	78f9      	ldrb	r1, [r7, #3]
 801adc0:	f7ed f9e8 	bl	8008194 <HAL_PCD_EP_Open>
 801adc4:	4603      	mov	r3, r0
 801adc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801adc8:	7bfb      	ldrb	r3, [r7, #15]
 801adca:	4618      	mov	r0, r3
 801adcc:	f000 f928 	bl	801b020 <USBD_Get_USB_Status>
 801add0:	4603      	mov	r3, r0
 801add2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801add4:	7bbb      	ldrb	r3, [r7, #14]
}
 801add6:	4618      	mov	r0, r3
 801add8:	3710      	adds	r7, #16
 801adda:	46bd      	mov	sp, r7
 801addc:	bd80      	pop	{r7, pc}

0801adde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801adde:	b580      	push	{r7, lr}
 801ade0:	b084      	sub	sp, #16
 801ade2:	af00      	add	r7, sp, #0
 801ade4:	6078      	str	r0, [r7, #4]
 801ade6:	460b      	mov	r3, r1
 801ade8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801adea:	2300      	movs	r3, #0
 801adec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801adee:	2300      	movs	r3, #0
 801adf0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801adf8:	78fa      	ldrb	r2, [r7, #3]
 801adfa:	4611      	mov	r1, r2
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7ed fa31 	bl	8008264 <HAL_PCD_EP_Close>
 801ae02:	4603      	mov	r3, r0
 801ae04:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801ae06:	7bfb      	ldrb	r3, [r7, #15]
 801ae08:	4618      	mov	r0, r3
 801ae0a:	f000 f909 	bl	801b020 <USBD_Get_USB_Status>
 801ae0e:	4603      	mov	r3, r0
 801ae10:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801ae12:	7bbb      	ldrb	r3, [r7, #14]
}
 801ae14:	4618      	mov	r0, r3
 801ae16:	3710      	adds	r7, #16
 801ae18:	46bd      	mov	sp, r7
 801ae1a:	bd80      	pop	{r7, pc}

0801ae1c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b084      	sub	sp, #16
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	6078      	str	r0, [r7, #4]
 801ae24:	460b      	mov	r3, r1
 801ae26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ae28:	2300      	movs	r3, #0
 801ae2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ae36:	78fa      	ldrb	r2, [r7, #3]
 801ae38:	4611      	mov	r1, r2
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	f7ed fbc3 	bl	80085c6 <HAL_PCD_EP_Flush>
 801ae40:	4603      	mov	r3, r0
 801ae42:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801ae44:	7bfb      	ldrb	r3, [r7, #15]
 801ae46:	4618      	mov	r0, r3
 801ae48:	f000 f8ea 	bl	801b020 <USBD_Get_USB_Status>
 801ae4c:	4603      	mov	r3, r0
 801ae4e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801ae50:	7bbb      	ldrb	r3, [r7, #14]
}
 801ae52:	4618      	mov	r0, r3
 801ae54:	3710      	adds	r7, #16
 801ae56:	46bd      	mov	sp, r7
 801ae58:	bd80      	pop	{r7, pc}

0801ae5a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ae5a:	b580      	push	{r7, lr}
 801ae5c:	b084      	sub	sp, #16
 801ae5e:	af00      	add	r7, sp, #0
 801ae60:	6078      	str	r0, [r7, #4]
 801ae62:	460b      	mov	r3, r1
 801ae64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ae66:	2300      	movs	r3, #0
 801ae68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae6a:	2300      	movs	r3, #0
 801ae6c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ae74:	78fa      	ldrb	r2, [r7, #3]
 801ae76:	4611      	mov	r1, r2
 801ae78:	4618      	mov	r0, r3
 801ae7a:	f7ed faea 	bl	8008452 <HAL_PCD_EP_SetStall>
 801ae7e:	4603      	mov	r3, r0
 801ae80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ae82:	7bfb      	ldrb	r3, [r7, #15]
 801ae84:	4618      	mov	r0, r3
 801ae86:	f000 f8cb 	bl	801b020 <USBD_Get_USB_Status>
 801ae8a:	4603      	mov	r3, r0
 801ae8c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801ae8e:	7bbb      	ldrb	r3, [r7, #14]
}
 801ae90:	4618      	mov	r0, r3
 801ae92:	3710      	adds	r7, #16
 801ae94:	46bd      	mov	sp, r7
 801ae96:	bd80      	pop	{r7, pc}

0801ae98 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ae98:	b580      	push	{r7, lr}
 801ae9a:	b084      	sub	sp, #16
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	6078      	str	r0, [r7, #4]
 801aea0:	460b      	mov	r3, r1
 801aea2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aea4:	2300      	movs	r3, #0
 801aea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aea8:	2300      	movs	r3, #0
 801aeaa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801aeb2:	78fa      	ldrb	r2, [r7, #3]
 801aeb4:	4611      	mov	r1, r2
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	f7ed fb2f 	bl	800851a <HAL_PCD_EP_ClrStall>
 801aebc:	4603      	mov	r3, r0
 801aebe:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801aec0:	7bfb      	ldrb	r3, [r7, #15]
 801aec2:	4618      	mov	r0, r3
 801aec4:	f000 f8ac 	bl	801b020 <USBD_Get_USB_Status>
 801aec8:	4603      	mov	r3, r0
 801aeca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801aecc:	7bbb      	ldrb	r3, [r7, #14]
}
 801aece:	4618      	mov	r0, r3
 801aed0:	3710      	adds	r7, #16
 801aed2:	46bd      	mov	sp, r7
 801aed4:	bd80      	pop	{r7, pc}

0801aed6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aed6:	b480      	push	{r7}
 801aed8:	b085      	sub	sp, #20
 801aeda:	af00      	add	r7, sp, #0
 801aedc:	6078      	str	r0, [r7, #4]
 801aede:	460b      	mov	r3, r1
 801aee0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801aee8:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801aeea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	da0b      	bge.n	801af0a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801aef2:	78fb      	ldrb	r3, [r7, #3]
 801aef4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801aef8:	68f9      	ldr	r1, [r7, #12]
 801aefa:	4613      	mov	r3, r2
 801aefc:	00db      	lsls	r3, r3, #3
 801aefe:	1a9b      	subs	r3, r3, r2
 801af00:	009b      	lsls	r3, r3, #2
 801af02:	440b      	add	r3, r1
 801af04:	333e      	adds	r3, #62	; 0x3e
 801af06:	781b      	ldrb	r3, [r3, #0]
 801af08:	e00b      	b.n	801af22 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801af0a:	78fb      	ldrb	r3, [r7, #3]
 801af0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801af10:	68f9      	ldr	r1, [r7, #12]
 801af12:	4613      	mov	r3, r2
 801af14:	00db      	lsls	r3, r3, #3
 801af16:	1a9b      	subs	r3, r3, r2
 801af18:	009b      	lsls	r3, r3, #2
 801af1a:	440b      	add	r3, r1
 801af1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801af20:	781b      	ldrb	r3, [r3, #0]
  }
}
 801af22:	4618      	mov	r0, r3
 801af24:	3714      	adds	r7, #20
 801af26:	46bd      	mov	sp, r7
 801af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2c:	4770      	bx	lr

0801af2e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801af2e:	b580      	push	{r7, lr}
 801af30:	b084      	sub	sp, #16
 801af32:	af00      	add	r7, sp, #0
 801af34:	6078      	str	r0, [r7, #4]
 801af36:	460b      	mov	r3, r1
 801af38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801af3a:	2300      	movs	r3, #0
 801af3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801af3e:	2300      	movs	r3, #0
 801af40:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801af48:	78fa      	ldrb	r2, [r7, #3]
 801af4a:	4611      	mov	r1, r2
 801af4c:	4618      	mov	r0, r3
 801af4e:	f7ed f8fc 	bl	800814a <HAL_PCD_SetAddress>
 801af52:	4603      	mov	r3, r0
 801af54:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801af56:	7bfb      	ldrb	r3, [r7, #15]
 801af58:	4618      	mov	r0, r3
 801af5a:	f000 f861 	bl	801b020 <USBD_Get_USB_Status>
 801af5e:	4603      	mov	r3, r0
 801af60:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801af62:	7bbb      	ldrb	r3, [r7, #14]
}
 801af64:	4618      	mov	r0, r3
 801af66:	3710      	adds	r7, #16
 801af68:	46bd      	mov	sp, r7
 801af6a:	bd80      	pop	{r7, pc}

0801af6c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801af6c:	b580      	push	{r7, lr}
 801af6e:	b086      	sub	sp, #24
 801af70:	af00      	add	r7, sp, #0
 801af72:	60f8      	str	r0, [r7, #12]
 801af74:	607a      	str	r2, [r7, #4]
 801af76:	461a      	mov	r2, r3
 801af78:	460b      	mov	r3, r1
 801af7a:	72fb      	strb	r3, [r7, #11]
 801af7c:	4613      	mov	r3, r2
 801af7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801af80:	2300      	movs	r3, #0
 801af82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801af84:	2300      	movs	r3, #0
 801af86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801af8e:	893b      	ldrh	r3, [r7, #8]
 801af90:	7af9      	ldrb	r1, [r7, #11]
 801af92:	687a      	ldr	r2, [r7, #4]
 801af94:	f7ed fa13 	bl	80083be <HAL_PCD_EP_Transmit>
 801af98:	4603      	mov	r3, r0
 801af9a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801af9c:	7dfb      	ldrb	r3, [r7, #23]
 801af9e:	4618      	mov	r0, r3
 801afa0:	f000 f83e 	bl	801b020 <USBD_Get_USB_Status>
 801afa4:	4603      	mov	r3, r0
 801afa6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801afa8:	7dbb      	ldrb	r3, [r7, #22]
}
 801afaa:	4618      	mov	r0, r3
 801afac:	3718      	adds	r7, #24
 801afae:	46bd      	mov	sp, r7
 801afb0:	bd80      	pop	{r7, pc}

0801afb2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801afb2:	b580      	push	{r7, lr}
 801afb4:	b086      	sub	sp, #24
 801afb6:	af00      	add	r7, sp, #0
 801afb8:	60f8      	str	r0, [r7, #12]
 801afba:	607a      	str	r2, [r7, #4]
 801afbc:	461a      	mov	r2, r3
 801afbe:	460b      	mov	r3, r1
 801afc0:	72fb      	strb	r3, [r7, #11]
 801afc2:	4613      	mov	r3, r2
 801afc4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801afc6:	2300      	movs	r3, #0
 801afc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801afca:	2300      	movs	r3, #0
 801afcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801afd4:	893b      	ldrh	r3, [r7, #8]
 801afd6:	7af9      	ldrb	r1, [r7, #11]
 801afd8:	687a      	ldr	r2, [r7, #4]
 801afda:	f7ed f98d 	bl	80082f8 <HAL_PCD_EP_Receive>
 801afde:	4603      	mov	r3, r0
 801afe0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801afe2:	7dfb      	ldrb	r3, [r7, #23]
 801afe4:	4618      	mov	r0, r3
 801afe6:	f000 f81b 	bl	801b020 <USBD_Get_USB_Status>
 801afea:	4603      	mov	r3, r0
 801afec:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801afee:	7dbb      	ldrb	r3, [r7, #22]
}
 801aff0:	4618      	mov	r0, r3
 801aff2:	3718      	adds	r7, #24
 801aff4:	46bd      	mov	sp, r7
 801aff6:	bd80      	pop	{r7, pc}

0801aff8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aff8:	b580      	push	{r7, lr}
 801affa:	b082      	sub	sp, #8
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
 801b000:	460b      	mov	r3, r1
 801b002:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b00a:	78fa      	ldrb	r2, [r7, #3]
 801b00c:	4611      	mov	r1, r2
 801b00e:	4618      	mov	r0, r3
 801b010:	f7ed f9bd 	bl	800838e <HAL_PCD_EP_GetRxCount>
 801b014:	4603      	mov	r3, r0
}
 801b016:	4618      	mov	r0, r3
 801b018:	3708      	adds	r7, #8
 801b01a:	46bd      	mov	sp, r7
 801b01c:	bd80      	pop	{r7, pc}
	...

0801b020 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b020:	b480      	push	{r7}
 801b022:	b085      	sub	sp, #20
 801b024:	af00      	add	r7, sp, #0
 801b026:	4603      	mov	r3, r0
 801b028:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b02a:	2300      	movs	r3, #0
 801b02c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b02e:	79fb      	ldrb	r3, [r7, #7]
 801b030:	2b03      	cmp	r3, #3
 801b032:	d817      	bhi.n	801b064 <USBD_Get_USB_Status+0x44>
 801b034:	a201      	add	r2, pc, #4	; (adr r2, 801b03c <USBD_Get_USB_Status+0x1c>)
 801b036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b03a:	bf00      	nop
 801b03c:	0801b04d 	.word	0x0801b04d
 801b040:	0801b053 	.word	0x0801b053
 801b044:	0801b059 	.word	0x0801b059
 801b048:	0801b05f 	.word	0x0801b05f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b04c:	2300      	movs	r3, #0
 801b04e:	73fb      	strb	r3, [r7, #15]
    break;
 801b050:	e00b      	b.n	801b06a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b052:	2302      	movs	r3, #2
 801b054:	73fb      	strb	r3, [r7, #15]
    break;
 801b056:	e008      	b.n	801b06a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b058:	2301      	movs	r3, #1
 801b05a:	73fb      	strb	r3, [r7, #15]
    break;
 801b05c:	e005      	b.n	801b06a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b05e:	2302      	movs	r3, #2
 801b060:	73fb      	strb	r3, [r7, #15]
    break;
 801b062:	e002      	b.n	801b06a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b064:	2302      	movs	r3, #2
 801b066:	73fb      	strb	r3, [r7, #15]
    break;
 801b068:	bf00      	nop
  }
  return usb_status;
 801b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b06c:	4618      	mov	r0, r3
 801b06e:	3714      	adds	r7, #20
 801b070:	46bd      	mov	sp, r7
 801b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b076:	4770      	bx	lr

0801b078 <__errno>:
 801b078:	4b01      	ldr	r3, [pc, #4]	; (801b080 <__errno+0x8>)
 801b07a:	6818      	ldr	r0, [r3, #0]
 801b07c:	4770      	bx	lr
 801b07e:	bf00      	nop
 801b080:	24000130 	.word	0x24000130

0801b084 <__libc_init_array>:
 801b084:	b570      	push	{r4, r5, r6, lr}
 801b086:	4e0d      	ldr	r6, [pc, #52]	; (801b0bc <__libc_init_array+0x38>)
 801b088:	4c0d      	ldr	r4, [pc, #52]	; (801b0c0 <__libc_init_array+0x3c>)
 801b08a:	1ba4      	subs	r4, r4, r6
 801b08c:	10a4      	asrs	r4, r4, #2
 801b08e:	2500      	movs	r5, #0
 801b090:	42a5      	cmp	r5, r4
 801b092:	d109      	bne.n	801b0a8 <__libc_init_array+0x24>
 801b094:	4e0b      	ldr	r6, [pc, #44]	; (801b0c4 <__libc_init_array+0x40>)
 801b096:	4c0c      	ldr	r4, [pc, #48]	; (801b0c8 <__libc_init_array+0x44>)
 801b098:	f000 f8f6 	bl	801b288 <_init>
 801b09c:	1ba4      	subs	r4, r4, r6
 801b09e:	10a4      	asrs	r4, r4, #2
 801b0a0:	2500      	movs	r5, #0
 801b0a2:	42a5      	cmp	r5, r4
 801b0a4:	d105      	bne.n	801b0b2 <__libc_init_array+0x2e>
 801b0a6:	bd70      	pop	{r4, r5, r6, pc}
 801b0a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b0ac:	4798      	blx	r3
 801b0ae:	3501      	adds	r5, #1
 801b0b0:	e7ee      	b.n	801b090 <__libc_init_array+0xc>
 801b0b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b0b6:	4798      	blx	r3
 801b0b8:	3501      	adds	r5, #1
 801b0ba:	e7f2      	b.n	801b0a2 <__libc_init_array+0x1e>
 801b0bc:	0801b868 	.word	0x0801b868
 801b0c0:	0801b868 	.word	0x0801b868
 801b0c4:	0801b868 	.word	0x0801b868
 801b0c8:	0801b86c 	.word	0x0801b86c

0801b0cc <malloc>:
 801b0cc:	4b02      	ldr	r3, [pc, #8]	; (801b0d8 <malloc+0xc>)
 801b0ce:	4601      	mov	r1, r0
 801b0d0:	6818      	ldr	r0, [r3, #0]
 801b0d2:	f000 b86d 	b.w	801b1b0 <_malloc_r>
 801b0d6:	bf00      	nop
 801b0d8:	24000130 	.word	0x24000130

0801b0dc <free>:
 801b0dc:	4b02      	ldr	r3, [pc, #8]	; (801b0e8 <free+0xc>)
 801b0de:	4601      	mov	r1, r0
 801b0e0:	6818      	ldr	r0, [r3, #0]
 801b0e2:	f000 b817 	b.w	801b114 <_free_r>
 801b0e6:	bf00      	nop
 801b0e8:	24000130 	.word	0x24000130

0801b0ec <memcpy>:
 801b0ec:	b510      	push	{r4, lr}
 801b0ee:	1e43      	subs	r3, r0, #1
 801b0f0:	440a      	add	r2, r1
 801b0f2:	4291      	cmp	r1, r2
 801b0f4:	d100      	bne.n	801b0f8 <memcpy+0xc>
 801b0f6:	bd10      	pop	{r4, pc}
 801b0f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b0fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b100:	e7f7      	b.n	801b0f2 <memcpy+0x6>

0801b102 <memset>:
 801b102:	4402      	add	r2, r0
 801b104:	4603      	mov	r3, r0
 801b106:	4293      	cmp	r3, r2
 801b108:	d100      	bne.n	801b10c <memset+0xa>
 801b10a:	4770      	bx	lr
 801b10c:	f803 1b01 	strb.w	r1, [r3], #1
 801b110:	e7f9      	b.n	801b106 <memset+0x4>
	...

0801b114 <_free_r>:
 801b114:	b538      	push	{r3, r4, r5, lr}
 801b116:	4605      	mov	r5, r0
 801b118:	2900      	cmp	r1, #0
 801b11a:	d045      	beq.n	801b1a8 <_free_r+0x94>
 801b11c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b120:	1f0c      	subs	r4, r1, #4
 801b122:	2b00      	cmp	r3, #0
 801b124:	bfb8      	it	lt
 801b126:	18e4      	addlt	r4, r4, r3
 801b128:	f000 f8ac 	bl	801b284 <__malloc_lock>
 801b12c:	4a1f      	ldr	r2, [pc, #124]	; (801b1ac <_free_r+0x98>)
 801b12e:	6813      	ldr	r3, [r2, #0]
 801b130:	4610      	mov	r0, r2
 801b132:	b933      	cbnz	r3, 801b142 <_free_r+0x2e>
 801b134:	6063      	str	r3, [r4, #4]
 801b136:	6014      	str	r4, [r2, #0]
 801b138:	4628      	mov	r0, r5
 801b13a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b13e:	f000 b8a2 	b.w	801b286 <__malloc_unlock>
 801b142:	42a3      	cmp	r3, r4
 801b144:	d90c      	bls.n	801b160 <_free_r+0x4c>
 801b146:	6821      	ldr	r1, [r4, #0]
 801b148:	1862      	adds	r2, r4, r1
 801b14a:	4293      	cmp	r3, r2
 801b14c:	bf04      	itt	eq
 801b14e:	681a      	ldreq	r2, [r3, #0]
 801b150:	685b      	ldreq	r3, [r3, #4]
 801b152:	6063      	str	r3, [r4, #4]
 801b154:	bf04      	itt	eq
 801b156:	1852      	addeq	r2, r2, r1
 801b158:	6022      	streq	r2, [r4, #0]
 801b15a:	6004      	str	r4, [r0, #0]
 801b15c:	e7ec      	b.n	801b138 <_free_r+0x24>
 801b15e:	4613      	mov	r3, r2
 801b160:	685a      	ldr	r2, [r3, #4]
 801b162:	b10a      	cbz	r2, 801b168 <_free_r+0x54>
 801b164:	42a2      	cmp	r2, r4
 801b166:	d9fa      	bls.n	801b15e <_free_r+0x4a>
 801b168:	6819      	ldr	r1, [r3, #0]
 801b16a:	1858      	adds	r0, r3, r1
 801b16c:	42a0      	cmp	r0, r4
 801b16e:	d10b      	bne.n	801b188 <_free_r+0x74>
 801b170:	6820      	ldr	r0, [r4, #0]
 801b172:	4401      	add	r1, r0
 801b174:	1858      	adds	r0, r3, r1
 801b176:	4282      	cmp	r2, r0
 801b178:	6019      	str	r1, [r3, #0]
 801b17a:	d1dd      	bne.n	801b138 <_free_r+0x24>
 801b17c:	6810      	ldr	r0, [r2, #0]
 801b17e:	6852      	ldr	r2, [r2, #4]
 801b180:	605a      	str	r2, [r3, #4]
 801b182:	4401      	add	r1, r0
 801b184:	6019      	str	r1, [r3, #0]
 801b186:	e7d7      	b.n	801b138 <_free_r+0x24>
 801b188:	d902      	bls.n	801b190 <_free_r+0x7c>
 801b18a:	230c      	movs	r3, #12
 801b18c:	602b      	str	r3, [r5, #0]
 801b18e:	e7d3      	b.n	801b138 <_free_r+0x24>
 801b190:	6820      	ldr	r0, [r4, #0]
 801b192:	1821      	adds	r1, r4, r0
 801b194:	428a      	cmp	r2, r1
 801b196:	bf04      	itt	eq
 801b198:	6811      	ldreq	r1, [r2, #0]
 801b19a:	6852      	ldreq	r2, [r2, #4]
 801b19c:	6062      	str	r2, [r4, #4]
 801b19e:	bf04      	itt	eq
 801b1a0:	1809      	addeq	r1, r1, r0
 801b1a2:	6021      	streq	r1, [r4, #0]
 801b1a4:	605c      	str	r4, [r3, #4]
 801b1a6:	e7c7      	b.n	801b138 <_free_r+0x24>
 801b1a8:	bd38      	pop	{r3, r4, r5, pc}
 801b1aa:	bf00      	nop
 801b1ac:	2400030c 	.word	0x2400030c

0801b1b0 <_malloc_r>:
 801b1b0:	b570      	push	{r4, r5, r6, lr}
 801b1b2:	1ccd      	adds	r5, r1, #3
 801b1b4:	f025 0503 	bic.w	r5, r5, #3
 801b1b8:	3508      	adds	r5, #8
 801b1ba:	2d0c      	cmp	r5, #12
 801b1bc:	bf38      	it	cc
 801b1be:	250c      	movcc	r5, #12
 801b1c0:	2d00      	cmp	r5, #0
 801b1c2:	4606      	mov	r6, r0
 801b1c4:	db01      	blt.n	801b1ca <_malloc_r+0x1a>
 801b1c6:	42a9      	cmp	r1, r5
 801b1c8:	d903      	bls.n	801b1d2 <_malloc_r+0x22>
 801b1ca:	230c      	movs	r3, #12
 801b1cc:	6033      	str	r3, [r6, #0]
 801b1ce:	2000      	movs	r0, #0
 801b1d0:	bd70      	pop	{r4, r5, r6, pc}
 801b1d2:	f000 f857 	bl	801b284 <__malloc_lock>
 801b1d6:	4a21      	ldr	r2, [pc, #132]	; (801b25c <_malloc_r+0xac>)
 801b1d8:	6814      	ldr	r4, [r2, #0]
 801b1da:	4621      	mov	r1, r4
 801b1dc:	b991      	cbnz	r1, 801b204 <_malloc_r+0x54>
 801b1de:	4c20      	ldr	r4, [pc, #128]	; (801b260 <_malloc_r+0xb0>)
 801b1e0:	6823      	ldr	r3, [r4, #0]
 801b1e2:	b91b      	cbnz	r3, 801b1ec <_malloc_r+0x3c>
 801b1e4:	4630      	mov	r0, r6
 801b1e6:	f000 f83d 	bl	801b264 <_sbrk_r>
 801b1ea:	6020      	str	r0, [r4, #0]
 801b1ec:	4629      	mov	r1, r5
 801b1ee:	4630      	mov	r0, r6
 801b1f0:	f000 f838 	bl	801b264 <_sbrk_r>
 801b1f4:	1c43      	adds	r3, r0, #1
 801b1f6:	d124      	bne.n	801b242 <_malloc_r+0x92>
 801b1f8:	230c      	movs	r3, #12
 801b1fa:	6033      	str	r3, [r6, #0]
 801b1fc:	4630      	mov	r0, r6
 801b1fe:	f000 f842 	bl	801b286 <__malloc_unlock>
 801b202:	e7e4      	b.n	801b1ce <_malloc_r+0x1e>
 801b204:	680b      	ldr	r3, [r1, #0]
 801b206:	1b5b      	subs	r3, r3, r5
 801b208:	d418      	bmi.n	801b23c <_malloc_r+0x8c>
 801b20a:	2b0b      	cmp	r3, #11
 801b20c:	d90f      	bls.n	801b22e <_malloc_r+0x7e>
 801b20e:	600b      	str	r3, [r1, #0]
 801b210:	50cd      	str	r5, [r1, r3]
 801b212:	18cc      	adds	r4, r1, r3
 801b214:	4630      	mov	r0, r6
 801b216:	f000 f836 	bl	801b286 <__malloc_unlock>
 801b21a:	f104 000b 	add.w	r0, r4, #11
 801b21e:	1d23      	adds	r3, r4, #4
 801b220:	f020 0007 	bic.w	r0, r0, #7
 801b224:	1ac3      	subs	r3, r0, r3
 801b226:	d0d3      	beq.n	801b1d0 <_malloc_r+0x20>
 801b228:	425a      	negs	r2, r3
 801b22a:	50e2      	str	r2, [r4, r3]
 801b22c:	e7d0      	b.n	801b1d0 <_malloc_r+0x20>
 801b22e:	428c      	cmp	r4, r1
 801b230:	684b      	ldr	r3, [r1, #4]
 801b232:	bf16      	itet	ne
 801b234:	6063      	strne	r3, [r4, #4]
 801b236:	6013      	streq	r3, [r2, #0]
 801b238:	460c      	movne	r4, r1
 801b23a:	e7eb      	b.n	801b214 <_malloc_r+0x64>
 801b23c:	460c      	mov	r4, r1
 801b23e:	6849      	ldr	r1, [r1, #4]
 801b240:	e7cc      	b.n	801b1dc <_malloc_r+0x2c>
 801b242:	1cc4      	adds	r4, r0, #3
 801b244:	f024 0403 	bic.w	r4, r4, #3
 801b248:	42a0      	cmp	r0, r4
 801b24a:	d005      	beq.n	801b258 <_malloc_r+0xa8>
 801b24c:	1a21      	subs	r1, r4, r0
 801b24e:	4630      	mov	r0, r6
 801b250:	f000 f808 	bl	801b264 <_sbrk_r>
 801b254:	3001      	adds	r0, #1
 801b256:	d0cf      	beq.n	801b1f8 <_malloc_r+0x48>
 801b258:	6025      	str	r5, [r4, #0]
 801b25a:	e7db      	b.n	801b214 <_malloc_r+0x64>
 801b25c:	2400030c 	.word	0x2400030c
 801b260:	24000310 	.word	0x24000310

0801b264 <_sbrk_r>:
 801b264:	b538      	push	{r3, r4, r5, lr}
 801b266:	4c06      	ldr	r4, [pc, #24]	; (801b280 <_sbrk_r+0x1c>)
 801b268:	2300      	movs	r3, #0
 801b26a:	4605      	mov	r5, r0
 801b26c:	4608      	mov	r0, r1
 801b26e:	6023      	str	r3, [r4, #0]
 801b270:	f7e6 fb6a 	bl	8001948 <_sbrk>
 801b274:	1c43      	adds	r3, r0, #1
 801b276:	d102      	bne.n	801b27e <_sbrk_r+0x1a>
 801b278:	6823      	ldr	r3, [r4, #0]
 801b27a:	b103      	cbz	r3, 801b27e <_sbrk_r+0x1a>
 801b27c:	602b      	str	r3, [r5, #0]
 801b27e:	bd38      	pop	{r3, r4, r5, pc}
 801b280:	240082b0 	.word	0x240082b0

0801b284 <__malloc_lock>:
 801b284:	4770      	bx	lr

0801b286 <__malloc_unlock>:
 801b286:	4770      	bx	lr

0801b288 <_init>:
 801b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b28a:	bf00      	nop
 801b28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b28e:	bc08      	pop	{r3}
 801b290:	469e      	mov	lr, r3
 801b292:	4770      	bx	lr

0801b294 <_fini>:
 801b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b296:	bf00      	nop
 801b298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b29a:	bc08      	pop	{r3}
 801b29c:	469e      	mov	lr, r3
 801b29e:	4770      	bx	lr
