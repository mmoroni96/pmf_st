
SD_USB_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a6c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08016d04  08016d04  00026d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080172bc  080172bc  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  080172bc  080172bc  000272bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080172c4  080172c4  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080172c4  080172c4  000272c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080172c8  080172c8  000272c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  24000000  080172cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000194  08017460  00030194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240001f4  080174c0  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007e74  24000258  08017520  00030258  2**3
                  ALLOC
 12 ._user_heap_stack 00006004  240080cc  08017520  000380cc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 14 .debug_info   000467cd  00000000  00000000  00030282  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006d80  00000000  00000000  00076a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002560  00000000  00000000  0007d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000022d0  00000000  00000000  0007fd30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0004247c  00000000  00000000  00082000  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00026b66  00000000  00000000  000c447c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001838d0  00000000  00000000  000eafe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0026e8b2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a0bc  00000000  00000000  0026e930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000258 	.word	0x24000258
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08016cec 	.word	0x08016cec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400025c 	.word	0x2400025c
 80002d4:	08016cec 	.word	0x08016cec

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 f897 	bl	8001710 <HAL_Init>

  /* USER CODE BEGIN Init */
  int i=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f889 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fb29 	bl	8000c40 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ee:	f000 f97f 	bl	80008f0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 fad9 	bl	8000ba8 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fa8d 	bl	8000b14 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005fa:	f00d fe65 	bl	800e2c8 <MX_FATFS_Init>
  MX_RTC_Init();
 80005fe:	f000 fa2d 	bl	8000a5c <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000602:	f015 fd65 	bl	80160d0 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8000606:	f000 faa7 	bl	8000b58 <MX_TIM17_Init>
  MX_FDCAN1_Init();
 800060a:	f000 f9c3 	bl	8000994 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_SD_Init(&hsd1);
  //HAL_SD_GetCardInfo(&hsd1, &SDCardInfo);
  //HAL_SD_Init(&hsd1);
  FRESULT res;
  res=f_mount(&myFatFS, SDPath, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	4931      	ldr	r1, [pc, #196]	; (80006d8 <main+0x100>)
 8000612:	4832      	ldr	r0, [pc, #200]	; (80006dc <main+0x104>)
 8000614:	f013 fe9c 	bl	8014350 <f_mount>
 8000618:	4603      	mov	r3, r0
 800061a:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_Base_Start_IT(&htim17);
 800061c:	4830      	ldr	r0, [pc, #192]	; (80006e0 <main+0x108>)
 800061e:	f008 febb 	bl	8009398 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	482f      	ldr	r0, [pc, #188]	; (80006e4 <main+0x10c>)
 8000628:	f002 fe8e 	bl	8003348 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d1f7      	bne.n	8000622 <main+0x4a>
		  if(i==0){
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d13f      	bne.n	80006b8 <main+0xe0>
			  HAL_TIM_Base_Stop_IT(&htim17);
 8000638:	4829      	ldr	r0, [pc, #164]	; (80006e0 <main+0x108>)
 800063a:	f008 fed7 	bl	80093ec <HAL_TIM_Base_Stop_IT>
			  //NVIC_DisableIRQ(OTG_FS_IRQn);
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000644:	4828      	ldr	r0, [pc, #160]	; (80006e8 <main+0x110>)
 8000646:	f002 fe97 	bl	8003378 <HAL_GPIO_WritePin>
			  if(USBD_Stop(&hUsbDeviceFS)!= USBD_OK) {
 800064a:	4828      	ldr	r0, [pc, #160]	; (80006ec <main+0x114>)
 800064c:	f00f fa58 	bl	800fb00 <USBD_Stop>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <main+0x82>
								Error_Handler();
 8000656:	f000 fcf3 	bl	8001040 <Error_Handler>
							  }

			  res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 800065a:	2208      	movs	r2, #8
 800065c:	4924      	ldr	r1, [pc, #144]	; (80006f0 <main+0x118>)
 800065e:	4825      	ldr	r0, [pc, #148]	; (80006f4 <main+0x11c>)
 8000660:	f013 febc 	bl	80143dc <f_open>
 8000664:	4603      	mov	r3, r0
 8000666:	71fb      	strb	r3, [r7, #7]
			  res = f_close(&writeFile);
 8000668:	4822      	ldr	r0, [pc, #136]	; (80006f4 <main+0x11c>)
 800066a:	f014 fe28 	bl	80152be <f_close>
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
			  res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 8000672:	2212      	movs	r2, #18
 8000674:	491e      	ldr	r1, [pc, #120]	; (80006f0 <main+0x118>)
 8000676:	481f      	ldr	r0, [pc, #124]	; (80006f4 <main+0x11c>)
 8000678:	f013 feb0 	bl	80143dc <f_open>
 800067c:	4603      	mov	r3, r0
 800067e:	71fb      	strb	r3, [r7, #7]

			  for(int e=0;e<100000;e++){
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	e004      	b.n	8000690 <main+0xb8>
				  scrivi_speed();
 8000686:	f000 fc97 	bl	8000fb8 <scrivi_speed>
			  for(int e=0;e<100000;e++){
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	3301      	adds	r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <main+0x120>)
 8000694:	4293      	cmp	r3, r2
 8000696:	ddf6      	ble.n	8000686 <main+0xae>
			  }

			  res = f_close(&writeFile);
 8000698:	4816      	ldr	r0, [pc, #88]	; (80006f4 <main+0x11c>)
 800069a:	f014 fe10 	bl	80152be <f_close>
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a8:	480f      	ldr	r0, [pc, #60]	; (80006e8 <main+0x110>)
 80006aa:	f002 fe65 	bl	8003378 <HAL_GPIO_WritePin>
		      i=0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
		      HAL_Delay(200);}
 80006b2:	20c8      	movs	r0, #200	; 0xc8
 80006b4:	f001 f8be 	bl	8001834 <HAL_Delay>


			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006be:	480a      	ldr	r0, [pc, #40]	; (80006e8 <main+0x110>)
 80006c0:	f002 fe5a 	bl	8003378 <HAL_GPIO_WritePin>

			  MX_USB_DEVICE_Init();
 80006c4:	f015 fd04 	bl	80160d0 <MX_USB_DEVICE_Init>
			  /*if(USBD_Start(&hUsbDeviceFS)!= USBD_OK) {
			 			  				    Error_Handler();
			 			  				  }*/
			  //NVIC_EnableIRQ(OTG_FS_IRQn);
			  HAL_TIM_Base_Start_IT(&htim17);
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <main+0x108>)
 80006ca:	f008 fe65 	bl	8009398 <HAL_TIM_Base_Start_IT>
			  HAL_Delay(200);
 80006ce:	20c8      	movs	r0, #200	; 0xc8
 80006d0:	f001 f8b0 	bl	8001834 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 80006d4:	e7a5      	b.n	8000622 <main+0x4a>
 80006d6:	bf00      	nop
 80006d8:	24005764 	.word	0x24005764
 80006dc:	24003548 	.word	0x24003548
 80006e0:	2400147c 	.word	0x2400147c
 80006e4:	58020800 	.word	0x58020800
 80006e8:	58020400 	.word	0x58020400
 80006ec:	240077fc 	.word	0x240077fc
 80006f0:	24000000 	.word	0x24000000
 80006f4:	240014c0 	.word	0x240014c0
 80006f8:	0001869f 	.word	0x0001869f

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b0cc      	sub	sp, #304	; 0x130
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000706:	224c      	movs	r2, #76	; 0x4c
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f016 fa2b 	bl	8016b66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000714:	2220      	movs	r2, #32
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f016 fa24 	bl	8016b66 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4618      	mov	r0, r3
 8000724:	23bc      	movs	r3, #188	; 0xbc
 8000726:	461a      	mov	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f016 fa1c 	bl	8016b66 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800072e:	2002      	movs	r0, #2
 8000730:	f004 f8b4 	bl	800489c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	4b69      	ldr	r3, [pc, #420]	; (80008e0 <SystemClock_Config+0x1e4>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	4a68      	ldr	r2, [pc, #416]	; (80008e0 <SystemClock_Config+0x1e4>)
 8000740:	f023 0301 	bic.w	r3, r3, #1
 8000744:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000746:	4b66      	ldr	r3, [pc, #408]	; (80008e0 <SystemClock_Config+0x1e4>)
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	f003 0201 	and.w	r2, r3, #1
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	4b64      	ldr	r3, [pc, #400]	; (80008e4 <SystemClock_Config+0x1e8>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a63      	ldr	r2, [pc, #396]	; (80008e4 <SystemClock_Config+0x1e8>)
 8000758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b61      	ldr	r3, [pc, #388]	; (80008e4 <SystemClock_Config+0x1e8>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076e:	bf00      	nop
 8000770:	4b5c      	ldr	r3, [pc, #368]	; (80008e4 <SystemClock_Config+0x1e8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077c:	d1f8      	bne.n	8000770 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800077e:	4b5a      	ldr	r3, [pc, #360]	; (80008e8 <SystemClock_Config+0x1ec>)
 8000780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000782:	f023 0303 	bic.w	r3, r3, #3
 8000786:	4a58      	ldr	r2, [pc, #352]	; (80008e8 <SystemClock_Config+0x1ec>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800078e:	2329      	movs	r3, #41	; 0x29
 8000790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000794:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000798:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	2302      	movs	r3, #2
 80007b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 18;
 80007ba:	2312      	movs	r3, #18
 80007bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007d2:	230c      	movs	r3, #12
 80007d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80007de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 f8a0 	bl	8004930 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80007f6:	f000 fc23 	bl	8001040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	233f      	movs	r3, #63	; 0x3f
 80007fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2303      	movs	r3, #3
 8000802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000818:	2340      	movs	r3, #64	; 0x40
 800081a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800081e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000826:	2340      	movs	r3, #64	; 0x40
 8000828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800082c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000830:	2101      	movs	r1, #1
 8000832:	4618      	mov	r0, r3
 8000834:	f004 fc54 	bl	80050e0 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x146>
  {
    Error_Handler();
 800083e:	f000 fbff 	bl	8001040 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	4a29      	ldr	r2, [pc, #164]	; (80008ec <SystemClock_Config+0x1f0>)
 8000848:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2201      	movs	r2, #1
 8000850:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	2218      	movs	r2, #24
 8000858:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	2202      	movs	r2, #2
 8000860:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 3;
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	2203      	movs	r2, #3
 8000868:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2202      	movs	r2, #2
 8000870:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	22c0      	movs	r2, #192	; 0xc0
 8000878:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800089a:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	2200      	movs	r2, #0
 80008a2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 ff91 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x1d4>
  {
    Error_Handler();
 80008cc:	f000 fbb8 	bl	8001040 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80008d0:	f004 f81e 	bl	8004910 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80008d4:	bf00      	nop
 80008d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	58000400 	.word	0x58000400
 80008e4:	58024800 	.word	0x58024800
 80008e8:	58024400 	.word	0x58024400
 80008ec:	00458002 	.word	0x00458002

080008f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_ETH_Init+0x90>)
 80008f6:	4a23      	ldr	r2, [pc, #140]	; (8000984 <MX_ETH_Init+0x94>)
 80008f8:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <MX_ETH_Init+0x90>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_ETH_Init+0x90>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	3301      	adds	r3, #1
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_ETH_Init+0x90>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	3302      	adds	r3, #2
 8000912:	22e1      	movs	r2, #225	; 0xe1
 8000914:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_ETH_Init+0x90>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	3303      	adds	r3, #3
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_ETH_Init+0x90>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	3304      	adds	r3, #4
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_ETH_Init+0x90>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	3305      	adds	r3, #5
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_ETH_Init+0x90>)
 8000936:	2201      	movs	r2, #1
 8000938:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_ETH_Init+0x90>)
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_ETH_Init+0x98>)
 800093e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_ETH_Init+0x90>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_ETH_Init+0x9c>)
 8000944:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_ETH_Init+0x90>)
 8000948:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800094c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800094e:	480c      	ldr	r0, [pc, #48]	; (8000980 <MX_ETH_Init+0x90>)
 8000950:	f001 f8c2 	bl	8001ad8 <HAL_ETH_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 fb71 	bl	8001040 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800095e:	2234      	movs	r2, #52	; 0x34
 8000960:	2100      	movs	r1, #0
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <MX_ETH_Init+0xa0>)
 8000964:	f016 f8ff 	bl	8016b66 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_ETH_Init+0xa0>)
 800096a:	2221      	movs	r2, #33	; 0x21
 800096c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_ETH_Init+0xa0>)
 8000970:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000974:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_ETH_Init+0xa0>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2400465c 	.word	0x2400465c
 8000984:	40028000 	.word	0x40028000
 8000988:	240001f4 	.word	0x240001f4
 800098c:	24000194 	.word	0x24000194
 8000990:	240046d4 	.word	0x240046d4

08000994 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <MX_FDCAN1_Init+0xc4>)
 800099c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009be:	2205      	movs	r2, #5
 80009c0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009ca:	220d      	movs	r2, #13
 80009cc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009dc:	2201      	movs	r2, #1
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_FDCAN1_Init+0xc0>)
 8000a42:	f001 fc5f 	bl	8002304 <HAL_FDCAN_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000a4c:	f000 faf8 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	240045ac 	.word	0x240045ac
 8000a58:	4000a000 	.word	0x4000a000

08000a5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a70:	2300      	movs	r3, #0
 8000a72:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a76:	4a26      	ldr	r2, [pc, #152]	; (8000b10 <MX_RTC_Init+0xb4>)
 8000a78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a82:	227f      	movs	r2, #127	; 0x7f
 8000a84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a88:	22ff      	movs	r2, #255	; 0xff
 8000a8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aa4:	4819      	ldr	r0, [pc, #100]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000aa6:	f006 fd53 	bl	8007550 <HAL_RTC_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f000 fac6 	bl	8001040 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2201      	movs	r2, #1
 8000acc:	4619      	mov	r1, r3
 8000ace:	480f      	ldr	r0, [pc, #60]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000ad0:	f006 fdda 	bl	8007688 <HAL_RTC_SetTime>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000ada:	f000 fab1 	bl	8001040 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000aee:	463b      	mov	r3, r7
 8000af0:	2201      	movs	r2, #1
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000af6:	f006 fee7 	bl	80078c8 <HAL_RTC_SetDate>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b00:	f000 fa9e 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24004588 	.word	0x24004588
 8000b10:	58004000 	.word	0x58004000

08000b14 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_SDMMC1_SD_Init+0x3c>)
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <MX_SDMMC1_SD_Init+0x40>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_SDMMC1_SD_Init+0x3c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_SDMMC1_SD_Init+0x3c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_SDMMC1_SD_Init+0x3c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_SDMMC1_SD_Init+0x3c>)
 8000b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b36:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <MX_SDMMC1_SD_Init+0x3c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <MX_SDMMC1_SD_Init+0x3c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	240013f8 	.word	0x240013f8
 8000b54:	52007000 	.word	0x52007000

08000b58 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_TIM17_Init+0x48>)
 8000b5e:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <MX_TIM17_Init+0x4c>)
 8000b60:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_TIM17_Init+0x48>)
 8000b64:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b68:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_TIM17_Init+0x48>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_TIM17_Init+0x48>)
 8000b72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b76:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_TIM17_Init+0x48>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_TIM17_Init+0x48>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_TIM17_Init+0x48>)
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_TIM17_Init+0x48>)
 8000b8c:	f008 fbd8 	bl	8009340 <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000b96:	f000 fa53 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2400147c 	.word	0x2400147c
 8000ba4:	40014800 	.word	0x40014800

08000ba8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <MX_USART3_UART_Init+0x94>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bf2:	f008 fe25 	bl	8009840 <HAL_UART_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bfc:	f000 fa20 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c04:	f00b f98d 	bl	800bf22 <HAL_UARTEx_SetTxFifoThreshold>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0e:	f000 fa17 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c16:	f00b f9c2 	bl	800bf9e <HAL_UARTEx_SetRxFifoThreshold>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f000 fa0e 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c26:	f00b f943 	bl	800beb0 <HAL_UARTEx_DisableFifoMode>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c30:	f000 fa06 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	24001328 	.word	0x24001328
 8000c3c:	40004800 	.word	0x40004800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b59      	ldr	r3, [pc, #356]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	4a57      	ldr	r2, [pc, #348]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c66:	4b55      	ldr	r3, [pc, #340]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c74:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a50      	ldr	r2, [pc, #320]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b4d      	ldr	r3, [pc, #308]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	4a48      	ldr	r2, [pc, #288]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca2:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	4a41      	ldr	r2, [pc, #260]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc0:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	4a39      	ldr	r2, [pc, #228]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cde:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cec:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a32      	ldr	r2, [pc, #200]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <MX_GPIO_Init+0x17c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d10:	482b      	ldr	r0, [pc, #172]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000d12:	f002 fb31 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2140      	movs	r1, #64	; 0x40
 8000d1a:	482a      	ldr	r0, [pc, #168]	; (8000dc4 <MX_GPIO_Init+0x184>)
 8000d1c:	f002 fb2c 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_GPIO_Init+0x188>)
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4825      	ldr	r0, [pc, #148]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000d36:	f002 f957 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d3a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <MX_GPIO_Init+0x180>)
 8000d54:	f002 f948 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d58:	2320      	movs	r3, #32
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d60:	2302      	movs	r3, #2
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <MX_GPIO_Init+0x184>)
 8000d6c:	f002 f93c 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d70:	2340      	movs	r3, #64	; 0x40
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <MX_GPIO_Init+0x184>)
 8000d88:	f002 f92e 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <MX_GPIO_Init+0x184>)
 8000da0:	f002 f922 	bl	8002fe8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2028      	movs	r0, #40	; 0x28
 8000daa:	f000 fe60 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dae:	2028      	movs	r0, #40	; 0x28
 8000db0:	f000 fe77 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

}
 8000db4:	bf00      	nop
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58020400 	.word	0x58020400
 8000dc4:	58021800 	.word	0x58021800
 8000dc8:	11110000 	.word	0x11110000
 8000dcc:	58020800 	.word	0x58020800

08000dd0 <HAL_FDCAN_RxFifo0Callback>:
 if(__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)){
 LD2_GPIO_Port -> ODR ^= LD2_Pin; // toggle LD2 LED
 }

}*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){}
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17) //check if the interrupt comes from TIM2
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d105      	bne.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x1e>
        {
    	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000dfe:	f002 fad4 	bl	80033aa <HAL_GPIO_TogglePin>
    	leggi();
 8000e02:	f000 f887 	bl	8000f14 <leggi>

        }}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40014800 	.word	0x40014800
 8000e14:	58020400 	.word	0x58020400

08000e18 <scrivi>:
FRESULT scrivi(){
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af04      	add	r7, sp, #16
	      /* File  object for USER */
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	uint8_t bytesWrote;
	uint8_t path1[] = "ST.TXT";
 8000e1e:	4a34      	ldr	r2, [pc, #208]	; (8000ef0 <scrivi+0xd8>)
 8000e20:	463b      	mov	r3, r7
 8000e22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e26:	6018      	str	r0, [r3, #0]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	8019      	strh	r1, [r3, #0]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	0c0a      	lsrs	r2, r1, #16
 8000e30:	701a      	strb	r2, [r3, #0]
	//res = f_mount(&USERFatFs, (TCHAR const*)USERPath, 1);
	//res=f_mount(&myFatFS, USERPath, 1);
	res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 8000e32:	463b      	mov	r3, r7
 8000e34:	2208      	movs	r2, #8
 8000e36:	4619      	mov	r1, r3
 8000e38:	482e      	ldr	r0, [pc, #184]	; (8000ef4 <scrivi+0xdc>)
 8000e3a:	f013 facf 	bl	80143dc <f_open>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	73fb      	strb	r3, [r7, #15]
	res = f_close(&writeFile);
 8000e42:	482c      	ldr	r0, [pc, #176]	; (8000ef4 <scrivi+0xdc>)
 8000e44:	f014 fa3b 	bl	80152be <f_close>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	73fb      	strb	r3, [r7, #15]
	res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2212      	movs	r2, #18
 8000e50:	4619      	mov	r1, r3
 8000e52:	4828      	ldr	r0, [pc, #160]	; (8000ef4 <scrivi+0xdc>)
 8000e54:	f013 fac2 	bl	80143dc <f_open>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	73fb      	strb	r3, [r7, #15]
	if(res==FR_OK) {
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d13b      	bne.n	8000eda <scrivi+0xc2>
		f_lseek(&writeFile, indox);
 8000e62:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <scrivi+0xe0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f04f 0400 	mov.w	r4, #0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4623      	mov	r3, r4
 8000e6e:	4821      	ldr	r0, [pc, #132]	; (8000ef4 <scrivi+0xdc>)
 8000e70:	f014 fa4f 	bl	8015312 <f_lseek>

		//res1 = f_write(&writeFile, readBuf, size, &bytesWrote);}
		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 8000e74:	2200      	movs	r2, #0
 8000e76:	4921      	ldr	r1, [pc, #132]	; (8000efc <scrivi+0xe4>)
 8000e78:	4821      	ldr	r0, [pc, #132]	; (8000f00 <scrivi+0xe8>)
 8000e7a:	f006 fcc9 	bl	8007810 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4920      	ldr	r1, [pc, #128]	; (8000f04 <scrivi+0xec>)
 8000e82:	481f      	ldr	r0, [pc, #124]	; (8000f00 <scrivi+0xe8>)
 8000e84:	f006 fdce 	bl	8007a24 <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <scrivi+0xe4>)
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <scrivi+0xf0>)
 8000e8e:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <scrivi+0xe4>)
 8000e92:	785a      	ldrb	r2, [r3, #1]
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <scrivi+0xf0>)
 8000e96:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <scrivi+0xe4>)
 8000e9a:	789a      	ldrb	r2, [r3, #2]
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <scrivi+0xf0>)
 8000e9e:	709a      	strb	r2, [r3, #2]

		indox=indox+f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);}
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <scrivi+0xf0>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <scrivi+0xf0>)
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	461c      	mov	r4, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <scrivi+0xf0>)
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <scrivi+0xf4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <scrivi+0xe0>)
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	9202      	str	r2, [sp, #8]
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	9100      	str	r1, [sp, #0]
 8000ec0:	4623      	mov	r3, r4
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	4912      	ldr	r1, [pc, #72]	; (8000f10 <scrivi+0xf8>)
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <scrivi+0xdc>)
 8000ec8:	f014 fda8 	bl	8015a1c <f_printf>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <scrivi+0xe0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <scrivi+0xe0>)
 8000ed8:	6013      	str	r3, [r2, #0]
		res = f_close(&writeFile);
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <scrivi+0xdc>)
 8000edc:	f014 f9ef 	bl	80152be <f_close>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]

	return res;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd90      	pop	{r4, r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08016d14 	.word	0x08016d14
 8000ef4:	240014c0 	.word	0x240014c0
 8000ef8:	24000274 	.word	0x24000274
 8000efc:	24005744 	.word	0x24005744
 8000f00:	24004588 	.word	0x24004588
 8000f04:	24004584 	.word	0x24004584
 8000f08:	24004658 	.word	0x24004658
 8000f0c:	24002518 	.word	0x24002518
 8000f10:	08016d04 	.word	0x08016d04

08000f14 <leggi>:
FRESULT leggi(){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
    	FIL readFile;       /* File  object for USER */
    		   /* File system object for USER logical drive */
    		//FIL USERFile;     /* File  object for USER */
    	char USERPath[4];
    	uint8_t bytesWrote;
    	uint8_t pat[] = "current.txt";
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <leggi+0x90>)
 8000f20:	f241 0270 	movw	r2, #4208	; 0x1070
 8000f24:	443a      	add	r2, r7
 8000f26:	4413      	add	r3, r2
 8000f28:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <leggi+0x94>)
 8000f2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	res = f_open(&readFile, &pat, FA_READ);
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <leggi+0x90>)
 8000f32:	f241 0270 	movw	r2, #4208	; 0x1070
 8000f36:	443a      	add	r2, r7
 8000f38:	4413      	add	r3, r2
 8000f3a:	f107 0010 	add.w	r0, r7, #16
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4619      	mov	r1, r3
 8000f42:	f013 fa4b 	bl	80143dc <f_open>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f241 026f 	movw	r2, #4207	; 0x106f
 8000f4c:	443a      	add	r2, r7
 8000f4e:	7013      	strb	r3, [r2, #0]
    	res = f_read(&readFile,readBuff,1, &br);
 8000f50:	f107 0010 	add.w	r0, r7, #16
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <leggi+0x98>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	4915      	ldr	r1, [pc, #84]	; (8000fb0 <leggi+0x9c>)
 8000f5a:	f013 fd0f 	bl	801497c <f_read>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f241 026f 	movw	r2, #4207	; 0x106f
 8000f64:	443a      	add	r2, r7
 8000f66:	7013      	strb	r3, [r2, #0]
    	if(readBuff[0]=='1'){flag++;}
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <leggi+0x9c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b31      	cmp	r3, #49	; 0x31
 8000f6e:	d105      	bne.n	8000f7c <leggi+0x68>
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <leggi+0xa0>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <leggi+0xa0>)
 8000f7a:	701a      	strb	r2, [r3, #0]
    	scrivi();
 8000f7c:	f7ff ff4c 	bl	8000e18 <scrivi>
    	res = f_close(&readFile);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4618      	mov	r0, r3
 8000f86:	f014 f99a 	bl	80152be <f_close>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f241 026f 	movw	r2, #4207	; 0x106f
 8000f90:	443a      	add	r2, r7
 8000f92:	7013      	strb	r3, [r2, #0]





    	}
 8000f94:	bf00      	nop
 8000f96:	4618      	mov	r0, r3
 8000f98:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	ffffef90 	.word	0xffffef90
 8000fa8:	08016d1c 	.word	0x08016d1c
 8000fac:	240014bc 	.word	0x240014bc
 8000fb0:	240013b8 	.word	0x240013b8
 8000fb4:	24000278 	.word	0x24000278

08000fb8 <scrivi_speed>:
FRESULT scrivi_speed(){
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af04      	add	r7, sp, #16
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */



		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4917      	ldr	r1, [pc, #92]	; (8001020 <scrivi_speed+0x68>)
 8000fc2:	4818      	ldr	r0, [pc, #96]	; (8001024 <scrivi_speed+0x6c>)
 8000fc4:	f006 fc24 	bl	8007810 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4917      	ldr	r1, [pc, #92]	; (8001028 <scrivi_speed+0x70>)
 8000fcc:	4815      	ldr	r0, [pc, #84]	; (8001024 <scrivi_speed+0x6c>)
 8000fce:	f006 fd29 	bl	8007a24 <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <scrivi_speed+0x68>)
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <scrivi_speed+0x74>)
 8000fd8:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <scrivi_speed+0x68>)
 8000fdc:	785a      	ldrb	r2, [r3, #1]
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <scrivi_speed+0x74>)
 8000fe0:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <scrivi_speed+0x68>)
 8000fe4:	789a      	ldrb	r2, [r3, #2]
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <scrivi_speed+0x74>)
 8000fe8:	709a      	strb	r2, [r3, #2]

	f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <scrivi_speed+0x74>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <scrivi_speed+0x74>)
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	461c      	mov	r4, r3
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <scrivi_speed+0x74>)
 8000ff8:	789b      	ldrb	r3, [r3, #2]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <scrivi_speed+0x78>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <scrivi_speed+0x7c>)
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	9202      	str	r2, [sp, #8]
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	9100      	str	r1, [sp, #0]
 800100a:	4623      	mov	r3, r4
 800100c:	4602      	mov	r2, r0
 800100e:	490a      	ldr	r1, [pc, #40]	; (8001038 <scrivi_speed+0x80>)
 8001010:	480a      	ldr	r0, [pc, #40]	; (800103c <scrivi_speed+0x84>)
 8001012:	f014 fd03 	bl	8015a1c <f_printf>


	return res;
 8001016:	79fb      	ldrb	r3, [r7, #7]
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	24005744 	.word	0x24005744
 8001024:	24004588 	.word	0x24004588
 8001028:	24004584 	.word	0x24004584
 800102c:	24004658 	.word	0x24004658
 8001030:	24002518 	.word	0x24002518
 8001034:	24000274 	.word	0x24000274
 8001038:	08016d04 	.word	0x08016d04
 800103c:	240014c0 	.word	0x240014c0

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_MspInit+0x30>)
 8001058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800105c:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x30>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x30>)
 8001068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	58024400 	.word	0x58024400

08001084 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	; 0x38
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a59      	ldr	r2, [pc, #356]	; (8001208 <HAL_ETH_MspInit+0x184>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	f040 80ab 	bne.w	80011fe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80010a8:	4b58      	ldr	r3, [pc, #352]	; (800120c <HAL_ETH_MspInit+0x188>)
 80010aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ae:	4a57      	ldr	r2, [pc, #348]	; (800120c <HAL_ETH_MspInit+0x188>)
 80010b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010b8:	4b54      	ldr	r3, [pc, #336]	; (800120c <HAL_ETH_MspInit+0x188>)
 80010ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <HAL_ETH_MspInit+0x188>)
 80010c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010cc:	4a4f      	ldr	r2, [pc, #316]	; (800120c <HAL_ETH_MspInit+0x188>)
 80010ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010d6:	4b4d      	ldr	r3, [pc, #308]	; (800120c <HAL_ETH_MspInit+0x188>)
 80010d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <HAL_ETH_MspInit+0x188>)
 80010e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ea:	4a48      	ldr	r2, [pc, #288]	; (800120c <HAL_ETH_MspInit+0x188>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <HAL_ETH_MspInit+0x188>)
 80010f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b42      	ldr	r3, [pc, #264]	; (800120c <HAL_ETH_MspInit+0x188>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a40      	ldr	r2, [pc, #256]	; (800120c <HAL_ETH_MspInit+0x188>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b3e      	ldr	r3, [pc, #248]	; (800120c <HAL_ETH_MspInit+0x188>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_ETH_MspInit+0x188>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	4a39      	ldr	r2, [pc, #228]	; (800120c <HAL_ETH_MspInit+0x188>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <HAL_ETH_MspInit+0x188>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <HAL_ETH_MspInit+0x188>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	4a31      	ldr	r2, [pc, #196]	; (800120c <HAL_ETH_MspInit+0x188>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <HAL_ETH_MspInit+0x188>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <HAL_ETH_MspInit+0x188>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	4a2a      	ldr	r2, [pc, #168]	; (800120c <HAL_ETH_MspInit+0x188>)
 8001164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <HAL_ETH_MspInit+0x188>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800117a:	2332      	movs	r3, #50	; 0x32
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118a:	230b      	movs	r3, #11
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	481e      	ldr	r0, [pc, #120]	; (8001210 <HAL_ETH_MspInit+0x18c>)
 8001196:	f001 ff27 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800119a:	2386      	movs	r3, #134	; 0x86
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011aa:	230b      	movs	r3, #11
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	4619      	mov	r1, r3
 80011b4:	4817      	ldr	r0, [pc, #92]	; (8001214 <HAL_ETH_MspInit+0x190>)
 80011b6:	f001 ff17 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011cc:	230b      	movs	r3, #11
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4810      	ldr	r0, [pc, #64]	; (8001218 <HAL_ETH_MspInit+0x194>)
 80011d8:	f001 ff06 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ee:	230b      	movs	r3, #11
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <HAL_ETH_MspInit+0x198>)
 80011fa:	f001 fef5 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3738      	adds	r7, #56	; 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40028000 	.word	0x40028000
 800120c:	58024400 	.word	0x58024400
 8001210:	58020800 	.word	0x58020800
 8001214:	58020000 	.word	0x58020000
 8001218:	58020400 	.word	0x58020400
 800121c:	58021800 	.word	0x58021800

08001220 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <HAL_FDCAN_MspInit+0xa8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d13d      	bne.n	80012be <HAL_FDCAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_FDCAN_MspInit+0xac>)
 8001244:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001248:	4a20      	ldr	r2, [pc, #128]	; (80012cc <HAL_FDCAN_MspInit+0xac>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_FDCAN_MspInit+0xac>)
 8001254:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_FDCAN_MspInit+0xac>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	4a19      	ldr	r2, [pc, #100]	; (80012cc <HAL_FDCAN_MspInit+0xac>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_FDCAN_MspInit+0xac>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800127e:	2303      	movs	r3, #3
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800128e:	2309      	movs	r3, #9
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <HAL_FDCAN_MspInit+0xb0>)
 800129a:	f001 fea5 	bl	8002fe8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2013      	movs	r0, #19
 80012a4:	f000 fbe3 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80012a8:	2013      	movs	r0, #19
 80012aa:	f000 fbfa 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	203f      	movs	r0, #63	; 0x3f
 80012b4:	f000 fbdb 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 80012b8:	203f      	movs	r0, #63	; 0x3f
 80012ba:	f000 fbf2 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	4000a000 	.word	0x4000a000
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020c00 	.word	0x58020c00

080012d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_RTC_MspInit+0x2c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d105      	bne.n	80012f2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_RTC_MspInit+0x30>)
 80012e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ea:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_RTC_MspInit+0x30>)
 80012ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	58004000 	.word	0x58004000
 8001304:	58024400 	.word	0x58024400

08001308 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <HAL_SD_MspInit+0xe8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d15e      	bne.n	80013e8 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800132a:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <HAL_SD_MspInit+0xec>)
 800132c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001330:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <HAL_SD_MspInit+0xec>)
 8001332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001336:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <HAL_SD_MspInit+0xec>)
 800133c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_SD_MspInit+0xec>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <HAL_SD_MspInit+0xec>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <HAL_SD_MspInit+0xec>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_SD_MspInit+0xec>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <HAL_SD_MspInit+0xec>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_SD_MspInit+0xec>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138e:	2301      	movs	r3, #1
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001396:	230c      	movs	r3, #12
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4815      	ldr	r0, [pc, #84]	; (80013f8 <HAL_SD_MspInit+0xf0>)
 80013a2:	f001 fe21 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80013b8:	230c      	movs	r3, #12
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <HAL_SD_MspInit+0xf0>)
 80013c4:	f001 fe10 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c8:	2304      	movs	r3, #4
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80013d8:	230c      	movs	r3, #12
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <HAL_SD_MspInit+0xf4>)
 80013e4:	f001 fe00 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	52007000 	.word	0x52007000
 80013f4:	58024400 	.word	0x58024400
 80013f8:	58020800 	.word	0x58020800
 80013fc:	58020c00 	.word	0x58020c00

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_TIM_Base_MspInit+0x48>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d116      	bne.n	8001440 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_TIM_Base_MspInit+0x4c>)
 8001414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_TIM_Base_MspInit+0x4c>)
 800141a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_TIM_Base_MspInit+0x4c>)
 8001424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2076      	movs	r0, #118	; 0x76
 8001436:	f000 fb1a 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800143a:	2076      	movs	r0, #118	; 0x76
 800143c:	f000 fb31 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40014800 	.word	0x40014800
 800144c:	58024400 	.word	0x58024400

08001450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_UART_MspInit+0x88>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12e      	bne.n	80014d0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HAL_UART_MspInit+0x8c>)
 8001474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001478:	4a18      	ldr	r2, [pc, #96]	; (80014dc <HAL_UART_MspInit+0x8c>)
 800147a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_UART_MspInit+0x8c>)
 8001484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_UART_MspInit+0x8c>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <HAL_UART_MspInit+0x8c>)
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_UART_MspInit+0x8c>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c0:	2307      	movs	r3, #7
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_UART_MspInit+0x90>)
 80014cc:	f001 fd8c 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40004800 	.word	0x40004800
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020c00 	.word	0x58020c00

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001538:	f000 f95c 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <FDCAN1_IT0_IRQHandler+0x10>)
 8001546:	f001 f8bf 	bl	80026c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	240045ac 	.word	0x240045ac

08001554 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001558:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800155c:	f001 ff40 	bl	80033e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <FDCAN_CAL_IRQHandler+0x10>)
 800156a:	f001 f8ad 	bl	80026c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	240045ac 	.word	0x240045ac

08001578 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <OTG_FS_IRQHandler+0x10>)
 800157e:	f002 f8db 	bl	8003738 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	24007cc0 	.word	0x24007cc0

0800158c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <TIM17_IRQHandler+0x10>)
 8001592:	f007 ff56 	bl	8009442 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2400147c 	.word	0x2400147c

080015a0 <_sbrk>:
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x50>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <_sbrk+0x16>
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <_sbrk+0x50>)
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <_sbrk+0x54>)
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <_sbrk+0x50>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <_sbrk+0x50>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	466a      	mov	r2, sp
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d907      	bls.n	80015da <_sbrk+0x3a>
 80015ca:	f015 fa87 	bl	8016adc <__errno>
 80015ce:	4602      	mov	r2, r0
 80015d0:	230c      	movs	r3, #12
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
 80015d8:	e006      	b.n	80015e8 <_sbrk+0x48>
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <_sbrk+0x50>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <_sbrk+0x50>)
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2400027c 	.word	0x2400027c
 80015f4:	240080d0 	.word	0x240080d0

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <SystemInit+0xac>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <SystemInit+0xac>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <SystemInit+0xb0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <SystemInit+0xb0>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <SystemInit+0xb0>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <SystemInit+0xb0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4921      	ldr	r1, [pc, #132]	; (80016a8 <SystemInit+0xb0>)
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <SystemInit+0xb4>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <SystemInit+0xb0>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <SystemInit+0xb0>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <SystemInit+0xb0>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <SystemInit+0xb0>)
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <SystemInit+0xb0>)
 8001644:	2200      	movs	r2, #0
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <SystemInit+0xb0>)
 800164a:	2200      	movs	r2, #0
 800164c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <SystemInit+0xb0>)
 8001650:	2200      	movs	r2, #0
 8001652:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <SystemInit+0xb0>)
 8001656:	2200      	movs	r2, #0
 8001658:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <SystemInit+0xb0>)
 800165c:	2200      	movs	r2, #0
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <SystemInit+0xb0>)
 8001662:	2200      	movs	r2, #0
 8001664:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <SystemInit+0xb0>)
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <SystemInit+0xb0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <SystemInit+0xb0>)
 8001672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001676:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <SystemInit+0xb0>)
 800167a:	2200      	movs	r2, #0
 800167c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <SystemInit+0xb8>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <SystemInit+0xbc>)
 8001684:	4013      	ands	r3, r2
 8001686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800168a:	d202      	bcs.n	8001692 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <SystemInit+0xc0>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SystemInit+0xac>)
 8001694:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001698:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00
 80016a8:	58024400 	.word	0x58024400
 80016ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80016b0:	5c001000 	.word	0x5c001000
 80016b4:	ffff0000 	.word	0xffff0000
 80016b8:	51008108 	.word	0x51008108

080016bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016c2:	e003      	b.n	80016cc <LoopCopyDataInit>

080016c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016ca:	3104      	adds	r1, #4

080016cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016d4:	d3f6      	bcc.n	80016c4 <CopyDataInit>
  ldr  r2, =_sbss
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016d8:	e002      	b.n	80016e0 <LoopFillZerobss>

080016da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016dc:	f842 3b04 	str.w	r3, [r2], #4

080016e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016e4:	d3f9      	bcc.n	80016da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016e6:	f7ff ff87 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ea:	f015 f9fd 	bl	8016ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ee:	f7fe ff73 	bl	80005d8 <main>
  bx  lr    
 80016f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80016f8:	080172cc 	.word	0x080172cc
  ldr  r0, =_sdata
 80016fc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001700:	24000194 	.word	0x24000194
  ldr  r2, =_sbss
 8001704:	24000258 	.word	0x24000258
  ldr  r3, = _ebss
 8001708:	240080cc 	.word	0x240080cc

0800170c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC3_IRQHandler>
	...

08001710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001716:	2003      	movs	r0, #3
 8001718:	f000 f99e 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800171c:	f003 fe96 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8001720:	4601      	mov	r1, r0
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_Init+0x68>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	4a13      	ldr	r2, [pc, #76]	; (800177c <HAL_Init+0x6c>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	fa21 f303 	lsr.w	r3, r1, r3
 8001738:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_Init+0x68>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_Init+0x6c>)
 8001744:	5cd3      	ldrb	r3, [r2, r3]
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
 8001750:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <HAL_Init+0x70>)
 8001752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001754:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_Init+0x74>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175a:	2000      	movs	r0, #0
 800175c:	f000 f814 	bl	8001788 <HAL_InitTick>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e002      	b.n	8001770 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800176a:	f7ff fc71 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	58024400 	.word	0x58024400
 800177c:	08016e1c 	.word	0x08016e1c
 8001780:	24000010 	.word	0x24000010
 8001784:	2400000c 	.word	0x2400000c

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_InitTick+0x60>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e021      	b.n	80017e0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_InitTick+0x64>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_InitTick+0x60>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f983 	bl	8001abe <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00e      	b.n	80017e0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d80a      	bhi.n	80017de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f000 f94d 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_InitTick+0x68>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	24000018 	.word	0x24000018
 80017ec:	2400000c 	.word	0x2400000c
 80017f0:	24000014 	.word	0x24000014

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	24000018 	.word	0x24000018
 8001818:	24005758 	.word	0x24005758

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	24005758 	.word	0x24005758

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff ffee 	bl	800181c <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_Delay+0x40>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffde 	bl	800181c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	24000018 	.word	0x24000018

08001878 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_GetREVID+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0c1b      	lsrs	r3, r3, #16
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	5c001000 	.word	0x5c001000

08001890 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80018a0:	4904      	ldr	r1, [pc, #16]	; (80018b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	58000400 	.word	0x58000400

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	05fa0000 	.word	0x05fa0000

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff29 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff40 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff90 	bl	80019ac <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5f 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff33 	bl	800191c <__NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffa4 	bl	8001a14 <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0c6      	b.n	8001c78 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fac6 	bl	8001084 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2223      	movs	r2, #35	; 0x23
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	4b60      	ldr	r3, [pc, #384]	; (8001c80 <HAL_ETH_Init+0x1a8>)
 8001b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b04:	4a5e      	ldr	r2, [pc, #376]	; (8001c80 <HAL_ETH_Init+0x1a8>)
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	; (8001c80 <HAL_ETH_Init+0x1a8>)
 8001b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7a1b      	ldrb	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff feb3 	bl	8001890 <HAL_SYSCFG_ETHInterfaceSelect>
 8001b2a:	e003      	b.n	8001b34 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001b2c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b30:	f7ff feae 	bl	8001890 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b4c:	f7ff fe66 	bl	800181c <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b52:	e00f      	b.n	8001b74 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001b54:	f7ff fe62 	bl	800181c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b62:	d907      	bls.n	8001b74 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2204      	movs	r2, #4
 8001b68:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	22e0      	movs	r2, #224	; 0xe0
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e081      	b.n	8001c78 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1e6      	bne.n	8001b54 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fac0 	bl	800210c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b8c:	f003 fdd0 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_ETH_Init+0x1ac>)
 8001b94:	fba3 2302 	umull	r2, r3, r3, r2
 8001b98:	0c9a      	lsrs	r2, r3, #18
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3a01      	subs	r2, #1
 8001ba0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fa13 	bl	8001fd0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001bc0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001bc4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	22e0      	movs	r2, #224	; 0xe0
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e04a      	b.n	8001c78 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bea:	4413      	add	r3, r2
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_ETH_Init+0x1b0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6952      	ldr	r2, [r2, #20]
 8001bf6:	0052      	lsls	r2, r2, #1
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	6809      	ldr	r1, [r1, #0]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c02:	440b      	add	r3, r1
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fad8 	bl	80021bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fb1c 	bl	800224a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	3305      	adds	r3, #5
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	021a      	lsls	r2, r3, #8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	3303      	adds	r3, #3
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	061a      	lsls	r2, r3, #24
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	3302      	adds	r3, #2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c50:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c5e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2210      	movs	r2, #16
 8001c74:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	58024400 	.word	0x58024400
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	ffff8001 	.word	0xffff8001

08001c8c <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001c9e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	791b      	ldrb	r3, [r3, #4]
 8001ca4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001ca6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	7b1b      	ldrb	r3, [r3, #12]
 8001cac:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001cae:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	7b5b      	ldrb	r3, [r3, #13]
 8001cb4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001cb6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	7b9b      	ldrb	r3, [r3, #14]
 8001cbc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001cbe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	7bdb      	ldrb	r3, [r3, #15]
 8001cc4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001cc6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	7c12      	ldrb	r2, [r2, #16]
 8001ccc:	2a00      	cmp	r2, #0
 8001cce:	d102      	bne.n	8001cd6 <ETH_SetMACConfig+0x4a>
 8001cd0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cd4:	e000      	b.n	8001cd8 <ETH_SetMACConfig+0x4c>
 8001cd6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cd8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	7c52      	ldrb	r2, [r2, #17]
 8001cde:	2a00      	cmp	r2, #0
 8001ce0:	d102      	bne.n	8001ce8 <ETH_SetMACConfig+0x5c>
 8001ce2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ce6:	e000      	b.n	8001cea <ETH_SetMACConfig+0x5e>
 8001ce8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cea:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	7c9b      	ldrb	r3, [r3, #18]
 8001cf0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cf2:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001cf8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001cfe:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7f1b      	ldrb	r3, [r3, #28]
 8001d04:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001d06:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	7f5b      	ldrb	r3, [r3, #29]
 8001d0c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001d0e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	7f92      	ldrb	r2, [r2, #30]
 8001d14:	2a00      	cmp	r2, #0
 8001d16:	d102      	bne.n	8001d1e <ETH_SetMACConfig+0x92>
 8001d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1c:	e000      	b.n	8001d20 <ETH_SetMACConfig+0x94>
 8001d1e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001d20:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	7fdb      	ldrb	r3, [r3, #31]
 8001d26:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001d28:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d30:	2a00      	cmp	r2, #0
 8001d32:	d102      	bne.n	8001d3a <ETH_SetMACConfig+0xae>
 8001d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d38:	e000      	b.n	8001d3c <ETH_SetMACConfig+0xb0>
 8001d3a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001d3c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001d42:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d4a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001d4c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <ETH_SetMACConfig+0x22c>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	430b      	orrs	r3, r1
 8001d68:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d76:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001d78:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d80:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001d82:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d8a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001d8c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d94:	2a00      	cmp	r2, #0
 8001d96:	d102      	bne.n	8001d9e <ETH_SetMACConfig+0x112>
 8001d98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d9c:	e000      	b.n	8001da0 <ETH_SetMACConfig+0x114>
 8001d9e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001da0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <ETH_SetMACConfig+0x230>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dc4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <ETH_SetMACConfig+0x234>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	430b      	orrs	r3, r1
 8001de0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001de8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001dee:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001df6:	2a00      	cmp	r2, #0
 8001df8:	d101      	bne.n	8001dfe <ETH_SetMACConfig+0x172>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	e000      	b.n	8001e00 <ETH_SetMACConfig+0x174>
 8001dfe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001e00:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e12:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e28:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e30:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f023 0103 	bic.w	r1, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001e56:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001e72:	2a00      	cmp	r2, #0
 8001e74:	d101      	bne.n	8001e7a <ETH_SetMACConfig+0x1ee>
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	e000      	b.n	8001e7c <ETH_SetMACConfig+0x1f0>
 8001e7a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e7c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e84:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e86:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001e8e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e9c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	00048083 	.word	0x00048083
 8001ebc:	c0f88000 	.word	0xc0f88000
 8001ec0:	fffffef0 	.word	0xfffffef0

08001ec4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <ETH_SetDMAConfig+0xf8>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	6809      	ldr	r1, [r1, #0]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001eea:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	791b      	ldrb	r3, [r3, #4]
 8001ef0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ef6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	7b1b      	ldrb	r3, [r3, #12]
 8001efc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f241 0304 	movw	r3, #4100	; 0x1004
 8001f0a:	4413      	add	r3, r2
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <ETH_SetDMAConfig+0xfc>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6811      	ldr	r1, [r2, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	f241 0304 	movw	r3, #4100	; 0x1004
 8001f1e:	440b      	add	r3, r1
 8001f20:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	7b5b      	ldrb	r3, [r3, #13]
 8001f26:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <ETH_SetDMAConfig+0x100>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6811      	ldr	r1, [r2, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001f4a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	7d1b      	ldrb	r3, [r3, #20]
 8001f54:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f56:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	7f5b      	ldrb	r3, [r3, #29]
 8001f5c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	f241 1304 	movw	r3, #4356	; 0x1104
 8001f6a:	4413      	add	r3, r2
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <ETH_SetDMAConfig+0x104>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6811      	ldr	r1, [r2, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001f7e:	440b      	add	r3, r1
 8001f80:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	7f1b      	ldrb	r3, [r3, #28]
 8001f86:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f98:	4413      	add	r3, r2
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <ETH_SetDMAConfig+0x108>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6811      	ldr	r1, [r2, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	f241 1308 	movw	r3, #4360	; 0x1108
 8001fac:	440b      	add	r3, r1
 8001fae:	601a      	str	r2, [r3, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	ffff87fd 	.word	0xffff87fd
 8001fc0:	ffff2ffe 	.word	0xffff2ffe
 8001fc4:	fffec000 	.word	0xfffec000
 8001fc8:	ffc0efef 	.word	0xffc0efef
 8001fcc:	7fc0ffff 	.word	0x7fc0ffff

08001fd0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0a4      	sub	sp, #144	; 0x90
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002006:	2301      	movs	r3, #1
 8002008:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800200c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002018:	2300      	movs	r3, #0
 800201a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002028:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800202c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002034:	2300      	movs	r3, #0
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002038:	2301      	movs	r3, #1
 800203a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800204a:	2300      	movs	r3, #0
 800204c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800204e:	2300      	movs	r3, #0
 8002050:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002052:	2300      	movs	r3, #0
 8002054:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002068:	2320      	movs	r3, #32
 800206a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800206e:	2301      	movs	r3, #1
 8002070:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800207a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002080:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002084:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80020aa:	2300      	movs	r3, #0
 80020ac:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fde6 	bl	8001c8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020c0:	2301      	movs	r3, #1
 80020c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020c4:	2301      	movs	r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80020f0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fee1 	bl	8001ec4 <ETH_SetDMAConfig>
}
 8002102:	bf00      	nop
 8002104:	3790      	adds	r7, #144	; 0x90
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800211c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002124:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002126:	f003 fb03 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 800212a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d908      	bls.n	8002146 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d804      	bhi.n	8002146 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e027      	b.n	8002196 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4a18      	ldr	r2, [pc, #96]	; (80021ac <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d908      	bls.n	8002160 <ETH_MAC_MDIO_ClkConfig+0x54>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d804      	bhi.n	8002160 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	e01a      	b.n	8002196 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d903      	bls.n	8002170 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d911      	bls.n	8002194 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d908      	bls.n	800218a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d804      	bhi.n	800218a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	e005      	b.n	8002196 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e000      	b.n	8002196 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002194:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	01312cff 	.word	0x01312cff
 80021ac:	02160ebf 	.word	0x02160ebf
 80021b0:	039386ff 	.word	0x039386ff
 80021b4:	05f5e0ff 	.word	0x05f5e0ff
 80021b8:	08f0d17f 	.word	0x08f0d17f

080021bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e01d      	b.n	8002206 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68d9      	ldr	r1, [r3, #12]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2200      	movs	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	3206      	adds	r2, #6
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3301      	adds	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d9de      	bls.n	80021ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	f241 132c 	movw	r3, #4396	; 0x112c
 800221a:	4413      	add	r3, r2
 800221c:	2203      	movs	r2, #3
 800221e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68d9      	ldr	r1, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f241 1314 	movw	r3, #4372	; 0x1114
 800222c:	4413      	add	r3, r2
 800222e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	e024      	b.n	80022a2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6919      	ldr	r1, [r3, #16]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2200      	movs	r2, #0
 8002274:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2200      	movs	r2, #0
 800228c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	330a      	adds	r3, #10
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3301      	adds	r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d9d7      	bls.n	8002258 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	f241 1330 	movw	r3, #4400	; 0x1130
 80022ce:	4413      	add	r3, r2
 80022d0:	2203      	movs	r2, #3
 80022d2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6919      	ldr	r1, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	f241 131c 	movw	r3, #4380	; 0x111c
 80022e0:	4413      	add	r3, r2
 80022e2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f241 1328 	movw	r3, #4392	; 0x1128
 80022f4:	4413      	add	r3, r2
 80022f6:	6019      	str	r1, [r3, #0]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b098      	sub	sp, #96	; 0x60
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800230c:	4a84      	ldr	r2, [pc, #528]	; (8002520 <HAL_FDCAN_Init+0x21c>)
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	4611      	mov	r1, r2
 8002314:	224c      	movs	r2, #76	; 0x4c
 8002316:	4618      	mov	r0, r3
 8002318:	f014 fc1a 	bl	8016b50 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e1ca      	b.n	80026bc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7e      	ldr	r2, [pc, #504]	; (8002524 <HAL_FDCAN_Init+0x220>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d106      	bne.n	800233e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002338:	461a      	mov	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe ff64 	bl	8001220 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0210 	bic.w	r2, r2, #16
 8002366:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002368:	f7ff fa58 	bl	800181c <HAL_GetTick>
 800236c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800236e:	e014      	b.n	800239a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002370:	f7ff fa54 	bl	800181c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b0a      	cmp	r3, #10
 800237c:	d90d      	bls.n	800239a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e190      	b.n	80026bc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d0e3      	beq.n	8002370 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b8:	f7ff fa30 	bl	800181c <HAL_GetTick>
 80023bc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80023be:	e014      	b.n	80023ea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80023c0:	f7ff fa2c 	bl	800181c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b0a      	cmp	r3, #10
 80023cc:	d90d      	bls.n	80023ea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e168      	b.n	80026bc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0e3      	beq.n	80023c0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0202 	orr.w	r2, r2, #2
 8002406:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7c1b      	ldrb	r3, [r3, #16]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d108      	bne.n	8002422 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241e:	619a      	str	r2, [r3, #24]
 8002420:	e007      	b.n	8002432 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699a      	ldr	r2, [r3, #24]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002430:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	7c5b      	ldrb	r3, [r3, #17]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d108      	bne.n	800244c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002448:	619a      	str	r2, [r3, #24]
 800244a:	e007      	b.n	800245c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800245a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7c9b      	ldrb	r3, [r3, #18]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d108      	bne.n	8002476 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	e007      	b.n	8002486 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002484:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80024aa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0210 	bic.w	r2, r2, #16
 80024ba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d108      	bne.n	80024d6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0204 	orr.w	r2, r2, #4
 80024d2:	619a      	str	r2, [r3, #24]
 80024d4:	e030      	b.n	8002538 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d02c      	beq.n	8002538 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d020      	beq.n	8002528 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699a      	ldr	r2, [r3, #24]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024f4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0210 	orr.w	r2, r2, #16
 8002504:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d114      	bne.n	8002538 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	619a      	str	r2, [r3, #24]
 800251e:	e00b      	b.n	8002538 <HAL_FDCAN_Init+0x234>
 8002520:	08016d28 	.word	0x08016d28
 8002524:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0220 	orr.w	r2, r2, #32
 8002536:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	3b01      	subs	r3, #1
 800253e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	3b01      	subs	r3, #1
 8002546:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002548:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002550:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	3b01      	subs	r3, #1
 800255a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002560:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002562:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800256c:	d115      	bne.n	800259a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	3b01      	subs	r3, #1
 800257a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800257c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	3b01      	subs	r3, #1
 8002584:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002586:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	3b01      	subs	r3, #1
 8002590:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002596:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002598:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c0:	4413      	add	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d012      	beq.n	80025ec <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80025ce:	f023 0107 	bic.w	r1, r3, #7
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025dc:	4413      	add	r3, r2
 80025de:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80025fc:	f023 0107 	bic.w	r1, r3, #7
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800260a:	4413      	add	r3, r2
 800260c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261e:	2b00      	cmp	r3, #0
 8002620:	d013      	beq.n	800264a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800262a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002638:	4413      	add	r3, r2
 800263a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800263e:	011a      	lsls	r2, r3, #4
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	2b00      	cmp	r3, #0
 8002650:	d013      	beq.n	800267a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800265a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002668:	4413      	add	r3, r2
 800266a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800266e:	021a      	lsls	r2, r3, #8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_FDCAN_Init+0x3c0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d107      	bne.n	8002694 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f022 0203 	bic.w	r2, r2, #3
 8002692:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fb15 	bl	8002cdc <FDCAN_CalcultateRamBlockAddresses>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80026b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3760      	adds	r7, #96	; 0x60
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	4000a000 	.word	0x4000a000

080026c8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b092      	sub	sp, #72	; 0x48
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80026d0:	4b90      	ldr	r3, [pc, #576]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	079b      	lsls	r3, r3, #30
 80026d6:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80026d8:	4b8e      	ldr	r3, [pc, #568]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	079b      	lsls	r3, r3, #30
 80026de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026e0:	4013      	ands	r3, r2
 80026e2:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026f8:	4013      	ands	r3, r2
 80026fa:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002710:	4013      	ands	r3, r2
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800271e:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002728:	4013      	ands	r3, r2
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002732:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002740:	4013      	ands	r3, r2
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002758:	4013      	ands	r3, r2
 800275a:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d011      	beq.n	800278e <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002780:	651a      	str	r2, [r3, #80]	; 0x50
 8002782:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fa5a 	bl	8002c42 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01e      	beq.n	80027da <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d017      	beq.n	80027da <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80027bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027be:	4013      	ands	r3, r2
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ca:	651a      	str	r2, [r3, #80]	; 0x50
 80027cc:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80027d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fa0b 	bl	8002bf0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80027da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80027e6:	4b4c      	ldr	r3, [pc, #304]	; (8002918 <HAL_FDCAN_IRQHandler+0x250>)
 80027e8:	400b      	ands	r3, r1
 80027ea:	6513      	str	r3, [r2, #80]	; 0x50
 80027ec:	4a49      	ldr	r2, [pc, #292]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 80027ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f0:	0f9b      	lsrs	r3, r3, #30
 80027f2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80027f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f9c4 	bl	8002b84 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80027fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_FDCAN_IRQHandler+0x250>)
 800280a:	400b      	ands	r3, r1
 800280c:	6513      	str	r3, [r2, #80]	; 0x50
 800280e:	4a41      	ldr	r2, [pc, #260]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 8002810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002812:	0f9b      	lsrs	r3, r3, #30
 8002814:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f9be 	bl	8002b9a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800281e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800282a:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_FDCAN_IRQHandler+0x250>)
 800282c:	400b      	ands	r3, r1
 800282e:	6513      	str	r3, [r2, #80]	; 0x50
 8002830:	4a38      	ldr	r2, [pc, #224]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 8002832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002834:	0f9b      	lsrs	r3, r3, #30
 8002836:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe fac8 	bl	8000dd0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00d      	beq.n	8002862 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800284c:	4b32      	ldr	r3, [pc, #200]	; (8002918 <HAL_FDCAN_IRQHandler+0x250>)
 800284e:	400b      	ands	r3, r1
 8002850:	6513      	str	r3, [r2, #80]	; 0x50
 8002852:	4a30      	ldr	r2, [pc, #192]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	0f9b      	lsrs	r3, r3, #30
 8002858:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800285a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f9a7 	bl	8002bb0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800286c:	2b00      	cmp	r3, #0
 800286e:	d011      	beq.n	8002894 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002886:	651a      	str	r2, [r3, #80]	; 0x50
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f999 	bl	8002bc6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01e      	beq.n	80028e0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d017      	beq.n	80028e0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c4:	4013      	ands	r3, r2
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d0:	651a      	str	r2, [r3, #80]	; 0x50
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80028d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f97d 	bl	8002bda <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00f      	beq.n	800291c <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002904:	651a      	str	r2, [r3, #80]	; 0x50
 8002906:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_FDCAN_IRQHandler+0x24c>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f97a 	bl	8002c06 <HAL_FDCAN_RxBufferNewMessageCallback>
 8002912:	e003      	b.n	800291c <HAL_FDCAN_IRQHandler+0x254>
 8002914:	4000a800 	.word	0x4000a800
 8002918:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d011      	beq.n	800294e <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002940:	651a      	str	r2, [r3, #80]	; 0x50
 8002942:	4b8d      	ldr	r3, [pc, #564]	; (8002b78 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f966 	bl	8002c1a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d011      	beq.n	8002980 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002972:	651a      	str	r2, [r3, #80]	; 0x50
 8002974:	4b80      	ldr	r3, [pc, #512]	; (8002b78 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f957 	bl	8002c2e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00f      	beq.n	80029bc <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029a4:	651a      	str	r2, [r3, #80]	; 0x50
 80029a6:	4b74      	ldr	r3, [pc, #464]	; (8002b78 <HAL_FDCAN_IRQHandler+0x4b0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029c8:	4b6c      	ldr	r3, [pc, #432]	; (8002b7c <HAL_FDCAN_IRQHandler+0x4b4>)
 80029ca:	400b      	ands	r3, r1
 80029cc:	6513      	str	r3, [r2, #80]	; 0x50
 80029ce:	4a6a      	ldr	r2, [pc, #424]	; (8002b78 <HAL_FDCAN_IRQHandler+0x4b0>)
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d2:	0f9b      	lsrs	r3, r3, #30
 80029d4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80029d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f946 	bl	8002c6a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d011      	beq.n	8002a08 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029ea:	4b64      	ldr	r3, [pc, #400]	; (8002b7c <HAL_FDCAN_IRQHandler+0x4b4>)
 80029ec:	400b      	ands	r3, r1
 80029ee:	6513      	str	r3, [r2, #80]	; 0x50
 80029f0:	4a61      	ldr	r2, [pc, #388]	; (8002b78 <HAL_FDCAN_IRQHandler+0x4b0>)
 80029f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f4:	0f9b      	lsrs	r3, r3, #30
 80029f6:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a5c      	ldr	r2, [pc, #368]	; (8002b80 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	f040 80a6 	bne.w	8002b60 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 809e 	beq.w	8002b60 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	4013      	ands	r3, r2
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a46:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	6a3a      	ldr	r2, [r7, #32]
 8002a50:	4013      	ands	r3, r2
 8002a52:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002a5e:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002a76:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002a8e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f8e7 	bl	8002c80 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	6a3a      	ldr	r2, [r7, #32]
 8002abe:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002ac0:	6a39      	ldr	r1, [r7, #32]
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8e7 	bl	8002c96 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01b      	beq.n	8002b0e <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d014      	beq.n	8002b0e <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002afa:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2240      	movs	r2, #64	; 0x40
 8002b02:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	6939      	ldr	r1, [r7, #16]
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f8cf 	bl	8002cac <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002b1c:	69f9      	ldr	r1, [r7, #28]
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8d0 	bl	8002cc4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f873 	bl	8002c56 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002b70:	bf00      	nop
 8002b72:	3748      	adds	r7, #72	; 0x48
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	4000a800 	.word	0x4000a800
 8002b7c:	3fcfffff 	.word	0x3fcfffff
 8002b80:	4000a000 	.word	0x4000a000

08002b84 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002cf2:	4ba7      	ldr	r3, [pc, #668]	; (8002f90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	0091      	lsls	r1, r2, #2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	041a      	lsls	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	4413      	add	r3, r2
 8002d28:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d32:	4b97      	ldr	r3, [pc, #604]	; (8002f90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	0091      	lsls	r1, r2, #2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d54:	041a      	lsls	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002d74:	4b86      	ldr	r3, [pc, #536]	; (8002f90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	0091      	lsls	r1, r2, #2
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d8e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	041a      	lsls	r2, r3, #16
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	4413      	add	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002dbc:	4b74      	ldr	r3, [pc, #464]	; (8002f90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	0091      	lsls	r1, r2, #2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dd6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dde:	041a      	lsls	r2, r3, #16
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	4413      	add	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002e04:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	0091      	lsls	r1, r2, #2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4413      	add	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002e30:	4b57      	ldr	r3, [pc, #348]	; (8002f90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	0091      	lsls	r1, r2, #2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e4a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	041a      	lsls	r2, r3, #16
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	4413      	add	r3, r2
 8002e68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e72:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	0091      	lsls	r1, r2, #2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e8c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	041a      	lsls	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ea8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb0:	061a      	lsls	r2, r3, #24
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec0:	4b34      	ldr	r3, [pc, #208]	; (8002f94 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009a      	lsls	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	441a      	add	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	441a      	add	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	441a      	add	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	441a      	add	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d915      	bls.n	8002fb8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002f8c:	e006      	b.n	8002f9c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002f8e:	bf00      	nop
 8002f90:	ffff0003 	.word	0xffff0003
 8002f94:	10002b00 	.word	0x10002b00
 8002f98:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2203      	movs	r2, #3
 8002fb0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e010      	b.n	8002fda <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	e005      	b.n	8002fcc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3f3      	bcc.n	8002fc0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ff6:	4b89      	ldr	r3, [pc, #548]	; (800321c <HAL_GPIO_Init+0x234>)
 8002ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ffa:	e194      	b.n	8003326 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2101      	movs	r1, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8186 	beq.w	8003320 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d00b      	beq.n	8003034 <HAL_GPIO_Init+0x4c>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d007      	beq.n	8003034 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003028:	2b11      	cmp	r3, #17
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b12      	cmp	r3, #18
 8003032:	d130      	bne.n	8003096 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800306a:	2201      	movs	r2, #1
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 0201 	and.w	r2, r3, #1
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	2203      	movs	r2, #3
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0xee>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b12      	cmp	r3, #18
 80030d4:	d123      	bne.n	800311e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	08da      	lsrs	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3208      	adds	r2, #8
 80030de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	220f      	movs	r2, #15
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	08da      	lsrs	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3208      	adds	r2, #8
 8003118:	69b9      	ldr	r1, [r7, #24]
 800311a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0203 	and.w	r2, r3, #3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80e0 	beq.w	8003320 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003160:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_GPIO_Init+0x238>)
 8003162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003166:	4a2e      	ldr	r2, [pc, #184]	; (8003220 <HAL_GPIO_Init+0x238>)
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003170:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_GPIO_Init+0x238>)
 8003172:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800317e:	4a29      	ldr	r2, [pc, #164]	; (8003224 <HAL_GPIO_Init+0x23c>)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a20      	ldr	r2, [pc, #128]	; (8003228 <HAL_GPIO_Init+0x240>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d052      	beq.n	8003250 <HAL_GPIO_Init+0x268>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1f      	ldr	r2, [pc, #124]	; (800322c <HAL_GPIO_Init+0x244>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_GPIO_Init+0x22e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1e      	ldr	r2, [pc, #120]	; (8003230 <HAL_GPIO_Init+0x248>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d02b      	beq.n	8003212 <HAL_GPIO_Init+0x22a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <HAL_GPIO_Init+0x24c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d025      	beq.n	800320e <HAL_GPIO_Init+0x226>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_GPIO_Init+0x250>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01f      	beq.n	800320a <HAL_GPIO_Init+0x222>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_GPIO_Init+0x254>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d019      	beq.n	8003206 <HAL_GPIO_Init+0x21e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1a      	ldr	r2, [pc, #104]	; (8003240 <HAL_GPIO_Init+0x258>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_GPIO_Init+0x21a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a19      	ldr	r2, [pc, #100]	; (8003244 <HAL_GPIO_Init+0x25c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00d      	beq.n	80031fe <HAL_GPIO_Init+0x216>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a18      	ldr	r2, [pc, #96]	; (8003248 <HAL_GPIO_Init+0x260>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <HAL_GPIO_Init+0x212>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_GPIO_Init+0x264>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_GPIO_Init+0x20e>
 80031f2:	2309      	movs	r3, #9
 80031f4:	e02d      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 80031f6:	230a      	movs	r3, #10
 80031f8:	e02b      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 80031fa:	2308      	movs	r3, #8
 80031fc:	e029      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 80031fe:	2307      	movs	r3, #7
 8003200:	e027      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 8003202:	2306      	movs	r3, #6
 8003204:	e025      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 8003206:	2305      	movs	r3, #5
 8003208:	e023      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 800320a:	2304      	movs	r3, #4
 800320c:	e021      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 800320e:	2303      	movs	r3, #3
 8003210:	e01f      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 8003212:	2302      	movs	r3, #2
 8003214:	e01d      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 8003216:	2301      	movs	r3, #1
 8003218:	e01b      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 800321a:	bf00      	nop
 800321c:	58000080 	.word	0x58000080
 8003220:	58024400 	.word	0x58024400
 8003224:	58000400 	.word	0x58000400
 8003228:	58020000 	.word	0x58020000
 800322c:	58020400 	.word	0x58020400
 8003230:	58020800 	.word	0x58020800
 8003234:	58020c00 	.word	0x58020c00
 8003238:	58021000 	.word	0x58021000
 800323c:	58021400 	.word	0x58021400
 8003240:	58021800 	.word	0x58021800
 8003244:	58021c00 	.word	0x58021c00
 8003248:	58022000 	.word	0x58022000
 800324c:	58022400 	.word	0x58022400
 8003250:	2300      	movs	r3, #0
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	f002 0203 	and.w	r2, r2, #3
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	4093      	lsls	r3, r2
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003262:	4938      	ldr	r1, [pc, #224]	; (8003344 <HAL_GPIO_Init+0x35c>)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80032ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3301      	adds	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f ae63 	bne.w	8002ffc <HAL_GPIO_Init+0x14>
  }
}
 8003336:	bf00      	nop
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	58000400 	.word	0x58000400

08003348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e001      	b.n	800336a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
 8003384:	4613      	mov	r3, r2
 8003386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003394:	e003      	b.n	800339e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	619a      	str	r2, [r3, #24]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	887b      	ldrh	r3, [r7, #2]
 80033bc:	401a      	ands	r2, r3
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d104      	bne.n	80033ce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	041a      	lsls	r2, r3, #16
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80033cc:	e002      	b.n	80033d4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f804 	bl	8003414 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800342a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342c:	b08f      	sub	sp, #60	; 0x3c
 800342e:	af0a      	add	r7, sp, #40	; 0x28
 8003430:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e116      	b.n	800366a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f013 f804 	bl	8016464 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2203      	movs	r2, #3
 8003460:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f009 fd27 	bl	800cece <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	687e      	ldr	r6, [r7, #4]
 8003488:	466d      	mov	r5, sp
 800348a:	f106 0410 	add.w	r4, r6, #16
 800348e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003496:	e894 0003 	ldmia.w	r4, {r0, r1}
 800349a:	e885 0003 	stmia.w	r5, {r0, r1}
 800349e:	1d33      	adds	r3, r6, #4
 80034a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034a2:	6838      	ldr	r0, [r7, #0]
 80034a4:	f009 fbfe 	bl	800cca4 <USB_CoreInit>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0d7      	b.n	800366a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f009 fd15 	bl	800cef0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	e04a      	b.n	8003562 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	333d      	adds	r3, #61	; 0x3d
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	333c      	adds	r3, #60	; 0x3c
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	b298      	uxth	r0, r3
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3342      	adds	r3, #66	; 0x42
 8003508:	4602      	mov	r2, r0
 800350a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	333f      	adds	r3, #63	; 0x3f
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003520:	7bfa      	ldrb	r2, [r7, #15]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3344      	adds	r3, #68	; 0x44
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3348      	adds	r3, #72	; 0x48
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3350      	adds	r3, #80	; 0x50
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	3301      	adds	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d3af      	bcc.n	80034cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	e044      	b.n	80035fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	3301      	adds	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	429a      	cmp	r2, r3
 8003604:	d3b5      	bcc.n	8003572 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	687e      	ldr	r6, [r7, #4]
 800360e:	466d      	mov	r5, sp
 8003610:	f106 0410 	add.w	r4, r6, #16
 8003614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800361c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003620:	e885 0003 	stmia.w	r5, {r0, r1}
 8003624:	1d33      	adds	r3, r6, #4
 8003626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003628:	6838      	ldr	r0, [r7, #0]
 800362a:	f009 fc8b 	bl	800cf44 <USB_DevInit>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e014      	b.n	800366a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f001 f8ef 	bl	800483c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f00a fcc1 	bl	800dfea <USB_DevDisconnect>

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003672 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_PCD_Start+0x1c>
 800368a:	2302      	movs	r3, #2
 800368c:	e020      	b.n	80036d0 <HAL_PCD_Start+0x5e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	2b01      	cmp	r3, #1
 800369c:	d109      	bne.n	80036b2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d005      	beq.n	80036b2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f00a fc7f 	bl	800dfba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f009 fbf3 	bl	800ceac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_PCD_Stop+0x16>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e020      	b.n	8003730 <HAL_PCD_Stop+0x58>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f009 fbe7 	bl	800cece <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f00a fbe3 	bl	800ded0 <USB_StopDevice>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e009      	b.n	8003730 <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f00a fc62 	bl	800dfea <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b08d      	sub	sp, #52	; 0x34
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f00a fcf6 	bl	800e140 <USB_GetMode>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	f040 83ca 	bne.w	8003ef0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f00a fc5a 	bl	800e01a <USB_ReadInterrupts>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 83c0 	beq.w	8003eee <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f00a fc51 	bl	800e01a <USB_ReadInterrupts>
 8003778:	4603      	mov	r3, r0
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d107      	bne.n	8003792 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f002 0202 	and.w	r2, r2, #2
 8003790:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f00a fc3f 	bl	800e01a <USB_ReadInterrupts>
 800379c:	4603      	mov	r3, r0
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d161      	bne.n	800386a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699a      	ldr	r2, [r3, #24]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0210 	bic.w	r2, r2, #16
 80037b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 020f 	and.w	r2, r3, #15
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	3304      	adds	r3, #4
 80037d4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	0c5b      	lsrs	r3, r3, #17
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d124      	bne.n	800382c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d035      	beq.n	800385a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	6a38      	ldr	r0, [r7, #32]
 8003802:	f00a fa68 	bl	800dcd6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003812:	441a      	add	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003824:	441a      	add	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	619a      	str	r2, [r3, #24]
 800382a:	e016      	b.n	800385a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	0c5b      	lsrs	r3, r3, #17
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	2b06      	cmp	r3, #6
 8003836:	d110      	bne.n	800385a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800383e:	2208      	movs	r2, #8
 8003840:	4619      	mov	r1, r3
 8003842:	6a38      	ldr	r0, [r7, #32]
 8003844:	f00a fa47 	bl	800dcd6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003854:	441a      	add	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0210 	orr.w	r2, r2, #16
 8003868:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f00a fbd3 	bl	800e01a <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800387e:	d16e      	bne.n	800395e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f00a fbd9 	bl	800e040 <USB_ReadDevAllOutEpInterrupt>
 800388e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003890:	e062      	b.n	8003958 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d057      	beq.n	800394c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00a fbfe 	bl	800e0a8 <USB_ReadDevOutEPInterrupt>
 80038ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00c      	beq.n	80038d2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c4:	461a      	mov	r2, r3
 80038c6:	2301      	movs	r3, #1
 80038c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fe0b 	bl	80044e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e8:	461a      	mov	r2, r3
 80038ea:	2308      	movs	r3, #8
 80038ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 ff05 	bl	8004700 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	2310      	movs	r3, #16
 8003910:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003928:	461a      	mov	r2, r3
 800392a:	2320      	movs	r3, #32
 800392c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d009      	beq.n	800394c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003944:	461a      	mov	r2, r3
 8003946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800394a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	3301      	adds	r3, #1
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	2b00      	cmp	r3, #0
 800395c:	d199      	bne.n	8003892 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f00a fb59 	bl	800e01a <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003972:	f040 80c0 	bne.w	8003af6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f00a fb7a 	bl	800e074 <USB_ReadDevAllInEpInterrupt>
 8003980:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003986:	e0b2      	b.n	8003aee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80a7 	beq.w	8003ae2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f00a fba0 	bl	800e0e4 <USB_ReadDevInEPInterrupt>
 80039a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d057      	beq.n	8003a60 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	2201      	movs	r2, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69f9      	ldr	r1, [r7, #28]
 80039cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039d0:	4013      	ands	r3, r2
 80039d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e0:	461a      	mov	r2, r3
 80039e2:	2301      	movs	r3, #1
 80039e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d132      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3348      	adds	r3, #72	; 0x48
 80039fe:	6819      	ldr	r1, [r3, #0]
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4403      	add	r3, r0
 8003a0e:	3344      	adds	r3, #68	; 0x44
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4419      	add	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4403      	add	r3, r0
 8003a22:	3348      	adds	r3, #72	; 0x48
 8003a24:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d113      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x31c>
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3350      	adds	r3, #80	; 0x50
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2101      	movs	r1, #1
 8003a50:	f00a fba8 	bl	800e1a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f012 fd81 	bl	8016562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a76:	461a      	mov	r2, r3
 8003a78:	2308      	movs	r3, #8
 8003a7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a92:	461a      	mov	r2, r3
 8003a94:	2310      	movs	r3, #16
 8003a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2340      	movs	r3, #64	; 0x40
 8003ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aca:	461a      	mov	r2, r3
 8003acc:	2302      	movs	r3, #2
 8003ace:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fc75 	bl	80043cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f af49 	bne.w	8003988 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f00a fa8d 	bl	800e01a <USB_ReadInterrupts>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b0a:	d122      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d108      	bne.n	8003b3c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b32:	2100      	movs	r1, #0
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fea5 	bl	8004884 <HAL_PCDEx_LPM_Callback>
 8003b3a:	e002      	b.n	8003b42 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f012 fd87 	bl	8016650 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f00a fa5f 	bl	800e01a <USB_ReadInterrupts>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b66:	d112      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d102      	bne.n	8003b7e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f012 fd43 	bl	8016604 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b8c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f00a fa41 	bl	800e01a <USB_ReadInterrupts>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba2:	d121      	bne.n	8003be8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003bb2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d111      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	f003 020f 	and.w	r2, r3, #15
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003bd8:	2101      	movs	r1, #1
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fe52 	bl	8004884 <HAL_PCDEx_LPM_Callback>
 8003be0:	e002      	b.n	8003be8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f012 fd0e 	bl	8016604 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f00a fa14 	bl	800e01a <USB_ReadInterrupts>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfc:	f040 80c7 	bne.w	8003d8e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2110      	movs	r1, #16
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f009 faf0 	bl	800d200 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c24:	e056      	b.n	8003cd4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c32:	461a      	mov	r2, r3
 8003c34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c38:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4a:	0151      	lsls	r1, r2, #5
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	440a      	add	r2, r1
 8003c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c58:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	461a      	mov	r2, r3
 8003c88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbe:	0151      	lsls	r1, r2, #5
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	440a      	add	r2, r1
 8003cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ccc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d3a3      	bcc.n	8003c26 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cf0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0a:	f043 030b 	orr.w	r3, r3, #11
 8003d0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d20:	f043 030b 	orr.w	r3, r3, #11
 8003d24:	6453      	str	r3, [r2, #68]	; 0x44
 8003d26:	e015      	b.n	8003d54 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d36:	4619      	mov	r1, r3
 8003d38:	f242 032b 	movw	r3, #8235	; 0x202b
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4e:	f043 030b 	orr.w	r3, r3, #11
 8003d52:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d66:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f00a fa13 	bl	800e1a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f00a f941 	bl	800e01a <USB_ReadInterrupts>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da2:	d124      	bne.n	8003dee <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f00a f9d7 	bl	800e15c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f009 fa85 	bl	800d2c2 <USB_GetDevSpeed>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681c      	ldr	r4, [r3, #0]
 8003dc4:	f001 fcb4 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f008 ffc8 	bl	800cd68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f012 fbea 	bl	80165b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f00a f911 	bl	800e01a <USB_ReadInterrupts>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d10a      	bne.n	8003e18 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f012 fbc7 	bl	8016596 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f002 0208 	and.w	r2, r2, #8
 8003e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f00a f8fc 	bl	800e01a <USB_ReadInterrupts>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2c:	d10f      	bne.n	8003e4e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f012 fc29 	bl	8016690 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f00a f8e1 	bl	800e01a <USB_ReadInterrupts>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e62:	d10f      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f012 fbfc 	bl	801666c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f00a f8c6 	bl	800e01a <USB_ReadInterrupts>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e98:	d10a      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f012 fc0a 	bl	80166b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f00a f8b0 	bl	800e01a <USB_ReadInterrupts>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d115      	bne.n	8003ef0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f012 fbfa 	bl	80166d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6859      	ldr	r1, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	e000      	b.n	8003ef0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003eee:	bf00      	nop
    }
  }
}
 8003ef0:	3734      	adds	r7, #52	; 0x34
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd90      	pop	{r4, r7, pc}

08003ef6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_PCD_SetAddress+0x1a>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e013      	b.n	8003f38 <HAL_PCD_SetAddress+0x42>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f00a f820 	bl	800df6e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	70fb      	strb	r3, [r7, #3]
 8003f52:	460b      	mov	r3, r1
 8003f54:	803b      	strh	r3, [r7, #0]
 8003f56:	4613      	mov	r3, r2
 8003f58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	da0f      	bge.n	8003f86 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	3338      	adds	r3, #56	; 0x38
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	705a      	strb	r2, [r3, #1]
 8003f84:	e00f      	b.n	8003fa6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	f003 020f 	and.w	r2, r3, #15
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fb2:	883a      	ldrh	r2, [r7, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	78ba      	ldrb	r2, [r7, #2]
 8003fbc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	785b      	ldrb	r3, [r3, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fd0:	78bb      	ldrb	r3, [r7, #2]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d102      	bne.n	8003fdc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_PCD_EP_Open+0xaa>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e00e      	b.n	8004008 <HAL_PCD_EP_Open+0xc8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68f9      	ldr	r1, [r7, #12]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f009 f987 	bl	800d30c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004006:	7afb      	ldrb	r3, [r7, #11]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800401c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004020:	2b00      	cmp	r3, #0
 8004022:	da0f      	bge.n	8004044 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	f003 020f 	and.w	r2, r3, #15
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	3338      	adds	r3, #56	; 0x38
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4413      	add	r3, r2
 8004038:	3304      	adds	r3, #4
 800403a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	705a      	strb	r2, [r3, #1]
 8004042:	e00f      	b.n	8004064 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 020f 	and.w	r2, r3, #15
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	3304      	adds	r3, #4
 800405c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_PCD_EP_Close+0x6e>
 800407a:	2302      	movs	r3, #2
 800407c:	e00e      	b.n	800409c <HAL_PCD_EP_Close+0x8c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	4618      	mov	r0, r3
 800408e:	f009 f9c5 	bl	800d41c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	607a      	str	r2, [r7, #4]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	460b      	mov	r3, r1
 80040b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b4:	7afb      	ldrb	r3, [r7, #11]
 80040b6:	f003 020f 	and.w	r2, r3, #15
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	3304      	adds	r3, #4
 80040cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2200      	movs	r2, #0
 80040de:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e6:	7afb      	ldrb	r3, [r7, #11]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d102      	bne.n	8004100 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004100:	7afb      	ldrb	r3, [r7, #11]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	6979      	ldr	r1, [r7, #20]
 8004118:	f009 fc50 	bl	800d9bc <USB_EP0StartXfer>
 800411c:	e008      	b.n	8004130 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	6979      	ldr	r1, [r7, #20]
 800412c:	f009 f9fa 	bl	800d524 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f003 020f 	and.w	r2, r3, #15
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800415c:	681b      	ldr	r3, [r3, #0]
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	460b      	mov	r3, r1
 8004178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800417a:	7afb      	ldrb	r3, [r7, #11]
 800417c:	f003 020f 	and.w	r2, r3, #15
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	3338      	adds	r3, #56	; 0x38
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	3304      	adds	r3, #4
 8004190:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2201      	movs	r2, #1
 80041a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041aa:	7afb      	ldrb	r3, [r7, #11]
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d102      	bne.n	80041c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041c4:	7afb      	ldrb	r3, [r7, #11]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	6979      	ldr	r1, [r7, #20]
 80041dc:	f009 fbee 	bl	800d9bc <USB_EP0StartXfer>
 80041e0:	e008      	b.n	80041f4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	6979      	ldr	r1, [r7, #20]
 80041f0:	f009 f998 	bl	800d524 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d901      	bls.n	800421c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e050      	b.n	80042be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800421c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004220:	2b00      	cmp	r3, #0
 8004222:	da0f      	bge.n	8004244 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	f003 020f 	and.w	r2, r3, #15
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	3338      	adds	r3, #56	; 0x38
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	3304      	adds	r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	705a      	strb	r2, [r3, #1]
 8004242:	e00d      	b.n	8004260 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	4613      	mov	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	3304      	adds	r3, #4
 8004258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_PCD_EP_SetStall+0x82>
 800427c:	2302      	movs	r3, #2
 800427e:	e01e      	b.n	80042be <HAL_PCD_EP_SetStall+0xc0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68f9      	ldr	r1, [r7, #12]
 800428e:	4618      	mov	r0, r3
 8004290:	f009 fd4a 	bl	800dd28 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	b2d9      	uxtb	r1, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042ae:	461a      	mov	r2, r3
 80042b0:	f009 ff78 	bl	800e1a4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	f003 020f 	and.w	r2, r3, #15
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d901      	bls.n	80042e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e042      	b.n	800436a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da0f      	bge.n	800430c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	f003 020f 	and.w	r2, r3, #15
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3338      	adds	r3, #56	; 0x38
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	3304      	adds	r3, #4
 8004302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	705a      	strb	r2, [r3, #1]
 800430a:	e00f      	b.n	800432c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	f003 020f 	and.w	r2, r3, #15
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	3304      	adds	r3, #4
 8004324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_PCD_EP_ClrStall+0x86>
 8004348:	2302      	movs	r3, #2
 800434a:	e00e      	b.n	800436a <HAL_PCD_EP_ClrStall+0xa4>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68f9      	ldr	r1, [r7, #12]
 800435a:	4618      	mov	r0, r3
 800435c:	f009 fd52 	bl	800de04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_PCD_EP_Flush+0x1a>
 8004388:	2302      	movs	r3, #2
 800438a:	e01b      	b.n	80043c4 <HAL_PCD_EP_Flush+0x52>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004398:	2b00      	cmp	r3, #0
 800439a:	da09      	bge.n	80043b0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f008 ff29 	bl	800d200 <USB_FlushTxFifo>
 80043ae:	e004      	b.n	80043ba <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f008 ff49 	bl	800d24c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	3338      	adds	r3, #56	; 0x38
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4413      	add	r3, r2
 80043f0:	3304      	adds	r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d901      	bls.n	8004404 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e06c      	b.n	80044de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	695a      	ldr	r2, [r3, #20]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	429a      	cmp	r2, r3
 8004418:	d902      	bls.n	8004420 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	3303      	adds	r3, #3
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004428:	e02b      	b.n	8004482 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	429a      	cmp	r2, r3
 800443e:	d902      	bls.n	8004446 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3303      	adds	r3, #3
 800444a:	089b      	lsrs	r3, r3, #2
 800444c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68d9      	ldr	r1, [r3, #12]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800445e:	b2db      	uxtb	r3, r3
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	4603      	mov	r3, r0
 8004464:	6978      	ldr	r0, [r7, #20]
 8004466:	f009 fc01 	bl	800dc6c <USB_WritePacket>

    ep->xfer_buff  += len;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	441a      	add	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	441a      	add	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	b29b      	uxth	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	429a      	cmp	r2, r3
 8004496:	d809      	bhi.n	80044ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d203      	bcs.n	80044ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1be      	bne.n	800442a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d811      	bhi.n	80044dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	2201      	movs	r2, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	6939      	ldr	r1, [r7, #16]
 80044d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044d8:	4013      	ands	r3, r2
 80044da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	333c      	adds	r3, #60	; 0x3c
 8004500:	3304      	adds	r3, #4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b01      	cmp	r3, #1
 800451c:	f040 80a0 	bne.w	8004660 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d015      	beq.n	8004556 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a72      	ldr	r2, [pc, #456]	; (80046f8 <PCD_EP_OutXfrComplete_int+0x210>)
 800452e:	4293      	cmp	r3, r2
 8004530:	f240 80dd 	bls.w	80046ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80d7 	beq.w	80046ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	461a      	mov	r2, r3
 800454e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004552:	6093      	str	r3, [r2, #8]
 8004554:	e0cb      	b.n	80046ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456c:	461a      	mov	r2, r3
 800456e:	2320      	movs	r3, #32
 8004570:	6093      	str	r3, [r2, #8]
 8004572:	e0bc      	b.n	80046ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800457a:	2b00      	cmp	r3, #0
 800457c:	f040 80b7 	bne.w	80046ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a5d      	ldr	r2, [pc, #372]	; (80046f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d90f      	bls.n	80045a8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459e:	461a      	mov	r2, r3
 80045a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a4:	6093      	str	r3, [r2, #8]
 80045a6:	e0a2      	b.n	80046ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045ba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	0159      	lsls	r1, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	440b      	add	r3, r1
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80045ce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4403      	add	r3, r0
 80045de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80045e2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045f6:	6819      	ldr	r1, [r3, #0]
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4403      	add	r3, r0
 8004606:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4419      	add	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4403      	add	r3, r0
 800461c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004620:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d114      	bne.n	8004652 <PCD_EP_OutXfrComplete_int+0x16a>
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d108      	bne.n	8004652 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800464a:	461a      	mov	r2, r3
 800464c:	2101      	movs	r1, #1
 800464e:	f009 fda9 	bl	800e1a4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f011 ff67 	bl	801652c <HAL_PCD_DataOutStageCallback>
 800465e:	e046      	b.n	80046ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a26      	ldr	r2, [pc, #152]	; (80046fc <PCD_EP_OutXfrComplete_int+0x214>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d124      	bne.n	80046b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	461a      	mov	r2, r3
 8004680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004684:	6093      	str	r3, [r2, #8]
 8004686:	e032      	b.n	80046ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469e:	461a      	mov	r2, r3
 80046a0:	2320      	movs	r3, #32
 80046a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f011 ff3e 	bl	801652c <HAL_PCD_DataOutStageCallback>
 80046b0:	e01d      	b.n	80046ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d114      	bne.n	80046e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d108      	bne.n	80046e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046da:	461a      	mov	r2, r3
 80046dc:	2100      	movs	r1, #0
 80046de:	f009 fd61 	bl	800e1a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f011 ff1f 	bl	801652c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	4f54300a 	.word	0x4f54300a
 80046fc:	4f54310a 	.word	0x4f54310a

08004700 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	333c      	adds	r3, #60	; 0x3c
 8004718:	3304      	adds	r3, #4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a15      	ldr	r2, [pc, #84]	; (8004788 <PCD_EP_OutSetupPacket_int+0x88>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d90e      	bls.n	8004754 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	461a      	mov	r2, r3
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f011 fed7 	bl	8016508 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <PCD_EP_OutSetupPacket_int+0x88>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d90c      	bls.n	800477c <PCD_EP_OutSetupPacket_int+0x7c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d108      	bne.n	800477c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004774:	461a      	mov	r2, r3
 8004776:	2101      	movs	r1, #1
 8004778:	f009 fd14 	bl	800e1a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	4f54300a 	.word	0x4f54300a

0800478c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	70fb      	strb	r3, [r7, #3]
 8004798:	4613      	mov	r3, r2
 800479a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d107      	bne.n	80047ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047aa:	883b      	ldrh	r3, [r7, #0]
 80047ac:	0419      	lsls	r1, r3, #16
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
 80047b8:	e028      	b.n	800480c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	4413      	add	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	73fb      	strb	r3, [r7, #15]
 80047cc:	e00d      	b.n	80047ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	3340      	adds	r3, #64	; 0x40
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	3301      	adds	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
 80047ea:	7bfa      	ldrb	r2, [r7, #15]
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d3ec      	bcc.n	80047ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047f4:	883b      	ldrh	r3, [r7, #0]
 80047f6:	0418      	lsls	r0, r3, #16
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6819      	ldr	r1, [r3, #0]
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	3b01      	subs	r3, #1
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	4302      	orrs	r2, r0
 8004804:	3340      	adds	r3, #64	; 0x40
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_PCDEx_ActivateLPM+0x44>)
 800486c:	4313      	orrs	r3, r2
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	10000003 	.word	0x10000003

08004884 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_PWREx_ConfigSupply+0x70>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d00a      	beq.n	80048c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048b0:	4b16      	ldr	r3, [pc, #88]	; (800490c <HAL_PWREx_ConfigSupply+0x70>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d001      	beq.n	80048c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e01f      	b.n	8004902 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e01d      	b.n	8004902 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048c6:	4b11      	ldr	r3, [pc, #68]	; (800490c <HAL_PWREx_ConfigSupply+0x70>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f023 0207 	bic.w	r2, r3, #7
 80048ce:	490f      	ldr	r1, [pc, #60]	; (800490c <HAL_PWREx_ConfigSupply+0x70>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048d6:	f7fc ffa1 	bl	800181c <HAL_GetTick>
 80048da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048dc:	e009      	b.n	80048f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048de:	f7fc ff9d 	bl	800181c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ec:	d901      	bls.n	80048f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e007      	b.n	8004902 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_PWREx_ConfigSupply+0x70>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fe:	d1ee      	bne.n	80048de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	58024800 	.word	0x58024800

08004910 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4a04      	ldr	r2, [pc, #16]	; (800492c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800491a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800491e:	60d3      	str	r3, [r2, #12]
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	58024800 	.word	0x58024800

08004930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08c      	sub	sp, #48	; 0x30
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e3c4      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 8087 	beq.w	8004a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004950:	4ba2      	ldr	r3, [pc, #648]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800495a:	4ba0      	ldr	r3, [pc, #640]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	2b10      	cmp	r3, #16
 8004964:	d007      	beq.n	8004976 <HAL_RCC_OscConfig+0x46>
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	2b18      	cmp	r3, #24
 800496a:	d110      	bne.n	800498e <HAL_RCC_OscConfig+0x5e>
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d10b      	bne.n	800498e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004976:	4b99      	ldr	r3, [pc, #612]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d06c      	beq.n	8004a5c <HAL_RCC_OscConfig+0x12c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d168      	bne.n	8004a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e39e      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004996:	d106      	bne.n	80049a6 <HAL_RCC_OscConfig+0x76>
 8004998:	4b90      	ldr	r3, [pc, #576]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a8f      	ldr	r2, [pc, #572]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 800499e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e02e      	b.n	8004a04 <HAL_RCC_OscConfig+0xd4>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x98>
 80049ae:	4b8b      	ldr	r3, [pc, #556]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a8a      	ldr	r2, [pc, #552]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b88      	ldr	r3, [pc, #544]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a87      	ldr	r2, [pc, #540]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e01d      	b.n	8004a04 <HAL_RCC_OscConfig+0xd4>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0xbc>
 80049d2:	4b82      	ldr	r3, [pc, #520]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a81      	ldr	r2, [pc, #516]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b7f      	ldr	r3, [pc, #508]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a7e      	ldr	r2, [pc, #504]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e00b      	b.n	8004a04 <HAL_RCC_OscConfig+0xd4>
 80049ec:	4b7b      	ldr	r3, [pc, #492]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a7a      	ldr	r2, [pc, #488]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	4b78      	ldr	r3, [pc, #480]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a77      	ldr	r2, [pc, #476]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d013      	beq.n	8004a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fc ff06 	bl	800181c <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fc ff02 	bl	800181c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e352      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a26:	4b6d      	ldr	r3, [pc, #436]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0xe4>
 8004a32:	e014      	b.n	8004a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fc fef2 	bl	800181c <HAL_GetTick>
 8004a38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a3c:	f7fc feee 	bl	800181c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b64      	cmp	r3, #100	; 0x64
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e33e      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a4e:	4b63      	ldr	r3, [pc, #396]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x10c>
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8092 	beq.w	8004b90 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a6c:	4b5b      	ldr	r3, [pc, #364]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a76:	4b59      	ldr	r3, [pc, #356]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <HAL_RCC_OscConfig+0x162>
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	2b18      	cmp	r3, #24
 8004a86:	d12d      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x1b4>
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d128      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a92:	4b52      	ldr	r3, [pc, #328]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <HAL_RCC_OscConfig+0x17a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e310      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aaa:	f7fc fee5 	bl	8001878 <HAL_GetREVID>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	f241 0303 	movw	r3, #4099	; 0x1003
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d80a      	bhi.n	8004ace <HAL_RCC_OscConfig+0x19e>
 8004ab8:	4b48      	ldr	r3, [pc, #288]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	031b      	lsls	r3, r3, #12
 8004ac6:	4945      	ldr	r1, [pc, #276]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004acc:	e060      	b.n	8004b90 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ace:	4b43      	ldr	r3, [pc, #268]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	061b      	lsls	r3, r3, #24
 8004adc:	493f      	ldr	r1, [pc, #252]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae2:	e055      	b.n	8004b90 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d038      	beq.n	8004b5e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004aec:	4b3b      	ldr	r3, [pc, #236]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 0219 	bic.w	r2, r3, #25
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4938      	ldr	r1, [pc, #224]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fc fe8d 	bl	800181c <HAL_GetTick>
 8004b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b06:	f7fc fe89 	bl	800181c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e2d9      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b18:	4b30      	ldr	r3, [pc, #192]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b24:	f7fc fea8 	bl	8001878 <HAL_GetREVID>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d80a      	bhi.n	8004b48 <HAL_RCC_OscConfig+0x218>
 8004b32:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	031b      	lsls	r3, r3, #12
 8004b40:	4926      	ldr	r1, [pc, #152]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	604b      	str	r3, [r1, #4]
 8004b46:	e023      	b.n	8004b90 <HAL_RCC_OscConfig+0x260>
 8004b48:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	4921      	ldr	r1, [pc, #132]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]
 8004b5c:	e018      	b.n	8004b90 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5e:	4b1f      	ldr	r3, [pc, #124]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1e      	ldr	r2, [pc, #120]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6a:	f7fc fe57 	bl	800181c <HAL_GetTick>
 8004b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b72:	f7fc fe53 	bl	800181c <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e2a3      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b84:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8091 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ba6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d007      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x294>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b18      	cmp	r3, #24
 8004bb8:	d12f      	bne.n	8004c1a <HAL_RCC_OscConfig+0x2ea>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d12a      	bne.n	8004c1a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_RCC_OscConfig+0x2b0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d003      	beq.n	8004be0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e277      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
 8004bdc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004be0:	f7fc fe4a 	bl	8001878 <HAL_GetREVID>
 8004be4:	4602      	mov	r2, r0
 8004be6:	f241 0303 	movw	r3, #4099	; 0x1003
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d80a      	bhi.n	8004c04 <HAL_RCC_OscConfig+0x2d4>
 8004bee:	4ba2      	ldr	r3, [pc, #648]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	069b      	lsls	r3, r3, #26
 8004bfc:	499e      	ldr	r1, [pc, #632]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c02:	e05d      	b.n	8004cc0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c04:	4b9c      	ldr	r3, [pc, #624]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	4999      	ldr	r1, [pc, #612]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c18:	e052      	b.n	8004cc0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d035      	beq.n	8004c8e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c22:	4b95      	ldr	r3, [pc, #596]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a94      	ldr	r2, [pc, #592]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fc fdf5 	bl	800181c <HAL_GetTick>
 8004c32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c36:	f7fc fdf1 	bl	800181c <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e241      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c48:	4b8b      	ldr	r3, [pc, #556]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c54:	f7fc fe10 	bl	8001878 <HAL_GetREVID>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d80a      	bhi.n	8004c78 <HAL_RCC_OscConfig+0x348>
 8004c62:	4b85      	ldr	r3, [pc, #532]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	069b      	lsls	r3, r3, #26
 8004c70:	4981      	ldr	r1, [pc, #516]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	604b      	str	r3, [r1, #4]
 8004c76:	e023      	b.n	8004cc0 <HAL_RCC_OscConfig+0x390>
 8004c78:	4b7f      	ldr	r3, [pc, #508]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	497c      	ldr	r1, [pc, #496]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60cb      	str	r3, [r1, #12]
 8004c8c:	e018      	b.n	8004cc0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c8e:	4b7a      	ldr	r3, [pc, #488]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a79      	ldr	r2, [pc, #484]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fc fdbf 	bl	800181c <HAL_GetTick>
 8004c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ca2:	f7fc fdbb 	bl	800181c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e20b      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cb4:	4b70      	ldr	r3, [pc, #448]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d036      	beq.n	8004d3a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d019      	beq.n	8004d08 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd4:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd8:	4a67      	ldr	r2, [pc, #412]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7fc fd9c 	bl	800181c <HAL_GetTick>
 8004ce4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce8:	f7fc fd98 	bl	800181c <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e1e8      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cfa:	4b5f      	ldr	r3, [pc, #380]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x3b8>
 8004d06:	e018      	b.n	8004d3a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d08:	4b5b      	ldr	r3, [pc, #364]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0c:	4a5a      	ldr	r2, [pc, #360]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fc fd82 	bl	800181c <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fc fd7e 	bl	800181c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e1ce      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d2e:	4b52      	ldr	r3, [pc, #328]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d036      	beq.n	8004db4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d019      	beq.n	8004d82 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d4e:	4b4a      	ldr	r3, [pc, #296]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a49      	ldr	r2, [pc, #292]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004d54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d5a:	f7fc fd5f 	bl	800181c <HAL_GetTick>
 8004d5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d62:	f7fc fd5b 	bl	800181c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e1ab      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d74:	4b40      	ldr	r3, [pc, #256]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x432>
 8004d80:	e018      	b.n	8004db4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d82:	4b3d      	ldr	r3, [pc, #244]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a3c      	ldr	r2, [pc, #240]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d8e:	f7fc fd45 	bl	800181c <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d96:	f7fc fd41 	bl	800181c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e191      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004da8:	4b33      	ldr	r3, [pc, #204]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f0      	bne.n	8004d96 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8086 	beq.w	8004ece <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dc2:	4b2e      	ldr	r3, [pc, #184]	; (8004e7c <HAL_RCC_OscConfig+0x54c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2d      	ldr	r2, [pc, #180]	; (8004e7c <HAL_RCC_OscConfig+0x54c>)
 8004dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dce:	f7fc fd25 	bl	800181c <HAL_GetTick>
 8004dd2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dd6:	f7fc fd21 	bl	800181c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b64      	cmp	r3, #100	; 0x64
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e171      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004de8:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_RCC_OscConfig+0x54c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4da>
 8004dfc:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a1d      	ldr	r2, [pc, #116]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	e02d      	b.n	8004e66 <HAL_RCC_OscConfig+0x536>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x4fc>
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1e:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e24:	f023 0304 	bic.w	r3, r3, #4
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2a:	e01c      	b.n	8004e66 <HAL_RCC_OscConfig+0x536>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d10c      	bne.n	8004e4e <HAL_RCC_OscConfig+0x51e>
 8004e34:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	4a0f      	ldr	r2, [pc, #60]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e3a:	f043 0304 	orr.w	r3, r3, #4
 8004e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	4a0c      	ldr	r2, [pc, #48]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4c:	e00b      	b.n	8004e66 <HAL_RCC_OscConfig+0x536>
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	4a06      	ldr	r2, [pc, #24]	; (8004e78 <HAL_RCC_OscConfig+0x548>)
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01a      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6e:	f7fc fcd5 	bl	800181c <HAL_GetTick>
 8004e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e74:	e00f      	b.n	8004e96 <HAL_RCC_OscConfig+0x566>
 8004e76:	bf00      	nop
 8004e78:	58024400 	.word	0x58024400
 8004e7c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e80:	f7fc fccc 	bl	800181c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e11a      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e96:	4b8f      	ldr	r3, [pc, #572]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0ee      	beq.n	8004e80 <HAL_RCC_OscConfig+0x550>
 8004ea2:	e014      	b.n	8004ece <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea4:	f7fc fcba 	bl	800181c <HAL_GetTick>
 8004ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eac:	f7fc fcb6 	bl	800181c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e104      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ec2:	4b84      	ldr	r3, [pc, #528]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1ee      	bne.n	8004eac <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80f9 	beq.w	80050ca <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ed8:	4b7e      	ldr	r3, [pc, #504]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ee0:	2b18      	cmp	r3, #24
 8004ee2:	f000 80b4 	beq.w	800504e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	f040 8095 	bne.w	800501a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef0:	4b78      	ldr	r3, [pc, #480]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a77      	ldr	r2, [pc, #476]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fc fc8e 	bl	800181c <HAL_GetTick>
 8004f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fc fc8a 	bl	800181c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e0da      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f16:	4b6f      	ldr	r3, [pc, #444]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f22:	4b6c      	ldr	r3, [pc, #432]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f26:	4b6c      	ldr	r3, [pc, #432]	; (80050d8 <HAL_RCC_OscConfig+0x7a8>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f32:	0112      	lsls	r2, r2, #4
 8004f34:	430a      	orrs	r2, r1
 8004f36:	4967      	ldr	r1, [pc, #412]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	628b      	str	r3, [r1, #40]	; 0x28
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	3b01      	subs	r3, #1
 8004f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	025b      	lsls	r3, r3, #9
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	3b01      	subs	r3, #1
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	3b01      	subs	r3, #1
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f6c:	4959      	ldr	r1, [pc, #356]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f72:	4b58      	ldr	r3, [pc, #352]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	4a57      	ldr	r2, [pc, #348]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f7e:	4b55      	ldr	r3, [pc, #340]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f82:	4b56      	ldr	r3, [pc, #344]	; (80050dc <HAL_RCC_OscConfig+0x7ac>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f8a:	00d2      	lsls	r2, r2, #3
 8004f8c:	4951      	ldr	r1, [pc, #324]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f92:	4b50      	ldr	r3, [pc, #320]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	f023 020c 	bic.w	r2, r3, #12
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	494d      	ldr	r1, [pc, #308]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fa4:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	f023 0202 	bic.w	r2, r3, #2
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb0:	4948      	ldr	r1, [pc, #288]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fb6:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	4a46      	ldr	r2, [pc, #280]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fc2:	4b44      	ldr	r3, [pc, #272]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	4a43      	ldr	r2, [pc, #268]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fce:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	4a40      	ldr	r2, [pc, #256]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004fda:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	4a3d      	ldr	r2, [pc, #244]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fe6:	4b3b      	ldr	r3, [pc, #236]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a3a      	ldr	r2, [pc, #232]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8004fec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fc fc13 	bl	800181c <HAL_GetTick>
 8004ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fc fc0f 	bl	800181c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e05f      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800500c:	4b31      	ldr	r3, [pc, #196]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x6ca>
 8005018:	e057      	b.n	80050ca <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8005020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005026:	f7fc fbf9 	bl	800181c <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800502e:	f7fc fbf5 	bl	800181c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e045      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005040:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <HAL_RCC_OscConfig+0x6fe>
 800504c:	e03d      	b.n	80050ca <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800504e:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005054:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <HAL_RCC_OscConfig+0x7a4>)
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b01      	cmp	r3, #1
 8005060:	d031      	beq.n	80050c6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f003 0203 	and.w	r2, r3, #3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d12a      	bne.n	80050c6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d122      	bne.n	80050c6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d11a      	bne.n	80050c6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	0a5b      	lsrs	r3, r3, #9
 8005094:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800509e:	429a      	cmp	r2, r3
 80050a0:	d111      	bne.n	80050c6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d108      	bne.n	80050c6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	0e1b      	lsrs	r3, r3, #24
 80050b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d001      	beq.n	80050ca <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3730      	adds	r7, #48	; 0x30
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	58024400 	.word	0x58024400
 80050d8:	fffffc0c 	.word	0xfffffc0c
 80050dc:	ffff0007 	.word	0xffff0007

080050e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e19c      	b.n	800542e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050f4:	4b8a      	ldr	r3, [pc, #552]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d910      	bls.n	8005124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b87      	ldr	r3, [pc, #540]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 020f 	bic.w	r2, r3, #15
 800510a:	4985      	ldr	r1, [pc, #532]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005112:	4b83      	ldr	r3, [pc, #524]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e184      	b.n	800542e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d010      	beq.n	8005152 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	4b7b      	ldr	r3, [pc, #492]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800513c:	429a      	cmp	r2, r3
 800513e:	d908      	bls.n	8005152 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005140:	4b78      	ldr	r3, [pc, #480]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	4975      	ldr	r1, [pc, #468]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 800514e:	4313      	orrs	r3, r2
 8005150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d010      	beq.n	8005180 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	4b70      	ldr	r3, [pc, #448]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800516a:	429a      	cmp	r2, r3
 800516c:	d908      	bls.n	8005180 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800516e:	4b6d      	ldr	r3, [pc, #436]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	496a      	ldr	r1, [pc, #424]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 800517c:	4313      	orrs	r3, r2
 800517e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d010      	beq.n	80051ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	4b64      	ldr	r3, [pc, #400]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005198:	429a      	cmp	r2, r3
 800519a:	d908      	bls.n	80051ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800519c:	4b61      	ldr	r3, [pc, #388]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	495e      	ldr	r1, [pc, #376]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d010      	beq.n	80051dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	4b59      	ldr	r3, [pc, #356]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d908      	bls.n	80051dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80051ca:	4b56      	ldr	r3, [pc, #344]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	4953      	ldr	r1, [pc, #332]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d010      	beq.n	800520a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	4b4d      	ldr	r3, [pc, #308]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d908      	bls.n	800520a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f8:	4b4a      	ldr	r3, [pc, #296]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f023 020f 	bic.w	r2, r3, #15
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4947      	ldr	r1, [pc, #284]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005206:	4313      	orrs	r3, r2
 8005208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d055      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005216:	4b43      	ldr	r3, [pc, #268]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	4940      	ldr	r1, [pc, #256]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005224:	4313      	orrs	r3, r2
 8005226:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d107      	bne.n	8005240 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005230:	4b3c      	ldr	r3, [pc, #240]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d121      	bne.n	8005280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0f6      	b.n	800542e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d107      	bne.n	8005258 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005248:	4b36      	ldr	r3, [pc, #216]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d115      	bne.n	8005280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0ea      	b.n	800542e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005260:	4b30      	ldr	r3, [pc, #192]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d109      	bne.n	8005280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0de      	b.n	800542e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005270:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0d6      	b.n	800542e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005280:	4b28      	ldr	r3, [pc, #160]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f023 0207 	bic.w	r2, r3, #7
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4925      	ldr	r1, [pc, #148]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 800528e:	4313      	orrs	r3, r2
 8005290:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005292:	f7fc fac3 	bl	800181c <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005298:	e00a      	b.n	80052b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800529a:	f7fc fabf 	bl	800181c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e0be      	b.n	800542e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b0:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	429a      	cmp	r2, r3
 80052c0:	d1eb      	bne.n	800529a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d010      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	4b14      	ldr	r3, [pc, #80]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	429a      	cmp	r2, r3
 80052dc:	d208      	bcs.n	80052f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052de:	4b11      	ldr	r3, [pc, #68]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f023 020f 	bic.w	r2, r3, #15
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	490e      	ldr	r1, [pc, #56]	; (8005324 <HAL_RCC_ClockConfig+0x244>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d214      	bcs.n	8005328 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b08      	ldr	r3, [pc, #32]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f023 020f 	bic.w	r2, r3, #15
 8005306:	4906      	ldr	r1, [pc, #24]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	4313      	orrs	r3, r2
 800530c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800530e:	4b04      	ldr	r3, [pc, #16]	; (8005320 <HAL_RCC_ClockConfig+0x240>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d005      	beq.n	8005328 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e086      	b.n	800542e <HAL_RCC_ClockConfig+0x34e>
 8005320:	52002000 	.word	0x52002000
 8005324:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d010      	beq.n	8005356 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	4b3f      	ldr	r3, [pc, #252]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005340:	429a      	cmp	r2, r3
 8005342:	d208      	bcs.n	8005356 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005344:	4b3c      	ldr	r3, [pc, #240]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	4939      	ldr	r1, [pc, #228]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 8005352:	4313      	orrs	r3, r2
 8005354:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b00      	cmp	r3, #0
 8005360:	d010      	beq.n	8005384 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	4b34      	ldr	r3, [pc, #208]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800536e:	429a      	cmp	r2, r3
 8005370:	d208      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005372:	4b31      	ldr	r3, [pc, #196]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	492e      	ldr	r1, [pc, #184]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 8005380:	4313      	orrs	r3, r2
 8005382:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b00      	cmp	r3, #0
 800538e:	d010      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699a      	ldr	r2, [r3, #24]
 8005394:	4b28      	ldr	r3, [pc, #160]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800539c:	429a      	cmp	r2, r3
 800539e:	d208      	bcs.n	80053b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053a0:	4b25      	ldr	r3, [pc, #148]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	4922      	ldr	r1, [pc, #136]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d010      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d208      	bcs.n	80053e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80053ce:	4b1a      	ldr	r3, [pc, #104]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	4917      	ldr	r1, [pc, #92]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053e0:	f000 f834 	bl	800544c <HAL_RCC_GetSysClockFreq>
 80053e4:	4601      	mov	r1, r0
 80053e6:	4b14      	ldr	r3, [pc, #80]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	4a12      	ldr	r2, [pc, #72]	; (800543c <HAL_RCC_ClockConfig+0x35c>)
 80053f2:	5cd3      	ldrb	r3, [r2, r3]
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	fa21 f303 	lsr.w	r3, r1, r3
 80053fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053fe:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <HAL_RCC_ClockConfig+0x358>)
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	4a0d      	ldr	r2, [pc, #52]	; (800543c <HAL_RCC_ClockConfig+0x35c>)
 8005408:	5cd3      	ldrb	r3, [r2, r3]
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
 8005414:	4a0a      	ldr	r2, [pc, #40]	; (8005440 <HAL_RCC_ClockConfig+0x360>)
 8005416:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005418:	4a0a      	ldr	r2, [pc, #40]	; (8005444 <HAL_RCC_ClockConfig+0x364>)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <HAL_RCC_ClockConfig+0x368>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fc f9b0 	bl	8001788 <HAL_InitTick>
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	58024400 	.word	0x58024400
 800543c:	08016e1c 	.word	0x08016e1c
 8005440:	24000010 	.word	0x24000010
 8005444:	2400000c 	.word	0x2400000c
 8005448:	24000014 	.word	0x24000014

0800544c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	; 0x24
 8005450:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005452:	4baf      	ldr	r3, [pc, #700]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800545a:	2b18      	cmp	r3, #24
 800545c:	f200 814e 	bhi.w	80056fc <HAL_RCC_GetSysClockFreq+0x2b0>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	080054cd 	.word	0x080054cd
 800546c:	080056fd 	.word	0x080056fd
 8005470:	080056fd 	.word	0x080056fd
 8005474:	080056fd 	.word	0x080056fd
 8005478:	080056fd 	.word	0x080056fd
 800547c:	080056fd 	.word	0x080056fd
 8005480:	080056fd 	.word	0x080056fd
 8005484:	080056fd 	.word	0x080056fd
 8005488:	080054f3 	.word	0x080054f3
 800548c:	080056fd 	.word	0x080056fd
 8005490:	080056fd 	.word	0x080056fd
 8005494:	080056fd 	.word	0x080056fd
 8005498:	080056fd 	.word	0x080056fd
 800549c:	080056fd 	.word	0x080056fd
 80054a0:	080056fd 	.word	0x080056fd
 80054a4:	080056fd 	.word	0x080056fd
 80054a8:	080054f9 	.word	0x080054f9
 80054ac:	080056fd 	.word	0x080056fd
 80054b0:	080056fd 	.word	0x080056fd
 80054b4:	080056fd 	.word	0x080056fd
 80054b8:	080056fd 	.word	0x080056fd
 80054bc:	080056fd 	.word	0x080056fd
 80054c0:	080056fd 	.word	0x080056fd
 80054c4:	080056fd 	.word	0x080056fd
 80054c8:	080054ff 	.word	0x080054ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054cc:	4b90      	ldr	r3, [pc, #576]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054d8:	4b8d      	ldr	r3, [pc, #564]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	08db      	lsrs	r3, r3, #3
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	4a8c      	ldr	r2, [pc, #560]	; (8005714 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
 80054e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80054ea:	e10a      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054ec:	4b89      	ldr	r3, [pc, #548]	; (8005714 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80054ee:	61bb      	str	r3, [r7, #24]
    break;
 80054f0:	e107      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80054f2:	4b89      	ldr	r3, [pc, #548]	; (8005718 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80054f4:	61bb      	str	r3, [r7, #24]
    break;
 80054f6:	e104      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80054f8:	4b88      	ldr	r3, [pc, #544]	; (800571c <HAL_RCC_GetSysClockFreq+0x2d0>)
 80054fa:	61bb      	str	r3, [r7, #24]
    break;
 80054fc:	e101      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054fe:	4b84      	ldr	r3, [pc, #528]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005508:	4b81      	ldr	r3, [pc, #516]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005512:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005514:	4b7e      	ldr	r3, [pc, #504]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800551e:	4b7c      	ldr	r3, [pc, #496]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	08db      	lsrs	r3, r3, #3
 8005524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	fb02 f303 	mul.w	r3, r2, r3
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005536:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 80da 	beq.w	80056f6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d05a      	beq.n	80055fe <HAL_RCC_GetSysClockFreq+0x1b2>
 8005548:	2b01      	cmp	r3, #1
 800554a:	d302      	bcc.n	8005552 <HAL_RCC_GetSysClockFreq+0x106>
 800554c:	2b02      	cmp	r3, #2
 800554e:	d078      	beq.n	8005642 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005550:	e099      	b.n	8005686 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005552:	4b6f      	ldr	r3, [pc, #444]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d02d      	beq.n	80055ba <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800555e:	4b6c      	ldr	r3, [pc, #432]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	08db      	lsrs	r3, r3, #3
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	4a6a      	ldr	r2, [pc, #424]	; (8005714 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800556a:	fa22 f303 	lsr.w	r3, r2, r3
 800556e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	ee07 3a90 	vmov	s15, r3
 8005580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005588:	4b61      	ldr	r3, [pc, #388]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005590:	ee07 3a90 	vmov	s15, r3
 8005594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005598:	ed97 6a02 	vldr	s12, [r7, #8]
 800559c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2d4>
 80055a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80055b8:	e087      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005724 <HAL_RCC_GetSysClockFreq+0x2d8>
 80055c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055cc:	4b50      	ldr	r3, [pc, #320]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d4:	ee07 3a90 	vmov	s15, r3
 80055d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80055e0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2d4>
 80055e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055fc:	e065      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005608:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005728 <HAL_RCC_GetSysClockFreq+0x2dc>
 800560c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005610:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005618:	ee07 3a90 	vmov	s15, r3
 800561c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005620:	ed97 6a02 	vldr	s12, [r7, #8]
 8005624:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005640:	e043      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800572c <HAL_RCC_GetSysClockFreq+0x2e0>
 8005650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005654:	4b2e      	ldr	r3, [pc, #184]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005664:	ed97 6a02 	vldr	s12, [r7, #8]
 8005668:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2d4>
 800566c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005680:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005684:	e021      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	ee07 3a90 	vmov	s15, r3
 800568c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005690:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005728 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005698:	4b1d      	ldr	r3, [pc, #116]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ac:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2d4>
 80056b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056c8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80056ca:	4b11      	ldr	r3, [pc, #68]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	0a5b      	lsrs	r3, r3, #9
 80056d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d4:	3301      	adds	r3, #1
 80056d6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80056e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056ee:	ee17 3a90 	vmov	r3, s15
 80056f2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80056f4:	e005      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
    break;
 80056fa:	e002      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80056fe:	61bb      	str	r3, [r7, #24]
    break;
 8005700:	bf00      	nop
  }

  return sysclockfreq;
 8005702:	69bb      	ldr	r3, [r7, #24]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3724      	adds	r7, #36	; 0x24
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	58024400 	.word	0x58024400
 8005714:	03d09000 	.word	0x03d09000
 8005718:	003d0900 	.word	0x003d0900
 800571c:	007a1200 	.word	0x007a1200
 8005720:	46000000 	.word	0x46000000
 8005724:	4c742400 	.word	0x4c742400
 8005728:	4a742400 	.word	0x4a742400
 800572c:	4af42400 	.word	0x4af42400

08005730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005736:	f7ff fe89 	bl	800544c <HAL_RCC_GetSysClockFreq>
 800573a:	4601      	mov	r1, r0
 800573c:	4b10      	ldr	r3, [pc, #64]	; (8005780 <HAL_RCC_GetHCLKFreq+0x50>)
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	4a0f      	ldr	r2, [pc, #60]	; (8005784 <HAL_RCC_GetHCLKFreq+0x54>)
 8005748:	5cd3      	ldrb	r3, [r2, r3]
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	fa21 f303 	lsr.w	r3, r1, r3
 8005752:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <HAL_RCC_GetHCLKFreq+0x50>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	4a09      	ldr	r2, [pc, #36]	; (8005784 <HAL_RCC_GetHCLKFreq+0x54>)
 800575e:	5cd3      	ldrb	r3, [r2, r3]
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	fa22 f303 	lsr.w	r3, r2, r3
 800576a:	4a07      	ldr	r2, [pc, #28]	; (8005788 <HAL_RCC_GetHCLKFreq+0x58>)
 800576c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800576e:	4a07      	ldr	r2, [pc, #28]	; (800578c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <HAL_RCC_GetHCLKFreq+0x58>)
 8005776:	681b      	ldr	r3, [r3, #0]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	58024400 	.word	0x58024400
 8005784:	08016e1c 	.word	0x08016e1c
 8005788:	24000010 	.word	0x24000010
 800578c:	2400000c 	.word	0x2400000c

08005790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005794:	f7ff ffcc 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8005798:	4601      	mov	r1, r0
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	4a04      	ldr	r2, [pc, #16]	; (80057b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057a6:	5cd3      	ldrb	r3, [r2, r3]
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	58024400 	.word	0x58024400
 80057b8:	08016e1c 	.word	0x08016e1c

080057bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80057c0:	f7ff ffb6 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 80057c4:	4601      	mov	r1, r0
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	0a1b      	lsrs	r3, r3, #8
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057d2:	5cd3      	ldrb	r3, [r2, r3]
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	58024400 	.word	0x58024400
 80057e4:	08016e1c 	.word	0x08016e1c

080057e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057f4:	2300      	movs	r3, #0
 80057f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d03d      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800580c:	d013      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800580e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005812:	d802      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005818:	e01f      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800581a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800581e:	d013      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005820:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005824:	d01c      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005826:	e018      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005828:	4baf      	ldr	r3, [pc, #700]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4aae      	ldr	r2, [pc, #696]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800582e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005832:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005834:	e015      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3304      	adds	r3, #4
 800583a:	2102      	movs	r1, #2
 800583c:	4618      	mov	r0, r3
 800583e:	f001 fd23 	bl	8007288 <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005846:	e00c      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3324      	adds	r3, #36	; 0x24
 800584c:	2102      	movs	r1, #2
 800584e:	4618      	mov	r0, r3
 8005850:	f001 fdcc 	bl	80073ec <RCCEx_PLL3_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	75fb      	strb	r3, [r7, #23]
      break;
 800585e:	e000      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005868:	4b9f      	ldr	r3, [pc, #636]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800586a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005874:	499c      	ldr	r1, [pc, #624]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005876:	4313      	orrs	r3, r2
 8005878:	650b      	str	r3, [r1, #80]	; 0x50
 800587a:	e001      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d03d      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	2b04      	cmp	r3, #4
 8005892:	d826      	bhi.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005894:	a201      	add	r2, pc, #4	; (adr r2, 800589c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	080058b1 	.word	0x080058b1
 80058a0:	080058bf 	.word	0x080058bf
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	080058e9 	.word	0x080058e9
 80058ac:	080058e9 	.word	0x080058e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b0:	4b8d      	ldr	r3, [pc, #564]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	4a8c      	ldr	r2, [pc, #560]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058bc:	e015      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3304      	adds	r3, #4
 80058c2:	2100      	movs	r1, #0
 80058c4:	4618      	mov	r0, r3
 80058c6:	f001 fcdf 	bl	8007288 <RCCEx_PLL2_Config>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058ce:	e00c      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3324      	adds	r3, #36	; 0x24
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 fd88 	bl	80073ec <RCCEx_PLL3_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058e0:	e003      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	75fb      	strb	r3, [r7, #23]
      break;
 80058e6:	e000      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80058e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058f0:	4b7d      	ldr	r3, [pc, #500]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	f023 0207 	bic.w	r2, r3, #7
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fc:	497a      	ldr	r1, [pc, #488]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	650b      	str	r3, [r1, #80]	; 0x50
 8005902:	e001      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
 8005906:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005910:	2b00      	cmp	r3, #0
 8005912:	d03e      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005918:	2b80      	cmp	r3, #128	; 0x80
 800591a:	d01c      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d804      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	d00d      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005928:	e01e      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800592a:	2bc0      	cmp	r3, #192	; 0xc0
 800592c:	d01f      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800592e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005932:	d01e      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005934:	e018      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005936:	4b6c      	ldr	r3, [pc, #432]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	4a6b      	ldr	r2, [pc, #428]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800593c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005942:	e017      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	2100      	movs	r1, #0
 800594a:	4618      	mov	r0, r3
 800594c:	f001 fc9c 	bl	8007288 <RCCEx_PLL2_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005954:	e00e      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3324      	adds	r3, #36	; 0x24
 800595a:	2100      	movs	r1, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f001 fd45 	bl	80073ec <RCCEx_PLL3_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005966:	e005      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	e002      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d109      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800597a:	4b5b      	ldr	r3, [pc, #364]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800597c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005986:	4958      	ldr	r1, [pc, #352]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005988:	4313      	orrs	r3, r2
 800598a:	650b      	str	r3, [r1, #80]	; 0x50
 800598c:	e001      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800599a:	2b00      	cmp	r3, #0
 800599c:	d044      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a8:	d01f      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 80059aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ae:	d805      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b8:	d00e      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80059ba:	e01f      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x214>
 80059bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059c0:	d01f      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80059c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059c6:	d01e      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059c8:	e018      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ca:	4b47      	ldr	r3, [pc, #284]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ce:	4a46      	ldr	r2, [pc, #280]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059d6:	e017      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 fc52 	bl	8007288 <RCCEx_PLL2_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059e8:	e00e      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3324      	adds	r3, #36	; 0x24
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 fcfb 	bl	80073ec <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059fa:	e005      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005a00:	e002      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a0e:	4b36      	ldr	r3, [pc, #216]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a1c:	4932      	ldr	r1, [pc, #200]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	658b      	str	r3, [r1, #88]	; 0x58
 8005a22:	e001      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d044      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3e:	d01f      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a44:	d805      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005a4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a4e:	d00e      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a50:	e01f      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005a52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a56:	d01f      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a5c:	d01e      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005a5e:	e018      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	4a20      	ldr	r2, [pc, #128]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a6c:	e017      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 fc07 	bl	8007288 <RCCEx_PLL2_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a7e:	e00e      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3324      	adds	r3, #36	; 0x24
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 fcb0 	bl	80073ec <RCCEx_PLL3_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a90:	e005      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
      break;
 8005a96:	e002      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005a98:	bf00      	nop
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005aa4:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ab2:	490d      	ldr	r1, [pc, #52]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	658b      	str	r3, [r1, #88]	; 0x58
 8005ab8:	e001      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d035      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ace:	2b10      	cmp	r3, #16
 8005ad0:	d00c      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d802      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01b      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005ada:	e017      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d00c      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005ae0:	2b30      	cmp	r3, #48	; 0x30
 8005ae2:	d018      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005ae4:	e012      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005ae6:	bf00      	nop
 8005ae8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aec:	4baf      	ldr	r3, [pc, #700]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4aae      	ldr	r2, [pc, #696]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005af8:	e00e      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3304      	adds	r3, #4
 8005afe:	2102      	movs	r1, #2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fbc1 	bl	8007288 <RCCEx_PLL2_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b0a:	e005      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b10:	e002      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b1e:	4ba3      	ldr	r3, [pc, #652]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2a:	49a0      	ldr	r1, [pc, #640]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b30:	e001      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d042      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b4a:	d01f      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b50:	d805      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5a:	d00e      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005b5c:	e01f      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005b5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b62:	d01f      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b68:	d01e      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005b6a:	e018      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6c:	4b8f      	ldr	r3, [pc, #572]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	4a8e      	ldr	r2, [pc, #568]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b78:	e017      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 fb81 	bl	8007288 <RCCEx_PLL2_Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b8a:	e00e      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3324      	adds	r3, #36	; 0x24
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 fc2a 	bl	80073ec <RCCEx_PLL3_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b9c:	e005      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba2:	e002      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005ba4:	bf00      	nop
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bb0:	4b7e      	ldr	r3, [pc, #504]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbc:	497b      	ldr	r1, [pc, #492]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	650b      	str	r3, [r1, #80]	; 0x50
 8005bc2:	e001      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d042      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bdc:	d01b      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be2:	d805      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d022      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bec:	d00a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005bee:	e01b      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005bf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bf4:	d01d      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005bf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bfa:	d01c      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005bfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c00:	d01b      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005c02:	e011      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 fb3c 	bl	8007288 <RCCEx_PLL2_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c14:	e012      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3324      	adds	r3, #36	; 0x24
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 fbe5 	bl	80073ec <RCCEx_PLL3_Config>
 8005c22:	4603      	mov	r3, r0
 8005c24:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c26:	e009      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c2c:	e006      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c2e:	bf00      	nop
 8005c30:	e004      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c32:	bf00      	nop
 8005c34:	e002      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c36:	bf00      	nop
 8005c38:	e000      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c42:	4b5a      	ldr	r3, [pc, #360]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c46:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4e:	4957      	ldr	r1, [pc, #348]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	650b      	str	r3, [r1, #80]	; 0x50
 8005c54:	e001      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d044      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c70:	d01b      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c76:	d805      	bhi.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d022      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c80:	d00a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005c82:	e01b      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c88:	d01d      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c8e:	d01c      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005c90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c94:	d01b      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005c96:	e011      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 faf2 	bl	8007288 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005ca8:	e012      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3324      	adds	r3, #36	; 0x24
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 fb9b 	bl	80073ec <RCCEx_PLL3_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cba:	e009      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc0:	e006      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cc2:	bf00      	nop
 8005cc4:	e004      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cc6:	bf00      	nop
 8005cc8:	e002      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cca:	bf00      	nop
 8005ccc:	e000      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005cd6:	4b35      	ldr	r3, [pc, #212]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ce4:	4931      	ldr	r1, [pc, #196]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	658b      	str	r3, [r1, #88]	; 0x58
 8005cea:	e001      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d02d      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d04:	d005      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d0a:	d009      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d013      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005d10:	e00f      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d12:	4b26      	ldr	r3, [pc, #152]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	4a25      	ldr	r2, [pc, #148]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d1e:	e00c      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3304      	adds	r3, #4
 8005d24:	2101      	movs	r1, #1
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 faae 	bl	8007288 <RCCEx_PLL2_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d30:	e003      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	75fb      	strb	r3, [r7, #23]
      break;
 8005d36:	e000      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d40:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4c:	4917      	ldr	r1, [pc, #92]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	650b      	str	r3, [r1, #80]	; 0x50
 8005d52:	e001      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d035      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d81b      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005d6c:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005db1 	.word	0x08005db1
 8005d78:	08005d85 	.word	0x08005d85
 8005d7c:	08005d93 	.word	0x08005d93
 8005d80:	08005db1 	.word	0x08005db1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d84:	4b09      	ldr	r3, [pc, #36]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	4a08      	ldr	r2, [pc, #32]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d90:	e00f      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3304      	adds	r3, #4
 8005d96:	2102      	movs	r1, #2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 fa75 	bl	8007288 <RCCEx_PLL2_Config>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005da2:	e006      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	75fb      	strb	r3, [r7, #23]
      break;
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005daa:	bf00      	nop
 8005dac:	58024400 	.word	0x58024400
      break;
 8005db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005db8:	4bba      	ldr	r3, [pc, #744]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbc:	f023 0203 	bic.w	r2, r3, #3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc4:	49b7      	ldr	r1, [pc, #732]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005dca:	e001      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8086 	beq.w	8005eea <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dde:	4bb2      	ldr	r3, [pc, #712]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4ab1      	ldr	r2, [pc, #708]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dea:	f7fb fd17 	bl	800181c <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df0:	e009      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df2:	f7fb fd13 	bl	800181c <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b64      	cmp	r3, #100	; 0x64
 8005dfe:	d902      	bls.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	75fb      	strb	r3, [r7, #23]
        break;
 8005e04:	e005      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e06:	4ba8      	ldr	r3, [pc, #672]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0ef      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d166      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e18:	4ba2      	ldr	r3, [pc, #648]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e22:	4053      	eors	r3, r2
 8005e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d013      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e2c:	4b9d      	ldr	r3, [pc, #628]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e34:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e36:	4b9b      	ldr	r3, [pc, #620]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3a:	4a9a      	ldr	r2, [pc, #616]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e40:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e42:	4b98      	ldr	r3, [pc, #608]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	4a97      	ldr	r2, [pc, #604]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e4e:	4a95      	ldr	r2, [pc, #596]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5e:	d115      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fb fcdc 	bl	800181c <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e66:	e00b      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e68:	f7fb fcd8 	bl	800181c <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d902      	bls.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	75fb      	strb	r3, [r7, #23]
            break;
 8005e7e:	e005      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e80:	4b88      	ldr	r3, [pc, #544]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0ed      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d126      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ea0:	d10d      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005ea2:	4b80      	ldr	r3, [pc, #512]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005eb0:	0919      	lsrs	r1, r3, #4
 8005eb2:	4b7e      	ldr	r3, [pc, #504]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005eb4:	400b      	ands	r3, r1
 8005eb6:	497b      	ldr	r1, [pc, #492]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	610b      	str	r3, [r1, #16]
 8005ebc:	e005      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005ebe:	4b79      	ldr	r3, [pc, #484]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	4a78      	ldr	r2, [pc, #480]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ec4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ec8:	6113      	str	r3, [r2, #16]
 8005eca:	4b76      	ldr	r3, [pc, #472]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ecc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed8:	4972      	ldr	r1, [pc, #456]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	670b      	str	r3, [r1, #112]	; 0x70
 8005ede:	e004      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	75bb      	strb	r3, [r7, #22]
 8005ee4:	e001      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d07d      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005efa:	2b28      	cmp	r3, #40	; 0x28
 8005efc:	d866      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005efe:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005fd3 	.word	0x08005fd3
 8005f08:	08005fcd 	.word	0x08005fcd
 8005f0c:	08005fcd 	.word	0x08005fcd
 8005f10:	08005fcd 	.word	0x08005fcd
 8005f14:	08005fcd 	.word	0x08005fcd
 8005f18:	08005fcd 	.word	0x08005fcd
 8005f1c:	08005fcd 	.word	0x08005fcd
 8005f20:	08005fcd 	.word	0x08005fcd
 8005f24:	08005fa9 	.word	0x08005fa9
 8005f28:	08005fcd 	.word	0x08005fcd
 8005f2c:	08005fcd 	.word	0x08005fcd
 8005f30:	08005fcd 	.word	0x08005fcd
 8005f34:	08005fcd 	.word	0x08005fcd
 8005f38:	08005fcd 	.word	0x08005fcd
 8005f3c:	08005fcd 	.word	0x08005fcd
 8005f40:	08005fcd 	.word	0x08005fcd
 8005f44:	08005fbb 	.word	0x08005fbb
 8005f48:	08005fcd 	.word	0x08005fcd
 8005f4c:	08005fcd 	.word	0x08005fcd
 8005f50:	08005fcd 	.word	0x08005fcd
 8005f54:	08005fcd 	.word	0x08005fcd
 8005f58:	08005fcd 	.word	0x08005fcd
 8005f5c:	08005fcd 	.word	0x08005fcd
 8005f60:	08005fcd 	.word	0x08005fcd
 8005f64:	08005fd3 	.word	0x08005fd3
 8005f68:	08005fcd 	.word	0x08005fcd
 8005f6c:	08005fcd 	.word	0x08005fcd
 8005f70:	08005fcd 	.word	0x08005fcd
 8005f74:	08005fcd 	.word	0x08005fcd
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005fcd 	.word	0x08005fcd
 8005f80:	08005fcd 	.word	0x08005fcd
 8005f84:	08005fd3 	.word	0x08005fd3
 8005f88:	08005fcd 	.word	0x08005fcd
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fcd 	.word	0x08005fcd
 8005f94:	08005fcd 	.word	0x08005fcd
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fcd 	.word	0x08005fcd
 8005fa4:	08005fd3 	.word	0x08005fd3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	2101      	movs	r1, #1
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 f96a 	bl	8007288 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fb8:	e00c      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3324      	adds	r3, #36	; 0x24
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f001 fa13 	bl	80073ec <RCCEx_PLL3_Config>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fca:	e003      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005fda:	4b32      	ldr	r3, [pc, #200]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe6:	492f      	ldr	r1, [pc, #188]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	654b      	str	r3, [r1, #84]	; 0x54
 8005fec:	e001      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d037      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006002:	2b05      	cmp	r3, #5
 8006004:	d820      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800604f 	.word	0x0800604f
 8006010:	08006025 	.word	0x08006025
 8006014:	08006037 	.word	0x08006037
 8006018:	0800604f 	.word	0x0800604f
 800601c:	0800604f 	.word	0x0800604f
 8006020:	0800604f 	.word	0x0800604f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3304      	adds	r3, #4
 8006028:	2101      	movs	r1, #1
 800602a:	4618      	mov	r0, r3
 800602c:	f001 f92c 	bl	8007288 <RCCEx_PLL2_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006034:	e00c      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3324      	adds	r3, #36	; 0x24
 800603a:	2101      	movs	r1, #1
 800603c:	4618      	mov	r0, r3
 800603e:	f001 f9d5 	bl	80073ec <RCCEx_PLL3_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006046:	e003      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
      break;
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800604e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006056:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	f023 0207 	bic.w	r2, r3, #7
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006062:	4910      	ldr	r1, [pc, #64]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	654b      	str	r3, [r1, #84]	; 0x54
 8006068:	e001      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d040      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006080:	2b05      	cmp	r3, #5
 8006082:	d827      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006084:	a201      	add	r2, pc, #4	; (adr r2, 800608c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	080060db 	.word	0x080060db
 8006090:	080060b1 	.word	0x080060b1
 8006094:	080060c3 	.word	0x080060c3
 8006098:	080060db 	.word	0x080060db
 800609c:	080060db 	.word	0x080060db
 80060a0:	080060db 	.word	0x080060db
 80060a4:	58024400 	.word	0x58024400
 80060a8:	58024800 	.word	0x58024800
 80060ac:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	2101      	movs	r1, #1
 80060b6:	4618      	mov	r0, r3
 80060b8:	f001 f8e6 	bl	8007288 <RCCEx_PLL2_Config>
 80060bc:	4603      	mov	r3, r0
 80060be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060c0:	e00c      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3324      	adds	r3, #36	; 0x24
 80060c6:	2101      	movs	r1, #1
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 f98f 	bl	80073ec <RCCEx_PLL3_Config>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060d2:	e003      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	75fb      	strb	r3, [r7, #23]
      break;
 80060d8:	e000      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80060da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10a      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060e2:	4bb2      	ldr	r3, [pc, #712]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	f023 0207 	bic.w	r2, r3, #7
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f0:	49ae      	ldr	r1, [pc, #696]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	658b      	str	r3, [r1, #88]	; 0x58
 80060f6:	e001      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d044      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800610e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006112:	d01b      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006118:	d805      	bhi.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d022      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800611e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006122:	d00a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006124:	e01b      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612a:	d01d      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800612c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006130:	d01c      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006132:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006136:	d01b      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006138:	e011      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f001 f8a1 	bl	8007288 <RCCEx_PLL2_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800614a:	e012      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3324      	adds	r3, #36	; 0x24
 8006150:	2102      	movs	r1, #2
 8006152:	4618      	mov	r0, r3
 8006154:	f001 f94a 	bl	80073ec <RCCEx_PLL3_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800615c:	e009      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]
      break;
 8006162:	e006      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006164:	bf00      	nop
 8006166:	e004      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006168:	bf00      	nop
 800616a:	e002      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800616c:	bf00      	nop
 800616e:	e000      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006178:	4b8c      	ldr	r3, [pc, #560]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800617a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006186:	4989      	ldr	r1, [pc, #548]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006188:	4313      	orrs	r3, r2
 800618a:	654b      	str	r3, [r1, #84]	; 0x54
 800618c:	e001      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d044      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a8:	d01b      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80061aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ae:	d805      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d022      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80061b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b8:	d00a      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80061ba:	e01b      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80061bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c0:	d01d      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80061c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061c6:	d01c      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80061c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061cc:	d01b      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80061ce:	e011      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3304      	adds	r3, #4
 80061d4:	2100      	movs	r1, #0
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f856 	bl	8007288 <RCCEx_PLL2_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061e0:	e012      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3324      	adds	r3, #36	; 0x24
 80061e6:	2102      	movs	r1, #2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 f8ff 	bl	80073ec <RCCEx_PLL3_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061f2:	e009      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	75fb      	strb	r3, [r7, #23]
      break;
 80061f8:	e006      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80061fa:	bf00      	nop
 80061fc:	e004      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80061fe:	bf00      	nop
 8006200:	e002      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006202:	bf00      	nop
 8006204:	e000      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800620e:	4b67      	ldr	r3, [pc, #412]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800621c:	4963      	ldr	r1, [pc, #396]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800621e:	4313      	orrs	r3, r2
 8006220:	658b      	str	r3, [r1, #88]	; 0x58
 8006222:	e001      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006230:	2b00      	cmp	r3, #0
 8006232:	d044      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800623a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800623e:	d01b      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006244:	d805      	bhi.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d022      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800624a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624e:	d00a      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006250:	e01b      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006256:	d01d      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006258:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800625c:	d01c      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800625e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006262:	d01b      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006264:	e011      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3304      	adds	r3, #4
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f001 f80b 	bl	8007288 <RCCEx_PLL2_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006276:	e012      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3324      	adds	r3, #36	; 0x24
 800627c:	2102      	movs	r1, #2
 800627e:	4618      	mov	r0, r3
 8006280:	f001 f8b4 	bl	80073ec <RCCEx_PLL3_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006288:	e009      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
      break;
 800628e:	e006      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006290:	bf00      	nop
 8006292:	e004      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006294:	bf00      	nop
 8006296:	e002      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006298:	bf00      	nop
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800629c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062a4:	4b41      	ldr	r3, [pc, #260]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062b2:	493e      	ldr	r1, [pc, #248]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	658b      	str	r3, [r1, #88]	; 0x58
 80062b8:	e001      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01a      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d4:	d10a      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3324      	adds	r3, #36	; 0x24
 80062da:	2102      	movs	r1, #2
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 f885 	bl	80073ec <RCCEx_PLL3_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062ec:	4b2f      	ldr	r3, [pc, #188]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062fa:	492c      	ldr	r1, [pc, #176]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006316:	d10a      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3324      	adds	r3, #36	; 0x24
 800631c:	2102      	movs	r1, #2
 800631e:	4618      	mov	r0, r3
 8006320:	f001 f864 	bl	80073ec <RCCEx_PLL3_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800632e:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800633c:	491b      	ldr	r1, [pc, #108]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800633e:	4313      	orrs	r3, r2
 8006340:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d032      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006358:	d00d      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800635a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800635e:	d016      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006360:	2b00      	cmp	r3, #0
 8006362:	d111      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3304      	adds	r3, #4
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f000 ff8c 	bl	8007288 <RCCEx_PLL2_Config>
 8006370:	4603      	mov	r3, r0
 8006372:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006374:	e00c      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3324      	adds	r3, #36	; 0x24
 800637a:	2102      	movs	r1, #2
 800637c:	4618      	mov	r0, r3
 800637e:	f001 f835 	bl	80073ec <RCCEx_PLL3_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006386:	e003      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	75fb      	strb	r3, [r7, #23]
      break;
 800638c:	e000      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800638e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10c      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063a4:	4901      	ldr	r1, [pc, #4]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	658b      	str	r3, [r1, #88]	; 0x58
 80063aa:	e003      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80063ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d02f      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063ca:	d00c      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80063cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063d0:	d015      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80063d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063d6:	d10f      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d8:	4b71      	ldr	r3, [pc, #452]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	4a70      	ldr	r2, [pc, #448]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80063de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80063e4:	e00c      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3324      	adds	r3, #36	; 0x24
 80063ea:	2101      	movs	r1, #1
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fffd 	bl	80073ec <RCCEx_PLL3_Config>
 80063f2:	4603      	mov	r3, r0
 80063f4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80063f6:	e003      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	75fb      	strb	r3, [r7, #23]
      break;
 80063fc:	e000      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80063fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006400:	7dfb      	ldrb	r3, [r7, #23]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006406:	4b66      	ldr	r3, [pc, #408]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006414:	4962      	ldr	r1, [pc, #392]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006416:	4313      	orrs	r3, r2
 8006418:	654b      	str	r3, [r1, #84]	; 0x54
 800641a:	e001      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641c:	7dfb      	ldrb	r3, [r7, #23]
 800641e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d029      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006438:	d007      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800643a:	e00f      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800643c:	4b58      	ldr	r3, [pc, #352]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	4a57      	ldr	r2, [pc, #348]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006446:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006448:	e00b      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3304      	adds	r3, #4
 800644e:	2102      	movs	r1, #2
 8006450:	4618      	mov	r0, r3
 8006452:	f000 ff19 	bl	8007288 <RCCEx_PLL2_Config>
 8006456:	4603      	mov	r3, r0
 8006458:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800645a:	e002      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	75fb      	strb	r3, [r7, #23]
      break;
 8006460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006462:	7dfb      	ldrb	r3, [r7, #23]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d109      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006468:	4b4d      	ldr	r3, [pc, #308]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800646a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006474:	494a      	ldr	r1, [pc, #296]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006476:	4313      	orrs	r3, r2
 8006478:	64cb      	str	r3, [r1, #76]	; 0x4c
 800647a:	e001      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3324      	adds	r3, #36	; 0x24
 8006490:	2102      	movs	r1, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f000 ffaa 	bl	80073ec <RCCEx_PLL3_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d02f      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b6:	d00c      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80064b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064bc:	d802      	bhi.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d011      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80064c2:	e00d      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80064c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c8:	d00f      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80064ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ce:	d00e      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80064d0:	e006      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d2:	4b33      	ldr	r3, [pc, #204]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	4a32      	ldr	r2, [pc, #200]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80064de:	e007      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
      break;
 80064e4:	e004      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80064e6:	bf00      	nop
 80064e8:	e002      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80064ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064f6:	4b2a      	ldr	r3, [pc, #168]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006502:	4927      	ldr	r1, [pc, #156]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006504:	4313      	orrs	r3, r2
 8006506:	654b      	str	r3, [r1, #84]	; 0x54
 8006508:	e001      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800651a:	4b21      	ldr	r3, [pc, #132]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800651c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	491e      	ldr	r1, [pc, #120]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006528:	4313      	orrs	r3, r2
 800652a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006538:	4b19      	ldr	r3, [pc, #100]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006544:	4916      	ldr	r1, [pc, #88]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006546:	4313      	orrs	r3, r2
 8006548:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800655c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006560:	6113      	str	r3, [r2, #16]
 8006562:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006564:	691a      	ldr	r2, [r3, #16]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800656c:	490c      	ldr	r1, [pc, #48]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800656e:	4313      	orrs	r3, r2
 8006570:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	da08      	bge.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800657a:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800657c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006586:	4906      	ldr	r1, [pc, #24]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006588:	4313      	orrs	r3, r2
 800658a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800658c:	7dbb      	ldrb	r3, [r7, #22]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	e000      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	58024400 	.word	0x58024400

080065a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b090      	sub	sp, #64	; 0x40
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b2:	d150      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80065b4:	4ba1      	ldr	r3, [pc, #644]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d844      	bhi.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80065c4:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80065c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ca:	bf00      	nop
 80065cc:	080065e1 	.word	0x080065e1
 80065d0:	080065f1 	.word	0x080065f1
 80065d4:	08006601 	.word	0x08006601
 80065d8:	08006649 	.word	0x08006649
 80065dc:	08006611 	.word	0x08006611
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fd03 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ee:	e241      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f0:	f107 0318 	add.w	r3, r7, #24
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fa63 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065fe:	e239      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006600:	f107 030c 	add.w	r3, r7, #12
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fba7 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800660e:	e231      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006610:	4b8a      	ldr	r3, [pc, #552]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006618:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	2b00      	cmp	r3, #0
 800661e:	d102      	bne.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006620:	4b87      	ldr	r3, [pc, #540]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006624:	e226      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800662c:	d102      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800662e:	4b85      	ldr	r3, [pc, #532]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006632:	e21f      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800663a:	d102      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800663c:	4b82      	ldr	r3, [pc, #520]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006640:	e218      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006646:	e215      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006648:	4b80      	ldr	r3, [pc, #512]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664c:	e212      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006652:	bf00      	nop
 8006654:	e20e      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665c:	d14f      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800665e:	4b77      	ldr	r3, [pc, #476]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006662:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006666:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	2b80      	cmp	r3, #128	; 0x80
 800666c:	d01c      	beq.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800666e:	2b80      	cmp	r3, #128	; 0x80
 8006670:	d804      	bhi.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d00e      	beq.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800667a:	e03c      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800667c:	2bc0      	cmp	r3, #192	; 0xc0
 800667e:	d037      	beq.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006684:	d018      	beq.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006686:	e036      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fcaf 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006696:	e1ed      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006698:	f107 0318 	add.w	r3, r7, #24
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fa0f 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066a6:	e1e5      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a8:	f107 030c 	add.w	r3, r7, #12
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fb53 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066b6:	e1dd      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066b8:	4b60      	ldr	r3, [pc, #384]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80066c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80066c8:	4b5d      	ldr	r3, [pc, #372]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80066cc:	e1d2      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80066ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d4:	d102      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80066d6:	4b5b      	ldr	r3, [pc, #364]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066da:	e1cb      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80066dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066e2:	d102      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80066e4:	4b58      	ldr	r3, [pc, #352]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066e8:	e1c4      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ee:	e1c1      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80066f0:	4b56      	ldr	r3, [pc, #344]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066f4:	e1be      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066fa:	bf00      	nop
 80066fc:	e1ba      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006704:	d153      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006706:	4b4d      	ldr	r3, [pc, #308]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800670e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006716:	d01f      	beq.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800671c:	d805      	bhi.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006726:	d00f      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006728:	e03d      	b.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800672a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800672e:	d037      	beq.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006730:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006734:	d018      	beq.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006736:	e036      	b.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fc57 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006746:	e195      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006748:	f107 0318 	add.w	r3, r7, #24
 800674c:	4618      	mov	r0, r3
 800674e:	f000 f9b7 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006756:	e18d      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006758:	f107 030c 	add.w	r3, r7, #12
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fafb 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006766:	e185      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006768:	4b34      	ldr	r3, [pc, #208]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800676a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006770:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006778:	4b31      	ldr	r3, [pc, #196]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800677c:	e17a      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006784:	d102      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006786:	4b2f      	ldr	r3, [pc, #188]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800678a:	e173      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006792:	d102      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8006794:	4b2c      	ldr	r3, [pc, #176]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006796:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006798:	e16c      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800679e:	e169      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80067a0:	4b2a      	ldr	r3, [pc, #168]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067a4:	e166      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067aa:	bf00      	nop
 80067ac:	e162      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b4:	d15d      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80067b6:	4b21      	ldr	r3, [pc, #132]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80067be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067c6:	d01f      	beq.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80067c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067cc:	d805      	bhi.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80067d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067d6:	d00f      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80067d8:	e047      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80067da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067de:	d041      	beq.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80067e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067e4:	d018      	beq.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80067e6:	e040      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fbff 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067f6:	e13d      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067f8:	f107 0318 	add.w	r3, r7, #24
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 f95f 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006806:	e135      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	4618      	mov	r0, r3
 800680e:	f000 faa3 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006816:	e12d      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006818:	4b08      	ldr	r3, [pc, #32]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800681a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006820:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006828:	4b05      	ldr	r3, [pc, #20]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800682a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800682c:	e122      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006834:	d10c      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8006836:	4b03      	ldr	r3, [pc, #12]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800683a:	e11b      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800683c:	58024400 	.word	0x58024400
 8006840:	03d09000 	.word	0x03d09000
 8006844:	003d0900 	.word	0x003d0900
 8006848:	007a1200 	.word	0x007a1200
 800684c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006856:	d102      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8006858:	4b89      	ldr	r3, [pc, #548]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800685c:	e10a      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006862:	e107      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006864:	4b87      	ldr	r3, [pc, #540]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006868:	e104      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800686e:	bf00      	nop
 8006870:	e100      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006878:	d153      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800687a:	4b83      	ldr	r3, [pc, #524]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800687c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006882:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800688a:	d01f      	beq.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006890:	d805      	bhi.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689a:	d00f      	beq.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800689c:	e03d      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800689e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068a2:	d037      	beq.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80068a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068a8:	d018      	beq.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80068aa:	e036      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fb9d 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ba:	e0db      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068bc:	f107 0318 	add.w	r3, r7, #24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 f8fd 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ca:	e0d3      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068cc:	f107 030c 	add.w	r3, r7, #12
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fa41 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068da:	e0cb      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068dc:	4b6a      	ldr	r3, [pc, #424]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80068de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80068e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d102      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80068ec:	4b67      	ldr	r3, [pc, #412]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80068f0:	e0c0      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068f8:	d102      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80068fa:	4b65      	ldr	r3, [pc, #404]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068fe:	e0b9      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006906:	d102      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8006908:	4b5d      	ldr	r3, [pc, #372]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800690c:	e0b2      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006912:	e0af      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006914:	4b5b      	ldr	r3, [pc, #364]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006918:	e0ac      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800691e:	bf00      	nop
 8006920:	e0a8      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006928:	d13d      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800692a:	4b57      	ldr	r3, [pc, #348]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800692c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006932:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800693a:	d00c      	beq.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800693c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006940:	d011      	beq.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d12b      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006946:	f107 0318 	add.w	r3, r7, #24
 800694a:	4618      	mov	r0, r3
 800694c:	f000 f8b8 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006954:	e08e      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f9fc 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006964:	e086      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006966:	4b48      	ldr	r3, [pc, #288]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800696e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	2b00      	cmp	r3, #0
 8006974:	d102      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006976:	4b45      	ldr	r3, [pc, #276]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800697a:	e07b      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006982:	d102      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8006984:	4b42      	ldr	r3, [pc, #264]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006988:	e074      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006990:	d102      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8006992:	4b3b      	ldr	r3, [pc, #236]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006994:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006996:	e06d      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800699c:	e06a      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069a2:	bf00      	nop
 80069a4:	e066      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ac:	d11f      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80069ae:	4b36      	ldr	r3, [pc, #216]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80069b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80069be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c2:	d008      	beq.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80069c4:	e00f      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fb10 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d4:	e04e      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069d6:	f107 0318 	add.w	r3, r7, #24
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 f870 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069e4:	e046      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ea:	bf00      	nop
 80069ec:	e042      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f4:	d13c      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80069f6:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80069f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80069fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a06:	d01e      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8006a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0c:	d805      	bhi.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00d      	beq.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a16:	d00e      	beq.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8006a18:	e026      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8006a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1e:	d01d      	beq.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8006a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a24:	d01d      	beq.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006a26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a2a:	d014      	beq.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006a2c:	e01c      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a2e:	f000 f831 	bl	8006a94 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a32:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006a34:	e01e      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a36:	f107 0318 	add.w	r3, r7, #24
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 f840 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a44:	e016      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a46:	f107 030c 	add.w	r3, r7, #12
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f984 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a54:	e00e      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8006a56:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a5a:	e00b      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8006a5c:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a60:	e008      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a66:	e005      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a6c:	bf00      	nop
 8006a6e:	e001      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3740      	adds	r7, #64	; 0x40
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	007a1200 	.word	0x007a1200
 8006a84:	00bb8000 	.word	0x00bb8000
 8006a88:	58024400 	.word	0x58024400
 8006a8c:	03d09000 	.word	0x03d09000
 8006a90:	003d0900 	.word	0x003d0900

08006a94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a98:	f7fe fe4a 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8006a9c:	4601      	mov	r1, r0
 8006a9e:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	091b      	lsrs	r3, r3, #4
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	4a04      	ldr	r2, [pc, #16]	; (8006abc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006aaa:	5cd3      	ldrb	r3, [r2, r3]
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	08016e1c 	.word	0x08016e1c

08006ac0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ac8:	4b9d      	ldr	r3, [pc, #628]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006ad2:	4b9b      	ldr	r3, [pc, #620]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	0b1b      	lsrs	r3, r3, #12
 8006ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006adc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ade:	4b98      	ldr	r3, [pc, #608]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	091b      	lsrs	r3, r3, #4
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006aea:	4b95      	ldr	r3, [pc, #596]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	08db      	lsrs	r3, r3, #3
 8006af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 810a 	beq.w	8006d22 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d05a      	beq.n	8006bca <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d302      	bcc.n	8006b1e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d078      	beq.n	8006c0e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006b1c:	e099      	b.n	8006c52 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b1e:	4b88      	ldr	r3, [pc, #544]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d02d      	beq.n	8006b86 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b2a:	4b85      	ldr	r3, [pc, #532]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	08db      	lsrs	r3, r3, #3
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	4a83      	ldr	r2, [pc, #524]	; (8006d44 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006b36:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	ee07 3a90 	vmov	s15, r3
 8006b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b54:	4b7a      	ldr	r3, [pc, #488]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b64:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b68:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b80:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b84:	e087      	b.n	8006c96 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	ee07 3a90 	vmov	s15, r3
 8006b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b90:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006d4c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b98:	4b69      	ldr	r3, [pc, #420]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006bb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bc8:	e065      	b.n	8006c96 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bdc:	4b58      	ldr	r3, [pc, #352]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be4:	ee07 3a90 	vmov	s15, r3
 8006be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bec:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0c:	e043      	b.n	8006c96 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	ee07 3a90 	vmov	s15, r3
 8006c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c18:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006d54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006c1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c20:	4b47      	ldr	r3, [pc, #284]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c30:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c34:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006c38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c50:	e021      	b.n	8006c96 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	ee07 3a90 	vmov	s15, r3
 8006c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c64:	4b36      	ldr	r3, [pc, #216]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6c:	ee07 3a90 	vmov	s15, r3
 8006c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c74:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c78:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006c7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c94:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c96:	4b2a      	ldr	r3, [pc, #168]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	0a5b      	lsrs	r3, r3, #9
 8006c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ca0:	ee07 3a90 	vmov	s15, r3
 8006ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cbc:	ee17 2a90 	vmov	r2, s15
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006cc4:	4b1e      	ldr	r3, [pc, #120]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cea:	ee17 2a90 	vmov	r2, s15
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006cf2:	4b13      	ldr	r3, [pc, #76]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	0e1b      	lsrs	r3, r3, #24
 8006cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfc:	ee07 3a90 	vmov	s15, r3
 8006d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d18:	ee17 2a90 	vmov	r2, s15
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d20:	e008      	b.n	8006d34 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	609a      	str	r2, [r3, #8]
}
 8006d34:	bf00      	nop
 8006d36:	3724      	adds	r7, #36	; 0x24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	58024400 	.word	0x58024400
 8006d44:	03d09000 	.word	0x03d09000
 8006d48:	46000000 	.word	0x46000000
 8006d4c:	4c742400 	.word	0x4c742400
 8006d50:	4a742400 	.word	0x4a742400
 8006d54:	4af42400 	.word	0x4af42400

08006d58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b089      	sub	sp, #36	; 0x24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d60:	4b9d      	ldr	r3, [pc, #628]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006d6a:	4b9b      	ldr	r3, [pc, #620]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	0d1b      	lsrs	r3, r3, #20
 8006d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d76:	4b98      	ldr	r3, [pc, #608]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d82:	4b95      	ldr	r3, [pc, #596]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d86:	08db      	lsrs	r3, r3, #3
 8006d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 810a 	beq.w	8006fba <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d05a      	beq.n	8006e62 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d302      	bcc.n	8006db6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d078      	beq.n	8006ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006db4:	e099      	b.n	8006eea <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db6:	4b88      	ldr	r3, [pc, #544]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d02d      	beq.n	8006e1e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dc2:	4b85      	ldr	r3, [pc, #532]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	08db      	lsrs	r3, r3, #3
 8006dc8:	f003 0303 	and.w	r3, r3, #3
 8006dcc:	4a83      	ldr	r2, [pc, #524]	; (8006fdc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006dce:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	ee07 3a90 	vmov	s15, r3
 8006de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dec:	4b7a      	ldr	r3, [pc, #488]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e00:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e18:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e1c:	e087      	b.n	8006f2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e28:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e30:	4b69      	ldr	r3, [pc, #420]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e44:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e60:	e065      	b.n	8006f2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e74:	4b58      	ldr	r3, [pc, #352]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e88:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ea4:	e043      	b.n	8006f2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	ee07 3a90 	vmov	s15, r3
 8006eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006fec <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb8:	4b47      	ldr	r3, [pc, #284]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ecc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ee8:	e021      	b.n	8006f2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efc:	4b36      	ldr	r3, [pc, #216]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f04:	ee07 3a90 	vmov	s15, r3
 8006f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f10:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f2c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006f2e:	4b2a      	ldr	r3, [pc, #168]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	0a5b      	lsrs	r3, r3, #9
 8006f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f38:	ee07 3a90 	vmov	s15, r3
 8006f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f54:	ee17 2a90 	vmov	r2, s15
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	0c1b      	lsrs	r3, r3, #16
 8006f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f82:	ee17 2a90 	vmov	r2, s15
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f8a:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	0e1b      	lsrs	r3, r3, #24
 8006f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb0:	ee17 2a90 	vmov	r2, s15
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006fb8:	e008      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	609a      	str	r2, [r3, #8]
}
 8006fcc:	bf00      	nop
 8006fce:	3724      	adds	r7, #36	; 0x24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	58024400 	.word	0x58024400
 8006fdc:	03d09000 	.word	0x03d09000
 8006fe0:	46000000 	.word	0x46000000
 8006fe4:	4c742400 	.word	0x4c742400
 8006fe8:	4a742400 	.word	0x4a742400
 8006fec:	4af42400 	.word	0x4af42400

08006ff0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b089      	sub	sp, #36	; 0x24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ff8:	4b9d      	ldr	r3, [pc, #628]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007002:	4b9b      	ldr	r3, [pc, #620]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	091b      	lsrs	r3, r3, #4
 8007008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800700c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800700e:	4b98      	ldr	r3, [pc, #608]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007018:	4b95      	ldr	r3, [pc, #596]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800701a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701c:	08db      	lsrs	r3, r3, #3
 800701e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	fb02 f303 	mul.w	r3, r2, r3
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007030:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 810a 	beq.w	8007250 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d05a      	beq.n	80070f8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007042:	2b01      	cmp	r3, #1
 8007044:	d302      	bcc.n	800704c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007046:	2b02      	cmp	r3, #2
 8007048:	d078      	beq.n	800713c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800704a:	e099      	b.n	8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800704c:	4b88      	ldr	r3, [pc, #544]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d02d      	beq.n	80070b4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007058:	4b85      	ldr	r3, [pc, #532]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	08db      	lsrs	r3, r3, #3
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	4a84      	ldr	r2, [pc, #528]	; (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
 8007068:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	4b7b      	ldr	r3, [pc, #492]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	ed97 6a03 	vldr	s12, [r7, #12]
 8007096:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070b2:	e087      	b.n	80071c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b6a      	ldr	r3, [pc, #424]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070f6:	e065      	b.n	80071c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b59      	ldr	r3, [pc, #356]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a03 	vldr	s12, [r7, #12]
 800711e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800713a:	e043      	b.n	80071c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800714a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714e:	4b48      	ldr	r3, [pc, #288]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007162:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800717e:	e021      	b.n	80071c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800718e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007192:	4b37      	ldr	r3, [pc, #220]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071c2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80071c4:	4b2a      	ldr	r3, [pc, #168]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	0a5b      	lsrs	r3, r3, #9
 80071ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071de:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ea:	ee17 2a90 	vmov	r2, s15
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80071f2:	4b1f      	ldr	r3, [pc, #124]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	0c1b      	lsrs	r3, r3, #16
 80071f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fc:	ee07 3a90 	vmov	s15, r3
 8007200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800720c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007218:	ee17 2a90 	vmov	r2, s15
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007220:	4b13      	ldr	r3, [pc, #76]	; (8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	0e1b      	lsrs	r3, r3, #24
 8007226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800723a:	edd7 6a07 	vldr	s13, [r7, #28]
 800723e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007246:	ee17 2a90 	vmov	r2, s15
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800724e:	e008      	b.n	8007262 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	609a      	str	r2, [r3, #8]
}
 8007262:	bf00      	nop
 8007264:	3724      	adds	r7, #36	; 0x24
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	58024400 	.word	0x58024400
 8007274:	03d09000 	.word	0x03d09000
 8007278:	46000000 	.word	0x46000000
 800727c:	4c742400 	.word	0x4c742400
 8007280:	4a742400 	.word	0x4a742400
 8007284:	4af42400 	.word	0x4af42400

08007288 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007296:	4b53      	ldr	r3, [pc, #332]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d101      	bne.n	80072a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e099      	b.n	80073da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072a6:	4b4f      	ldr	r3, [pc, #316]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a4e      	ldr	r2, [pc, #312]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 80072ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072b2:	f7fa fab3 	bl	800181c <HAL_GetTick>
 80072b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072b8:	e008      	b.n	80072cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80072ba:	f7fa faaf 	bl	800181c <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e086      	b.n	80073da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072cc:	4b45      	ldr	r3, [pc, #276]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1f0      	bne.n	80072ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072d8:	4b42      	ldr	r3, [pc, #264]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 80072da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	031b      	lsls	r3, r3, #12
 80072e6:	493f      	ldr	r1, [pc, #252]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	628b      	str	r3, [r1, #40]	; 0x28
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	025b      	lsls	r3, r3, #9
 80072fe:	b29b      	uxth	r3, r3
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	3b01      	subs	r3, #1
 8007308:	041b      	lsls	r3, r3, #16
 800730a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	3b01      	subs	r3, #1
 8007316:	061b      	lsls	r3, r3, #24
 8007318:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800731c:	4931      	ldr	r1, [pc, #196]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 800731e:	4313      	orrs	r3, r2
 8007320:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007322:	4b30      	ldr	r3, [pc, #192]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	492d      	ldr	r1, [pc, #180]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 8007330:	4313      	orrs	r3, r2
 8007332:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007334:	4b2b      	ldr	r3, [pc, #172]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	f023 0220 	bic.w	r2, r3, #32
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	4928      	ldr	r1, [pc, #160]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 8007342:	4313      	orrs	r3, r2
 8007344:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007346:	4b27      	ldr	r3, [pc, #156]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	4a26      	ldr	r2, [pc, #152]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 800734c:	f023 0310 	bic.w	r3, r3, #16
 8007350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007352:	4b24      	ldr	r3, [pc, #144]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 8007354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007356:	4b24      	ldr	r3, [pc, #144]	; (80073e8 <RCCEx_PLL2_Config+0x160>)
 8007358:	4013      	ands	r3, r2
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	69d2      	ldr	r2, [r2, #28]
 800735e:	00d2      	lsls	r2, r2, #3
 8007360:	4920      	ldr	r1, [pc, #128]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 8007362:	4313      	orrs	r3, r2
 8007364:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007366:	4b1f      	ldr	r3, [pc, #124]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	4a1e      	ldr	r2, [pc, #120]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 800736c:	f043 0310 	orr.w	r3, r3, #16
 8007370:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d106      	bne.n	8007386 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007378:	4b1a      	ldr	r3, [pc, #104]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4a19      	ldr	r2, [pc, #100]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 800737e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007382:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007384:	e00f      	b.n	80073a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d106      	bne.n	800739a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800738c:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	4a14      	ldr	r2, [pc, #80]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 8007392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007396:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007398:	e005      	b.n	80073a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800739a:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	4a11      	ldr	r2, [pc, #68]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 80073a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a0e      	ldr	r2, [pc, #56]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 80073ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073b2:	f7fa fa33 	bl	800181c <HAL_GetTick>
 80073b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073b8:	e008      	b.n	80073cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073ba:	f7fa fa2f 	bl	800181c <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d901      	bls.n	80073cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e006      	b.n	80073da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073cc:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <RCCEx_PLL2_Config+0x15c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0f0      	beq.n	80073ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	58024400 	.word	0x58024400
 80073e8:	ffff0007 	.word	0xffff0007

080073ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073fa:	4b53      	ldr	r3, [pc, #332]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	2b03      	cmp	r3, #3
 8007404:	d101      	bne.n	800740a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e099      	b.n	800753e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800740a:	4b4f      	ldr	r3, [pc, #316]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a4e      	ldr	r2, [pc, #312]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 8007410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007416:	f7fa fa01 	bl	800181c <HAL_GetTick>
 800741a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800741c:	e008      	b.n	8007430 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800741e:	f7fa f9fd 	bl	800181c <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e086      	b.n	800753e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007430:	4b45      	ldr	r3, [pc, #276]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f0      	bne.n	800741e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800743c:	4b42      	ldr	r3, [pc, #264]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	051b      	lsls	r3, r3, #20
 800744a:	493f      	ldr	r1, [pc, #252]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 800744c:	4313      	orrs	r3, r2
 800744e:	628b      	str	r3, [r1, #40]	; 0x28
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	3b01      	subs	r3, #1
 8007456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	3b01      	subs	r3, #1
 8007460:	025b      	lsls	r3, r3, #9
 8007462:	b29b      	uxth	r3, r3
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	3b01      	subs	r3, #1
 800746c:	041b      	lsls	r3, r3, #16
 800746e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	3b01      	subs	r3, #1
 800747a:	061b      	lsls	r3, r3, #24
 800747c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007480:	4931      	ldr	r1, [pc, #196]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 8007482:	4313      	orrs	r3, r2
 8007484:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007486:	4b30      	ldr	r3, [pc, #192]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	492d      	ldr	r1, [pc, #180]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 8007494:	4313      	orrs	r3, r2
 8007496:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007498:	4b2b      	ldr	r3, [pc, #172]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	4928      	ldr	r1, [pc, #160]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074aa:	4b27      	ldr	r3, [pc, #156]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	4a26      	ldr	r2, [pc, #152]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074b6:	4b24      	ldr	r3, [pc, #144]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ba:	4b24      	ldr	r3, [pc, #144]	; (800754c <RCCEx_PLL3_Config+0x160>)
 80074bc:	4013      	ands	r3, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	69d2      	ldr	r2, [r2, #28]
 80074c2:	00d2      	lsls	r2, r2, #3
 80074c4:	4920      	ldr	r1, [pc, #128]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074ca:	4b1f      	ldr	r3, [pc, #124]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	4a1e      	ldr	r2, [pc, #120]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d106      	bne.n	80074ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074dc:	4b1a      	ldr	r3, [pc, #104]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a19      	ldr	r2, [pc, #100]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074e8:	e00f      	b.n	800750a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d106      	bne.n	80074fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074f0:	4b15      	ldr	r3, [pc, #84]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	4a14      	ldr	r2, [pc, #80]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 80074f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074fc:	e005      	b.n	800750a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80074fe:	4b12      	ldr	r3, [pc, #72]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	4a11      	ldr	r2, [pc, #68]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 8007504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007508:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800750a:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a0e      	ldr	r2, [pc, #56]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 8007510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007516:	f7fa f981 	bl	800181c <HAL_GetTick>
 800751a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800751c:	e008      	b.n	8007530 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800751e:	f7fa f97d 	bl	800181c <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b02      	cmp	r3, #2
 800752a:	d901      	bls.n	8007530 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e006      	b.n	800753e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007530:	4b05      	ldr	r3, [pc, #20]	; (8007548 <RCCEx_PLL3_Config+0x15c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0f0      	beq.n	800751e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	58024400 	.word	0x58024400
 800754c:	ffff0007 	.word	0xffff0007

08007550 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 808a 	beq.w	8007678 <HAL_RTC_Init+0x128>
  {
    status = HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d106      	bne.n	8007582 <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7f9 fea9 	bl	80012d4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2202      	movs	r2, #2
 8007586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	22ca      	movs	r2, #202	; 0xca
 8007590:	625a      	str	r2, [r3, #36]	; 0x24
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2253      	movs	r2, #83	; 0x53
 8007598:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fab6 	bl	8007b0c <RTC_EnterInitMode>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	22ff      	movs	r2, #255	; 0xff
 80075ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2204      	movs	r2, #4
 80075b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	e05d      	b.n	8007678 <HAL_RTC_Init+0x128>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6899      	ldr	r1, [r3, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4b2f      	ldr	r3, [pc, #188]	; (8007684 <HAL_RTC_Init+0x134>)
 80075c8:	400b      	ands	r3, r1
 80075ca:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6899      	ldr	r1, [r3, #8]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	0419      	lsls	r1, r3, #16
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800760a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10f      	bne.n	800763a <HAL_RTC_Init+0xea>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fa50 	bl	8007ac0 <HAL_RTC_WaitForSynchro>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d009      	beq.n	800763a <HAL_RTC_Init+0xea>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	22ff      	movs	r2, #255	; 0xff
 800762c:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2204      	movs	r2, #4
 8007632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d11b      	bne.n	8007678 <HAL_RTC_Init+0x128>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0203 	bic.w	r2, r2, #3
 800764e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69da      	ldr	r2, [r3, #28]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	22ff      	movs	r2, #255	; 0xff
 800766e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	ff8fffbf 	.word	0xff8fffbf

08007688 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_RTC_SetTime+0x1a>
 800769e:	2302      	movs	r3, #2
 80076a0:	e0b0      	b.n	8007804 <HAL_RTC_SetTime+0x17c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2202      	movs	r2, #2
 80076ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	22ca      	movs	r2, #202	; 0xca
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2253      	movs	r2, #83	; 0x53
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 fa22 	bl	8007b0c <RTC_EnterInitMode>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00d      	beq.n	80076ea <HAL_RTC_SetTime+0x62>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	22ff      	movs	r2, #255	; 0xff
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2204      	movs	r2, #4
 80076da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e08c      	b.n	8007804 <HAL_RTC_SetTime+0x17c>
  }
  else
  {
    if(Format == RTC_FORMAT_BIN)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d126      	bne.n	800773e <HAL_RTC_SetTime+0xb6>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <HAL_RTC_SetTime+0x7c>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2200      	movs	r2, #0
 8007702:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fa29 	bl	8007b60 <RTC_ByteToBcd2>
 800770e:	4603      	mov	r3, r0
 8007710:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fa22 	bl	8007b60 <RTC_ByteToBcd2>
 800771c:	4603      	mov	r3, r0
 800771e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007720:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	789b      	ldrb	r3, [r3, #2]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fa1a 	bl	8007b60 <RTC_ByteToBcd2>
 800772c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800772e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	78db      	ldrb	r3, [r3, #3]
 8007736:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007738:	4313      	orrs	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	e018      	b.n	8007770 <HAL_RTC_SetTime+0xe8>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <HAL_RTC_SetTime+0xca>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2200      	movs	r2, #0
 8007750:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800775e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007764:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	78db      	ldrb	r3, [r3, #3]
 800776a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	6979      	ldr	r1, [r7, #20]
 8007776:	4b25      	ldr	r3, [pc, #148]	; (800780c <HAL_RTC_SetTime+0x184>)
 8007778:	400b      	ands	r3, r1
 800777a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800778a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6899      	ldr	r1, [r3, #8]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	431a      	orrs	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	609a      	str	r2, [r3, #8]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077b2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d113      	bne.n	80077ea <HAL_RTC_SetTime+0x162>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f97c 	bl	8007ac0 <HAL_RTC_WaitForSynchro>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00d      	beq.n	80077ea <HAL_RTC_SetTime+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	22ff      	movs	r2, #255	; 0xff
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2204      	movs	r2, #4
 80077da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e00c      	b.n	8007804 <HAL_RTC_SetTime+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	22ff      	movs	r2, #255	; 0xff
 80077f0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007802:	2300      	movs	r3, #0
  }
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	bd90      	pop	{r4, r7, pc}
 800780c:	007f7f7f 	.word	0x007f7f7f

08007810 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b22      	ldr	r3, [pc, #136]	; (80078c4 <HAL_RTC_GetTime+0xb4>)
 800783c:	4013      	ands	r3, r2
 800783e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	0c1b      	lsrs	r3, r3, #16
 8007844:	b2db      	uxtb	r3, r3
 8007846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800784a:	b2da      	uxtb	r2, r3
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	0a1b      	lsrs	r3, r3, #8
 8007854:	b2db      	uxtb	r3, r3
 8007856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785a:	b2da      	uxtb	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007868:	b2da      	uxtb	r2, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	0d9b      	lsrs	r3, r3, #22
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	b2da      	uxtb	r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d11a      	bne.n	80078ba <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f989 	bl	8007ba0 <RTC_Bcd2ToByte>
 800788e:	4603      	mov	r3, r0
 8007890:	461a      	mov	r2, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 f980 	bl	8007ba0 <RTC_Bcd2ToByte>
 80078a0:	4603      	mov	r3, r0
 80078a2:	461a      	mov	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	789b      	ldrb	r3, [r3, #2]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f977 	bl	8007ba0 <RTC_Bcd2ToByte>
 80078b2:	4603      	mov	r3, r0
 80078b4:	461a      	mov	r2, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	007f7f7f 	.word	0x007f7f7f

080078c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078c8:	b590      	push	{r4, r7, lr}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_RTC_SetDate+0x1a>
 80078de:	2302      	movs	r3, #2
 80078e0:	e09a      	b.n	8007a18 <HAL_RTC_SetDate+0x150>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2202      	movs	r2, #2
 80078ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10e      	bne.n	8007916 <HAL_RTC_SetDate+0x4e>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	d008      	beq.n	8007916 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	785b      	ldrb	r3, [r3, #1]
 8007908:	f023 0310 	bic.w	r3, r3, #16
 800790c:	b2db      	uxtb	r3, r3
 800790e:	330a      	adds	r3, #10
 8007910:	b2da      	uxtb	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d11c      	bne.n	8007956 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	78db      	ldrb	r3, [r3, #3]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f91d 	bl	8007b60 <RTC_ByteToBcd2>
 8007926:	4603      	mov	r3, r0
 8007928:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f916 	bl	8007b60 <RTC_ByteToBcd2>
 8007934:	4603      	mov	r3, r0
 8007936:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007938:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	789b      	ldrb	r3, [r3, #2]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 f90e 	bl	8007b60 <RTC_ByteToBcd2>
 8007944:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007946:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	e00e      	b.n	8007974 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	78db      	ldrb	r3, [r3, #3]
 800795a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	785b      	ldrb	r3, [r3, #1]
 8007960:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007962:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007968:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	22ca      	movs	r2, #202	; 0xca
 800797a:	625a      	str	r2, [r3, #36]	; 0x24
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2253      	movs	r2, #83	; 0x53
 8007982:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f8c1 	bl	8007b0c <RTC_EnterInitMode>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00d      	beq.n	80079ac <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	22ff      	movs	r2, #255	; 0xff
 8007996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2204      	movs	r2, #4
 800799c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e035      	b.n	8007a18 <HAL_RTC_SetDate+0x150>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	6979      	ldr	r1, [r7, #20]
 80079b2:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <HAL_RTC_SetDate+0x158>)
 80079b4:	400b      	ands	r3, r1
 80079b6:	6053      	str	r3, [r2, #4]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ISR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079c6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d113      	bne.n	80079fe <HAL_RTC_SetDate+0x136>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f872 	bl	8007ac0 <HAL_RTC_WaitForSynchro>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00d      	beq.n	80079fe <HAL_RTC_SetDate+0x136>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	22ff      	movs	r2, #255	; 0xff
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2204      	movs	r2, #4
 80079ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e00c      	b.n	8007a18 <HAL_RTC_SetDate+0x150>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	22ff      	movs	r2, #255	; 0xff
 8007a04:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007a16:	2300      	movs	r3, #0
  }
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd90      	pop	{r4, r7, pc}
 8007a20:	00ffff3f 	.word	0x00ffff3f

08007a24 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	4b21      	ldr	r3, [pc, #132]	; (8007abc <HAL_RTC_GetDate+0x98>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	0c1b      	lsrs	r3, r3, #16
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	0a1b      	lsrs	r3, r3, #8
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f003 031f 	and.w	r3, r3, #31
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	0b5b      	lsrs	r3, r3, #13
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d11a      	bne.n	8007ab0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	78db      	ldrb	r3, [r3, #3]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 f88e 	bl	8007ba0 <RTC_Bcd2ToByte>
 8007a84:	4603      	mov	r3, r0
 8007a86:	461a      	mov	r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f885 	bl	8007ba0 <RTC_Bcd2ToByte>
 8007a96:	4603      	mov	r3, r0
 8007a98:	461a      	mov	r2, r3
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	789b      	ldrb	r3, [r3, #2]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 f87c 	bl	8007ba0 <RTC_Bcd2ToByte>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	00ffff3f 	.word	0x00ffff3f

08007ac0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ad6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8007ad8:	f7f9 fea0 	bl	800181c <HAL_GetTick>
 8007adc:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ade:	e009      	b.n	8007af4 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ae0:	f7f9 fe9c 	bl	800181c <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aee:	d901      	bls.n	8007af4 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e007      	b.n	8007b04 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0ee      	beq.n	8007ae0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d119      	bne.n	8007b56 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b2c:	f7f9 fe76 	bl	800181c <HAL_GetTick>
 8007b30:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b32:	e009      	b.n	8007b48 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007b34:	f7f9 fe72 	bl	800181c <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b42:	d901      	bls.n	8007b48 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e007      	b.n	8007b58 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0ee      	beq.n	8007b34 <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007b72:	e005      	b.n	8007b80 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3301      	adds	r3, #1
 8007b78:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	3b0a      	subs	r3, #10
 8007b7e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007b80:	7afb      	ldrb	r3, [r7, #11]
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d8f6      	bhi.n	8007b74 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	b2db      	uxtb	r3, r3
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	091b      	lsrs	r3, r3, #4
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	0092      	lsls	r2, r2, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	b2db      	uxtb	r3, r3
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08a      	sub	sp, #40	; 0x28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e07c      	b.n	8007ce0 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10c      	bne.n	8007c0c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7f9 fb7e 	bl	8001308 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2203      	movs	r2, #3
 8007c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f867 	bl	8007ce8 <HAL_SD_InitCard>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e05d      	b.n	8007ce0 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007c24:	f107 0308 	add.w	r3, r7, #8
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fdb8 	bl	80087a0 <HAL_SD_GetCardStatus>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e052      	b.n	8007ce0 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007c3a:	7e3b      	ldrb	r3, [r7, #24]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007c40:	7e7b      	ldrb	r3, [r7, #25]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d10a      	bne.n	8007c64 <HAL_SD_Init+0x90>
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d102      	bne.n	8007c5a <HAL_SD_Init+0x86>
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c60:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c62:	e00b      	b.n	8007c7c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d104      	bne.n	8007c76 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c72:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c74:	e002      	b.n	8007c7c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fe6e 	bl	8008964 <HAL_SD_ConfigWideBusOperation>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e026      	b.n	8007ce0 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007c92:	f7f9 fdc3 	bl	800181c <HAL_GetTick>
 8007c96:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007c98:	e011      	b.n	8007cbe <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007c9a:	f7f9 fdbf 	bl	800181c <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d109      	bne.n	8007cbe <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e010      	b.n	8007ce0 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fefa 	bl	8008ab8 <HAL_SD_GetCardState>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d1e7      	bne.n	8007c9a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3728      	adds	r7, #40	; 0x28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ce8:	b5b0      	push	{r4, r5, r7, lr}
 8007cea:	b08e      	sub	sp, #56	; 0x38
 8007cec:	af04      	add	r7, sp, #16
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007d00:	23fa      	movs	r3, #250	; 0xfa
 8007d02:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d107      	bne.n	8007d1c <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0210 	orr.w	r2, r2, #16
 8007d1a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681d      	ldr	r5, [r3, #0]
 8007d20:	466c      	mov	r4, sp
 8007d22:	f107 0314 	add.w	r3, r7, #20
 8007d26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d2e:	f107 0308 	add.w	r3, r7, #8
 8007d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d34:	4628      	mov	r0, r5
 8007d36:	f004 f9d9 	bl	800c0ec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f004 fa1c 	bl	800c17c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8007d44:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007d48:	f7fe fc2c 	bl	80065a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	4b2d      	ldr	r3, [pc, #180]	; (8007e04 <HAL_SD_InitCard+0x11c>)
 8007d50:	fba3 2302 	umull	r2, r3, r3, r2
 8007d54:	095b      	lsrs	r3, r3, #5
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d008      	beq.n	8007d70 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007d5e:	4a2a      	ldr	r2, [pc, #168]	; (8007e08 <HAL_SD_InitCard+0x120>)
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d66:	3301      	adds	r3, #1
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7f9 fd63 	bl	8001834 <HAL_Delay>
 8007d6e:	e002      	b.n	8007d76 <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 8007d70:	2002      	movs	r0, #2
 8007d72:	f7f9 fd5f 	bl	8001834 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 ff7c 	bl	8008c74 <SD_PowerON>
 8007d7c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e02e      	b.n	8007dfa <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 feab 	bl	8008af8 <SD_InitCard>
 8007da2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00b      	beq.n	8007dc2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	431a      	orrs	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e01b      	b.n	8007dfa <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f004 fa6c 	bl	800c2a8 <SDMMC_CmdBlockLength>
 8007dd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00f      	beq.n	8007df8 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a0b      	ldr	r2, [pc, #44]	; (8007e0c <HAL_SD_InitCard+0x124>)
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e000      	b.n	8007dfa <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3728      	adds	r7, #40	; 0x28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bdb0      	pop	{r4, r5, r7, pc}
 8007e02:	bf00      	nop
 8007e04:	10624dd3 	.word	0x10624dd3
 8007e08:	00012110 	.word	0x00012110
 8007e0c:	1fe00fff 	.word	0x1fe00fff

08007e10 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b092      	sub	sp, #72	; 0x48
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e1e:	f7f9 fcfd 	bl	800181c <HAL_GetTick>
 8007e22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d107      	bne.n	8007e42 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e167      	b.n	8008112 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	f040 815a 	bne.w	8008104 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	441a      	add	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d907      	bls.n	8007e74 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e14e      	b.n	8008112 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2203      	movs	r2, #3
 8007e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2200      	movs	r2, #0
 8007e82:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d002      	beq.n	8007e92 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	025b      	lsls	r3, r3, #9
 8007e90:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e92:	f04f 33ff 	mov.w	r3, #4294967295
 8007e96:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	025b      	lsls	r3, r3, #9
 8007e9c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007e9e:	2390      	movs	r3, #144	; 0x90
 8007ea0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f107 0214 	add.w	r2, r7, #20
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f004 f9c9 	bl	800c250 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ecc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d90a      	bls.n	8007eea <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f004 fa27 	bl	800c334 <SDMMC_CmdReadMultiBlock>
 8007ee6:	6478      	str	r0, [r7, #68]	; 0x44
 8007ee8:	e009      	b.n	8007efe <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f004 f9f9 	bl	800c2ee <SDMMC_CmdReadSingleBlock>
 8007efc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d012      	beq.n	8007f2a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a84      	ldr	r2, [pc, #528]	; (800811c <HAL_SD_ReadBlocks+0x30c>)
 8007f0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f12:	431a      	orrs	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e0f3      	b.n	8008112 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f2e:	e058      	b.n	8007fe2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d033      	beq.n	8007fa6 <HAL_SD_ReadBlocks+0x196>
 8007f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f40:	2b1f      	cmp	r3, #31
 8007f42:	d930      	bls.n	8007fa6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007f44:	2300      	movs	r3, #0
 8007f46:	643b      	str	r3, [r7, #64]	; 0x40
 8007f48:	e027      	b.n	8007f9a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f004 f8f6 	bl	800c140 <SDMMC_ReadFIFO>
 8007f54:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f60:	3301      	adds	r3, #1
 8007f62:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f70:	3301      	adds	r3, #1
 8007f72:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	0c1b      	lsrs	r3, r3, #16
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f80:	3301      	adds	r3, #1
 8007f82:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	0e1b      	lsrs	r3, r3, #24
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f90:	3301      	adds	r3, #1
 8007f92:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8007f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f96:	3301      	adds	r3, #1
 8007f98:	643b      	str	r3, [r7, #64]	; 0x40
 8007f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f9c:	2b07      	cmp	r3, #7
 8007f9e:	d9d4      	bls.n	8007f4a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa2:	3b20      	subs	r3, #32
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007fa6:	f7f9 fc39 	bl	800181c <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d902      	bls.n	8007fbc <HAL_SD_ReadBlocks+0x1ac>
 8007fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d112      	bne.n	8007fe2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a56      	ldr	r2, [pc, #344]	; (800811c <HAL_SD_ReadBlocks+0x30c>)
 8007fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e097      	b.n	8008112 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d09f      	beq.n	8007f30 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ffe:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800a:	2b00      	cmp	r3, #0
 800800c:	d022      	beq.n	8008054 <HAL_SD_ReadBlocks+0x244>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d91f      	bls.n	8008054 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008018:	2b03      	cmp	r3, #3
 800801a:	d01b      	beq.n	8008054 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4618      	mov	r0, r3
 8008022:	f004 f9f1 	bl	800c408 <SDMMC_CmdStopTransfer>
 8008026:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800802a:	2b00      	cmp	r3, #0
 800802c:	d012      	beq.n	8008054 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a3a      	ldr	r2, [pc, #232]	; (800811c <HAL_SD_ReadBlocks+0x30c>)
 8008034:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800803a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800803c:	431a      	orrs	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e05e      	b.n	8008112 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d012      	beq.n	8008088 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a2d      	ldr	r2, [pc, #180]	; (800811c <HAL_SD_ReadBlocks+0x30c>)
 8008068:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	f043 0208 	orr.w	r2, r3, #8
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e044      	b.n	8008112 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d012      	beq.n	80080bc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a20      	ldr	r2, [pc, #128]	; (800811c <HAL_SD_ReadBlocks+0x30c>)
 800809c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	f043 0202 	orr.w	r2, r3, #2
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e02a      	b.n	8008112 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d012      	beq.n	80080f0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a13      	ldr	r2, [pc, #76]	; (800811c <HAL_SD_ReadBlocks+0x30c>)
 80080d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	f043 0220 	orr.w	r2, r3, #32
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e010      	b.n	8008112 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <HAL_SD_ReadBlocks+0x310>)
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	e006      	b.n	8008112 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	3748      	adds	r7, #72	; 0x48
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	1fe00fff 	.word	0x1fe00fff
 8008120:	18000f3a 	.word	0x18000f3a

08008124 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b092      	sub	sp, #72	; 0x48
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008132:	f7f9 fb73 	bl	800181c <HAL_GetTick>
 8008136:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d107      	bne.n	8008156 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e16b      	b.n	800842e <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b01      	cmp	r3, #1
 8008160:	f040 815e 	bne.w	8008420 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800816a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	441a      	add	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008174:	429a      	cmp	r2, r3
 8008176:	d907      	bls.n	8008188 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e152      	b.n	800842e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2203      	movs	r2, #3
 800818c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2200      	movs	r2, #0
 8008196:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819c:	2b01      	cmp	r3, #1
 800819e:	d002      	beq.n	80081a6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	025b      	lsls	r3, r3, #9
 80081a4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081a6:	f04f 33ff 	mov.w	r3, #4294967295
 80081aa:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	025b      	lsls	r3, r3, #9
 80081b0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80081b2:	2390      	movs	r3, #144	; 0x90
 80081b4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80081b6:	2300      	movs	r3, #0
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80081be:	2300      	movs	r3, #0
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f107 0218 	add.w	r2, r7, #24
 80081ca:	4611      	mov	r1, r2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f004 f83f 	bl	800c250 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081e0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d90a      	bls.n	80081fe <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2220      	movs	r2, #32
 80081ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081f4:	4618      	mov	r0, r3
 80081f6:	f004 f8e3 	bl	800c3c0 <SDMMC_CmdWriteMultiBlock>
 80081fa:	6478      	str	r0, [r7, #68]	; 0x44
 80081fc:	e009      	b.n	8008212 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2210      	movs	r2, #16
 8008202:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800820a:	4618      	mov	r0, r3
 800820c:	f004 f8b5 	bl	800c37a <SDMMC_CmdWriteSingleBlock>
 8008210:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008214:	2b00      	cmp	r3, #0
 8008216:	d012      	beq.n	800823e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a86      	ldr	r2, [pc, #536]	; (8008438 <HAL_SD_WriteBlocks+0x314>)
 800821e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008226:	431a      	orrs	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e0f7      	b.n	800842e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008242:	e05c      	b.n	80082fe <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d037      	beq.n	80082c2 <HAL_SD_WriteBlocks+0x19e>
 8008252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008254:	2b1f      	cmp	r3, #31
 8008256:	d934      	bls.n	80082c2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008258:	2300      	movs	r3, #0
 800825a:	643b      	str	r3, [r7, #64]	; 0x40
 800825c:	e02b      	b.n	80082b6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800825e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008266:	3301      	adds	r3, #1
 8008268:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800826a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	021a      	lsls	r2, r3, #8
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	4313      	orrs	r3, r2
 8008274:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008278:	3301      	adds	r3, #1
 800827a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	041a      	lsls	r2, r3, #16
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828a:	3301      	adds	r3, #1
 800828c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800828e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	061a      	lsls	r2, r3, #24
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800829a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829c:	3301      	adds	r3, #1
 800829e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f107 0214 	add.w	r2, r7, #20
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f003 ff55 	bl	800c15a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80082b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b2:	3301      	adds	r3, #1
 80082b4:	643b      	str	r3, [r7, #64]	; 0x40
 80082b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b8:	2b07      	cmp	r3, #7
 80082ba:	d9d0      	bls.n	800825e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80082bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082be:	3b20      	subs	r3, #32
 80082c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80082c2:	f7f9 faab 	bl	800181c <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d902      	bls.n	80082d8 <HAL_SD_WriteBlocks+0x1b4>
 80082d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d112      	bne.n	80082fe <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a56      	ldr	r2, [pc, #344]	; (8008438 <HAL_SD_WriteBlocks+0x314>)
 80082de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e6:	431a      	orrs	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e097      	b.n	800842e <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008304:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008308:	2b00      	cmp	r3, #0
 800830a:	d09b      	beq.n	8008244 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800831a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008326:	2b00      	cmp	r3, #0
 8008328:	d022      	beq.n	8008370 <HAL_SD_WriteBlocks+0x24c>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d91f      	bls.n	8008370 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008334:	2b03      	cmp	r3, #3
 8008336:	d01b      	beq.n	8008370 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f004 f863 	bl	800c408 <SDMMC_CmdStopTransfer>
 8008342:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008346:	2b00      	cmp	r3, #0
 8008348:	d012      	beq.n	8008370 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a3a      	ldr	r2, [pc, #232]	; (8008438 <HAL_SD_WriteBlocks+0x314>)
 8008350:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008358:	431a      	orrs	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e05e      	b.n	800842e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d012      	beq.n	80083a4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a2d      	ldr	r2, [pc, #180]	; (8008438 <HAL_SD_WriteBlocks+0x314>)
 8008384:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	f043 0208 	orr.w	r2, r3, #8
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e044      	b.n	800842e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d012      	beq.n	80083d8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a20      	ldr	r2, [pc, #128]	; (8008438 <HAL_SD_WriteBlocks+0x314>)
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	f043 0202 	orr.w	r2, r3, #2
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e02a      	b.n	800842e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d012      	beq.n	800840c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a13      	ldr	r2, [pc, #76]	; (8008438 <HAL_SD_WriteBlocks+0x314>)
 80083ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	f043 0210 	orr.w	r2, r3, #16
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e010      	b.n	800842e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a0a      	ldr	r2, [pc, #40]	; (800843c <HAL_SD_WriteBlocks+0x318>)
 8008412:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	e006      	b.n	800842e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
  }
}
 800842e:	4618      	mov	r0, r3
 8008430:	3748      	adds	r7, #72	; 0x48
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	1fe00fff 	.word	0x1fe00fff
 800843c:	18000f3a 	.word	0x18000f3a

08008440 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
	...

08008458 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008466:	0f9b      	lsrs	r3, r3, #30
 8008468:	b2da      	uxtb	r2, r3
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008472:	0e9b      	lsrs	r3, r3, #26
 8008474:	b2db      	uxtb	r3, r3
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	b2da      	uxtb	r2, r3
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008484:	0e1b      	lsrs	r3, r3, #24
 8008486:	b2db      	uxtb	r3, r3
 8008488:	f003 0303 	and.w	r3, r3, #3
 800848c:	b2da      	uxtb	r2, r3
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008496:	0c1b      	lsrs	r3, r3, #16
 8008498:	b2da      	uxtb	r2, r3
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084a2:	0a1b      	lsrs	r3, r3, #8
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b8:	0d1b      	lsrs	r3, r3, #20
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084c4:	0c1b      	lsrs	r3, r3, #16
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f003 030f 	and.w	r3, r3, #15
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d6:	0bdb      	lsrs	r3, r3, #15
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e8:	0b9b      	lsrs	r3, r3, #14
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084fa:	0b5b      	lsrs	r3, r3, #13
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	b2da      	uxtb	r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800850c:	0b1b      	lsrs	r3, r3, #12
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	b2da      	uxtb	r2, r3
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2200      	movs	r2, #0
 800851e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008524:	2b00      	cmp	r3, #0
 8008526:	d163      	bne.n	80085f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852c:	009a      	lsls	r2, r3, #2
 800852e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008532:	4013      	ands	r3, r2
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008538:	0f92      	lsrs	r2, r2, #30
 800853a:	431a      	orrs	r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008544:	0edb      	lsrs	r3, r3, #27
 8008546:	b2db      	uxtb	r3, r3
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	b2da      	uxtb	r2, r3
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008556:	0e1b      	lsrs	r3, r3, #24
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f003 0307 	and.w	r3, r3, #7
 800855e:	b2da      	uxtb	r2, r3
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008568:	0d5b      	lsrs	r3, r3, #21
 800856a:	b2db      	uxtb	r3, r3
 800856c:	f003 0307 	and.w	r3, r3, #7
 8008570:	b2da      	uxtb	r2, r3
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800857a:	0c9b      	lsrs	r3, r3, #18
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	b2da      	uxtb	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800858c:	0bdb      	lsrs	r3, r3, #15
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f003 0307 	and.w	r3, r3, #7
 8008594:	b2da      	uxtb	r2, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	7e1b      	ldrb	r3, [r3, #24]
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	3302      	adds	r3, #2
 80085b0:	2201      	movs	r2, #1
 80085b2:	fa02 f303 	lsl.w	r3, r2, r3
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80085ba:	fb02 f203 	mul.w	r2, r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	7a1b      	ldrb	r3, [r3, #8]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 030f 	and.w	r3, r3, #15
 80085cc:	2201      	movs	r2, #1
 80085ce:	409a      	lsls	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80085dc:	0a52      	lsrs	r2, r2, #9
 80085de:	fb02 f203 	mul.w	r2, r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085ec:	659a      	str	r2, [r3, #88]	; 0x58
 80085ee:	e031      	b.n	8008654 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d11d      	bne.n	8008634 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085fc:	041b      	lsls	r3, r3, #16
 80085fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008606:	0c1b      	lsrs	r3, r3, #16
 8008608:	431a      	orrs	r2, r3
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	3301      	adds	r3, #1
 8008614:	029a      	lsls	r2, r3, #10
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008628:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	659a      	str	r2, [r3, #88]	; 0x58
 8008632:	e00f      	b.n	8008654 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a58      	ldr	r2, [pc, #352]	; (800879c <HAL_SD_GetCardCSD+0x344>)
 800863a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e09d      	b.n	8008790 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008658:	0b9b      	lsrs	r3, r3, #14
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	b2da      	uxtb	r2, r3
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800866a:	09db      	lsrs	r3, r3, #7
 800866c:	b2db      	uxtb	r3, r3
 800866e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008672:	b2da      	uxtb	r2, r3
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800867c:	b2db      	uxtb	r3, r3
 800867e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008682:	b2da      	uxtb	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800868c:	0fdb      	lsrs	r3, r3, #31
 800868e:	b2da      	uxtb	r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008698:	0f5b      	lsrs	r3, r3, #29
 800869a:	b2db      	uxtb	r3, r3
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086aa:	0e9b      	lsrs	r3, r3, #26
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	f003 0307 	and.w	r3, r3, #7
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086bc:	0d9b      	lsrs	r3, r3, #22
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ce:	0d5b      	lsrs	r3, r3, #21
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ea:	0c1b      	lsrs	r3, r3, #16
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086fe:	0bdb      	lsrs	r3, r3, #15
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	b2da      	uxtb	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008712:	0b9b      	lsrs	r3, r3, #14
 8008714:	b2db      	uxtb	r3, r3
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	b2da      	uxtb	r2, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008726:	0b5b      	lsrs	r3, r3, #13
 8008728:	b2db      	uxtb	r3, r3
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	b2da      	uxtb	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800873a:	0b1b      	lsrs	r3, r3, #12
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	b2da      	uxtb	r2, r3
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800874e:	0a9b      	lsrs	r3, r3, #10
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	b2da      	uxtb	r2, r3
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	b2db      	uxtb	r3, r3
 8008766:	f003 0303 	and.w	r3, r3, #3
 800876a:	b2da      	uxtb	r2, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008776:	085b      	lsrs	r3, r3, #1
 8008778:	b2db      	uxtb	r3, r3
 800877a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877e:	b2da      	uxtb	r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	1fe00fff 	.word	0x1fe00fff

080087a0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b094      	sub	sp, #80	; 0x50
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80087b0:	f107 0308 	add.w	r3, r7, #8
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fb64 	bl	8008e84 <SD_SendSDStatus>
 80087bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80087be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d011      	beq.n	80087e8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a4f      	ldr	r2, [pc, #316]	; (8008908 <HAL_SD_GetCardStatus+0x168>)
 80087ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80087e6:	e070      	b.n	80088ca <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	099b      	lsrs	r3, r3, #6
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	b2da      	uxtb	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	b29b      	uxth	r3, r3
 800880e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008812:	b29a      	uxth	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	0e1b      	lsrs	r3, r3, #24
 8008818:	b29b      	uxth	r3, r3
 800881a:	4313      	orrs	r3, r2
 800881c:	b29a      	uxth	r2, r3
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	061a      	lsls	r2, r3, #24
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	021b      	lsls	r3, r3, #8
 800882a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800882e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	0a1b      	lsrs	r3, r3, #8
 8008834:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008838:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	0e1b      	lsrs	r3, r3, #24
 800883e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	b2da      	uxtb	r2, r3
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	0a1b      	lsrs	r3, r3, #8
 8008850:	b2da      	uxtb	r2, r3
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	0d1b      	lsrs	r3, r3, #20
 800885a:	b2db      	uxtb	r3, r3
 800885c:	f003 030f 	and.w	r3, r3, #15
 8008860:	b2da      	uxtb	r2, r3
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	0c1b      	lsrs	r3, r3, #16
 800886a:	b29b      	uxth	r3, r3
 800886c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008870:	b29a      	uxth	r2, r3
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	b29b      	uxth	r3, r3
 8008876:	b2db      	uxtb	r3, r3
 8008878:	b29b      	uxth	r3, r3
 800887a:	4313      	orrs	r3, r2
 800887c:	b29a      	uxth	r2, r3
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	0a9b      	lsrs	r3, r3, #10
 8008886:	b2db      	uxtb	r3, r3
 8008888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800888c:	b2da      	uxtb	r2, r3
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	0a1b      	lsrs	r3, r3, #8
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 0303 	and.w	r3, r3, #3
 800889c:	b2da      	uxtb	r2, r3
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	091b      	lsrs	r3, r3, #4
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	0e1b      	lsrs	r3, r3, #24
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088d2:	4618      	mov	r0, r3
 80088d4:	f003 fce8 	bl	800c2a8 <SDMMC_CmdBlockLength>
 80088d8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80088da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00d      	beq.n	80088fc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a08      	ldr	r2, [pc, #32]	; (8008908 <HAL_SD_GetCardStatus+0x168>)
 80088e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80088fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008900:	4618      	mov	r0, r3
 8008902:	3750      	adds	r7, #80	; 0x50
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	1fe00fff 	.word	0x1fe00fff

0800890c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008964:	b5b0      	push	{r4, r5, r7, lr}
 8008966:	b08e      	sub	sp, #56	; 0x38
 8008968:	af04      	add	r7, sp, #16
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2203      	movs	r2, #3
 8008978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008980:	2b03      	cmp	r3, #3
 8008982:	d02e      	beq.n	80089e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800898a:	d106      	bne.n	800899a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	639a      	str	r2, [r3, #56]	; 0x38
 8008998:	e029      	b.n	80089ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089a0:	d10a      	bne.n	80089b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fb66 	bl	8009074 <SD_WideBus_Enable>
 80089a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	431a      	orrs	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	639a      	str	r2, [r3, #56]	; 0x38
 80089b6:	e01a      	b.n	80089ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fba3 	bl	800910a <SD_WideBus_Disable>
 80089c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38
 80089d2:	e00c      	b.n	80089ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	639a      	str	r2, [r3, #56]	; 0x38
 80089e0:	e005      	b.n	80089ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d007      	beq.n	8008a06 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a2e      	ldr	r2, [pc, #184]	; (8008ab4 <HAL_SD_ConfigWideBusOperation+0x150>)
 80089fc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a04:	e034      	b.n	8008a70 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d903      	bls.n	8008a2c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	61bb      	str	r3, [r7, #24]
 8008a2a:	e012      	b.n	8008a52 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a34:	d103      	bne.n	8008a3e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	61bb      	str	r3, [r7, #24]
 8008a3c:	e009      	b.n	8008a52 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a46:	d102      	bne.n	8008a4e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	61bb      	str	r3, [r7, #24]
 8008a4c:	e001      	b.n	8008a52 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008a4e:	2304      	movs	r3, #4
 8008a50:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681d      	ldr	r5, [r3, #0]
 8008a56:	466c      	mov	r4, sp
 8008a58:	f107 0314 	add.w	r3, r7, #20
 8008a5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a64:	f107 0308 	add.w	r3, r7, #8
 8008a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f003 fb3e 	bl	800c0ec <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f003 fc15 	bl	800c2a8 <SDMMC_CmdBlockLength>
 8008a7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00c      	beq.n	8008aa0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a0a      	ldr	r2, [pc, #40]	; (8008ab4 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	431a      	orrs	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3728      	adds	r7, #40	; 0x28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8008ab4:	1fe00fff 	.word	0x1fe00fff

08008ab8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008ac4:	f107 030c 	add.w	r3, r7, #12
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 faaa 	bl	8009024 <SD_SendStatus>
 8008ad0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	0a5b      	lsrs	r3, r3, #9
 8008ae8:	f003 030f 	and.w	r3, r3, #15
 8008aec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008aee:	693b      	ldr	r3, [r7, #16]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008af8:	b590      	push	{r4, r7, lr}
 8008afa:	b091      	sub	sp, #68	; 0x44
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008b00:	2301      	movs	r3, #1
 8008b02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f003 fb48 	bl	800c19e <SDMMC_GetPowerState>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008b18:	e0a8      	b.n	8008c6c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d02e      	beq.n	8008b80 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f003 fd94 	bl	800c654 <SDMMC_CmdSendCID>
 8008b2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <SD_InitCard+0x40>
    {
      return errorstate;
 8008b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b36:	e099      	b.n	8008c6c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f003 fb73 	bl	800c22a <SDMMC_GetResponse>
 8008b44:	4602      	mov	r2, r0
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2104      	movs	r1, #4
 8008b50:	4618      	mov	r0, r3
 8008b52:	f003 fb6a 	bl	800c22a <SDMMC_GetResponse>
 8008b56:	4602      	mov	r2, r0
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2108      	movs	r1, #8
 8008b62:	4618      	mov	r0, r3
 8008b64:	f003 fb61 	bl	800c22a <SDMMC_GetResponse>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	210c      	movs	r1, #12
 8008b74:	4618      	mov	r0, r3
 8008b76:	f003 fb58 	bl	800c22a <SDMMC_GetResponse>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d00d      	beq.n	8008ba4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f107 020e 	add.w	r2, r7, #14
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f003 fd9d 	bl	800c6d2 <SDMMC_CmdSetRelAdd>
 8008b98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <SD_InitCard+0xac>
    {
      return errorstate;
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba2:	e063      	b.n	8008c6c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d036      	beq.n	8008c1a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008bac:	89fb      	ldrh	r3, [r7, #14]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bbc:	041b      	lsls	r3, r3, #16
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f003 fd66 	bl	800c692 <SDMMC_CmdSendCSD>
 8008bc6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <SD_InitCard+0xda>
    {
      return errorstate;
 8008bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd0:	e04c      	b.n	8008c6c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f003 fb26 	bl	800c22a <SDMMC_GetResponse>
 8008bde:	4602      	mov	r2, r0
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2104      	movs	r1, #4
 8008bea:	4618      	mov	r0, r3
 8008bec:	f003 fb1d 	bl	800c22a <SDMMC_GetResponse>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2108      	movs	r1, #8
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f003 fb14 	bl	800c22a <SDMMC_GetResponse>
 8008c02:	4602      	mov	r2, r0
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	210c      	movs	r1, #12
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f003 fb0b 	bl	800c22a <SDMMC_GetResponse>
 8008c14:	4602      	mov	r2, r0
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2104      	movs	r1, #4
 8008c20:	4618      	mov	r0, r3
 8008c22:	f003 fb02 	bl	800c22a <SDMMC_GetResponse>
 8008c26:	4603      	mov	r3, r0
 8008c28:	0d1a      	lsrs	r2, r3, #20
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008c2e:	f107 0310 	add.w	r3, r7, #16
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff fc0f 	bl	8008458 <HAL_SD_GetCardCSD>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c44:	e012      	b.n	8008c6c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6819      	ldr	r1, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4e:	041b      	lsls	r3, r3, #16
 8008c50:	f04f 0400 	mov.w	r4, #0
 8008c54:	461a      	mov	r2, r3
 8008c56:	4623      	mov	r3, r4
 8008c58:	4608      	mov	r0, r1
 8008c5a:	f003 fc11 	bl	800c480 <SDMMC_CmdSelDesel>
 8008c5e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <SD_InitCard+0x172>
  {
    return errorstate;
 8008c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c68:	e000      	b.n	8008c6c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3744      	adds	r7, #68	; 0x44
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd90      	pop	{r4, r7, pc}

08008c74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	2300      	movs	r3, #0
 8008c86:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8008c88:	f7f8 fdc8 	bl	800181c <HAL_GetTick>
 8008c8c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f003 fc18 	bl	800c4c8 <SDMMC_CmdGoIdleState>
 8008c98:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <SD_PowerON+0x30>
  {
    return errorstate;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	e0e9      	b.n	8008e78 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f003 fc2b 	bl	800c504 <SDMMC_CmdOperCond>
 8008cae:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00d      	beq.n	8008cd2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f003 fc01 	bl	800c4c8 <SDMMC_CmdGoIdleState>
 8008cc6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d004      	beq.n	8008cd8 <SD_PowerON+0x64>
    {
      return errorstate;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	e0d2      	b.n	8008e78 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d137      	bne.n	8008d50 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f003 fc2c 	bl	800c544 <SDMMC_CmdAppCommand>
 8008cec:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d02d      	beq.n	8008d50 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cf8:	e0be      	b.n	8008e78 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f003 fc1f 	bl	800c544 <SDMMC_CmdAppCommand>
 8008d06:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	e0b2      	b.n	8008e78 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	495a      	ldr	r1, [pc, #360]	; (8008e80 <SD_PowerON+0x20c>)
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f003 fc36 	bl	800c58a <SDMMC_CmdAppOperCommand>
 8008d1e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d2a:	e0a5      	b.n	8008e78 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f003 fa79 	bl	800c22a <SDMMC_GetResponse>
 8008d38:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	0fdb      	lsrs	r3, r3, #31
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d101      	bne.n	8008d46 <SD_PowerON+0xd2>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e000      	b.n	8008d48 <SD_PowerON+0xd4>
 8008d46:	2300      	movs	r3, #0
 8008d48:	61bb      	str	r3, [r7, #24]

    count++;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d802      	bhi.n	8008d60 <SD_PowerON+0xec>
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0cc      	beq.n	8008cfa <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d902      	bls.n	8008d70 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d6e:	e083      	b.n	8008e78 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d07d      	beq.n	8008e76 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d176      	bne.n	8008e76 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d071      	beq.n	8008e76 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d98:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f042 0208 	orr.w	r2, r2, #8
 8008da8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f003 fcf6 	bl	800c7a0 <SDMMC_CmdVoltageSwitch>
 8008db4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00c      	beq.n	8008dd6 <SD_PowerON+0x162>
        {
          return errorstate;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	e05b      	b.n	8008e78 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008dc0:	f7f8 fd2c 	bl	800181c <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d102      	bne.n	8008dd6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008dd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dd4:	e050      	b.n	8008e78 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008de4:	d1ec      	bne.n	8008dc0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dfe:	d002      	beq.n	8008e06 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e04:	e038      	b.n	8008e78 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8008e06:	2001      	movs	r0, #1
 8008e08:	f7ff fb1a 	bl	8008440 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f042 0204 	orr.w	r2, r2, #4
 8008e1a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008e1c:	e00a      	b.n	8008e34 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e1e:	f7f8 fcfd 	bl	800181c <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2c:	d102      	bne.n	8008e34 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008e2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e32:	e021      	b.n	8008e78 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e42:	d1ec      	bne.n	8008e1e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e5c:	d102      	bne.n	8008e64 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e62:	e009      	b.n	8008e78 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2213      	movs	r2, #19
 8008e6a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f04f 32ff 	mov.w	r2, #4294967295
 8008e74:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3720      	adds	r7, #32
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	c1100000 	.word	0xc1100000

08008e84 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08c      	sub	sp, #48	; 0x30
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e8e:	f7f8 fcc5 	bl	800181c <HAL_GetTick>
 8008e92:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f003 f9c3 	bl	800c22a <SDMMC_GetResponse>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eae:	d102      	bne.n	8008eb6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eb4:	e0b0      	b.n	8009018 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2140      	movs	r1, #64	; 0x40
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f003 f9f3 	bl	800c2a8 <SDMMC_CmdBlockLength>
 8008ec2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d005      	beq.n	8008ed6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	e0a0      	b.n	8009018 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ede:	041b      	lsls	r3, r3, #16
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f003 fb2e 	bl	800c544 <SDMMC_CmdAppCommand>
 8008ee8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	e08d      	b.n	8009018 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008efc:	f04f 33ff 	mov.w	r3, #4294967295
 8008f00:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008f02:	2340      	movs	r3, #64	; 0x40
 8008f04:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008f06:	2360      	movs	r3, #96	; 0x60
 8008f08:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f12:	2301      	movs	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f107 0208 	add.w	r2, r7, #8
 8008f1e:	4611      	mov	r1, r2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f003 f995 	bl	800c250 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f003 fc16 	bl	800c75c <SDMMC_CmdStatusRegister>
 8008f30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d02b      	beq.n	8008f90 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	e069      	b.n	8009018 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d013      	beq.n	8008f7a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008f52:	2300      	movs	r3, #0
 8008f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f56:	e00d      	b.n	8008f74 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f003 f8ef 	bl	800c140 <SDMMC_ReadFIFO>
 8008f62:	4602      	mov	r2, r0
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	601a      	str	r2, [r3, #0]
        pData++;
 8008f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	3301      	adds	r3, #1
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	2b07      	cmp	r3, #7
 8008f78:	d9ee      	bls.n	8008f58 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f7a:	f7f8 fc4f 	bl	800181c <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f88:	d102      	bne.n	8008f90 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f8e:	e043      	b.n	8009018 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f96:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0d2      	beq.n	8008f44 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa4:	f003 0308 	and.w	r3, r3, #8
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008fac:	2308      	movs	r3, #8
 8008fae:	e033      	b.n	8009018 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	e02a      	b.n	8009018 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d017      	beq.n	8009000 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008fd0:	2320      	movs	r3, #32
 8008fd2:	e021      	b.n	8009018 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f003 f8b1 	bl	800c140 <SDMMC_ReadFIFO>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	601a      	str	r2, [r3, #0]
    pData++;
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fea:	f7f8 fc17 	bl	800181c <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff8:	d102      	bne.n	8009000 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ffa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ffe:	e00b      	b.n	8009018 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e2      	bne.n	8008fd4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a03      	ldr	r2, [pc, #12]	; (8009020 <SD_SendSDStatus+0x19c>)
 8009014:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3730      	adds	r7, #48	; 0x30
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	18000f3a 	.word	0x18000f3a

08009024 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009038:	e018      	b.n	800906c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009042:	041b      	lsls	r3, r3, #16
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	f003 fb65 	bl	800c716 <SDMMC_CmdSendStatus>
 800904c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	e009      	b.n	800906c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2100      	movs	r1, #0
 800905e:	4618      	mov	r0, r3
 8009060:	f003 f8e3 	bl	800c22a <SDMMC_GetResponse>
 8009064:	4602      	mov	r2, r0
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800907c:	2300      	movs	r3, #0
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	2300      	movs	r3, #0
 8009082:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2100      	movs	r1, #0
 800908a:	4618      	mov	r0, r3
 800908c:	f003 f8cd 	bl	800c22a <SDMMC_GetResponse>
 8009090:	4603      	mov	r3, r0
 8009092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800909a:	d102      	bne.n	80090a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800909c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090a0:	e02f      	b.n	8009102 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090a2:	f107 030c 	add.w	r3, r7, #12
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f879 	bl	80091a0 <SD_FindSCR>
 80090ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	e023      	b.n	8009102 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d01c      	beq.n	80090fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090cc:	041b      	lsls	r3, r3, #16
 80090ce:	4619      	mov	r1, r3
 80090d0:	4610      	mov	r0, r2
 80090d2:	f003 fa37 	bl	800c544 <SDMMC_CmdAppCommand>
 80090d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	e00f      	b.n	8009102 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2102      	movs	r1, #2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f003 fa6e 	bl	800c5ca <SDMMC_CmdBusWidth>
 80090ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	e003      	b.n	8009102 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e001      	b.n	8009102 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	2300      	movs	r3, #0
 8009118:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2100      	movs	r1, #0
 8009120:	4618      	mov	r0, r3
 8009122:	f003 f882 	bl	800c22a <SDMMC_GetResponse>
 8009126:	4603      	mov	r3, r0
 8009128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800912c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009130:	d102      	bne.n	8009138 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009136:	e02f      	b.n	8009198 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009138:	f107 030c 	add.w	r3, r7, #12
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f82e 	bl	80091a0 <SD_FindSCR>
 8009144:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	e023      	b.n	8009198 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d01c      	beq.n	8009194 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009162:	041b      	lsls	r3, r3, #16
 8009164:	4619      	mov	r1, r3
 8009166:	4610      	mov	r0, r2
 8009168:	f003 f9ec 	bl	800c544 <SDMMC_CmdAppCommand>
 800916c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	e00f      	b.n	8009198 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2100      	movs	r1, #0
 800917e:	4618      	mov	r0, r3
 8009180:	f003 fa23 	bl	800c5ca <SDMMC_CmdBusWidth>
 8009184:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	e003      	b.n	8009198 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009190:	2300      	movs	r3, #0
 8009192:	e001      	b.n	8009198 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009194:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009198:	4618      	mov	r0, r3
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08e      	sub	sp, #56	; 0x38
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80091aa:	f7f8 fb37 	bl	800181c <HAL_GetTick>
 80091ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80091b4:	2300      	movs	r3, #0
 80091b6:	60bb      	str	r3, [r7, #8]
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2108      	movs	r1, #8
 80091c6:	4618      	mov	r0, r3
 80091c8:	f003 f86e 	bl	800c2a8 <SDMMC_CmdBlockLength>
 80091cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	e0ad      	b.n	8009334 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091e0:	041b      	lsls	r3, r3, #16
 80091e2:	4619      	mov	r1, r3
 80091e4:	4610      	mov	r0, r2
 80091e6:	f003 f9ad 	bl	800c544 <SDMMC_CmdAppCommand>
 80091ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	e09e      	b.n	8009334 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295
 80091fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80091fc:	2308      	movs	r3, #8
 80091fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009200:	2330      	movs	r3, #48	; 0x30
 8009202:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009204:	2302      	movs	r3, #2
 8009206:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009208:	2300      	movs	r3, #0
 800920a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800920c:	2301      	movs	r3, #1
 800920e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f107 0210 	add.w	r2, r7, #16
 8009218:	4611      	mov	r1, r2
 800921a:	4618      	mov	r0, r3
 800921c:	f003 f818 	bl	800c250 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4618      	mov	r0, r3
 8009226:	f003 f9f3 	bl	800c610 <SDMMC_CmdSendSCR>
 800922a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	d027      	beq.n	8009282 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	e07e      	b.n	8009334 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d113      	bne.n	800926c <SD_FindSCR+0xcc>
 8009244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009246:	2b00      	cmp	r3, #0
 8009248:	d110      	bne.n	800926c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4618      	mov	r0, r3
 8009250:	f002 ff76 	bl	800c140 <SDMMC_ReadFIFO>
 8009254:	4603      	mov	r3, r0
 8009256:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4618      	mov	r0, r3
 800925e:	f002 ff6f 	bl	800c140 <SDMMC_ReadFIFO>
 8009262:	4603      	mov	r3, r0
 8009264:	60fb      	str	r3, [r7, #12]
      index++;
 8009266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009268:	3301      	adds	r3, #1
 800926a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800926c:	f7f8 fad6 	bl	800181c <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927a:	d102      	bne.n	8009282 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800927c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009280:	e058      	b.n	8009334 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009288:	f240 532a 	movw	r3, #1322	; 0x52a
 800928c:	4013      	ands	r3, r2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0d1      	beq.n	8009236 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009298:	f003 0308 	and.w	r3, r3, #8
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2208      	movs	r2, #8
 80092a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80092a8:	2308      	movs	r3, #8
 80092aa:	e043      	b.n	8009334 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2202      	movs	r2, #2
 80092c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80092c2:	2302      	movs	r3, #2
 80092c4:	e036      	b.n	8009334 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092cc:	f003 0320 	and.w	r3, r3, #32
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d005      	beq.n	80092e0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2220      	movs	r2, #32
 80092da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80092dc:	2320      	movs	r3, #32
 80092de:	e029      	b.n	8009334 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a15      	ldr	r2, [pc, #84]	; (800933c <SD_FindSCR+0x19c>)
 80092e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	061a      	lsls	r2, r3, #24
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	021b      	lsls	r3, r3, #8
 80092f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	0a1b      	lsrs	r3, r3, #8
 80092fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	0e1b      	lsrs	r3, r3, #24
 8009304:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	601a      	str	r2, [r3, #0]
    scr++;
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	3304      	adds	r3, #4
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	061a      	lsls	r2, r3, #24
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	021b      	lsls	r3, r3, #8
 8009318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800931c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	0a1b      	lsrs	r3, r3, #8
 8009322:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009326:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	0e1b      	lsrs	r3, r3, #24
 800932c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009330:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3738      	adds	r7, #56	; 0x38
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	18000f3a 	.word	0x18000f3a

08009340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e01d      	b.n	800938e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d106      	bne.n	800936c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7f8 f84a 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3304      	adds	r3, #4
 800937c:	4619      	mov	r1, r3
 800937e:	4610      	mov	r0, r2
 8009380:	f000 f9a6 	bl	80096d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0201 	orr.w	r2, r2, #1
 80093ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <HAL_TIM_Base_Start_IT+0x50>)
 80093b8:	4013      	ands	r3, r2
 80093ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b06      	cmp	r3, #6
 80093c0:	d00b      	beq.n	80093da <HAL_TIM_Base_Start_IT+0x42>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093c8:	d007      	beq.n	80093da <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0201 	orr.w	r2, r2, #1
 80093d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	00010007 	.word	0x00010007

080093ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 0201 	bic.w	r2, r2, #1
 8009402:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6a1a      	ldr	r2, [r3, #32]
 800940a:	f241 1311 	movw	r3, #4369	; 0x1111
 800940e:	4013      	ands	r3, r2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10f      	bne.n	8009434 <HAL_TIM_Base_Stop_IT+0x48>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6a1a      	ldr	r2, [r3, #32]
 800941a:	f240 4344 	movw	r3, #1092	; 0x444
 800941e:	4013      	ands	r3, r2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d107      	bne.n	8009434 <HAL_TIM_Base_Stop_IT+0x48>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0201 	bic.w	r2, r2, #1
 8009432:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b02      	cmp	r3, #2
 8009456:	d122      	bne.n	800949e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b02      	cmp	r3, #2
 8009464:	d11b      	bne.n	800949e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f06f 0202 	mvn.w	r2, #2
 800946e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	f003 0303 	and.w	r3, r3, #3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d003      	beq.n	800948c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f905 	bl	8009694 <HAL_TIM_IC_CaptureCallback>
 800948a:	e005      	b.n	8009498 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f8f7 	bl	8009680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f908 	bl	80096a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	d122      	bne.n	80094f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d11b      	bne.n	80094f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f06f 0204 	mvn.w	r2, #4
 80094c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2202      	movs	r2, #2
 80094c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f8db 	bl	8009694 <HAL_TIM_IC_CaptureCallback>
 80094de:	e005      	b.n	80094ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f8cd 	bl	8009680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f8de 	bl	80096a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	f003 0308 	and.w	r3, r3, #8
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d122      	bne.n	8009546 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f003 0308 	and.w	r3, r3, #8
 800950a:	2b08      	cmp	r3, #8
 800950c:	d11b      	bne.n	8009546 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f06f 0208 	mvn.w	r2, #8
 8009516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2204      	movs	r2, #4
 800951c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	f003 0303 	and.w	r3, r3, #3
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f8b1 	bl	8009694 <HAL_TIM_IC_CaptureCallback>
 8009532:	e005      	b.n	8009540 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f8a3 	bl	8009680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f8b4 	bl	80096a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	f003 0310 	and.w	r3, r3, #16
 8009550:	2b10      	cmp	r3, #16
 8009552:	d122      	bne.n	800959a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	f003 0310 	and.w	r3, r3, #16
 800955e:	2b10      	cmp	r3, #16
 8009560:	d11b      	bne.n	800959a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f06f 0210 	mvn.w	r2, #16
 800956a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2208      	movs	r2, #8
 8009570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800957c:	2b00      	cmp	r3, #0
 800957e:	d003      	beq.n	8009588 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f887 	bl	8009694 <HAL_TIM_IC_CaptureCallback>
 8009586:	e005      	b.n	8009594 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f879 	bl	8009680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f88a 	bl	80096a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d10e      	bne.n	80095c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d107      	bne.n	80095c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f06f 0201 	mvn.w	r2, #1
 80095be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7f7 fc11 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d0:	2b80      	cmp	r3, #128	; 0x80
 80095d2:	d10e      	bne.n	80095f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095de:	2b80      	cmp	r3, #128	; 0x80
 80095e0:	d107      	bne.n	80095f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f913 	bl	8009818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009600:	d10e      	bne.n	8009620 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960c:	2b80      	cmp	r3, #128	; 0x80
 800960e:	d107      	bne.n	8009620 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f906 	bl	800982c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962a:	2b40      	cmp	r3, #64	; 0x40
 800962c:	d10e      	bne.n	800964c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009638:	2b40      	cmp	r3, #64	; 0x40
 800963a:	d107      	bne.n	800964c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f838 	bl	80096bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b20      	cmp	r3, #32
 8009658:	d10e      	bne.n	8009678 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	f003 0320 	and.w	r3, r3, #32
 8009664:	2b20      	cmp	r3, #32
 8009666:	d107      	bne.n	8009678 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f06f 0220 	mvn.w	r2, #32
 8009670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f8c6 	bl	8009804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a40      	ldr	r2, [pc, #256]	; (80097e4 <TIM_Base_SetConfig+0x114>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d013      	beq.n	8009710 <TIM_Base_SetConfig+0x40>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ee:	d00f      	beq.n	8009710 <TIM_Base_SetConfig+0x40>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a3d      	ldr	r2, [pc, #244]	; (80097e8 <TIM_Base_SetConfig+0x118>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d00b      	beq.n	8009710 <TIM_Base_SetConfig+0x40>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a3c      	ldr	r2, [pc, #240]	; (80097ec <TIM_Base_SetConfig+0x11c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d007      	beq.n	8009710 <TIM_Base_SetConfig+0x40>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a3b      	ldr	r2, [pc, #236]	; (80097f0 <TIM_Base_SetConfig+0x120>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d003      	beq.n	8009710 <TIM_Base_SetConfig+0x40>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a3a      	ldr	r2, [pc, #232]	; (80097f4 <TIM_Base_SetConfig+0x124>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d108      	bne.n	8009722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	4313      	orrs	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a2f      	ldr	r2, [pc, #188]	; (80097e4 <TIM_Base_SetConfig+0x114>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d01f      	beq.n	800976a <TIM_Base_SetConfig+0x9a>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009730:	d01b      	beq.n	800976a <TIM_Base_SetConfig+0x9a>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a2c      	ldr	r2, [pc, #176]	; (80097e8 <TIM_Base_SetConfig+0x118>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d017      	beq.n	800976a <TIM_Base_SetConfig+0x9a>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a2b      	ldr	r2, [pc, #172]	; (80097ec <TIM_Base_SetConfig+0x11c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d013      	beq.n	800976a <TIM_Base_SetConfig+0x9a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a2a      	ldr	r2, [pc, #168]	; (80097f0 <TIM_Base_SetConfig+0x120>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d00f      	beq.n	800976a <TIM_Base_SetConfig+0x9a>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a29      	ldr	r2, [pc, #164]	; (80097f4 <TIM_Base_SetConfig+0x124>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d00b      	beq.n	800976a <TIM_Base_SetConfig+0x9a>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a28      	ldr	r2, [pc, #160]	; (80097f8 <TIM_Base_SetConfig+0x128>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d007      	beq.n	800976a <TIM_Base_SetConfig+0x9a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a27      	ldr	r2, [pc, #156]	; (80097fc <TIM_Base_SetConfig+0x12c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d003      	beq.n	800976a <TIM_Base_SetConfig+0x9a>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a26      	ldr	r2, [pc, #152]	; (8009800 <TIM_Base_SetConfig+0x130>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d108      	bne.n	800977c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	4313      	orrs	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	4313      	orrs	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a10      	ldr	r2, [pc, #64]	; (80097e4 <TIM_Base_SetConfig+0x114>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d00f      	beq.n	80097c8 <TIM_Base_SetConfig+0xf8>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a12      	ldr	r2, [pc, #72]	; (80097f4 <TIM_Base_SetConfig+0x124>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d00b      	beq.n	80097c8 <TIM_Base_SetConfig+0xf8>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a11      	ldr	r2, [pc, #68]	; (80097f8 <TIM_Base_SetConfig+0x128>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d007      	beq.n	80097c8 <TIM_Base_SetConfig+0xf8>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a10      	ldr	r2, [pc, #64]	; (80097fc <TIM_Base_SetConfig+0x12c>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d003      	beq.n	80097c8 <TIM_Base_SetConfig+0xf8>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a0f      	ldr	r2, [pc, #60]	; (8009800 <TIM_Base_SetConfig+0x130>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d103      	bne.n	80097d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	691a      	ldr	r2, [r3, #16]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	615a      	str	r2, [r3, #20]
}
 80097d6:	bf00      	nop
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40010000 	.word	0x40010000
 80097e8:	40000400 	.word	0x40000400
 80097ec:	40000800 	.word	0x40000800
 80097f0:	40000c00 	.word	0x40000c00
 80097f4:	40010400 	.word	0x40010400
 80097f8:	40014000 	.word	0x40014000
 80097fc:	40014400 	.word	0x40014400
 8009800:	40014800 	.word	0x40014800

08009804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e042      	b.n	80098d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009858:	2b00      	cmp	r3, #0
 800985a:	d106      	bne.n	800986a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7f7 fdf3 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2224      	movs	r2, #36	; 0x24
 800986e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f022 0201 	bic.w	r2, r2, #1
 8009880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f82c 	bl	80098e0 <UART_SetConfig>
 8009888:	4603      	mov	r3, r0
 800988a:	2b01      	cmp	r3, #1
 800988c:	d101      	bne.n	8009892 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e022      	b.n	80098d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009896:	2b00      	cmp	r3, #0
 8009898:	d002      	beq.n	80098a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f002 f99e 	bl	800bbdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f002 fa25 	bl	800bd20 <UART_CheckIdleState>
 80098d6:	4603      	mov	r3, r0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80098e4:	b090      	sub	sp, #64	; 0x40
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	431a      	orrs	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	4313      	orrs	r3, r2
 800990e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009916:	4313      	orrs	r3, r2
 8009918:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	4bc1      	ldr	r3, [pc, #772]	; (8009c28 <UART_SetConfig+0x348>)
 8009922:	4013      	ands	r3, r2
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6812      	ldr	r2, [r2, #0]
 8009928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800992a:	430b      	orrs	r3, r1
 800992c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68da      	ldr	r2, [r3, #12]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	430a      	orrs	r2, r1
 8009942:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4ab7      	ldr	r2, [pc, #732]	; (8009c2c <UART_SetConfig+0x34c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d004      	beq.n	800995e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800995a:	4313      	orrs	r3, r2
 800995c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	689a      	ldr	r2, [r3, #8]
 8009964:	4bb2      	ldr	r3, [pc, #712]	; (8009c30 <UART_SetConfig+0x350>)
 8009966:	4013      	ands	r3, r2
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	6812      	ldr	r2, [r2, #0]
 800996c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800996e:	430b      	orrs	r3, r1
 8009970:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009978:	f023 010f 	bic.w	r1, r3, #15
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4aa9      	ldr	r2, [pc, #676]	; (8009c34 <UART_SetConfig+0x354>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d177      	bne.n	8009a82 <UART_SetConfig+0x1a2>
 8009992:	4ba9      	ldr	r3, [pc, #676]	; (8009c38 <UART_SetConfig+0x358>)
 8009994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800999a:	2b28      	cmp	r3, #40	; 0x28
 800999c:	d86c      	bhi.n	8009a78 <UART_SetConfig+0x198>
 800999e:	a201      	add	r2, pc, #4	; (adr r2, 80099a4 <UART_SetConfig+0xc4>)
 80099a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a4:	08009a49 	.word	0x08009a49
 80099a8:	08009a79 	.word	0x08009a79
 80099ac:	08009a79 	.word	0x08009a79
 80099b0:	08009a79 	.word	0x08009a79
 80099b4:	08009a79 	.word	0x08009a79
 80099b8:	08009a79 	.word	0x08009a79
 80099bc:	08009a79 	.word	0x08009a79
 80099c0:	08009a79 	.word	0x08009a79
 80099c4:	08009a51 	.word	0x08009a51
 80099c8:	08009a79 	.word	0x08009a79
 80099cc:	08009a79 	.word	0x08009a79
 80099d0:	08009a79 	.word	0x08009a79
 80099d4:	08009a79 	.word	0x08009a79
 80099d8:	08009a79 	.word	0x08009a79
 80099dc:	08009a79 	.word	0x08009a79
 80099e0:	08009a79 	.word	0x08009a79
 80099e4:	08009a59 	.word	0x08009a59
 80099e8:	08009a79 	.word	0x08009a79
 80099ec:	08009a79 	.word	0x08009a79
 80099f0:	08009a79 	.word	0x08009a79
 80099f4:	08009a79 	.word	0x08009a79
 80099f8:	08009a79 	.word	0x08009a79
 80099fc:	08009a79 	.word	0x08009a79
 8009a00:	08009a79 	.word	0x08009a79
 8009a04:	08009a61 	.word	0x08009a61
 8009a08:	08009a79 	.word	0x08009a79
 8009a0c:	08009a79 	.word	0x08009a79
 8009a10:	08009a79 	.word	0x08009a79
 8009a14:	08009a79 	.word	0x08009a79
 8009a18:	08009a79 	.word	0x08009a79
 8009a1c:	08009a79 	.word	0x08009a79
 8009a20:	08009a79 	.word	0x08009a79
 8009a24:	08009a69 	.word	0x08009a69
 8009a28:	08009a79 	.word	0x08009a79
 8009a2c:	08009a79 	.word	0x08009a79
 8009a30:	08009a79 	.word	0x08009a79
 8009a34:	08009a79 	.word	0x08009a79
 8009a38:	08009a79 	.word	0x08009a79
 8009a3c:	08009a79 	.word	0x08009a79
 8009a40:	08009a79 	.word	0x08009a79
 8009a44:	08009a71 	.word	0x08009a71
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a4e:	e233      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009a50:	2304      	movs	r3, #4
 8009a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a56:	e22f      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009a58:	2308      	movs	r3, #8
 8009a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a5e:	e22b      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009a60:	2310      	movs	r3, #16
 8009a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a66:	e227      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009a68:	2320      	movs	r3, #32
 8009a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a6e:	e223      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009a70:	2340      	movs	r3, #64	; 0x40
 8009a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a76:	e21f      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009a78:	2380      	movs	r3, #128	; 0x80
 8009a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a7e:	bf00      	nop
 8009a80:	e21a      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a6d      	ldr	r2, [pc, #436]	; (8009c3c <UART_SetConfig+0x35c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d132      	bne.n	8009af2 <UART_SetConfig+0x212>
 8009a8c:	4b6a      	ldr	r3, [pc, #424]	; (8009c38 <UART_SetConfig+0x358>)
 8009a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a90:	f003 0307 	and.w	r3, r3, #7
 8009a94:	2b05      	cmp	r3, #5
 8009a96:	d827      	bhi.n	8009ae8 <UART_SetConfig+0x208>
 8009a98:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <UART_SetConfig+0x1c0>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009ab9 	.word	0x08009ab9
 8009aa4:	08009ac1 	.word	0x08009ac1
 8009aa8:	08009ac9 	.word	0x08009ac9
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009ad9 	.word	0x08009ad9
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009abe:	e1fb      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ac6:	e1f7      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ace:	e1f3      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ad6:	e1ef      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009ad8:	2320      	movs	r3, #32
 8009ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ade:	e1eb      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009ae0:	2340      	movs	r3, #64	; 0x40
 8009ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ae6:	e1e7      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009ae8:	2380      	movs	r3, #128	; 0x80
 8009aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aee:	bf00      	nop
 8009af0:	e1e2      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a52      	ldr	r2, [pc, #328]	; (8009c40 <UART_SetConfig+0x360>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d132      	bne.n	8009b62 <UART_SetConfig+0x282>
 8009afc:	4b4e      	ldr	r3, [pc, #312]	; (8009c38 <UART_SetConfig+0x358>)
 8009afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b00:	f003 0307 	and.w	r3, r3, #7
 8009b04:	2b05      	cmp	r3, #5
 8009b06:	d827      	bhi.n	8009b58 <UART_SetConfig+0x278>
 8009b08:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <UART_SetConfig+0x230>)
 8009b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0e:	bf00      	nop
 8009b10:	08009b29 	.word	0x08009b29
 8009b14:	08009b31 	.word	0x08009b31
 8009b18:	08009b39 	.word	0x08009b39
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b49 	.word	0x08009b49
 8009b24:	08009b51 	.word	0x08009b51
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b2e:	e1c3      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009b30:	2304      	movs	r3, #4
 8009b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b36:	e1bf      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009b38:	2308      	movs	r3, #8
 8009b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b3e:	e1bb      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009b40:	2310      	movs	r3, #16
 8009b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b46:	e1b7      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009b48:	2320      	movs	r3, #32
 8009b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b4e:	e1b3      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009b50:	2340      	movs	r3, #64	; 0x40
 8009b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b56:	e1af      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009b58:	2380      	movs	r3, #128	; 0x80
 8009b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b5e:	bf00      	nop
 8009b60:	e1aa      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a37      	ldr	r2, [pc, #220]	; (8009c44 <UART_SetConfig+0x364>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d132      	bne.n	8009bd2 <UART_SetConfig+0x2f2>
 8009b6c:	4b32      	ldr	r3, [pc, #200]	; (8009c38 <UART_SetConfig+0x358>)
 8009b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b70:	f003 0307 	and.w	r3, r3, #7
 8009b74:	2b05      	cmp	r3, #5
 8009b76:	d827      	bhi.n	8009bc8 <UART_SetConfig+0x2e8>
 8009b78:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <UART_SetConfig+0x2a0>)
 8009b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7e:	bf00      	nop
 8009b80:	08009b99 	.word	0x08009b99
 8009b84:	08009ba1 	.word	0x08009ba1
 8009b88:	08009ba9 	.word	0x08009ba9
 8009b8c:	08009bb1 	.word	0x08009bb1
 8009b90:	08009bb9 	.word	0x08009bb9
 8009b94:	08009bc1 	.word	0x08009bc1
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b9e:	e18b      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009ba0:	2304      	movs	r3, #4
 8009ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ba6:	e187      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009ba8:	2308      	movs	r3, #8
 8009baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bae:	e183      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009bb0:	2310      	movs	r3, #16
 8009bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bb6:	e17f      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009bb8:	2320      	movs	r3, #32
 8009bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bbe:	e17b      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009bc0:	2340      	movs	r3, #64	; 0x40
 8009bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bc6:	e177      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009bc8:	2380      	movs	r3, #128	; 0x80
 8009bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bce:	bf00      	nop
 8009bd0:	e172      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a1c      	ldr	r2, [pc, #112]	; (8009c48 <UART_SetConfig+0x368>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d144      	bne.n	8009c66 <UART_SetConfig+0x386>
 8009bdc:	4b16      	ldr	r3, [pc, #88]	; (8009c38 <UART_SetConfig+0x358>)
 8009bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be0:	f003 0307 	and.w	r3, r3, #7
 8009be4:	2b05      	cmp	r3, #5
 8009be6:	d839      	bhi.n	8009c5c <UART_SetConfig+0x37c>
 8009be8:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <UART_SetConfig+0x310>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009c09 	.word	0x08009c09
 8009bf4:	08009c11 	.word	0x08009c11
 8009bf8:	08009c19 	.word	0x08009c19
 8009bfc:	08009c21 	.word	0x08009c21
 8009c00:	08009c4d 	.word	0x08009c4d
 8009c04:	08009c55 	.word	0x08009c55
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c0e:	e153      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009c10:	2304      	movs	r3, #4
 8009c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c16:	e14f      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009c18:	2308      	movs	r3, #8
 8009c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c1e:	e14b      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009c20:	2310      	movs	r3, #16
 8009c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c26:	e147      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009c28:	cfff69f3 	.word	0xcfff69f3
 8009c2c:	58000c00 	.word	0x58000c00
 8009c30:	11fff4ff 	.word	0x11fff4ff
 8009c34:	40011000 	.word	0x40011000
 8009c38:	58024400 	.word	0x58024400
 8009c3c:	40004400 	.word	0x40004400
 8009c40:	40004800 	.word	0x40004800
 8009c44:	40004c00 	.word	0x40004c00
 8009c48:	40005000 	.word	0x40005000
 8009c4c:	2320      	movs	r3, #32
 8009c4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c52:	e131      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009c54:	2340      	movs	r3, #64	; 0x40
 8009c56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c5a:	e12d      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009c5c:	2380      	movs	r3, #128	; 0x80
 8009c5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c62:	bf00      	nop
 8009c64:	e128      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4ac3      	ldr	r2, [pc, #780]	; (8009f78 <UART_SetConfig+0x698>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d178      	bne.n	8009d62 <UART_SetConfig+0x482>
 8009c70:	4bc2      	ldr	r3, [pc, #776]	; (8009f7c <UART_SetConfig+0x69c>)
 8009c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c78:	2b28      	cmp	r3, #40	; 0x28
 8009c7a:	d86d      	bhi.n	8009d58 <UART_SetConfig+0x478>
 8009c7c:	a201      	add	r2, pc, #4	; (adr r2, 8009c84 <UART_SetConfig+0x3a4>)
 8009c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c82:	bf00      	nop
 8009c84:	08009d29 	.word	0x08009d29
 8009c88:	08009d59 	.word	0x08009d59
 8009c8c:	08009d59 	.word	0x08009d59
 8009c90:	08009d59 	.word	0x08009d59
 8009c94:	08009d59 	.word	0x08009d59
 8009c98:	08009d59 	.word	0x08009d59
 8009c9c:	08009d59 	.word	0x08009d59
 8009ca0:	08009d59 	.word	0x08009d59
 8009ca4:	08009d31 	.word	0x08009d31
 8009ca8:	08009d59 	.word	0x08009d59
 8009cac:	08009d59 	.word	0x08009d59
 8009cb0:	08009d59 	.word	0x08009d59
 8009cb4:	08009d59 	.word	0x08009d59
 8009cb8:	08009d59 	.word	0x08009d59
 8009cbc:	08009d59 	.word	0x08009d59
 8009cc0:	08009d59 	.word	0x08009d59
 8009cc4:	08009d39 	.word	0x08009d39
 8009cc8:	08009d59 	.word	0x08009d59
 8009ccc:	08009d59 	.word	0x08009d59
 8009cd0:	08009d59 	.word	0x08009d59
 8009cd4:	08009d59 	.word	0x08009d59
 8009cd8:	08009d59 	.word	0x08009d59
 8009cdc:	08009d59 	.word	0x08009d59
 8009ce0:	08009d59 	.word	0x08009d59
 8009ce4:	08009d41 	.word	0x08009d41
 8009ce8:	08009d59 	.word	0x08009d59
 8009cec:	08009d59 	.word	0x08009d59
 8009cf0:	08009d59 	.word	0x08009d59
 8009cf4:	08009d59 	.word	0x08009d59
 8009cf8:	08009d59 	.word	0x08009d59
 8009cfc:	08009d59 	.word	0x08009d59
 8009d00:	08009d59 	.word	0x08009d59
 8009d04:	08009d49 	.word	0x08009d49
 8009d08:	08009d59 	.word	0x08009d59
 8009d0c:	08009d59 	.word	0x08009d59
 8009d10:	08009d59 	.word	0x08009d59
 8009d14:	08009d59 	.word	0x08009d59
 8009d18:	08009d59 	.word	0x08009d59
 8009d1c:	08009d59 	.word	0x08009d59
 8009d20:	08009d59 	.word	0x08009d59
 8009d24:	08009d51 	.word	0x08009d51
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d2e:	e0c3      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009d30:	2304      	movs	r3, #4
 8009d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d36:	e0bf      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009d38:	2308      	movs	r3, #8
 8009d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d3e:	e0bb      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009d40:	2310      	movs	r3, #16
 8009d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d46:	e0b7      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009d48:	2320      	movs	r3, #32
 8009d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d4e:	e0b3      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d56:	e0af      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009d58:	2380      	movs	r3, #128	; 0x80
 8009d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d5e:	bf00      	nop
 8009d60:	e0aa      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a86      	ldr	r2, [pc, #536]	; (8009f80 <UART_SetConfig+0x6a0>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d132      	bne.n	8009dd2 <UART_SetConfig+0x4f2>
 8009d6c:	4b83      	ldr	r3, [pc, #524]	; (8009f7c <UART_SetConfig+0x69c>)
 8009d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d70:	f003 0307 	and.w	r3, r3, #7
 8009d74:	2b05      	cmp	r3, #5
 8009d76:	d827      	bhi.n	8009dc8 <UART_SetConfig+0x4e8>
 8009d78:	a201      	add	r2, pc, #4	; (adr r2, 8009d80 <UART_SetConfig+0x4a0>)
 8009d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7e:	bf00      	nop
 8009d80:	08009d99 	.word	0x08009d99
 8009d84:	08009da1 	.word	0x08009da1
 8009d88:	08009da9 	.word	0x08009da9
 8009d8c:	08009db1 	.word	0x08009db1
 8009d90:	08009db9 	.word	0x08009db9
 8009d94:	08009dc1 	.word	0x08009dc1
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d9e:	e08b      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009da0:	2304      	movs	r3, #4
 8009da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009da6:	e087      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009da8:	2308      	movs	r3, #8
 8009daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dae:	e083      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009db0:	2310      	movs	r3, #16
 8009db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009db6:	e07f      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009db8:	2320      	movs	r3, #32
 8009dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dbe:	e07b      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009dc0:	2340      	movs	r3, #64	; 0x40
 8009dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dc6:	e077      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dce:	bf00      	nop
 8009dd0:	e072      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a6b      	ldr	r2, [pc, #428]	; (8009f84 <UART_SetConfig+0x6a4>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d132      	bne.n	8009e42 <UART_SetConfig+0x562>
 8009ddc:	4b67      	ldr	r3, [pc, #412]	; (8009f7c <UART_SetConfig+0x69c>)
 8009dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de0:	f003 0307 	and.w	r3, r3, #7
 8009de4:	2b05      	cmp	r3, #5
 8009de6:	d827      	bhi.n	8009e38 <UART_SetConfig+0x558>
 8009de8:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <UART_SetConfig+0x510>)
 8009dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dee:	bf00      	nop
 8009df0:	08009e09 	.word	0x08009e09
 8009df4:	08009e11 	.word	0x08009e11
 8009df8:	08009e19 	.word	0x08009e19
 8009dfc:	08009e21 	.word	0x08009e21
 8009e00:	08009e29 	.word	0x08009e29
 8009e04:	08009e31 	.word	0x08009e31
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e0e:	e053      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e10:	2304      	movs	r3, #4
 8009e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e16:	e04f      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e18:	2308      	movs	r3, #8
 8009e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e1e:	e04b      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e20:	2310      	movs	r3, #16
 8009e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e26:	e047      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e28:	2320      	movs	r3, #32
 8009e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e2e:	e043      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e30:	2340      	movs	r3, #64	; 0x40
 8009e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e36:	e03f      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e38:	2380      	movs	r3, #128	; 0x80
 8009e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e3e:	bf00      	nop
 8009e40:	e03a      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a50      	ldr	r2, [pc, #320]	; (8009f88 <UART_SetConfig+0x6a8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d132      	bne.n	8009eb2 <UART_SetConfig+0x5d2>
 8009e4c:	4b4b      	ldr	r3, [pc, #300]	; (8009f7c <UART_SetConfig+0x69c>)
 8009e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e50:	f003 0307 	and.w	r3, r3, #7
 8009e54:	2b05      	cmp	r3, #5
 8009e56:	d827      	bhi.n	8009ea8 <UART_SetConfig+0x5c8>
 8009e58:	a201      	add	r2, pc, #4	; (adr r2, 8009e60 <UART_SetConfig+0x580>)
 8009e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5e:	bf00      	nop
 8009e60:	08009e79 	.word	0x08009e79
 8009e64:	08009e81 	.word	0x08009e81
 8009e68:	08009e89 	.word	0x08009e89
 8009e6c:	08009e91 	.word	0x08009e91
 8009e70:	08009e99 	.word	0x08009e99
 8009e74:	08009ea1 	.word	0x08009ea1
 8009e78:	2302      	movs	r3, #2
 8009e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e7e:	e01b      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e80:	2304      	movs	r3, #4
 8009e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e86:	e017      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e88:	2308      	movs	r3, #8
 8009e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e8e:	e013      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e90:	2310      	movs	r3, #16
 8009e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e96:	e00f      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009e98:	2320      	movs	r3, #32
 8009e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e9e:	e00b      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009ea0:	2340      	movs	r3, #64	; 0x40
 8009ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ea6:	e007      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009ea8:	2380      	movs	r3, #128	; 0x80
 8009eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eae:	bf00      	nop
 8009eb0:	e002      	b.n	8009eb8 <UART_SetConfig+0x5d8>
 8009eb2:	2380      	movs	r3, #128	; 0x80
 8009eb4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a32      	ldr	r2, [pc, #200]	; (8009f88 <UART_SetConfig+0x6a8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	f040 86f7 	bne.w	800acb2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ec4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	f000 80c0 	beq.w	800a04e <UART_SetConfig+0x76e>
 8009ece:	2b08      	cmp	r3, #8
 8009ed0:	dc04      	bgt.n	8009edc <UART_SetConfig+0x5fc>
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d00c      	beq.n	8009ef0 <UART_SetConfig+0x610>
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d065      	beq.n	8009fa6 <UART_SetConfig+0x6c6>
 8009eda:	e27a      	b.n	800a3d2 <UART_SetConfig+0xaf2>
 8009edc:	2b20      	cmp	r3, #32
 8009ede:	f000 81b0 	beq.w	800a242 <UART_SetConfig+0x962>
 8009ee2:	2b40      	cmp	r3, #64	; 0x40
 8009ee4:	f000 821e 	beq.w	800a324 <UART_SetConfig+0xa44>
 8009ee8:	2b10      	cmp	r3, #16
 8009eea:	f000 8104 	beq.w	800a0f6 <UART_SetConfig+0x816>
 8009eee:	e270      	b.n	800a3d2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009ef0:	f7fc fdd0 	bl	8006a94 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d04e      	beq.n	8009f9c <UART_SetConfig+0x6bc>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d048      	beq.n	8009f98 <UART_SetConfig+0x6b8>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d042      	beq.n	8009f94 <UART_SetConfig+0x6b4>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d03c      	beq.n	8009f90 <UART_SetConfig+0x6b0>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	2b04      	cmp	r3, #4
 8009f1c:	d036      	beq.n	8009f8c <UART_SetConfig+0x6ac>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d026      	beq.n	8009f74 <UART_SetConfig+0x694>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2a:	2b06      	cmp	r3, #6
 8009f2c:	d020      	beq.n	8009f70 <UART_SetConfig+0x690>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	2b07      	cmp	r3, #7
 8009f34:	d01a      	beq.n	8009f6c <UART_SetConfig+0x68c>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	2b08      	cmp	r3, #8
 8009f3c:	d014      	beq.n	8009f68 <UART_SetConfig+0x688>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f42:	2b09      	cmp	r3, #9
 8009f44:	d00e      	beq.n	8009f64 <UART_SetConfig+0x684>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	2b0a      	cmp	r3, #10
 8009f4c:	d008      	beq.n	8009f60 <UART_SetConfig+0x680>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	2b0b      	cmp	r3, #11
 8009f54:	d102      	bne.n	8009f5c <UART_SetConfig+0x67c>
 8009f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f5a:	e020      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e01e      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f60:	2380      	movs	r3, #128	; 0x80
 8009f62:	e01c      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f64:	2340      	movs	r3, #64	; 0x40
 8009f66:	e01a      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f68:	2320      	movs	r3, #32
 8009f6a:	e018      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f6c:	2310      	movs	r3, #16
 8009f6e:	e016      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f70:	230c      	movs	r3, #12
 8009f72:	e014      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f74:	230a      	movs	r3, #10
 8009f76:	e012      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f78:	40011400 	.word	0x40011400
 8009f7c:	58024400 	.word	0x58024400
 8009f80:	40007800 	.word	0x40007800
 8009f84:	40007c00 	.word	0x40007c00
 8009f88:	58000c00 	.word	0x58000c00
 8009f8c:	2308      	movs	r3, #8
 8009f8e:	e006      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f90:	2306      	movs	r3, #6
 8009f92:	e004      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f94:	2304      	movs	r3, #4
 8009f96:	e002      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	e000      	b.n	8009f9e <UART_SetConfig+0x6be>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fa4:	e219      	b.n	800a3da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fa6:	f107 0318 	add.w	r3, r7, #24
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fc fd88 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009fb0:	69fa      	ldr	r2, [r7, #28]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d044      	beq.n	800a044 <UART_SetConfig+0x764>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d03e      	beq.n	800a040 <UART_SetConfig+0x760>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d038      	beq.n	800a03c <UART_SetConfig+0x75c>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d032      	beq.n	800a038 <UART_SetConfig+0x758>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	2b04      	cmp	r3, #4
 8009fd8:	d02c      	beq.n	800a034 <UART_SetConfig+0x754>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b05      	cmp	r3, #5
 8009fe0:	d026      	beq.n	800a030 <UART_SetConfig+0x750>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2b06      	cmp	r3, #6
 8009fe8:	d020      	beq.n	800a02c <UART_SetConfig+0x74c>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	2b07      	cmp	r3, #7
 8009ff0:	d01a      	beq.n	800a028 <UART_SetConfig+0x748>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	2b08      	cmp	r3, #8
 8009ff8:	d014      	beq.n	800a024 <UART_SetConfig+0x744>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	d00e      	beq.n	800a020 <UART_SetConfig+0x740>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2b0a      	cmp	r3, #10
 800a008:	d008      	beq.n	800a01c <UART_SetConfig+0x73c>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	2b0b      	cmp	r3, #11
 800a010:	d102      	bne.n	800a018 <UART_SetConfig+0x738>
 800a012:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a016:	e016      	b.n	800a046 <UART_SetConfig+0x766>
 800a018:	2301      	movs	r3, #1
 800a01a:	e014      	b.n	800a046 <UART_SetConfig+0x766>
 800a01c:	2380      	movs	r3, #128	; 0x80
 800a01e:	e012      	b.n	800a046 <UART_SetConfig+0x766>
 800a020:	2340      	movs	r3, #64	; 0x40
 800a022:	e010      	b.n	800a046 <UART_SetConfig+0x766>
 800a024:	2320      	movs	r3, #32
 800a026:	e00e      	b.n	800a046 <UART_SetConfig+0x766>
 800a028:	2310      	movs	r3, #16
 800a02a:	e00c      	b.n	800a046 <UART_SetConfig+0x766>
 800a02c:	230c      	movs	r3, #12
 800a02e:	e00a      	b.n	800a046 <UART_SetConfig+0x766>
 800a030:	230a      	movs	r3, #10
 800a032:	e008      	b.n	800a046 <UART_SetConfig+0x766>
 800a034:	2308      	movs	r3, #8
 800a036:	e006      	b.n	800a046 <UART_SetConfig+0x766>
 800a038:	2306      	movs	r3, #6
 800a03a:	e004      	b.n	800a046 <UART_SetConfig+0x766>
 800a03c:	2304      	movs	r3, #4
 800a03e:	e002      	b.n	800a046 <UART_SetConfig+0x766>
 800a040:	2302      	movs	r3, #2
 800a042:	e000      	b.n	800a046 <UART_SetConfig+0x766>
 800a044:	2301      	movs	r3, #1
 800a046:	fbb2 f3f3 	udiv	r3, r2, r3
 800a04a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a04c:	e1c5      	b.n	800a3da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a04e:	f107 030c 	add.w	r3, r7, #12
 800a052:	4618      	mov	r0, r3
 800a054:	f7fc fe80 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d044      	beq.n	800a0ec <UART_SetConfig+0x80c>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	2b01      	cmp	r3, #1
 800a068:	d03e      	beq.n	800a0e8 <UART_SetConfig+0x808>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d038      	beq.n	800a0e4 <UART_SetConfig+0x804>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	2b03      	cmp	r3, #3
 800a078:	d032      	beq.n	800a0e0 <UART_SetConfig+0x800>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d02c      	beq.n	800a0dc <UART_SetConfig+0x7fc>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	2b05      	cmp	r3, #5
 800a088:	d026      	beq.n	800a0d8 <UART_SetConfig+0x7f8>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08e:	2b06      	cmp	r3, #6
 800a090:	d020      	beq.n	800a0d4 <UART_SetConfig+0x7f4>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	2b07      	cmp	r3, #7
 800a098:	d01a      	beq.n	800a0d0 <UART_SetConfig+0x7f0>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	2b08      	cmp	r3, #8
 800a0a0:	d014      	beq.n	800a0cc <UART_SetConfig+0x7ec>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	2b09      	cmp	r3, #9
 800a0a8:	d00e      	beq.n	800a0c8 <UART_SetConfig+0x7e8>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	2b0a      	cmp	r3, #10
 800a0b0:	d008      	beq.n	800a0c4 <UART_SetConfig+0x7e4>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	2b0b      	cmp	r3, #11
 800a0b8:	d102      	bne.n	800a0c0 <UART_SetConfig+0x7e0>
 800a0ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0be:	e016      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e014      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0c4:	2380      	movs	r3, #128	; 0x80
 800a0c6:	e012      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0c8:	2340      	movs	r3, #64	; 0x40
 800a0ca:	e010      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0cc:	2320      	movs	r3, #32
 800a0ce:	e00e      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0d0:	2310      	movs	r3, #16
 800a0d2:	e00c      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0d4:	230c      	movs	r3, #12
 800a0d6:	e00a      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0d8:	230a      	movs	r3, #10
 800a0da:	e008      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0dc:	2308      	movs	r3, #8
 800a0de:	e006      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0e0:	2306      	movs	r3, #6
 800a0e2:	e004      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0e4:	2304      	movs	r3, #4
 800a0e6:	e002      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	e000      	b.n	800a0ee <UART_SetConfig+0x80e>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0f4:	e171      	b.n	800a3da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0f6:	4b7a      	ldr	r3, [pc, #488]	; (800a2e0 <UART_SetConfig+0xa00>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0320 	and.w	r3, r3, #32
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d054      	beq.n	800a1ac <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a102:	4b77      	ldr	r3, [pc, #476]	; (800a2e0 <UART_SetConfig+0xa00>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	08db      	lsrs	r3, r3, #3
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	4a75      	ldr	r2, [pc, #468]	; (800a2e4 <UART_SetConfig+0xa04>)
 800a10e:	40da      	lsrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a114:	2b00      	cmp	r3, #0
 800a116:	d044      	beq.n	800a1a2 <UART_SetConfig+0x8c2>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d03e      	beq.n	800a19e <UART_SetConfig+0x8be>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	2b02      	cmp	r3, #2
 800a126:	d038      	beq.n	800a19a <UART_SetConfig+0x8ba>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d032      	beq.n	800a196 <UART_SetConfig+0x8b6>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a134:	2b04      	cmp	r3, #4
 800a136:	d02c      	beq.n	800a192 <UART_SetConfig+0x8b2>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	2b05      	cmp	r3, #5
 800a13e:	d026      	beq.n	800a18e <UART_SetConfig+0x8ae>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a144:	2b06      	cmp	r3, #6
 800a146:	d020      	beq.n	800a18a <UART_SetConfig+0x8aa>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	2b07      	cmp	r3, #7
 800a14e:	d01a      	beq.n	800a186 <UART_SetConfig+0x8a6>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	2b08      	cmp	r3, #8
 800a156:	d014      	beq.n	800a182 <UART_SetConfig+0x8a2>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	2b09      	cmp	r3, #9
 800a15e:	d00e      	beq.n	800a17e <UART_SetConfig+0x89e>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	2b0a      	cmp	r3, #10
 800a166:	d008      	beq.n	800a17a <UART_SetConfig+0x89a>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16c:	2b0b      	cmp	r3, #11
 800a16e:	d102      	bne.n	800a176 <UART_SetConfig+0x896>
 800a170:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a174:	e016      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a176:	2301      	movs	r3, #1
 800a178:	e014      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a17a:	2380      	movs	r3, #128	; 0x80
 800a17c:	e012      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a17e:	2340      	movs	r3, #64	; 0x40
 800a180:	e010      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a182:	2320      	movs	r3, #32
 800a184:	e00e      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a186:	2310      	movs	r3, #16
 800a188:	e00c      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a18a:	230c      	movs	r3, #12
 800a18c:	e00a      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a18e:	230a      	movs	r3, #10
 800a190:	e008      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a192:	2308      	movs	r3, #8
 800a194:	e006      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a196:	2306      	movs	r3, #6
 800a198:	e004      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a19a:	2304      	movs	r3, #4
 800a19c:	e002      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	e000      	b.n	800a1a4 <UART_SetConfig+0x8c4>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a1aa:	e116      	b.n	800a3da <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d043      	beq.n	800a23c <UART_SetConfig+0x95c>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d03d      	beq.n	800a238 <UART_SetConfig+0x958>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d037      	beq.n	800a234 <UART_SetConfig+0x954>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d031      	beq.n	800a230 <UART_SetConfig+0x950>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d0:	2b04      	cmp	r3, #4
 800a1d2:	d02b      	beq.n	800a22c <UART_SetConfig+0x94c>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	2b05      	cmp	r3, #5
 800a1da:	d025      	beq.n	800a228 <UART_SetConfig+0x948>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	2b06      	cmp	r3, #6
 800a1e2:	d01f      	beq.n	800a224 <UART_SetConfig+0x944>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e8:	2b07      	cmp	r3, #7
 800a1ea:	d019      	beq.n	800a220 <UART_SetConfig+0x940>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f0:	2b08      	cmp	r3, #8
 800a1f2:	d013      	beq.n	800a21c <UART_SetConfig+0x93c>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	2b09      	cmp	r3, #9
 800a1fa:	d00d      	beq.n	800a218 <UART_SetConfig+0x938>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a200:	2b0a      	cmp	r3, #10
 800a202:	d007      	beq.n	800a214 <UART_SetConfig+0x934>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a208:	2b0b      	cmp	r3, #11
 800a20a:	d101      	bne.n	800a210 <UART_SetConfig+0x930>
 800a20c:	4b36      	ldr	r3, [pc, #216]	; (800a2e8 <UART_SetConfig+0xa08>)
 800a20e:	e016      	b.n	800a23e <UART_SetConfig+0x95e>
 800a210:	4b34      	ldr	r3, [pc, #208]	; (800a2e4 <UART_SetConfig+0xa04>)
 800a212:	e014      	b.n	800a23e <UART_SetConfig+0x95e>
 800a214:	4b35      	ldr	r3, [pc, #212]	; (800a2ec <UART_SetConfig+0xa0c>)
 800a216:	e012      	b.n	800a23e <UART_SetConfig+0x95e>
 800a218:	4b35      	ldr	r3, [pc, #212]	; (800a2f0 <UART_SetConfig+0xa10>)
 800a21a:	e010      	b.n	800a23e <UART_SetConfig+0x95e>
 800a21c:	4b35      	ldr	r3, [pc, #212]	; (800a2f4 <UART_SetConfig+0xa14>)
 800a21e:	e00e      	b.n	800a23e <UART_SetConfig+0x95e>
 800a220:	4b35      	ldr	r3, [pc, #212]	; (800a2f8 <UART_SetConfig+0xa18>)
 800a222:	e00c      	b.n	800a23e <UART_SetConfig+0x95e>
 800a224:	4b35      	ldr	r3, [pc, #212]	; (800a2fc <UART_SetConfig+0xa1c>)
 800a226:	e00a      	b.n	800a23e <UART_SetConfig+0x95e>
 800a228:	4b35      	ldr	r3, [pc, #212]	; (800a300 <UART_SetConfig+0xa20>)
 800a22a:	e008      	b.n	800a23e <UART_SetConfig+0x95e>
 800a22c:	4b35      	ldr	r3, [pc, #212]	; (800a304 <UART_SetConfig+0xa24>)
 800a22e:	e006      	b.n	800a23e <UART_SetConfig+0x95e>
 800a230:	4b35      	ldr	r3, [pc, #212]	; (800a308 <UART_SetConfig+0xa28>)
 800a232:	e004      	b.n	800a23e <UART_SetConfig+0x95e>
 800a234:	4b35      	ldr	r3, [pc, #212]	; (800a30c <UART_SetConfig+0xa2c>)
 800a236:	e002      	b.n	800a23e <UART_SetConfig+0x95e>
 800a238:	4b35      	ldr	r3, [pc, #212]	; (800a310 <UART_SetConfig+0xa30>)
 800a23a:	e000      	b.n	800a23e <UART_SetConfig+0x95e>
 800a23c:	4b29      	ldr	r3, [pc, #164]	; (800a2e4 <UART_SetConfig+0xa04>)
 800a23e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a240:	e0cb      	b.n	800a3da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a246:	2b00      	cmp	r3, #0
 800a248:	d046      	beq.n	800a2d8 <UART_SetConfig+0x9f8>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d040      	beq.n	800a2d4 <UART_SetConfig+0x9f4>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b02      	cmp	r3, #2
 800a258:	d03a      	beq.n	800a2d0 <UART_SetConfig+0x9f0>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d034      	beq.n	800a2cc <UART_SetConfig+0x9ec>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	2b04      	cmp	r3, #4
 800a268:	d02e      	beq.n	800a2c8 <UART_SetConfig+0x9e8>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2b05      	cmp	r3, #5
 800a270:	d028      	beq.n	800a2c4 <UART_SetConfig+0x9e4>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	2b06      	cmp	r3, #6
 800a278:	d022      	beq.n	800a2c0 <UART_SetConfig+0x9e0>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	2b07      	cmp	r3, #7
 800a280:	d01c      	beq.n	800a2bc <UART_SetConfig+0x9dc>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	2b08      	cmp	r3, #8
 800a288:	d016      	beq.n	800a2b8 <UART_SetConfig+0x9d8>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b09      	cmp	r3, #9
 800a290:	d00f      	beq.n	800a2b2 <UART_SetConfig+0x9d2>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	2b0a      	cmp	r3, #10
 800a298:	d008      	beq.n	800a2ac <UART_SetConfig+0x9cc>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	2b0b      	cmp	r3, #11
 800a2a0:	d102      	bne.n	800a2a8 <UART_SetConfig+0x9c8>
 800a2a2:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a2a6:	e018      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2a8:	4b13      	ldr	r3, [pc, #76]	; (800a2f8 <UART_SetConfig+0xa18>)
 800a2aa:	e016      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2ac:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a2b0:	e013      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a2b6:	e010      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2b8:	4b16      	ldr	r3, [pc, #88]	; (800a314 <UART_SetConfig+0xa34>)
 800a2ba:	e00e      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <UART_SetConfig+0xa08>)
 800a2be:	e00c      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2c0:	4b15      	ldr	r3, [pc, #84]	; (800a318 <UART_SetConfig+0xa38>)
 800a2c2:	e00a      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2c4:	4b15      	ldr	r3, [pc, #84]	; (800a31c <UART_SetConfig+0xa3c>)
 800a2c6:	e008      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2c8:	4b08      	ldr	r3, [pc, #32]	; (800a2ec <UART_SetConfig+0xa0c>)
 800a2ca:	e006      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2cc:	4b14      	ldr	r3, [pc, #80]	; (800a320 <UART_SetConfig+0xa40>)
 800a2ce:	e004      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2d0:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <UART_SetConfig+0xa10>)
 800a2d2:	e002      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2d4:	4b07      	ldr	r3, [pc, #28]	; (800a2f4 <UART_SetConfig+0xa14>)
 800a2d6:	e000      	b.n	800a2da <UART_SetConfig+0x9fa>
 800a2d8:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <UART_SetConfig+0xa18>)
 800a2da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2dc:	e07d      	b.n	800a3da <UART_SetConfig+0xafa>
 800a2de:	bf00      	nop
 800a2e0:	58024400 	.word	0x58024400
 800a2e4:	03d09000 	.word	0x03d09000
 800a2e8:	0003d090 	.word	0x0003d090
 800a2ec:	0007a120 	.word	0x0007a120
 800a2f0:	000f4240 	.word	0x000f4240
 800a2f4:	001e8480 	.word	0x001e8480
 800a2f8:	003d0900 	.word	0x003d0900
 800a2fc:	00516155 	.word	0x00516155
 800a300:	0061a800 	.word	0x0061a800
 800a304:	007a1200 	.word	0x007a1200
 800a308:	00a2c2aa 	.word	0x00a2c2aa
 800a30c:	00f42400 	.word	0x00f42400
 800a310:	01e84800 	.word	0x01e84800
 800a314:	0001e848 	.word	0x0001e848
 800a318:	00051615 	.word	0x00051615
 800a31c:	00061a80 	.word	0x00061a80
 800a320:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d04e      	beq.n	800a3ca <UART_SetConfig+0xaea>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	2b01      	cmp	r3, #1
 800a332:	d047      	beq.n	800a3c4 <UART_SetConfig+0xae4>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d040      	beq.n	800a3be <UART_SetConfig+0xade>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2b03      	cmp	r3, #3
 800a342:	d039      	beq.n	800a3b8 <UART_SetConfig+0xad8>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d032      	beq.n	800a3b2 <UART_SetConfig+0xad2>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	2b05      	cmp	r3, #5
 800a352:	d02b      	beq.n	800a3ac <UART_SetConfig+0xacc>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	2b06      	cmp	r3, #6
 800a35a:	d024      	beq.n	800a3a6 <UART_SetConfig+0xac6>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	2b07      	cmp	r3, #7
 800a362:	d01d      	beq.n	800a3a0 <UART_SetConfig+0xac0>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d016      	beq.n	800a39a <UART_SetConfig+0xaba>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a370:	2b09      	cmp	r3, #9
 800a372:	d00f      	beq.n	800a394 <UART_SetConfig+0xab4>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a378:	2b0a      	cmp	r3, #10
 800a37a:	d008      	beq.n	800a38e <UART_SetConfig+0xaae>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a380:	2b0b      	cmp	r3, #11
 800a382:	d101      	bne.n	800a388 <UART_SetConfig+0xaa8>
 800a384:	2380      	movs	r3, #128	; 0x80
 800a386:	e022      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a38c:	e01f      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a38e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a392:	e01c      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a394:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a398:	e019      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a39e:	e016      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a3a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3a4:	e013      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a3a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a3aa:	e010      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a3ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a3b0:	e00d      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a3b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3b6:	e00a      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a3b8:	f241 5355 	movw	r3, #5461	; 0x1555
 800a3bc:	e007      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a3be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3c2:	e004      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a3c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a3c8:	e001      	b.n	800a3ce <UART_SetConfig+0xaee>
 800a3ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3d0:	e003      	b.n	800a3da <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a3d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f001 83e8 	beq.w	800bbb2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	685a      	ldr	r2, [r3, #4]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	4413      	add	r3, r2
 800a3ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d305      	bcc.n	800a3fe <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d904      	bls.n	800a408 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a404:	f001 bbd5 	b.w	800bbb2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a408:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a40c:	2b08      	cmp	r3, #8
 800a40e:	f000 8154 	beq.w	800a6ba <UART_SetConfig+0xdda>
 800a412:	2b08      	cmp	r3, #8
 800a414:	dc06      	bgt.n	800a424 <UART_SetConfig+0xb44>
 800a416:	2b02      	cmp	r3, #2
 800a418:	d00f      	beq.n	800a43a <UART_SetConfig+0xb5a>
 800a41a:	2b04      	cmp	r3, #4
 800a41c:	f000 80ac 	beq.w	800a578 <UART_SetConfig+0xc98>
 800a420:	f000 bc30 	b.w	800ac84 <UART_SetConfig+0x13a4>
 800a424:	2b20      	cmp	r3, #32
 800a426:	f000 832d 	beq.w	800aa84 <UART_SetConfig+0x11a4>
 800a42a:	2b40      	cmp	r3, #64	; 0x40
 800a42c:	f000 83a5 	beq.w	800ab7a <UART_SetConfig+0x129a>
 800a430:	2b10      	cmp	r3, #16
 800a432:	f000 81e3 	beq.w	800a7fc <UART_SetConfig+0xf1c>
 800a436:	f000 bc25 	b.w	800ac84 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a43a:	f7fc fb2b 	bl	8006a94 <HAL_RCCEx_GetD3PCLK1Freq>
 800a43e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	4618      	mov	r0, r3
 800a444:	f04f 0100 	mov.w	r1, #0
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d067      	beq.n	800a520 <UART_SetConfig+0xc40>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a454:	2b01      	cmp	r3, #1
 800a456:	d05e      	beq.n	800a516 <UART_SetConfig+0xc36>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d055      	beq.n	800a50c <UART_SetConfig+0xc2c>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	2b03      	cmp	r3, #3
 800a466:	d04c      	beq.n	800a502 <UART_SetConfig+0xc22>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	d043      	beq.n	800a4f8 <UART_SetConfig+0xc18>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	2b05      	cmp	r3, #5
 800a476:	d03a      	beq.n	800a4ee <UART_SetConfig+0xc0e>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	2b06      	cmp	r3, #6
 800a47e:	d031      	beq.n	800a4e4 <UART_SetConfig+0xc04>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	2b07      	cmp	r3, #7
 800a486:	d028      	beq.n	800a4da <UART_SetConfig+0xbfa>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48c:	2b08      	cmp	r3, #8
 800a48e:	d01f      	beq.n	800a4d0 <UART_SetConfig+0xbf0>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a494:	2b09      	cmp	r3, #9
 800a496:	d016      	beq.n	800a4c6 <UART_SetConfig+0xbe6>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	2b0a      	cmp	r3, #10
 800a49e:	d00d      	beq.n	800a4bc <UART_SetConfig+0xbdc>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a4:	2b0b      	cmp	r3, #11
 800a4a6:	d104      	bne.n	800a4b2 <UART_SetConfig+0xbd2>
 800a4a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4ac:	f04f 0400 	mov.w	r4, #0
 800a4b0:	e03a      	b.n	800a528 <UART_SetConfig+0xc48>
 800a4b2:	f04f 0301 	mov.w	r3, #1
 800a4b6:	f04f 0400 	mov.w	r4, #0
 800a4ba:	e035      	b.n	800a528 <UART_SetConfig+0xc48>
 800a4bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a4c0:	f04f 0400 	mov.w	r4, #0
 800a4c4:	e030      	b.n	800a528 <UART_SetConfig+0xc48>
 800a4c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a4ca:	f04f 0400 	mov.w	r4, #0
 800a4ce:	e02b      	b.n	800a528 <UART_SetConfig+0xc48>
 800a4d0:	f04f 0320 	mov.w	r3, #32
 800a4d4:	f04f 0400 	mov.w	r4, #0
 800a4d8:	e026      	b.n	800a528 <UART_SetConfig+0xc48>
 800a4da:	f04f 0310 	mov.w	r3, #16
 800a4de:	f04f 0400 	mov.w	r4, #0
 800a4e2:	e021      	b.n	800a528 <UART_SetConfig+0xc48>
 800a4e4:	f04f 030c 	mov.w	r3, #12
 800a4e8:	f04f 0400 	mov.w	r4, #0
 800a4ec:	e01c      	b.n	800a528 <UART_SetConfig+0xc48>
 800a4ee:	f04f 030a 	mov.w	r3, #10
 800a4f2:	f04f 0400 	mov.w	r4, #0
 800a4f6:	e017      	b.n	800a528 <UART_SetConfig+0xc48>
 800a4f8:	f04f 0308 	mov.w	r3, #8
 800a4fc:	f04f 0400 	mov.w	r4, #0
 800a500:	e012      	b.n	800a528 <UART_SetConfig+0xc48>
 800a502:	f04f 0306 	mov.w	r3, #6
 800a506:	f04f 0400 	mov.w	r4, #0
 800a50a:	e00d      	b.n	800a528 <UART_SetConfig+0xc48>
 800a50c:	f04f 0304 	mov.w	r3, #4
 800a510:	f04f 0400 	mov.w	r4, #0
 800a514:	e008      	b.n	800a528 <UART_SetConfig+0xc48>
 800a516:	f04f 0302 	mov.w	r3, #2
 800a51a:	f04f 0400 	mov.w	r4, #0
 800a51e:	e003      	b.n	800a528 <UART_SetConfig+0xc48>
 800a520:	f04f 0301 	mov.w	r3, #1
 800a524:	f04f 0400 	mov.w	r4, #0
 800a528:	461a      	mov	r2, r3
 800a52a:	4623      	mov	r3, r4
 800a52c:	f7f5 fed4 	bl	80002d8 <__aeabi_uldivmod>
 800a530:	4603      	mov	r3, r0
 800a532:	460c      	mov	r4, r1
 800a534:	4619      	mov	r1, r3
 800a536:	4622      	mov	r2, r4
 800a538:	f04f 0300 	mov.w	r3, #0
 800a53c:	f04f 0400 	mov.w	r4, #0
 800a540:	0214      	lsls	r4, r2, #8
 800a542:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a546:	020b      	lsls	r3, r1, #8
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	6852      	ldr	r2, [r2, #4]
 800a54c:	0852      	lsrs	r2, r2, #1
 800a54e:	4611      	mov	r1, r2
 800a550:	f04f 0200 	mov.w	r2, #0
 800a554:	eb13 0b01 	adds.w	fp, r3, r1
 800a558:	eb44 0c02 	adc.w	ip, r4, r2
 800a55c:	4658      	mov	r0, fp
 800a55e:	4661      	mov	r1, ip
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	f04f 0400 	mov.w	r4, #0
 800a568:	461a      	mov	r2, r3
 800a56a:	4623      	mov	r3, r4
 800a56c:	f7f5 feb4 	bl	80002d8 <__aeabi_uldivmod>
 800a570:	4603      	mov	r3, r0
 800a572:	460c      	mov	r4, r1
 800a574:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a576:	e389      	b.n	800ac8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a578:	f107 0318 	add.w	r3, r7, #24
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fc fa9f 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	4618      	mov	r0, r3
 800a586:	f04f 0100 	mov.w	r1, #0
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d067      	beq.n	800a662 <UART_SetConfig+0xd82>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	2b01      	cmp	r3, #1
 800a598:	d05e      	beq.n	800a658 <UART_SetConfig+0xd78>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d055      	beq.n	800a64e <UART_SetConfig+0xd6e>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d04c      	beq.n	800a644 <UART_SetConfig+0xd64>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d043      	beq.n	800a63a <UART_SetConfig+0xd5a>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d03a      	beq.n	800a630 <UART_SetConfig+0xd50>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2b06      	cmp	r3, #6
 800a5c0:	d031      	beq.n	800a626 <UART_SetConfig+0xd46>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	2b07      	cmp	r3, #7
 800a5c8:	d028      	beq.n	800a61c <UART_SetConfig+0xd3c>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	2b08      	cmp	r3, #8
 800a5d0:	d01f      	beq.n	800a612 <UART_SetConfig+0xd32>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	2b09      	cmp	r3, #9
 800a5d8:	d016      	beq.n	800a608 <UART_SetConfig+0xd28>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	2b0a      	cmp	r3, #10
 800a5e0:	d00d      	beq.n	800a5fe <UART_SetConfig+0xd1e>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	2b0b      	cmp	r3, #11
 800a5e8:	d104      	bne.n	800a5f4 <UART_SetConfig+0xd14>
 800a5ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5ee:	f04f 0400 	mov.w	r4, #0
 800a5f2:	e03a      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a5f4:	f04f 0301 	mov.w	r3, #1
 800a5f8:	f04f 0400 	mov.w	r4, #0
 800a5fc:	e035      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a5fe:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a602:	f04f 0400 	mov.w	r4, #0
 800a606:	e030      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a608:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a60c:	f04f 0400 	mov.w	r4, #0
 800a610:	e02b      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a612:	f04f 0320 	mov.w	r3, #32
 800a616:	f04f 0400 	mov.w	r4, #0
 800a61a:	e026      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a61c:	f04f 0310 	mov.w	r3, #16
 800a620:	f04f 0400 	mov.w	r4, #0
 800a624:	e021      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a626:	f04f 030c 	mov.w	r3, #12
 800a62a:	f04f 0400 	mov.w	r4, #0
 800a62e:	e01c      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a630:	f04f 030a 	mov.w	r3, #10
 800a634:	f04f 0400 	mov.w	r4, #0
 800a638:	e017      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a63a:	f04f 0308 	mov.w	r3, #8
 800a63e:	f04f 0400 	mov.w	r4, #0
 800a642:	e012      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a644:	f04f 0306 	mov.w	r3, #6
 800a648:	f04f 0400 	mov.w	r4, #0
 800a64c:	e00d      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a64e:	f04f 0304 	mov.w	r3, #4
 800a652:	f04f 0400 	mov.w	r4, #0
 800a656:	e008      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a658:	f04f 0302 	mov.w	r3, #2
 800a65c:	f04f 0400 	mov.w	r4, #0
 800a660:	e003      	b.n	800a66a <UART_SetConfig+0xd8a>
 800a662:	f04f 0301 	mov.w	r3, #1
 800a666:	f04f 0400 	mov.w	r4, #0
 800a66a:	461a      	mov	r2, r3
 800a66c:	4623      	mov	r3, r4
 800a66e:	f7f5 fe33 	bl	80002d8 <__aeabi_uldivmod>
 800a672:	4603      	mov	r3, r0
 800a674:	460c      	mov	r4, r1
 800a676:	4619      	mov	r1, r3
 800a678:	4622      	mov	r2, r4
 800a67a:	f04f 0300 	mov.w	r3, #0
 800a67e:	f04f 0400 	mov.w	r4, #0
 800a682:	0214      	lsls	r4, r2, #8
 800a684:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a688:	020b      	lsls	r3, r1, #8
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	6852      	ldr	r2, [r2, #4]
 800a68e:	0852      	lsrs	r2, r2, #1
 800a690:	4611      	mov	r1, r2
 800a692:	f04f 0200 	mov.w	r2, #0
 800a696:	eb13 0b01 	adds.w	fp, r3, r1
 800a69a:	eb44 0c02 	adc.w	ip, r4, r2
 800a69e:	4658      	mov	r0, fp
 800a6a0:	4661      	mov	r1, ip
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	f04f 0400 	mov.w	r4, #0
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	4623      	mov	r3, r4
 800a6ae:	f7f5 fe13 	bl	80002d8 <__aeabi_uldivmod>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a6b8:	e2e8      	b.n	800ac8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ba:	f107 030c 	add.w	r3, r7, #12
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fc fb4a 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f04f 0100 	mov.w	r1, #0
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d067      	beq.n	800a7a4 <UART_SetConfig+0xec4>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d05e      	beq.n	800a79a <UART_SetConfig+0xeba>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d055      	beq.n	800a790 <UART_SetConfig+0xeb0>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d04c      	beq.n	800a786 <UART_SetConfig+0xea6>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d043      	beq.n	800a77c <UART_SetConfig+0xe9c>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f8:	2b05      	cmp	r3, #5
 800a6fa:	d03a      	beq.n	800a772 <UART_SetConfig+0xe92>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	2b06      	cmp	r3, #6
 800a702:	d031      	beq.n	800a768 <UART_SetConfig+0xe88>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	2b07      	cmp	r3, #7
 800a70a:	d028      	beq.n	800a75e <UART_SetConfig+0xe7e>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	2b08      	cmp	r3, #8
 800a712:	d01f      	beq.n	800a754 <UART_SetConfig+0xe74>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a718:	2b09      	cmp	r3, #9
 800a71a:	d016      	beq.n	800a74a <UART_SetConfig+0xe6a>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	2b0a      	cmp	r3, #10
 800a722:	d00d      	beq.n	800a740 <UART_SetConfig+0xe60>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a728:	2b0b      	cmp	r3, #11
 800a72a:	d104      	bne.n	800a736 <UART_SetConfig+0xe56>
 800a72c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a730:	f04f 0400 	mov.w	r4, #0
 800a734:	e03a      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a736:	f04f 0301 	mov.w	r3, #1
 800a73a:	f04f 0400 	mov.w	r4, #0
 800a73e:	e035      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a740:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a744:	f04f 0400 	mov.w	r4, #0
 800a748:	e030      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a74a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a74e:	f04f 0400 	mov.w	r4, #0
 800a752:	e02b      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a754:	f04f 0320 	mov.w	r3, #32
 800a758:	f04f 0400 	mov.w	r4, #0
 800a75c:	e026      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a75e:	f04f 0310 	mov.w	r3, #16
 800a762:	f04f 0400 	mov.w	r4, #0
 800a766:	e021      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a768:	f04f 030c 	mov.w	r3, #12
 800a76c:	f04f 0400 	mov.w	r4, #0
 800a770:	e01c      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a772:	f04f 030a 	mov.w	r3, #10
 800a776:	f04f 0400 	mov.w	r4, #0
 800a77a:	e017      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a77c:	f04f 0308 	mov.w	r3, #8
 800a780:	f04f 0400 	mov.w	r4, #0
 800a784:	e012      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a786:	f04f 0306 	mov.w	r3, #6
 800a78a:	f04f 0400 	mov.w	r4, #0
 800a78e:	e00d      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a790:	f04f 0304 	mov.w	r3, #4
 800a794:	f04f 0400 	mov.w	r4, #0
 800a798:	e008      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a79a:	f04f 0302 	mov.w	r3, #2
 800a79e:	f04f 0400 	mov.w	r4, #0
 800a7a2:	e003      	b.n	800a7ac <UART_SetConfig+0xecc>
 800a7a4:	f04f 0301 	mov.w	r3, #1
 800a7a8:	f04f 0400 	mov.w	r4, #0
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	4623      	mov	r3, r4
 800a7b0:	f7f5 fd92 	bl	80002d8 <__aeabi_uldivmod>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	f04f 0300 	mov.w	r3, #0
 800a7c0:	f04f 0400 	mov.w	r4, #0
 800a7c4:	0214      	lsls	r4, r2, #8
 800a7c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a7ca:	020b      	lsls	r3, r1, #8
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	6852      	ldr	r2, [r2, #4]
 800a7d0:	0852      	lsrs	r2, r2, #1
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	f04f 0200 	mov.w	r2, #0
 800a7d8:	eb13 0b01 	adds.w	fp, r3, r1
 800a7dc:	eb44 0c02 	adc.w	ip, r4, r2
 800a7e0:	4658      	mov	r0, fp
 800a7e2:	4661      	mov	r1, ip
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f04f 0400 	mov.w	r4, #0
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	4623      	mov	r3, r4
 800a7f0:	f7f5 fd72 	bl	80002d8 <__aeabi_uldivmod>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a7fa:	e247      	b.n	800ac8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7fc:	4b96      	ldr	r3, [pc, #600]	; (800aa58 <UART_SetConfig+0x1178>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 0320 	and.w	r3, r3, #32
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 80a3 	beq.w	800a950 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a80a:	4b93      	ldr	r3, [pc, #588]	; (800aa58 <UART_SetConfig+0x1178>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	08db      	lsrs	r3, r3, #3
 800a810:	f003 0303 	and.w	r3, r3, #3
 800a814:	4a91      	ldr	r2, [pc, #580]	; (800aa5c <UART_SetConfig+0x117c>)
 800a816:	fa22 f303 	lsr.w	r3, r2, r3
 800a81a:	4618      	mov	r0, r3
 800a81c:	f04f 0100 	mov.w	r1, #0
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	2b00      	cmp	r3, #0
 800a826:	d067      	beq.n	800a8f8 <UART_SetConfig+0x1018>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d05e      	beq.n	800a8ee <UART_SetConfig+0x100e>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	2b02      	cmp	r3, #2
 800a836:	d055      	beq.n	800a8e4 <UART_SetConfig+0x1004>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	d04c      	beq.n	800a8da <UART_SetConfig+0xffa>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	2b04      	cmp	r3, #4
 800a846:	d043      	beq.n	800a8d0 <UART_SetConfig+0xff0>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84c:	2b05      	cmp	r3, #5
 800a84e:	d03a      	beq.n	800a8c6 <UART_SetConfig+0xfe6>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	2b06      	cmp	r3, #6
 800a856:	d031      	beq.n	800a8bc <UART_SetConfig+0xfdc>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	2b07      	cmp	r3, #7
 800a85e:	d028      	beq.n	800a8b2 <UART_SetConfig+0xfd2>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	2b08      	cmp	r3, #8
 800a866:	d01f      	beq.n	800a8a8 <UART_SetConfig+0xfc8>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	2b09      	cmp	r3, #9
 800a86e:	d016      	beq.n	800a89e <UART_SetConfig+0xfbe>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	2b0a      	cmp	r3, #10
 800a876:	d00d      	beq.n	800a894 <UART_SetConfig+0xfb4>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	2b0b      	cmp	r3, #11
 800a87e:	d104      	bne.n	800a88a <UART_SetConfig+0xfaa>
 800a880:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a884:	f04f 0400 	mov.w	r4, #0
 800a888:	e03a      	b.n	800a900 <UART_SetConfig+0x1020>
 800a88a:	f04f 0301 	mov.w	r3, #1
 800a88e:	f04f 0400 	mov.w	r4, #0
 800a892:	e035      	b.n	800a900 <UART_SetConfig+0x1020>
 800a894:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a898:	f04f 0400 	mov.w	r4, #0
 800a89c:	e030      	b.n	800a900 <UART_SetConfig+0x1020>
 800a89e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a8a2:	f04f 0400 	mov.w	r4, #0
 800a8a6:	e02b      	b.n	800a900 <UART_SetConfig+0x1020>
 800a8a8:	f04f 0320 	mov.w	r3, #32
 800a8ac:	f04f 0400 	mov.w	r4, #0
 800a8b0:	e026      	b.n	800a900 <UART_SetConfig+0x1020>
 800a8b2:	f04f 0310 	mov.w	r3, #16
 800a8b6:	f04f 0400 	mov.w	r4, #0
 800a8ba:	e021      	b.n	800a900 <UART_SetConfig+0x1020>
 800a8bc:	f04f 030c 	mov.w	r3, #12
 800a8c0:	f04f 0400 	mov.w	r4, #0
 800a8c4:	e01c      	b.n	800a900 <UART_SetConfig+0x1020>
 800a8c6:	f04f 030a 	mov.w	r3, #10
 800a8ca:	f04f 0400 	mov.w	r4, #0
 800a8ce:	e017      	b.n	800a900 <UART_SetConfig+0x1020>
 800a8d0:	f04f 0308 	mov.w	r3, #8
 800a8d4:	f04f 0400 	mov.w	r4, #0
 800a8d8:	e012      	b.n	800a900 <UART_SetConfig+0x1020>
 800a8da:	f04f 0306 	mov.w	r3, #6
 800a8de:	f04f 0400 	mov.w	r4, #0
 800a8e2:	e00d      	b.n	800a900 <UART_SetConfig+0x1020>
 800a8e4:	f04f 0304 	mov.w	r3, #4
 800a8e8:	f04f 0400 	mov.w	r4, #0
 800a8ec:	e008      	b.n	800a900 <UART_SetConfig+0x1020>
 800a8ee:	f04f 0302 	mov.w	r3, #2
 800a8f2:	f04f 0400 	mov.w	r4, #0
 800a8f6:	e003      	b.n	800a900 <UART_SetConfig+0x1020>
 800a8f8:	f04f 0301 	mov.w	r3, #1
 800a8fc:	f04f 0400 	mov.w	r4, #0
 800a900:	461a      	mov	r2, r3
 800a902:	4623      	mov	r3, r4
 800a904:	f7f5 fce8 	bl	80002d8 <__aeabi_uldivmod>
 800a908:	4603      	mov	r3, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	4619      	mov	r1, r3
 800a90e:	4622      	mov	r2, r4
 800a910:	f04f 0300 	mov.w	r3, #0
 800a914:	f04f 0400 	mov.w	r4, #0
 800a918:	0214      	lsls	r4, r2, #8
 800a91a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a91e:	020b      	lsls	r3, r1, #8
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	6852      	ldr	r2, [r2, #4]
 800a924:	0852      	lsrs	r2, r2, #1
 800a926:	4611      	mov	r1, r2
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	eb13 0b01 	adds.w	fp, r3, r1
 800a930:	eb44 0c02 	adc.w	ip, r4, r2
 800a934:	4658      	mov	r0, fp
 800a936:	4661      	mov	r1, ip
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	f04f 0400 	mov.w	r4, #0
 800a940:	461a      	mov	r2, r3
 800a942:	4623      	mov	r3, r4
 800a944:	f7f5 fcc8 	bl	80002d8 <__aeabi_uldivmod>
 800a948:	4603      	mov	r3, r0
 800a94a:	460c      	mov	r4, r1
 800a94c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a94e:	e19d      	b.n	800ac8c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	2b00      	cmp	r3, #0
 800a956:	d05b      	beq.n	800aa10 <UART_SetConfig+0x1130>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d053      	beq.n	800aa08 <UART_SetConfig+0x1128>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	2b02      	cmp	r3, #2
 800a966:	d04b      	beq.n	800aa00 <UART_SetConfig+0x1120>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	d043      	beq.n	800a9f8 <UART_SetConfig+0x1118>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a974:	2b04      	cmp	r3, #4
 800a976:	d03b      	beq.n	800a9f0 <UART_SetConfig+0x1110>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97c:	2b05      	cmp	r3, #5
 800a97e:	d033      	beq.n	800a9e8 <UART_SetConfig+0x1108>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a984:	2b06      	cmp	r3, #6
 800a986:	d02b      	beq.n	800a9e0 <UART_SetConfig+0x1100>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	2b07      	cmp	r3, #7
 800a98e:	d023      	beq.n	800a9d8 <UART_SetConfig+0x10f8>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a994:	2b08      	cmp	r3, #8
 800a996:	d01b      	beq.n	800a9d0 <UART_SetConfig+0x10f0>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99c:	2b09      	cmp	r3, #9
 800a99e:	d013      	beq.n	800a9c8 <UART_SetConfig+0x10e8>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	2b0a      	cmp	r3, #10
 800a9a6:	d00b      	beq.n	800a9c0 <UART_SetConfig+0x10e0>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	2b0b      	cmp	r3, #11
 800a9ae:	d103      	bne.n	800a9b8 <UART_SetConfig+0x10d8>
 800a9b0:	4b2a      	ldr	r3, [pc, #168]	; (800aa5c <UART_SetConfig+0x117c>)
 800a9b2:	f04f 0400 	mov.w	r4, #0
 800a9b6:	e02e      	b.n	800aa16 <UART_SetConfig+0x1136>
 800a9b8:	4b29      	ldr	r3, [pc, #164]	; (800aa60 <UART_SetConfig+0x1180>)
 800a9ba:	f04f 0403 	mov.w	r4, #3
 800a9be:	e02a      	b.n	800aa16 <UART_SetConfig+0x1136>
 800a9c0:	4b28      	ldr	r3, [pc, #160]	; (800aa64 <UART_SetConfig+0x1184>)
 800a9c2:	f04f 0400 	mov.w	r4, #0
 800a9c6:	e026      	b.n	800aa16 <UART_SetConfig+0x1136>
 800a9c8:	4b27      	ldr	r3, [pc, #156]	; (800aa68 <UART_SetConfig+0x1188>)
 800a9ca:	f04f 0400 	mov.w	r4, #0
 800a9ce:	e022      	b.n	800aa16 <UART_SetConfig+0x1136>
 800a9d0:	4b26      	ldr	r3, [pc, #152]	; (800aa6c <UART_SetConfig+0x118c>)
 800a9d2:	f04f 0400 	mov.w	r4, #0
 800a9d6:	e01e      	b.n	800aa16 <UART_SetConfig+0x1136>
 800a9d8:	4b25      	ldr	r3, [pc, #148]	; (800aa70 <UART_SetConfig+0x1190>)
 800a9da:	f04f 0400 	mov.w	r4, #0
 800a9de:	e01a      	b.n	800aa16 <UART_SetConfig+0x1136>
 800a9e0:	a419      	add	r4, pc, #100	; (adr r4, 800aa48 <UART_SetConfig+0x1168>)
 800a9e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a9e6:	e016      	b.n	800aa16 <UART_SetConfig+0x1136>
 800a9e8:	4b22      	ldr	r3, [pc, #136]	; (800aa74 <UART_SetConfig+0x1194>)
 800a9ea:	f04f 0400 	mov.w	r4, #0
 800a9ee:	e012      	b.n	800aa16 <UART_SetConfig+0x1136>
 800a9f0:	4b21      	ldr	r3, [pc, #132]	; (800aa78 <UART_SetConfig+0x1198>)
 800a9f2:	f04f 0400 	mov.w	r4, #0
 800a9f6:	e00e      	b.n	800aa16 <UART_SetConfig+0x1136>
 800a9f8:	a415      	add	r4, pc, #84	; (adr r4, 800aa50 <UART_SetConfig+0x1170>)
 800a9fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a9fe:	e00a      	b.n	800aa16 <UART_SetConfig+0x1136>
 800aa00:	4b1e      	ldr	r3, [pc, #120]	; (800aa7c <UART_SetConfig+0x119c>)
 800aa02:	f04f 0400 	mov.w	r4, #0
 800aa06:	e006      	b.n	800aa16 <UART_SetConfig+0x1136>
 800aa08:	4b1d      	ldr	r3, [pc, #116]	; (800aa80 <UART_SetConfig+0x11a0>)
 800aa0a:	f04f 0401 	mov.w	r4, #1
 800aa0e:	e002      	b.n	800aa16 <UART_SetConfig+0x1136>
 800aa10:	4b13      	ldr	r3, [pc, #76]	; (800aa60 <UART_SetConfig+0x1180>)
 800aa12:	f04f 0403 	mov.w	r4, #3
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	6852      	ldr	r2, [r2, #4]
 800aa1a:	0852      	lsrs	r2, r2, #1
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	f04f 0200 	mov.w	r2, #0
 800aa22:	eb13 0b01 	adds.w	fp, r3, r1
 800aa26:	eb44 0c02 	adc.w	ip, r4, r2
 800aa2a:	4658      	mov	r0, fp
 800aa2c:	4661      	mov	r1, ip
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f04f 0400 	mov.w	r4, #0
 800aa36:	461a      	mov	r2, r3
 800aa38:	4623      	mov	r3, r4
 800aa3a:	f7f5 fc4d 	bl	80002d8 <__aeabi_uldivmod>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	460c      	mov	r4, r1
 800aa42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aa44:	e122      	b.n	800ac8c <UART_SetConfig+0x13ac>
 800aa46:	bf00      	nop
 800aa48:	51615500 	.word	0x51615500
 800aa4c:	00000000 	.word	0x00000000
 800aa50:	a2c2aa00 	.word	0xa2c2aa00
 800aa54:	00000000 	.word	0x00000000
 800aa58:	58024400 	.word	0x58024400
 800aa5c:	03d09000 	.word	0x03d09000
 800aa60:	d0900000 	.word	0xd0900000
 800aa64:	07a12000 	.word	0x07a12000
 800aa68:	0f424000 	.word	0x0f424000
 800aa6c:	1e848000 	.word	0x1e848000
 800aa70:	3d090000 	.word	0x3d090000
 800aa74:	61a80000 	.word	0x61a80000
 800aa78:	7a120000 	.word	0x7a120000
 800aa7c:	f4240000 	.word	0xf4240000
 800aa80:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d05b      	beq.n	800ab44 <UART_SetConfig+0x1264>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d053      	beq.n	800ab3c <UART_SetConfig+0x125c>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d04b      	beq.n	800ab34 <UART_SetConfig+0x1254>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d043      	beq.n	800ab2c <UART_SetConfig+0x124c>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa8:	2b04      	cmp	r3, #4
 800aaaa:	d03b      	beq.n	800ab24 <UART_SetConfig+0x1244>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	2b05      	cmp	r3, #5
 800aab2:	d033      	beq.n	800ab1c <UART_SetConfig+0x123c>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	2b06      	cmp	r3, #6
 800aaba:	d02b      	beq.n	800ab14 <UART_SetConfig+0x1234>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac0:	2b07      	cmp	r3, #7
 800aac2:	d023      	beq.n	800ab0c <UART_SetConfig+0x122c>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d01b      	beq.n	800ab04 <UART_SetConfig+0x1224>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad0:	2b09      	cmp	r3, #9
 800aad2:	d013      	beq.n	800aafc <UART_SetConfig+0x121c>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad8:	2b0a      	cmp	r3, #10
 800aada:	d00b      	beq.n	800aaf4 <UART_SetConfig+0x1214>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	2b0b      	cmp	r3, #11
 800aae2:	d103      	bne.n	800aaec <UART_SetConfig+0x120c>
 800aae4:	4bc0      	ldr	r3, [pc, #768]	; (800ade8 <UART_SetConfig+0x1508>)
 800aae6:	f04f 0400 	mov.w	r4, #0
 800aaea:	e02e      	b.n	800ab4a <UART_SetConfig+0x126a>
 800aaec:	4bbf      	ldr	r3, [pc, #764]	; (800adec <UART_SetConfig+0x150c>)
 800aaee:	f04f 0400 	mov.w	r4, #0
 800aaf2:	e02a      	b.n	800ab4a <UART_SetConfig+0x126a>
 800aaf4:	4bbe      	ldr	r3, [pc, #760]	; (800adf0 <UART_SetConfig+0x1510>)
 800aaf6:	f04f 0400 	mov.w	r4, #0
 800aafa:	e026      	b.n	800ab4a <UART_SetConfig+0x126a>
 800aafc:	4bbd      	ldr	r3, [pc, #756]	; (800adf4 <UART_SetConfig+0x1514>)
 800aafe:	f04f 0400 	mov.w	r4, #0
 800ab02:	e022      	b.n	800ab4a <UART_SetConfig+0x126a>
 800ab04:	4bbc      	ldr	r3, [pc, #752]	; (800adf8 <UART_SetConfig+0x1518>)
 800ab06:	f04f 0400 	mov.w	r4, #0
 800ab0a:	e01e      	b.n	800ab4a <UART_SetConfig+0x126a>
 800ab0c:	4bbb      	ldr	r3, [pc, #748]	; (800adfc <UART_SetConfig+0x151c>)
 800ab0e:	f04f 0400 	mov.w	r4, #0
 800ab12:	e01a      	b.n	800ab4a <UART_SetConfig+0x126a>
 800ab14:	a4b0      	add	r4, pc, #704	; (adr r4, 800add8 <UART_SetConfig+0x14f8>)
 800ab16:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ab1a:	e016      	b.n	800ab4a <UART_SetConfig+0x126a>
 800ab1c:	4bb8      	ldr	r3, [pc, #736]	; (800ae00 <UART_SetConfig+0x1520>)
 800ab1e:	f04f 0400 	mov.w	r4, #0
 800ab22:	e012      	b.n	800ab4a <UART_SetConfig+0x126a>
 800ab24:	4bb7      	ldr	r3, [pc, #732]	; (800ae04 <UART_SetConfig+0x1524>)
 800ab26:	f04f 0400 	mov.w	r4, #0
 800ab2a:	e00e      	b.n	800ab4a <UART_SetConfig+0x126a>
 800ab2c:	a4ac      	add	r4, pc, #688	; (adr r4, 800ade0 <UART_SetConfig+0x1500>)
 800ab2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ab32:	e00a      	b.n	800ab4a <UART_SetConfig+0x126a>
 800ab34:	4bb4      	ldr	r3, [pc, #720]	; (800ae08 <UART_SetConfig+0x1528>)
 800ab36:	f04f 0400 	mov.w	r4, #0
 800ab3a:	e006      	b.n	800ab4a <UART_SetConfig+0x126a>
 800ab3c:	4bb3      	ldr	r3, [pc, #716]	; (800ae0c <UART_SetConfig+0x152c>)
 800ab3e:	f04f 0400 	mov.w	r4, #0
 800ab42:	e002      	b.n	800ab4a <UART_SetConfig+0x126a>
 800ab44:	4ba9      	ldr	r3, [pc, #676]	; (800adec <UART_SetConfig+0x150c>)
 800ab46:	f04f 0400 	mov.w	r4, #0
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	6852      	ldr	r2, [r2, #4]
 800ab4e:	0852      	lsrs	r2, r2, #1
 800ab50:	4611      	mov	r1, r2
 800ab52:	f04f 0200 	mov.w	r2, #0
 800ab56:	eb13 0b01 	adds.w	fp, r3, r1
 800ab5a:	eb44 0c02 	adc.w	ip, r4, r2
 800ab5e:	4658      	mov	r0, fp
 800ab60:	4661      	mov	r1, ip
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	f04f 0400 	mov.w	r4, #0
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	4623      	mov	r3, r4
 800ab6e:	f7f5 fbb3 	bl	80002d8 <__aeabi_uldivmod>
 800ab72:	4603      	mov	r3, r0
 800ab74:	460c      	mov	r4, r1
 800ab76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ab78:	e088      	b.n	800ac8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d064      	beq.n	800ac4c <UART_SetConfig+0x136c>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d05b      	beq.n	800ac42 <UART_SetConfig+0x1362>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d052      	beq.n	800ac38 <UART_SetConfig+0x1358>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	d04a      	beq.n	800ac30 <UART_SetConfig+0x1350>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	2b04      	cmp	r3, #4
 800aba0:	d041      	beq.n	800ac26 <UART_SetConfig+0x1346>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba6:	2b05      	cmp	r3, #5
 800aba8:	d039      	beq.n	800ac1e <UART_SetConfig+0x133e>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abae:	2b06      	cmp	r3, #6
 800abb0:	d031      	beq.n	800ac16 <UART_SetConfig+0x1336>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	2b07      	cmp	r3, #7
 800abb8:	d028      	beq.n	800ac0c <UART_SetConfig+0x132c>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	2b08      	cmp	r3, #8
 800abc0:	d01f      	beq.n	800ac02 <UART_SetConfig+0x1322>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc6:	2b09      	cmp	r3, #9
 800abc8:	d016      	beq.n	800abf8 <UART_SetConfig+0x1318>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abce:	2b0a      	cmp	r3, #10
 800abd0:	d00d      	beq.n	800abee <UART_SetConfig+0x130e>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd6:	2b0b      	cmp	r3, #11
 800abd8:	d104      	bne.n	800abe4 <UART_SetConfig+0x1304>
 800abda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abde:	f04f 0400 	mov.w	r4, #0
 800abe2:	e037      	b.n	800ac54 <UART_SetConfig+0x1374>
 800abe4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800abe8:	f04f 0400 	mov.w	r4, #0
 800abec:	e032      	b.n	800ac54 <UART_SetConfig+0x1374>
 800abee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800abf2:	f04f 0400 	mov.w	r4, #0
 800abf6:	e02d      	b.n	800ac54 <UART_SetConfig+0x1374>
 800abf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800abfc:	f04f 0400 	mov.w	r4, #0
 800ac00:	e028      	b.n	800ac54 <UART_SetConfig+0x1374>
 800ac02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ac06:	f04f 0400 	mov.w	r4, #0
 800ac0a:	e023      	b.n	800ac54 <UART_SetConfig+0x1374>
 800ac0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac10:	f04f 0400 	mov.w	r4, #0
 800ac14:	e01e      	b.n	800ac54 <UART_SetConfig+0x1374>
 800ac16:	4b7e      	ldr	r3, [pc, #504]	; (800ae10 <UART_SetConfig+0x1530>)
 800ac18:	f04f 0400 	mov.w	r4, #0
 800ac1c:	e01a      	b.n	800ac54 <UART_SetConfig+0x1374>
 800ac1e:	4b7d      	ldr	r3, [pc, #500]	; (800ae14 <UART_SetConfig+0x1534>)
 800ac20:	f04f 0400 	mov.w	r4, #0
 800ac24:	e016      	b.n	800ac54 <UART_SetConfig+0x1374>
 800ac26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ac2a:	f04f 0400 	mov.w	r4, #0
 800ac2e:	e011      	b.n	800ac54 <UART_SetConfig+0x1374>
 800ac30:	4b79      	ldr	r3, [pc, #484]	; (800ae18 <UART_SetConfig+0x1538>)
 800ac32:	f04f 0400 	mov.w	r4, #0
 800ac36:	e00d      	b.n	800ac54 <UART_SetConfig+0x1374>
 800ac38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac3c:	f04f 0400 	mov.w	r4, #0
 800ac40:	e008      	b.n	800ac54 <UART_SetConfig+0x1374>
 800ac42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac46:	f04f 0400 	mov.w	r4, #0
 800ac4a:	e003      	b.n	800ac54 <UART_SetConfig+0x1374>
 800ac4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ac50:	f04f 0400 	mov.w	r4, #0
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	6852      	ldr	r2, [r2, #4]
 800ac58:	0852      	lsrs	r2, r2, #1
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	eb13 0b01 	adds.w	fp, r3, r1
 800ac64:	eb44 0c02 	adc.w	ip, r4, r2
 800ac68:	4658      	mov	r0, fp
 800ac6a:	4661      	mov	r1, ip
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	f04f 0400 	mov.w	r4, #0
 800ac74:	461a      	mov	r2, r3
 800ac76:	4623      	mov	r3, r4
 800ac78:	f7f5 fb2e 	bl	80002d8 <__aeabi_uldivmod>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ac82:	e003      	b.n	800ac8c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800ac8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac92:	d309      	bcc.n	800aca8 <UART_SetConfig+0x13c8>
 800ac94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac9a:	d205      	bcs.n	800aca8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aca2:	60da      	str	r2, [r3, #12]
 800aca4:	f000 bf85 	b.w	800bbb2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acae:	f000 bf80 	b.w	800bbb2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	69db      	ldr	r3, [r3, #28]
 800acb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acba:	f040 83da 	bne.w	800b472 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800acbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800acc2:	2b40      	cmp	r3, #64	; 0x40
 800acc4:	f200 83b3 	bhi.w	800b42e <UART_SetConfig+0x1b4e>
 800acc8:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <UART_SetConfig+0x13f0>)
 800acca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acce:	bf00      	nop
 800acd0:	0800ae1d 	.word	0x0800ae1d
 800acd4:	0800aed5 	.word	0x0800aed5
 800acd8:	0800b42f 	.word	0x0800b42f
 800acdc:	0800b42f 	.word	0x0800b42f
 800ace0:	0800af8d 	.word	0x0800af8d
 800ace4:	0800b42f 	.word	0x0800b42f
 800ace8:	0800b42f 	.word	0x0800b42f
 800acec:	0800b42f 	.word	0x0800b42f
 800acf0:	0800b049 	.word	0x0800b049
 800acf4:	0800b42f 	.word	0x0800b42f
 800acf8:	0800b42f 	.word	0x0800b42f
 800acfc:	0800b42f 	.word	0x0800b42f
 800ad00:	0800b42f 	.word	0x0800b42f
 800ad04:	0800b42f 	.word	0x0800b42f
 800ad08:	0800b42f 	.word	0x0800b42f
 800ad0c:	0800b42f 	.word	0x0800b42f
 800ad10:	0800b105 	.word	0x0800b105
 800ad14:	0800b42f 	.word	0x0800b42f
 800ad18:	0800b42f 	.word	0x0800b42f
 800ad1c:	0800b42f 	.word	0x0800b42f
 800ad20:	0800b42f 	.word	0x0800b42f
 800ad24:	0800b42f 	.word	0x0800b42f
 800ad28:	0800b42f 	.word	0x0800b42f
 800ad2c:	0800b42f 	.word	0x0800b42f
 800ad30:	0800b42f 	.word	0x0800b42f
 800ad34:	0800b42f 	.word	0x0800b42f
 800ad38:	0800b42f 	.word	0x0800b42f
 800ad3c:	0800b42f 	.word	0x0800b42f
 800ad40:	0800b42f 	.word	0x0800b42f
 800ad44:	0800b42f 	.word	0x0800b42f
 800ad48:	0800b42f 	.word	0x0800b42f
 800ad4c:	0800b42f 	.word	0x0800b42f
 800ad50:	0800b277 	.word	0x0800b277
 800ad54:	0800b42f 	.word	0x0800b42f
 800ad58:	0800b42f 	.word	0x0800b42f
 800ad5c:	0800b42f 	.word	0x0800b42f
 800ad60:	0800b42f 	.word	0x0800b42f
 800ad64:	0800b42f 	.word	0x0800b42f
 800ad68:	0800b42f 	.word	0x0800b42f
 800ad6c:	0800b42f 	.word	0x0800b42f
 800ad70:	0800b42f 	.word	0x0800b42f
 800ad74:	0800b42f 	.word	0x0800b42f
 800ad78:	0800b42f 	.word	0x0800b42f
 800ad7c:	0800b42f 	.word	0x0800b42f
 800ad80:	0800b42f 	.word	0x0800b42f
 800ad84:	0800b42f 	.word	0x0800b42f
 800ad88:	0800b42f 	.word	0x0800b42f
 800ad8c:	0800b42f 	.word	0x0800b42f
 800ad90:	0800b42f 	.word	0x0800b42f
 800ad94:	0800b42f 	.word	0x0800b42f
 800ad98:	0800b42f 	.word	0x0800b42f
 800ad9c:	0800b42f 	.word	0x0800b42f
 800ada0:	0800b42f 	.word	0x0800b42f
 800ada4:	0800b42f 	.word	0x0800b42f
 800ada8:	0800b42f 	.word	0x0800b42f
 800adac:	0800b42f 	.word	0x0800b42f
 800adb0:	0800b42f 	.word	0x0800b42f
 800adb4:	0800b42f 	.word	0x0800b42f
 800adb8:	0800b42f 	.word	0x0800b42f
 800adbc:	0800b42f 	.word	0x0800b42f
 800adc0:	0800b42f 	.word	0x0800b42f
 800adc4:	0800b42f 	.word	0x0800b42f
 800adc8:	0800b42f 	.word	0x0800b42f
 800adcc:	0800b42f 	.word	0x0800b42f
 800add0:	0800b36d 	.word	0x0800b36d
 800add4:	f3af 8000 	nop.w
 800add8:	05161500 	.word	0x05161500
 800addc:	00000000 	.word	0x00000000
 800ade0:	0a2c2a00 	.word	0x0a2c2a00
 800ade4:	00000000 	.word	0x00000000
 800ade8:	003d0900 	.word	0x003d0900
 800adec:	3d090000 	.word	0x3d090000
 800adf0:	007a1200 	.word	0x007a1200
 800adf4:	00f42400 	.word	0x00f42400
 800adf8:	01e84800 	.word	0x01e84800
 800adfc:	03d09000 	.word	0x03d09000
 800ae00:	061a8000 	.word	0x061a8000
 800ae04:	07a12000 	.word	0x07a12000
 800ae08:	0f424000 	.word	0x0f424000
 800ae0c:	1e848000 	.word	0x1e848000
 800ae10:	000aaa00 	.word	0x000aaa00
 800ae14:	000ccc00 	.word	0x000ccc00
 800ae18:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae1c:	f7fa fcb8 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 800ae20:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d044      	beq.n	800aeb4 <UART_SetConfig+0x15d4>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d03e      	beq.n	800aeb0 <UART_SetConfig+0x15d0>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d038      	beq.n	800aeac <UART_SetConfig+0x15cc>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d032      	beq.n	800aea8 <UART_SetConfig+0x15c8>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	2b04      	cmp	r3, #4
 800ae48:	d02c      	beq.n	800aea4 <UART_SetConfig+0x15c4>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	2b05      	cmp	r3, #5
 800ae50:	d026      	beq.n	800aea0 <UART_SetConfig+0x15c0>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae56:	2b06      	cmp	r3, #6
 800ae58:	d020      	beq.n	800ae9c <UART_SetConfig+0x15bc>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	2b07      	cmp	r3, #7
 800ae60:	d01a      	beq.n	800ae98 <UART_SetConfig+0x15b8>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	2b08      	cmp	r3, #8
 800ae68:	d014      	beq.n	800ae94 <UART_SetConfig+0x15b4>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	2b09      	cmp	r3, #9
 800ae70:	d00e      	beq.n	800ae90 <UART_SetConfig+0x15b0>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	2b0a      	cmp	r3, #10
 800ae78:	d008      	beq.n	800ae8c <UART_SetConfig+0x15ac>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b0b      	cmp	r3, #11
 800ae80:	d102      	bne.n	800ae88 <UART_SetConfig+0x15a8>
 800ae82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae86:	e016      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e014      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800ae8c:	2380      	movs	r3, #128	; 0x80
 800ae8e:	e012      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800ae90:	2340      	movs	r3, #64	; 0x40
 800ae92:	e010      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800ae94:	2320      	movs	r3, #32
 800ae96:	e00e      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800ae98:	2310      	movs	r3, #16
 800ae9a:	e00c      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800ae9c:	230c      	movs	r3, #12
 800ae9e:	e00a      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800aea0:	230a      	movs	r3, #10
 800aea2:	e008      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800aea4:	2308      	movs	r3, #8
 800aea6:	e006      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800aea8:	2306      	movs	r3, #6
 800aeaa:	e004      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800aeac:	2304      	movs	r3, #4
 800aeae:	e002      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e000      	b.n	800aeb6 <UART_SetConfig+0x15d6>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aebc:	005a      	lsls	r2, r3, #1
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	085b      	lsrs	r3, r3, #1
 800aec4:	441a      	add	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	fbb2 f3f3 	udiv	r3, r2, r3
 800aece:	b29b      	uxth	r3, r3
 800aed0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aed2:	e2b0      	b.n	800b436 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aed4:	f7fa fc72 	bl	80057bc <HAL_RCC_GetPCLK2Freq>
 800aed8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d044      	beq.n	800af6c <UART_SetConfig+0x168c>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d03e      	beq.n	800af68 <UART_SetConfig+0x1688>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d038      	beq.n	800af64 <UART_SetConfig+0x1684>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d032      	beq.n	800af60 <UART_SetConfig+0x1680>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d02c      	beq.n	800af5c <UART_SetConfig+0x167c>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af06:	2b05      	cmp	r3, #5
 800af08:	d026      	beq.n	800af58 <UART_SetConfig+0x1678>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0e:	2b06      	cmp	r3, #6
 800af10:	d020      	beq.n	800af54 <UART_SetConfig+0x1674>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af16:	2b07      	cmp	r3, #7
 800af18:	d01a      	beq.n	800af50 <UART_SetConfig+0x1670>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1e:	2b08      	cmp	r3, #8
 800af20:	d014      	beq.n	800af4c <UART_SetConfig+0x166c>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	2b09      	cmp	r3, #9
 800af28:	d00e      	beq.n	800af48 <UART_SetConfig+0x1668>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2e:	2b0a      	cmp	r3, #10
 800af30:	d008      	beq.n	800af44 <UART_SetConfig+0x1664>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	2b0b      	cmp	r3, #11
 800af38:	d102      	bne.n	800af40 <UART_SetConfig+0x1660>
 800af3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af3e:	e016      	b.n	800af6e <UART_SetConfig+0x168e>
 800af40:	2301      	movs	r3, #1
 800af42:	e014      	b.n	800af6e <UART_SetConfig+0x168e>
 800af44:	2380      	movs	r3, #128	; 0x80
 800af46:	e012      	b.n	800af6e <UART_SetConfig+0x168e>
 800af48:	2340      	movs	r3, #64	; 0x40
 800af4a:	e010      	b.n	800af6e <UART_SetConfig+0x168e>
 800af4c:	2320      	movs	r3, #32
 800af4e:	e00e      	b.n	800af6e <UART_SetConfig+0x168e>
 800af50:	2310      	movs	r3, #16
 800af52:	e00c      	b.n	800af6e <UART_SetConfig+0x168e>
 800af54:	230c      	movs	r3, #12
 800af56:	e00a      	b.n	800af6e <UART_SetConfig+0x168e>
 800af58:	230a      	movs	r3, #10
 800af5a:	e008      	b.n	800af6e <UART_SetConfig+0x168e>
 800af5c:	2308      	movs	r3, #8
 800af5e:	e006      	b.n	800af6e <UART_SetConfig+0x168e>
 800af60:	2306      	movs	r3, #6
 800af62:	e004      	b.n	800af6e <UART_SetConfig+0x168e>
 800af64:	2304      	movs	r3, #4
 800af66:	e002      	b.n	800af6e <UART_SetConfig+0x168e>
 800af68:	2302      	movs	r3, #2
 800af6a:	e000      	b.n	800af6e <UART_SetConfig+0x168e>
 800af6c:	2301      	movs	r3, #1
 800af6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af70:	fbb2 f3f3 	udiv	r3, r2, r3
 800af74:	005a      	lsls	r2, r3, #1
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	085b      	lsrs	r3, r3, #1
 800af7c:	441a      	add	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	fbb2 f3f3 	udiv	r3, r2, r3
 800af86:	b29b      	uxth	r3, r3
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af8a:	e254      	b.n	800b436 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af8c:	f107 0318 	add.w	r3, r7, #24
 800af90:	4618      	mov	r0, r3
 800af92:	f7fb fd95 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af96:	69fa      	ldr	r2, [r7, #28]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d044      	beq.n	800b02a <UART_SetConfig+0x174a>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d03e      	beq.n	800b026 <UART_SetConfig+0x1746>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	2b02      	cmp	r3, #2
 800afae:	d038      	beq.n	800b022 <UART_SetConfig+0x1742>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d032      	beq.n	800b01e <UART_SetConfig+0x173e>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbc:	2b04      	cmp	r3, #4
 800afbe:	d02c      	beq.n	800b01a <UART_SetConfig+0x173a>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	2b05      	cmp	r3, #5
 800afc6:	d026      	beq.n	800b016 <UART_SetConfig+0x1736>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	2b06      	cmp	r3, #6
 800afce:	d020      	beq.n	800b012 <UART_SetConfig+0x1732>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	2b07      	cmp	r3, #7
 800afd6:	d01a      	beq.n	800b00e <UART_SetConfig+0x172e>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	2b08      	cmp	r3, #8
 800afde:	d014      	beq.n	800b00a <UART_SetConfig+0x172a>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe4:	2b09      	cmp	r3, #9
 800afe6:	d00e      	beq.n	800b006 <UART_SetConfig+0x1726>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	2b0a      	cmp	r3, #10
 800afee:	d008      	beq.n	800b002 <UART_SetConfig+0x1722>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	2b0b      	cmp	r3, #11
 800aff6:	d102      	bne.n	800affe <UART_SetConfig+0x171e>
 800aff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800affc:	e016      	b.n	800b02c <UART_SetConfig+0x174c>
 800affe:	2301      	movs	r3, #1
 800b000:	e014      	b.n	800b02c <UART_SetConfig+0x174c>
 800b002:	2380      	movs	r3, #128	; 0x80
 800b004:	e012      	b.n	800b02c <UART_SetConfig+0x174c>
 800b006:	2340      	movs	r3, #64	; 0x40
 800b008:	e010      	b.n	800b02c <UART_SetConfig+0x174c>
 800b00a:	2320      	movs	r3, #32
 800b00c:	e00e      	b.n	800b02c <UART_SetConfig+0x174c>
 800b00e:	2310      	movs	r3, #16
 800b010:	e00c      	b.n	800b02c <UART_SetConfig+0x174c>
 800b012:	230c      	movs	r3, #12
 800b014:	e00a      	b.n	800b02c <UART_SetConfig+0x174c>
 800b016:	230a      	movs	r3, #10
 800b018:	e008      	b.n	800b02c <UART_SetConfig+0x174c>
 800b01a:	2308      	movs	r3, #8
 800b01c:	e006      	b.n	800b02c <UART_SetConfig+0x174c>
 800b01e:	2306      	movs	r3, #6
 800b020:	e004      	b.n	800b02c <UART_SetConfig+0x174c>
 800b022:	2304      	movs	r3, #4
 800b024:	e002      	b.n	800b02c <UART_SetConfig+0x174c>
 800b026:	2302      	movs	r3, #2
 800b028:	e000      	b.n	800b02c <UART_SetConfig+0x174c>
 800b02a:	2301      	movs	r3, #1
 800b02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b030:	005a      	lsls	r2, r3, #1
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	085b      	lsrs	r3, r3, #1
 800b038:	441a      	add	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b042:	b29b      	uxth	r3, r3
 800b044:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b046:	e1f6      	b.n	800b436 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b048:	f107 030c 	add.w	r3, r7, #12
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fb fe83 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d044      	beq.n	800b0e6 <UART_SetConfig+0x1806>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b060:	2b01      	cmp	r3, #1
 800b062:	d03e      	beq.n	800b0e2 <UART_SetConfig+0x1802>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d038      	beq.n	800b0de <UART_SetConfig+0x17fe>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	2b03      	cmp	r3, #3
 800b072:	d032      	beq.n	800b0da <UART_SetConfig+0x17fa>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	2b04      	cmp	r3, #4
 800b07a:	d02c      	beq.n	800b0d6 <UART_SetConfig+0x17f6>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b080:	2b05      	cmp	r3, #5
 800b082:	d026      	beq.n	800b0d2 <UART_SetConfig+0x17f2>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	2b06      	cmp	r3, #6
 800b08a:	d020      	beq.n	800b0ce <UART_SetConfig+0x17ee>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b090:	2b07      	cmp	r3, #7
 800b092:	d01a      	beq.n	800b0ca <UART_SetConfig+0x17ea>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	2b08      	cmp	r3, #8
 800b09a:	d014      	beq.n	800b0c6 <UART_SetConfig+0x17e6>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a0:	2b09      	cmp	r3, #9
 800b0a2:	d00e      	beq.n	800b0c2 <UART_SetConfig+0x17e2>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	2b0a      	cmp	r3, #10
 800b0aa:	d008      	beq.n	800b0be <UART_SetConfig+0x17de>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	2b0b      	cmp	r3, #11
 800b0b2:	d102      	bne.n	800b0ba <UART_SetConfig+0x17da>
 800b0b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0b8:	e016      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e014      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0be:	2380      	movs	r3, #128	; 0x80
 800b0c0:	e012      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0c2:	2340      	movs	r3, #64	; 0x40
 800b0c4:	e010      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0c6:	2320      	movs	r3, #32
 800b0c8:	e00e      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0ca:	2310      	movs	r3, #16
 800b0cc:	e00c      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0ce:	230c      	movs	r3, #12
 800b0d0:	e00a      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0d2:	230a      	movs	r3, #10
 800b0d4:	e008      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0d6:	2308      	movs	r3, #8
 800b0d8:	e006      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0da:	2306      	movs	r3, #6
 800b0dc:	e004      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0de:	2304      	movs	r3, #4
 800b0e0:	e002      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	e000      	b.n	800b0e8 <UART_SetConfig+0x1808>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ec:	005a      	lsls	r2, r3, #1
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	085b      	lsrs	r3, r3, #1
 800b0f4:	441a      	add	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b102:	e198      	b.n	800b436 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b104:	4b87      	ldr	r3, [pc, #540]	; (800b324 <UART_SetConfig+0x1a44>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0320 	and.w	r3, r3, #32
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d05e      	beq.n	800b1ce <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b110:	4b84      	ldr	r3, [pc, #528]	; (800b324 <UART_SetConfig+0x1a44>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	08db      	lsrs	r3, r3, #3
 800b116:	f003 0303 	and.w	r3, r3, #3
 800b11a:	4a83      	ldr	r2, [pc, #524]	; (800b328 <UART_SetConfig+0x1a48>)
 800b11c:	40da      	lsrs	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b122:	2b00      	cmp	r3, #0
 800b124:	d044      	beq.n	800b1b0 <UART_SetConfig+0x18d0>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d03e      	beq.n	800b1ac <UART_SetConfig+0x18cc>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	2b02      	cmp	r3, #2
 800b134:	d038      	beq.n	800b1a8 <UART_SetConfig+0x18c8>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d032      	beq.n	800b1a4 <UART_SetConfig+0x18c4>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	2b04      	cmp	r3, #4
 800b144:	d02c      	beq.n	800b1a0 <UART_SetConfig+0x18c0>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	2b05      	cmp	r3, #5
 800b14c:	d026      	beq.n	800b19c <UART_SetConfig+0x18bc>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2b06      	cmp	r3, #6
 800b154:	d020      	beq.n	800b198 <UART_SetConfig+0x18b8>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2b07      	cmp	r3, #7
 800b15c:	d01a      	beq.n	800b194 <UART_SetConfig+0x18b4>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	2b08      	cmp	r3, #8
 800b164:	d014      	beq.n	800b190 <UART_SetConfig+0x18b0>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2b09      	cmp	r3, #9
 800b16c:	d00e      	beq.n	800b18c <UART_SetConfig+0x18ac>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2b0a      	cmp	r3, #10
 800b174:	d008      	beq.n	800b188 <UART_SetConfig+0x18a8>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17a:	2b0b      	cmp	r3, #11
 800b17c:	d102      	bne.n	800b184 <UART_SetConfig+0x18a4>
 800b17e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b182:	e016      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b184:	2301      	movs	r3, #1
 800b186:	e014      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b188:	2380      	movs	r3, #128	; 0x80
 800b18a:	e012      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b18c:	2340      	movs	r3, #64	; 0x40
 800b18e:	e010      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b190:	2320      	movs	r3, #32
 800b192:	e00e      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b194:	2310      	movs	r3, #16
 800b196:	e00c      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b198:	230c      	movs	r3, #12
 800b19a:	e00a      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b19c:	230a      	movs	r3, #10
 800b19e:	e008      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b1a0:	2308      	movs	r3, #8
 800b1a2:	e006      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b1a4:	2306      	movs	r3, #6
 800b1a6:	e004      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b1a8:	2304      	movs	r3, #4
 800b1aa:	e002      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	e000      	b.n	800b1b2 <UART_SetConfig+0x18d2>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b6:	005a      	lsls	r2, r3, #1
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	085b      	lsrs	r3, r3, #1
 800b1be:	441a      	add	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b1cc:	e133      	b.n	800b436 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d043      	beq.n	800b25e <UART_SetConfig+0x197e>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d03d      	beq.n	800b25a <UART_SetConfig+0x197a>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d037      	beq.n	800b256 <UART_SetConfig+0x1976>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	d031      	beq.n	800b252 <UART_SetConfig+0x1972>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	d02b      	beq.n	800b24e <UART_SetConfig+0x196e>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	2b05      	cmp	r3, #5
 800b1fc:	d025      	beq.n	800b24a <UART_SetConfig+0x196a>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	2b06      	cmp	r3, #6
 800b204:	d01f      	beq.n	800b246 <UART_SetConfig+0x1966>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	2b07      	cmp	r3, #7
 800b20c:	d019      	beq.n	800b242 <UART_SetConfig+0x1962>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	2b08      	cmp	r3, #8
 800b214:	d013      	beq.n	800b23e <UART_SetConfig+0x195e>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	2b09      	cmp	r3, #9
 800b21c:	d00d      	beq.n	800b23a <UART_SetConfig+0x195a>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b222:	2b0a      	cmp	r3, #10
 800b224:	d007      	beq.n	800b236 <UART_SetConfig+0x1956>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	2b0b      	cmp	r3, #11
 800b22c:	d101      	bne.n	800b232 <UART_SetConfig+0x1952>
 800b22e:	4b3f      	ldr	r3, [pc, #252]	; (800b32c <UART_SetConfig+0x1a4c>)
 800b230:	e016      	b.n	800b260 <UART_SetConfig+0x1980>
 800b232:	4b3f      	ldr	r3, [pc, #252]	; (800b330 <UART_SetConfig+0x1a50>)
 800b234:	e014      	b.n	800b260 <UART_SetConfig+0x1980>
 800b236:	4b3f      	ldr	r3, [pc, #252]	; (800b334 <UART_SetConfig+0x1a54>)
 800b238:	e012      	b.n	800b260 <UART_SetConfig+0x1980>
 800b23a:	4b3f      	ldr	r3, [pc, #252]	; (800b338 <UART_SetConfig+0x1a58>)
 800b23c:	e010      	b.n	800b260 <UART_SetConfig+0x1980>
 800b23e:	4b3f      	ldr	r3, [pc, #252]	; (800b33c <UART_SetConfig+0x1a5c>)
 800b240:	e00e      	b.n	800b260 <UART_SetConfig+0x1980>
 800b242:	4b3f      	ldr	r3, [pc, #252]	; (800b340 <UART_SetConfig+0x1a60>)
 800b244:	e00c      	b.n	800b260 <UART_SetConfig+0x1980>
 800b246:	4b3f      	ldr	r3, [pc, #252]	; (800b344 <UART_SetConfig+0x1a64>)
 800b248:	e00a      	b.n	800b260 <UART_SetConfig+0x1980>
 800b24a:	4b3f      	ldr	r3, [pc, #252]	; (800b348 <UART_SetConfig+0x1a68>)
 800b24c:	e008      	b.n	800b260 <UART_SetConfig+0x1980>
 800b24e:	4b3f      	ldr	r3, [pc, #252]	; (800b34c <UART_SetConfig+0x1a6c>)
 800b250:	e006      	b.n	800b260 <UART_SetConfig+0x1980>
 800b252:	4b3f      	ldr	r3, [pc, #252]	; (800b350 <UART_SetConfig+0x1a70>)
 800b254:	e004      	b.n	800b260 <UART_SetConfig+0x1980>
 800b256:	4b3f      	ldr	r3, [pc, #252]	; (800b354 <UART_SetConfig+0x1a74>)
 800b258:	e002      	b.n	800b260 <UART_SetConfig+0x1980>
 800b25a:	4b33      	ldr	r3, [pc, #204]	; (800b328 <UART_SetConfig+0x1a48>)
 800b25c:	e000      	b.n	800b260 <UART_SetConfig+0x1980>
 800b25e:	4b34      	ldr	r3, [pc, #208]	; (800b330 <UART_SetConfig+0x1a50>)
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	6852      	ldr	r2, [r2, #4]
 800b264:	0852      	lsrs	r2, r2, #1
 800b266:	441a      	add	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b270:	b29b      	uxth	r3, r3
 800b272:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b274:	e0df      	b.n	800b436 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d045      	beq.n	800b30a <UART_SetConfig+0x1a2a>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	2b01      	cmp	r3, #1
 800b284:	d03f      	beq.n	800b306 <UART_SetConfig+0x1a26>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d039      	beq.n	800b302 <UART_SetConfig+0x1a22>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b292:	2b03      	cmp	r3, #3
 800b294:	d033      	beq.n	800b2fe <UART_SetConfig+0x1a1e>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29a:	2b04      	cmp	r3, #4
 800b29c:	d02d      	beq.n	800b2fa <UART_SetConfig+0x1a1a>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a2:	2b05      	cmp	r3, #5
 800b2a4:	d027      	beq.n	800b2f6 <UART_SetConfig+0x1a16>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2aa:	2b06      	cmp	r3, #6
 800b2ac:	d021      	beq.n	800b2f2 <UART_SetConfig+0x1a12>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b2:	2b07      	cmp	r3, #7
 800b2b4:	d01b      	beq.n	800b2ee <UART_SetConfig+0x1a0e>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ba:	2b08      	cmp	r3, #8
 800b2bc:	d015      	beq.n	800b2ea <UART_SetConfig+0x1a0a>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c2:	2b09      	cmp	r3, #9
 800b2c4:	d00f      	beq.n	800b2e6 <UART_SetConfig+0x1a06>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ca:	2b0a      	cmp	r3, #10
 800b2cc:	d008      	beq.n	800b2e0 <UART_SetConfig+0x1a00>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d2:	2b0b      	cmp	r3, #11
 800b2d4:	d102      	bne.n	800b2dc <UART_SetConfig+0x19fc>
 800b2d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b2da:	e017      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b2dc:	4b18      	ldr	r3, [pc, #96]	; (800b340 <UART_SetConfig+0x1a60>)
 800b2de:	e015      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b2e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b2e4:	e012      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b2e6:	4b1c      	ldr	r3, [pc, #112]	; (800b358 <UART_SetConfig+0x1a78>)
 800b2e8:	e010      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b2ea:	4b1c      	ldr	r3, [pc, #112]	; (800b35c <UART_SetConfig+0x1a7c>)
 800b2ec:	e00e      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b2ee:	4b0f      	ldr	r3, [pc, #60]	; (800b32c <UART_SetConfig+0x1a4c>)
 800b2f0:	e00c      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b2f2:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <UART_SetConfig+0x1a80>)
 800b2f4:	e00a      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b2f6:	4b1b      	ldr	r3, [pc, #108]	; (800b364 <UART_SetConfig+0x1a84>)
 800b2f8:	e008      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b2fa:	4b0e      	ldr	r3, [pc, #56]	; (800b334 <UART_SetConfig+0x1a54>)
 800b2fc:	e006      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b2fe:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <UART_SetConfig+0x1a88>)
 800b300:	e004      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b302:	4b0d      	ldr	r3, [pc, #52]	; (800b338 <UART_SetConfig+0x1a58>)
 800b304:	e002      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b306:	4b0d      	ldr	r3, [pc, #52]	; (800b33c <UART_SetConfig+0x1a5c>)
 800b308:	e000      	b.n	800b30c <UART_SetConfig+0x1a2c>
 800b30a:	4b0d      	ldr	r3, [pc, #52]	; (800b340 <UART_SetConfig+0x1a60>)
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	6852      	ldr	r2, [r2, #4]
 800b310:	0852      	lsrs	r2, r2, #1
 800b312:	441a      	add	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	fbb2 f3f3 	udiv	r3, r2, r3
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b320:	e089      	b.n	800b436 <UART_SetConfig+0x1b56>
 800b322:	bf00      	nop
 800b324:	58024400 	.word	0x58024400
 800b328:	03d09000 	.word	0x03d09000
 800b32c:	0007a120 	.word	0x0007a120
 800b330:	07a12000 	.word	0x07a12000
 800b334:	000f4240 	.word	0x000f4240
 800b338:	001e8480 	.word	0x001e8480
 800b33c:	003d0900 	.word	0x003d0900
 800b340:	007a1200 	.word	0x007a1200
 800b344:	00a2c2aa 	.word	0x00a2c2aa
 800b348:	00c35000 	.word	0x00c35000
 800b34c:	00f42400 	.word	0x00f42400
 800b350:	01458554 	.word	0x01458554
 800b354:	01e84800 	.word	0x01e84800
 800b358:	0001e848 	.word	0x0001e848
 800b35c:	0003d090 	.word	0x0003d090
 800b360:	000a2c2a 	.word	0x000a2c2a
 800b364:	000c3500 	.word	0x000c3500
 800b368:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b370:	2b00      	cmp	r3, #0
 800b372:	d04f      	beq.n	800b414 <UART_SetConfig+0x1b34>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d048      	beq.n	800b40e <UART_SetConfig+0x1b2e>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b380:	2b02      	cmp	r3, #2
 800b382:	d041      	beq.n	800b408 <UART_SetConfig+0x1b28>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b388:	2b03      	cmp	r3, #3
 800b38a:	d03a      	beq.n	800b402 <UART_SetConfig+0x1b22>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b390:	2b04      	cmp	r3, #4
 800b392:	d033      	beq.n	800b3fc <UART_SetConfig+0x1b1c>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	2b05      	cmp	r3, #5
 800b39a:	d02c      	beq.n	800b3f6 <UART_SetConfig+0x1b16>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	2b06      	cmp	r3, #6
 800b3a2:	d025      	beq.n	800b3f0 <UART_SetConfig+0x1b10>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	2b07      	cmp	r3, #7
 800b3aa:	d01e      	beq.n	800b3ea <UART_SetConfig+0x1b0a>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b0:	2b08      	cmp	r3, #8
 800b3b2:	d017      	beq.n	800b3e4 <UART_SetConfig+0x1b04>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b8:	2b09      	cmp	r3, #9
 800b3ba:	d010      	beq.n	800b3de <UART_SetConfig+0x1afe>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c0:	2b0a      	cmp	r3, #10
 800b3c2:	d009      	beq.n	800b3d8 <UART_SetConfig+0x1af8>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c8:	2b0b      	cmp	r3, #11
 800b3ca:	d102      	bne.n	800b3d2 <UART_SetConfig+0x1af2>
 800b3cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3d0:	e022      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b3d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b3d6:	e01f      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b3d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3dc:	e01c      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3e2:	e019      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b3e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3e8:	e016      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b3ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3ee:	e013      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b3f0:	f241 5354 	movw	r3, #5460	; 0x1554
 800b3f4:	e010      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b3f6:	f641 1398 	movw	r3, #6552	; 0x1998
 800b3fa:	e00d      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b3fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b400:	e00a      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b402:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b406:	e007      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b408:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b40c:	e004      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b40e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b412:	e001      	b.n	800b418 <UART_SetConfig+0x1b38>
 800b414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	6852      	ldr	r2, [r2, #4]
 800b41c:	0852      	lsrs	r2, r2, #1
 800b41e:	441a      	add	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	fbb2 f3f3 	udiv	r3, r2, r3
 800b428:	b29b      	uxth	r3, r3
 800b42a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b42c:	e003      	b.n	800b436 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b438:	2b0f      	cmp	r3, #15
 800b43a:	d916      	bls.n	800b46a <UART_SetConfig+0x1b8a>
 800b43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b442:	d212      	bcs.n	800b46a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b446:	b29b      	uxth	r3, r3
 800b448:	f023 030f 	bic.w	r3, r3, #15
 800b44c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b450:	085b      	lsrs	r3, r3, #1
 800b452:	b29b      	uxth	r3, r3
 800b454:	f003 0307 	and.w	r3, r3, #7
 800b458:	b29a      	uxth	r2, r3
 800b45a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b45c:	4313      	orrs	r3, r2
 800b45e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b466:	60da      	str	r2, [r3, #12]
 800b468:	e3a3      	b.n	800bbb2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b470:	e39f      	b.n	800bbb2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b472:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b476:	2b40      	cmp	r3, #64	; 0x40
 800b478:	f200 8388 	bhi.w	800bb8c <UART_SetConfig+0x22ac>
 800b47c:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <UART_SetConfig+0x1ba4>)
 800b47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b482:	bf00      	nop
 800b484:	0800b589 	.word	0x0800b589
 800b488:	0800b63f 	.word	0x0800b63f
 800b48c:	0800bb8d 	.word	0x0800bb8d
 800b490:	0800bb8d 	.word	0x0800bb8d
 800b494:	0800b6f5 	.word	0x0800b6f5
 800b498:	0800bb8d 	.word	0x0800bb8d
 800b49c:	0800bb8d 	.word	0x0800bb8d
 800b4a0:	0800bb8d 	.word	0x0800bb8d
 800b4a4:	0800b7af 	.word	0x0800b7af
 800b4a8:	0800bb8d 	.word	0x0800bb8d
 800b4ac:	0800bb8d 	.word	0x0800bb8d
 800b4b0:	0800bb8d 	.word	0x0800bb8d
 800b4b4:	0800bb8d 	.word	0x0800bb8d
 800b4b8:	0800bb8d 	.word	0x0800bb8d
 800b4bc:	0800bb8d 	.word	0x0800bb8d
 800b4c0:	0800bb8d 	.word	0x0800bb8d
 800b4c4:	0800b869 	.word	0x0800b869
 800b4c8:	0800bb8d 	.word	0x0800bb8d
 800b4cc:	0800bb8d 	.word	0x0800bb8d
 800b4d0:	0800bb8d 	.word	0x0800bb8d
 800b4d4:	0800bb8d 	.word	0x0800bb8d
 800b4d8:	0800bb8d 	.word	0x0800bb8d
 800b4dc:	0800bb8d 	.word	0x0800bb8d
 800b4e0:	0800bb8d 	.word	0x0800bb8d
 800b4e4:	0800bb8d 	.word	0x0800bb8d
 800b4e8:	0800bb8d 	.word	0x0800bb8d
 800b4ec:	0800bb8d 	.word	0x0800bb8d
 800b4f0:	0800bb8d 	.word	0x0800bb8d
 800b4f4:	0800bb8d 	.word	0x0800bb8d
 800b4f8:	0800bb8d 	.word	0x0800bb8d
 800b4fc:	0800bb8d 	.word	0x0800bb8d
 800b500:	0800bb8d 	.word	0x0800bb8d
 800b504:	0800b9d9 	.word	0x0800b9d9
 800b508:	0800bb8d 	.word	0x0800bb8d
 800b50c:	0800bb8d 	.word	0x0800bb8d
 800b510:	0800bb8d 	.word	0x0800bb8d
 800b514:	0800bb8d 	.word	0x0800bb8d
 800b518:	0800bb8d 	.word	0x0800bb8d
 800b51c:	0800bb8d 	.word	0x0800bb8d
 800b520:	0800bb8d 	.word	0x0800bb8d
 800b524:	0800bb8d 	.word	0x0800bb8d
 800b528:	0800bb8d 	.word	0x0800bb8d
 800b52c:	0800bb8d 	.word	0x0800bb8d
 800b530:	0800bb8d 	.word	0x0800bb8d
 800b534:	0800bb8d 	.word	0x0800bb8d
 800b538:	0800bb8d 	.word	0x0800bb8d
 800b53c:	0800bb8d 	.word	0x0800bb8d
 800b540:	0800bb8d 	.word	0x0800bb8d
 800b544:	0800bb8d 	.word	0x0800bb8d
 800b548:	0800bb8d 	.word	0x0800bb8d
 800b54c:	0800bb8d 	.word	0x0800bb8d
 800b550:	0800bb8d 	.word	0x0800bb8d
 800b554:	0800bb8d 	.word	0x0800bb8d
 800b558:	0800bb8d 	.word	0x0800bb8d
 800b55c:	0800bb8d 	.word	0x0800bb8d
 800b560:	0800bb8d 	.word	0x0800bb8d
 800b564:	0800bb8d 	.word	0x0800bb8d
 800b568:	0800bb8d 	.word	0x0800bb8d
 800b56c:	0800bb8d 	.word	0x0800bb8d
 800b570:	0800bb8d 	.word	0x0800bb8d
 800b574:	0800bb8d 	.word	0x0800bb8d
 800b578:	0800bb8d 	.word	0x0800bb8d
 800b57c:	0800bb8d 	.word	0x0800bb8d
 800b580:	0800bb8d 	.word	0x0800bb8d
 800b584:	0800bacd 	.word	0x0800bacd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b588:	f7fa f902 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 800b58c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b592:	2b00      	cmp	r3, #0
 800b594:	d044      	beq.n	800b620 <UART_SetConfig+0x1d40>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d03e      	beq.n	800b61c <UART_SetConfig+0x1d3c>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d038      	beq.n	800b618 <UART_SetConfig+0x1d38>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d032      	beq.n	800b614 <UART_SetConfig+0x1d34>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	2b04      	cmp	r3, #4
 800b5b4:	d02c      	beq.n	800b610 <UART_SetConfig+0x1d30>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ba:	2b05      	cmp	r3, #5
 800b5bc:	d026      	beq.n	800b60c <UART_SetConfig+0x1d2c>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	2b06      	cmp	r3, #6
 800b5c4:	d020      	beq.n	800b608 <UART_SetConfig+0x1d28>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ca:	2b07      	cmp	r3, #7
 800b5cc:	d01a      	beq.n	800b604 <UART_SetConfig+0x1d24>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d2:	2b08      	cmp	r3, #8
 800b5d4:	d014      	beq.n	800b600 <UART_SetConfig+0x1d20>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	2b09      	cmp	r3, #9
 800b5dc:	d00e      	beq.n	800b5fc <UART_SetConfig+0x1d1c>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	2b0a      	cmp	r3, #10
 800b5e4:	d008      	beq.n	800b5f8 <UART_SetConfig+0x1d18>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ea:	2b0b      	cmp	r3, #11
 800b5ec:	d102      	bne.n	800b5f4 <UART_SetConfig+0x1d14>
 800b5ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5f2:	e016      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e014      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b5f8:	2380      	movs	r3, #128	; 0x80
 800b5fa:	e012      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b5fc:	2340      	movs	r3, #64	; 0x40
 800b5fe:	e010      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b600:	2320      	movs	r3, #32
 800b602:	e00e      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b604:	2310      	movs	r3, #16
 800b606:	e00c      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b608:	230c      	movs	r3, #12
 800b60a:	e00a      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b60c:	230a      	movs	r3, #10
 800b60e:	e008      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b610:	2308      	movs	r3, #8
 800b612:	e006      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b614:	2306      	movs	r3, #6
 800b616:	e004      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b618:	2304      	movs	r3, #4
 800b61a:	e002      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b61c:	2302      	movs	r3, #2
 800b61e:	e000      	b.n	800b622 <UART_SetConfig+0x1d42>
 800b620:	2301      	movs	r3, #1
 800b622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b624:	fbb2 f2f3 	udiv	r2, r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	085b      	lsrs	r3, r3, #1
 800b62e:	441a      	add	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	fbb2 f3f3 	udiv	r3, r2, r3
 800b638:	b29b      	uxth	r3, r3
 800b63a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b63c:	e2aa      	b.n	800bb94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b63e:	f7fa f8bd 	bl	80057bc <HAL_RCC_GetPCLK2Freq>
 800b642:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d044      	beq.n	800b6d6 <UART_SetConfig+0x1df6>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b650:	2b01      	cmp	r3, #1
 800b652:	d03e      	beq.n	800b6d2 <UART_SetConfig+0x1df2>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d038      	beq.n	800b6ce <UART_SetConfig+0x1dee>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b660:	2b03      	cmp	r3, #3
 800b662:	d032      	beq.n	800b6ca <UART_SetConfig+0x1dea>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d02c      	beq.n	800b6c6 <UART_SetConfig+0x1de6>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	2b05      	cmp	r3, #5
 800b672:	d026      	beq.n	800b6c2 <UART_SetConfig+0x1de2>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b678:	2b06      	cmp	r3, #6
 800b67a:	d020      	beq.n	800b6be <UART_SetConfig+0x1dde>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	2b07      	cmp	r3, #7
 800b682:	d01a      	beq.n	800b6ba <UART_SetConfig+0x1dda>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	2b08      	cmp	r3, #8
 800b68a:	d014      	beq.n	800b6b6 <UART_SetConfig+0x1dd6>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	2b09      	cmp	r3, #9
 800b692:	d00e      	beq.n	800b6b2 <UART_SetConfig+0x1dd2>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	2b0a      	cmp	r3, #10
 800b69a:	d008      	beq.n	800b6ae <UART_SetConfig+0x1dce>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a0:	2b0b      	cmp	r3, #11
 800b6a2:	d102      	bne.n	800b6aa <UART_SetConfig+0x1dca>
 800b6a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6a8:	e016      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e014      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6ae:	2380      	movs	r3, #128	; 0x80
 800b6b0:	e012      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6b2:	2340      	movs	r3, #64	; 0x40
 800b6b4:	e010      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6b6:	2320      	movs	r3, #32
 800b6b8:	e00e      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6ba:	2310      	movs	r3, #16
 800b6bc:	e00c      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6be:	230c      	movs	r3, #12
 800b6c0:	e00a      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6c2:	230a      	movs	r3, #10
 800b6c4:	e008      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6c6:	2308      	movs	r3, #8
 800b6c8:	e006      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6ca:	2306      	movs	r3, #6
 800b6cc:	e004      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6ce:	2304      	movs	r3, #4
 800b6d0:	e002      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e000      	b.n	800b6d8 <UART_SetConfig+0x1df8>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6da:	fbb2 f2f3 	udiv	r2, r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	085b      	lsrs	r3, r3, #1
 800b6e4:	441a      	add	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6f2:	e24f      	b.n	800bb94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6f4:	f107 0318 	add.w	r3, r7, #24
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fb f9e1 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6fe:	69fa      	ldr	r2, [r7, #28]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b704:	2b00      	cmp	r3, #0
 800b706:	d044      	beq.n	800b792 <UART_SetConfig+0x1eb2>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d03e      	beq.n	800b78e <UART_SetConfig+0x1eae>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b714:	2b02      	cmp	r3, #2
 800b716:	d038      	beq.n	800b78a <UART_SetConfig+0x1eaa>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71c:	2b03      	cmp	r3, #3
 800b71e:	d032      	beq.n	800b786 <UART_SetConfig+0x1ea6>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b724:	2b04      	cmp	r3, #4
 800b726:	d02c      	beq.n	800b782 <UART_SetConfig+0x1ea2>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72c:	2b05      	cmp	r3, #5
 800b72e:	d026      	beq.n	800b77e <UART_SetConfig+0x1e9e>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b734:	2b06      	cmp	r3, #6
 800b736:	d020      	beq.n	800b77a <UART_SetConfig+0x1e9a>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	2b07      	cmp	r3, #7
 800b73e:	d01a      	beq.n	800b776 <UART_SetConfig+0x1e96>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b744:	2b08      	cmp	r3, #8
 800b746:	d014      	beq.n	800b772 <UART_SetConfig+0x1e92>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	2b09      	cmp	r3, #9
 800b74e:	d00e      	beq.n	800b76e <UART_SetConfig+0x1e8e>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	2b0a      	cmp	r3, #10
 800b756:	d008      	beq.n	800b76a <UART_SetConfig+0x1e8a>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	2b0b      	cmp	r3, #11
 800b75e:	d102      	bne.n	800b766 <UART_SetConfig+0x1e86>
 800b760:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b764:	e016      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b766:	2301      	movs	r3, #1
 800b768:	e014      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b76a:	2380      	movs	r3, #128	; 0x80
 800b76c:	e012      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b76e:	2340      	movs	r3, #64	; 0x40
 800b770:	e010      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b772:	2320      	movs	r3, #32
 800b774:	e00e      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b776:	2310      	movs	r3, #16
 800b778:	e00c      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b77a:	230c      	movs	r3, #12
 800b77c:	e00a      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b77e:	230a      	movs	r3, #10
 800b780:	e008      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b782:	2308      	movs	r3, #8
 800b784:	e006      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b786:	2306      	movs	r3, #6
 800b788:	e004      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b78a:	2304      	movs	r3, #4
 800b78c:	e002      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b78e:	2302      	movs	r3, #2
 800b790:	e000      	b.n	800b794 <UART_SetConfig+0x1eb4>
 800b792:	2301      	movs	r3, #1
 800b794:	fbb2 f2f3 	udiv	r2, r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	085b      	lsrs	r3, r3, #1
 800b79e:	441a      	add	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7ac:	e1f2      	b.n	800bb94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7ae:	f107 030c 	add.w	r3, r7, #12
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fb fad0 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d044      	beq.n	800b84c <UART_SetConfig+0x1f6c>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d03e      	beq.n	800b848 <UART_SetConfig+0x1f68>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d038      	beq.n	800b844 <UART_SetConfig+0x1f64>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d032      	beq.n	800b840 <UART_SetConfig+0x1f60>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7de:	2b04      	cmp	r3, #4
 800b7e0:	d02c      	beq.n	800b83c <UART_SetConfig+0x1f5c>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e6:	2b05      	cmp	r3, #5
 800b7e8:	d026      	beq.n	800b838 <UART_SetConfig+0x1f58>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ee:	2b06      	cmp	r3, #6
 800b7f0:	d020      	beq.n	800b834 <UART_SetConfig+0x1f54>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	2b07      	cmp	r3, #7
 800b7f8:	d01a      	beq.n	800b830 <UART_SetConfig+0x1f50>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	2b08      	cmp	r3, #8
 800b800:	d014      	beq.n	800b82c <UART_SetConfig+0x1f4c>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	2b09      	cmp	r3, #9
 800b808:	d00e      	beq.n	800b828 <UART_SetConfig+0x1f48>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	2b0a      	cmp	r3, #10
 800b810:	d008      	beq.n	800b824 <UART_SetConfig+0x1f44>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	2b0b      	cmp	r3, #11
 800b818:	d102      	bne.n	800b820 <UART_SetConfig+0x1f40>
 800b81a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b81e:	e016      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b820:	2301      	movs	r3, #1
 800b822:	e014      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b824:	2380      	movs	r3, #128	; 0x80
 800b826:	e012      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b828:	2340      	movs	r3, #64	; 0x40
 800b82a:	e010      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b82c:	2320      	movs	r3, #32
 800b82e:	e00e      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b830:	2310      	movs	r3, #16
 800b832:	e00c      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b834:	230c      	movs	r3, #12
 800b836:	e00a      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b838:	230a      	movs	r3, #10
 800b83a:	e008      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b83c:	2308      	movs	r3, #8
 800b83e:	e006      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b840:	2306      	movs	r3, #6
 800b842:	e004      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b844:	2304      	movs	r3, #4
 800b846:	e002      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b848:	2302      	movs	r3, #2
 800b84a:	e000      	b.n	800b84e <UART_SetConfig+0x1f6e>
 800b84c:	2301      	movs	r3, #1
 800b84e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	085b      	lsrs	r3, r3, #1
 800b858:	441a      	add	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b862:	b29b      	uxth	r3, r3
 800b864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b866:	e195      	b.n	800bb94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b868:	4b87      	ldr	r3, [pc, #540]	; (800ba88 <UART_SetConfig+0x21a8>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0320 	and.w	r3, r3, #32
 800b870:	2b00      	cmp	r3, #0
 800b872:	d05d      	beq.n	800b930 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b874:	4b84      	ldr	r3, [pc, #528]	; (800ba88 <UART_SetConfig+0x21a8>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	08db      	lsrs	r3, r3, #3
 800b87a:	f003 0303 	and.w	r3, r3, #3
 800b87e:	4a83      	ldr	r2, [pc, #524]	; (800ba8c <UART_SetConfig+0x21ac>)
 800b880:	40da      	lsrs	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b886:	2b00      	cmp	r3, #0
 800b888:	d044      	beq.n	800b914 <UART_SetConfig+0x2034>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d03e      	beq.n	800b910 <UART_SetConfig+0x2030>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b896:	2b02      	cmp	r3, #2
 800b898:	d038      	beq.n	800b90c <UART_SetConfig+0x202c>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d032      	beq.n	800b908 <UART_SetConfig+0x2028>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a6:	2b04      	cmp	r3, #4
 800b8a8:	d02c      	beq.n	800b904 <UART_SetConfig+0x2024>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ae:	2b05      	cmp	r3, #5
 800b8b0:	d026      	beq.n	800b900 <UART_SetConfig+0x2020>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b6:	2b06      	cmp	r3, #6
 800b8b8:	d020      	beq.n	800b8fc <UART_SetConfig+0x201c>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8be:	2b07      	cmp	r3, #7
 800b8c0:	d01a      	beq.n	800b8f8 <UART_SetConfig+0x2018>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c6:	2b08      	cmp	r3, #8
 800b8c8:	d014      	beq.n	800b8f4 <UART_SetConfig+0x2014>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ce:	2b09      	cmp	r3, #9
 800b8d0:	d00e      	beq.n	800b8f0 <UART_SetConfig+0x2010>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d6:	2b0a      	cmp	r3, #10
 800b8d8:	d008      	beq.n	800b8ec <UART_SetConfig+0x200c>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8de:	2b0b      	cmp	r3, #11
 800b8e0:	d102      	bne.n	800b8e8 <UART_SetConfig+0x2008>
 800b8e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8e6:	e016      	b.n	800b916 <UART_SetConfig+0x2036>
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e014      	b.n	800b916 <UART_SetConfig+0x2036>
 800b8ec:	2380      	movs	r3, #128	; 0x80
 800b8ee:	e012      	b.n	800b916 <UART_SetConfig+0x2036>
 800b8f0:	2340      	movs	r3, #64	; 0x40
 800b8f2:	e010      	b.n	800b916 <UART_SetConfig+0x2036>
 800b8f4:	2320      	movs	r3, #32
 800b8f6:	e00e      	b.n	800b916 <UART_SetConfig+0x2036>
 800b8f8:	2310      	movs	r3, #16
 800b8fa:	e00c      	b.n	800b916 <UART_SetConfig+0x2036>
 800b8fc:	230c      	movs	r3, #12
 800b8fe:	e00a      	b.n	800b916 <UART_SetConfig+0x2036>
 800b900:	230a      	movs	r3, #10
 800b902:	e008      	b.n	800b916 <UART_SetConfig+0x2036>
 800b904:	2308      	movs	r3, #8
 800b906:	e006      	b.n	800b916 <UART_SetConfig+0x2036>
 800b908:	2306      	movs	r3, #6
 800b90a:	e004      	b.n	800b916 <UART_SetConfig+0x2036>
 800b90c:	2304      	movs	r3, #4
 800b90e:	e002      	b.n	800b916 <UART_SetConfig+0x2036>
 800b910:	2302      	movs	r3, #2
 800b912:	e000      	b.n	800b916 <UART_SetConfig+0x2036>
 800b914:	2301      	movs	r3, #1
 800b916:	fbb2 f2f3 	udiv	r2, r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	085b      	lsrs	r3, r3, #1
 800b920:	441a      	add	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	fbb2 f3f3 	udiv	r3, r2, r3
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b92e:	e131      	b.n	800bb94 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b934:	2b00      	cmp	r3, #0
 800b936:	d043      	beq.n	800b9c0 <UART_SetConfig+0x20e0>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d03d      	beq.n	800b9bc <UART_SetConfig+0x20dc>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b944:	2b02      	cmp	r3, #2
 800b946:	d037      	beq.n	800b9b8 <UART_SetConfig+0x20d8>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d031      	beq.n	800b9b4 <UART_SetConfig+0x20d4>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b954:	2b04      	cmp	r3, #4
 800b956:	d02b      	beq.n	800b9b0 <UART_SetConfig+0x20d0>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	2b05      	cmp	r3, #5
 800b95e:	d025      	beq.n	800b9ac <UART_SetConfig+0x20cc>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	2b06      	cmp	r3, #6
 800b966:	d01f      	beq.n	800b9a8 <UART_SetConfig+0x20c8>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	2b07      	cmp	r3, #7
 800b96e:	d019      	beq.n	800b9a4 <UART_SetConfig+0x20c4>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	2b08      	cmp	r3, #8
 800b976:	d013      	beq.n	800b9a0 <UART_SetConfig+0x20c0>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	2b09      	cmp	r3, #9
 800b97e:	d00d      	beq.n	800b99c <UART_SetConfig+0x20bc>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b984:	2b0a      	cmp	r3, #10
 800b986:	d007      	beq.n	800b998 <UART_SetConfig+0x20b8>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98c:	2b0b      	cmp	r3, #11
 800b98e:	d101      	bne.n	800b994 <UART_SetConfig+0x20b4>
 800b990:	4b3f      	ldr	r3, [pc, #252]	; (800ba90 <UART_SetConfig+0x21b0>)
 800b992:	e016      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b994:	4b3d      	ldr	r3, [pc, #244]	; (800ba8c <UART_SetConfig+0x21ac>)
 800b996:	e014      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b998:	4b3e      	ldr	r3, [pc, #248]	; (800ba94 <UART_SetConfig+0x21b4>)
 800b99a:	e012      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b99c:	4b3e      	ldr	r3, [pc, #248]	; (800ba98 <UART_SetConfig+0x21b8>)
 800b99e:	e010      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b9a0:	4b3e      	ldr	r3, [pc, #248]	; (800ba9c <UART_SetConfig+0x21bc>)
 800b9a2:	e00e      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b9a4:	4b3e      	ldr	r3, [pc, #248]	; (800baa0 <UART_SetConfig+0x21c0>)
 800b9a6:	e00c      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b9a8:	4b3e      	ldr	r3, [pc, #248]	; (800baa4 <UART_SetConfig+0x21c4>)
 800b9aa:	e00a      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b9ac:	4b3e      	ldr	r3, [pc, #248]	; (800baa8 <UART_SetConfig+0x21c8>)
 800b9ae:	e008      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b9b0:	4b3e      	ldr	r3, [pc, #248]	; (800baac <UART_SetConfig+0x21cc>)
 800b9b2:	e006      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b9b4:	4b3e      	ldr	r3, [pc, #248]	; (800bab0 <UART_SetConfig+0x21d0>)
 800b9b6:	e004      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b9b8:	4b3e      	ldr	r3, [pc, #248]	; (800bab4 <UART_SetConfig+0x21d4>)
 800b9ba:	e002      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b9bc:	4b3e      	ldr	r3, [pc, #248]	; (800bab8 <UART_SetConfig+0x21d8>)
 800b9be:	e000      	b.n	800b9c2 <UART_SetConfig+0x20e2>
 800b9c0:	4b32      	ldr	r3, [pc, #200]	; (800ba8c <UART_SetConfig+0x21ac>)
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	6852      	ldr	r2, [r2, #4]
 800b9c6:	0852      	lsrs	r2, r2, #1
 800b9c8:	441a      	add	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9d6:	e0dd      	b.n	800bb94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d046      	beq.n	800ba6e <UART_SetConfig+0x218e>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d040      	beq.n	800ba6a <UART_SetConfig+0x218a>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d03a      	beq.n	800ba66 <UART_SetConfig+0x2186>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	2b03      	cmp	r3, #3
 800b9f6:	d034      	beq.n	800ba62 <UART_SetConfig+0x2182>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	2b04      	cmp	r3, #4
 800b9fe:	d02e      	beq.n	800ba5e <UART_SetConfig+0x217e>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba04:	2b05      	cmp	r3, #5
 800ba06:	d028      	beq.n	800ba5a <UART_SetConfig+0x217a>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0c:	2b06      	cmp	r3, #6
 800ba0e:	d022      	beq.n	800ba56 <UART_SetConfig+0x2176>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba14:	2b07      	cmp	r3, #7
 800ba16:	d01c      	beq.n	800ba52 <UART_SetConfig+0x2172>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	2b08      	cmp	r3, #8
 800ba1e:	d016      	beq.n	800ba4e <UART_SetConfig+0x216e>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	2b09      	cmp	r3, #9
 800ba26:	d00f      	beq.n	800ba48 <UART_SetConfig+0x2168>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	2b0a      	cmp	r3, #10
 800ba2e:	d008      	beq.n	800ba42 <UART_SetConfig+0x2162>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	2b0b      	cmp	r3, #11
 800ba36:	d102      	bne.n	800ba3e <UART_SetConfig+0x215e>
 800ba38:	f643 5309 	movw	r3, #15625	; 0x3d09
 800ba3c:	e018      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba3e:	4b18      	ldr	r3, [pc, #96]	; (800baa0 <UART_SetConfig+0x21c0>)
 800ba40:	e016      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba42:	f647 2312 	movw	r3, #31250	; 0x7a12
 800ba46:	e013      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba48:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ba4c:	e010      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba4e:	4b1b      	ldr	r3, [pc, #108]	; (800babc <UART_SetConfig+0x21dc>)
 800ba50:	e00e      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba52:	4b0f      	ldr	r3, [pc, #60]	; (800ba90 <UART_SetConfig+0x21b0>)
 800ba54:	e00c      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba56:	4b1a      	ldr	r3, [pc, #104]	; (800bac0 <UART_SetConfig+0x21e0>)
 800ba58:	e00a      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba5a:	4b1a      	ldr	r3, [pc, #104]	; (800bac4 <UART_SetConfig+0x21e4>)
 800ba5c:	e008      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba5e:	4b0d      	ldr	r3, [pc, #52]	; (800ba94 <UART_SetConfig+0x21b4>)
 800ba60:	e006      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba62:	4b19      	ldr	r3, [pc, #100]	; (800bac8 <UART_SetConfig+0x21e8>)
 800ba64:	e004      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba66:	4b0c      	ldr	r3, [pc, #48]	; (800ba98 <UART_SetConfig+0x21b8>)
 800ba68:	e002      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba6a:	4b0c      	ldr	r3, [pc, #48]	; (800ba9c <UART_SetConfig+0x21bc>)
 800ba6c:	e000      	b.n	800ba70 <UART_SetConfig+0x2190>
 800ba6e:	4b0c      	ldr	r3, [pc, #48]	; (800baa0 <UART_SetConfig+0x21c0>)
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	6852      	ldr	r2, [r2, #4]
 800ba74:	0852      	lsrs	r2, r2, #1
 800ba76:	441a      	add	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba84:	e086      	b.n	800bb94 <UART_SetConfig+0x22b4>
 800ba86:	bf00      	nop
 800ba88:	58024400 	.word	0x58024400
 800ba8c:	03d09000 	.word	0x03d09000
 800ba90:	0003d090 	.word	0x0003d090
 800ba94:	0007a120 	.word	0x0007a120
 800ba98:	000f4240 	.word	0x000f4240
 800ba9c:	001e8480 	.word	0x001e8480
 800baa0:	003d0900 	.word	0x003d0900
 800baa4:	00516155 	.word	0x00516155
 800baa8:	0061a800 	.word	0x0061a800
 800baac:	007a1200 	.word	0x007a1200
 800bab0:	00a2c2aa 	.word	0x00a2c2aa
 800bab4:	00f42400 	.word	0x00f42400
 800bab8:	01e84800 	.word	0x01e84800
 800babc:	0001e848 	.word	0x0001e848
 800bac0:	00051615 	.word	0x00051615
 800bac4:	00061a80 	.word	0x00061a80
 800bac8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d04e      	beq.n	800bb72 <UART_SetConfig+0x2292>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d047      	beq.n	800bb6c <UART_SetConfig+0x228c>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d040      	beq.n	800bb66 <UART_SetConfig+0x2286>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae8:	2b03      	cmp	r3, #3
 800baea:	d039      	beq.n	800bb60 <UART_SetConfig+0x2280>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	d032      	beq.n	800bb5a <UART_SetConfig+0x227a>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf8:	2b05      	cmp	r3, #5
 800bafa:	d02b      	beq.n	800bb54 <UART_SetConfig+0x2274>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	2b06      	cmp	r3, #6
 800bb02:	d024      	beq.n	800bb4e <UART_SetConfig+0x226e>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	2b07      	cmp	r3, #7
 800bb0a:	d01d      	beq.n	800bb48 <UART_SetConfig+0x2268>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb10:	2b08      	cmp	r3, #8
 800bb12:	d016      	beq.n	800bb42 <UART_SetConfig+0x2262>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb18:	2b09      	cmp	r3, #9
 800bb1a:	d00f      	beq.n	800bb3c <UART_SetConfig+0x225c>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb20:	2b0a      	cmp	r3, #10
 800bb22:	d008      	beq.n	800bb36 <UART_SetConfig+0x2256>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	2b0b      	cmp	r3, #11
 800bb2a:	d101      	bne.n	800bb30 <UART_SetConfig+0x2250>
 800bb2c:	2380      	movs	r3, #128	; 0x80
 800bb2e:	e022      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb34:	e01f      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb3a:	e01c      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb40:	e019      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb46:	e016      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb4c:	e013      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800bb52:	e010      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb54:	f640 43cc 	movw	r3, #3276	; 0xccc
 800bb58:	e00d      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb5e:	e00a      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb60:	f241 5355 	movw	r3, #5461	; 0x1555
 800bb64:	e007      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb6a:	e004      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb70:	e001      	b.n	800bb76 <UART_SetConfig+0x2296>
 800bb72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	6852      	ldr	r2, [r2, #4]
 800bb7a:	0852      	lsrs	r2, r2, #1
 800bb7c:	441a      	add	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb8a:	e003      	b.n	800bb94 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bb92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb96:	2b0f      	cmp	r3, #15
 800bb98:	d908      	bls.n	800bbac <UART_SetConfig+0x22cc>
 800bb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba0:	d204      	bcs.n	800bbac <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bba8:	60da      	str	r2, [r3, #12]
 800bbaa:	e002      	b.n	800bbb2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bbce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3740      	adds	r7, #64	; 0x40
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bbdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00a      	beq.n	800bc06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	430a      	orrs	r2, r1
 800bc04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0a:	f003 0302 	and.w	r3, r3, #2
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00a      	beq.n	800bc28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	430a      	orrs	r2, r1
 800bc26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc2c:	f003 0304 	and.w	r3, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00a      	beq.n	800bc4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	430a      	orrs	r2, r1
 800bc48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc4e:	f003 0308 	and.w	r3, r3, #8
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00a      	beq.n	800bc6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	430a      	orrs	r2, r1
 800bc6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc70:	f003 0310 	and.w	r3, r3, #16
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00a      	beq.n	800bc8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc92:	f003 0320 	and.w	r3, r3, #32
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00a      	beq.n	800bcb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	430a      	orrs	r2, r1
 800bcae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d01a      	beq.n	800bcf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	430a      	orrs	r2, r1
 800bcd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcda:	d10a      	bne.n	800bcf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	430a      	orrs	r2, r1
 800bcf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00a      	beq.n	800bd14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	430a      	orrs	r2, r1
 800bd12:	605a      	str	r2, [r3, #4]
  }
}
 800bd14:	bf00      	nop
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b086      	sub	sp, #24
 800bd24:	af02      	add	r7, sp, #8
 800bd26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bd30:	f7f5 fd74 	bl	800181c <HAL_GetTick>
 800bd34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 0308 	and.w	r3, r3, #8
 800bd40:	2b08      	cmp	r3, #8
 800bd42:	d10e      	bne.n	800bd62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f82c 	bl	800bdb0 <UART_WaitOnFlagUntilTimeout>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	e022      	b.n	800bda8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0304 	and.w	r3, r3, #4
 800bd6c:	2b04      	cmp	r3, #4
 800bd6e:	d10e      	bne.n	800bd8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 f816 	bl	800bdb0 <UART_WaitOnFlagUntilTimeout>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	e00c      	b.n	800bda8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2220      	movs	r2, #32
 800bd92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2220      	movs	r2, #32
 800bd9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	603b      	str	r3, [r7, #0]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdc0:	e062      	b.n	800be88 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc8:	d05e      	beq.n	800be88 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdca:	f7f5 fd27 	bl	800181c <HAL_GetTick>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d302      	bcc.n	800bde0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d11d      	bne.n	800be1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	689a      	ldr	r2, [r3, #8]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f022 0201 	bic.w	r2, r2, #1
 800bdfe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2220      	movs	r2, #32
 800be04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2220      	movs	r2, #32
 800be0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	e045      	b.n	800bea8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0304 	and.w	r3, r3, #4
 800be26:	2b00      	cmp	r3, #0
 800be28:	d02e      	beq.n	800be88 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	69db      	ldr	r3, [r3, #28]
 800be30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be38:	d126      	bne.n	800be88 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be42:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be52:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	689a      	ldr	r2, [r3, #8]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f022 0201 	bic.w	r2, r2, #1
 800be62:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2220      	movs	r2, #32
 800be68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2220      	movs	r2, #32
 800be70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2220      	movs	r2, #32
 800be78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e00f      	b.n	800bea8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	69da      	ldr	r2, [r3, #28]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	4013      	ands	r3, r2
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	429a      	cmp	r2, r3
 800be96:	bf0c      	ite	eq
 800be98:	2301      	moveq	r3, #1
 800be9a:	2300      	movne	r3, #0
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	461a      	mov	r2, r3
 800bea0:	79fb      	ldrb	r3, [r7, #7]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d08d      	beq.n	800bdc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d101      	bne.n	800bec6 <HAL_UARTEx_DisableFifoMode+0x16>
 800bec2:	2302      	movs	r3, #2
 800bec4:	e027      	b.n	800bf16 <HAL_UARTEx_DisableFifoMode+0x66>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2224      	movs	r2, #36	; 0x24
 800bed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f022 0201 	bic.w	r2, r2, #1
 800beec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bef4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2220      	movs	r2, #32
 800bf08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3714      	adds	r7, #20
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b084      	sub	sp, #16
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d101      	bne.n	800bf3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf36:	2302      	movs	r3, #2
 800bf38:	e02d      	b.n	800bf96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2224      	movs	r2, #36	; 0x24
 800bf46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f022 0201 	bic.w	r2, r2, #1
 800bf60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	430a      	orrs	r2, r1
 800bf74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f850 	bl	800c01c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2220      	movs	r2, #32
 800bf88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b084      	sub	sp, #16
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d101      	bne.n	800bfb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	e02d      	b.n	800c012 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2224      	movs	r2, #36	; 0x24
 800bfc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f022 0201 	bic.w	r2, r2, #1
 800bfdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	430a      	orrs	r2, r1
 800bff0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f812 	bl	800c01c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2220      	movs	r2, #32
 800c004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
	...

0800c01c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b089      	sub	sp, #36	; 0x24
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c024:	4a2f      	ldr	r2, [pc, #188]	; (800c0e4 <UARTEx_SetNbDataToProcess+0xc8>)
 800c026:	f107 0314 	add.w	r3, r7, #20
 800c02a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c02e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c032:	4a2d      	ldr	r2, [pc, #180]	; (800c0e8 <UARTEx_SetNbDataToProcess+0xcc>)
 800c034:	f107 030c 	add.w	r3, r7, #12
 800c038:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c03c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c044:	2b00      	cmp	r3, #0
 800c046:	d108      	bne.n	800c05a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c058:	e03d      	b.n	800c0d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c05a:	2308      	movs	r3, #8
 800c05c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c05e:	2308      	movs	r3, #8
 800c060:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	0e5b      	lsrs	r3, r3, #25
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	f003 0307 	and.w	r3, r3, #7
 800c070:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	0f5b      	lsrs	r3, r3, #29
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	f003 0307 	and.w	r3, r3, #7
 800c080:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c082:	7fbb      	ldrb	r3, [r7, #30]
 800c084:	7f3a      	ldrb	r2, [r7, #28]
 800c086:	f107 0120 	add.w	r1, r7, #32
 800c08a:	440a      	add	r2, r1
 800c08c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c090:	fb02 f303 	mul.w	r3, r2, r3
 800c094:	7f3a      	ldrb	r2, [r7, #28]
 800c096:	f107 0120 	add.w	r1, r7, #32
 800c09a:	440a      	add	r2, r1
 800c09c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c0a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c0ac:	7ffb      	ldrb	r3, [r7, #31]
 800c0ae:	7f7a      	ldrb	r2, [r7, #29]
 800c0b0:	f107 0120 	add.w	r1, r7, #32
 800c0b4:	440a      	add	r2, r1
 800c0b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c0ba:	fb02 f303 	mul.w	r3, r2, r3
 800c0be:	7f7a      	ldrb	r2, [r7, #29]
 800c0c0:	f107 0120 	add.w	r1, r7, #32
 800c0c4:	440a      	add	r2, r1
 800c0c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c0ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c0d6:	bf00      	nop
 800c0d8:	3724      	adds	r7, #36	; 0x24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	08016d74 	.word	0x08016d74
 800c0e8:	08016d7c 	.word	0x08016d7c

0800c0ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	b480      	push	{r7}
 800c0f0:	b085      	sub	sp, #20
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	f107 001c 	add.w	r0, r7, #28
 800c0fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c102:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c104:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c106:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800c10a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800c10e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800c112:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	4313      	orrs	r3, r2
 800c118:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	4b07      	ldr	r3, [pc, #28]	; (800c13c <SDMMC_Init+0x50>)
 800c120:	4013      	ands	r3, r2
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	431a      	orrs	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	b004      	add	sp, #16
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	ffc02c00 	.word	0xffc02c00

0800c140 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c14e:	4618      	mov	r0, r3
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b083      	sub	sp, #12
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
 800c162:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f043 0203 	orr.w	r2, r3, #3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b083      	sub	sp, #12
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 0303 	and.w	r3, r3, #3
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
	...

0800c1bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c1da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c1e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c1e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68da      	ldr	r2, [r3, #12]
 800c1f2:	4b06      	ldr	r3, [pc, #24]	; (800c20c <SDMMC_SendCommand+0x50>)
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	68fa      	ldr	r2, [r7, #12]
 800c1f8:	431a      	orrs	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	fffee0c0 	.word	0xfffee0c0

0800c210 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	b2db      	uxtb	r3, r3
}
 800c21e:	4618      	mov	r0, r3
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c22a:	b480      	push	{r7}
 800c22c:	b085      	sub	sp, #20
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3314      	adds	r3, #20
 800c238:	461a      	mov	r2, r3
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	4413      	add	r3, r2
 800c23e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	685a      	ldr	r2, [r3, #4]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c276:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c27c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c282:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	4313      	orrs	r3, r2
 800c288:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	431a      	orrs	r2, r3
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c29a:	2300      	movs	r3, #0

}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3714      	adds	r7, #20
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c2b6:	2310      	movs	r3, #16
 800c2b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2ca:	f107 0308 	add.w	r3, r7, #8
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7ff ff73 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2da:	2110      	movs	r1, #16
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 faab 	bl	800c838 <SDMMC_GetCmdResp1>
 800c2e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2e4:	69fb      	ldr	r3, [r7, #28]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3720      	adds	r7, #32
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b088      	sub	sp, #32
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c2fc:	2311      	movs	r3, #17
 800c2fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c300:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c306:	2300      	movs	r3, #0
 800c308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c30a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c30e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c310:	f107 0308 	add.w	r3, r7, #8
 800c314:	4619      	mov	r1, r3
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7ff ff50 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c320:	2111      	movs	r1, #17
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa88 	bl	800c838 <SDMMC_GetCmdResp1>
 800c328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c32a:	69fb      	ldr	r3, [r7, #28]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3720      	adds	r7, #32
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b088      	sub	sp, #32
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c342:	2312      	movs	r3, #18
 800c344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c34c:	2300      	movs	r3, #0
 800c34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c356:	f107 0308 	add.w	r3, r7, #8
 800c35a:	4619      	mov	r1, r3
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f7ff ff2d 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c362:	f241 3288 	movw	r2, #5000	; 0x1388
 800c366:	2112      	movs	r1, #18
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fa65 	bl	800c838 <SDMMC_GetCmdResp1>
 800c36e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c370:	69fb      	ldr	r3, [r7, #28]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3720      	adds	r7, #32
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b088      	sub	sp, #32
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c388:	2318      	movs	r3, #24
 800c38a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c38c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c392:	2300      	movs	r3, #0
 800c394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c39a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c39c:	f107 0308 	add.w	r3, r7, #8
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7ff ff0a 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c3a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ac:	2118      	movs	r1, #24
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 fa42 	bl	800c838 <SDMMC_GetCmdResp1>
 800c3b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3b6:	69fb      	ldr	r3, [r7, #28]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3720      	adds	r7, #32
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b088      	sub	sp, #32
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c3ce:	2319      	movs	r3, #25
 800c3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3e2:	f107 0308 	add.w	r3, r7, #8
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff fee7 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3f2:	2119      	movs	r1, #25
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 fa1f 	bl	800c838 <SDMMC_GetCmdResp1>
 800c3fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3fc:	69fb      	ldr	r3, [r7, #28]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3720      	adds	r7, #32
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
	...

0800c408 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b088      	sub	sp, #32
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c410:	2300      	movs	r3, #0
 800c412:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c414:	230c      	movs	r3, #12
 800c416:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c41e:	2300      	movs	r3, #0
 800c420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c426:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c440:	f107 0308 	add.w	r3, r7, #8
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7ff feb8 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c44c:	4a0b      	ldr	r2, [pc, #44]	; (800c47c <SDMMC_CmdStopTransfer+0x74>)
 800c44e:	210c      	movs	r1, #12
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 f9f1 	bl	800c838 <SDMMC_GetCmdResp1>
 800c456:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c46a:	d101      	bne.n	800c470 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c46c:	2300      	movs	r3, #0
 800c46e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c470:	69fb      	ldr	r3, [r7, #28]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3720      	adds	r7, #32
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	05f5e100 	.word	0x05f5e100

0800c480 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b08a      	sub	sp, #40	; 0x28
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c490:	2307      	movs	r3, #7
 800c492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c498:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c49a:	2300      	movs	r3, #0
 800c49c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4a2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4a4:	f107 0310 	add.w	r3, r7, #16
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f7ff fe86 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4b4:	2107      	movs	r1, #7
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f000 f9be 	bl	800c838 <SDMMC_GetCmdResp1>
 800c4bc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3728      	adds	r7, #40	; 0x28
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4e6:	f107 0308 	add.w	r3, r7, #8
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7ff fe65 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f976 	bl	800c7e4 <SDMMC_GetCmdError>
 800c4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4fa:	69fb      	ldr	r3, [r7, #28]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3720      	adds	r7, #32
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b088      	sub	sp, #32
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c50c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c512:	2308      	movs	r3, #8
 800c514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c51a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c51c:	2300      	movs	r3, #0
 800c51e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c524:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c526:	f107 0308 	add.w	r3, r7, #8
 800c52a:	4619      	mov	r1, r3
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff fe45 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fb6a 	bl	800cc0c <SDMMC_GetCmdResp7>
 800c538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c53a:	69fb      	ldr	r3, [r7, #28]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3720      	adds	r7, #32
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b088      	sub	sp, #32
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c552:	2337      	movs	r3, #55	; 0x37
 800c554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c55a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c55c:	2300      	movs	r3, #0
 800c55e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c566:	f107 0308 	add.w	r3, r7, #8
 800c56a:	4619      	mov	r1, r3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7ff fe25 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c572:	f241 3288 	movw	r2, #5000	; 0x1388
 800c576:	2137      	movs	r1, #55	; 0x37
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 f95d 	bl	800c838 <SDMMC_GetCmdResp1>
 800c57e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c580:	69fb      	ldr	r3, [r7, #28]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3720      	adds	r7, #32
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b088      	sub	sp, #32
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
 800c592:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c598:	2329      	movs	r3, #41	; 0x29
 800c59a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c59c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5ac:	f107 0308 	add.w	r3, r7, #8
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff fe02 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fa75 	bl	800caa8 <SDMMC_GetCmdResp3>
 800c5be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5c0:	69fb      	ldr	r3, [r7, #28]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3720      	adds	r7, #32
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b088      	sub	sp, #32
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c5d8:	2306      	movs	r3, #6
 800c5da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5ec:	f107 0308 	add.w	r3, r7, #8
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fde2 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c5f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5fc:	2106      	movs	r1, #6
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f91a 	bl	800c838 <SDMMC_GetCmdResp1>
 800c604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c606:	69fb      	ldr	r3, [r7, #28]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3720      	adds	r7, #32
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b088      	sub	sp, #32
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c618:	2300      	movs	r3, #0
 800c61a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c61c:	2333      	movs	r3, #51	; 0x33
 800c61e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c620:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c626:	2300      	movs	r3, #0
 800c628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c62a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c62e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c630:	f107 0308 	add.w	r3, r7, #8
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7ff fdc0 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c63c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c640:	2133      	movs	r1, #51	; 0x33
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f8f8 	bl	800c838 <SDMMC_GetCmdResp1>
 800c648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c64a:	69fb      	ldr	r3, [r7, #28]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b088      	sub	sp, #32
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c65c:	2300      	movs	r3, #0
 800c65e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c660:	2302      	movs	r3, #2
 800c662:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c664:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c66a:	2300      	movs	r3, #0
 800c66c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c66e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c674:	f107 0308 	add.w	r3, r7, #8
 800c678:	4619      	mov	r1, r3
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7ff fd9e 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f9c9 	bl	800ca18 <SDMMC_GetCmdResp2>
 800c686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c688:	69fb      	ldr	r3, [r7, #28]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3720      	adds	r7, #32
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c692:	b580      	push	{r7, lr}
 800c694:	b088      	sub	sp, #32
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c6a0:	2309      	movs	r3, #9
 800c6a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c6a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c6a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6b4:	f107 0308 	add.w	r3, r7, #8
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7ff fd7e 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f9a9 	bl	800ca18 <SDMMC_GetCmdResp2>
 800c6c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3720      	adds	r7, #32
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b088      	sub	sp, #32
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c6e0:	2303      	movs	r3, #3
 800c6e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6f4:	f107 0308 	add.w	r3, r7, #8
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7ff fd5e 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	2103      	movs	r1, #3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 fa0b 	bl	800cb20 <SDMMC_GetCmdResp6>
 800c70a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c70c:	69fb      	ldr	r3, [r7, #28]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3720      	adds	r7, #32
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b088      	sub	sp, #32
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c724:	230d      	movs	r3, #13
 800c726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c72c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c72e:	2300      	movs	r3, #0
 800c730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c736:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c738:	f107 0308 	add.w	r3, r7, #8
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff fd3c 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c744:	f241 3288 	movw	r2, #5000	; 0x1388
 800c748:	210d      	movs	r1, #13
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f874 	bl	800c838 <SDMMC_GetCmdResp1>
 800c750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c752:	69fb      	ldr	r3, [r7, #28]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3720      	adds	r7, #32
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b088      	sub	sp, #32
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c764:	2300      	movs	r3, #0
 800c766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c768:	230d      	movs	r3, #13
 800c76a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c76c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c772:	2300      	movs	r3, #0
 800c774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c77a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c77c:	f107 0308 	add.w	r3, r7, #8
 800c780:	4619      	mov	r1, r3
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff fd1a 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c788:	f241 3288 	movw	r2, #5000	; 0x1388
 800c78c:	210d      	movs	r1, #13
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f852 	bl	800c838 <SDMMC_GetCmdResp1>
 800c794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c796:	69fb      	ldr	r3, [r7, #28]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3720      	adds	r7, #32
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b088      	sub	sp, #32
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c7ac:	230b      	movs	r3, #11
 800c7ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7c0:	f107 0308 	add.w	r3, r7, #8
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7ff fcf8 	bl	800c1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c7cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7d0:	210b      	movs	r1, #11
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f830 	bl	800c838 <SDMMC_GetCmdResp1>
 800c7d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7da:	69fb      	ldr	r3, [r7, #28]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3720      	adds	r7, #32
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c7e4:	b490      	push	{r4, r7}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c7ec:	4b0f      	ldr	r3, [pc, #60]	; (800c82c <SDMMC_GetCmdError+0x48>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a0f      	ldr	r2, [pc, #60]	; (800c830 <SDMMC_GetCmdError+0x4c>)
 800c7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f6:	0a5b      	lsrs	r3, r3, #9
 800c7f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7fc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c800:	4623      	mov	r3, r4
 800c802:	1e5c      	subs	r4, r3, #1
 800c804:	2b00      	cmp	r3, #0
 800c806:	d102      	bne.n	800c80e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c80c:	e009      	b.n	800c822 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c816:	2b00      	cmp	r3, #0
 800c818:	d0f2      	beq.n	800c800 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4a05      	ldr	r2, [pc, #20]	; (800c834 <SDMMC_GetCmdError+0x50>)
 800c81e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bc90      	pop	{r4, r7}
 800c82a:	4770      	bx	lr
 800c82c:	2400000c 	.word	0x2400000c
 800c830:	10624dd3 	.word	0x10624dd3
 800c834:	002000c5 	.word	0x002000c5

0800c838 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c838:	b590      	push	{r4, r7, lr}
 800c83a:	b087      	sub	sp, #28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	460b      	mov	r3, r1
 800c842:	607a      	str	r2, [r7, #4]
 800c844:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c846:	4b6f      	ldr	r3, [pc, #444]	; (800ca04 <SDMMC_GetCmdResp1+0x1cc>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a6f      	ldr	r2, [pc, #444]	; (800ca08 <SDMMC_GetCmdResp1+0x1d0>)
 800c84c:	fba2 2303 	umull	r2, r3, r2, r3
 800c850:	0a5b      	lsrs	r3, r3, #9
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800c858:	4623      	mov	r3, r4
 800c85a:	1e5c      	subs	r4, r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d102      	bne.n	800c866 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c864:	e0c9      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c86a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	4b67      	ldr	r3, [pc, #412]	; (800ca0c <SDMMC_GetCmdResp1+0x1d4>)
 800c870:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c872:	2b00      	cmp	r3, #0
 800c874:	d0f0      	beq.n	800c858 <SDMMC_GetCmdResp1+0x20>
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1eb      	bne.n	800c858 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c884:	f003 0304 	and.w	r3, r3, #4
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d004      	beq.n	800c896 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2204      	movs	r2, #4
 800c890:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c892:	2304      	movs	r3, #4
 800c894:	e0b1      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c89a:	f003 0301 	and.w	r3, r3, #1
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d004      	beq.n	800c8ac <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e0a6      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	4a58      	ldr	r2, [pc, #352]	; (800ca10 <SDMMC_GetCmdResp1+0x1d8>)
 800c8b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f7ff fcac 	bl	800c210 <SDMMC_GetCommandResponse>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	7afb      	ldrb	r3, [r7, #11]
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d001      	beq.n	800c8c6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e099      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f7ff fcae 	bl	800c22a <SDMMC_GetResponse>
 800c8ce:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	4b50      	ldr	r3, [pc, #320]	; (800ca14 <SDMMC_GetCmdResp1+0x1dc>)
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d101      	bne.n	800c8de <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	e08d      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	da02      	bge.n	800c8ea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c8e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c8e8:	e087      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d001      	beq.n	800c8f8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c8f4:	2340      	movs	r3, #64	; 0x40
 800c8f6:	e080      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c902:	2380      	movs	r3, #128	; 0x80
 800c904:	e079      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c910:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c914:	e071      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c920:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c924:	e069      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d002      	beq.n	800c936 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c934:	e061      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d002      	beq.n	800c946 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c944:	e059      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d002      	beq.n	800c956 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c954:	e051      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d002      	beq.n	800c966 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c964:	e049      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c970:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c974:	e041      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c984:	e039      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c994:	e031      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d002      	beq.n	800c9a6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c9a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c9a4:	e029      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c9b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c9b4:	e021      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c9c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c9c4:	e019      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d002      	beq.n	800c9d6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c9d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c9d4:	e011      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d002      	beq.n	800c9e6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c9e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c9e4:	e009      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	f003 0308 	and.w	r3, r3, #8
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d002      	beq.n	800c9f6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c9f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c9f4:	e001      	b.n	800c9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c9f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	371c      	adds	r7, #28
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd90      	pop	{r4, r7, pc}
 800ca02:	bf00      	nop
 800ca04:	2400000c 	.word	0x2400000c
 800ca08:	10624dd3 	.word	0x10624dd3
 800ca0c:	00200045 	.word	0x00200045
 800ca10:	002000c5 	.word	0x002000c5
 800ca14:	fdffe008 	.word	0xfdffe008

0800ca18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ca18:	b490      	push	{r4, r7}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca20:	4b1e      	ldr	r3, [pc, #120]	; (800ca9c <SDMMC_GetCmdResp2+0x84>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a1e      	ldr	r2, [pc, #120]	; (800caa0 <SDMMC_GetCmdResp2+0x88>)
 800ca26:	fba2 2303 	umull	r2, r3, r2, r3
 800ca2a:	0a5b      	lsrs	r3, r3, #9
 800ca2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca30:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800ca34:	4623      	mov	r3, r4
 800ca36:	1e5c      	subs	r4, r3, #1
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca40:	e026      	b.n	800ca90 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0f0      	beq.n	800ca34 <SDMMC_GetCmdResp2+0x1c>
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1eb      	bne.n	800ca34 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d004      	beq.n	800ca72 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2204      	movs	r2, #4
 800ca6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca6e:	2304      	movs	r3, #4
 800ca70:	e00e      	b.n	800ca90 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca76:	f003 0301 	and.w	r3, r3, #1
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d004      	beq.n	800ca88 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2201      	movs	r2, #1
 800ca82:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e003      	b.n	800ca90 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a06      	ldr	r2, [pc, #24]	; (800caa4 <SDMMC_GetCmdResp2+0x8c>)
 800ca8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3710      	adds	r7, #16
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bc90      	pop	{r4, r7}
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	2400000c 	.word	0x2400000c
 800caa0:	10624dd3 	.word	0x10624dd3
 800caa4:	002000c5 	.word	0x002000c5

0800caa8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800caa8:	b490      	push	{r4, r7}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cab0:	4b18      	ldr	r3, [pc, #96]	; (800cb14 <SDMMC_GetCmdResp3+0x6c>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a18      	ldr	r2, [pc, #96]	; (800cb18 <SDMMC_GetCmdResp3+0x70>)
 800cab6:	fba2 2303 	umull	r2, r3, r2, r3
 800caba:	0a5b      	lsrs	r3, r3, #9
 800cabc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cac0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800cac4:	4623      	mov	r3, r4
 800cac6:	1e5c      	subs	r4, r3, #1
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d102      	bne.n	800cad2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cacc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cad0:	e01b      	b.n	800cb0a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0f0      	beq.n	800cac4 <SDMMC_GetCmdResp3+0x1c>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1eb      	bne.n	800cac4 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf0:	f003 0304 	and.w	r3, r3, #4
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d004      	beq.n	800cb02 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2204      	movs	r2, #4
 800cafc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cafe:	2304      	movs	r3, #4
 800cb00:	e003      	b.n	800cb0a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a05      	ldr	r2, [pc, #20]	; (800cb1c <SDMMC_GetCmdResp3+0x74>)
 800cb06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bc90      	pop	{r4, r7}
 800cb12:	4770      	bx	lr
 800cb14:	2400000c 	.word	0x2400000c
 800cb18:	10624dd3 	.word	0x10624dd3
 800cb1c:	002000c5 	.word	0x002000c5

0800cb20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cb20:	b590      	push	{r4, r7, lr}
 800cb22:	b087      	sub	sp, #28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	460b      	mov	r3, r1
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb2e:	4b34      	ldr	r3, [pc, #208]	; (800cc00 <SDMMC_GetCmdResp6+0xe0>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a34      	ldr	r2, [pc, #208]	; (800cc04 <SDMMC_GetCmdResp6+0xe4>)
 800cb34:	fba2 2303 	umull	r2, r3, r2, r3
 800cb38:	0a5b      	lsrs	r3, r3, #9
 800cb3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb3e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800cb42:	4623      	mov	r3, r4
 800cb44:	1e5c      	subs	r4, r3, #1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d102      	bne.n	800cb50 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb4e:	e052      	b.n	800cbf6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb54:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d0f0      	beq.n	800cb42 <SDMMC_GetCmdResp6+0x22>
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d1eb      	bne.n	800cb42 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb6e:	f003 0304 	and.w	r3, r3, #4
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d004      	beq.n	800cb80 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2204      	movs	r2, #4
 800cb7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb7c:	2304      	movs	r3, #4
 800cb7e:	e03a      	b.n	800cbf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb84:	f003 0301 	and.w	r3, r3, #1
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d004      	beq.n	800cb96 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e02f      	b.n	800cbf6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f7ff fb3a 	bl	800c210 <SDMMC_GetCommandResponse>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	461a      	mov	r2, r3
 800cba0:	7afb      	ldrb	r3, [r7, #11]
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d001      	beq.n	800cbaa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e025      	b.n	800cbf6 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	4a16      	ldr	r2, [pc, #88]	; (800cc08 <SDMMC_GetCmdResp6+0xe8>)
 800cbae:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f7ff fb39 	bl	800c22a <SDMMC_GetResponse>
 800cbb8:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d106      	bne.n	800cbd2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	0c1b      	lsrs	r3, r3, #16
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	e011      	b.n	800cbf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cbdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cbe0:	e009      	b.n	800cbf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d002      	beq.n	800cbf2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cbec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbf0:	e001      	b.n	800cbf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cbf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	371c      	adds	r7, #28
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd90      	pop	{r4, r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	2400000c 	.word	0x2400000c
 800cc04:	10624dd3 	.word	0x10624dd3
 800cc08:	002000c5 	.word	0x002000c5

0800cc0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cc0c:	b490      	push	{r4, r7}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc14:	4b21      	ldr	r3, [pc, #132]	; (800cc9c <SDMMC_GetCmdResp7+0x90>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a21      	ldr	r2, [pc, #132]	; (800cca0 <SDMMC_GetCmdResp7+0x94>)
 800cc1a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc1e:	0a5b      	lsrs	r3, r3, #9
 800cc20:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc24:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800cc28:	4623      	mov	r3, r4
 800cc2a:	1e5c      	subs	r4, r3, #1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d102      	bne.n	800cc36 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc34:	e02c      	b.n	800cc90 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d0f0      	beq.n	800cc28 <SDMMC_GetCmdResp7+0x1c>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1eb      	bne.n	800cc28 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc54:	f003 0304 	and.w	r3, r3, #4
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d004      	beq.n	800cc66 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2204      	movs	r2, #4
 800cc60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc62:	2304      	movs	r3, #4
 800cc64:	e014      	b.n	800cc90 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6a:	f003 0301 	and.w	r3, r3, #1
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d004      	beq.n	800cc7c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2201      	movs	r2, #1
 800cc76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e009      	b.n	800cc90 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d002      	beq.n	800cc8e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2240      	movs	r2, #64	; 0x40
 800cc8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cc8e:	2300      	movs	r3, #0

}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bc90      	pop	{r4, r7}
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	2400000c 	.word	0x2400000c
 800cca0:	10624dd3 	.word	0x10624dd3

0800cca4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cca4:	b084      	sub	sp, #16
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b084      	sub	sp, #16
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	f107 001c 	add.w	r0, r7, #28
 800ccb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d120      	bne.n	800ccfe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	68da      	ldr	r2, [r3, #12]
 800cccc:	4b25      	ldr	r3, [pc, #148]	; (800cd64 <USB_CoreInit+0xc0>)
 800ccce:	4013      	ands	r3, r2
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d105      	bne.n	800ccf2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f001 fab4 	bl	800e260 <USB_CoreReset>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73fb      	strb	r3, [r7, #15]
 800ccfc:	e01a      	b.n	800cd34 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f001 faa8 	bl	800e260 <USB_CoreReset>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cd14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	639a      	str	r2, [r3, #56]	; 0x38
 800cd26:	e005      	b.n	800cd34 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d10b      	bne.n	800cd52 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	f043 0206 	orr.w	r2, r3, #6
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	f043 0220 	orr.w	r2, r3, #32
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd5e:	b004      	add	sp, #16
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	ffbdffbf 	.word	0xffbdffbf

0800cd68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b087      	sub	sp, #28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	60b9      	str	r1, [r7, #8]
 800cd72:	4613      	mov	r3, r2
 800cd74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cd76:	79fb      	ldrb	r3, [r7, #7]
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d165      	bne.n	800ce48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	4a41      	ldr	r2, [pc, #260]	; (800ce84 <USB_SetTurnaroundTime+0x11c>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d906      	bls.n	800cd92 <USB_SetTurnaroundTime+0x2a>
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	4a40      	ldr	r2, [pc, #256]	; (800ce88 <USB_SetTurnaroundTime+0x120>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d802      	bhi.n	800cd92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cd8c:	230f      	movs	r3, #15
 800cd8e:	617b      	str	r3, [r7, #20]
 800cd90:	e062      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	4a3c      	ldr	r2, [pc, #240]	; (800ce88 <USB_SetTurnaroundTime+0x120>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d906      	bls.n	800cda8 <USB_SetTurnaroundTime+0x40>
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	4a3b      	ldr	r2, [pc, #236]	; (800ce8c <USB_SetTurnaroundTime+0x124>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d802      	bhi.n	800cda8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cda2:	230e      	movs	r3, #14
 800cda4:	617b      	str	r3, [r7, #20]
 800cda6:	e057      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	4a38      	ldr	r2, [pc, #224]	; (800ce8c <USB_SetTurnaroundTime+0x124>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d906      	bls.n	800cdbe <USB_SetTurnaroundTime+0x56>
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	4a37      	ldr	r2, [pc, #220]	; (800ce90 <USB_SetTurnaroundTime+0x128>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d802      	bhi.n	800cdbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cdb8:	230d      	movs	r3, #13
 800cdba:	617b      	str	r3, [r7, #20]
 800cdbc:	e04c      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	4a33      	ldr	r2, [pc, #204]	; (800ce90 <USB_SetTurnaroundTime+0x128>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d906      	bls.n	800cdd4 <USB_SetTurnaroundTime+0x6c>
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	4a32      	ldr	r2, [pc, #200]	; (800ce94 <USB_SetTurnaroundTime+0x12c>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d802      	bhi.n	800cdd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cdce:	230c      	movs	r3, #12
 800cdd0:	617b      	str	r3, [r7, #20]
 800cdd2:	e041      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	4a2f      	ldr	r2, [pc, #188]	; (800ce94 <USB_SetTurnaroundTime+0x12c>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d906      	bls.n	800cdea <USB_SetTurnaroundTime+0x82>
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	4a2e      	ldr	r2, [pc, #184]	; (800ce98 <USB_SetTurnaroundTime+0x130>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d802      	bhi.n	800cdea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cde4:	230b      	movs	r3, #11
 800cde6:	617b      	str	r3, [r7, #20]
 800cde8:	e036      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	4a2a      	ldr	r2, [pc, #168]	; (800ce98 <USB_SetTurnaroundTime+0x130>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d906      	bls.n	800ce00 <USB_SetTurnaroundTime+0x98>
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	4a29      	ldr	r2, [pc, #164]	; (800ce9c <USB_SetTurnaroundTime+0x134>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d802      	bhi.n	800ce00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cdfa:	230a      	movs	r3, #10
 800cdfc:	617b      	str	r3, [r7, #20]
 800cdfe:	e02b      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	4a26      	ldr	r2, [pc, #152]	; (800ce9c <USB_SetTurnaroundTime+0x134>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d906      	bls.n	800ce16 <USB_SetTurnaroundTime+0xae>
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	4a25      	ldr	r2, [pc, #148]	; (800cea0 <USB_SetTurnaroundTime+0x138>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d802      	bhi.n	800ce16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ce10:	2309      	movs	r3, #9
 800ce12:	617b      	str	r3, [r7, #20]
 800ce14:	e020      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	4a21      	ldr	r2, [pc, #132]	; (800cea0 <USB_SetTurnaroundTime+0x138>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d906      	bls.n	800ce2c <USB_SetTurnaroundTime+0xc4>
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	4a20      	ldr	r2, [pc, #128]	; (800cea4 <USB_SetTurnaroundTime+0x13c>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d802      	bhi.n	800ce2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ce26:	2308      	movs	r3, #8
 800ce28:	617b      	str	r3, [r7, #20]
 800ce2a:	e015      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	4a1d      	ldr	r2, [pc, #116]	; (800cea4 <USB_SetTurnaroundTime+0x13c>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d906      	bls.n	800ce42 <USB_SetTurnaroundTime+0xda>
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	4a1c      	ldr	r2, [pc, #112]	; (800cea8 <USB_SetTurnaroundTime+0x140>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d802      	bhi.n	800ce42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ce3c:	2307      	movs	r3, #7
 800ce3e:	617b      	str	r3, [r7, #20]
 800ce40:	e00a      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ce42:	2306      	movs	r3, #6
 800ce44:	617b      	str	r3, [r7, #20]
 800ce46:	e007      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ce48:	79fb      	ldrb	r3, [r7, #7]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d102      	bne.n	800ce54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ce4e:	2309      	movs	r3, #9
 800ce50:	617b      	str	r3, [r7, #20]
 800ce52:	e001      	b.n	800ce58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ce54:	2309      	movs	r3, #9
 800ce56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	68da      	ldr	r2, [r3, #12]
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	029b      	lsls	r3, r3, #10
 800ce6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ce70:	431a      	orrs	r2, r3
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	371c      	adds	r7, #28
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	00d8acbf 	.word	0x00d8acbf
 800ce88:	00e4e1bf 	.word	0x00e4e1bf
 800ce8c:	00f423ff 	.word	0x00f423ff
 800ce90:	0106737f 	.word	0x0106737f
 800ce94:	011a499f 	.word	0x011a499f
 800ce98:	01312cff 	.word	0x01312cff
 800ce9c:	014ca43f 	.word	0x014ca43f
 800cea0:	016e35ff 	.word	0x016e35ff
 800cea4:	01a6ab1f 	.word	0x01a6ab1f
 800cea8:	01e847ff 	.word	0x01e847ff

0800ceac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	f043 0201 	orr.w	r2, r3, #1
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	370c      	adds	r7, #12
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr

0800cece <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cece:	b480      	push	{r7}
 800ced0:	b083      	sub	sp, #12
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	f023 0201 	bic.w	r2, r3, #1
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cf08:	78fb      	ldrb	r3, [r7, #3]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d106      	bne.n	800cf1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	60da      	str	r2, [r3, #12]
 800cf1a:	e00b      	b.n	800cf34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cf1c:	78fb      	ldrb	r3, [r7, #3]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	60da      	str	r2, [r3, #12]
 800cf2e:	e001      	b.n	800cf34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e003      	b.n	800cf3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cf34:	2032      	movs	r0, #50	; 0x32
 800cf36:	f7f4 fc7d 	bl	8001834 <HAL_Delay>

  return HAL_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf44:	b084      	sub	sp, #16
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b086      	sub	sp, #24
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cf52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cf5e:	2300      	movs	r3, #0
 800cf60:	613b      	str	r3, [r7, #16]
 800cf62:	e009      	b.n	800cf78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	3340      	adds	r3, #64	; 0x40
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4413      	add	r3, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	3301      	adds	r3, #1
 800cf76:	613b      	str	r3, [r7, #16]
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	2b0e      	cmp	r3, #14
 800cf7c:	d9f2      	bls.n	800cf64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cf7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d11c      	bne.n	800cfbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf92:	f043 0302 	orr.w	r3, r3, #2
 800cf96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	601a      	str	r2, [r3, #0]
 800cfbc:	e005      	b.n	800cfca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfdc:	4619      	mov	r1, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	680b      	ldr	r3, [r1, #0]
 800cfe8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d10c      	bne.n	800d00a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d104      	bne.n	800d000 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cff6:	2100      	movs	r1, #0
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f949 	bl	800d290 <USB_SetDevSpeed>
 800cffe:	e008      	b.n	800d012 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d000:	2101      	movs	r1, #1
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 f944 	bl	800d290 <USB_SetDevSpeed>
 800d008:	e003      	b.n	800d012 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d00a:	2103      	movs	r1, #3
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 f93f 	bl	800d290 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d012:	2110      	movs	r1, #16
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 f8f3 	bl	800d200 <USB_FlushTxFifo>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d001      	beq.n	800d024 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d020:	2301      	movs	r3, #1
 800d022:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 f911 	bl	800d24c <USB_FlushRxFifo>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d03a:	461a      	mov	r2, r3
 800d03c:	2300      	movs	r3, #0
 800d03e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d046:	461a      	mov	r2, r3
 800d048:	2300      	movs	r3, #0
 800d04a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d052:	461a      	mov	r2, r3
 800d054:	2300      	movs	r3, #0
 800d056:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d058:	2300      	movs	r3, #0
 800d05a:	613b      	str	r3, [r7, #16]
 800d05c:	e043      	b.n	800d0e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	4413      	add	r3, r2
 800d066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d074:	d118      	bne.n	800d0a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10a      	bne.n	800d092 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	015a      	lsls	r2, r3, #5
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4413      	add	r3, r2
 800d084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d088:	461a      	mov	r2, r3
 800d08a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d08e:	6013      	str	r3, [r2, #0]
 800d090:	e013      	b.n	800d0ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	015a      	lsls	r2, r3, #5
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	4413      	add	r3, r2
 800d09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d0a4:	6013      	str	r3, [r2, #0]
 800d0a6:	e008      	b.n	800d0ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	015a      	lsls	r2, r3, #5
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	015a      	lsls	r2, r3, #5
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	015a      	lsls	r2, r3, #5
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d8:	461a      	mov	r2, r3
 800d0da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d0de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	613b      	str	r3, [r7, #16]
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	693a      	ldr	r2, [r7, #16]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d3b7      	bcc.n	800d05e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	613b      	str	r3, [r7, #16]
 800d0f2:	e043      	b.n	800d17c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	015a      	lsls	r2, r3, #5
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d10a:	d118      	bne.n	800d13e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10a      	bne.n	800d128 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	015a      	lsls	r2, r3, #5
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	4413      	add	r3, r2
 800d11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d11e:	461a      	mov	r2, r3
 800d120:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d124:	6013      	str	r3, [r2, #0]
 800d126:	e013      	b.n	800d150 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	015a      	lsls	r2, r3, #5
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	4413      	add	r3, r2
 800d130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d134:	461a      	mov	r2, r3
 800d136:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d13a:	6013      	str	r3, [r2, #0]
 800d13c:	e008      	b.n	800d150 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	015a      	lsls	r2, r3, #5
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	4413      	add	r3, r2
 800d146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d14a:	461a      	mov	r2, r3
 800d14c:	2300      	movs	r3, #0
 800d14e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	015a      	lsls	r2, r3, #5
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4413      	add	r3, r2
 800d158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d15c:	461a      	mov	r2, r3
 800d15e:	2300      	movs	r3, #0
 800d160:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	015a      	lsls	r2, r3, #5
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	4413      	add	r3, r2
 800d16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d16e:	461a      	mov	r2, r3
 800d170:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d174:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	3301      	adds	r3, #1
 800d17a:	613b      	str	r3, [r7, #16]
 800d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	429a      	cmp	r2, r3
 800d182:	d3b7      	bcc.n	800d0f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d196:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d1a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d105      	bne.n	800d1b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	f043 0210 	orr.w	r2, r3, #16
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	699a      	ldr	r2, [r3, #24]
 800d1bc:	4b0e      	ldr	r3, [pc, #56]	; (800d1f8 <USB_DevInit+0x2b4>)
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d005      	beq.n	800d1d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	f043 0208 	orr.w	r2, r3, #8
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d105      	bne.n	800d1e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	699a      	ldr	r2, [r3, #24]
 800d1e0:	4b06      	ldr	r3, [pc, #24]	; (800d1fc <USB_DevInit+0x2b8>)
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3718      	adds	r7, #24
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d1f4:	b004      	add	sp, #16
 800d1f6:	4770      	bx	lr
 800d1f8:	803c3800 	.word	0x803c3800
 800d1fc:	40000004 	.word	0x40000004

0800d200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d200:	b480      	push	{r7}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	019b      	lsls	r3, r3, #6
 800d212:	f043 0220 	orr.w	r2, r3, #32
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	3301      	adds	r3, #1
 800d21e:	60fb      	str	r3, [r7, #12]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	4a09      	ldr	r2, [pc, #36]	; (800d248 <USB_FlushTxFifo+0x48>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d901      	bls.n	800d22c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d228:	2303      	movs	r3, #3
 800d22a:	e006      	b.n	800d23a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	f003 0320 	and.w	r3, r3, #32
 800d234:	2b20      	cmp	r3, #32
 800d236:	d0f0      	beq.n	800d21a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d238:	2300      	movs	r3, #0
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3714      	adds	r7, #20
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	00030d40 	.word	0x00030d40

0800d24c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d254:	2300      	movs	r3, #0
 800d256:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2210      	movs	r2, #16
 800d25c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3301      	adds	r3, #1
 800d262:	60fb      	str	r3, [r7, #12]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	4a09      	ldr	r2, [pc, #36]	; (800d28c <USB_FlushRxFifo+0x40>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d901      	bls.n	800d270 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d26c:	2303      	movs	r3, #3
 800d26e:	e006      	b.n	800d27e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	691b      	ldr	r3, [r3, #16]
 800d274:	f003 0310 	and.w	r3, r3, #16
 800d278:	2b10      	cmp	r3, #16
 800d27a:	d0f0      	beq.n	800d25e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3714      	adds	r7, #20
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	00030d40 	.word	0x00030d40

0800d290 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d290:	b480      	push	{r7}
 800d292:	b085      	sub	sp, #20
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	78fb      	ldrb	r3, [r7, #3]
 800d2aa:	68f9      	ldr	r1, [r7, #12]
 800d2ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3714      	adds	r7, #20
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d2c2:	b480      	push	{r7}
 800d2c4:	b087      	sub	sp, #28
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	f003 0306 	and.w	r3, r3, #6
 800d2da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d102      	bne.n	800d2e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	75fb      	strb	r3, [r7, #23]
 800d2e6:	e00a      	b.n	800d2fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d002      	beq.n	800d2f4 <USB_GetDevSpeed+0x32>
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2b06      	cmp	r3, #6
 800d2f2:	d102      	bne.n	800d2fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d2f4:	2302      	movs	r3, #2
 800d2f6:	75fb      	strb	r3, [r7, #23]
 800d2f8:	e001      	b.n	800d2fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d2fa:	230f      	movs	r3, #15
 800d2fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d300:	4618      	mov	r0, r3
 800d302:	371c      	adds	r7, #28
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	785b      	ldrb	r3, [r3, #1]
 800d324:	2b01      	cmp	r3, #1
 800d326:	d139      	bne.n	800d39c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d32e:	69da      	ldr	r2, [r3, #28]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	f003 030f 	and.w	r3, r3, #15
 800d338:	2101      	movs	r1, #1
 800d33a:	fa01 f303 	lsl.w	r3, r1, r3
 800d33e:	b29b      	uxth	r3, r3
 800d340:	68f9      	ldr	r1, [r7, #12]
 800d342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d346:	4313      	orrs	r3, r2
 800d348:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	015a      	lsls	r2, r3, #5
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	4413      	add	r3, r2
 800d352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d153      	bne.n	800d408 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	015a      	lsls	r2, r3, #5
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4413      	add	r3, r2
 800d368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	78db      	ldrb	r3, [r3, #3]
 800d37a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d37c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	059b      	lsls	r3, r3, #22
 800d382:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d384:	431a      	orrs	r2, r3
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	0159      	lsls	r1, r3, #5
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	440b      	add	r3, r1
 800d38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d392:	4619      	mov	r1, r3
 800d394:	4b20      	ldr	r3, [pc, #128]	; (800d418 <USB_ActivateEndpoint+0x10c>)
 800d396:	4313      	orrs	r3, r2
 800d398:	600b      	str	r3, [r1, #0]
 800d39a:	e035      	b.n	800d408 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3a2:	69da      	ldr	r2, [r3, #28]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	f003 030f 	and.w	r3, r3, #15
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800d3b2:	041b      	lsls	r3, r3, #16
 800d3b4:	68f9      	ldr	r1, [r7, #12]
 800d3b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	015a      	lsls	r2, r3, #5
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d119      	bne.n	800d408 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	015a      	lsls	r2, r3, #5
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	4413      	add	r3, r2
 800d3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	78db      	ldrb	r3, [r3, #3]
 800d3ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d3f0:	430b      	orrs	r3, r1
 800d3f2:	431a      	orrs	r2, r3
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	0159      	lsls	r1, r3, #5
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	440b      	add	r3, r1
 800d3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d400:	4619      	mov	r1, r3
 800d402:	4b05      	ldr	r3, [pc, #20]	; (800d418 <USB_ActivateEndpoint+0x10c>)
 800d404:	4313      	orrs	r3, r2
 800d406:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3714      	adds	r7, #20
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	10008000 	.word	0x10008000

0800d41c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	785b      	ldrb	r3, [r3, #1]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d135      	bne.n	800d4a4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	f003 030f 	and.w	r3, r3, #15
 800d448:	2101      	movs	r1, #1
 800d44a:	fa01 f303 	lsl.w	r3, r1, r3
 800d44e:	b29b      	uxth	r3, r3
 800d450:	43db      	mvns	r3, r3
 800d452:	68f9      	ldr	r1, [r7, #12]
 800d454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d458:	4013      	ands	r3, r2
 800d45a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d462:	69da      	ldr	r2, [r3, #28]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	f003 030f 	and.w	r3, r3, #15
 800d46c:	2101      	movs	r1, #1
 800d46e:	fa01 f303 	lsl.w	r3, r1, r3
 800d472:	b29b      	uxth	r3, r3
 800d474:	43db      	mvns	r3, r3
 800d476:	68f9      	ldr	r1, [r7, #12]
 800d478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d47c:	4013      	ands	r3, r2
 800d47e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	015a      	lsls	r2, r3, #5
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	4413      	add	r3, r2
 800d488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	0159      	lsls	r1, r3, #5
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	440b      	add	r3, r1
 800d496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d49a:	4619      	mov	r1, r3
 800d49c:	4b1f      	ldr	r3, [pc, #124]	; (800d51c <USB_DeactivateEndpoint+0x100>)
 800d49e:	4013      	ands	r3, r2
 800d4a0:	600b      	str	r3, [r1, #0]
 800d4a2:	e034      	b.n	800d50e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	f003 030f 	and.w	r3, r3, #15
 800d4b4:	2101      	movs	r1, #1
 800d4b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d4ba:	041b      	lsls	r3, r3, #16
 800d4bc:	43db      	mvns	r3, r3
 800d4be:	68f9      	ldr	r1, [r7, #12]
 800d4c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4ce:	69da      	ldr	r2, [r3, #28]
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	f003 030f 	and.w	r3, r3, #15
 800d4d8:	2101      	movs	r1, #1
 800d4da:	fa01 f303 	lsl.w	r3, r1, r3
 800d4de:	041b      	lsls	r3, r3, #16
 800d4e0:	43db      	mvns	r3, r3
 800d4e2:	68f9      	ldr	r1, [r7, #12]
 800d4e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4e8:	4013      	ands	r3, r2
 800d4ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	015a      	lsls	r2, r3, #5
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	0159      	lsls	r1, r3, #5
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	440b      	add	r3, r1
 800d502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d506:	4619      	mov	r1, r3
 800d508:	4b05      	ldr	r3, [pc, #20]	; (800d520 <USB_DeactivateEndpoint+0x104>)
 800d50a:	4013      	ands	r3, r2
 800d50c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3714      	adds	r7, #20
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr
 800d51c:	ec337800 	.word	0xec337800
 800d520:	eff37800 	.word	0xeff37800

0800d524 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b08a      	sub	sp, #40	; 0x28
 800d528:	af02      	add	r7, sp, #8
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	4613      	mov	r3, r2
 800d530:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	785b      	ldrb	r3, [r3, #1]
 800d540:	2b01      	cmp	r3, #1
 800d542:	f040 8163 	bne.w	800d80c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d132      	bne.n	800d5b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	015a      	lsls	r2, r3, #5
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	4413      	add	r3, r2
 800d556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d55a:	691a      	ldr	r2, [r3, #16]
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	0159      	lsls	r1, r3, #5
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	440b      	add	r3, r1
 800d564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d568:	4619      	mov	r1, r3
 800d56a:	4ba5      	ldr	r3, [pc, #660]	; (800d800 <USB_EPStartXfer+0x2dc>)
 800d56c:	4013      	ands	r3, r2
 800d56e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	015a      	lsls	r2, r3, #5
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	4413      	add	r3, r2
 800d578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d57c:	691b      	ldr	r3, [r3, #16]
 800d57e:	69ba      	ldr	r2, [r7, #24]
 800d580:	0151      	lsls	r1, r2, #5
 800d582:	69fa      	ldr	r2, [r7, #28]
 800d584:	440a      	add	r2, r1
 800d586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d58a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d58e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	015a      	lsls	r2, r3, #5
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	4413      	add	r3, r2
 800d598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d59c:	691a      	ldr	r2, [r3, #16]
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	0159      	lsls	r1, r3, #5
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	440b      	add	r3, r1
 800d5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	4b95      	ldr	r3, [pc, #596]	; (800d804 <USB_EPStartXfer+0x2e0>)
 800d5ae:	4013      	ands	r3, r2
 800d5b0:	610b      	str	r3, [r1, #16]
 800d5b2:	e074      	b.n	800d69e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	015a      	lsls	r2, r3, #5
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c0:	691a      	ldr	r2, [r3, #16]
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	0159      	lsls	r1, r3, #5
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	440b      	add	r3, r1
 800d5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	4b8c      	ldr	r3, [pc, #560]	; (800d804 <USB_EPStartXfer+0x2e0>)
 800d5d2:	4013      	ands	r3, r2
 800d5d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	015a      	lsls	r2, r3, #5
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	4413      	add	r3, r2
 800d5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5e2:	691a      	ldr	r2, [r3, #16]
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	0159      	lsls	r1, r3, #5
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	440b      	add	r3, r1
 800d5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4b83      	ldr	r3, [pc, #524]	; (800d800 <USB_EPStartXfer+0x2dc>)
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	015a      	lsls	r2, r3, #5
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	4413      	add	r3, r2
 800d600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d604:	691a      	ldr	r2, [r3, #16]
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	6959      	ldr	r1, [r3, #20]
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	440b      	add	r3, r1
 800d610:	1e59      	subs	r1, r3, #1
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	fbb1 f3f3 	udiv	r3, r1, r3
 800d61a:	04d9      	lsls	r1, r3, #19
 800d61c:	4b7a      	ldr	r3, [pc, #488]	; (800d808 <USB_EPStartXfer+0x2e4>)
 800d61e:	400b      	ands	r3, r1
 800d620:	69b9      	ldr	r1, [r7, #24]
 800d622:	0148      	lsls	r0, r1, #5
 800d624:	69f9      	ldr	r1, [r7, #28]
 800d626:	4401      	add	r1, r0
 800d628:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d62c:	4313      	orrs	r3, r2
 800d62e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	015a      	lsls	r2, r3, #5
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	4413      	add	r3, r2
 800d638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d63c:	691a      	ldr	r2, [r3, #16]
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	695b      	ldr	r3, [r3, #20]
 800d642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d646:	69b9      	ldr	r1, [r7, #24]
 800d648:	0148      	lsls	r0, r1, #5
 800d64a:	69f9      	ldr	r1, [r7, #28]
 800d64c:	4401      	add	r1, r0
 800d64e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d652:	4313      	orrs	r3, r2
 800d654:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	78db      	ldrb	r3, [r3, #3]
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d11f      	bne.n	800d69e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	015a      	lsls	r2, r3, #5
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	4413      	add	r3, r2
 800d666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	69ba      	ldr	r2, [r7, #24]
 800d66e:	0151      	lsls	r1, r2, #5
 800d670:	69fa      	ldr	r2, [r7, #28]
 800d672:	440a      	add	r2, r1
 800d674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d678:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d67c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	015a      	lsls	r2, r3, #5
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	4413      	add	r3, r2
 800d686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d68a:	691b      	ldr	r3, [r3, #16]
 800d68c:	69ba      	ldr	r2, [r7, #24]
 800d68e:	0151      	lsls	r1, r2, #5
 800d690:	69fa      	ldr	r2, [r7, #28]
 800d692:	440a      	add	r2, r1
 800d694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d698:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d69c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d69e:	79fb      	ldrb	r3, [r7, #7]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d14b      	bne.n	800d73c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d009      	beq.n	800d6c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	015a      	lsls	r2, r3, #5
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	691b      	ldr	r3, [r3, #16]
 800d6be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	78db      	ldrb	r3, [r3, #3]
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d128      	bne.n	800d71a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d110      	bne.n	800d6fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	015a      	lsls	r2, r3, #5
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	4413      	add	r3, r2
 800d6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	69ba      	ldr	r2, [r7, #24]
 800d6e8:	0151      	lsls	r1, r2, #5
 800d6ea:	69fa      	ldr	r2, [r7, #28]
 800d6ec:	440a      	add	r2, r1
 800d6ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d6f6:	6013      	str	r3, [r2, #0]
 800d6f8:	e00f      	b.n	800d71a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	015a      	lsls	r2, r3, #5
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	4413      	add	r3, r2
 800d702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	69ba      	ldr	r2, [r7, #24]
 800d70a:	0151      	lsls	r1, r2, #5
 800d70c:	69fa      	ldr	r2, [r7, #28]
 800d70e:	440a      	add	r2, r1
 800d710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d718:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	015a      	lsls	r2, r3, #5
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	4413      	add	r3, r2
 800d722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	69ba      	ldr	r2, [r7, #24]
 800d72a:	0151      	lsls	r1, r2, #5
 800d72c:	69fa      	ldr	r2, [r7, #28]
 800d72e:	440a      	add	r2, r1
 800d730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d734:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d738:	6013      	str	r3, [r2, #0]
 800d73a:	e133      	b.n	800d9a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	015a      	lsls	r2, r3, #5
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	4413      	add	r3, r2
 800d744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	69ba      	ldr	r2, [r7, #24]
 800d74c:	0151      	lsls	r1, r2, #5
 800d74e:	69fa      	ldr	r2, [r7, #28]
 800d750:	440a      	add	r2, r1
 800d752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d756:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d75a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	78db      	ldrb	r3, [r3, #3]
 800d760:	2b01      	cmp	r3, #1
 800d762:	d015      	beq.n	800d790 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	695b      	ldr	r3, [r3, #20]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f000 811b 	beq.w	800d9a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	f003 030f 	and.w	r3, r3, #15
 800d77e:	2101      	movs	r1, #1
 800d780:	fa01 f303 	lsl.w	r3, r1, r3
 800d784:	69f9      	ldr	r1, [r7, #28]
 800d786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d78a:	4313      	orrs	r3, r2
 800d78c:	634b      	str	r3, [r1, #52]	; 0x34
 800d78e:	e109      	b.n	800d9a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d110      	bne.n	800d7c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	015a      	lsls	r2, r3, #5
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	69ba      	ldr	r2, [r7, #24]
 800d7b0:	0151      	lsls	r1, r2, #5
 800d7b2:	69fa      	ldr	r2, [r7, #28]
 800d7b4:	440a      	add	r2, r1
 800d7b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	e00f      	b.n	800d7e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	69ba      	ldr	r2, [r7, #24]
 800d7d2:	0151      	lsls	r1, r2, #5
 800d7d4:	69fa      	ldr	r2, [r7, #28]
 800d7d6:	440a      	add	r2, r1
 800d7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	68d9      	ldr	r1, [r3, #12]
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	781a      	ldrb	r2, [r3, #0]
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	695b      	ldr	r3, [r3, #20]
 800d7ee:	b298      	uxth	r0, r3
 800d7f0:	79fb      	ldrb	r3, [r7, #7]
 800d7f2:	9300      	str	r3, [sp, #0]
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f000 fa38 	bl	800dc6c <USB_WritePacket>
 800d7fc:	e0d2      	b.n	800d9a4 <USB_EPStartXfer+0x480>
 800d7fe:	bf00      	nop
 800d800:	e007ffff 	.word	0xe007ffff
 800d804:	fff80000 	.word	0xfff80000
 800d808:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d818:	691a      	ldr	r2, [r3, #16]
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	0159      	lsls	r1, r3, #5
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	440b      	add	r3, r1
 800d822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d826:	4619      	mov	r1, r3
 800d828:	4b61      	ldr	r3, [pc, #388]	; (800d9b0 <USB_EPStartXfer+0x48c>)
 800d82a:	4013      	ands	r3, r2
 800d82c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	015a      	lsls	r2, r3, #5
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	4413      	add	r3, r2
 800d836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d83a:	691a      	ldr	r2, [r3, #16]
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	0159      	lsls	r1, r3, #5
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	440b      	add	r3, r1
 800d844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d848:	4619      	mov	r1, r3
 800d84a:	4b5a      	ldr	r3, [pc, #360]	; (800d9b4 <USB_EPStartXfer+0x490>)
 800d84c:	4013      	ands	r3, r2
 800d84e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	695b      	ldr	r3, [r3, #20]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d123      	bne.n	800d8a0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d858:	69bb      	ldr	r3, [r7, #24]
 800d85a:	015a      	lsls	r2, r3, #5
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	4413      	add	r3, r2
 800d860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d864:	691a      	ldr	r2, [r3, #16]
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d86e:	69b9      	ldr	r1, [r7, #24]
 800d870:	0148      	lsls	r0, r1, #5
 800d872:	69f9      	ldr	r1, [r7, #28]
 800d874:	4401      	add	r1, r0
 800d876:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d87a:	4313      	orrs	r3, r2
 800d87c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	015a      	lsls	r2, r3, #5
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	4413      	add	r3, r2
 800d886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	69ba      	ldr	r2, [r7, #24]
 800d88e:	0151      	lsls	r1, r2, #5
 800d890:	69fa      	ldr	r2, [r7, #28]
 800d892:	440a      	add	r2, r1
 800d894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d89c:	6113      	str	r3, [r2, #16]
 800d89e:	e033      	b.n	800d908 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	695a      	ldr	r2, [r3, #20]
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	4413      	add	r3, r2
 800d8aa:	1e5a      	subs	r2, r3, #1
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	015a      	lsls	r2, r3, #5
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	4413      	add	r3, r2
 800d8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8c2:	691a      	ldr	r2, [r3, #16]
 800d8c4:	8afb      	ldrh	r3, [r7, #22]
 800d8c6:	04d9      	lsls	r1, r3, #19
 800d8c8:	4b3b      	ldr	r3, [pc, #236]	; (800d9b8 <USB_EPStartXfer+0x494>)
 800d8ca:	400b      	ands	r3, r1
 800d8cc:	69b9      	ldr	r1, [r7, #24]
 800d8ce:	0148      	lsls	r0, r1, #5
 800d8d0:	69f9      	ldr	r1, [r7, #28]
 800d8d2:	4401      	add	r1, r0
 800d8d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d8dc:	69bb      	ldr	r3, [r7, #24]
 800d8de:	015a      	lsls	r2, r3, #5
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8e8:	691a      	ldr	r2, [r3, #16]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	8af9      	ldrh	r1, [r7, #22]
 800d8f0:	fb01 f303 	mul.w	r3, r1, r3
 800d8f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8f8:	69b9      	ldr	r1, [r7, #24]
 800d8fa:	0148      	lsls	r0, r1, #5
 800d8fc:	69f9      	ldr	r1, [r7, #28]
 800d8fe:	4401      	add	r1, r0
 800d900:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d904:	4313      	orrs	r3, r2
 800d906:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d908:	79fb      	ldrb	r3, [r7, #7]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d10d      	bne.n	800d92a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d009      	beq.n	800d92a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	68d9      	ldr	r1, [r3, #12]
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	015a      	lsls	r2, r3, #5
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	4413      	add	r3, r2
 800d922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d926:	460a      	mov	r2, r1
 800d928:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	78db      	ldrb	r3, [r3, #3]
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d128      	bne.n	800d984 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d110      	bne.n	800d964 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	015a      	lsls	r2, r3, #5
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	4413      	add	r3, r2
 800d94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	69ba      	ldr	r2, [r7, #24]
 800d952:	0151      	lsls	r1, r2, #5
 800d954:	69fa      	ldr	r2, [r7, #28]
 800d956:	440a      	add	r2, r1
 800d958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d95c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d960:	6013      	str	r3, [r2, #0]
 800d962:	e00f      	b.n	800d984 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	015a      	lsls	r2, r3, #5
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	4413      	add	r3, r2
 800d96c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	69ba      	ldr	r2, [r7, #24]
 800d974:	0151      	lsls	r1, r2, #5
 800d976:	69fa      	ldr	r2, [r7, #28]
 800d978:	440a      	add	r2, r1
 800d97a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d97e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d982:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	015a      	lsls	r2, r3, #5
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	4413      	add	r3, r2
 800d98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	69ba      	ldr	r2, [r7, #24]
 800d994:	0151      	lsls	r1, r2, #5
 800d996:	69fa      	ldr	r2, [r7, #28]
 800d998:	440a      	add	r2, r1
 800d99a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d99e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d9a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3720      	adds	r7, #32
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	fff80000 	.word	0xfff80000
 800d9b4:	e007ffff 	.word	0xe007ffff
 800d9b8:	1ff80000 	.word	0x1ff80000

0800d9bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b087      	sub	sp, #28
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	785b      	ldrb	r3, [r3, #1]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	f040 80cd 	bne.w	800db78 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	695b      	ldr	r3, [r3, #20]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d132      	bne.n	800da4c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	015a      	lsls	r2, r3, #5
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9f2:	691a      	ldr	r2, [r3, #16]
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	0159      	lsls	r1, r3, #5
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	440b      	add	r3, r1
 800d9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da00:	4619      	mov	r1, r3
 800da02:	4b98      	ldr	r3, [pc, #608]	; (800dc64 <USB_EP0StartXfer+0x2a8>)
 800da04:	4013      	ands	r3, r2
 800da06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	015a      	lsls	r2, r3, #5
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	4413      	add	r3, r2
 800da10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	0151      	lsls	r1, r2, #5
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	440a      	add	r2, r1
 800da1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	015a      	lsls	r2, r3, #5
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	4413      	add	r3, r2
 800da30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da34:	691a      	ldr	r2, [r3, #16]
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	0159      	lsls	r1, r3, #5
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	440b      	add	r3, r1
 800da3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da42:	4619      	mov	r1, r3
 800da44:	4b88      	ldr	r3, [pc, #544]	; (800dc68 <USB_EP0StartXfer+0x2ac>)
 800da46:	4013      	ands	r3, r2
 800da48:	610b      	str	r3, [r1, #16]
 800da4a:	e04e      	b.n	800daea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	015a      	lsls	r2, r3, #5
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	4413      	add	r3, r2
 800da54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da58:	691a      	ldr	r2, [r3, #16]
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	0159      	lsls	r1, r3, #5
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	440b      	add	r3, r1
 800da62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da66:	4619      	mov	r1, r3
 800da68:	4b7f      	ldr	r3, [pc, #508]	; (800dc68 <USB_EP0StartXfer+0x2ac>)
 800da6a:	4013      	ands	r3, r2
 800da6c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	015a      	lsls	r2, r3, #5
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	4413      	add	r3, r2
 800da76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da7a:	691a      	ldr	r2, [r3, #16]
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	0159      	lsls	r1, r3, #5
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	440b      	add	r3, r1
 800da84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da88:	4619      	mov	r1, r3
 800da8a:	4b76      	ldr	r3, [pc, #472]	; (800dc64 <USB_EP0StartXfer+0x2a8>)
 800da8c:	4013      	ands	r3, r2
 800da8e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	695a      	ldr	r2, [r3, #20]
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d903      	bls.n	800daa4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	689a      	ldr	r2, [r3, #8]
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	015a      	lsls	r2, r3, #5
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	4413      	add	r3, r2
 800daac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	0151      	lsls	r1, r2, #5
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	440a      	add	r2, r1
 800daba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dabe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dac2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	015a      	lsls	r2, r3, #5
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	4413      	add	r3, r2
 800dacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dad0:	691a      	ldr	r2, [r3, #16]
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dada:	6939      	ldr	r1, [r7, #16]
 800dadc:	0148      	lsls	r0, r1, #5
 800dade:	6979      	ldr	r1, [r7, #20]
 800dae0:	4401      	add	r1, r0
 800dae2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dae6:	4313      	orrs	r3, r2
 800dae8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800daea:	79fb      	ldrb	r3, [r7, #7]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d11e      	bne.n	800db2e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	691b      	ldr	r3, [r3, #16]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d009      	beq.n	800db0c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	015a      	lsls	r2, r3, #5
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	4413      	add	r3, r2
 800db00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db04:	461a      	mov	r2, r3
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	691b      	ldr	r3, [r3, #16]
 800db0a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	015a      	lsls	r2, r3, #5
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	4413      	add	r3, r2
 800db14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	693a      	ldr	r2, [r7, #16]
 800db1c:	0151      	lsls	r1, r2, #5
 800db1e:	697a      	ldr	r2, [r7, #20]
 800db20:	440a      	add	r2, r1
 800db22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	e092      	b.n	800dc54 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	015a      	lsls	r2, r3, #5
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	4413      	add	r3, r2
 800db36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	0151      	lsls	r1, r2, #5
 800db40:	697a      	ldr	r2, [r7, #20]
 800db42:	440a      	add	r2, r1
 800db44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db4c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	695b      	ldr	r3, [r3, #20]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d07e      	beq.n	800dc54 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	f003 030f 	and.w	r3, r3, #15
 800db66:	2101      	movs	r1, #1
 800db68:	fa01 f303 	lsl.w	r3, r1, r3
 800db6c:	6979      	ldr	r1, [r7, #20]
 800db6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db72:	4313      	orrs	r3, r2
 800db74:	634b      	str	r3, [r1, #52]	; 0x34
 800db76:	e06d      	b.n	800dc54 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	015a      	lsls	r2, r3, #5
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	4413      	add	r3, r2
 800db80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db84:	691a      	ldr	r2, [r3, #16]
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	0159      	lsls	r1, r3, #5
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	440b      	add	r3, r1
 800db8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db92:	4619      	mov	r1, r3
 800db94:	4b34      	ldr	r3, [pc, #208]	; (800dc68 <USB_EP0StartXfer+0x2ac>)
 800db96:	4013      	ands	r3, r2
 800db98:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	015a      	lsls	r2, r3, #5
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	4413      	add	r3, r2
 800dba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dba6:	691a      	ldr	r2, [r3, #16]
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	0159      	lsls	r1, r3, #5
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	440b      	add	r3, r1
 800dbb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	4b2b      	ldr	r3, [pc, #172]	; (800dc64 <USB_EP0StartXfer+0x2a8>)
 800dbb8:	4013      	ands	r3, r2
 800dbba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	695b      	ldr	r3, [r3, #20]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d003      	beq.n	800dbcc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	689a      	ldr	r2, [r3, #8]
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	015a      	lsls	r2, r3, #5
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	0151      	lsls	r1, r2, #5
 800dbde:	697a      	ldr	r2, [r7, #20]
 800dbe0:	440a      	add	r2, r1
 800dbe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf8:	691a      	ldr	r2, [r3, #16]
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc02:	6939      	ldr	r1, [r7, #16]
 800dc04:	0148      	lsls	r0, r1, #5
 800dc06:	6979      	ldr	r1, [r7, #20]
 800dc08:	4401      	add	r1, r0
 800dc0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800dc12:	79fb      	ldrb	r3, [r7, #7]
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d10d      	bne.n	800dc34 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d009      	beq.n	800dc34 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	68d9      	ldr	r1, [r3, #12]
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	015a      	lsls	r2, r3, #5
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc30:	460a      	mov	r2, r1
 800dc32:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	015a      	lsls	r2, r3, #5
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	693a      	ldr	r2, [r7, #16]
 800dc44:	0151      	lsls	r1, r2, #5
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	440a      	add	r2, r1
 800dc4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	371c      	adds	r7, #28
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop
 800dc64:	e007ffff 	.word	0xe007ffff
 800dc68:	fff80000 	.word	0xfff80000

0800dc6c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b089      	sub	sp, #36	; 0x24
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	4611      	mov	r1, r2
 800dc78:	461a      	mov	r2, r3
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	71fb      	strb	r3, [r7, #7]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800dc8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d11a      	bne.n	800dcc8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dc92:	88bb      	ldrh	r3, [r7, #4]
 800dc94:	3303      	adds	r3, #3
 800dc96:	089b      	lsrs	r3, r3, #2
 800dc98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	61bb      	str	r3, [r7, #24]
 800dc9e:	e00f      	b.n	800dcc0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dca0:	79fb      	ldrb	r3, [r7, #7]
 800dca2:	031a      	lsls	r2, r3, #12
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	4413      	add	r3, r2
 800dca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcac:	461a      	mov	r2, r3
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	61bb      	str	r3, [r7, #24]
 800dcc0:	69ba      	ldr	r2, [r7, #24]
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d3eb      	bcc.n	800dca0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3724      	adds	r7, #36	; 0x24
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dcd6:	b480      	push	{r7}
 800dcd8:	b089      	sub	sp, #36	; 0x24
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	60f8      	str	r0, [r7, #12]
 800dcde:	60b9      	str	r1, [r7, #8]
 800dce0:	4613      	mov	r3, r2
 800dce2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800dcec:	88fb      	ldrh	r3, [r7, #6]
 800dcee:	3303      	adds	r3, #3
 800dcf0:	089b      	lsrs	r3, r3, #2
 800dcf2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	61bb      	str	r3, [r7, #24]
 800dcf8:	e00b      	b.n	800dd12 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	601a      	str	r2, [r3, #0]
    pDest++;
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	3304      	adds	r3, #4
 800dd0a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	61bb      	str	r3, [r7, #24]
 800dd12:	69ba      	ldr	r2, [r7, #24]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d3ef      	bcc.n	800dcfa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800dd1a:	69fb      	ldr	r3, [r7, #28]
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3724      	adds	r7, #36	; 0x24
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	785b      	ldrb	r3, [r3, #1]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d12c      	bne.n	800dd9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	015a      	lsls	r2, r3, #5
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	db12      	blt.n	800dd7c <USB_EPSetStall+0x54>
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00f      	beq.n	800dd7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	015a      	lsls	r2, r3, #5
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	4413      	add	r3, r2
 800dd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	0151      	lsls	r1, r2, #5
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	440a      	add	r2, r1
 800dd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dd7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	015a      	lsls	r2, r3, #5
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	4413      	add	r3, r2
 800dd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	0151      	lsls	r1, r2, #5
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	440a      	add	r2, r1
 800dd92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd9a:	6013      	str	r3, [r2, #0]
 800dd9c:	e02b      	b.n	800ddf6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	015a      	lsls	r2, r3, #5
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	4413      	add	r3, r2
 800dda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	db12      	blt.n	800ddd6 <USB_EPSetStall+0xae>
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00f      	beq.n	800ddd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	015a      	lsls	r2, r3, #5
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	0151      	lsls	r1, r2, #5
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	440a      	add	r2, r1
 800ddcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ddd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	015a      	lsls	r2, r3, #5
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	4413      	add	r3, r2
 800ddde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68ba      	ldr	r2, [r7, #8]
 800dde6:	0151      	lsls	r1, r2, #5
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	440a      	add	r2, r1
 800ddec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ddf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3714      	adds	r7, #20
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	785b      	ldrb	r3, [r3, #1]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d128      	bne.n	800de72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	015a      	lsls	r2, r3, #5
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	4413      	add	r3, r2
 800de28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	0151      	lsls	r1, r2, #5
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	440a      	add	r2, r1
 800de36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	78db      	ldrb	r3, [r3, #3]
 800de44:	2b03      	cmp	r3, #3
 800de46:	d003      	beq.n	800de50 <USB_EPClearStall+0x4c>
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	78db      	ldrb	r3, [r3, #3]
 800de4c:	2b02      	cmp	r3, #2
 800de4e:	d138      	bne.n	800dec2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	015a      	lsls	r2, r3, #5
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	4413      	add	r3, r2
 800de58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	0151      	lsls	r1, r2, #5
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	440a      	add	r2, r1
 800de66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de6e:	6013      	str	r3, [r2, #0]
 800de70:	e027      	b.n	800dec2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	015a      	lsls	r2, r3, #5
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	4413      	add	r3, r2
 800de7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	0151      	lsls	r1, r2, #5
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	440a      	add	r2, r1
 800de88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	78db      	ldrb	r3, [r3, #3]
 800de96:	2b03      	cmp	r3, #3
 800de98:	d003      	beq.n	800dea2 <USB_EPClearStall+0x9e>
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	78db      	ldrb	r3, [r3, #3]
 800de9e:	2b02      	cmp	r3, #2
 800dea0:	d10f      	bne.n	800dec2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	015a      	lsls	r2, r3, #5
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	4413      	add	r3, r2
 800deaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	0151      	lsls	r1, r2, #5
 800deb4:	68fa      	ldr	r2, [r7, #12]
 800deb6:	440a      	add	r2, r1
 800deb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800debc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dec0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3714      	adds	r7, #20
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800dedc:	2300      	movs	r3, #0
 800dede:	617b      	str	r3, [r7, #20]
 800dee0:	e016      	b.n	800df10 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	015a      	lsls	r2, r3, #5
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	4413      	add	r3, r2
 800deea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deee:	461a      	mov	r2, r3
 800def0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800def4:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	015a      	lsls	r2, r3, #5
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	4413      	add	r3, r2
 800defe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df02:	461a      	mov	r2, r3
 800df04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800df08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	3301      	adds	r3, #1
 800df0e:	617b      	str	r3, [r7, #20]
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	2b0e      	cmp	r3, #14
 800df14:	d9e5      	bls.n	800dee2 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df1c:	461a      	mov	r2, r3
 800df1e:	2300      	movs	r3, #0
 800df20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df28:	461a      	mov	r2, r3
 800df2a:	2300      	movs	r3, #0
 800df2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df34:	461a      	mov	r2, r3
 800df36:	2300      	movs	r3, #0
 800df38:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7ff f986 	bl	800d24c <USB_FlushRxFifo>
 800df40:	4603      	mov	r3, r0
 800df42:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800df44:	7bfb      	ldrb	r3, [r7, #15]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d001      	beq.n	800df4e <USB_StopDevice+0x7e>
  {
    return ret;
 800df4a:	7bfb      	ldrb	r3, [r7, #15]
 800df4c:	e00b      	b.n	800df66 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800df4e:	2110      	movs	r1, #16
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f7ff f955 	bl	800d200 <USB_FlushTxFifo>
 800df56:	4603      	mov	r3, r0
 800df58:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800df5a:	7bfb      	ldrb	r3, [r7, #15]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d001      	beq.n	800df64 <USB_StopDevice+0x94>
  {
    return ret;
 800df60:	7bfb      	ldrb	r3, [r7, #15]
 800df62:	e000      	b.n	800df66 <USB_StopDevice+0x96>
  }

  return ret;
 800df64:	7bfb      	ldrb	r3, [r7, #15]
}
 800df66:	4618      	mov	r0, r3
 800df68:	3718      	adds	r7, #24
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800df6e:	b480      	push	{r7}
 800df70:	b085      	sub	sp, #20
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
 800df76:	460b      	mov	r3, r1
 800df78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800df90:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	78fb      	ldrb	r3, [r7, #3]
 800df9c:	011b      	lsls	r3, r3, #4
 800df9e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800dfa2:	68f9      	ldr	r1, [r7, #12]
 800dfa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3714      	adds	r7, #20
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b084      	sub	sp, #16
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dfd4:	f023 0302 	bic.w	r3, r3, #2
 800dfd8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800dfda:	2003      	movs	r0, #3
 800dfdc:	f7f3 fc2a 	bl	8001834 <HAL_Delay>

  return HAL_OK;
 800dfe0:	2300      	movs	r3, #0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}

0800dfea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b084      	sub	sp, #16
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e004:	f043 0302 	orr.w	r3, r3, #2
 800e008:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e00a:	2003      	movs	r0, #3
 800e00c:	f7f3 fc12 	bl	8001834 <HAL_Delay>

  return HAL_OK;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e01a:	b480      	push	{r7}
 800e01c:	b085      	sub	sp, #20
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	695b      	ldr	r3, [r3, #20]
 800e026:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	699b      	ldr	r3, [r3, #24]
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	4013      	ands	r3, r2
 800e030:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e032:	68fb      	ldr	r3, [r7, #12]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3714      	adds	r7, #20
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e040:	b480      	push	{r7}
 800e042:	b085      	sub	sp, #20
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e052:	699b      	ldr	r3, [r3, #24]
 800e054:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e05c:	69db      	ldr	r3, [r3, #28]
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	4013      	ands	r3, r2
 800e062:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	0c1b      	lsrs	r3, r3, #16
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e090:	69db      	ldr	r3, [r3, #28]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	4013      	ands	r3, r2
 800e096:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	b29b      	uxth	r3, r3
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3714      	adds	r7, #20
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e0b8:	78fb      	ldrb	r3, [r7, #3]
 800e0ba:	015a      	lsls	r2, r3, #5
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	4413      	add	r3, r2
 800e0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0ce:	695b      	ldr	r3, [r3, #20]
 800e0d0:	68ba      	ldr	r2, [r7, #8]
 800e0d2:	4013      	ands	r3, r2
 800e0d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e0d6:	68bb      	ldr	r3, [r7, #8]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3714      	adds	r7, #20
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b087      	sub	sp, #28
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e106:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e108:	78fb      	ldrb	r3, [r7, #3]
 800e10a:	f003 030f 	and.w	r3, r3, #15
 800e10e:	68fa      	ldr	r2, [r7, #12]
 800e110:	fa22 f303 	lsr.w	r3, r2, r3
 800e114:	01db      	lsls	r3, r3, #7
 800e116:	b2db      	uxtb	r3, r3
 800e118:	693a      	ldr	r2, [r7, #16]
 800e11a:	4313      	orrs	r3, r2
 800e11c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e11e:	78fb      	ldrb	r3, [r7, #3]
 800e120:	015a      	lsls	r2, r3, #5
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	4413      	add	r3, r2
 800e126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	693a      	ldr	r2, [r7, #16]
 800e12e:	4013      	ands	r3, r2
 800e130:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e132:	68bb      	ldr	r3, [r7, #8]
}
 800e134:	4618      	mov	r0, r3
 800e136:	371c      	adds	r7, #28
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e140:	b480      	push	{r7}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	695b      	ldr	r3, [r3, #20]
 800e14c:	f003 0301 	and.w	r3, r3, #1
}
 800e150:	4618      	mov	r0, r3
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e176:	4619      	mov	r1, r3
 800e178:	4b09      	ldr	r3, [pc, #36]	; (800e1a0 <USB_ActivateSetup+0x44>)
 800e17a:	4013      	ands	r3, r2
 800e17c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e18c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3714      	adds	r7, #20
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr
 800e1a0:	fffff800 	.word	0xfffff800

0800e1a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b087      	sub	sp, #28
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	607a      	str	r2, [r7, #4]
 800e1b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	333c      	adds	r3, #60	; 0x3c
 800e1ba:	3304      	adds	r3, #4
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	4a26      	ldr	r2, [pc, #152]	; (800e25c <USB_EP0_OutStart+0xb8>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d90a      	bls.n	800e1de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e1d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1d8:	d101      	bne.n	800e1de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	e037      	b.n	800e24e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	697a      	ldr	r2, [r7, #20]
 800e1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	697a      	ldr	r2, [r7, #20]
 800e208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e20c:	f043 0318 	orr.w	r3, r3, #24
 800e210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e218:	691b      	ldr	r3, [r3, #16]
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e220:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e224:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e226:	7afb      	ldrb	r3, [r7, #11]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d10f      	bne.n	800e24c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e232:	461a      	mov	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	697a      	ldr	r2, [r7, #20]
 800e242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e246:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e24a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	371c      	adds	r7, #28
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	4f54300a 	.word	0x4f54300a

0800e260 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e268:	2300      	movs	r3, #0
 800e26a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	3301      	adds	r3, #1
 800e270:	60fb      	str	r3, [r7, #12]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	4a13      	ldr	r2, [pc, #76]	; (800e2c4 <USB_CoreReset+0x64>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d901      	bls.n	800e27e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e27a:	2303      	movs	r3, #3
 800e27c:	e01b      	b.n	800e2b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	2b00      	cmp	r3, #0
 800e284:	daf2      	bge.n	800e26c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e286:	2300      	movs	r3, #0
 800e288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	f043 0201 	orr.w	r2, r3, #1
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	3301      	adds	r3, #1
 800e29a:	60fb      	str	r3, [r7, #12]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	4a09      	ldr	r2, [pc, #36]	; (800e2c4 <USB_CoreReset+0x64>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d901      	bls.n	800e2a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	e006      	b.n	800e2b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d0f0      	beq.n	800e296 <USB_CoreReset+0x36>

  return HAL_OK;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop
 800e2c4:	00030d40 	.word	0x00030d40

0800e2c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e2cc:	4904      	ldr	r1, [pc, #16]	; (800e2e0 <MX_FATFS_Init+0x18>)
 800e2ce:	4805      	ldr	r0, [pc, #20]	; (800e2e4 <MX_FATFS_Init+0x1c>)
 800e2d0:	f007 fe10 	bl	8015ef4 <FATFS_LinkDriver>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	4b03      	ldr	r3, [pc, #12]	; (800e2e8 <MX_FATFS_Init+0x20>)
 800e2da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800e2dc:	bf00      	nop
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	24005764 	.word	0x24005764
 800e2e4:	08016e2c 	.word	0x08016e2c
 800e2e8:	24005760 	.word	0x24005760

0800e2ec <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e2f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e302:	2300      	movs	r3, #0
 800e304:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e306:	f000 f86b 	bl	800e3e0 <BSP_SD_IsDetected>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d001      	beq.n	800e314 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e310:	2302      	movs	r3, #2
 800e312:	e005      	b.n	800e320 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e314:	4804      	ldr	r0, [pc, #16]	; (800e328 <BSP_SD_Init+0x2c>)
 800e316:	f7f9 fc5d 	bl	8007bd4 <HAL_SD_Init>
 800e31a:	4603      	mov	r3, r0
 800e31c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e31e:	79fb      	ldrb	r3, [r7, #7]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	240013f8 	.word	0x240013f8

0800e32c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b088      	sub	sp, #32
 800e330:	af02      	add	r7, sp, #8
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	607a      	str	r2, [r7, #4]
 800e338:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	68ba      	ldr	r2, [r7, #8]
 800e346:	68f9      	ldr	r1, [r7, #12]
 800e348:	4806      	ldr	r0, [pc, #24]	; (800e364 <BSP_SD_ReadBlocks+0x38>)
 800e34a:	f7f9 fd61 	bl	8007e10 <HAL_SD_ReadBlocks>
 800e34e:	4603      	mov	r3, r0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d001      	beq.n	800e358 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e354:	2301      	movs	r3, #1
 800e356:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800e358:	7dfb      	ldrb	r3, [r7, #23]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3718      	adds	r7, #24
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	240013f8 	.word	0x240013f8

0800e368 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b088      	sub	sp, #32
 800e36c:	af02      	add	r7, sp, #8
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
 800e374:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e376:	2300      	movs	r3, #0
 800e378:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	68f9      	ldr	r1, [r7, #12]
 800e384:	4806      	ldr	r0, [pc, #24]	; (800e3a0 <BSP_SD_WriteBlocks+0x38>)
 800e386:	f7f9 fecd 	bl	8008124 <HAL_SD_WriteBlocks>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d001      	beq.n	800e394 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e390:	2301      	movs	r3, #1
 800e392:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800e394:	7dfb      	ldrb	r3, [r7, #23]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	240013f8 	.word	0x240013f8

0800e3a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e3a8:	4805      	ldr	r0, [pc, #20]	; (800e3c0 <BSP_SD_GetCardState+0x1c>)
 800e3aa:	f7fa fb85 	bl	8008ab8 <HAL_SD_GetCardState>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b04      	cmp	r3, #4
 800e3b2:	bf14      	ite	ne
 800e3b4:	2301      	movne	r3, #1
 800e3b6:	2300      	moveq	r3, #0
 800e3b8:	b2db      	uxtb	r3, r3
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	240013f8 	.word	0x240013f8

0800e3c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e3cc:	6879      	ldr	r1, [r7, #4]
 800e3ce:	4803      	ldr	r0, [pc, #12]	; (800e3dc <BSP_SD_GetCardInfo+0x18>)
 800e3d0:	f7fa fa9c 	bl	800890c <HAL_SD_GetCardInfo>
}
 800e3d4:	bf00      	nop
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	240013f8 	.word	0x240013f8

0800e3e0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800e3ea:	f000 f80b 	bl	800e404 <BSP_PlatformIsDetected>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d101      	bne.n	800e3f8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e3f8:	79fb      	ldrb	r3, [r7, #7]
 800e3fa:	b2db      	uxtb	r3, r3
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e40a:	2301      	movs	r3, #1
 800e40c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e40e:	2120      	movs	r1, #32
 800e410:	4806      	ldr	r0, [pc, #24]	; (800e42c <BSP_PlatformIsDetected+0x28>)
 800e412:	f7f4 ff99 	bl	8003348 <HAL_GPIO_ReadPin>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d001      	beq.n	800e420 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e41c:	2300      	movs	r3, #0
 800e41e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800e420:	79fb      	ldrb	r3, [r7, #7]
}  
 800e422:	4618      	mov	r0, r3
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	58021800 	.word	0x58021800

0800e430 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	4603      	mov	r3, r0
 800e438:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e43a:	4b0b      	ldr	r3, [pc, #44]	; (800e468 <SD_CheckStatus+0x38>)
 800e43c:	2201      	movs	r2, #1
 800e43e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e440:	f7ff ffb0 	bl	800e3a4 <BSP_SD_GetCardState>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d107      	bne.n	800e45a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e44a:	4b07      	ldr	r3, [pc, #28]	; (800e468 <SD_CheckStatus+0x38>)
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	f023 0301 	bic.w	r3, r3, #1
 800e454:	b2da      	uxtb	r2, r3
 800e456:	4b04      	ldr	r3, [pc, #16]	; (800e468 <SD_CheckStatus+0x38>)
 800e458:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e45a:	4b03      	ldr	r3, [pc, #12]	; (800e468 <SD_CheckStatus+0x38>)
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	b2db      	uxtb	r3, r3
}
 800e460:	4618      	mov	r0, r3
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	24000019 	.word	0x24000019

0800e46c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	4603      	mov	r3, r0
 800e474:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800e476:	4b0b      	ldr	r3, [pc, #44]	; (800e4a4 <SD_initialize+0x38>)
 800e478:	2201      	movs	r2, #1
 800e47a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e47c:	f7ff ff3e 	bl	800e2fc <BSP_SD_Init>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d107      	bne.n	800e496 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e486:	79fb      	ldrb	r3, [r7, #7]
 800e488:	4618      	mov	r0, r3
 800e48a:	f7ff ffd1 	bl	800e430 <SD_CheckStatus>
 800e48e:	4603      	mov	r3, r0
 800e490:	461a      	mov	r2, r3
 800e492:	4b04      	ldr	r3, [pc, #16]	; (800e4a4 <SD_initialize+0x38>)
 800e494:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e496:	4b03      	ldr	r3, [pc, #12]	; (800e4a4 <SD_initialize+0x38>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	b2db      	uxtb	r3, r3
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	24000019 	.word	0x24000019

0800e4a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e4b2:	79fb      	ldrb	r3, [r7, #7]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff ffbb 	bl	800e430 <SD_CheckStatus>
 800e4ba:	4603      	mov	r3, r0
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60b9      	str	r1, [r7, #8]
 800e4cc:	607a      	str	r2, [r7, #4]
 800e4ce:	603b      	str	r3, [r7, #0]
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	6879      	ldr	r1, [r7, #4]
 800e4e0:	68b8      	ldr	r0, [r7, #8]
 800e4e2:	f7ff ff23 	bl	800e32c <BSP_SD_ReadBlocks>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d107      	bne.n	800e4fc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e4ec:	bf00      	nop
 800e4ee:	f7ff ff59 	bl	800e3a4 <BSP_SD_GetCardState>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1fa      	bne.n	800e4ee <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3718      	adds	r7, #24
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b086      	sub	sp, #24
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
 800e510:	603b      	str	r3, [r7, #0]
 800e512:	4603      	mov	r3, r0
 800e514:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e51a:	f04f 33ff 	mov.w	r3, #4294967295
 800e51e:	683a      	ldr	r2, [r7, #0]
 800e520:	6879      	ldr	r1, [r7, #4]
 800e522:	68b8      	ldr	r0, [r7, #8]
 800e524:	f7ff ff20 	bl	800e368 <BSP_SD_WriteBlocks>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d107      	bne.n	800e53e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e52e:	bf00      	nop
 800e530:	f7ff ff38 	bl	800e3a4 <BSP_SD_GetCardState>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1fa      	bne.n	800e530 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e53a:	2300      	movs	r3, #0
 800e53c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e53e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e540:	4618      	mov	r0, r3
 800e542:	3718      	adds	r7, #24
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b08c      	sub	sp, #48	; 0x30
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	4603      	mov	r3, r0
 800e550:	603a      	str	r2, [r7, #0]
 800e552:	71fb      	strb	r3, [r7, #7]
 800e554:	460b      	mov	r3, r1
 800e556:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e558:	2301      	movs	r3, #1
 800e55a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e55e:	4b25      	ldr	r3, [pc, #148]	; (800e5f4 <SD_ioctl+0xac>)
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	f003 0301 	and.w	r3, r3, #1
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d001      	beq.n	800e570 <SD_ioctl+0x28>
 800e56c:	2303      	movs	r3, #3
 800e56e:	e03c      	b.n	800e5ea <SD_ioctl+0xa2>

  switch (cmd)
 800e570:	79bb      	ldrb	r3, [r7, #6]
 800e572:	2b03      	cmp	r3, #3
 800e574:	d834      	bhi.n	800e5e0 <SD_ioctl+0x98>
 800e576:	a201      	add	r2, pc, #4	; (adr r2, 800e57c <SD_ioctl+0x34>)
 800e578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57c:	0800e58d 	.word	0x0800e58d
 800e580:	0800e595 	.word	0x0800e595
 800e584:	0800e5ad 	.word	0x0800e5ad
 800e588:	0800e5c7 	.word	0x0800e5c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e592:	e028      	b.n	800e5e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e594:	f107 0308 	add.w	r3, r7, #8
 800e598:	4618      	mov	r0, r3
 800e59a:	f7ff ff13 	bl	800e3c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e59e:	6a3a      	ldr	r2, [r7, #32]
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5aa:	e01c      	b.n	800e5e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e5ac:	f107 0308 	add.w	r3, r7, #8
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7ff ff07 	bl	800e3c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5c4:	e00f      	b.n	800e5e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e5c6:	f107 0308 	add.w	r3, r7, #8
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7ff fefa 	bl	800e3c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	0a5a      	lsrs	r2, r3, #9
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5de:	e002      	b.n	800e5e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e5e0:	2304      	movs	r3, #4
 800e5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3730      	adds	r7, #48	; 0x30
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	24000019 	.word	0x24000019

0800e5f8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	460b      	mov	r3, r1
 800e602:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	7c1b      	ldrb	r3, [r3, #16]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d115      	bne.n	800e638 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800e60c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e610:	2202      	movs	r2, #2
 800e612:	2101      	movs	r1, #1
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f008 f8ef 	bl	80167f8 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2201      	movs	r2, #1
 800e61e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800e622:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e626:	2202      	movs	r2, #2
 800e628:	2181      	movs	r1, #129	; 0x81
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f008 f8e4 	bl	80167f8 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2201      	movs	r2, #1
 800e634:	62da      	str	r2, [r3, #44]	; 0x2c
 800e636:	e012      	b.n	800e65e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e638:	2340      	movs	r3, #64	; 0x40
 800e63a:	2202      	movs	r2, #2
 800e63c:	2101      	movs	r1, #1
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f008 f8da 	bl	80167f8 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2201      	movs	r2, #1
 800e648:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e64c:	2340      	movs	r3, #64	; 0x40
 800e64e:	2202      	movs	r2, #2
 800e650:	2181      	movs	r1, #129	; 0x81
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f008 f8d0 	bl	80167f8 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800e65e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800e662:	f008 fa65 	bl	8016b30 <malloc>
 800e666:	4603      	mov	r3, r0
 800e668:	461a      	mov	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e676:	2b00      	cmp	r3, #0
 800e678:	d101      	bne.n	800e67e <USBD_MSC_Init+0x86>
  {
    return USBD_FAIL;
 800e67a:	2302      	movs	r3, #2
 800e67c:	e003      	b.n	800e686 <USBD_MSC_Init+0x8e>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f9db 	bl	800ea3a <MSC_BOT_Init>

  return USBD_OK;
 800e684:	2300      	movs	r3, #0
}
 800e686:	4618      	mov	r0, r3
 800e688:	3708      	adds	r7, #8
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b082      	sub	sp, #8
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	460b      	mov	r3, r1
 800e698:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800e69a:	2101      	movs	r1, #1
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f008 f8d1 	bl	8016844 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800e6aa:	2181      	movs	r1, #129	; 0x81
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f008 f8c9 	bl	8016844 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fa08 	bl	800eace <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d009      	beq.n	800e6dc <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f008 fa36 	bl	8016b40 <free>
    pdev->pClassData  = NULL;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800e6dc:	2300      	movs	r3, #0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3708      	adds	r7, #8
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
	...

0800e6e8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b086      	sub	sp, #24
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6f8:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800e6fe:	2300      	movs	r3, #0
 800e700:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d04d      	beq.n	800e7aa <USBD_MSC_Setup+0xc2>
 800e70e:	2b20      	cmp	r3, #32
 800e710:	f040 8113 	bne.w	800e93a <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	785b      	ldrb	r3, [r3, #1]
 800e718:	2bfe      	cmp	r3, #254	; 0xfe
 800e71a:	d002      	beq.n	800e722 <USBD_MSC_Setup+0x3a>
 800e71c:	2bff      	cmp	r3, #255	; 0xff
 800e71e:	d024      	beq.n	800e76a <USBD_MSC_Setup+0x82>
 800e720:	e03b      	b.n	800e79a <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	885b      	ldrh	r3, [r3, #2]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d118      	bne.n	800e75c <USBD_MSC_Setup+0x74>
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	88db      	ldrh	r3, [r3, #6]
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d114      	bne.n	800e75c <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800e738:	2b00      	cmp	r3, #0
 800e73a:	da0f      	bge.n	800e75c <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e742:	699b      	ldr	r3, [r3, #24]
 800e744:	4798      	blx	r3
 800e746:	4603      	mov	r3, r0
 800e748:	461a      	mov	r2, r3
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	2201      	movs	r2, #1
 800e752:	4619      	mov	r1, r3
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f002 f9e3 	bl	8010b20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e75a:	e025      	b.n	800e7a8 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f002 f973 	bl	8010a4a <USBD_CtlError>
            ret = USBD_FAIL;
 800e764:	2302      	movs	r3, #2
 800e766:	75fb      	strb	r3, [r7, #23]
          break;
 800e768:	e01e      	b.n	800e7a8 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	885b      	ldrh	r3, [r3, #2]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10c      	bne.n	800e78c <USBD_MSC_Setup+0xa4>
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	88db      	ldrh	r3, [r3, #6]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d108      	bne.n	800e78c <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800e780:	2b00      	cmp	r3, #0
 800e782:	db03      	blt.n	800e78c <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 f988 	bl	800ea9a <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e78a:	e00d      	b.n	800e7a8 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800e78c:	6839      	ldr	r1, [r7, #0]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f002 f95b 	bl	8010a4a <USBD_CtlError>
            ret = USBD_FAIL;
 800e794:	2302      	movs	r3, #2
 800e796:	75fb      	strb	r3, [r7, #23]
          break;
 800e798:	e006      	b.n	800e7a8 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f002 f954 	bl	8010a4a <USBD_CtlError>
          ret = USBD_FAIL;
 800e7a2:	2302      	movs	r3, #2
 800e7a4:	75fb      	strb	r3, [r7, #23]
          break;
 800e7a6:	bf00      	nop
      }
      break;
 800e7a8:	e0ce      	b.n	800e948 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	785b      	ldrb	r3, [r3, #1]
 800e7ae:	2b0b      	cmp	r3, #11
 800e7b0:	f200 80bb 	bhi.w	800e92a <USBD_MSC_Setup+0x242>
 800e7b4:	a201      	add	r2, pc, #4	; (adr r2, 800e7bc <USBD_MSC_Setup+0xd4>)
 800e7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ba:	bf00      	nop
 800e7bc:	0800e7ed 	.word	0x0800e7ed
 800e7c0:	0800e863 	.word	0x0800e863
 800e7c4:	0800e92b 	.word	0x0800e92b
 800e7c8:	0800e92b 	.word	0x0800e92b
 800e7cc:	0800e92b 	.word	0x0800e92b
 800e7d0:	0800e92b 	.word	0x0800e92b
 800e7d4:	0800e92b 	.word	0x0800e92b
 800e7d8:	0800e92b 	.word	0x0800e92b
 800e7dc:	0800e92b 	.word	0x0800e92b
 800e7e0:	0800e92b 	.word	0x0800e92b
 800e7e4:	0800e815 	.word	0x0800e815
 800e7e8:	0800e83d 	.word	0x0800e83d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7f2:	2b03      	cmp	r3, #3
 800e7f4:	d107      	bne.n	800e806 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800e7f6:	f107 030e 	add.w	r3, r7, #14
 800e7fa:	2202      	movs	r2, #2
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f002 f98e 	bl	8010b20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e804:	e098      	b.n	800e938 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800e806:	6839      	ldr	r1, [r7, #0]
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f002 f91e 	bl	8010a4a <USBD_CtlError>
            ret = USBD_FAIL;
 800e80e:	2302      	movs	r3, #2
 800e810:	75fb      	strb	r3, [r7, #23]
          break;
 800e812:	e091      	b.n	800e938 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e81a:	2b03      	cmp	r3, #3
 800e81c:	d107      	bne.n	800e82e <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	3304      	adds	r3, #4
 800e822:	2201      	movs	r2, #1
 800e824:	4619      	mov	r1, r3
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f002 f97a 	bl	8010b20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e82c:	e084      	b.n	800e938 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800e82e:	6839      	ldr	r1, [r7, #0]
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f002 f90a 	bl	8010a4a <USBD_CtlError>
            ret = USBD_FAIL;
 800e836:	2302      	movs	r3, #2
 800e838:	75fb      	strb	r3, [r7, #23]
          break;
 800e83a:	e07d      	b.n	800e938 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e842:	2b03      	cmp	r3, #3
 800e844:	d106      	bne.n	800e854 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	885b      	ldrh	r3, [r3, #2]
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	461a      	mov	r2, r3
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e852:	e071      	b.n	800e938 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800e854:	6839      	ldr	r1, [r7, #0]
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f002 f8f7 	bl	8010a4a <USBD_CtlError>
            ret = USBD_FAIL;
 800e85c:	2302      	movs	r3, #2
 800e85e:	75fb      	strb	r3, [r7, #23]
          break;
 800e860:	e06a      	b.n	800e938 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	889b      	ldrh	r3, [r3, #4]
 800e866:	b2db      	uxtb	r3, r3
 800e868:	4619      	mov	r1, r3
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f008 f809 	bl	8016882 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	889b      	ldrh	r3, [r3, #4]
 800e874:	b2db      	uxtb	r3, r3
 800e876:	4619      	mov	r1, r3
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f007 ffe3 	bl	8016844 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	889b      	ldrh	r3, [r3, #4]
 800e882:	b25b      	sxtb	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	da23      	bge.n	800e8d0 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	889b      	ldrh	r3, [r3, #4]
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	f003 020f 	and.w	r2, r3, #15
 800e892:	6879      	ldr	r1, [r7, #4]
 800e894:	4613      	mov	r3, r2
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	4413      	add	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	440b      	add	r3, r1
 800e89e:	3318      	adds	r3, #24
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	7c1b      	ldrb	r3, [r3, #16]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d107      	bne.n	800e8bc <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800e8ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8b0:	2202      	movs	r2, #2
 800e8b2:	2181      	movs	r1, #129	; 0x81
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f007 ff9f 	bl	80167f8 <USBD_LL_OpenEP>
 800e8ba:	e005      	b.n	800e8c8 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800e8bc:	2340      	movs	r3, #64	; 0x40
 800e8be:	2202      	movs	r2, #2
 800e8c0:	2181      	movs	r1, #129	; 0x81
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f007 ff98 	bl	80167f8 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800e8ce:	e024      	b.n	800e91a <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	889b      	ldrh	r3, [r3, #4]
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	f003 020f 	and.w	r2, r3, #15
 800e8da:	6879      	ldr	r1, [r7, #4]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	4413      	add	r3, r2
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	440b      	add	r3, r1
 800e8e6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	7c1b      	ldrb	r3, [r3, #16]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d107      	bne.n	800e906 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800e8f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8fa:	2202      	movs	r2, #2
 800e8fc:	2101      	movs	r1, #1
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f007 ff7a 	bl	80167f8 <USBD_LL_OpenEP>
 800e904:	e005      	b.n	800e912 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800e906:	2340      	movs	r3, #64	; 0x40
 800e908:	2202      	movs	r2, #2
 800e90a:	2101      	movs	r1, #1
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f007 ff73 	bl	80167f8 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	889b      	ldrh	r3, [r3, #4]
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	4619      	mov	r1, r3
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 fa52 	bl	800edcc <MSC_BOT_CplClrFeature>
          break;
 800e928:	e006      	b.n	800e938 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 800e92a:	6839      	ldr	r1, [r7, #0]
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f002 f88c 	bl	8010a4a <USBD_CtlError>
          ret = USBD_FAIL;
 800e932:	2302      	movs	r3, #2
 800e934:	75fb      	strb	r3, [r7, #23]
          break;
 800e936:	bf00      	nop
      }
      break;
 800e938:	e006      	b.n	800e948 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 800e93a:	6839      	ldr	r1, [r7, #0]
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f002 f884 	bl	8010a4a <USBD_CtlError>
      ret = USBD_FAIL;
 800e942:	2302      	movs	r3, #2
 800e944:	75fb      	strb	r3, [r7, #23]
      break;
 800e946:	bf00      	nop
  }

  return ret;
 800e948:	7dfb      	ldrb	r3, [r7, #23]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3718      	adds	r7, #24
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop

0800e954 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	460b      	mov	r3, r1
 800e95e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800e960:	78fb      	ldrb	r3, [r7, #3]
 800e962:	4619      	mov	r1, r3
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 f8c3 	bl	800eaf0 <MSC_BOT_DataIn>

  return USBD_OK;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	460b      	mov	r3, r1
 800e97e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800e980:	78fb      	ldrb	r3, [r7, #3]
 800e982:	4619      	mov	r1, r3
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f000 f8e4 	bl	800eb52 <MSC_BOT_DataOut>

  return USBD_OK;
 800e98a:	2300      	movs	r3, #0
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2220      	movs	r2, #32
 800e9a0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800e9a2:	4b03      	ldr	r3, [pc, #12]	; (800e9b0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	24000054 	.word	0x24000054

0800e9b4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2220      	movs	r2, #32
 800e9c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800e9c2:	4b03      	ldr	r3, [pc, #12]	; (800e9d0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	370c      	adds	r7, #12
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr
 800e9d0:	24000074 	.word	0x24000074

0800e9d4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2220      	movs	r2, #32
 800e9e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800e9e2:	4b03      	ldr	r3, [pc, #12]	; (800e9f0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	370c      	adds	r7, #12
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr
 800e9f0:	24000094 	.word	0x24000094

0800e9f4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	220a      	movs	r2, #10
 800ea00:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800ea02:	4b03      	ldr	r3, [pc, #12]	; (800ea10 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr
 800ea10:	240000b4 	.word	0x240000b4

0800ea14 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d003      	beq.n	800ea2c <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	683a      	ldr	r2, [r7, #0]
 800ea28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	370c      	adds	r7, #12
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr

0800ea3a <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b084      	sub	sp, #16
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea48:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2200      	movs	r2, #0
 800ea54:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2200      	movs	r2, #0
 800ea62:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2000      	movs	r0, #0
 800ea70:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800ea72:	2101      	movs	r1, #1
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f007 ff04 	bl	8016882 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800ea7a:	2181      	movs	r1, #129	; 0x81
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f007 ff00 	bl	8016882 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800ea88:	231f      	movs	r3, #31
 800ea8a:	2101      	movs	r1, #1
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f007 ffc3 	bl	8016a18 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800ea92:	bf00      	nop
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b084      	sub	sp, #16
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaa8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2201      	movs	r2, #1
 800eab4:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800eabc:	231f      	movs	r3, #31
 800eabe:	2101      	movs	r1, #1
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f007 ffa9 	bl	8016a18 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800eac6:	bf00      	nop
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800eace:	b480      	push	{r7}
 800ead0:	b085      	sub	sp, #20
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eadc:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2200      	movs	r2, #0
 800eae2:	721a      	strb	r2, [r3, #8]
}
 800eae4:	bf00      	nop
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	460b      	mov	r3, r1
 800eafa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb02:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	7a1b      	ldrb	r3, [r3, #8]
 800eb08:	2b02      	cmp	r3, #2
 800eb0a:	d004      	beq.n	800eb16 <MSC_BOT_DataIn+0x26>
 800eb0c:	2b02      	cmp	r3, #2
 800eb0e:	db19      	blt.n	800eb44 <MSC_BOT_DataIn+0x54>
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	dc17      	bgt.n	800eb44 <MSC_BOT_DataIn+0x54>
 800eb14:	e011      	b.n	800eb3a <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800eb22:	461a      	mov	r2, r3
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 f979 	bl	800ee1c <SCSI_ProcessCmd>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	da0b      	bge.n	800eb48 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800eb30:	2101      	movs	r1, #1
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 f8f0 	bl	800ed18 <MSC_BOT_SendCSW>
      }
      break;
 800eb38:	e006      	b.n	800eb48 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800eb3a:	2100      	movs	r1, #0
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 f8eb 	bl	800ed18 <MSC_BOT_SendCSW>
      break;
 800eb42:	e002      	b.n	800eb4a <MSC_BOT_DataIn+0x5a>

    default:
      break;
 800eb44:	bf00      	nop
 800eb46:	e000      	b.n	800eb4a <MSC_BOT_DataIn+0x5a>
      break;
 800eb48:	bf00      	nop
  }
}
 800eb4a:	bf00      	nop
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b084      	sub	sp, #16
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb64:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	7a1b      	ldrb	r3, [r3, #8]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d002      	beq.n	800eb74 <MSC_BOT_DataOut+0x22>
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d004      	beq.n	800eb7c <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800eb72:	e015      	b.n	800eba0 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 f817 	bl	800eba8 <MSC_BOT_CBW_Decode>
      break;
 800eb7a:	e011      	b.n	800eba0 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800eb88:	461a      	mov	r2, r3
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f000 f946 	bl	800ee1c <SCSI_ProcessCmd>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	da03      	bge.n	800eb9e <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800eb96:	2101      	movs	r1, #1
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 f8bd 	bl	800ed18 <MSC_BOT_SendCSW>
      break;
 800eb9e:	bf00      	nop
  }
}
 800eba0:	bf00      	nop
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebb6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f007 ff43 	bl	8016a5e <USBD_LL_GetRxDataSize>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b1f      	cmp	r3, #31
 800ebdc:	d114      	bne.n	800ec08 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800ebe4:	4a32      	ldr	r2, [pc, #200]	; (800ecb0 <MSC_BOT_CBW_Decode+0x108>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d10e      	bne.n	800ec08 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d809      	bhi.n	800ec08 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d004      	beq.n	800ec08 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800ec04:	2b10      	cmp	r3, #16
 800ec06:	d90e      	bls.n	800ec26 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800ec0e:	2320      	movs	r3, #32
 800ec10:	2205      	movs	r2, #5
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 fc4b 	bl	800f4ae <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2202      	movs	r2, #2
 800ec1c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 f8a6 	bl	800ed70 <MSC_BOT_Abort>
 800ec24:	e041      	b.n	800ecaa <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ec32:	461a      	mov	r2, r3
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 f8f1 	bl	800ee1c <SCSI_ProcessCmd>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	da0c      	bge.n	800ec5a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	7a1b      	ldrb	r3, [r3, #8]
 800ec44:	2b05      	cmp	r3, #5
 800ec46:	d104      	bne.n	800ec52 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ec48:	2101      	movs	r1, #1
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 f864 	bl	800ed18 <MSC_BOT_SendCSW>
 800ec50:	e02b      	b.n	800ecaa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f88c 	bl	800ed70 <MSC_BOT_Abort>
 800ec58:	e027      	b.n	800ecaa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	7a1b      	ldrb	r3, [r3, #8]
 800ec5e:	2b02      	cmp	r3, #2
 800ec60:	d022      	beq.n	800eca8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d01e      	beq.n	800eca8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ec6e:	2b03      	cmp	r3, #3
 800ec70:	d01a      	beq.n	800eca8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	895b      	ldrh	r3, [r3, #10]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d009      	beq.n	800ec8e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f103 010c 	add.w	r1, r3, #12
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	895b      	ldrh	r3, [r3, #10]
 800ec84:	461a      	mov	r2, r3
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 f814 	bl	800ecb4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800ec8c:	e00d      	b.n	800ecaa <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	895b      	ldrh	r3, [r3, #10]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d104      	bne.n	800eca0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ec96:	2100      	movs	r1, #0
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f000 f83d 	bl	800ed18 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800ec9e:	e004      	b.n	800ecaa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f865 	bl	800ed70 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800eca6:	e000      	b.n	800ecaa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800eca8:	bf00      	nop
    }
  }
}
 800ecaa:	3710      	adds	r7, #16
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	43425355 	.word	0x43425355

0800ecb4 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	4613      	mov	r3, r2
 800ecc0:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecc8:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800ecd0:	88fb      	ldrh	r3, [r7, #6]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d204      	bcs.n	800ece0 <MSC_BOT_SendData+0x2c>
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	e000      	b.n	800ece2 <MSC_BOT_SendData+0x2e>
 800ece0:	88fb      	ldrh	r3, [r7, #6]
 800ece2:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800ecea:	88fb      	ldrh	r3, [r7, #6]
 800ecec:	1ad2      	subs	r2, r2, r3
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2204      	movs	r2, #4
 800ed00:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800ed02:	8a7b      	ldrh	r3, [r7, #18]
 800ed04:	68ba      	ldr	r2, [r7, #8]
 800ed06:	2181      	movs	r1, #129	; 0x81
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f007 fe62 	bl	80169d2 <USBD_LL_Transmit>
}
 800ed0e:	bf00      	nop
 800ed10:	3718      	adds	r7, #24
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
	...

0800ed18 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	460b      	mov	r3, r1
 800ed22:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed2a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	4a0f      	ldr	r2, [pc, #60]	; (800ed6c <MSC_BOT_SendCSW+0x54>)
 800ed30:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	78fa      	ldrb	r2, [r7, #3]
 800ed38:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 800ed48:	230d      	movs	r3, #13
 800ed4a:	2181      	movs	r1, #129	; 0x81
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f007 fe40 	bl	80169d2 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800ed58:	231f      	movs	r3, #31
 800ed5a:	2101      	movs	r1, #1
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f007 fe5b 	bl	8016a18 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800ed62:	bf00      	nop
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	53425355 	.word	0x53425355

0800ed70 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed7e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d10c      	bne.n	800eda4 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d007      	beq.n	800eda4 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d103      	bne.n	800eda4 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ed9c:	2101      	movs	r1, #1
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f007 fd8e 	bl	80168c0 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800eda4:	2181      	movs	r1, #129	; 0x81
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f007 fd8a 	bl	80168c0 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	7a5b      	ldrb	r3, [r3, #9]
 800edb0:	2b02      	cmp	r3, #2
 800edb2:	d107      	bne.n	800edc4 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800edba:	231f      	movs	r3, #31
 800edbc:	2101      	movs	r1, #1
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f007 fe2a 	bl	8016a18 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 800edc4:	bf00      	nop
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	460b      	mov	r3, r1
 800edd6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edde:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	7a5b      	ldrb	r3, [r3, #9]
 800ede4:	2b02      	cmp	r3, #2
 800ede6:	d107      	bne.n	800edf8 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ede8:	2181      	movs	r1, #129	; 0x81
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f007 fd68 	bl	80168c0 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2200      	movs	r2, #0
 800edf4:	725a      	strb	r2, [r3, #9]
 800edf6:	e00d      	b.n	800ee14 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800edf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	da08      	bge.n	800ee12 <MSC_BOT_CplClrFeature+0x46>
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	7a5b      	ldrb	r3, [r3, #9]
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d004      	beq.n	800ee12 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ee08:	2101      	movs	r1, #1
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f7ff ff84 	bl	800ed18 <MSC_BOT_SendCSW>
 800ee10:	e000      	b.n	800ee14 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800ee12:	bf00      	nop
  }
}
 800ee14:	3710      	adds	r7, #16
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
	...

0800ee1c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	460b      	mov	r3, r1
 800ee26:	607a      	str	r2, [r7, #4]
 800ee28:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	2b5a      	cmp	r3, #90	; 0x5a
 800ee30:	f200 810e 	bhi.w	800f050 <SCSI_ProcessCmd+0x234>
 800ee34:	a201      	add	r2, pc, #4	; (adr r2, 800ee3c <SCSI_ProcessCmd+0x20>)
 800ee36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3a:	bf00      	nop
 800ee3c:	0800efa9 	.word	0x0800efa9
 800ee40:	0800f051 	.word	0x0800f051
 800ee44:	0800f051 	.word	0x0800f051
 800ee48:	0800efb7 	.word	0x0800efb7
 800ee4c:	0800f051 	.word	0x0800f051
 800ee50:	0800f051 	.word	0x0800f051
 800ee54:	0800f051 	.word	0x0800f051
 800ee58:	0800f051 	.word	0x0800f051
 800ee5c:	0800f051 	.word	0x0800f051
 800ee60:	0800f051 	.word	0x0800f051
 800ee64:	0800f051 	.word	0x0800f051
 800ee68:	0800f051 	.word	0x0800f051
 800ee6c:	0800f051 	.word	0x0800f051
 800ee70:	0800f051 	.word	0x0800f051
 800ee74:	0800f051 	.word	0x0800f051
 800ee78:	0800f051 	.word	0x0800f051
 800ee7c:	0800f051 	.word	0x0800f051
 800ee80:	0800f051 	.word	0x0800f051
 800ee84:	0800efc5 	.word	0x0800efc5
 800ee88:	0800f051 	.word	0x0800f051
 800ee8c:	0800f051 	.word	0x0800f051
 800ee90:	0800f051 	.word	0x0800f051
 800ee94:	0800f051 	.word	0x0800f051
 800ee98:	0800f051 	.word	0x0800f051
 800ee9c:	0800f051 	.word	0x0800f051
 800eea0:	0800f051 	.word	0x0800f051
 800eea4:	0800efef 	.word	0x0800efef
 800eea8:	0800efd3 	.word	0x0800efd3
 800eeac:	0800f051 	.word	0x0800f051
 800eeb0:	0800f051 	.word	0x0800f051
 800eeb4:	0800efe1 	.word	0x0800efe1
 800eeb8:	0800f051 	.word	0x0800f051
 800eebc:	0800f051 	.word	0x0800f051
 800eec0:	0800f051 	.word	0x0800f051
 800eec4:	0800f051 	.word	0x0800f051
 800eec8:	0800f00b 	.word	0x0800f00b
 800eecc:	0800f051 	.word	0x0800f051
 800eed0:	0800f019 	.word	0x0800f019
 800eed4:	0800f051 	.word	0x0800f051
 800eed8:	0800f051 	.word	0x0800f051
 800eedc:	0800f027 	.word	0x0800f027
 800eee0:	0800f051 	.word	0x0800f051
 800eee4:	0800f035 	.word	0x0800f035
 800eee8:	0800f051 	.word	0x0800f051
 800eeec:	0800f051 	.word	0x0800f051
 800eef0:	0800f051 	.word	0x0800f051
 800eef4:	0800f051 	.word	0x0800f051
 800eef8:	0800f043 	.word	0x0800f043
 800eefc:	0800f051 	.word	0x0800f051
 800ef00:	0800f051 	.word	0x0800f051
 800ef04:	0800f051 	.word	0x0800f051
 800ef08:	0800f051 	.word	0x0800f051
 800ef0c:	0800f051 	.word	0x0800f051
 800ef10:	0800f051 	.word	0x0800f051
 800ef14:	0800f051 	.word	0x0800f051
 800ef18:	0800f051 	.word	0x0800f051
 800ef1c:	0800f051 	.word	0x0800f051
 800ef20:	0800f051 	.word	0x0800f051
 800ef24:	0800f051 	.word	0x0800f051
 800ef28:	0800f051 	.word	0x0800f051
 800ef2c:	0800f051 	.word	0x0800f051
 800ef30:	0800f051 	.word	0x0800f051
 800ef34:	0800f051 	.word	0x0800f051
 800ef38:	0800f051 	.word	0x0800f051
 800ef3c:	0800f051 	.word	0x0800f051
 800ef40:	0800f051 	.word	0x0800f051
 800ef44:	0800f051 	.word	0x0800f051
 800ef48:	0800f051 	.word	0x0800f051
 800ef4c:	0800f051 	.word	0x0800f051
 800ef50:	0800f051 	.word	0x0800f051
 800ef54:	0800f051 	.word	0x0800f051
 800ef58:	0800f051 	.word	0x0800f051
 800ef5c:	0800f051 	.word	0x0800f051
 800ef60:	0800f051 	.word	0x0800f051
 800ef64:	0800f051 	.word	0x0800f051
 800ef68:	0800f051 	.word	0x0800f051
 800ef6c:	0800f051 	.word	0x0800f051
 800ef70:	0800f051 	.word	0x0800f051
 800ef74:	0800f051 	.word	0x0800f051
 800ef78:	0800f051 	.word	0x0800f051
 800ef7c:	0800f051 	.word	0x0800f051
 800ef80:	0800f051 	.word	0x0800f051
 800ef84:	0800f051 	.word	0x0800f051
 800ef88:	0800f051 	.word	0x0800f051
 800ef8c:	0800f051 	.word	0x0800f051
 800ef90:	0800f051 	.word	0x0800f051
 800ef94:	0800f051 	.word	0x0800f051
 800ef98:	0800f051 	.word	0x0800f051
 800ef9c:	0800f051 	.word	0x0800f051
 800efa0:	0800f051 	.word	0x0800f051
 800efa4:	0800effd 	.word	0x0800effd
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 800efa8:	7afb      	ldrb	r3, [r7, #11]
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	4619      	mov	r1, r3
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f000 f85c 	bl	800f06c <SCSI_TestUnitReady>
      break;
 800efb4:	e055      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 800efb6:	7afb      	ldrb	r3, [r7, #11]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	4619      	mov	r1, r3
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	f000 fa0b 	bl	800f3d8 <SCSI_RequestSense>
      break;
 800efc2:	e04e      	b.n	800f062 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 800efc4:	7afb      	ldrb	r3, [r7, #11]
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	4619      	mov	r1, r3
 800efca:	68f8      	ldr	r0, [r7, #12]
 800efcc:	f000 f888 	bl	800f0e0 <SCSI_Inquiry>
      break;
 800efd0:	e047      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800efd2:	7afb      	ldrb	r3, [r7, #11]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	4619      	mov	r1, r3
 800efd8:	68f8      	ldr	r0, [r7, #12]
 800efda:	f000 faa2 	bl	800f522 <SCSI_StartStopUnit>
      break;
 800efde:	e040      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800efe0:	7afb      	ldrb	r3, [r7, #11]
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	4619      	mov	r1, r3
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f000 fa9b 	bl	800f522 <SCSI_StartStopUnit>
      break;
 800efec:	e039      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800efee:	7afb      	ldrb	r3, [r7, #11]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	4619      	mov	r1, r3
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f000 f99f 	bl	800f338 <SCSI_ModeSense6>
      break;
 800effa:	e032      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 800effc:	7afb      	ldrb	r3, [r7, #11]
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	4619      	mov	r1, r3
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f000 f9c0 	bl	800f388 <SCSI_ModeSense10>
      break;
 800f008:	e02b      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800f00a:	7afb      	ldrb	r3, [r7, #11]
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	4619      	mov	r1, r3
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f000 f92c 	bl	800f26e <SCSI_ReadFormatCapacity>
      break;
 800f016:	e024      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 800f018:	7afb      	ldrb	r3, [r7, #11]
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	4619      	mov	r1, r3
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f000 f8be 	bl	800f1a0 <SCSI_ReadCapacity10>
      break;
 800f024:	e01d      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 800f026:	7afb      	ldrb	r3, [r7, #11]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	4619      	mov	r1, r3
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	f000 fa8d 	bl	800f54c <SCSI_Read10>
      break;
 800f032:	e016      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 800f034:	7afb      	ldrb	r3, [r7, #11]
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	4619      	mov	r1, r3
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f000 fb12 	bl	800f664 <SCSI_Write10>
      break;
 800f040:	e00f      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 800f042:	7afb      	ldrb	r3, [r7, #11]
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	4619      	mov	r1, r3
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	f000 fbbb 	bl	800f7c4 <SCSI_Verify10>
      break;
 800f04e:	e008      	b.n	800f062 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800f050:	7af9      	ldrb	r1, [r7, #11]
 800f052:	2320      	movs	r3, #32
 800f054:	2205      	movs	r2, #5
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f000 fa29 	bl	800f4ae <SCSI_SenseCode>
      return -1;
 800f05c:	f04f 33ff 	mov.w	r3, #4294967295
 800f060:	e000      	b.n	800f064 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 800f062:	2300      	movs	r3, #0
}
 800f064:	4618      	mov	r0, r3
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	460b      	mov	r3, r1
 800f076:	607a      	str	r2, [r7, #4]
 800f078:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f080:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00a      	beq.n	800f0a2 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f092:	2320      	movs	r3, #32
 800f094:	2205      	movs	r2, #5
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f000 fa09 	bl	800f4ae <SCSI_SenseCode>

    return -1;
 800f09c:	f04f 33ff 	mov.w	r3, #4294967295
 800f0a0:	e019      	b.n	800f0d6 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	7afa      	ldrb	r2, [r7, #11]
 800f0ac:	4610      	mov	r0, r2
 800f0ae:	4798      	blx	r3
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00b      	beq.n	800f0ce <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f0b6:	7af9      	ldrb	r1, [r7, #11]
 800f0b8:	233a      	movs	r3, #58	; 0x3a
 800f0ba:	2202      	movs	r2, #2
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f000 f9f6 	bl	800f4ae <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	2205      	movs	r2, #5
 800f0c6:	721a      	strb	r2, [r3, #8]

    return -1;
 800f0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0cc:	e003      	b.n	800f0d6 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	815a      	strh	r2, [r3, #10]

  return 0;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3718      	adds	r7, #24
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
	...

0800f0e0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b089      	sub	sp, #36	; 0x24
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	607a      	str	r2, [r7, #4]
 800f0ec:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f4:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	f003 0301 	and.w	r3, r3, #1
 800f100:	2b00      	cmp	r3, #0
 800f102:	d014      	beq.n	800f12e <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800f104:	2307      	movs	r3, #7
 800f106:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	8bfa      	ldrh	r2, [r7, #30]
 800f10c:	815a      	strh	r2, [r3, #10]

    while (len)
 800f10e:	e00a      	b.n	800f126 <SCSI_Inquiry+0x46>
    {
      len--;
 800f110:	8bfb      	ldrh	r3, [r7, #30]
 800f112:	3b01      	subs	r3, #1
 800f114:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800f116:	8bfa      	ldrh	r2, [r7, #30]
 800f118:	8bfb      	ldrh	r3, [r7, #30]
 800f11a:	4920      	ldr	r1, [pc, #128]	; (800f19c <SCSI_Inquiry+0xbc>)
 800f11c:	5c89      	ldrb	r1, [r1, r2]
 800f11e:	69ba      	ldr	r2, [r7, #24]
 800f120:	4413      	add	r3, r2
 800f122:	460a      	mov	r2, r1
 800f124:	731a      	strb	r2, [r3, #12]
    while (len)
 800f126:	8bfb      	ldrh	r3, [r7, #30]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1f1      	bne.n	800f110 <SCSI_Inquiry+0x30>
 800f12c:	e02e      	b.n	800f18c <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f134:	69d9      	ldr	r1, [r3, #28]
 800f136:	7afa      	ldrb	r2, [r7, #11]
 800f138:	4613      	mov	r3, r2
 800f13a:	00db      	lsls	r3, r3, #3
 800f13c:	4413      	add	r3, r2
 800f13e:	009b      	lsls	r3, r3, #2
 800f140:	440b      	add	r3, r1
 800f142:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	3304      	adds	r3, #4
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	3305      	adds	r3, #5
 800f14e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	3304      	adds	r3, #4
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	b29b      	uxth	r3, r3
 800f158:	8bfa      	ldrh	r2, [r7, #30]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d303      	bcc.n	800f166 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	3304      	adds	r3, #4
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	8bfa      	ldrh	r2, [r7, #30]
 800f16a:	815a      	strh	r2, [r3, #10]

    while (len)
 800f16c:	e00b      	b.n	800f186 <SCSI_Inquiry+0xa6>
    {
      len--;
 800f16e:	8bfb      	ldrh	r3, [r7, #30]
 800f170:	3b01      	subs	r3, #1
 800f172:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800f174:	8bfb      	ldrh	r3, [r7, #30]
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	441a      	add	r2, r3
 800f17a:	8bfb      	ldrh	r3, [r7, #30]
 800f17c:	7811      	ldrb	r1, [r2, #0]
 800f17e:	69ba      	ldr	r2, [r7, #24]
 800f180:	4413      	add	r3, r2
 800f182:	460a      	mov	r2, r1
 800f184:	731a      	strb	r2, [r3, #12]
    while (len)
 800f186:	8bfb      	ldrh	r3, [r7, #30]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d1f0      	bne.n	800f16e <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800f18c:	2300      	movs	r3, #0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3724      	adds	r7, #36	; 0x24
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop
 800f19c:	08016e40 	.word	0x08016e40

0800f1a0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	607a      	str	r2, [r7, #4]
 800f1ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1b4:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	697a      	ldr	r2, [r7, #20]
 800f1c0:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800f1c4:	697a      	ldr	r2, [r7, #20]
 800f1c6:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800f1ca:	7af8      	ldrb	r0, [r7, #11]
 800f1cc:	4798      	blx	r3
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d008      	beq.n	800f1e6 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f1d4:	7af9      	ldrb	r1, [r7, #11]
 800f1d6:	233a      	movs	r3, #58	; 0x3a
 800f1d8:	2202      	movs	r2, #2
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f000 f967 	bl	800f4ae <SCSI_SenseCode>
    return -1;
 800f1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e4:	e03f      	b.n	800f266 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f1ec:	3b01      	subs	r3, #1
 800f1ee:	0e1b      	lsrs	r3, r3, #24
 800f1f0:	b2da      	uxtb	r2, r3
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f1fc:	3b01      	subs	r3, #1
 800f1fe:	0c1b      	lsrs	r3, r3, #16
 800f200:	b2da      	uxtb	r2, r3
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f20c:	3b01      	subs	r3, #1
 800f20e:	0a1b      	lsrs	r3, r3, #8
 800f210:	b2da      	uxtb	r2, r3
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	3b01      	subs	r3, #1
 800f220:	b2da      	uxtb	r2, r3
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f22c:	161b      	asrs	r3, r3, #24
 800f22e:	b2da      	uxtb	r2, r3
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f23a:	141b      	asrs	r3, r3, #16
 800f23c:	b2da      	uxtb	r2, r3
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f248:	0a1b      	lsrs	r3, r3, #8
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	b2da      	uxtb	r2, r3
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f258:	b2da      	uxtb	r2, r3
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	2208      	movs	r2, #8
 800f262:	815a      	strh	r2, [r3, #10]
    return 0;
 800f264:	2300      	movs	r3, #0
  }
}
 800f266:	4618      	mov	r0, r3
 800f268:	3718      	adds	r7, #24
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f26e:	b580      	push	{r7, lr}
 800f270:	b088      	sub	sp, #32
 800f272:	af00      	add	r7, sp, #0
 800f274:	60f8      	str	r0, [r7, #12]
 800f276:	460b      	mov	r3, r1
 800f278:	607a      	str	r2, [r7, #4]
 800f27a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f282:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 800f284:	2300      	movs	r3, #0
 800f286:	83fb      	strh	r3, [r7, #30]
 800f288:	e007      	b.n	800f29a <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800f28a:	8bfb      	ldrh	r3, [r7, #30]
 800f28c:	69ba      	ldr	r2, [r7, #24]
 800f28e:	4413      	add	r3, r2
 800f290:	2200      	movs	r2, #0
 800f292:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 800f294:	8bfb      	ldrh	r3, [r7, #30]
 800f296:	3301      	adds	r3, #1
 800f298:	83fb      	strh	r3, [r7, #30]
 800f29a:	8bfb      	ldrh	r3, [r7, #30]
 800f29c:	2b0b      	cmp	r3, #11
 800f29e:	d9f4      	bls.n	800f28a <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	f107 0216 	add.w	r2, r7, #22
 800f2ac:	f107 0110 	add.w	r1, r7, #16
 800f2b0:	7af8      	ldrb	r0, [r7, #11]
 800f2b2:	4798      	blx	r3
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d008      	beq.n	800f2cc <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f2ba:	7af9      	ldrb	r1, [r7, #11]
 800f2bc:	233a      	movs	r3, #58	; 0x3a
 800f2be:	2202      	movs	r2, #2
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f000 f8f4 	bl	800f4ae <SCSI_SenseCode>
    return -1;
 800f2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ca:	e030      	b.n	800f32e <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800f2cc:	69bb      	ldr	r3, [r7, #24]
 800f2ce:	2208      	movs	r2, #8
 800f2d0:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	0e1b      	lsrs	r3, r3, #24
 800f2d8:	b2da      	uxtb	r2, r3
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	0c1b      	lsrs	r3, r3, #16
 800f2e4:	b2da      	uxtb	r2, r3
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	0a1b      	lsrs	r3, r3, #8
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	b2da      	uxtb	r2, r3
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	2202      	movs	r2, #2
 800f306:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800f308:	8afb      	ldrh	r3, [r7, #22]
 800f30a:	141b      	asrs	r3, r3, #16
 800f30c:	b2da      	uxtb	r2, r3
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800f312:	8afb      	ldrh	r3, [r7, #22]
 800f314:	0a1b      	lsrs	r3, r3, #8
 800f316:	b29b      	uxth	r3, r3
 800f318:	b2da      	uxtb	r2, r3
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800f31e:	8afb      	ldrh	r3, [r7, #22]
 800f320:	b2da      	uxtb	r2, r3
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	220c      	movs	r2, #12
 800f32a:	815a      	strh	r2, [r3, #10]
    return 0;
 800f32c:	2300      	movs	r3, #0
  }
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3720      	adds	r7, #32
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
	...

0800f338 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f338:	b480      	push	{r7}
 800f33a:	b087      	sub	sp, #28
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	460b      	mov	r3, r1
 800f342:	607a      	str	r2, [r7, #4]
 800f344:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f34c:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800f34e:	2308      	movs	r3, #8
 800f350:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	8afa      	ldrh	r2, [r7, #22]
 800f356:	815a      	strh	r2, [r3, #10]

  while (len)
 800f358:	e00a      	b.n	800f370 <SCSI_ModeSense6+0x38>
  {
    len--;
 800f35a:	8afb      	ldrh	r3, [r7, #22]
 800f35c:	3b01      	subs	r3, #1
 800f35e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800f360:	8afa      	ldrh	r2, [r7, #22]
 800f362:	8afb      	ldrh	r3, [r7, #22]
 800f364:	4907      	ldr	r1, [pc, #28]	; (800f384 <SCSI_ModeSense6+0x4c>)
 800f366:	5c89      	ldrb	r1, [r1, r2]
 800f368:	693a      	ldr	r2, [r7, #16]
 800f36a:	4413      	add	r3, r2
 800f36c:	460a      	mov	r2, r1
 800f36e:	731a      	strb	r2, [r3, #12]
  while (len)
 800f370:	8afb      	ldrh	r3, [r7, #22]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1f1      	bne.n	800f35a <SCSI_ModeSense6+0x22>
  }
  return 0;
 800f376:	2300      	movs	r3, #0
}
 800f378:	4618      	mov	r0, r3
 800f37a:	371c      	adds	r7, #28
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr
 800f384:	08016e48 	.word	0x08016e48

0800f388 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f388:	b480      	push	{r7}
 800f38a:	b087      	sub	sp, #28
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	460b      	mov	r3, r1
 800f392:	607a      	str	r2, [r7, #4]
 800f394:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800f396:	2308      	movs	r3, #8
 800f398:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3a0:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	8afa      	ldrh	r2, [r7, #22]
 800f3a6:	815a      	strh	r2, [r3, #10]

  while (len)
 800f3a8:	e00a      	b.n	800f3c0 <SCSI_ModeSense10+0x38>
  {
    len--;
 800f3aa:	8afb      	ldrh	r3, [r7, #22]
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800f3b0:	8afa      	ldrh	r2, [r7, #22]
 800f3b2:	8afb      	ldrh	r3, [r7, #22]
 800f3b4:	4907      	ldr	r1, [pc, #28]	; (800f3d4 <SCSI_ModeSense10+0x4c>)
 800f3b6:	5c89      	ldrb	r1, [r1, r2]
 800f3b8:	693a      	ldr	r2, [r7, #16]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	460a      	mov	r2, r1
 800f3be:	731a      	strb	r2, [r3, #12]
  while (len)
 800f3c0:	8afb      	ldrh	r3, [r7, #22]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d1f1      	bne.n	800f3aa <SCSI_ModeSense10+0x22>
  }

  return 0;
 800f3c6:	2300      	movs	r3, #0
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	371c      	adds	r7, #28
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr
 800f3d4:	08016e50 	.word	0x08016e50

0800f3d8 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b087      	sub	sp, #28
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	607a      	str	r2, [r7, #4]
 800f3e4:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ec:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	75fb      	strb	r3, [r7, #23]
 800f3f2:	e007      	b.n	800f404 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800f3f4:	7dfb      	ldrb	r3, [r7, #23]
 800f3f6:	693a      	ldr	r2, [r7, #16]
 800f3f8:	4413      	add	r3, r2
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800f3fe:	7dfb      	ldrb	r3, [r7, #23]
 800f400:	3301      	adds	r3, #1
 800f402:	75fb      	strb	r3, [r7, #23]
 800f404:	7dfb      	ldrb	r3, [r7, #23]
 800f406:	2b11      	cmp	r3, #17
 800f408:	d9f4      	bls.n	800f3f4 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	2270      	movs	r2, #112	; 0x70
 800f40e:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	220c      	movs	r2, #12
 800f414:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f422:	429a      	cmp	r2, r3
 800f424:	d02e      	beq.n	800f484 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f42c:	693a      	ldr	r2, [r7, #16]
 800f42e:	3347      	adds	r3, #71	; 0x47
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	4413      	add	r3, r2
 800f434:	791a      	ldrb	r2, [r3, #4]
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f440:	693a      	ldr	r2, [r7, #16]
 800f442:	3347      	adds	r3, #71	; 0x47
 800f444:	00db      	lsls	r3, r3, #3
 800f446:	4413      	add	r3, r2
 800f448:	7a5a      	ldrb	r2, [r3, #9]
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f454:	693a      	ldr	r2, [r7, #16]
 800f456:	3347      	adds	r3, #71	; 0x47
 800f458:	00db      	lsls	r3, r3, #3
 800f45a:	4413      	add	r3, r2
 800f45c:	7a1a      	ldrb	r2, [r3, #8]
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f468:	3301      	adds	r3, #1
 800f46a:	b2da      	uxtb	r2, r3
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f478:	2b04      	cmp	r3, #4
 800f47a:	d103      	bne.n	800f484 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	2200      	movs	r2, #0
 800f480:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	2212      	movs	r2, #18
 800f488:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	3304      	adds	r3, #4
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	2b12      	cmp	r3, #18
 800f492:	d805      	bhi.n	800f4a0 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	3304      	adds	r3, #4
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800f4a0:	2300      	movs	r3, #0
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	371c      	adds	r7, #28
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr

0800f4ae <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800f4ae:	b480      	push	{r7}
 800f4b0:	b085      	sub	sp, #20
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
 800f4b6:	4608      	mov	r0, r1
 800f4b8:	4611      	mov	r1, r2
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	4603      	mov	r3, r0
 800f4be:	70fb      	strb	r3, [r7, #3]
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	70bb      	strb	r3, [r7, #2]
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4ce:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	3347      	adds	r3, #71	; 0x47
 800f4da:	00db      	lsls	r3, r3, #3
 800f4dc:	4413      	add	r3, r2
 800f4de:	78ba      	ldrb	r2, [r7, #2]
 800f4e0:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f4e8:	68fa      	ldr	r2, [r7, #12]
 800f4ea:	3347      	adds	r3, #71	; 0x47
 800f4ec:	00db      	lsls	r3, r3, #3
 800f4ee:	4413      	add	r3, r2
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	b2da      	uxtb	r2, r3
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f50a:	2b04      	cmp	r3, #4
 800f50c:	d103      	bne.n	800f516 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2200      	movs	r2, #0
 800f512:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800f516:	bf00      	nop
 800f518:	3714      	adds	r7, #20
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr

0800f522 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f522:	b480      	push	{r7}
 800f524:	b087      	sub	sp, #28
 800f526:	af00      	add	r7, sp, #0
 800f528:	60f8      	str	r0, [r7, #12]
 800f52a:	460b      	mov	r3, r1
 800f52c:	607a      	str	r2, [r7, #4]
 800f52e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f536:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	2200      	movs	r2, #0
 800f53c:	815a      	strh	r2, [r3, #10]
  return 0;
 800f53e:	2300      	movs	r3, #0
}
 800f540:	4618      	mov	r0, r3
 800f542:	371c      	adds	r7, #28
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr

0800f54c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b086      	sub	sp, #24
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	460b      	mov	r3, r1
 800f556:	607a      	str	r2, [r7, #4]
 800f558:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f560:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	7a1b      	ldrb	r3, [r3, #8]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d16e      	bne.n	800f648 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800f570:	b25b      	sxtb	r3, r3
 800f572:	2b00      	cmp	r3, #0
 800f574:	db0a      	blt.n	800f58c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f57c:	2320      	movs	r3, #32
 800f57e:	2205      	movs	r2, #5
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f7ff ff94 	bl	800f4ae <SCSI_SenseCode>
      return -1;
 800f586:	f04f 33ff 	mov.w	r3, #4294967295
 800f58a:	e067      	b.n	800f65c <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	7afa      	ldrb	r2, [r7, #11]
 800f596:	4610      	mov	r0, r2
 800f598:	4798      	blx	r3
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d008      	beq.n	800f5b2 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f5a0:	7af9      	ldrb	r1, [r7, #11]
 800f5a2:	233a      	movs	r3, #58	; 0x3a
 800f5a4:	2202      	movs	r2, #2
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f7ff ff81 	bl	800f4ae <SCSI_SenseCode>
      return -1;
 800f5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b0:	e054      	b.n	800f65c <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	3303      	adds	r3, #3
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f5c2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	3304      	adds	r3, #4
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f5cc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	3205      	adds	r2, #5
 800f5d2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f5d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	3307      	adds	r3, #7
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	021b      	lsls	r3, r3, #8
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	3208      	adds	r2, #8
 800f5e8:	7812      	ldrb	r2, [r2, #0]
 800f5ea:	431a      	orrs	r2, r3
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f5fe:	7af9      	ldrb	r1, [r7, #11]
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	f000 f912 	bl	800f82a <SCSI_CheckAddressRange>
 800f606:	4603      	mov	r3, r0
 800f608:	2b00      	cmp	r3, #0
 800f60a:	da02      	bge.n	800f612 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f60c:	f04f 33ff 	mov.w	r3, #4294967295
 800f610:	e024      	b.n	800f65c <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	2202      	movs	r2, #2
 800f616:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f624:	6979      	ldr	r1, [r7, #20]
 800f626:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800f62a:	fb01 f303 	mul.w	r3, r1, r3
 800f62e:	429a      	cmp	r2, r3
 800f630:	d00a      	beq.n	800f648 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f638:	2320      	movs	r3, #32
 800f63a:	2205      	movs	r2, #5
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f7ff ff36 	bl	800f4ae <SCSI_SenseCode>
      return -1;
 800f642:	f04f 33ff 	mov.w	r3, #4294967295
 800f646:	e009      	b.n	800f65c <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f64e:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800f650:	7afb      	ldrb	r3, [r7, #11]
 800f652:	4619      	mov	r1, r3
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f000 f90a 	bl	800f86e <SCSI_ProcessRead>
 800f65a:	4603      	mov	r3, r0
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3718      	adds	r7, #24
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b086      	sub	sp, #24
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	460b      	mov	r3, r1
 800f66e:	607a      	str	r2, [r7, #4]
 800f670:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f678:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	7a1b      	ldrb	r3, [r3, #8]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f040 8096 	bne.w	800f7b0 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800f68a:	b25b      	sxtb	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	da0a      	bge.n	800f6a6 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f696:	2320      	movs	r3, #32
 800f698:	2205      	movs	r2, #5
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f7ff ff07 	bl	800f4ae <SCSI_SenseCode>
      return -1;
 800f6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6a4:	e08a      	b.n	800f7bc <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	7afa      	ldrb	r2, [r7, #11]
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	4798      	blx	r3
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d008      	beq.n	800f6cc <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f6ba:	7af9      	ldrb	r1, [r7, #11]
 800f6bc:	233a      	movs	r3, #58	; 0x3a
 800f6be:	2202      	movs	r2, #2
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f7ff fef4 	bl	800f4ae <SCSI_SenseCode>
      return -1;
 800f6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6ca:	e077      	b.n	800f7bc <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	7afa      	ldrb	r2, [r7, #11]
 800f6d6:	4610      	mov	r0, r2
 800f6d8:	4798      	blx	r3
 800f6da:	4603      	mov	r3, r0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d008      	beq.n	800f6f2 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f6e0:	7af9      	ldrb	r1, [r7, #11]
 800f6e2:	2327      	movs	r3, #39	; 0x27
 800f6e4:	2202      	movs	r2, #2
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f7ff fee1 	bl	800f4ae <SCSI_SenseCode>
      return -1;
 800f6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f0:	e064      	b.n	800f7bc <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	3302      	adds	r3, #2
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	3303      	adds	r3, #3
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f702:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	3304      	adds	r3, #4
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f70c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	3205      	adds	r2, #5
 800f712:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f714:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	3307      	adds	r3, #7
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	3208      	adds	r2, #8
 800f728:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f72a:	431a      	orrs	r2, r3
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f73e:	7af9      	ldrb	r1, [r7, #11]
 800f740:	68f8      	ldr	r0, [r7, #12]
 800f742:	f000 f872 	bl	800f82a <SCSI_CheckAddressRange>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	da02      	bge.n	800f752 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f74c:	f04f 33ff 	mov.w	r3, #4294967295
 800f750:	e034      	b.n	800f7bc <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f758:	697a      	ldr	r2, [r7, #20]
 800f75a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800f75e:	fb02 f303 	mul.w	r3, r2, r3
 800f762:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f76a:	693a      	ldr	r2, [r7, #16]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d00a      	beq.n	800f786 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f776:	2320      	movs	r3, #32
 800f778:	2205      	movs	r2, #5
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f7ff fe97 	bl	800f4ae <SCSI_SenseCode>
      return -1;
 800f780:	f04f 33ff 	mov.w	r3, #4294967295
 800f784:	e01a      	b.n	800f7bc <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f78c:	bf28      	it	cs
 800f78e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f792:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	2201      	movs	r2, #1
 800f798:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	f103 020c 	add.w	r2, r3, #12
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	2101      	movs	r1, #1
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f007 f936 	bl	8016a18 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	e005      	b.n	800f7bc <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800f7b0:	7afb      	ldrb	r3, [r7, #11]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	68f8      	ldr	r0, [r7, #12]
 800f7b6:	f000 f8ce 	bl	800f956 <SCSI_ProcessWrite>
 800f7ba:	4603      	mov	r3, r0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3718      	adds	r7, #24
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b086      	sub	sp, #24
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	607a      	str	r2, [r7, #4]
 800f7d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7d8:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	3301      	adds	r3, #1
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	f003 0302 	and.w	r3, r3, #2
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d008      	beq.n	800f7fa <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f7e8:	7af9      	ldrb	r1, [r7, #11]
 800f7ea:	2324      	movs	r3, #36	; 0x24
 800f7ec:	2205      	movs	r2, #5
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f7ff fe5d 	bl	800f4ae <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7f8:	e013      	b.n	800f822 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f806:	7af9      	ldrb	r1, [r7, #11]
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f000 f80e 	bl	800f82a <SCSI_CheckAddressRange>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	da02      	bge.n	800f81a <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800f814:	f04f 33ff 	mov.w	r3, #4294967295
 800f818:	e003      	b.n	800f822 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	2200      	movs	r2, #0
 800f81e:	815a      	strh	r2, [r3, #10]
  return 0;
 800f820:	2300      	movs	r3, #0
}
 800f822:	4618      	mov	r0, r3
 800f824:	3718      	adds	r7, #24
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b086      	sub	sp, #24
 800f82e:	af00      	add	r7, sp, #0
 800f830:	60f8      	str	r0, [r7, #12]
 800f832:	607a      	str	r2, [r7, #4]
 800f834:	603b      	str	r3, [r7, #0]
 800f836:	460b      	mov	r3, r1
 800f838:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f840:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	441a      	add	r2, r3
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f84e:	429a      	cmp	r2, r3
 800f850:	d908      	bls.n	800f864 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f852:	7af9      	ldrb	r1, [r7, #11]
 800f854:	2321      	movs	r3, #33	; 0x21
 800f856:	2205      	movs	r2, #5
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	f7ff fe28 	bl	800f4ae <SCSI_SenseCode>
    return -1;
 800f85e:	f04f 33ff 	mov.w	r3, #4294967295
 800f862:	e000      	b.n	800f866 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	3718      	adds	r7, #24
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800f86e:	b590      	push	{r4, r7, lr}
 800f870:	b085      	sub	sp, #20
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
 800f876:	460b      	mov	r3, r1
 800f878:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f880:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800f88e:	fb02 f303 	mul.w	r3, r2, r3
 800f892:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f89a:	bf28      	it	cs
 800f89c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f8a0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8a8:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f8bc:	4618      	mov	r0, r3
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	78f8      	ldrb	r0, [r7, #3]
 800f8c8:	47a0      	blx	r4
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	da08      	bge.n	800f8e2 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f8d0:	78f9      	ldrb	r1, [r7, #3]
 800f8d2:	2311      	movs	r3, #17
 800f8d4:	2204      	movs	r2, #4
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f7ff fde9 	bl	800f4ae <SCSI_SenseCode>
    return -1;
 800f8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f8e0:	e035      	b.n	800f94e <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f103 020c 	add.w	r2, r3, #12
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	2181      	movs	r1, #129	; 0x81
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f007 f86f 	bl	80169d2 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f900:	4619      	mov	r1, r3
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	fbb3 f3f1 	udiv	r3, r3, r1
 800f908:	441a      	add	r2, r3
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f91c:	4619      	mov	r1, r3
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	fbb3 f3f1 	udiv	r3, r3, r1
 800f924:	1ad2      	subs	r2, r2, r3
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	1ad2      	subs	r2, r2, r3
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f942:	2b00      	cmp	r3, #0
 800f944:	d102      	bne.n	800f94c <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2203      	movs	r2, #3
 800f94a:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800f94c:	2300      	movs	r3, #0
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3714      	adds	r7, #20
 800f952:	46bd      	mov	sp, r7
 800f954:	bd90      	pop	{r4, r7, pc}

0800f956 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800f956:	b590      	push	{r4, r7, lr}
 800f958:	b085      	sub	sp, #20
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
 800f95e:	460b      	mov	r3, r1
 800f960:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f968:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800f976:	fb02 f303 	mul.w	r3, r2, r3
 800f97a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f982:	bf28      	it	cs
 800f984:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f988:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f990:	695c      	ldr	r4, [r3, #20]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f103 010c 	add.w	r1, r3, #12
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	78f8      	ldrb	r0, [r7, #3]
 800f9b0:	47a0      	blx	r4
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	da08      	bge.n	800f9ca <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f9b8:	78f9      	ldrb	r1, [r7, #3]
 800f9ba:	2303      	movs	r3, #3
 800f9bc:	2204      	movs	r2, #4
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f7ff fd75 	bl	800f4ae <SCSI_SenseCode>

    return -1;
 800f9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9c8:	e045      	b.n	800fa56 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9de:	441a      	add	r2, r3
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9fa:	1ad2      	subs	r2, r2, r3
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	1ad2      	subs	r2, r2, r3
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d104      	bne.n	800fa26 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800fa1c:	2100      	movs	r1, #0
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f7ff f97a 	bl	800ed18 <MSC_BOT_SendCSW>
 800fa24:	e016      	b.n	800fa54 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fa32:	fb02 f303 	mul.w	r3, r2, r3
 800fa36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa3a:	bf28      	it	cs
 800fa3c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fa40:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f103 020c 	add.w	r2, r3, #12
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	2101      	movs	r1, #1
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f006 ffe2 	bl	8016a18 <USBD_LL_PrepareReceive>
  }

  return 0;
 800fa54:	2300      	movs	r3, #0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3714      	adds	r7, #20
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd90      	pop	{r4, r7, pc}

0800fa5e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b084      	sub	sp, #16
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	60f8      	str	r0, [r7, #12]
 800fa66:	60b9      	str	r1, [r7, #8]
 800fa68:	4613      	mov	r3, r2
 800fa6a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d101      	bne.n	800fa76 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fa72:	2302      	movs	r3, #2
 800fa74:	e01a      	b.n	800faac <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d003      	beq.n	800fa88 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2200      	movs	r2, #0
 800fa84:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	68ba      	ldr	r2, [r7, #8]
 800fa92:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	79fa      	ldrb	r2, [r7, #7]
 800faa2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800faa4:	68f8      	ldr	r0, [r7, #12]
 800faa6:	f006 fe21 	bl	80166ec <USBD_LL_Init>

  return USBD_OK;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	3710      	adds	r7, #16
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800fabe:	2300      	movs	r3, #0
 800fac0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d006      	beq.n	800fad6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	683a      	ldr	r2, [r7, #0]
 800facc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800fad0:	2300      	movs	r3, #0
 800fad2:	73fb      	strb	r3, [r7, #15]
 800fad4:	e001      	b.n	800fada <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800fad6:	2302      	movs	r3, #2
 800fad8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fada:	7bfb      	ldrb	r3, [r7, #15]
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3714      	adds	r7, #20
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f006 fe4b 	bl	801678c <USBD_LL_Start>

  return USBD_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	6852      	ldr	r2, [r2, #4]
 800fb14:	b2d2      	uxtb	r2, r2
 800fb16:	4611      	mov	r1, r2
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f006 fe50 	bl	80167c2 <USBD_LL_Stop>

  return USBD_OK;
 800fb22:	2300      	movs	r3, #0
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr

0800fb42 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b084      	sub	sp, #16
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fb4e:	2302      	movs	r3, #2
 800fb50:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00c      	beq.n	800fb76 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	78fa      	ldrb	r2, [r7, #3]
 800fb66:	4611      	mov	r1, r2
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	4798      	blx	r3
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d101      	bne.n	800fb76 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800fb72:	2300      	movs	r3, #0
 800fb74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3710      	adds	r7, #16
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	78fa      	ldrb	r2, [r7, #3]
 800fb96:	4611      	mov	r1, r2
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	4798      	blx	r3

  return USBD_OK;
 800fb9c:	2300      	movs	r3, #0
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b082      	sub	sp, #8
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
 800fbae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fbb6:	6839      	ldr	r1, [r7, #0]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f000 ff09 	bl	80109d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800fbcc:	461a      	mov	r2, r3
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800fbda:	f003 031f 	and.w	r3, r3, #31
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d00c      	beq.n	800fbfc <USBD_LL_SetupStage+0x56>
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	d302      	bcc.n	800fbec <USBD_LL_SetupStage+0x46>
 800fbe6:	2b02      	cmp	r3, #2
 800fbe8:	d010      	beq.n	800fc0c <USBD_LL_SetupStage+0x66>
 800fbea:	e017      	b.n	800fc1c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 fa09 	bl	801000c <USBD_StdDevReq>
      break;
 800fbfa:	e01a      	b.n	800fc32 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fc02:	4619      	mov	r1, r3
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f000 fa6b 	bl	80100e0 <USBD_StdItfReq>
      break;
 800fc0a:	e012      	b.n	800fc32 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fc12:	4619      	mov	r1, r3
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 faa9 	bl	801016c <USBD_StdEPReq>
      break;
 800fc1a:	e00a      	b.n	800fc32 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800fc22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	4619      	mov	r1, r3
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f006 fe48 	bl	80168c0 <USBD_LL_StallEP>
      break;
 800fc30:	bf00      	nop
  }

  return USBD_OK;
 800fc32:	2300      	movs	r3, #0
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	460b      	mov	r3, r1
 800fc46:	607a      	str	r2, [r7, #4]
 800fc48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800fc4a:	7afb      	ldrb	r3, [r7, #11]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d14b      	bne.n	800fce8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fc56:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fc5e:	2b03      	cmp	r3, #3
 800fc60:	d134      	bne.n	800fccc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	68da      	ldr	r2, [r3, #12]
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	691b      	ldr	r3, [r3, #16]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d919      	bls.n	800fca2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	68da      	ldr	r2, [r3, #12]
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	691b      	ldr	r3, [r3, #16]
 800fc76:	1ad2      	subs	r2, r2, r3
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	68da      	ldr	r2, [r3, #12]
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d203      	bcs.n	800fc90 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	e002      	b.n	800fc96 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	461a      	mov	r2, r3
 800fc98:	6879      	ldr	r1, [r7, #4]
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f000 ff6e 	bl	8010b7c <USBD_CtlContinueRx>
 800fca0:	e038      	b.n	800fd14 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00a      	beq.n	800fcc4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800fcb4:	2b03      	cmp	r3, #3
 800fcb6:	d105      	bne.n	800fcc4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcbe:	691b      	ldr	r3, [r3, #16]
 800fcc0:	68f8      	ldr	r0, [r7, #12]
 800fcc2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800fcc4:	68f8      	ldr	r0, [r7, #12]
 800fcc6:	f000 ff6b 	bl	8010ba0 <USBD_CtlSendStatus>
 800fcca:	e023      	b.n	800fd14 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fcd2:	2b05      	cmp	r3, #5
 800fcd4:	d11e      	bne.n	800fd14 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800fcde:	2100      	movs	r1, #0
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	f006 fded 	bl	80168c0 <USBD_LL_StallEP>
 800fce6:	e015      	b.n	800fd14 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcee:	699b      	ldr	r3, [r3, #24]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00d      	beq.n	800fd10 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800fcfa:	2b03      	cmp	r3, #3
 800fcfc:	d108      	bne.n	800fd10 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd04:	699b      	ldr	r3, [r3, #24]
 800fd06:	7afa      	ldrb	r2, [r7, #11]
 800fd08:	4611      	mov	r1, r2
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	4798      	blx	r3
 800fd0e:	e001      	b.n	800fd14 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fd10:	2302      	movs	r3, #2
 800fd12:	e000      	b.n	800fd16 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800fd14:	2300      	movs	r3, #0
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3718      	adds	r7, #24
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b086      	sub	sp, #24
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	60f8      	str	r0, [r7, #12]
 800fd26:	460b      	mov	r3, r1
 800fd28:	607a      	str	r2, [r7, #4]
 800fd2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800fd2c:	7afb      	ldrb	r3, [r7, #11]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d17f      	bne.n	800fe32 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	3314      	adds	r3, #20
 800fd36:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fd3e:	2b02      	cmp	r3, #2
 800fd40:	d15c      	bne.n	800fdfc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	68da      	ldr	r2, [r3, #12]
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	691b      	ldr	r3, [r3, #16]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d915      	bls.n	800fd7a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	68da      	ldr	r2, [r3, #12]
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	691b      	ldr	r3, [r3, #16]
 800fd56:	1ad2      	subs	r2, r2, r3
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	461a      	mov	r2, r3
 800fd64:	6879      	ldr	r1, [r7, #4]
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f000 fef6 	bl	8010b58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	2200      	movs	r2, #0
 800fd70:	2100      	movs	r1, #0
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f006 fe50 	bl	8016a18 <USBD_LL_PrepareReceive>
 800fd78:	e04e      	b.n	800fe18 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	6912      	ldr	r2, [r2, #16]
 800fd82:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd86:	fb02 f201 	mul.w	r2, r2, r1
 800fd8a:	1a9b      	subs	r3, r3, r2
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d11c      	bne.n	800fdca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	689a      	ldr	r2, [r3, #8]
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d316      	bcc.n	800fdca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	689a      	ldr	r2, [r3, #8]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d20f      	bcs.n	800fdca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fdaa:	2200      	movs	r2, #0
 800fdac:	2100      	movs	r1, #0
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f000 fed2 	bl	8010b58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f006 fe28 	bl	8016a18 <USBD_LL_PrepareReceive>
 800fdc8:	e026      	b.n	800fe18 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d00a      	beq.n	800fdec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fddc:	2b03      	cmp	r3, #3
 800fdde:	d105      	bne.n	800fdec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800fdec:	2180      	movs	r1, #128	; 0x80
 800fdee:	68f8      	ldr	r0, [r7, #12]
 800fdf0:	f006 fd66 	bl	80168c0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f000 fee6 	bl	8010bc6 <USBD_CtlReceiveStatus>
 800fdfa:	e00d      	b.n	800fe18 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe02:	2b04      	cmp	r3, #4
 800fe04:	d004      	beq.n	800fe10 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d103      	bne.n	800fe18 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800fe10:	2180      	movs	r1, #128	; 0x80
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f006 fd54 	bl	80168c0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	d11d      	bne.n	800fe5e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800fe22:	68f8      	ldr	r0, [r7, #12]
 800fe24:	f7ff fe82 	bl	800fb2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fe30:	e015      	b.n	800fe5e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe38:	695b      	ldr	r3, [r3, #20]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d00d      	beq.n	800fe5a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800fe44:	2b03      	cmp	r3, #3
 800fe46:	d108      	bne.n	800fe5a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe4e:	695b      	ldr	r3, [r3, #20]
 800fe50:	7afa      	ldrb	r2, [r7, #11]
 800fe52:	4611      	mov	r1, r2
 800fe54:	68f8      	ldr	r0, [r7, #12]
 800fe56:	4798      	blx	r3
 800fe58:	e001      	b.n	800fe5e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fe5a:	2302      	movs	r3, #2
 800fe5c:	e000      	b.n	800fe60 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800fe5e:	2300      	movs	r3, #0
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3718      	adds	r7, #24
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe70:	2340      	movs	r3, #64	; 0x40
 800fe72:	2200      	movs	r2, #0
 800fe74:	2100      	movs	r1, #0
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f006 fcbe 	bl	80167f8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2240      	movs	r2, #64	; 0x40
 800fe88:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe8c:	2340      	movs	r3, #64	; 0x40
 800fe8e:	2200      	movs	r2, #0
 800fe90:	2180      	movs	r1, #128	; 0x80
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f006 fcb0 	bl	80167f8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2240      	movs	r2, #64	; 0x40
 800fea2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2201      	movs	r2, #1
 800fea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2200      	movs	r2, #0
 800febe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d009      	beq.n	800fee0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	6852      	ldr	r2, [r2, #4]
 800fed8:	b2d2      	uxtb	r2, r2
 800feda:	4611      	mov	r1, r2
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	4798      	blx	r3
  }

  return USBD_OK;
 800fee0:	2300      	movs	r3, #0
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800feea:	b480      	push	{r7}
 800feec:	b083      	sub	sp, #12
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
 800fef2:	460b      	mov	r3, r1
 800fef4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	78fa      	ldrb	r2, [r7, #3]
 800fefa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	370c      	adds	r7, #12
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr

0800ff0a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ff0a:	b480      	push	{r7}
 800ff0c:	b083      	sub	sp, #12
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2204      	movs	r2, #4
 800ff22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ff26:	2300      	movs	r3, #0
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff42:	2b04      	cmp	r3, #4
 800ff44:	d105      	bne.n	800ff52 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ff52:	2300      	movs	r3, #0
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff6e:	2b03      	cmp	r3, #3
 800ff70:	d10b      	bne.n	800ff8a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff78:	69db      	ldr	r3, [r3, #28]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d005      	beq.n	800ff8a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff84:	69db      	ldr	r3, [r3, #28]
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3708      	adds	r7, #8
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ffa0:	2300      	movs	r3, #0
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	370c      	adds	r7, #12
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr

0800ffae <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ffae:	b480      	push	{r7}
 800ffb0:	b083      	sub	sp, #12
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	370c      	adds	r7, #12
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ffd0:	2300      	movs	r3, #0
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	370c      	adds	r7, #12
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr

0800ffde <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ffde:	b580      	push	{r7, lr}
 800ffe0:	b082      	sub	sp, #8
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	6852      	ldr	r2, [r2, #4]
 800fffa:	b2d2      	uxtb	r2, r2
 800fffc:	4611      	mov	r1, r2
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	4798      	blx	r3

  return USBD_OK;
 8010002:	2300      	movs	r3, #0
}
 8010004:	4618      	mov	r0, r3
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010016:	2300      	movs	r3, #0
 8010018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010022:	2b20      	cmp	r3, #32
 8010024:	d004      	beq.n	8010030 <USBD_StdDevReq+0x24>
 8010026:	2b40      	cmp	r3, #64	; 0x40
 8010028:	d002      	beq.n	8010030 <USBD_StdDevReq+0x24>
 801002a:	2b00      	cmp	r3, #0
 801002c:	d008      	beq.n	8010040 <USBD_StdDevReq+0x34>
 801002e:	e04c      	b.n	80100ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	6839      	ldr	r1, [r7, #0]
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	4798      	blx	r3
      break;
 801003e:	e049      	b.n	80100d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	785b      	ldrb	r3, [r3, #1]
 8010044:	2b09      	cmp	r3, #9
 8010046:	d83a      	bhi.n	80100be <USBD_StdDevReq+0xb2>
 8010048:	a201      	add	r2, pc, #4	; (adr r2, 8010050 <USBD_StdDevReq+0x44>)
 801004a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801004e:	bf00      	nop
 8010050:	080100a1 	.word	0x080100a1
 8010054:	080100b5 	.word	0x080100b5
 8010058:	080100bf 	.word	0x080100bf
 801005c:	080100ab 	.word	0x080100ab
 8010060:	080100bf 	.word	0x080100bf
 8010064:	08010083 	.word	0x08010083
 8010068:	08010079 	.word	0x08010079
 801006c:	080100bf 	.word	0x080100bf
 8010070:	08010097 	.word	0x08010097
 8010074:	0801008d 	.word	0x0801008d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010078:	6839      	ldr	r1, [r7, #0]
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 f9d4 	bl	8010428 <USBD_GetDescriptor>
          break;
 8010080:	e022      	b.n	80100c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010082:	6839      	ldr	r1, [r7, #0]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 fb37 	bl	80106f8 <USBD_SetAddress>
          break;
 801008a:	e01d      	b.n	80100c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801008c:	6839      	ldr	r1, [r7, #0]
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f000 fb74 	bl	801077c <USBD_SetConfig>
          break;
 8010094:	e018      	b.n	80100c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010096:	6839      	ldr	r1, [r7, #0]
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f000 fbfd 	bl	8010898 <USBD_GetConfig>
          break;
 801009e:	e013      	b.n	80100c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80100a0:	6839      	ldr	r1, [r7, #0]
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 fc2c 	bl	8010900 <USBD_GetStatus>
          break;
 80100a8:	e00e      	b.n	80100c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80100aa:	6839      	ldr	r1, [r7, #0]
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f000 fc5a 	bl	8010966 <USBD_SetFeature>
          break;
 80100b2:	e009      	b.n	80100c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80100b4:	6839      	ldr	r1, [r7, #0]
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 fc69 	bl	801098e <USBD_ClrFeature>
          break;
 80100bc:	e004      	b.n	80100c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80100be:	6839      	ldr	r1, [r7, #0]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 fcc2 	bl	8010a4a <USBD_CtlError>
          break;
 80100c6:	bf00      	nop
      }
      break;
 80100c8:	e004      	b.n	80100d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 fcbc 	bl	8010a4a <USBD_CtlError>
      break;
 80100d2:	bf00      	nop
  }

  return ret;
 80100d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop

080100e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80100ea:	2300      	movs	r3, #0
 80100ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80100f6:	2b20      	cmp	r3, #32
 80100f8:	d003      	beq.n	8010102 <USBD_StdItfReq+0x22>
 80100fa:	2b40      	cmp	r3, #64	; 0x40
 80100fc:	d001      	beq.n	8010102 <USBD_StdItfReq+0x22>
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d12a      	bne.n	8010158 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010108:	3b01      	subs	r3, #1
 801010a:	2b02      	cmp	r3, #2
 801010c:	d81d      	bhi.n	801014a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	889b      	ldrh	r3, [r3, #4]
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b01      	cmp	r3, #1
 8010116:	d813      	bhi.n	8010140 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	6839      	ldr	r1, [r7, #0]
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	4798      	blx	r3
 8010126:	4603      	mov	r3, r0
 8010128:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	88db      	ldrh	r3, [r3, #6]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d110      	bne.n	8010154 <USBD_StdItfReq+0x74>
 8010132:	7bfb      	ldrb	r3, [r7, #15]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10d      	bne.n	8010154 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 fd31 	bl	8010ba0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801013e:	e009      	b.n	8010154 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8010140:	6839      	ldr	r1, [r7, #0]
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f000 fc81 	bl	8010a4a <USBD_CtlError>
          break;
 8010148:	e004      	b.n	8010154 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801014a:	6839      	ldr	r1, [r7, #0]
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f000 fc7c 	bl	8010a4a <USBD_CtlError>
          break;
 8010152:	e000      	b.n	8010156 <USBD_StdItfReq+0x76>
          break;
 8010154:	bf00      	nop
      }
      break;
 8010156:	e004      	b.n	8010162 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8010158:	6839      	ldr	r1, [r7, #0]
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f000 fc75 	bl	8010a4a <USBD_CtlError>
      break;
 8010160:	bf00      	nop
  }

  return USBD_OK;
 8010162:	2300      	movs	r3, #0
}
 8010164:	4618      	mov	r0, r3
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	889b      	ldrh	r3, [r3, #4]
 801017e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010188:	2b20      	cmp	r3, #32
 801018a:	d004      	beq.n	8010196 <USBD_StdEPReq+0x2a>
 801018c:	2b40      	cmp	r3, #64	; 0x40
 801018e:	d002      	beq.n	8010196 <USBD_StdEPReq+0x2a>
 8010190:	2b00      	cmp	r3, #0
 8010192:	d008      	beq.n	80101a6 <USBD_StdEPReq+0x3a>
 8010194:	e13d      	b.n	8010412 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801019c:	689b      	ldr	r3, [r3, #8]
 801019e:	6839      	ldr	r1, [r7, #0]
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	4798      	blx	r3
      break;
 80101a4:	e13a      	b.n	801041c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80101ae:	2b20      	cmp	r3, #32
 80101b0:	d10a      	bne.n	80101c8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101b8:	689b      	ldr	r3, [r3, #8]
 80101ba:	6839      	ldr	r1, [r7, #0]
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	4798      	blx	r3
 80101c0:	4603      	mov	r3, r0
 80101c2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80101c4:	7bfb      	ldrb	r3, [r7, #15]
 80101c6:	e12a      	b.n	801041e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	785b      	ldrb	r3, [r3, #1]
 80101cc:	2b01      	cmp	r3, #1
 80101ce:	d03e      	beq.n	801024e <USBD_StdEPReq+0xe2>
 80101d0:	2b03      	cmp	r3, #3
 80101d2:	d002      	beq.n	80101da <USBD_StdEPReq+0x6e>
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d070      	beq.n	80102ba <USBD_StdEPReq+0x14e>
 80101d8:	e115      	b.n	8010406 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101e0:	2b02      	cmp	r3, #2
 80101e2:	d002      	beq.n	80101ea <USBD_StdEPReq+0x7e>
 80101e4:	2b03      	cmp	r3, #3
 80101e6:	d015      	beq.n	8010214 <USBD_StdEPReq+0xa8>
 80101e8:	e02b      	b.n	8010242 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80101ea:	7bbb      	ldrb	r3, [r7, #14]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d00c      	beq.n	801020a <USBD_StdEPReq+0x9e>
 80101f0:	7bbb      	ldrb	r3, [r7, #14]
 80101f2:	2b80      	cmp	r3, #128	; 0x80
 80101f4:	d009      	beq.n	801020a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80101f6:	7bbb      	ldrb	r3, [r7, #14]
 80101f8:	4619      	mov	r1, r3
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f006 fb60 	bl	80168c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8010200:	2180      	movs	r1, #128	; 0x80
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f006 fb5c 	bl	80168c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010208:	e020      	b.n	801024c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 801020a:	6839      	ldr	r1, [r7, #0]
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f000 fc1c 	bl	8010a4a <USBD_CtlError>
              break;
 8010212:	e01b      	b.n	801024c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	885b      	ldrh	r3, [r3, #2]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d10e      	bne.n	801023a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 801021c:	7bbb      	ldrb	r3, [r7, #14]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d00b      	beq.n	801023a <USBD_StdEPReq+0xce>
 8010222:	7bbb      	ldrb	r3, [r7, #14]
 8010224:	2b80      	cmp	r3, #128	; 0x80
 8010226:	d008      	beq.n	801023a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	88db      	ldrh	r3, [r3, #6]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d104      	bne.n	801023a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8010230:	7bbb      	ldrb	r3, [r7, #14]
 8010232:	4619      	mov	r1, r3
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f006 fb43 	bl	80168c0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f000 fcb0 	bl	8010ba0 <USBD_CtlSendStatus>

              break;
 8010240:	e004      	b.n	801024c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8010242:	6839      	ldr	r1, [r7, #0]
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 fc00 	bl	8010a4a <USBD_CtlError>
              break;
 801024a:	bf00      	nop
          }
          break;
 801024c:	e0e0      	b.n	8010410 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010254:	2b02      	cmp	r3, #2
 8010256:	d002      	beq.n	801025e <USBD_StdEPReq+0xf2>
 8010258:	2b03      	cmp	r3, #3
 801025a:	d015      	beq.n	8010288 <USBD_StdEPReq+0x11c>
 801025c:	e026      	b.n	80102ac <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801025e:	7bbb      	ldrb	r3, [r7, #14]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d00c      	beq.n	801027e <USBD_StdEPReq+0x112>
 8010264:	7bbb      	ldrb	r3, [r7, #14]
 8010266:	2b80      	cmp	r3, #128	; 0x80
 8010268:	d009      	beq.n	801027e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801026a:	7bbb      	ldrb	r3, [r7, #14]
 801026c:	4619      	mov	r1, r3
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f006 fb26 	bl	80168c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8010274:	2180      	movs	r1, #128	; 0x80
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f006 fb22 	bl	80168c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801027c:	e01c      	b.n	80102b8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801027e:	6839      	ldr	r1, [r7, #0]
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f000 fbe2 	bl	8010a4a <USBD_CtlError>
              break;
 8010286:	e017      	b.n	80102b8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	885b      	ldrh	r3, [r3, #2]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d112      	bne.n	80102b6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010290:	7bbb      	ldrb	r3, [r7, #14]
 8010292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010296:	2b00      	cmp	r3, #0
 8010298:	d004      	beq.n	80102a4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801029a:	7bbb      	ldrb	r3, [r7, #14]
 801029c:	4619      	mov	r1, r3
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f006 fb2d 	bl	80168fe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f000 fc7b 	bl	8010ba0 <USBD_CtlSendStatus>
              }
              break;
 80102aa:	e004      	b.n	80102b6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80102ac:	6839      	ldr	r1, [r7, #0]
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 fbcb 	bl	8010a4a <USBD_CtlError>
              break;
 80102b4:	e000      	b.n	80102b8 <USBD_StdEPReq+0x14c>
              break;
 80102b6:	bf00      	nop
          }
          break;
 80102b8:	e0aa      	b.n	8010410 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	d002      	beq.n	80102ca <USBD_StdEPReq+0x15e>
 80102c4:	2b03      	cmp	r3, #3
 80102c6:	d032      	beq.n	801032e <USBD_StdEPReq+0x1c2>
 80102c8:	e097      	b.n	80103fa <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80102ca:	7bbb      	ldrb	r3, [r7, #14]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d007      	beq.n	80102e0 <USBD_StdEPReq+0x174>
 80102d0:	7bbb      	ldrb	r3, [r7, #14]
 80102d2:	2b80      	cmp	r3, #128	; 0x80
 80102d4:	d004      	beq.n	80102e0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80102d6:	6839      	ldr	r1, [r7, #0]
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f000 fbb6 	bl	8010a4a <USBD_CtlError>
                break;
 80102de:	e091      	b.n	8010404 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80102e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	da0b      	bge.n	8010300 <USBD_StdEPReq+0x194>
 80102e8:	7bbb      	ldrb	r3, [r7, #14]
 80102ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80102ee:	4613      	mov	r3, r2
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	4413      	add	r3, r2
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	3310      	adds	r3, #16
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	4413      	add	r3, r2
 80102fc:	3304      	adds	r3, #4
 80102fe:	e00b      	b.n	8010318 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010300:	7bbb      	ldrb	r3, [r7, #14]
 8010302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010306:	4613      	mov	r3, r2
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	4413      	add	r3, r2
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	4413      	add	r3, r2
 8010316:	3304      	adds	r3, #4
 8010318:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	2200      	movs	r2, #0
 801031e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	2202      	movs	r2, #2
 8010324:	4619      	mov	r1, r3
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f000 fbfa 	bl	8010b20 <USBD_CtlSendData>
              break;
 801032c:	e06a      	b.n	8010404 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801032e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010332:	2b00      	cmp	r3, #0
 8010334:	da11      	bge.n	801035a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010336:	7bbb      	ldrb	r3, [r7, #14]
 8010338:	f003 020f 	and.w	r2, r3, #15
 801033c:	6879      	ldr	r1, [r7, #4]
 801033e:	4613      	mov	r3, r2
 8010340:	009b      	lsls	r3, r3, #2
 8010342:	4413      	add	r3, r2
 8010344:	009b      	lsls	r3, r3, #2
 8010346:	440b      	add	r3, r1
 8010348:	3318      	adds	r3, #24
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d117      	bne.n	8010380 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8010350:	6839      	ldr	r1, [r7, #0]
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 fb79 	bl	8010a4a <USBD_CtlError>
                  break;
 8010358:	e054      	b.n	8010404 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801035a:	7bbb      	ldrb	r3, [r7, #14]
 801035c:	f003 020f 	and.w	r2, r3, #15
 8010360:	6879      	ldr	r1, [r7, #4]
 8010362:	4613      	mov	r3, r2
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	4413      	add	r3, r2
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	440b      	add	r3, r1
 801036c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d104      	bne.n	8010380 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8010376:	6839      	ldr	r1, [r7, #0]
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 fb66 	bl	8010a4a <USBD_CtlError>
                  break;
 801037e:	e041      	b.n	8010404 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010384:	2b00      	cmp	r3, #0
 8010386:	da0b      	bge.n	80103a0 <USBD_StdEPReq+0x234>
 8010388:	7bbb      	ldrb	r3, [r7, #14]
 801038a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801038e:	4613      	mov	r3, r2
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	4413      	add	r3, r2
 8010394:	009b      	lsls	r3, r3, #2
 8010396:	3310      	adds	r3, #16
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	4413      	add	r3, r2
 801039c:	3304      	adds	r3, #4
 801039e:	e00b      	b.n	80103b8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80103a0:	7bbb      	ldrb	r3, [r7, #14]
 80103a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103a6:	4613      	mov	r3, r2
 80103a8:	009b      	lsls	r3, r3, #2
 80103aa:	4413      	add	r3, r2
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	4413      	add	r3, r2
 80103b6:	3304      	adds	r3, #4
 80103b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80103ba:	7bbb      	ldrb	r3, [r7, #14]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d002      	beq.n	80103c6 <USBD_StdEPReq+0x25a>
 80103c0:	7bbb      	ldrb	r3, [r7, #14]
 80103c2:	2b80      	cmp	r3, #128	; 0x80
 80103c4:	d103      	bne.n	80103ce <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	2200      	movs	r2, #0
 80103ca:	601a      	str	r2, [r3, #0]
 80103cc:	e00e      	b.n	80103ec <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80103ce:	7bbb      	ldrb	r3, [r7, #14]
 80103d0:	4619      	mov	r1, r3
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f006 fab2 	bl	801693c <USBD_LL_IsStallEP>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d003      	beq.n	80103e6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	2201      	movs	r2, #1
 80103e2:	601a      	str	r2, [r3, #0]
 80103e4:	e002      	b.n	80103ec <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	2200      	movs	r2, #0
 80103ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	2202      	movs	r2, #2
 80103f0:	4619      	mov	r1, r3
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 fb94 	bl	8010b20 <USBD_CtlSendData>
              break;
 80103f8:	e004      	b.n	8010404 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80103fa:	6839      	ldr	r1, [r7, #0]
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f000 fb24 	bl	8010a4a <USBD_CtlError>
              break;
 8010402:	bf00      	nop
          }
          break;
 8010404:	e004      	b.n	8010410 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8010406:	6839      	ldr	r1, [r7, #0]
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f000 fb1e 	bl	8010a4a <USBD_CtlError>
          break;
 801040e:	bf00      	nop
      }
      break;
 8010410:	e004      	b.n	801041c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8010412:	6839      	ldr	r1, [r7, #0]
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f000 fb18 	bl	8010a4a <USBD_CtlError>
      break;
 801041a:	bf00      	nop
  }

  return ret;
 801041c:	7bfb      	ldrb	r3, [r7, #15]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
	...

08010428 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010432:	2300      	movs	r3, #0
 8010434:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010436:	2300      	movs	r3, #0
 8010438:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801043a:	2300      	movs	r3, #0
 801043c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	885b      	ldrh	r3, [r3, #2]
 8010442:	0a1b      	lsrs	r3, r3, #8
 8010444:	b29b      	uxth	r3, r3
 8010446:	3b01      	subs	r3, #1
 8010448:	2b06      	cmp	r3, #6
 801044a:	f200 8128 	bhi.w	801069e <USBD_GetDescriptor+0x276>
 801044e:	a201      	add	r2, pc, #4	; (adr r2, 8010454 <USBD_GetDescriptor+0x2c>)
 8010450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010454:	08010471 	.word	0x08010471
 8010458:	08010489 	.word	0x08010489
 801045c:	080104c9 	.word	0x080104c9
 8010460:	0801069f 	.word	0x0801069f
 8010464:	0801069f 	.word	0x0801069f
 8010468:	0801063f 	.word	0x0801063f
 801046c:	0801066b 	.word	0x0801066b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	7c12      	ldrb	r2, [r2, #16]
 801047c:	f107 0108 	add.w	r1, r7, #8
 8010480:	4610      	mov	r0, r2
 8010482:	4798      	blx	r3
 8010484:	60f8      	str	r0, [r7, #12]
      break;
 8010486:	e112      	b.n	80106ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	7c1b      	ldrb	r3, [r3, #16]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d10d      	bne.n	80104ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010498:	f107 0208 	add.w	r2, r7, #8
 801049c:	4610      	mov	r0, r2
 801049e:	4798      	blx	r3
 80104a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	3301      	adds	r3, #1
 80104a6:	2202      	movs	r2, #2
 80104a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80104aa:	e100      	b.n	80106ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b4:	f107 0208 	add.w	r2, r7, #8
 80104b8:	4610      	mov	r0, r2
 80104ba:	4798      	blx	r3
 80104bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	3301      	adds	r3, #1
 80104c2:	2202      	movs	r2, #2
 80104c4:	701a      	strb	r2, [r3, #0]
      break;
 80104c6:	e0f2      	b.n	80106ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	885b      	ldrh	r3, [r3, #2]
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	2b05      	cmp	r3, #5
 80104d0:	f200 80ac 	bhi.w	801062c <USBD_GetDescriptor+0x204>
 80104d4:	a201      	add	r2, pc, #4	; (adr r2, 80104dc <USBD_GetDescriptor+0xb4>)
 80104d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104da:	bf00      	nop
 80104dc:	080104f5 	.word	0x080104f5
 80104e0:	08010529 	.word	0x08010529
 80104e4:	0801055d 	.word	0x0801055d
 80104e8:	08010591 	.word	0x08010591
 80104ec:	080105c5 	.word	0x080105c5
 80104f0:	080105f9 	.word	0x080105f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d00b      	beq.n	8010518 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	687a      	ldr	r2, [r7, #4]
 801050a:	7c12      	ldrb	r2, [r2, #16]
 801050c:	f107 0108 	add.w	r1, r7, #8
 8010510:	4610      	mov	r0, r2
 8010512:	4798      	blx	r3
 8010514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010516:	e091      	b.n	801063c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010518:	6839      	ldr	r1, [r7, #0]
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f000 fa95 	bl	8010a4a <USBD_CtlError>
            err++;
 8010520:	7afb      	ldrb	r3, [r7, #11]
 8010522:	3301      	adds	r3, #1
 8010524:	72fb      	strb	r3, [r7, #11]
          break;
 8010526:	e089      	b.n	801063c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801052e:	689b      	ldr	r3, [r3, #8]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d00b      	beq.n	801054c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	687a      	ldr	r2, [r7, #4]
 801053e:	7c12      	ldrb	r2, [r2, #16]
 8010540:	f107 0108 	add.w	r1, r7, #8
 8010544:	4610      	mov	r0, r2
 8010546:	4798      	blx	r3
 8010548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801054a:	e077      	b.n	801063c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801054c:	6839      	ldr	r1, [r7, #0]
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f000 fa7b 	bl	8010a4a <USBD_CtlError>
            err++;
 8010554:	7afb      	ldrb	r3, [r7, #11]
 8010556:	3301      	adds	r3, #1
 8010558:	72fb      	strb	r3, [r7, #11]
          break;
 801055a:	e06f      	b.n	801063c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d00b      	beq.n	8010580 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	7c12      	ldrb	r2, [r2, #16]
 8010574:	f107 0108 	add.w	r1, r7, #8
 8010578:	4610      	mov	r0, r2
 801057a:	4798      	blx	r3
 801057c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801057e:	e05d      	b.n	801063c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010580:	6839      	ldr	r1, [r7, #0]
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 fa61 	bl	8010a4a <USBD_CtlError>
            err++;
 8010588:	7afb      	ldrb	r3, [r7, #11]
 801058a:	3301      	adds	r3, #1
 801058c:	72fb      	strb	r3, [r7, #11]
          break;
 801058e:	e055      	b.n	801063c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010596:	691b      	ldr	r3, [r3, #16]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d00b      	beq.n	80105b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105a2:	691b      	ldr	r3, [r3, #16]
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	7c12      	ldrb	r2, [r2, #16]
 80105a8:	f107 0108 	add.w	r1, r7, #8
 80105ac:	4610      	mov	r0, r2
 80105ae:	4798      	blx	r3
 80105b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105b2:	e043      	b.n	801063c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80105b4:	6839      	ldr	r1, [r7, #0]
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 fa47 	bl	8010a4a <USBD_CtlError>
            err++;
 80105bc:	7afb      	ldrb	r3, [r7, #11]
 80105be:	3301      	adds	r3, #1
 80105c0:	72fb      	strb	r3, [r7, #11]
          break;
 80105c2:	e03b      	b.n	801063c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105ca:	695b      	ldr	r3, [r3, #20]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00b      	beq.n	80105e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105d6:	695b      	ldr	r3, [r3, #20]
 80105d8:	687a      	ldr	r2, [r7, #4]
 80105da:	7c12      	ldrb	r2, [r2, #16]
 80105dc:	f107 0108 	add.w	r1, r7, #8
 80105e0:	4610      	mov	r0, r2
 80105e2:	4798      	blx	r3
 80105e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105e6:	e029      	b.n	801063c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80105e8:	6839      	ldr	r1, [r7, #0]
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f000 fa2d 	bl	8010a4a <USBD_CtlError>
            err++;
 80105f0:	7afb      	ldrb	r3, [r7, #11]
 80105f2:	3301      	adds	r3, #1
 80105f4:	72fb      	strb	r3, [r7, #11]
          break;
 80105f6:	e021      	b.n	801063c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00b      	beq.n	801061c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801060a:	699b      	ldr	r3, [r3, #24]
 801060c:	687a      	ldr	r2, [r7, #4]
 801060e:	7c12      	ldrb	r2, [r2, #16]
 8010610:	f107 0108 	add.w	r1, r7, #8
 8010614:	4610      	mov	r0, r2
 8010616:	4798      	blx	r3
 8010618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801061a:	e00f      	b.n	801063c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801061c:	6839      	ldr	r1, [r7, #0]
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f000 fa13 	bl	8010a4a <USBD_CtlError>
            err++;
 8010624:	7afb      	ldrb	r3, [r7, #11]
 8010626:	3301      	adds	r3, #1
 8010628:	72fb      	strb	r3, [r7, #11]
          break;
 801062a:	e007      	b.n	801063c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801062c:	6839      	ldr	r1, [r7, #0]
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 fa0b 	bl	8010a4a <USBD_CtlError>
          err++;
 8010634:	7afb      	ldrb	r3, [r7, #11]
 8010636:	3301      	adds	r3, #1
 8010638:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801063a:	e038      	b.n	80106ae <USBD_GetDescriptor+0x286>
 801063c:	e037      	b.n	80106ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	7c1b      	ldrb	r3, [r3, #16]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d109      	bne.n	801065a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801064c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801064e:	f107 0208 	add.w	r2, r7, #8
 8010652:	4610      	mov	r0, r2
 8010654:	4798      	blx	r3
 8010656:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010658:	e029      	b.n	80106ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801065a:	6839      	ldr	r1, [r7, #0]
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 f9f4 	bl	8010a4a <USBD_CtlError>
        err++;
 8010662:	7afb      	ldrb	r3, [r7, #11]
 8010664:	3301      	adds	r3, #1
 8010666:	72fb      	strb	r3, [r7, #11]
      break;
 8010668:	e021      	b.n	80106ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	7c1b      	ldrb	r3, [r3, #16]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d10d      	bne.n	801068e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801067a:	f107 0208 	add.w	r2, r7, #8
 801067e:	4610      	mov	r0, r2
 8010680:	4798      	blx	r3
 8010682:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	3301      	adds	r3, #1
 8010688:	2207      	movs	r2, #7
 801068a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801068c:	e00f      	b.n	80106ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801068e:	6839      	ldr	r1, [r7, #0]
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f000 f9da 	bl	8010a4a <USBD_CtlError>
        err++;
 8010696:	7afb      	ldrb	r3, [r7, #11]
 8010698:	3301      	adds	r3, #1
 801069a:	72fb      	strb	r3, [r7, #11]
      break;
 801069c:	e007      	b.n	80106ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801069e:	6839      	ldr	r1, [r7, #0]
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f000 f9d2 	bl	8010a4a <USBD_CtlError>
      err++;
 80106a6:	7afb      	ldrb	r3, [r7, #11]
 80106a8:	3301      	adds	r3, #1
 80106aa:	72fb      	strb	r3, [r7, #11]
      break;
 80106ac:	bf00      	nop
  }

  if (err != 0U)
 80106ae:	7afb      	ldrb	r3, [r7, #11]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d11c      	bne.n	80106ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80106b4:	893b      	ldrh	r3, [r7, #8]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d011      	beq.n	80106de <USBD_GetDescriptor+0x2b6>
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	88db      	ldrh	r3, [r3, #6]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00d      	beq.n	80106de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	88da      	ldrh	r2, [r3, #6]
 80106c6:	893b      	ldrh	r3, [r7, #8]
 80106c8:	4293      	cmp	r3, r2
 80106ca:	bf28      	it	cs
 80106cc:	4613      	movcs	r3, r2
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80106d2:	893b      	ldrh	r3, [r7, #8]
 80106d4:	461a      	mov	r2, r3
 80106d6:	68f9      	ldr	r1, [r7, #12]
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f000 fa21 	bl	8010b20 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	88db      	ldrh	r3, [r3, #6]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d104      	bne.n	80106f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f000 fa5a 	bl	8010ba0 <USBD_CtlSendStatus>
 80106ec:	e000      	b.n	80106f0 <USBD_GetDescriptor+0x2c8>
    return;
 80106ee:	bf00      	nop
    }
  }
}
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop

080106f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	889b      	ldrh	r3, [r3, #4]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d130      	bne.n	801076c <USBD_SetAddress+0x74>
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	88db      	ldrh	r3, [r3, #6]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d12c      	bne.n	801076c <USBD_SetAddress+0x74>
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	885b      	ldrh	r3, [r3, #2]
 8010716:	2b7f      	cmp	r3, #127	; 0x7f
 8010718:	d828      	bhi.n	801076c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	885b      	ldrh	r3, [r3, #2]
 801071e:	b2db      	uxtb	r3, r3
 8010720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010724:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801072c:	2b03      	cmp	r3, #3
 801072e:	d104      	bne.n	801073a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8010730:	6839      	ldr	r1, [r7, #0]
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 f989 	bl	8010a4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010738:	e01c      	b.n	8010774 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	7bfa      	ldrb	r2, [r7, #15]
 801073e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010742:	7bfb      	ldrb	r3, [r7, #15]
 8010744:	4619      	mov	r1, r3
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f006 f924 	bl	8016994 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f000 fa27 	bl	8010ba0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010752:	7bfb      	ldrb	r3, [r7, #15]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d004      	beq.n	8010762 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2202      	movs	r2, #2
 801075c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010760:	e008      	b.n	8010774 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2201      	movs	r2, #1
 8010766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801076a:	e003      	b.n	8010774 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801076c:	6839      	ldr	r1, [r7, #0]
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 f96b 	bl	8010a4a <USBD_CtlError>
  }
}
 8010774:	bf00      	nop
 8010776:	3710      	adds	r7, #16
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	885b      	ldrh	r3, [r3, #2]
 801078a:	b2da      	uxtb	r2, r3
 801078c:	4b41      	ldr	r3, [pc, #260]	; (8010894 <USBD_SetConfig+0x118>)
 801078e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010790:	4b40      	ldr	r3, [pc, #256]	; (8010894 <USBD_SetConfig+0x118>)
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	2b01      	cmp	r3, #1
 8010796:	d904      	bls.n	80107a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010798:	6839      	ldr	r1, [r7, #0]
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 f955 	bl	8010a4a <USBD_CtlError>
 80107a0:	e075      	b.n	801088e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107a8:	2b02      	cmp	r3, #2
 80107aa:	d002      	beq.n	80107b2 <USBD_SetConfig+0x36>
 80107ac:	2b03      	cmp	r3, #3
 80107ae:	d023      	beq.n	80107f8 <USBD_SetConfig+0x7c>
 80107b0:	e062      	b.n	8010878 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80107b2:	4b38      	ldr	r3, [pc, #224]	; (8010894 <USBD_SetConfig+0x118>)
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d01a      	beq.n	80107f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80107ba:	4b36      	ldr	r3, [pc, #216]	; (8010894 <USBD_SetConfig+0x118>)
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	461a      	mov	r2, r3
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2203      	movs	r2, #3
 80107c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80107cc:	4b31      	ldr	r3, [pc, #196]	; (8010894 <USBD_SetConfig+0x118>)
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	4619      	mov	r1, r3
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f7ff f9b5 	bl	800fb42 <USBD_SetClassConfig>
 80107d8:	4603      	mov	r3, r0
 80107da:	2b02      	cmp	r3, #2
 80107dc:	d104      	bne.n	80107e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80107de:	6839      	ldr	r1, [r7, #0]
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f000 f932 	bl	8010a4a <USBD_CtlError>
            return;
 80107e6:	e052      	b.n	801088e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f000 f9d9 	bl	8010ba0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80107ee:	e04e      	b.n	801088e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f000 f9d5 	bl	8010ba0 <USBD_CtlSendStatus>
        break;
 80107f6:	e04a      	b.n	801088e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80107f8:	4b26      	ldr	r3, [pc, #152]	; (8010894 <USBD_SetConfig+0x118>)
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d112      	bne.n	8010826 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2202      	movs	r2, #2
 8010804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8010808:	4b22      	ldr	r3, [pc, #136]	; (8010894 <USBD_SetConfig+0x118>)
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	461a      	mov	r2, r3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8010812:	4b20      	ldr	r3, [pc, #128]	; (8010894 <USBD_SetConfig+0x118>)
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	4619      	mov	r1, r3
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f7ff f9b1 	bl	800fb80 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f000 f9be 	bl	8010ba0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8010824:	e033      	b.n	801088e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8010826:	4b1b      	ldr	r3, [pc, #108]	; (8010894 <USBD_SetConfig+0x118>)
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	461a      	mov	r2, r3
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	429a      	cmp	r2, r3
 8010832:	d01d      	beq.n	8010870 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	b2db      	uxtb	r3, r3
 801083a:	4619      	mov	r1, r3
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f7ff f99f 	bl	800fb80 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8010842:	4b14      	ldr	r3, [pc, #80]	; (8010894 <USBD_SetConfig+0x118>)
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	461a      	mov	r2, r3
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801084c:	4b11      	ldr	r3, [pc, #68]	; (8010894 <USBD_SetConfig+0x118>)
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	4619      	mov	r1, r3
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f7ff f975 	bl	800fb42 <USBD_SetClassConfig>
 8010858:	4603      	mov	r3, r0
 801085a:	2b02      	cmp	r3, #2
 801085c:	d104      	bne.n	8010868 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801085e:	6839      	ldr	r1, [r7, #0]
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 f8f2 	bl	8010a4a <USBD_CtlError>
            return;
 8010866:	e012      	b.n	801088e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 f999 	bl	8010ba0 <USBD_CtlSendStatus>
        break;
 801086e:	e00e      	b.n	801088e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f000 f995 	bl	8010ba0 <USBD_CtlSendStatus>
        break;
 8010876:	e00a      	b.n	801088e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8010878:	6839      	ldr	r1, [r7, #0]
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	f000 f8e5 	bl	8010a4a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8010880:	4b04      	ldr	r3, [pc, #16]	; (8010894 <USBD_SetConfig+0x118>)
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	4619      	mov	r1, r3
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7ff f97a 	bl	800fb80 <USBD_ClrClassConfig>
        break;
 801088c:	bf00      	nop
    }
  }
}
 801088e:	3708      	adds	r7, #8
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}
 8010894:	24000280 	.word	0x24000280

08010898 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	88db      	ldrh	r3, [r3, #6]
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d004      	beq.n	80108b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80108aa:	6839      	ldr	r1, [r7, #0]
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f000 f8cc 	bl	8010a4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80108b2:	e021      	b.n	80108f8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	db17      	blt.n	80108ee <USBD_GetConfig+0x56>
 80108be:	2b02      	cmp	r3, #2
 80108c0:	dd02      	ble.n	80108c8 <USBD_GetConfig+0x30>
 80108c2:	2b03      	cmp	r3, #3
 80108c4:	d00b      	beq.n	80108de <USBD_GetConfig+0x46>
 80108c6:	e012      	b.n	80108ee <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2200      	movs	r2, #0
 80108cc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	3308      	adds	r3, #8
 80108d2:	2201      	movs	r2, #1
 80108d4:	4619      	mov	r1, r3
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 f922 	bl	8010b20 <USBD_CtlSendData>
        break;
 80108dc:	e00c      	b.n	80108f8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	3304      	adds	r3, #4
 80108e2:	2201      	movs	r2, #1
 80108e4:	4619      	mov	r1, r3
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f000 f91a 	bl	8010b20 <USBD_CtlSendData>
        break;
 80108ec:	e004      	b.n	80108f8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80108ee:	6839      	ldr	r1, [r7, #0]
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f000 f8aa 	bl	8010a4a <USBD_CtlError>
        break;
 80108f6:	bf00      	nop
}
 80108f8:	bf00      	nop
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010910:	3b01      	subs	r3, #1
 8010912:	2b02      	cmp	r3, #2
 8010914:	d81e      	bhi.n	8010954 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	88db      	ldrh	r3, [r3, #6]
 801091a:	2b02      	cmp	r3, #2
 801091c:	d004      	beq.n	8010928 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801091e:	6839      	ldr	r1, [r7, #0]
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 f892 	bl	8010a4a <USBD_CtlError>
        break;
 8010926:	e01a      	b.n	801095e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2201      	movs	r2, #1
 801092c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010934:	2b00      	cmp	r3, #0
 8010936:	d005      	beq.n	8010944 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	f043 0202 	orr.w	r2, r3, #2
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	330c      	adds	r3, #12
 8010948:	2202      	movs	r2, #2
 801094a:	4619      	mov	r1, r3
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f000 f8e7 	bl	8010b20 <USBD_CtlSendData>
      break;
 8010952:	e004      	b.n	801095e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8010954:	6839      	ldr	r1, [r7, #0]
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f000 f877 	bl	8010a4a <USBD_CtlError>
      break;
 801095c:	bf00      	nop
  }
}
 801095e:	bf00      	nop
 8010960:	3708      	adds	r7, #8
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}

08010966 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010966:	b580      	push	{r7, lr}
 8010968:	b082      	sub	sp, #8
 801096a:	af00      	add	r7, sp, #0
 801096c:	6078      	str	r0, [r7, #4]
 801096e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	885b      	ldrh	r3, [r3, #2]
 8010974:	2b01      	cmp	r3, #1
 8010976:	d106      	bne.n	8010986 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2201      	movs	r2, #1
 801097c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 f90d 	bl	8010ba0 <USBD_CtlSendStatus>
  }
}
 8010986:	bf00      	nop
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b082      	sub	sp, #8
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
 8010996:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801099e:	3b01      	subs	r3, #1
 80109a0:	2b02      	cmp	r3, #2
 80109a2:	d80b      	bhi.n	80109bc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	885b      	ldrh	r3, [r3, #2]
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	d10c      	bne.n	80109c6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2200      	movs	r2, #0
 80109b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f000 f8f3 	bl	8010ba0 <USBD_CtlSendStatus>
      }
      break;
 80109ba:	e004      	b.n	80109c6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80109bc:	6839      	ldr	r1, [r7, #0]
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 f843 	bl	8010a4a <USBD_CtlError>
      break;
 80109c4:	e000      	b.n	80109c8 <USBD_ClrFeature+0x3a>
      break;
 80109c6:	bf00      	nop
  }
}
 80109c8:	bf00      	nop
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	781a      	ldrb	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	785a      	ldrb	r2, [r3, #1]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	3302      	adds	r3, #2
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	3303      	adds	r3, #3
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	021b      	lsls	r3, r3, #8
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	4413      	add	r3, r2
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	3304      	adds	r3, #4
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	3305      	adds	r3, #5
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	021b      	lsls	r3, r3, #8
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	4413      	add	r3, r2
 8010a1c:	b29a      	uxth	r2, r3
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	3306      	adds	r3, #6
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	b29a      	uxth	r2, r3
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	3307      	adds	r3, #7
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	021b      	lsls	r3, r3, #8
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	4413      	add	r3, r2
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	80da      	strh	r2, [r3, #6]

}
 8010a3e:	bf00      	nop
 8010a40:	370c      	adds	r7, #12
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr

08010a4a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b082      	sub	sp, #8
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]
 8010a52:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8010a54:	2180      	movs	r1, #128	; 0x80
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f005 ff32 	bl	80168c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8010a5c:	2100      	movs	r1, #0
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f005 ff2e 	bl	80168c0 <USBD_LL_StallEP>
}
 8010a64:	bf00      	nop
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b086      	sub	sp, #24
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d032      	beq.n	8010ae8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 f834 	bl	8010af0 <USBD_GetLen>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	005b      	lsls	r3, r3, #1
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010a96:	7dfb      	ldrb	r3, [r7, #23]
 8010a98:	1c5a      	adds	r2, r3, #1
 8010a9a:	75fa      	strb	r2, [r7, #23]
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	7812      	ldrb	r2, [r2, #0]
 8010aa6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010aa8:	7dfb      	ldrb	r3, [r7, #23]
 8010aaa:	1c5a      	adds	r2, r3, #1
 8010aac:	75fa      	strb	r2, [r7, #23]
 8010aae:	461a      	mov	r2, r3
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	2203      	movs	r2, #3
 8010ab6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010ab8:	e012      	b.n	8010ae0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	1c5a      	adds	r2, r3, #1
 8010abe:	60fa      	str	r2, [r7, #12]
 8010ac0:	7dfa      	ldrb	r2, [r7, #23]
 8010ac2:	1c51      	adds	r1, r2, #1
 8010ac4:	75f9      	strb	r1, [r7, #23]
 8010ac6:	4611      	mov	r1, r2
 8010ac8:	68ba      	ldr	r2, [r7, #8]
 8010aca:	440a      	add	r2, r1
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8010ad0:	7dfb      	ldrb	r3, [r7, #23]
 8010ad2:	1c5a      	adds	r2, r3, #1
 8010ad4:	75fa      	strb	r2, [r7, #23]
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	4413      	add	r3, r2
 8010adc:	2200      	movs	r2, #0
 8010ade:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1e8      	bne.n	8010aba <USBD_GetString+0x4e>
    }
  }
}
 8010ae8:	bf00      	nop
 8010aea:	3718      	adds	r7, #24
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b085      	sub	sp, #20
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010af8:	2300      	movs	r3, #0
 8010afa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8010afc:	e005      	b.n	8010b0a <USBD_GetLen+0x1a>
  {
    len++;
 8010afe:	7bfb      	ldrb	r3, [r7, #15]
 8010b00:	3301      	adds	r3, #1
 8010b02:	73fb      	strb	r3, [r7, #15]
    buf++;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	3301      	adds	r3, #1
 8010b08:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d1f5      	bne.n	8010afe <USBD_GetLen+0xe>
  }

  return len;
 8010b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3714      	adds	r7, #20
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr

08010b20 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2202      	movs	r2, #2
 8010b32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010b36:	88fa      	ldrh	r2, [r7, #6]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010b3c:	88fa      	ldrh	r2, [r7, #6]
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010b42:	88fb      	ldrh	r3, [r7, #6]
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	2100      	movs	r1, #0
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	f005 ff42 	bl	80169d2 <USBD_LL_Transmit>

  return USBD_OK;
 8010b4e:	2300      	movs	r3, #0
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3710      	adds	r7, #16
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	4613      	mov	r3, r2
 8010b64:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010b66:	88fb      	ldrh	r3, [r7, #6]
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f005 ff30 	bl	80169d2 <USBD_LL_Transmit>

  return USBD_OK;
 8010b72:	2300      	movs	r3, #0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3710      	adds	r7, #16
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	60f8      	str	r0, [r7, #12]
 8010b84:	60b9      	str	r1, [r7, #8]
 8010b86:	4613      	mov	r3, r2
 8010b88:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010b8a:	88fb      	ldrh	r3, [r7, #6]
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	2100      	movs	r1, #0
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f005 ff41 	bl	8016a18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010b96:	2300      	movs	r3, #0
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3710      	adds	r7, #16
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2204      	movs	r2, #4
 8010bac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	2100      	movs	r1, #0
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f005 ff0b 	bl	80169d2 <USBD_LL_Transmit>

  return USBD_OK;
 8010bbc:	2300      	movs	r3, #0
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3708      	adds	r7, #8
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b082      	sub	sp, #8
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2205      	movs	r2, #5
 8010bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	2200      	movs	r2, #0
 8010bda:	2100      	movs	r1, #0
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f005 ff1b 	bl	8016a18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010be2:	2300      	movs	r3, #0
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010bf6:	79fb      	ldrb	r3, [r7, #7]
 8010bf8:	4a08      	ldr	r2, [pc, #32]	; (8010c1c <disk_status+0x30>)
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	4413      	add	r3, r2
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	685b      	ldr	r3, [r3, #4]
 8010c02:	79fa      	ldrb	r2, [r7, #7]
 8010c04:	4905      	ldr	r1, [pc, #20]	; (8010c1c <disk_status+0x30>)
 8010c06:	440a      	add	r2, r1
 8010c08:	7b12      	ldrb	r2, [r2, #12]
 8010c0a:	4610      	mov	r0, r2
 8010c0c:	4798      	blx	r3
 8010c0e:	4603      	mov	r3, r0
 8010c10:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3710      	adds	r7, #16
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	240002b0 	.word	0x240002b0

08010c20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	4603      	mov	r3, r0
 8010c28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010c2e:	79fb      	ldrb	r3, [r7, #7]
 8010c30:	4a0d      	ldr	r2, [pc, #52]	; (8010c68 <disk_initialize+0x48>)
 8010c32:	5cd3      	ldrb	r3, [r2, r3]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d111      	bne.n	8010c5c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010c38:	79fb      	ldrb	r3, [r7, #7]
 8010c3a:	4a0b      	ldr	r2, [pc, #44]	; (8010c68 <disk_initialize+0x48>)
 8010c3c:	2101      	movs	r1, #1
 8010c3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010c40:	79fb      	ldrb	r3, [r7, #7]
 8010c42:	4a09      	ldr	r2, [pc, #36]	; (8010c68 <disk_initialize+0x48>)
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	4413      	add	r3, r2
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	79fa      	ldrb	r2, [r7, #7]
 8010c4e:	4906      	ldr	r1, [pc, #24]	; (8010c68 <disk_initialize+0x48>)
 8010c50:	440a      	add	r2, r1
 8010c52:	7b12      	ldrb	r2, [r2, #12]
 8010c54:	4610      	mov	r0, r2
 8010c56:	4798      	blx	r3
 8010c58:	4603      	mov	r3, r0
 8010c5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3710      	adds	r7, #16
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	240002b0 	.word	0x240002b0

08010c6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010c6c:	b590      	push	{r4, r7, lr}
 8010c6e:	b087      	sub	sp, #28
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60b9      	str	r1, [r7, #8]
 8010c74:	607a      	str	r2, [r7, #4]
 8010c76:	603b      	str	r3, [r7, #0]
 8010c78:	4603      	mov	r3, r0
 8010c7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010c7c:	7bfb      	ldrb	r3, [r7, #15]
 8010c7e:	4a0a      	ldr	r2, [pc, #40]	; (8010ca8 <disk_read+0x3c>)
 8010c80:	009b      	lsls	r3, r3, #2
 8010c82:	4413      	add	r3, r2
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	689c      	ldr	r4, [r3, #8]
 8010c88:	7bfb      	ldrb	r3, [r7, #15]
 8010c8a:	4a07      	ldr	r2, [pc, #28]	; (8010ca8 <disk_read+0x3c>)
 8010c8c:	4413      	add	r3, r2
 8010c8e:	7b18      	ldrb	r0, [r3, #12]
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	68b9      	ldr	r1, [r7, #8]
 8010c96:	47a0      	blx	r4
 8010c98:	4603      	mov	r3, r0
 8010c9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8010c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	371c      	adds	r7, #28
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd90      	pop	{r4, r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	240002b0 	.word	0x240002b0

08010cac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010cac:	b590      	push	{r4, r7, lr}
 8010cae:	b087      	sub	sp, #28
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60b9      	str	r1, [r7, #8]
 8010cb4:	607a      	str	r2, [r7, #4]
 8010cb6:	603b      	str	r3, [r7, #0]
 8010cb8:	4603      	mov	r3, r0
 8010cba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010cbc:	7bfb      	ldrb	r3, [r7, #15]
 8010cbe:	4a0a      	ldr	r2, [pc, #40]	; (8010ce8 <disk_write+0x3c>)
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	4413      	add	r3, r2
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	68dc      	ldr	r4, [r3, #12]
 8010cc8:	7bfb      	ldrb	r3, [r7, #15]
 8010cca:	4a07      	ldr	r2, [pc, #28]	; (8010ce8 <disk_write+0x3c>)
 8010ccc:	4413      	add	r3, r2
 8010cce:	7b18      	ldrb	r0, [r3, #12]
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	68b9      	ldr	r1, [r7, #8]
 8010cd6:	47a0      	blx	r4
 8010cd8:	4603      	mov	r3, r0
 8010cda:	75fb      	strb	r3, [r7, #23]
  return res;
 8010cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	371c      	adds	r7, #28
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd90      	pop	{r4, r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	240002b0 	.word	0x240002b0

08010cec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	603a      	str	r2, [r7, #0]
 8010cf6:	71fb      	strb	r3, [r7, #7]
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010cfc:	79fb      	ldrb	r3, [r7, #7]
 8010cfe:	4a09      	ldr	r2, [pc, #36]	; (8010d24 <disk_ioctl+0x38>)
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	4413      	add	r3, r2
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	691b      	ldr	r3, [r3, #16]
 8010d08:	79fa      	ldrb	r2, [r7, #7]
 8010d0a:	4906      	ldr	r1, [pc, #24]	; (8010d24 <disk_ioctl+0x38>)
 8010d0c:	440a      	add	r2, r1
 8010d0e:	7b10      	ldrb	r0, [r2, #12]
 8010d10:	79b9      	ldrb	r1, [r7, #6]
 8010d12:	683a      	ldr	r2, [r7, #0]
 8010d14:	4798      	blx	r3
 8010d16:	4603      	mov	r3, r0
 8010d18:	73fb      	strb	r3, [r7, #15]
  return res;
 8010d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3710      	adds	r7, #16
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	240002b0 	.word	0x240002b0

08010d28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b085      	sub	sp, #20
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	3301      	adds	r3, #1
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010d38:	89fb      	ldrh	r3, [r7, #14]
 8010d3a:	021b      	lsls	r3, r3, #8
 8010d3c:	b21a      	sxth	r2, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	b21b      	sxth	r3, r3
 8010d44:	4313      	orrs	r3, r2
 8010d46:	b21b      	sxth	r3, r3
 8010d48:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010d4a:	89fb      	ldrh	r3, [r7, #14]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3714      	adds	r7, #20
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b085      	sub	sp, #20
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	3303      	adds	r3, #3
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	021b      	lsls	r3, r3, #8
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	3202      	adds	r2, #2
 8010d70:	7812      	ldrb	r2, [r2, #0]
 8010d72:	4313      	orrs	r3, r2
 8010d74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	021b      	lsls	r3, r3, #8
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	3201      	adds	r2, #1
 8010d7e:	7812      	ldrb	r2, [r2, #0]
 8010d80:	4313      	orrs	r3, r2
 8010d82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	021b      	lsls	r3, r3, #8
 8010d88:	687a      	ldr	r2, [r7, #4]
 8010d8a:	7812      	ldrb	r2, [r2, #0]
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	60fb      	str	r3, [r7, #12]
	return rv;
 8010d90:	68fb      	ldr	r3, [r7, #12]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3714      	adds	r7, #20
 8010d96:	46bd      	mov	sp, r7
 8010d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9c:	4770      	bx	lr

08010d9e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8010d9e:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8010da2:	b085      	sub	sp, #20
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	3307      	adds	r3, #7
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	b2db      	uxtb	r3, r3
 8010db0:	f04f 0400 	mov.w	r4, #0
 8010db4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 8010db8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010dbc:	f04f 0b00 	mov.w	fp, #0
 8010dc0:	f04f 0c00 	mov.w	ip, #0
 8010dc4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8010dc8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010dcc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	3206      	adds	r2, #6
 8010dd4:	7812      	ldrb	r2, [r2, #0]
 8010dd6:	b2d1      	uxtb	r1, r2
 8010dd8:	f04f 0200 	mov.w	r2, #0
 8010ddc:	ea4b 0301 	orr.w	r3, fp, r1
 8010de0:	ea4c 0402 	orr.w	r4, ip, r2
 8010de4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8010de8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010dec:	f04f 0b00 	mov.w	fp, #0
 8010df0:	f04f 0c00 	mov.w	ip, #0
 8010df4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8010df8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010dfc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010e00:	687a      	ldr	r2, [r7, #4]
 8010e02:	3205      	adds	r2, #5
 8010e04:	7812      	ldrb	r2, [r2, #0]
 8010e06:	b2d1      	uxtb	r1, r2
 8010e08:	f04f 0200 	mov.w	r2, #0
 8010e0c:	ea4b 0301 	orr.w	r3, fp, r1
 8010e10:	ea4c 0402 	orr.w	r4, ip, r2
 8010e14:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8010e18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010e1c:	f04f 0b00 	mov.w	fp, #0
 8010e20:	f04f 0c00 	mov.w	ip, #0
 8010e24:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8010e28:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010e2c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	3204      	adds	r2, #4
 8010e34:	7812      	ldrb	r2, [r2, #0]
 8010e36:	b2d1      	uxtb	r1, r2
 8010e38:	f04f 0200 	mov.w	r2, #0
 8010e3c:	ea4b 0301 	orr.w	r3, fp, r1
 8010e40:	ea4c 0402 	orr.w	r4, ip, r2
 8010e44:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8010e48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010e4c:	f04f 0b00 	mov.w	fp, #0
 8010e50:	f04f 0c00 	mov.w	ip, #0
 8010e54:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8010e58:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010e5c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	3203      	adds	r2, #3
 8010e64:	7812      	ldrb	r2, [r2, #0]
 8010e66:	b2d1      	uxtb	r1, r2
 8010e68:	f04f 0200 	mov.w	r2, #0
 8010e6c:	ea4b 0301 	orr.w	r3, fp, r1
 8010e70:	ea4c 0402 	orr.w	r4, ip, r2
 8010e74:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8010e78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010e7c:	f04f 0b00 	mov.w	fp, #0
 8010e80:	f04f 0c00 	mov.w	ip, #0
 8010e84:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8010e88:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010e8c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	3202      	adds	r2, #2
 8010e94:	7812      	ldrb	r2, [r2, #0]
 8010e96:	b2d1      	uxtb	r1, r2
 8010e98:	f04f 0200 	mov.w	r2, #0
 8010e9c:	ea4b 0301 	orr.w	r3, fp, r1
 8010ea0:	ea4c 0402 	orr.w	r4, ip, r2
 8010ea4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 8010ea8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010eac:	f04f 0b00 	mov.w	fp, #0
 8010eb0:	f04f 0c00 	mov.w	ip, #0
 8010eb4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8010eb8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010ebc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	3201      	adds	r2, #1
 8010ec4:	7812      	ldrb	r2, [r2, #0]
 8010ec6:	b2d1      	uxtb	r1, r2
 8010ec8:	f04f 0200 	mov.w	r2, #0
 8010ecc:	ea4b 0301 	orr.w	r3, fp, r1
 8010ed0:	ea4c 0402 	orr.w	r4, ip, r2
 8010ed4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 8010ed8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010edc:	f04f 0b00 	mov.w	fp, #0
 8010ee0:	f04f 0c00 	mov.w	ip, #0
 8010ee4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8010ee8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010eec:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010ef0:	687a      	ldr	r2, [r7, #4]
 8010ef2:	7812      	ldrb	r2, [r2, #0]
 8010ef4:	b2d1      	uxtb	r1, r2
 8010ef6:	f04f 0200 	mov.w	r2, #0
 8010efa:	ea4b 0301 	orr.w	r3, fp, r1
 8010efe:	ea4c 0402 	orr.w	r4, ip, r2
 8010f02:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 8010f06:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	4621      	mov	r1, r4
 8010f0e:	3714      	adds	r7, #20
 8010f10:	46bd      	mov	sp, r7
 8010f12:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010f16:	4770      	bx	lr

08010f18 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	460b      	mov	r3, r1
 8010f22:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	1c5a      	adds	r2, r3, #1
 8010f28:	607a      	str	r2, [r7, #4]
 8010f2a:	887a      	ldrh	r2, [r7, #2]
 8010f2c:	b2d2      	uxtb	r2, r2
 8010f2e:	701a      	strb	r2, [r3, #0]
 8010f30:	887b      	ldrh	r3, [r7, #2]
 8010f32:	0a1b      	lsrs	r3, r3, #8
 8010f34:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	1c5a      	adds	r2, r3, #1
 8010f3a:	607a      	str	r2, [r7, #4]
 8010f3c:	887a      	ldrh	r2, [r7, #2]
 8010f3e:	b2d2      	uxtb	r2, r2
 8010f40:	701a      	strb	r2, [r3, #0]
}
 8010f42:	bf00      	nop
 8010f44:	370c      	adds	r7, #12
 8010f46:	46bd      	mov	sp, r7
 8010f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4c:	4770      	bx	lr

08010f4e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010f4e:	b480      	push	{r7}
 8010f50:	b083      	sub	sp, #12
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
 8010f56:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	1c5a      	adds	r2, r3, #1
 8010f5c:	607a      	str	r2, [r7, #4]
 8010f5e:	683a      	ldr	r2, [r7, #0]
 8010f60:	b2d2      	uxtb	r2, r2
 8010f62:	701a      	strb	r2, [r3, #0]
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	0a1b      	lsrs	r3, r3, #8
 8010f68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	1c5a      	adds	r2, r3, #1
 8010f6e:	607a      	str	r2, [r7, #4]
 8010f70:	683a      	ldr	r2, [r7, #0]
 8010f72:	b2d2      	uxtb	r2, r2
 8010f74:	701a      	strb	r2, [r3, #0]
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	0a1b      	lsrs	r3, r3, #8
 8010f7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	1c5a      	adds	r2, r3, #1
 8010f80:	607a      	str	r2, [r7, #4]
 8010f82:	683a      	ldr	r2, [r7, #0]
 8010f84:	b2d2      	uxtb	r2, r2
 8010f86:	701a      	strb	r2, [r3, #0]
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	0a1b      	lsrs	r3, r3, #8
 8010f8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	1c5a      	adds	r2, r3, #1
 8010f92:	607a      	str	r2, [r7, #4]
 8010f94:	683a      	ldr	r2, [r7, #0]
 8010f96:	b2d2      	uxtb	r2, r2
 8010f98:	701a      	strb	r2, [r3, #0]
}
 8010f9a:	bf00      	nop
 8010f9c:	370c      	adds	r7, #12
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr

08010fa6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8010fa6:	b490      	push	{r4, r7}
 8010fa8:	b084      	sub	sp, #16
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	60f8      	str	r0, [r7, #12]
 8010fae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	1c5a      	adds	r2, r3, #1
 8010fb6:	60fa      	str	r2, [r7, #12]
 8010fb8:	783a      	ldrb	r2, [r7, #0]
 8010fba:	701a      	strb	r2, [r3, #0]
 8010fbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010fc0:	f04f 0300 	mov.w	r3, #0
 8010fc4:	f04f 0400 	mov.w	r4, #0
 8010fc8:	0a0b      	lsrs	r3, r1, #8
 8010fca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010fce:	0a14      	lsrs	r4, r2, #8
 8010fd0:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	1c5a      	adds	r2, r3, #1
 8010fd8:	60fa      	str	r2, [r7, #12]
 8010fda:	783a      	ldrb	r2, [r7, #0]
 8010fdc:	701a      	strb	r2, [r3, #0]
 8010fde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010fe2:	f04f 0300 	mov.w	r3, #0
 8010fe6:	f04f 0400 	mov.w	r4, #0
 8010fea:	0a0b      	lsrs	r3, r1, #8
 8010fec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010ff0:	0a14      	lsrs	r4, r2, #8
 8010ff2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	1c5a      	adds	r2, r3, #1
 8010ffa:	60fa      	str	r2, [r7, #12]
 8010ffc:	783a      	ldrb	r2, [r7, #0]
 8010ffe:	701a      	strb	r2, [r3, #0]
 8011000:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011004:	f04f 0300 	mov.w	r3, #0
 8011008:	f04f 0400 	mov.w	r4, #0
 801100c:	0a0b      	lsrs	r3, r1, #8
 801100e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011012:	0a14      	lsrs	r4, r2, #8
 8011014:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	1c5a      	adds	r2, r3, #1
 801101c:	60fa      	str	r2, [r7, #12]
 801101e:	783a      	ldrb	r2, [r7, #0]
 8011020:	701a      	strb	r2, [r3, #0]
 8011022:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011026:	f04f 0300 	mov.w	r3, #0
 801102a:	f04f 0400 	mov.w	r4, #0
 801102e:	0a0b      	lsrs	r3, r1, #8
 8011030:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011034:	0a14      	lsrs	r4, r2, #8
 8011036:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	1c5a      	adds	r2, r3, #1
 801103e:	60fa      	str	r2, [r7, #12]
 8011040:	783a      	ldrb	r2, [r7, #0]
 8011042:	701a      	strb	r2, [r3, #0]
 8011044:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011048:	f04f 0300 	mov.w	r3, #0
 801104c:	f04f 0400 	mov.w	r4, #0
 8011050:	0a0b      	lsrs	r3, r1, #8
 8011052:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011056:	0a14      	lsrs	r4, r2, #8
 8011058:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	1c5a      	adds	r2, r3, #1
 8011060:	60fa      	str	r2, [r7, #12]
 8011062:	783a      	ldrb	r2, [r7, #0]
 8011064:	701a      	strb	r2, [r3, #0]
 8011066:	e9d7 1200 	ldrd	r1, r2, [r7]
 801106a:	f04f 0300 	mov.w	r3, #0
 801106e:	f04f 0400 	mov.w	r4, #0
 8011072:	0a0b      	lsrs	r3, r1, #8
 8011074:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011078:	0a14      	lsrs	r4, r2, #8
 801107a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	1c5a      	adds	r2, r3, #1
 8011082:	60fa      	str	r2, [r7, #12]
 8011084:	783a      	ldrb	r2, [r7, #0]
 8011086:	701a      	strb	r2, [r3, #0]
 8011088:	e9d7 1200 	ldrd	r1, r2, [r7]
 801108c:	f04f 0300 	mov.w	r3, #0
 8011090:	f04f 0400 	mov.w	r4, #0
 8011094:	0a0b      	lsrs	r3, r1, #8
 8011096:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801109a:	0a14      	lsrs	r4, r2, #8
 801109c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	1c5a      	adds	r2, r3, #1
 80110a4:	60fa      	str	r2, [r7, #12]
 80110a6:	783a      	ldrb	r2, [r7, #0]
 80110a8:	701a      	strb	r2, [r3, #0]
}
 80110aa:	bf00      	nop
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bc90      	pop	{r4, r7}
 80110b2:	4770      	bx	lr

080110b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80110b4:	b480      	push	{r7}
 80110b6:	b087      	sub	sp, #28
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d00d      	beq.n	80110ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80110ce:	693a      	ldr	r2, [r7, #16]
 80110d0:	1c53      	adds	r3, r2, #1
 80110d2:	613b      	str	r3, [r7, #16]
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	1c59      	adds	r1, r3, #1
 80110d8:	6179      	str	r1, [r7, #20]
 80110da:	7812      	ldrb	r2, [r2, #0]
 80110dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	3b01      	subs	r3, #1
 80110e2:	607b      	str	r3, [r7, #4]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d1f1      	bne.n	80110ce <mem_cpy+0x1a>
	}
}
 80110ea:	bf00      	nop
 80110ec:	371c      	adds	r7, #28
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr

080110f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80110f6:	b480      	push	{r7}
 80110f8:	b087      	sub	sp, #28
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	60f8      	str	r0, [r7, #12]
 80110fe:	60b9      	str	r1, [r7, #8]
 8011100:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	1c5a      	adds	r2, r3, #1
 801110a:	617a      	str	r2, [r7, #20]
 801110c:	68ba      	ldr	r2, [r7, #8]
 801110e:	b2d2      	uxtb	r2, r2
 8011110:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	3b01      	subs	r3, #1
 8011116:	607b      	str	r3, [r7, #4]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d1f3      	bne.n	8011106 <mem_set+0x10>
}
 801111e:	bf00      	nop
 8011120:	371c      	adds	r7, #28
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr

0801112a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801112a:	b480      	push	{r7}
 801112c:	b089      	sub	sp, #36	; 0x24
 801112e:	af00      	add	r7, sp, #0
 8011130:	60f8      	str	r0, [r7, #12]
 8011132:	60b9      	str	r1, [r7, #8]
 8011134:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	61fb      	str	r3, [r7, #28]
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801113e:	2300      	movs	r3, #0
 8011140:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	1c5a      	adds	r2, r3, #1
 8011146:	61fa      	str	r2, [r7, #28]
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	4619      	mov	r1, r3
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	1c5a      	adds	r2, r3, #1
 8011150:	61ba      	str	r2, [r7, #24]
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	1acb      	subs	r3, r1, r3
 8011156:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	3b01      	subs	r3, #1
 801115c:	607b      	str	r3, [r7, #4]
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d002      	beq.n	801116a <mem_cmp+0x40>
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d0eb      	beq.n	8011142 <mem_cmp+0x18>

	return r;
 801116a:	697b      	ldr	r3, [r7, #20]
}
 801116c:	4618      	mov	r0, r3
 801116e:	3724      	adds	r7, #36	; 0x24
 8011170:	46bd      	mov	sp, r7
 8011172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011176:	4770      	bx	lr

08011178 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011182:	e002      	b.n	801118a <chk_chr+0x12>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	3301      	adds	r3, #1
 8011188:	607b      	str	r3, [r7, #4]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d005      	beq.n	801119e <chk_chr+0x26>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	461a      	mov	r2, r3
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	4293      	cmp	r3, r2
 801119c:	d1f2      	bne.n	8011184 <chk_chr+0xc>
	return *str;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	781b      	ldrb	r3, [r3, #0]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	370c      	adds	r7, #12
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr
	...

080111b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80111b0:	b480      	push	{r7}
 80111b2:	b085      	sub	sp, #20
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80111ba:	2300      	movs	r3, #0
 80111bc:	60bb      	str	r3, [r7, #8]
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	60fb      	str	r3, [r7, #12]
 80111c2:	e029      	b.n	8011218 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80111c4:	4a27      	ldr	r2, [pc, #156]	; (8011264 <chk_lock+0xb4>)
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	011b      	lsls	r3, r3, #4
 80111ca:	4413      	add	r3, r2
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d01d      	beq.n	801120e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80111d2:	4a24      	ldr	r2, [pc, #144]	; (8011264 <chk_lock+0xb4>)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	011b      	lsls	r3, r3, #4
 80111d8:	4413      	add	r3, r2
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d116      	bne.n	8011212 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80111e4:	4a1f      	ldr	r2, [pc, #124]	; (8011264 <chk_lock+0xb4>)
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	011b      	lsls	r3, r3, #4
 80111ea:	4413      	add	r3, r2
 80111ec:	3304      	adds	r3, #4
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d10c      	bne.n	8011212 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80111f8:	4a1a      	ldr	r2, [pc, #104]	; (8011264 <chk_lock+0xb4>)
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	011b      	lsls	r3, r3, #4
 80111fe:	4413      	add	r3, r2
 8011200:	3308      	adds	r3, #8
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8011208:	429a      	cmp	r2, r3
 801120a:	d102      	bne.n	8011212 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801120c:	e007      	b.n	801121e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801120e:	2301      	movs	r3, #1
 8011210:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	3301      	adds	r3, #1
 8011216:	60fb      	str	r3, [r7, #12]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2b01      	cmp	r3, #1
 801121c:	d9d2      	bls.n	80111c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	2b02      	cmp	r3, #2
 8011222:	d109      	bne.n	8011238 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d102      	bne.n	8011230 <chk_lock+0x80>
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	2b02      	cmp	r3, #2
 801122e:	d101      	bne.n	8011234 <chk_lock+0x84>
 8011230:	2300      	movs	r3, #0
 8011232:	e010      	b.n	8011256 <chk_lock+0xa6>
 8011234:	2312      	movs	r3, #18
 8011236:	e00e      	b.n	8011256 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d108      	bne.n	8011250 <chk_lock+0xa0>
 801123e:	4a09      	ldr	r2, [pc, #36]	; (8011264 <chk_lock+0xb4>)
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	011b      	lsls	r3, r3, #4
 8011244:	4413      	add	r3, r2
 8011246:	330c      	adds	r3, #12
 8011248:	881b      	ldrh	r3, [r3, #0]
 801124a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801124e:	d101      	bne.n	8011254 <chk_lock+0xa4>
 8011250:	2310      	movs	r3, #16
 8011252:	e000      	b.n	8011256 <chk_lock+0xa6>
 8011254:	2300      	movs	r3, #0
}
 8011256:	4618      	mov	r0, r3
 8011258:	3714      	adds	r7, #20
 801125a:	46bd      	mov	sp, r7
 801125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011260:	4770      	bx	lr
 8011262:	bf00      	nop
 8011264:	24000290 	.word	0x24000290

08011268 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801126e:	2300      	movs	r3, #0
 8011270:	607b      	str	r3, [r7, #4]
 8011272:	e002      	b.n	801127a <enq_lock+0x12>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	3301      	adds	r3, #1
 8011278:	607b      	str	r3, [r7, #4]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2b01      	cmp	r3, #1
 801127e:	d806      	bhi.n	801128e <enq_lock+0x26>
 8011280:	4a09      	ldr	r2, [pc, #36]	; (80112a8 <enq_lock+0x40>)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	011b      	lsls	r3, r3, #4
 8011286:	4413      	add	r3, r2
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d1f2      	bne.n	8011274 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2b02      	cmp	r3, #2
 8011292:	bf14      	ite	ne
 8011294:	2301      	movne	r3, #1
 8011296:	2300      	moveq	r3, #0
 8011298:	b2db      	uxtb	r3, r3
}
 801129a:	4618      	mov	r0, r3
 801129c:	370c      	adds	r7, #12
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr
 80112a6:	bf00      	nop
 80112a8:	24000290 	.word	0x24000290

080112ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b085      	sub	sp, #20
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80112b6:	2300      	movs	r3, #0
 80112b8:	60fb      	str	r3, [r7, #12]
 80112ba:	e01f      	b.n	80112fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80112bc:	4a41      	ldr	r2, [pc, #260]	; (80113c4 <inc_lock+0x118>)
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	011b      	lsls	r3, r3, #4
 80112c2:	4413      	add	r3, r2
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d113      	bne.n	80112f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80112ce:	4a3d      	ldr	r2, [pc, #244]	; (80113c4 <inc_lock+0x118>)
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	011b      	lsls	r3, r3, #4
 80112d4:	4413      	add	r3, r2
 80112d6:	3304      	adds	r3, #4
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80112de:	429a      	cmp	r2, r3
 80112e0:	d109      	bne.n	80112f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80112e2:	4a38      	ldr	r2, [pc, #224]	; (80113c4 <inc_lock+0x118>)
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	011b      	lsls	r3, r3, #4
 80112e8:	4413      	add	r3, r2
 80112ea:	3308      	adds	r3, #8
 80112ec:	681a      	ldr	r2, [r3, #0]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d006      	beq.n	8011304 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	3301      	adds	r3, #1
 80112fa:	60fb      	str	r3, [r7, #12]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d9dc      	bls.n	80112bc <inc_lock+0x10>
 8011302:	e000      	b.n	8011306 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011304:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2b02      	cmp	r3, #2
 801130a:	d132      	bne.n	8011372 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801130c:	2300      	movs	r3, #0
 801130e:	60fb      	str	r3, [r7, #12]
 8011310:	e002      	b.n	8011318 <inc_lock+0x6c>
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	3301      	adds	r3, #1
 8011316:	60fb      	str	r3, [r7, #12]
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2b01      	cmp	r3, #1
 801131c:	d806      	bhi.n	801132c <inc_lock+0x80>
 801131e:	4a29      	ldr	r2, [pc, #164]	; (80113c4 <inc_lock+0x118>)
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	011b      	lsls	r3, r3, #4
 8011324:	4413      	add	r3, r2
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d1f2      	bne.n	8011312 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	2b02      	cmp	r3, #2
 8011330:	d101      	bne.n	8011336 <inc_lock+0x8a>
 8011332:	2300      	movs	r3, #0
 8011334:	e040      	b.n	80113b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	4922      	ldr	r1, [pc, #136]	; (80113c4 <inc_lock+0x118>)
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	011b      	lsls	r3, r3, #4
 8011340:	440b      	add	r3, r1
 8011342:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	689a      	ldr	r2, [r3, #8]
 8011348:	491e      	ldr	r1, [pc, #120]	; (80113c4 <inc_lock+0x118>)
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	011b      	lsls	r3, r3, #4
 801134e:	440b      	add	r3, r1
 8011350:	3304      	adds	r3, #4
 8011352:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011358:	491a      	ldr	r1, [pc, #104]	; (80113c4 <inc_lock+0x118>)
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	011b      	lsls	r3, r3, #4
 801135e:	440b      	add	r3, r1
 8011360:	3308      	adds	r3, #8
 8011362:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011364:	4a17      	ldr	r2, [pc, #92]	; (80113c4 <inc_lock+0x118>)
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	011b      	lsls	r3, r3, #4
 801136a:	4413      	add	r3, r2
 801136c:	330c      	adds	r3, #12
 801136e:	2200      	movs	r2, #0
 8011370:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d009      	beq.n	801138c <inc_lock+0xe0>
 8011378:	4a12      	ldr	r2, [pc, #72]	; (80113c4 <inc_lock+0x118>)
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	011b      	lsls	r3, r3, #4
 801137e:	4413      	add	r3, r2
 8011380:	330c      	adds	r3, #12
 8011382:	881b      	ldrh	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d001      	beq.n	801138c <inc_lock+0xe0>
 8011388:	2300      	movs	r3, #0
 801138a:	e015      	b.n	80113b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d108      	bne.n	80113a4 <inc_lock+0xf8>
 8011392:	4a0c      	ldr	r2, [pc, #48]	; (80113c4 <inc_lock+0x118>)
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	011b      	lsls	r3, r3, #4
 8011398:	4413      	add	r3, r2
 801139a:	330c      	adds	r3, #12
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	3301      	adds	r3, #1
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	e001      	b.n	80113a8 <inc_lock+0xfc>
 80113a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80113a8:	4906      	ldr	r1, [pc, #24]	; (80113c4 <inc_lock+0x118>)
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	011b      	lsls	r3, r3, #4
 80113ae:	440b      	add	r3, r1
 80113b0:	330c      	adds	r3, #12
 80113b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	3301      	adds	r3, #1
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3714      	adds	r7, #20
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr
 80113c4:	24000290 	.word	0x24000290

080113c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b085      	sub	sp, #20
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	3b01      	subs	r3, #1
 80113d4:	607b      	str	r3, [r7, #4]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2b01      	cmp	r3, #1
 80113da:	d825      	bhi.n	8011428 <dec_lock+0x60>
		n = Files[i].ctr;
 80113dc:	4a17      	ldr	r2, [pc, #92]	; (801143c <dec_lock+0x74>)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	011b      	lsls	r3, r3, #4
 80113e2:	4413      	add	r3, r2
 80113e4:	330c      	adds	r3, #12
 80113e6:	881b      	ldrh	r3, [r3, #0]
 80113e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80113ea:	89fb      	ldrh	r3, [r7, #14]
 80113ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113f0:	d101      	bne.n	80113f6 <dec_lock+0x2e>
 80113f2:	2300      	movs	r3, #0
 80113f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80113f6:	89fb      	ldrh	r3, [r7, #14]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d002      	beq.n	8011402 <dec_lock+0x3a>
 80113fc:	89fb      	ldrh	r3, [r7, #14]
 80113fe:	3b01      	subs	r3, #1
 8011400:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011402:	4a0e      	ldr	r2, [pc, #56]	; (801143c <dec_lock+0x74>)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	011b      	lsls	r3, r3, #4
 8011408:	4413      	add	r3, r2
 801140a:	330c      	adds	r3, #12
 801140c:	89fa      	ldrh	r2, [r7, #14]
 801140e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011410:	89fb      	ldrh	r3, [r7, #14]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d105      	bne.n	8011422 <dec_lock+0x5a>
 8011416:	4a09      	ldr	r2, [pc, #36]	; (801143c <dec_lock+0x74>)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	011b      	lsls	r3, r3, #4
 801141c:	4413      	add	r3, r2
 801141e:	2200      	movs	r2, #0
 8011420:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011422:	2300      	movs	r3, #0
 8011424:	737b      	strb	r3, [r7, #13]
 8011426:	e001      	b.n	801142c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011428:	2302      	movs	r3, #2
 801142a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801142c:	7b7b      	ldrb	r3, [r7, #13]
}
 801142e:	4618      	mov	r0, r3
 8011430:	3714      	adds	r7, #20
 8011432:	46bd      	mov	sp, r7
 8011434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011438:	4770      	bx	lr
 801143a:	bf00      	nop
 801143c:	24000290 	.word	0x24000290

08011440 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011440:	b480      	push	{r7}
 8011442:	b085      	sub	sp, #20
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011448:	2300      	movs	r3, #0
 801144a:	60fb      	str	r3, [r7, #12]
 801144c:	e010      	b.n	8011470 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801144e:	4a0d      	ldr	r2, [pc, #52]	; (8011484 <clear_lock+0x44>)
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	011b      	lsls	r3, r3, #4
 8011454:	4413      	add	r3, r2
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	429a      	cmp	r2, r3
 801145c:	d105      	bne.n	801146a <clear_lock+0x2a>
 801145e:	4a09      	ldr	r2, [pc, #36]	; (8011484 <clear_lock+0x44>)
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	011b      	lsls	r3, r3, #4
 8011464:	4413      	add	r3, r2
 8011466:	2200      	movs	r2, #0
 8011468:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	3301      	adds	r3, #1
 801146e:	60fb      	str	r3, [r7, #12]
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2b01      	cmp	r3, #1
 8011474:	d9eb      	bls.n	801144e <clear_lock+0xe>
	}
}
 8011476:	bf00      	nop
 8011478:	3714      	adds	r7, #20
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop
 8011484:	24000290 	.word	0x24000290

08011488 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b086      	sub	sp, #24
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011490:	2300      	movs	r3, #0
 8011492:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	78db      	ldrb	r3, [r3, #3]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d034      	beq.n	8011506 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	7858      	ldrb	r0, [r3, #1]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80114ac:	2301      	movs	r3, #1
 80114ae:	697a      	ldr	r2, [r7, #20]
 80114b0:	f7ff fbfc 	bl	8010cac <disk_write>
 80114b4:	4603      	mov	r3, r0
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d002      	beq.n	80114c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80114ba:	2301      	movs	r3, #1
 80114bc:	73fb      	strb	r3, [r7, #15]
 80114be:	e022      	b.n	8011506 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ca:	697a      	ldr	r2, [r7, #20]
 80114cc:	1ad2      	subs	r2, r2, r3
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d217      	bcs.n	8011506 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	789b      	ldrb	r3, [r3, #2]
 80114da:	613b      	str	r3, [r7, #16]
 80114dc:	e010      	b.n	8011500 <sync_window+0x78>
					wsect += fs->fsize;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e2:	697a      	ldr	r2, [r7, #20]
 80114e4:	4413      	add	r3, r2
 80114e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	7858      	ldrb	r0, [r3, #1]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80114f2:	2301      	movs	r3, #1
 80114f4:	697a      	ldr	r2, [r7, #20]
 80114f6:	f7ff fbd9 	bl	8010cac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	3b01      	subs	r3, #1
 80114fe:	613b      	str	r3, [r7, #16]
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	2b01      	cmp	r3, #1
 8011504:	d8eb      	bhi.n	80114de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011506:	7bfb      	ldrb	r3, [r7, #15]
}
 8011508:	4618      	mov	r0, r3
 801150a:	3718      	adds	r7, #24
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801151a:	2300      	movs	r3, #0
 801151c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011522:	683a      	ldr	r2, [r7, #0]
 8011524:	429a      	cmp	r2, r3
 8011526:	d01b      	beq.n	8011560 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f7ff ffad 	bl	8011488 <sync_window>
 801152e:	4603      	mov	r3, r0
 8011530:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011532:	7bfb      	ldrb	r3, [r7, #15]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d113      	bne.n	8011560 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	7858      	ldrb	r0, [r3, #1]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011542:	2301      	movs	r3, #1
 8011544:	683a      	ldr	r2, [r7, #0]
 8011546:	f7ff fb91 	bl	8010c6c <disk_read>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d004      	beq.n	801155a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011550:	f04f 33ff 	mov.w	r3, #4294967295
 8011554:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011556:	2301      	movs	r3, #1
 8011558:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	683a      	ldr	r2, [r7, #0]
 801155e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8011560:	7bfb      	ldrb	r3, [r7, #15]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
	...

0801156c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f7ff ff87 	bl	8011488 <sync_window>
 801157a:	4603      	mov	r3, r0
 801157c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801157e:	7bfb      	ldrb	r3, [r7, #15]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d159      	bne.n	8011638 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	2b03      	cmp	r3, #3
 801158a:	d149      	bne.n	8011620 <sync_fs+0xb4>
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	791b      	ldrb	r3, [r3, #4]
 8011590:	2b01      	cmp	r3, #1
 8011592:	d145      	bne.n	8011620 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	899b      	ldrh	r3, [r3, #12]
 801159e:	461a      	mov	r2, r3
 80115a0:	2100      	movs	r1, #0
 80115a2:	f7ff fda8 	bl	80110f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	333c      	adds	r3, #60	; 0x3c
 80115aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80115ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7ff fcb0 	bl	8010f18 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	333c      	adds	r3, #60	; 0x3c
 80115bc:	4921      	ldr	r1, [pc, #132]	; (8011644 <sync_fs+0xd8>)
 80115be:	4618      	mov	r0, r3
 80115c0:	f7ff fcc5 	bl	8010f4e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	333c      	adds	r3, #60	; 0x3c
 80115c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80115cc:	491e      	ldr	r1, [pc, #120]	; (8011648 <sync_fs+0xdc>)
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7ff fcbd 	bl	8010f4e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	333c      	adds	r3, #60	; 0x3c
 80115d8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	69db      	ldr	r3, [r3, #28]
 80115e0:	4619      	mov	r1, r3
 80115e2:	4610      	mov	r0, r2
 80115e4:	f7ff fcb3 	bl	8010f4e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	333c      	adds	r3, #60	; 0x3c
 80115ec:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	699b      	ldr	r3, [r3, #24]
 80115f4:	4619      	mov	r1, r3
 80115f6:	4610      	mov	r0, r2
 80115f8:	f7ff fca9 	bl	8010f4e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011600:	1c5a      	adds	r2, r3, #1
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	7858      	ldrb	r0, [r3, #1]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011614:	2301      	movs	r3, #1
 8011616:	f7ff fb49 	bl	8010cac <disk_write>
			fs->fsi_flag = 0;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2200      	movs	r2, #0
 801161e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	785b      	ldrb	r3, [r3, #1]
 8011624:	2200      	movs	r2, #0
 8011626:	2100      	movs	r1, #0
 8011628:	4618      	mov	r0, r3
 801162a:	f7ff fb5f 	bl	8010cec <disk_ioctl>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d001      	beq.n	8011638 <sync_fs+0xcc>
 8011634:	2301      	movs	r3, #1
 8011636:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011638:	7bfb      	ldrb	r3, [r7, #15]
}
 801163a:	4618      	mov	r0, r3
 801163c:	3710      	adds	r7, #16
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
 8011642:	bf00      	nop
 8011644:	41615252 	.word	0x41615252
 8011648:	61417272 	.word	0x61417272

0801164c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	3b02      	subs	r3, #2
 801165a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6a1b      	ldr	r3, [r3, #32]
 8011660:	3b02      	subs	r3, #2
 8011662:	683a      	ldr	r2, [r7, #0]
 8011664:	429a      	cmp	r2, r3
 8011666:	d301      	bcc.n	801166c <clust2sect+0x20>
 8011668:	2300      	movs	r3, #0
 801166a:	e008      	b.n	801167e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	895b      	ldrh	r3, [r3, #10]
 8011670:	461a      	mov	r2, r3
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	fb03 f202 	mul.w	r2, r3, r2
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801167c:	4413      	add	r3, r2
}
 801167e:	4618      	mov	r0, r3
 8011680:	370c      	adds	r7, #12
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr
	...

0801168c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801168c:	b590      	push	{r4, r7, lr}
 801168e:	b089      	sub	sp, #36	; 0x24
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	2b01      	cmp	r3, #1
 80116a0:	d904      	bls.n	80116ac <get_fat+0x20>
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	6a1b      	ldr	r3, [r3, #32]
 80116a6:	683a      	ldr	r2, [r7, #0]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d302      	bcc.n	80116b2 <get_fat+0x26>
		val = 1;	/* Internal error */
 80116ac:	2301      	movs	r3, #1
 80116ae:	61fb      	str	r3, [r7, #28]
 80116b0:	e13a      	b.n	8011928 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80116b2:	f04f 33ff 	mov.w	r3, #4294967295
 80116b6:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	3b01      	subs	r3, #1
 80116be:	2b03      	cmp	r3, #3
 80116c0:	f200 8126 	bhi.w	8011910 <get_fat+0x284>
 80116c4:	a201      	add	r2, pc, #4	; (adr r2, 80116cc <get_fat+0x40>)
 80116c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116ca:	bf00      	nop
 80116cc:	080116dd 	.word	0x080116dd
 80116d0:	0801178b 	.word	0x0801178b
 80116d4:	080117d7 	.word	0x080117d7
 80116d8:	08011827 	.word	0x08011827
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	60fb      	str	r3, [r7, #12]
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	085b      	lsrs	r3, r3, #1
 80116e4:	68fa      	ldr	r2, [r7, #12]
 80116e6:	4413      	add	r3, r2
 80116e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80116ea:	69bb      	ldr	r3, [r7, #24]
 80116ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ee:	69bb      	ldr	r3, [r7, #24]
 80116f0:	899b      	ldrh	r3, [r3, #12]
 80116f2:	4619      	mov	r1, r3
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80116fa:	4413      	add	r3, r2
 80116fc:	4619      	mov	r1, r3
 80116fe:	69b8      	ldr	r0, [r7, #24]
 8011700:	f7ff ff06 	bl	8011510 <move_window>
 8011704:	4603      	mov	r3, r0
 8011706:	2b00      	cmp	r3, #0
 8011708:	f040 8105 	bne.w	8011916 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	1c5a      	adds	r2, r3, #1
 8011710:	60fa      	str	r2, [r7, #12]
 8011712:	69ba      	ldr	r2, [r7, #24]
 8011714:	8992      	ldrh	r2, [r2, #12]
 8011716:	fbb3 f1f2 	udiv	r1, r3, r2
 801171a:	fb02 f201 	mul.w	r2, r2, r1
 801171e:	1a9b      	subs	r3, r3, r2
 8011720:	69ba      	ldr	r2, [r7, #24]
 8011722:	4413      	add	r3, r2
 8011724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011728:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801172e:	69bb      	ldr	r3, [r7, #24]
 8011730:	899b      	ldrh	r3, [r3, #12]
 8011732:	4619      	mov	r1, r3
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	fbb3 f3f1 	udiv	r3, r3, r1
 801173a:	4413      	add	r3, r2
 801173c:	4619      	mov	r1, r3
 801173e:	69b8      	ldr	r0, [r7, #24]
 8011740:	f7ff fee6 	bl	8011510 <move_window>
 8011744:	4603      	mov	r3, r0
 8011746:	2b00      	cmp	r3, #0
 8011748:	f040 80e7 	bne.w	801191a <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 801174c:	69bb      	ldr	r3, [r7, #24]
 801174e:	899b      	ldrh	r3, [r3, #12]
 8011750:	461a      	mov	r2, r3
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	fbb3 f1f2 	udiv	r1, r3, r2
 8011758:	fb02 f201 	mul.w	r2, r2, r1
 801175c:	1a9b      	subs	r3, r3, r2
 801175e:	69ba      	ldr	r2, [r7, #24]
 8011760:	4413      	add	r3, r2
 8011762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011766:	021b      	lsls	r3, r3, #8
 8011768:	461a      	mov	r2, r3
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	4313      	orrs	r3, r2
 801176e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	f003 0301 	and.w	r3, r3, #1
 8011776:	2b00      	cmp	r3, #0
 8011778:	d002      	beq.n	8011780 <get_fat+0xf4>
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	091b      	lsrs	r3, r3, #4
 801177e:	e002      	b.n	8011786 <get_fat+0xfa>
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011786:	61fb      	str	r3, [r7, #28]
			break;
 8011788:	e0ce      	b.n	8011928 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	899b      	ldrh	r3, [r3, #12]
 8011792:	085b      	lsrs	r3, r3, #1
 8011794:	b29b      	uxth	r3, r3
 8011796:	4619      	mov	r1, r3
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	fbb3 f3f1 	udiv	r3, r3, r1
 801179e:	4413      	add	r3, r2
 80117a0:	4619      	mov	r1, r3
 80117a2:	69b8      	ldr	r0, [r7, #24]
 80117a4:	f7ff feb4 	bl	8011510 <move_window>
 80117a8:	4603      	mov	r3, r0
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	f040 80b7 	bne.w	801191e <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80117b0:	69bb      	ldr	r3, [r7, #24]
 80117b2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	005b      	lsls	r3, r3, #1
 80117ba:	69ba      	ldr	r2, [r7, #24]
 80117bc:	8992      	ldrh	r2, [r2, #12]
 80117be:	fbb3 f0f2 	udiv	r0, r3, r2
 80117c2:	fb02 f200 	mul.w	r2, r2, r0
 80117c6:	1a9b      	subs	r3, r3, r2
 80117c8:	440b      	add	r3, r1
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7ff faac 	bl	8010d28 <ld_word>
 80117d0:	4603      	mov	r3, r0
 80117d2:	61fb      	str	r3, [r7, #28]
			break;
 80117d4:	e0a8      	b.n	8011928 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80117d6:	69bb      	ldr	r3, [r7, #24]
 80117d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	899b      	ldrh	r3, [r3, #12]
 80117de:	089b      	lsrs	r3, r3, #2
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	4619      	mov	r1, r3
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80117ea:	4413      	add	r3, r2
 80117ec:	4619      	mov	r1, r3
 80117ee:	69b8      	ldr	r0, [r7, #24]
 80117f0:	f7ff fe8e 	bl	8011510 <move_window>
 80117f4:	4603      	mov	r3, r0
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f040 8093 	bne.w	8011922 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	009b      	lsls	r3, r3, #2
 8011806:	69ba      	ldr	r2, [r7, #24]
 8011808:	8992      	ldrh	r2, [r2, #12]
 801180a:	fbb3 f0f2 	udiv	r0, r3, r2
 801180e:	fb02 f200 	mul.w	r2, r2, r0
 8011812:	1a9b      	subs	r3, r3, r2
 8011814:	440b      	add	r3, r1
 8011816:	4618      	mov	r0, r3
 8011818:	f7ff fa9e 	bl	8010d58 <ld_dword>
 801181c:	4603      	mov	r3, r0
 801181e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011822:	61fb      	str	r3, [r7, #28]
			break;
 8011824:	e080      	b.n	8011928 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801182c:	4323      	orrs	r3, r4
 801182e:	d06f      	beq.n	8011910 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	689b      	ldr	r3, [r3, #8]
 8011834:	683a      	ldr	r2, [r7, #0]
 8011836:	1ad3      	subs	r3, r2, r3
 8011838:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011840:	f113 30ff 	adds.w	r0, r3, #4294967295
 8011844:	f144 31ff 	adc.w	r1, r4, #4294967295
 8011848:	69bb      	ldr	r3, [r7, #24]
 801184a:	899b      	ldrh	r3, [r3, #12]
 801184c:	b29b      	uxth	r3, r3
 801184e:	f04f 0400 	mov.w	r4, #0
 8011852:	461a      	mov	r2, r3
 8011854:	4623      	mov	r3, r4
 8011856:	f7ee fd3f 	bl	80002d8 <__aeabi_uldivmod>
 801185a:	4603      	mov	r3, r0
 801185c:	460c      	mov	r4, r1
 801185e:	461a      	mov	r2, r3
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	895b      	ldrh	r3, [r3, #10]
 8011864:	fbb2 f3f3 	udiv	r3, r2, r3
 8011868:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	79db      	ldrb	r3, [r3, #7]
 801186e:	2b02      	cmp	r3, #2
 8011870:	d10e      	bne.n	8011890 <get_fat+0x204>
					if (cofs <= clen) {
 8011872:	697a      	ldr	r2, [r7, #20]
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	429a      	cmp	r2, r3
 8011878:	d80a      	bhi.n	8011890 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 801187a:	697a      	ldr	r2, [r7, #20]
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	429a      	cmp	r2, r3
 8011880:	d002      	beq.n	8011888 <get_fat+0x1fc>
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	3301      	adds	r3, #1
 8011886:	e001      	b.n	801188c <get_fat+0x200>
 8011888:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801188c:	61fb      	str	r3, [r7, #28]
						break;
 801188e:	e04b      	b.n	8011928 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	79db      	ldrb	r3, [r3, #7]
 8011894:	2b03      	cmp	r3, #3
 8011896:	d108      	bne.n	80118aa <get_fat+0x21e>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	699b      	ldr	r3, [r3, #24]
 801189c:	697a      	ldr	r2, [r7, #20]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d203      	bcs.n	80118aa <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	3301      	adds	r3, #1
 80118a6:	61fb      	str	r3, [r7, #28]
					break;
 80118a8:	e03e      	b.n	8011928 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	79db      	ldrb	r3, [r3, #7]
 80118ae:	2b02      	cmp	r3, #2
 80118b0:	d02e      	beq.n	8011910 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	69db      	ldr	r3, [r3, #28]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d003      	beq.n	80118c2 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80118ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80118be:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80118c0:	e032      	b.n	8011928 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118c6:	69bb      	ldr	r3, [r7, #24]
 80118c8:	899b      	ldrh	r3, [r3, #12]
 80118ca:	089b      	lsrs	r3, r3, #2
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	4619      	mov	r1, r3
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80118d6:	4413      	add	r3, r2
 80118d8:	4619      	mov	r1, r3
 80118da:	69b8      	ldr	r0, [r7, #24]
 80118dc:	f7ff fe18 	bl	8011510 <move_window>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d11f      	bne.n	8011926 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80118e6:	69bb      	ldr	r3, [r7, #24]
 80118e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	009b      	lsls	r3, r3, #2
 80118f0:	69ba      	ldr	r2, [r7, #24]
 80118f2:	8992      	ldrh	r2, [r2, #12]
 80118f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80118f8:	fb02 f200 	mul.w	r2, r2, r0
 80118fc:	1a9b      	subs	r3, r3, r2
 80118fe:	440b      	add	r3, r1
 8011900:	4618      	mov	r0, r3
 8011902:	f7ff fa29 	bl	8010d58 <ld_dword>
 8011906:	4603      	mov	r3, r0
 8011908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801190c:	61fb      	str	r3, [r7, #28]
					break;
 801190e:	e00b      	b.n	8011928 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011910:	2301      	movs	r3, #1
 8011912:	61fb      	str	r3, [r7, #28]
 8011914:	e008      	b.n	8011928 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011916:	bf00      	nop
 8011918:	e006      	b.n	8011928 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801191a:	bf00      	nop
 801191c:	e004      	b.n	8011928 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801191e:	bf00      	nop
 8011920:	e002      	b.n	8011928 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011922:	bf00      	nop
 8011924:	e000      	b.n	8011928 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011926:	bf00      	nop
		}
	}

	return val;
 8011928:	69fb      	ldr	r3, [r7, #28]
}
 801192a:	4618      	mov	r0, r3
 801192c:	3724      	adds	r7, #36	; 0x24
 801192e:	46bd      	mov	sp, r7
 8011930:	bd90      	pop	{r4, r7, pc}
 8011932:	bf00      	nop

08011934 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011934:	b590      	push	{r4, r7, lr}
 8011936:	b089      	sub	sp, #36	; 0x24
 8011938:	af00      	add	r7, sp, #0
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	60b9      	str	r1, [r7, #8]
 801193e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011940:	2302      	movs	r3, #2
 8011942:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	2b01      	cmp	r3, #1
 8011948:	f240 8111 	bls.w	8011b6e <put_fat+0x23a>
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	6a1b      	ldr	r3, [r3, #32]
 8011950:	68ba      	ldr	r2, [r7, #8]
 8011952:	429a      	cmp	r2, r3
 8011954:	f080 810b 	bcs.w	8011b6e <put_fat+0x23a>
		switch (fs->fs_type) {
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	3b01      	subs	r3, #1
 801195e:	2b03      	cmp	r3, #3
 8011960:	f200 8105 	bhi.w	8011b6e <put_fat+0x23a>
 8011964:	a201      	add	r2, pc, #4	; (adr r2, 801196c <put_fat+0x38>)
 8011966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801196a:	bf00      	nop
 801196c:	0801197d 	.word	0x0801197d
 8011970:	08011a81 	.word	0x08011a81
 8011974:	08011ad7 	.word	0x08011ad7
 8011978:	08011ad7 	.word	0x08011ad7
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	61bb      	str	r3, [r7, #24]
 8011980:	69bb      	ldr	r3, [r7, #24]
 8011982:	085b      	lsrs	r3, r3, #1
 8011984:	69ba      	ldr	r2, [r7, #24]
 8011986:	4413      	add	r3, r2
 8011988:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	899b      	ldrh	r3, [r3, #12]
 8011992:	4619      	mov	r1, r3
 8011994:	69bb      	ldr	r3, [r7, #24]
 8011996:	fbb3 f3f1 	udiv	r3, r3, r1
 801199a:	4413      	add	r3, r2
 801199c:	4619      	mov	r1, r3
 801199e:	68f8      	ldr	r0, [r7, #12]
 80119a0:	f7ff fdb6 	bl	8011510 <move_window>
 80119a4:	4603      	mov	r3, r0
 80119a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80119a8:	7ffb      	ldrb	r3, [r7, #31]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	f040 80d8 	bne.w	8011b60 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	1c5a      	adds	r2, r3, #1
 80119ba:	61ba      	str	r2, [r7, #24]
 80119bc:	68fa      	ldr	r2, [r7, #12]
 80119be:	8992      	ldrh	r2, [r2, #12]
 80119c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80119c4:	fb02 f200 	mul.w	r2, r2, r0
 80119c8:	1a9b      	subs	r3, r3, r2
 80119ca:	440b      	add	r3, r1
 80119cc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	f003 0301 	and.w	r3, r3, #1
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d00d      	beq.n	80119f4 <put_fat+0xc0>
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	b25b      	sxtb	r3, r3
 80119de:	f003 030f 	and.w	r3, r3, #15
 80119e2:	b25a      	sxtb	r2, r3
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	b2db      	uxtb	r3, r3
 80119e8:	011b      	lsls	r3, r3, #4
 80119ea:	b25b      	sxtb	r3, r3
 80119ec:	4313      	orrs	r3, r2
 80119ee:	b25b      	sxtb	r3, r3
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	e001      	b.n	80119f8 <put_fat+0xc4>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	697a      	ldr	r2, [r7, #20]
 80119fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	2201      	movs	r2, #1
 8011a00:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	899b      	ldrh	r3, [r3, #12]
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	69bb      	ldr	r3, [r7, #24]
 8011a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a12:	4413      	add	r3, r2
 8011a14:	4619      	mov	r1, r3
 8011a16:	68f8      	ldr	r0, [r7, #12]
 8011a18:	f7ff fd7a 	bl	8011510 <move_window>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011a20:	7ffb      	ldrb	r3, [r7, #31]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f040 809e 	bne.w	8011b64 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	899b      	ldrh	r3, [r3, #12]
 8011a32:	461a      	mov	r2, r3
 8011a34:	69bb      	ldr	r3, [r7, #24]
 8011a36:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a3a:	fb02 f200 	mul.w	r2, r2, r0
 8011a3e:	1a9b      	subs	r3, r3, r2
 8011a40:	440b      	add	r3, r1
 8011a42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	f003 0301 	and.w	r3, r3, #1
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d003      	beq.n	8011a56 <put_fat+0x122>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	091b      	lsrs	r3, r3, #4
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	e00e      	b.n	8011a74 <put_fat+0x140>
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	b25b      	sxtb	r3, r3
 8011a5c:	f023 030f 	bic.w	r3, r3, #15
 8011a60:	b25a      	sxtb	r2, r3
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	0a1b      	lsrs	r3, r3, #8
 8011a66:	b25b      	sxtb	r3, r3
 8011a68:	f003 030f 	and.w	r3, r3, #15
 8011a6c:	b25b      	sxtb	r3, r3
 8011a6e:	4313      	orrs	r3, r2
 8011a70:	b25b      	sxtb	r3, r3
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	697a      	ldr	r2, [r7, #20]
 8011a76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	70da      	strb	r2, [r3, #3]
			break;
 8011a7e:	e076      	b.n	8011b6e <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	899b      	ldrh	r3, [r3, #12]
 8011a88:	085b      	lsrs	r3, r3, #1
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a94:	4413      	add	r3, r2
 8011a96:	4619      	mov	r1, r3
 8011a98:	68f8      	ldr	r0, [r7, #12]
 8011a9a:	f7ff fd39 	bl	8011510 <move_window>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011aa2:	7ffb      	ldrb	r3, [r7, #31]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d15f      	bne.n	8011b68 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	005b      	lsls	r3, r3, #1
 8011ab2:	68fa      	ldr	r2, [r7, #12]
 8011ab4:	8992      	ldrh	r2, [r2, #12]
 8011ab6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011aba:	fb02 f200 	mul.w	r2, r2, r0
 8011abe:	1a9b      	subs	r3, r3, r2
 8011ac0:	440b      	add	r3, r1
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	b292      	uxth	r2, r2
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7ff fa25 	bl	8010f18 <st_word>
			fs->wflag = 1;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	70da      	strb	r2, [r3, #3]
			break;
 8011ad4:	e04b      	b.n	8011b6e <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	899b      	ldrh	r3, [r3, #12]
 8011ade:	089b      	lsrs	r3, r3, #2
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	4619      	mov	r1, r3
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011aea:	4413      	add	r3, r2
 8011aec:	4619      	mov	r1, r3
 8011aee:	68f8      	ldr	r0, [r7, #12]
 8011af0:	f7ff fd0e 	bl	8011510 <move_window>
 8011af4:	4603      	mov	r3, r0
 8011af6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011af8:	7ffb      	ldrb	r3, [r7, #31]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d136      	bne.n	8011b6c <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	2b04      	cmp	r3, #4
 8011b04:	d017      	beq.n	8011b36 <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	68fa      	ldr	r2, [r7, #12]
 8011b18:	8992      	ldrh	r2, [r2, #12]
 8011b1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b1e:	fb02 f200 	mul.w	r2, r2, r0
 8011b22:	1a9b      	subs	r3, r3, r2
 8011b24:	440b      	add	r3, r1
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7ff f916 	bl	8010d58 <ld_dword>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011b32:	4323      	orrs	r3, r4
 8011b34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	009b      	lsls	r3, r3, #2
 8011b40:	68fa      	ldr	r2, [r7, #12]
 8011b42:	8992      	ldrh	r2, [r2, #12]
 8011b44:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b48:	fb02 f200 	mul.w	r2, r2, r0
 8011b4c:	1a9b      	subs	r3, r3, r2
 8011b4e:	440b      	add	r3, r1
 8011b50:	6879      	ldr	r1, [r7, #4]
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7ff f9fb 	bl	8010f4e <st_dword>
			fs->wflag = 1;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	70da      	strb	r2, [r3, #3]
			break;
 8011b5e:	e006      	b.n	8011b6e <put_fat+0x23a>
			if (res != FR_OK) break;
 8011b60:	bf00      	nop
 8011b62:	e004      	b.n	8011b6e <put_fat+0x23a>
			if (res != FR_OK) break;
 8011b64:	bf00      	nop
 8011b66:	e002      	b.n	8011b6e <put_fat+0x23a>
			if (res != FR_OK) break;
 8011b68:	bf00      	nop
 8011b6a:	e000      	b.n	8011b6e <put_fat+0x23a>
			if (res != FR_OK) break;
 8011b6c:	bf00      	nop
		}
	}
	return res;
 8011b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3724      	adds	r7, #36	; 0x24
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd90      	pop	{r4, r7, pc}

08011b78 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b08a      	sub	sp, #40	; 0x28
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	3b02      	subs	r3, #2
 8011b88:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	6a1b      	ldr	r3, [r3, #32]
 8011b8e:	3b02      	subs	r3, #2
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d301      	bcc.n	8011b9a <find_bitmap+0x22>
 8011b96:	2300      	movs	r3, #0
 8011b98:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	61fb      	str	r3, [r7, #28]
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	61bb      	str	r3, [r7, #24]
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	08db      	lsrs	r3, r3, #3
 8011bae:	68f9      	ldr	r1, [r7, #12]
 8011bb0:	8989      	ldrh	r1, [r1, #12]
 8011bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bb6:	4413      	add	r3, r2
 8011bb8:	4619      	mov	r1, r3
 8011bba:	68f8      	ldr	r0, [r7, #12]
 8011bbc:	f7ff fca8 	bl	8011510 <move_window>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d002      	beq.n	8011bcc <find_bitmap+0x54>
 8011bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8011bca:	e058      	b.n	8011c7e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	08db      	lsrs	r3, r3, #3
 8011bd0:	68fa      	ldr	r2, [r7, #12]
 8011bd2:	8992      	ldrh	r2, [r2, #12]
 8011bd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011bd8:	fb02 f201 	mul.w	r2, r2, r1
 8011bdc:	1a9b      	subs	r3, r3, r2
 8011bde:	623b      	str	r3, [r7, #32]
 8011be0:	69fb      	ldr	r3, [r7, #28]
 8011be2:	f003 0307 	and.w	r3, r3, #7
 8011be6:	2201      	movs	r2, #1
 8011be8:	fa02 f303 	lsl.w	r3, r2, r3
 8011bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	6a3b      	ldr	r3, [r7, #32]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	333c      	adds	r3, #60	; 0x3c
 8011bf8:	781a      	ldrb	r2, [r3, #0]
 8011bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bfe:	4013      	ands	r3, r2
 8011c00:	74fb      	strb	r3, [r7, #19]
 8011c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c06:	005b      	lsls	r3, r3, #1
 8011c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	61fb      	str	r3, [r7, #28]
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	6a1b      	ldr	r3, [r3, #32]
 8011c16:	3b02      	subs	r3, #2
 8011c18:	69fa      	ldr	r2, [r7, #28]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d307      	bcc.n	8011c2e <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8011c1e:	2300      	movs	r3, #0
 8011c20:	61fb      	str	r3, [r7, #28]
 8011c22:	2300      	movs	r3, #0
 8011c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	899b      	ldrh	r3, [r3, #12]
 8011c2c:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8011c2e:	7cfb      	ldrb	r3, [r7, #19]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d109      	bne.n	8011c48 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	3301      	adds	r3, #1
 8011c38:	617b      	str	r3, [r7, #20]
 8011c3a:	697a      	ldr	r2, [r7, #20]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d106      	bne.n	8011c50 <find_bitmap+0xd8>
 8011c42:	69bb      	ldr	r3, [r7, #24]
 8011c44:	3302      	adds	r3, #2
 8011c46:	e01a      	b.n	8011c7e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8011c48:	69fb      	ldr	r3, [r7, #28]
 8011c4a:	61bb      	str	r3, [r7, #24]
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8011c50:	69fa      	ldr	r2, [r7, #28]
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d101      	bne.n	8011c5c <find_bitmap+0xe4>
 8011c58:	2300      	movs	r3, #0
 8011c5a:	e010      	b.n	8011c7e <find_bitmap+0x106>
			} while (bm);
 8011c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d1c5      	bne.n	8011bf0 <find_bitmap+0x78>
			bm = 1;
 8011c64:	2301      	movs	r3, #1
 8011c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8011c6a:	6a3b      	ldr	r3, [r7, #32]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	623b      	str	r3, [r7, #32]
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	899b      	ldrh	r3, [r3, #12]
 8011c74:	461a      	mov	r2, r3
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	d3b9      	bcc.n	8011bf0 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8011c7c:	e793      	b.n	8011ba6 <find_bitmap+0x2e>
	}
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3728      	adds	r7, #40	; 0x28
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b088      	sub	sp, #32
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	60f8      	str	r0, [r7, #12]
 8011c8e:	60b9      	str	r1, [r7, #8]
 8011c90:	607a      	str	r2, [r7, #4]
 8011c92:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	3b02      	subs	r3, #2
 8011c98:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	08db      	lsrs	r3, r3, #3
 8011ca2:	68f9      	ldr	r1, [r7, #12]
 8011ca4:	8989      	ldrh	r1, [r1, #12]
 8011ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011caa:	4413      	add	r3, r2
 8011cac:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	08db      	lsrs	r3, r3, #3
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	8992      	ldrh	r2, [r2, #12]
 8011cb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011cba:	fb02 f201 	mul.w	r2, r2, r1
 8011cbe:	1a9b      	subs	r3, r3, r2
 8011cc0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	f003 0307 	and.w	r3, r3, #7
 8011cc8:	2201      	movs	r2, #1
 8011cca:	fa02 f303 	lsl.w	r3, r2, r3
 8011cce:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	1c5a      	adds	r2, r3, #1
 8011cd4:	617a      	str	r2, [r7, #20]
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f7ff fc19 	bl	8011510 <move_window>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d001      	beq.n	8011ce8 <change_bitmap+0x62>
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	e03f      	b.n	8011d68 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	69bb      	ldr	r3, [r7, #24]
 8011cec:	4413      	add	r3, r2
 8011cee:	333c      	adds	r3, #60	; 0x3c
 8011cf0:	781a      	ldrb	r2, [r3, #0]
 8011cf2:	7ffb      	ldrb	r3, [r7, #31]
 8011cf4:	4013      	ands	r3, r2
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	bf14      	ite	ne
 8011cfc:	2301      	movne	r3, #1
 8011cfe:	2300      	moveq	r3, #0
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	461a      	mov	r2, r3
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d101      	bne.n	8011d0e <change_bitmap+0x88>
 8011d0a:	2302      	movs	r3, #2
 8011d0c:	e02c      	b.n	8011d68 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8011d0e:	68fa      	ldr	r2, [r7, #12]
 8011d10:	69bb      	ldr	r3, [r7, #24]
 8011d12:	4413      	add	r3, r2
 8011d14:	333c      	adds	r3, #60	; 0x3c
 8011d16:	781a      	ldrb	r2, [r3, #0]
 8011d18:	7ffb      	ldrb	r3, [r7, #31]
 8011d1a:	4053      	eors	r3, r2
 8011d1c:	b2d9      	uxtb	r1, r3
 8011d1e:	68fa      	ldr	r2, [r7, #12]
 8011d20:	69bb      	ldr	r3, [r7, #24]
 8011d22:	4413      	add	r3, r2
 8011d24:	333c      	adds	r3, #60	; 0x3c
 8011d26:	460a      	mov	r2, r1
 8011d28:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	3b01      	subs	r3, #1
 8011d34:	607b      	str	r3, [r7, #4]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d101      	bne.n	8011d40 <change_bitmap+0xba>
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	e013      	b.n	8011d68 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8011d40:	7ffb      	ldrb	r3, [r7, #31]
 8011d42:	005b      	lsls	r3, r3, #1
 8011d44:	77fb      	strb	r3, [r7, #31]
 8011d46:	7ffb      	ldrb	r3, [r7, #31]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d1cd      	bne.n	8011ce8 <change_bitmap+0x62>
			bm = 1;
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8011d50:	69bb      	ldr	r3, [r7, #24]
 8011d52:	3301      	adds	r3, #1
 8011d54:	61bb      	str	r3, [r7, #24]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	899b      	ldrh	r3, [r3, #12]
 8011d5a:	461a      	mov	r2, r3
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	4293      	cmp	r3, r2
 8011d60:	d3c2      	bcc.n	8011ce8 <change_bitmap+0x62>
		i = 0;
 8011d62:	2300      	movs	r3, #0
 8011d64:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8011d66:	e7b3      	b.n	8011cd0 <change_bitmap+0x4a>
	}
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3720      	adds	r7, #32
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b086      	sub	sp, #24
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	79db      	ldrb	r3, [r3, #7]
 8011d7c:	2b03      	cmp	r3, #3
 8011d7e:	d121      	bne.n	8011dc4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	689b      	ldr	r3, [r3, #8]
 8011d84:	617b      	str	r3, [r7, #20]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	699b      	ldr	r3, [r3, #24]
 8011d8a:	613b      	str	r3, [r7, #16]
 8011d8c:	e014      	b.n	8011db8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6818      	ldr	r0, [r3, #0]
 8011d92:	697b      	ldr	r3, [r7, #20]
 8011d94:	3301      	adds	r3, #1
 8011d96:	461a      	mov	r2, r3
 8011d98:	6979      	ldr	r1, [r7, #20]
 8011d9a:	f7ff fdcb 	bl	8011934 <put_fat>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8011da2:	7bfb      	ldrb	r3, [r7, #15]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d001      	beq.n	8011dac <fill_first_frag+0x3c>
 8011da8:	7bfb      	ldrb	r3, [r7, #15]
 8011daa:	e00c      	b.n	8011dc6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	3301      	adds	r3, #1
 8011db0:	617b      	str	r3, [r7, #20]
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	3b01      	subs	r3, #1
 8011db6:	613b      	str	r3, [r7, #16]
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d1e7      	bne.n	8011d8e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8011dc4:	2300      	movs	r3, #0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3718      	adds	r7, #24
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}

08011dce <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8011dce:	b580      	push	{r7, lr}
 8011dd0:	b086      	sub	sp, #24
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	60f8      	str	r0, [r7, #12]
 8011dd6:	60b9      	str	r1, [r7, #8]
 8011dd8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8011dda:	e020      	b.n	8011e1e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	6818      	ldr	r0, [r3, #0]
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	69db      	ldr	r3, [r3, #28]
 8011de4:	68ba      	ldr	r2, [r7, #8]
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	1c59      	adds	r1, r3, #1
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	69db      	ldr	r3, [r3, #28]
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d905      	bls.n	8011dfe <fill_last_frag+0x30>
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	69db      	ldr	r3, [r3, #28]
 8011df6:	68ba      	ldr	r2, [r7, #8]
 8011df8:	1ad3      	subs	r3, r2, r3
 8011dfa:	3302      	adds	r3, #2
 8011dfc:	e000      	b.n	8011e00 <fill_last_frag+0x32>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	461a      	mov	r2, r3
 8011e02:	f7ff fd97 	bl	8011934 <put_fat>
 8011e06:	4603      	mov	r3, r0
 8011e08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8011e0a:	7dfb      	ldrb	r3, [r7, #23]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d001      	beq.n	8011e14 <fill_last_frag+0x46>
 8011e10:	7dfb      	ldrb	r3, [r7, #23]
 8011e12:	e009      	b.n	8011e28 <fill_last_frag+0x5a>
		obj->n_frag--;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	69db      	ldr	r3, [r3, #28]
 8011e18:	1e5a      	subs	r2, r3, #1
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	69db      	ldr	r3, [r3, #28]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d1da      	bne.n	8011ddc <fill_last_frag+0xe>
	}
	return FR_OK;
 8011e26:	2300      	movs	r3, #0
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3718      	adds	r7, #24
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b08a      	sub	sp, #40	; 0x28
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	627b      	str	r3, [r7, #36]	; 0x24
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	2b01      	cmp	r3, #1
 8011e52:	d904      	bls.n	8011e5e <remove_chain+0x2e>
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	6a1b      	ldr	r3, [r3, #32]
 8011e58:	68ba      	ldr	r2, [r7, #8]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d301      	bcc.n	8011e62 <remove_chain+0x32>
 8011e5e:	2302      	movs	r3, #2
 8011e60:	e096      	b.n	8011f90 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d014      	beq.n	8011e92 <remove_chain+0x62>
 8011e68:	69bb      	ldr	r3, [r7, #24]
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	2b04      	cmp	r3, #4
 8011e6e:	d103      	bne.n	8011e78 <remove_chain+0x48>
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	79db      	ldrb	r3, [r3, #7]
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d00c      	beq.n	8011e92 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011e78:	f04f 32ff 	mov.w	r2, #4294967295
 8011e7c:	6879      	ldr	r1, [r7, #4]
 8011e7e:	69b8      	ldr	r0, [r7, #24]
 8011e80:	f7ff fd58 	bl	8011934 <put_fat>
 8011e84:	4603      	mov	r3, r0
 8011e86:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011e88:	7ffb      	ldrb	r3, [r7, #31]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d001      	beq.n	8011e92 <remove_chain+0x62>
 8011e8e:	7ffb      	ldrb	r3, [r7, #31]
 8011e90:	e07e      	b.n	8011f90 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011e92:	68b9      	ldr	r1, [r7, #8]
 8011e94:	68f8      	ldr	r0, [r7, #12]
 8011e96:	f7ff fbf9 	bl	801168c <get_fat>
 8011e9a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d055      	beq.n	8011f4e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d101      	bne.n	8011eac <remove_chain+0x7c>
 8011ea8:	2302      	movs	r3, #2
 8011eaa:	e071      	b.n	8011f90 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eb2:	d101      	bne.n	8011eb8 <remove_chain+0x88>
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	e06b      	b.n	8011f90 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8011eb8:	69bb      	ldr	r3, [r7, #24]
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	2b04      	cmp	r3, #4
 8011ebe:	d00b      	beq.n	8011ed8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	68b9      	ldr	r1, [r7, #8]
 8011ec4:	69b8      	ldr	r0, [r7, #24]
 8011ec6:	f7ff fd35 	bl	8011934 <put_fat>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011ece:	7ffb      	ldrb	r3, [r7, #31]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d001      	beq.n	8011ed8 <remove_chain+0xa8>
 8011ed4:	7ffb      	ldrb	r3, [r7, #31]
 8011ed6:	e05b      	b.n	8011f90 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	69da      	ldr	r2, [r3, #28]
 8011edc:	69bb      	ldr	r3, [r7, #24]
 8011ede:	6a1b      	ldr	r3, [r3, #32]
 8011ee0:	3b02      	subs	r3, #2
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d20b      	bcs.n	8011efe <remove_chain+0xce>
			fs->free_clst++;
 8011ee6:	69bb      	ldr	r3, [r7, #24]
 8011ee8:	69db      	ldr	r3, [r3, #28]
 8011eea:	1c5a      	adds	r2, r3, #1
 8011eec:	69bb      	ldr	r3, [r7, #24]
 8011eee:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8011ef0:	69bb      	ldr	r3, [r7, #24]
 8011ef2:	791b      	ldrb	r3, [r3, #4]
 8011ef4:	f043 0301 	orr.w	r3, r3, #1
 8011ef8:	b2da      	uxtb	r2, r3
 8011efa:	69bb      	ldr	r3, [r7, #24]
 8011efc:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8011efe:	6a3b      	ldr	r3, [r7, #32]
 8011f00:	3301      	adds	r3, #1
 8011f02:	697a      	ldr	r2, [r7, #20]
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d102      	bne.n	8011f0e <remove_chain+0xde>
			ecl = nxt;
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	623b      	str	r3, [r7, #32]
 8011f0c:	e017      	b.n	8011f3e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8011f0e:	69bb      	ldr	r3, [r7, #24]
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	2b04      	cmp	r3, #4
 8011f14:	d10f      	bne.n	8011f36 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8011f16:	6a3a      	ldr	r2, [r7, #32]
 8011f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	1c5a      	adds	r2, r3, #1
 8011f1e:	2300      	movs	r3, #0
 8011f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011f22:	69b8      	ldr	r0, [r7, #24]
 8011f24:	f7ff feaf 	bl	8011c86 <change_bitmap>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8011f2c:	7ffb      	ldrb	r3, [r7, #31]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d001      	beq.n	8011f36 <remove_chain+0x106>
 8011f32:	7ffb      	ldrb	r3, [r7, #31]
 8011f34:	e02c      	b.n	8011f90 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	623b      	str	r3, [r7, #32]
 8011f3a:	6a3b      	ldr	r3, [r7, #32]
 8011f3c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011f42:	69bb      	ldr	r3, [r7, #24]
 8011f44:	6a1b      	ldr	r3, [r3, #32]
 8011f46:	68ba      	ldr	r2, [r7, #8]
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d3a2      	bcc.n	8011e92 <remove_chain+0x62>
 8011f4c:	e000      	b.n	8011f50 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8011f4e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8011f50:	69bb      	ldr	r3, [r7, #24]
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	2b04      	cmp	r3, #4
 8011f56:	d11a      	bne.n	8011f8e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d103      	bne.n	8011f66 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	2200      	movs	r2, #0
 8011f62:	71da      	strb	r2, [r3, #7]
 8011f64:	e013      	b.n	8011f8e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	79db      	ldrb	r3, [r3, #7]
 8011f6a:	2b03      	cmp	r3, #3
 8011f6c:	d10f      	bne.n	8011f8e <remove_chain+0x15e>
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	689b      	ldr	r3, [r3, #8]
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d30a      	bcc.n	8011f8e <remove_chain+0x15e>
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	689a      	ldr	r2, [r3, #8]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	699b      	ldr	r3, [r3, #24]
 8011f80:	4413      	add	r3, r2
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d802      	bhi.n	8011f8e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2202      	movs	r2, #2
 8011f8c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8011f8e:	2300      	movs	r3, #0
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3728      	adds	r7, #40	; 0x28
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b088      	sub	sp, #32
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d10d      	bne.n	8011fca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	699b      	ldr	r3, [r3, #24]
 8011fb2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d004      	beq.n	8011fc4 <create_chain+0x2c>
 8011fba:	693b      	ldr	r3, [r7, #16]
 8011fbc:	6a1b      	ldr	r3, [r3, #32]
 8011fbe:	69ba      	ldr	r2, [r7, #24]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d31b      	bcc.n	8011ffc <create_chain+0x64>
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	61bb      	str	r3, [r7, #24]
 8011fc8:	e018      	b.n	8011ffc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011fca:	6839      	ldr	r1, [r7, #0]
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ff fb5d 	bl	801168c <get_fat>
 8011fd2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	2b01      	cmp	r3, #1
 8011fd8:	d801      	bhi.n	8011fde <create_chain+0x46>
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e0d9      	b.n	8012192 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fe4:	d101      	bne.n	8011fea <create_chain+0x52>
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	e0d3      	b.n	8012192 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	6a1b      	ldr	r3, [r3, #32]
 8011fee:	68fa      	ldr	r2, [r7, #12]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d201      	bcs.n	8011ff8 <create_chain+0x60>
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	e0cc      	b.n	8012192 <create_chain+0x1fa>
		scl = clst;
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	2b04      	cmp	r3, #4
 8012002:	d164      	bne.n	80120ce <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8012004:	2201      	movs	r2, #1
 8012006:	69b9      	ldr	r1, [r7, #24]
 8012008:	6938      	ldr	r0, [r7, #16]
 801200a:	f7ff fdb5 	bl	8011b78 <find_bitmap>
 801200e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8012010:	69fb      	ldr	r3, [r7, #28]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d003      	beq.n	801201e <create_chain+0x86>
 8012016:	69fb      	ldr	r3, [r7, #28]
 8012018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801201c:	d101      	bne.n	8012022 <create_chain+0x8a>
 801201e:	69fb      	ldr	r3, [r7, #28]
 8012020:	e0b7      	b.n	8012192 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8012022:	2301      	movs	r3, #1
 8012024:	2201      	movs	r2, #1
 8012026:	69f9      	ldr	r1, [r7, #28]
 8012028:	6938      	ldr	r0, [r7, #16]
 801202a:	f7ff fe2c 	bl	8011c86 <change_bitmap>
 801202e:	4603      	mov	r3, r0
 8012030:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8012032:	7dfb      	ldrb	r3, [r7, #23]
 8012034:	2b02      	cmp	r3, #2
 8012036:	d101      	bne.n	801203c <create_chain+0xa4>
 8012038:	2301      	movs	r3, #1
 801203a:	e0aa      	b.n	8012192 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 801203c:	7dfb      	ldrb	r3, [r7, #23]
 801203e:	2b01      	cmp	r3, #1
 8012040:	d102      	bne.n	8012048 <create_chain+0xb0>
 8012042:	f04f 33ff 	mov.w	r3, #4294967295
 8012046:	e0a4      	b.n	8012192 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d103      	bne.n	8012056 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2202      	movs	r2, #2
 8012052:	71da      	strb	r2, [r3, #7]
 8012054:	e011      	b.n	801207a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	79db      	ldrb	r3, [r3, #7]
 801205a:	2b02      	cmp	r3, #2
 801205c:	d10d      	bne.n	801207a <create_chain+0xe2>
 801205e:	69bb      	ldr	r3, [r7, #24]
 8012060:	3301      	adds	r3, #1
 8012062:	69fa      	ldr	r2, [r7, #28]
 8012064:	429a      	cmp	r2, r3
 8012066:	d008      	beq.n	801207a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	689b      	ldr	r3, [r3, #8]
 801206c:	69ba      	ldr	r2, [r7, #24]
 801206e:	1ad2      	subs	r2, r2, r3
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2203      	movs	r2, #3
 8012078:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	79db      	ldrb	r3, [r3, #7]
 801207e:	2b02      	cmp	r3, #2
 8012080:	d064      	beq.n	801214c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	3301      	adds	r3, #1
 8012086:	69fa      	ldr	r2, [r7, #28]
 8012088:	429a      	cmp	r2, r3
 801208a:	d10b      	bne.n	80120a4 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	69db      	ldr	r3, [r3, #28]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d003      	beq.n	801209c <create_chain+0x104>
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	69db      	ldr	r3, [r3, #28]
 8012098:	3301      	adds	r3, #1
 801209a:	e000      	b.n	801209e <create_chain+0x106>
 801209c:	2302      	movs	r3, #2
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	61d3      	str	r3, [r2, #28]
 80120a2:	e053      	b.n	801214c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	69db      	ldr	r3, [r3, #28]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d102      	bne.n	80120b2 <create_chain+0x11a>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2201      	movs	r2, #1
 80120b0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80120b2:	69fa      	ldr	r2, [r7, #28]
 80120b4:	6839      	ldr	r1, [r7, #0]
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f7ff fe89 	bl	8011dce <fill_last_frag>
 80120bc:	4603      	mov	r3, r0
 80120be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80120c0:	7dfb      	ldrb	r3, [r7, #23]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d142      	bne.n	801214c <create_chain+0x1b4>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2201      	movs	r2, #1
 80120ca:	61da      	str	r2, [r3, #28]
 80120cc:	e03e      	b.n	801214c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80120ce:	69bb      	ldr	r3, [r7, #24]
 80120d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80120d2:	69fb      	ldr	r3, [r7, #28]
 80120d4:	3301      	adds	r3, #1
 80120d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	6a1b      	ldr	r3, [r3, #32]
 80120dc:	69fa      	ldr	r2, [r7, #28]
 80120de:	429a      	cmp	r2, r3
 80120e0:	d307      	bcc.n	80120f2 <create_chain+0x15a>
				ncl = 2;
 80120e2:	2302      	movs	r3, #2
 80120e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80120e6:	69fa      	ldr	r2, [r7, #28]
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d901      	bls.n	80120f2 <create_chain+0x15a>
 80120ee:	2300      	movs	r3, #0
 80120f0:	e04f      	b.n	8012192 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80120f2:	69f9      	ldr	r1, [r7, #28]
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f7ff fac9 	bl	801168c <get_fat>
 80120fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d00e      	beq.n	8012120 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2b01      	cmp	r3, #1
 8012106:	d003      	beq.n	8012110 <create_chain+0x178>
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801210e:	d101      	bne.n	8012114 <create_chain+0x17c>
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	e03e      	b.n	8012192 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8012114:	69fa      	ldr	r2, [r7, #28]
 8012116:	69bb      	ldr	r3, [r7, #24]
 8012118:	429a      	cmp	r2, r3
 801211a:	d1da      	bne.n	80120d2 <create_chain+0x13a>
 801211c:	2300      	movs	r3, #0
 801211e:	e038      	b.n	8012192 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8012120:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012122:	f04f 32ff 	mov.w	r2, #4294967295
 8012126:	69f9      	ldr	r1, [r7, #28]
 8012128:	6938      	ldr	r0, [r7, #16]
 801212a:	f7ff fc03 	bl	8011934 <put_fat>
 801212e:	4603      	mov	r3, r0
 8012130:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012132:	7dfb      	ldrb	r3, [r7, #23]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d109      	bne.n	801214c <create_chain+0x1b4>
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d006      	beq.n	801214c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801213e:	69fa      	ldr	r2, [r7, #28]
 8012140:	6839      	ldr	r1, [r7, #0]
 8012142:	6938      	ldr	r0, [r7, #16]
 8012144:	f7ff fbf6 	bl	8011934 <put_fat>
 8012148:	4603      	mov	r3, r0
 801214a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801214c:	7dfb      	ldrb	r3, [r7, #23]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d116      	bne.n	8012180 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	69fa      	ldr	r2, [r7, #28]
 8012156:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	69da      	ldr	r2, [r3, #28]
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	6a1b      	ldr	r3, [r3, #32]
 8012160:	3b02      	subs	r3, #2
 8012162:	429a      	cmp	r2, r3
 8012164:	d804      	bhi.n	8012170 <create_chain+0x1d8>
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	69db      	ldr	r3, [r3, #28]
 801216a:	1e5a      	subs	r2, r3, #1
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	791b      	ldrb	r3, [r3, #4]
 8012174:	f043 0301 	orr.w	r3, r3, #1
 8012178:	b2da      	uxtb	r2, r3
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	711a      	strb	r2, [r3, #4]
 801217e:	e007      	b.n	8012190 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012180:	7dfb      	ldrb	r3, [r7, #23]
 8012182:	2b01      	cmp	r3, #1
 8012184:	d102      	bne.n	801218c <create_chain+0x1f4>
 8012186:	f04f 33ff 	mov.w	r3, #4294967295
 801218a:	e000      	b.n	801218e <create_chain+0x1f6>
 801218c:	2301      	movs	r3, #1
 801218e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012190:	69fb      	ldr	r3, [r7, #28]
}
 8012192:	4618      	mov	r0, r3
 8012194:	3720      	adds	r7, #32
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}

0801219a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801219a:	b590      	push	{r4, r7, lr}
 801219c:	b089      	sub	sp, #36	; 0x24
 801219e:	af00      	add	r7, sp, #0
 80121a0:	60f8      	str	r0, [r7, #12]
 80121a2:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121b0:	3304      	adds	r3, #4
 80121b2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	899b      	ldrh	r3, [r3, #12]
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	f04f 0400 	mov.w	r4, #0
 80121be:	461a      	mov	r2, r3
 80121c0:	4623      	mov	r3, r4
 80121c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80121c6:	f7ee f887 	bl	80002d8 <__aeabi_uldivmod>
 80121ca:	4603      	mov	r3, r0
 80121cc:	460c      	mov	r4, r1
 80121ce:	4618      	mov	r0, r3
 80121d0:	4621      	mov	r1, r4
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	895b      	ldrh	r3, [r3, #10]
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	f04f 0400 	mov.w	r4, #0
 80121dc:	461a      	mov	r2, r3
 80121de:	4623      	mov	r3, r4
 80121e0:	f7ee f87a 	bl	80002d8 <__aeabi_uldivmod>
 80121e4:	4603      	mov	r3, r0
 80121e6:	460c      	mov	r4, r1
 80121e8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80121ea:	69bb      	ldr	r3, [r7, #24]
 80121ec:	1d1a      	adds	r2, r3, #4
 80121ee:	61ba      	str	r2, [r7, #24]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d101      	bne.n	80121fe <clmt_clust+0x64>
 80121fa:	2300      	movs	r3, #0
 80121fc:	e010      	b.n	8012220 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 80121fe:	69fa      	ldr	r2, [r7, #28]
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	429a      	cmp	r2, r3
 8012204:	d307      	bcc.n	8012216 <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 8012206:	69fa      	ldr	r2, [r7, #28]
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	61fb      	str	r3, [r7, #28]
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	3304      	adds	r3, #4
 8012212:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012214:	e7e9      	b.n	80121ea <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 8012216:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012218:	69bb      	ldr	r3, [r7, #24]
 801221a:	681a      	ldr	r2, [r3, #0]
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	4413      	add	r3, r2
}
 8012220:	4618      	mov	r0, r3
 8012222:	3724      	adds	r7, #36	; 0x24
 8012224:	46bd      	mov	sp, r7
 8012226:	bd90      	pop	{r4, r7, pc}

08012228 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b086      	sub	sp, #24
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	2b04      	cmp	r3, #4
 801223e:	d102      	bne.n	8012246 <dir_sdi+0x1e>
 8012240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012244:	e001      	b.n	801224a <dir_sdi+0x22>
 8012246:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	429a      	cmp	r2, r3
 801224e:	d904      	bls.n	801225a <dir_sdi+0x32>
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	f003 031f 	and.w	r3, r3, #31
 8012256:	2b00      	cmp	r3, #0
 8012258:	d001      	beq.n	801225e <dir_sdi+0x36>
		return FR_INT_ERR;
 801225a:	2302      	movs	r3, #2
 801225c:	e074      	b.n	8012348 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	683a      	ldr	r2, [r7, #0]
 8012262:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	689b      	ldr	r3, [r3, #8]
 8012268:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d109      	bne.n	8012284 <dir_sdi+0x5c>
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	2b02      	cmp	r3, #2
 8012276:	d905      	bls.n	8012284 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801227c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2200      	movs	r2, #0
 8012282:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d10c      	bne.n	80122a4 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	095b      	lsrs	r3, r3, #5
 801228e:	693a      	ldr	r2, [r7, #16]
 8012290:	8912      	ldrh	r2, [r2, #8]
 8012292:	4293      	cmp	r3, r2
 8012294:	d301      	bcc.n	801229a <dir_sdi+0x72>
 8012296:	2302      	movs	r3, #2
 8012298:	e056      	b.n	8012348 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	639a      	str	r2, [r3, #56]	; 0x38
 80122a2:	e02d      	b.n	8012300 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	895b      	ldrh	r3, [r3, #10]
 80122a8:	461a      	mov	r2, r3
 80122aa:	693b      	ldr	r3, [r7, #16]
 80122ac:	899b      	ldrh	r3, [r3, #12]
 80122ae:	fb03 f302 	mul.w	r3, r3, r2
 80122b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80122b4:	e019      	b.n	80122ea <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6979      	ldr	r1, [r7, #20]
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7ff f9e6 	bl	801168c <get_fat>
 80122c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122c8:	d101      	bne.n	80122ce <dir_sdi+0xa6>
 80122ca:	2301      	movs	r3, #1
 80122cc:	e03c      	b.n	8012348 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d904      	bls.n	80122de <dir_sdi+0xb6>
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	6a1b      	ldr	r3, [r3, #32]
 80122d8:	697a      	ldr	r2, [r7, #20]
 80122da:	429a      	cmp	r2, r3
 80122dc:	d301      	bcc.n	80122e2 <dir_sdi+0xba>
 80122de:	2302      	movs	r3, #2
 80122e0:	e032      	b.n	8012348 <dir_sdi+0x120>
			ofs -= csz;
 80122e2:	683a      	ldr	r2, [r7, #0]
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	1ad3      	subs	r3, r2, r3
 80122e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80122ea:	683a      	ldr	r2, [r7, #0]
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d2e1      	bcs.n	80122b6 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 80122f2:	6979      	ldr	r1, [r7, #20]
 80122f4:	6938      	ldr	r0, [r7, #16]
 80122f6:	f7ff f9a9 	bl	801164c <clust2sect>
 80122fa:	4602      	mov	r2, r0
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	697a      	ldr	r2, [r7, #20]
 8012304:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801230a:	2b00      	cmp	r3, #0
 801230c:	d101      	bne.n	8012312 <dir_sdi+0xea>
 801230e:	2302      	movs	r3, #2
 8012310:	e01a      	b.n	8012348 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	899b      	ldrh	r3, [r3, #12]
 801231a:	4619      	mov	r1, r3
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012322:	441a      	add	r2, r3
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	899b      	ldrh	r3, [r3, #12]
 8012332:	461a      	mov	r2, r3
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	fbb3 f0f2 	udiv	r0, r3, r2
 801233a:	fb02 f200 	mul.w	r2, r2, r0
 801233e:	1a9b      	subs	r3, r3, r2
 8012340:	18ca      	adds	r2, r1, r3
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8012346:	2300      	movs	r3, #0
}
 8012348:	4618      	mov	r0, r3
 801234a:	3718      	adds	r7, #24
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b086      	sub	sp, #24
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012364:	3320      	adds	r3, #32
 8012366:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801236c:	2b00      	cmp	r3, #0
 801236e:	d00b      	beq.n	8012388 <dir_next+0x38>
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	2b04      	cmp	r3, #4
 8012376:	d102      	bne.n	801237e <dir_next+0x2e>
 8012378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801237c:	e001      	b.n	8012382 <dir_next+0x32>
 801237e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	429a      	cmp	r2, r3
 8012386:	d801      	bhi.n	801238c <dir_next+0x3c>
 8012388:	2304      	movs	r3, #4
 801238a:	e0c3      	b.n	8012514 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	899b      	ldrh	r3, [r3, #12]
 8012390:	461a      	mov	r2, r3
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	fbb3 f1f2 	udiv	r1, r3, r2
 8012398:	fb02 f201 	mul.w	r2, r2, r1
 801239c:	1a9b      	subs	r3, r3, r2
 801239e:	2b00      	cmp	r3, #0
 80123a0:	f040 80a5 	bne.w	80124ee <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123a8:	1c5a      	adds	r2, r3, #1
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d10b      	bne.n	80123ce <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	095b      	lsrs	r3, r3, #5
 80123ba:	68fa      	ldr	r2, [r7, #12]
 80123bc:	8912      	ldrh	r2, [r2, #8]
 80123be:	4293      	cmp	r3, r2
 80123c0:	f0c0 8095 	bcc.w	80124ee <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2200      	movs	r2, #0
 80123c8:	639a      	str	r2, [r3, #56]	; 0x38
 80123ca:	2304      	movs	r3, #4
 80123cc:	e0a2      	b.n	8012514 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	899b      	ldrh	r3, [r3, #12]
 80123d2:	461a      	mov	r2, r3
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80123da:	68fa      	ldr	r2, [r7, #12]
 80123dc:	8952      	ldrh	r2, [r2, #10]
 80123de:	3a01      	subs	r2, #1
 80123e0:	4013      	ands	r3, r2
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	f040 8083 	bne.w	80124ee <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80123e8:	687a      	ldr	r2, [r7, #4]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ee:	4619      	mov	r1, r3
 80123f0:	4610      	mov	r0, r2
 80123f2:	f7ff f94b 	bl	801168c <get_fat>
 80123f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	2b01      	cmp	r3, #1
 80123fc:	d801      	bhi.n	8012402 <dir_next+0xb2>
 80123fe:	2302      	movs	r3, #2
 8012400:	e088      	b.n	8012514 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012408:	d101      	bne.n	801240e <dir_next+0xbe>
 801240a:	2301      	movs	r3, #1
 801240c:	e082      	b.n	8012514 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	6a1b      	ldr	r3, [r3, #32]
 8012412:	697a      	ldr	r2, [r7, #20]
 8012414:	429a      	cmp	r2, r3
 8012416:	d360      	bcc.n	80124da <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d104      	bne.n	8012428 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2200      	movs	r2, #0
 8012422:	639a      	str	r2, [r3, #56]	; 0x38
 8012424:	2304      	movs	r3, #4
 8012426:	e075      	b.n	8012514 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012428:	687a      	ldr	r2, [r7, #4]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801242e:	4619      	mov	r1, r3
 8012430:	4610      	mov	r0, r2
 8012432:	f7ff fdb1 	bl	8011f98 <create_chain>
 8012436:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d101      	bne.n	8012442 <dir_next+0xf2>
 801243e:	2307      	movs	r3, #7
 8012440:	e068      	b.n	8012514 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d101      	bne.n	801244c <dir_next+0xfc>
 8012448:	2302      	movs	r3, #2
 801244a:	e063      	b.n	8012514 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012452:	d101      	bne.n	8012458 <dir_next+0x108>
 8012454:	2301      	movs	r3, #1
 8012456:	e05d      	b.n	8012514 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	79db      	ldrb	r3, [r3, #7]
 801245c:	f043 0304 	orr.w	r3, r3, #4
 8012460:	b2da      	uxtb	r2, r3
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012466:	68f8      	ldr	r0, [r7, #12]
 8012468:	f7ff f80e 	bl	8011488 <sync_window>
 801246c:	4603      	mov	r3, r0
 801246e:	2b00      	cmp	r3, #0
 8012470:	d001      	beq.n	8012476 <dir_next+0x126>
 8012472:	2301      	movs	r3, #1
 8012474:	e04e      	b.n	8012514 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	899b      	ldrh	r3, [r3, #12]
 8012480:	461a      	mov	r2, r3
 8012482:	2100      	movs	r1, #0
 8012484:	f7fe fe37 	bl	80110f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012488:	2300      	movs	r3, #0
 801248a:	613b      	str	r3, [r7, #16]
 801248c:	6979      	ldr	r1, [r7, #20]
 801248e:	68f8      	ldr	r0, [r7, #12]
 8012490:	f7ff f8dc 	bl	801164c <clust2sect>
 8012494:	4602      	mov	r2, r0
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	639a      	str	r2, [r3, #56]	; 0x38
 801249a:	e012      	b.n	80124c2 <dir_next+0x172>
						fs->wflag = 1;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2201      	movs	r2, #1
 80124a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80124a2:	68f8      	ldr	r0, [r7, #12]
 80124a4:	f7fe fff0 	bl	8011488 <sync_window>
 80124a8:	4603      	mov	r3, r0
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d001      	beq.n	80124b2 <dir_next+0x162>
 80124ae:	2301      	movs	r3, #1
 80124b0:	e030      	b.n	8012514 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	3301      	adds	r3, #1
 80124b6:	613b      	str	r3, [r7, #16]
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124bc:	1c5a      	adds	r2, r3, #1
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	639a      	str	r2, [r3, #56]	; 0x38
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	895b      	ldrh	r3, [r3, #10]
 80124c6:	461a      	mov	r2, r3
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d3e6      	bcc.n	801249c <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	1ad2      	subs	r2, r2, r3
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	697a      	ldr	r2, [r7, #20]
 80124de:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 80124e0:	6979      	ldr	r1, [r7, #20]
 80124e2:	68f8      	ldr	r0, [r7, #12]
 80124e4:	f7ff f8b2 	bl	801164c <clust2sect>
 80124e8:	4602      	mov	r2, r0
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	68ba      	ldr	r2, [r7, #8]
 80124f2:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	899b      	ldrh	r3, [r3, #12]
 80124fe:	461a      	mov	r2, r3
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	fbb3 f0f2 	udiv	r0, r3, r2
 8012506:	fb02 f200 	mul.w	r2, r2, r0
 801250a:	1a9b      	subs	r3, r3, r2
 801250c:	18ca      	adds	r2, r1, r3
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8012512:	2300      	movs	r3, #0
}
 8012514:	4618      	mov	r0, r3
 8012516:	3718      	adds	r7, #24
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}

0801251c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b086      	sub	sp, #24
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801252c:	2100      	movs	r1, #0
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f7ff fe7a 	bl	8012228 <dir_sdi>
 8012534:	4603      	mov	r3, r0
 8012536:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012538:	7dfb      	ldrb	r3, [r7, #23]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d140      	bne.n	80125c0 <dir_alloc+0xa4>
		n = 0;
 801253e:	2300      	movs	r3, #0
 8012540:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012546:	4619      	mov	r1, r3
 8012548:	68f8      	ldr	r0, [r7, #12]
 801254a:	f7fe ffe1 	bl	8011510 <move_window>
 801254e:	4603      	mov	r3, r0
 8012550:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012552:	7dfb      	ldrb	r3, [r7, #23]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d132      	bne.n	80125be <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	2b04      	cmp	r3, #4
 801255e:	d108      	bne.n	8012572 <dir_alloc+0x56>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012564:	781b      	ldrb	r3, [r3, #0]
 8012566:	b25b      	sxtb	r3, r3
 8012568:	43db      	mvns	r3, r3
 801256a:	b2db      	uxtb	r3, r3
 801256c:	09db      	lsrs	r3, r3, #7
 801256e:	b2db      	uxtb	r3, r3
 8012570:	e00f      	b.n	8012592 <dir_alloc+0x76>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	2be5      	cmp	r3, #229	; 0xe5
 801257a:	d004      	beq.n	8012586 <dir_alloc+0x6a>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d101      	bne.n	801258a <dir_alloc+0x6e>
 8012586:	2301      	movs	r3, #1
 8012588:	e000      	b.n	801258c <dir_alloc+0x70>
 801258a:	2300      	movs	r3, #0
 801258c:	f003 0301 	and.w	r3, r3, #1
 8012590:	b2db      	uxtb	r3, r3
 8012592:	2b00      	cmp	r3, #0
 8012594:	d007      	beq.n	80125a6 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012596:	693b      	ldr	r3, [r7, #16]
 8012598:	3301      	adds	r3, #1
 801259a:	613b      	str	r3, [r7, #16]
 801259c:	693a      	ldr	r2, [r7, #16]
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d102      	bne.n	80125aa <dir_alloc+0x8e>
 80125a4:	e00c      	b.n	80125c0 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80125a6:	2300      	movs	r3, #0
 80125a8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80125aa:	2101      	movs	r1, #1
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ff fecf 	bl	8012350 <dir_next>
 80125b2:	4603      	mov	r3, r0
 80125b4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80125b6:	7dfb      	ldrb	r3, [r7, #23]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d0c2      	beq.n	8012542 <dir_alloc+0x26>
 80125bc:	e000      	b.n	80125c0 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 80125be:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80125c0:	7dfb      	ldrb	r3, [r7, #23]
 80125c2:	2b04      	cmp	r3, #4
 80125c4:	d101      	bne.n	80125ca <dir_alloc+0xae>
 80125c6:	2307      	movs	r3, #7
 80125c8:	75fb      	strb	r3, [r7, #23]
	return res;
 80125ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3718      	adds	r7, #24
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b084      	sub	sp, #16
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	331a      	adds	r3, #26
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fe fba0 	bl	8010d28 <ld_word>
 80125e8:	4603      	mov	r3, r0
 80125ea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	781b      	ldrb	r3, [r3, #0]
 80125f0:	2b03      	cmp	r3, #3
 80125f2:	d109      	bne.n	8012608 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	3314      	adds	r3, #20
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7fe fb95 	bl	8010d28 <ld_word>
 80125fe:	4603      	mov	r3, r0
 8012600:	041b      	lsls	r3, r3, #16
 8012602:	68fa      	ldr	r2, [r7, #12]
 8012604:	4313      	orrs	r3, r2
 8012606:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012608:	68fb      	ldr	r3, [r7, #12]
}
 801260a:	4618      	mov	r0, r3
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}

08012612 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012612:	b580      	push	{r7, lr}
 8012614:	b084      	sub	sp, #16
 8012616:	af00      	add	r7, sp, #0
 8012618:	60f8      	str	r0, [r7, #12]
 801261a:	60b9      	str	r1, [r7, #8]
 801261c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	331a      	adds	r3, #26
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	b292      	uxth	r2, r2
 8012626:	4611      	mov	r1, r2
 8012628:	4618      	mov	r0, r3
 801262a:	f7fe fc75 	bl	8010f18 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	2b03      	cmp	r3, #3
 8012634:	d109      	bne.n	801264a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	f103 0214 	add.w	r2, r3, #20
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	0c1b      	lsrs	r3, r3, #16
 8012640:	b29b      	uxth	r3, r3
 8012642:	4619      	mov	r1, r3
 8012644:	4610      	mov	r0, r2
 8012646:	f7fe fc67 	bl	8010f18 <st_word>
	}
}
 801264a:	bf00      	nop
 801264c:	3710      	adds	r7, #16
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
	...

08012654 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012654:	b590      	push	{r4, r7, lr}
 8012656:	b087      	sub	sp, #28
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	331a      	adds	r3, #26
 8012662:	4618      	mov	r0, r3
 8012664:	f7fe fb60 	bl	8010d28 <ld_word>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <cmp_lfn+0x1e>
 801266e:	2300      	movs	r3, #0
 8012670:	e059      	b.n	8012726 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801267a:	1e5a      	subs	r2, r3, #1
 801267c:	4613      	mov	r3, r2
 801267e:	005b      	lsls	r3, r3, #1
 8012680:	4413      	add	r3, r2
 8012682:	009b      	lsls	r3, r3, #2
 8012684:	4413      	add	r3, r2
 8012686:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012688:	2301      	movs	r3, #1
 801268a:	81fb      	strh	r3, [r7, #14]
 801268c:	2300      	movs	r3, #0
 801268e:	613b      	str	r3, [r7, #16]
 8012690:	e033      	b.n	80126fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012692:	4a27      	ldr	r2, [pc, #156]	; (8012730 <cmp_lfn+0xdc>)
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	4413      	add	r3, r2
 8012698:	781b      	ldrb	r3, [r3, #0]
 801269a:	461a      	mov	r2, r3
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	4413      	add	r3, r2
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7fe fb41 	bl	8010d28 <ld_word>
 80126a6:	4603      	mov	r3, r0
 80126a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80126aa:	89fb      	ldrh	r3, [r7, #14]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d01a      	beq.n	80126e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	2bfe      	cmp	r3, #254	; 0xfe
 80126b4:	d812      	bhi.n	80126dc <cmp_lfn+0x88>
 80126b6:	89bb      	ldrh	r3, [r7, #12]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f003 fc67 	bl	8015f8c <ff_wtoupper>
 80126be:	4603      	mov	r3, r0
 80126c0:	461c      	mov	r4, r3
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	1c5a      	adds	r2, r3, #1
 80126c6:	617a      	str	r2, [r7, #20]
 80126c8:	005b      	lsls	r3, r3, #1
 80126ca:	687a      	ldr	r2, [r7, #4]
 80126cc:	4413      	add	r3, r2
 80126ce:	881b      	ldrh	r3, [r3, #0]
 80126d0:	4618      	mov	r0, r3
 80126d2:	f003 fc5b 	bl	8015f8c <ff_wtoupper>
 80126d6:	4603      	mov	r3, r0
 80126d8:	429c      	cmp	r4, r3
 80126da:	d001      	beq.n	80126e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80126dc:	2300      	movs	r3, #0
 80126de:	e022      	b.n	8012726 <cmp_lfn+0xd2>
			}
			wc = uc;
 80126e0:	89bb      	ldrh	r3, [r7, #12]
 80126e2:	81fb      	strh	r3, [r7, #14]
 80126e4:	e006      	b.n	80126f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80126e6:	89bb      	ldrh	r3, [r7, #12]
 80126e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126ec:	4293      	cmp	r3, r2
 80126ee:	d001      	beq.n	80126f4 <cmp_lfn+0xa0>
 80126f0:	2300      	movs	r3, #0
 80126f2:	e018      	b.n	8012726 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	3301      	adds	r3, #1
 80126f8:	613b      	str	r3, [r7, #16]
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	2b0c      	cmp	r3, #12
 80126fe:	d9c8      	bls.n	8012692 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012708:	2b00      	cmp	r3, #0
 801270a:	d00b      	beq.n	8012724 <cmp_lfn+0xd0>
 801270c:	89fb      	ldrh	r3, [r7, #14]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d008      	beq.n	8012724 <cmp_lfn+0xd0>
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	005b      	lsls	r3, r3, #1
 8012716:	687a      	ldr	r2, [r7, #4]
 8012718:	4413      	add	r3, r2
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d001      	beq.n	8012724 <cmp_lfn+0xd0>
 8012720:	2300      	movs	r3, #0
 8012722:	e000      	b.n	8012726 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012724:	2301      	movs	r3, #1
}
 8012726:	4618      	mov	r0, r3
 8012728:	371c      	adds	r7, #28
 801272a:	46bd      	mov	sp, r7
 801272c:	bd90      	pop	{r4, r7, pc}
 801272e:	bf00      	nop
 8012730:	08016ed8 	.word	0x08016ed8

08012734 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b086      	sub	sp, #24
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	331a      	adds	r3, #26
 8012742:	4618      	mov	r0, r3
 8012744:	f7fe faf0 	bl	8010d28 <ld_word>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d001      	beq.n	8012752 <pick_lfn+0x1e>
 801274e:	2300      	movs	r3, #0
 8012750:	e04d      	b.n	80127ee <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801275a:	1e5a      	subs	r2, r3, #1
 801275c:	4613      	mov	r3, r2
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	4413      	add	r3, r2
 8012762:	009b      	lsls	r3, r3, #2
 8012764:	4413      	add	r3, r2
 8012766:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012768:	2301      	movs	r3, #1
 801276a:	81fb      	strh	r3, [r7, #14]
 801276c:	2300      	movs	r3, #0
 801276e:	613b      	str	r3, [r7, #16]
 8012770:	e028      	b.n	80127c4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012772:	4a21      	ldr	r2, [pc, #132]	; (80127f8 <pick_lfn+0xc4>)
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	4413      	add	r3, r2
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	461a      	mov	r2, r3
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	4413      	add	r3, r2
 8012780:	4618      	mov	r0, r3
 8012782:	f7fe fad1 	bl	8010d28 <ld_word>
 8012786:	4603      	mov	r3, r0
 8012788:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801278a:	89fb      	ldrh	r3, [r7, #14]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d00f      	beq.n	80127b0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	2bfe      	cmp	r3, #254	; 0xfe
 8012794:	d901      	bls.n	801279a <pick_lfn+0x66>
 8012796:	2300      	movs	r3, #0
 8012798:	e029      	b.n	80127ee <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801279a:	89bb      	ldrh	r3, [r7, #12]
 801279c:	81fb      	strh	r3, [r7, #14]
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	1c5a      	adds	r2, r3, #1
 80127a2:	617a      	str	r2, [r7, #20]
 80127a4:	005b      	lsls	r3, r3, #1
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	4413      	add	r3, r2
 80127aa:	89fa      	ldrh	r2, [r7, #14]
 80127ac:	801a      	strh	r2, [r3, #0]
 80127ae:	e006      	b.n	80127be <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80127b0:	89bb      	ldrh	r3, [r7, #12]
 80127b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d001      	beq.n	80127be <pick_lfn+0x8a>
 80127ba:	2300      	movs	r3, #0
 80127bc:	e017      	b.n	80127ee <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	3301      	adds	r3, #1
 80127c2:	613b      	str	r3, [r7, #16]
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	2b0c      	cmp	r3, #12
 80127c8:	d9d3      	bls.n	8012772 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d00a      	beq.n	80127ec <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	2bfe      	cmp	r3, #254	; 0xfe
 80127da:	d901      	bls.n	80127e0 <pick_lfn+0xac>
 80127dc:	2300      	movs	r3, #0
 80127de:	e006      	b.n	80127ee <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	005b      	lsls	r3, r3, #1
 80127e4:	687a      	ldr	r2, [r7, #4]
 80127e6:	4413      	add	r3, r2
 80127e8:	2200      	movs	r2, #0
 80127ea:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80127ec:	2301      	movs	r3, #1
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3718      	adds	r7, #24
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
 80127f6:	bf00      	nop
 80127f8:	08016ed8 	.word	0x08016ed8

080127fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b088      	sub	sp, #32
 8012800:	af00      	add	r7, sp, #0
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	4611      	mov	r1, r2
 8012808:	461a      	mov	r2, r3
 801280a:	460b      	mov	r3, r1
 801280c:	71fb      	strb	r3, [r7, #7]
 801280e:	4613      	mov	r3, r2
 8012810:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	330d      	adds	r3, #13
 8012816:	79ba      	ldrb	r2, [r7, #6]
 8012818:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	330b      	adds	r3, #11
 801281e:	220f      	movs	r2, #15
 8012820:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	330c      	adds	r3, #12
 8012826:	2200      	movs	r2, #0
 8012828:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	331a      	adds	r3, #26
 801282e:	2100      	movs	r1, #0
 8012830:	4618      	mov	r0, r3
 8012832:	f7fe fb71 	bl	8010f18 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012836:	79fb      	ldrb	r3, [r7, #7]
 8012838:	1e5a      	subs	r2, r3, #1
 801283a:	4613      	mov	r3, r2
 801283c:	005b      	lsls	r3, r3, #1
 801283e:	4413      	add	r3, r2
 8012840:	009b      	lsls	r3, r3, #2
 8012842:	4413      	add	r3, r2
 8012844:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012846:	2300      	movs	r3, #0
 8012848:	82fb      	strh	r3, [r7, #22]
 801284a:	2300      	movs	r3, #0
 801284c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801284e:	8afb      	ldrh	r3, [r7, #22]
 8012850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012854:	4293      	cmp	r3, r2
 8012856:	d007      	beq.n	8012868 <put_lfn+0x6c>
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	1c5a      	adds	r2, r3, #1
 801285c:	61fa      	str	r2, [r7, #28]
 801285e:	005b      	lsls	r3, r3, #1
 8012860:	68fa      	ldr	r2, [r7, #12]
 8012862:	4413      	add	r3, r2
 8012864:	881b      	ldrh	r3, [r3, #0]
 8012866:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012868:	4a17      	ldr	r2, [pc, #92]	; (80128c8 <put_lfn+0xcc>)
 801286a:	69bb      	ldr	r3, [r7, #24]
 801286c:	4413      	add	r3, r2
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	461a      	mov	r2, r3
 8012872:	68bb      	ldr	r3, [r7, #8]
 8012874:	4413      	add	r3, r2
 8012876:	8afa      	ldrh	r2, [r7, #22]
 8012878:	4611      	mov	r1, r2
 801287a:	4618      	mov	r0, r3
 801287c:	f7fe fb4c 	bl	8010f18 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012880:	8afb      	ldrh	r3, [r7, #22]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d102      	bne.n	801288c <put_lfn+0x90>
 8012886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801288a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801288c:	69bb      	ldr	r3, [r7, #24]
 801288e:	3301      	adds	r3, #1
 8012890:	61bb      	str	r3, [r7, #24]
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	2b0c      	cmp	r3, #12
 8012896:	d9da      	bls.n	801284e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012898:	8afb      	ldrh	r3, [r7, #22]
 801289a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801289e:	4293      	cmp	r3, r2
 80128a0:	d006      	beq.n	80128b0 <put_lfn+0xb4>
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	005b      	lsls	r3, r3, #1
 80128a6:	68fa      	ldr	r2, [r7, #12]
 80128a8:	4413      	add	r3, r2
 80128aa:	881b      	ldrh	r3, [r3, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d103      	bne.n	80128b8 <put_lfn+0xbc>
 80128b0:	79fb      	ldrb	r3, [r7, #7]
 80128b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	79fa      	ldrb	r2, [r7, #7]
 80128bc:	701a      	strb	r2, [r3, #0]
}
 80128be:	bf00      	nop
 80128c0:	3720      	adds	r7, #32
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	08016ed8 	.word	0x08016ed8

080128cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b08c      	sub	sp, #48	; 0x30
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	607a      	str	r2, [r7, #4]
 80128d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80128da:	220b      	movs	r2, #11
 80128dc:	68b9      	ldr	r1, [r7, #8]
 80128de:	68f8      	ldr	r0, [r7, #12]
 80128e0:	f7fe fbe8 	bl	80110b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	2b05      	cmp	r3, #5
 80128e8:	d929      	bls.n	801293e <gen_numname+0x72>
		sr = seq;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80128ee:	e020      	b.n	8012932 <gen_numname+0x66>
			wc = *lfn++;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	1c9a      	adds	r2, r3, #2
 80128f4:	607a      	str	r2, [r7, #4]
 80128f6:	881b      	ldrh	r3, [r3, #0]
 80128f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80128fa:	2300      	movs	r3, #0
 80128fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80128fe:	e015      	b.n	801292c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	005a      	lsls	r2, r3, #1
 8012904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012906:	f003 0301 	and.w	r3, r3, #1
 801290a:	4413      	add	r3, r2
 801290c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801290e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012910:	085b      	lsrs	r3, r3, #1
 8012912:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012914:	69fb      	ldr	r3, [r7, #28]
 8012916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801291a:	2b00      	cmp	r3, #0
 801291c:	d003      	beq.n	8012926 <gen_numname+0x5a>
 801291e:	69fa      	ldr	r2, [r7, #28]
 8012920:	4b31      	ldr	r3, [pc, #196]	; (80129e8 <gen_numname+0x11c>)
 8012922:	4053      	eors	r3, r2
 8012924:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012928:	3301      	adds	r3, #1
 801292a:	62bb      	str	r3, [r7, #40]	; 0x28
 801292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292e:	2b0f      	cmp	r3, #15
 8012930:	d9e6      	bls.n	8012900 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	881b      	ldrh	r3, [r3, #0]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d1da      	bne.n	80128f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801293e:	2307      	movs	r3, #7
 8012940:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	b2db      	uxtb	r3, r3
 8012946:	f003 030f 	and.w	r3, r3, #15
 801294a:	b2db      	uxtb	r3, r3
 801294c:	3330      	adds	r3, #48	; 0x30
 801294e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8012952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012956:	2b39      	cmp	r3, #57	; 0x39
 8012958:	d904      	bls.n	8012964 <gen_numname+0x98>
 801295a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801295e:	3307      	adds	r3, #7
 8012960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8012964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012966:	1e5a      	subs	r2, r3, #1
 8012968:	62ba      	str	r2, [r7, #40]	; 0x28
 801296a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801296e:	4413      	add	r3, r2
 8012970:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012974:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	091b      	lsrs	r3, r3, #4
 801297c:	603b      	str	r3, [r7, #0]
	} while (seq);
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d1de      	bne.n	8012942 <gen_numname+0x76>
	ns[i] = '~';
 8012984:	f107 0214 	add.w	r2, r7, #20
 8012988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801298a:	4413      	add	r3, r2
 801298c:	227e      	movs	r2, #126	; 0x7e
 801298e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012990:	2300      	movs	r3, #0
 8012992:	627b      	str	r3, [r7, #36]	; 0x24
 8012994:	e002      	b.n	801299c <gen_numname+0xd0>
 8012996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012998:	3301      	adds	r3, #1
 801299a:	627b      	str	r3, [r7, #36]	; 0x24
 801299c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d205      	bcs.n	80129b0 <gen_numname+0xe4>
 80129a4:	68fa      	ldr	r2, [r7, #12]
 80129a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a8:	4413      	add	r3, r2
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	2b20      	cmp	r3, #32
 80129ae:	d1f2      	bne.n	8012996 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80129b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b2:	2b07      	cmp	r3, #7
 80129b4:	d808      	bhi.n	80129c8 <gen_numname+0xfc>
 80129b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b8:	1c5a      	adds	r2, r3, #1
 80129ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80129bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80129c0:	4413      	add	r3, r2
 80129c2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80129c6:	e000      	b.n	80129ca <gen_numname+0xfe>
 80129c8:	2120      	movs	r1, #32
 80129ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129cc:	1c5a      	adds	r2, r3, #1
 80129ce:	627a      	str	r2, [r7, #36]	; 0x24
 80129d0:	68fa      	ldr	r2, [r7, #12]
 80129d2:	4413      	add	r3, r2
 80129d4:	460a      	mov	r2, r1
 80129d6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80129d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129da:	2b07      	cmp	r3, #7
 80129dc:	d9e8      	bls.n	80129b0 <gen_numname+0xe4>
}
 80129de:	bf00      	nop
 80129e0:	3730      	adds	r7, #48	; 0x30
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
 80129e6:	bf00      	nop
 80129e8:	00011021 	.word	0x00011021

080129ec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80129ec:	b480      	push	{r7}
 80129ee:	b085      	sub	sp, #20
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80129f4:	2300      	movs	r3, #0
 80129f6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80129f8:	230b      	movs	r3, #11
 80129fa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80129fc:	7bfb      	ldrb	r3, [r7, #15]
 80129fe:	b2da      	uxtb	r2, r3
 8012a00:	0852      	lsrs	r2, r2, #1
 8012a02:	01db      	lsls	r3, r3, #7
 8012a04:	4313      	orrs	r3, r2
 8012a06:	b2da      	uxtb	r2, r3
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	1c59      	adds	r1, r3, #1
 8012a0c:	6079      	str	r1, [r7, #4]
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	4413      	add	r3, r2
 8012a12:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	3b01      	subs	r3, #1
 8012a18:	60bb      	str	r3, [r7, #8]
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d1ed      	bne.n	80129fc <sum_sfn+0x10>
	return sum;
 8012a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3714      	adds	r7, #20
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr

08012a2e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8012a2e:	b480      	push	{r7}
 8012a30:	b087      	sub	sp, #28
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	015b      	lsls	r3, r3, #5
 8012a40:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8012a42:	2300      	movs	r3, #0
 8012a44:	827b      	strh	r3, [r7, #18]
 8012a46:	2300      	movs	r3, #0
 8012a48:	617b      	str	r3, [r7, #20]
 8012a4a:	e018      	b.n	8012a7e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	2b02      	cmp	r3, #2
 8012a50:	d103      	bne.n	8012a5a <xdir_sum+0x2c>
			i++;
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	3301      	adds	r3, #1
 8012a56:	617b      	str	r3, [r7, #20]
 8012a58:	e00e      	b.n	8012a78 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8012a5a:	8a7b      	ldrh	r3, [r7, #18]
 8012a5c:	03db      	lsls	r3, r3, #15
 8012a5e:	b29a      	uxth	r2, r3
 8012a60:	8a7b      	ldrh	r3, [r7, #18]
 8012a62:	085b      	lsrs	r3, r3, #1
 8012a64:	b29b      	uxth	r3, r3
 8012a66:	4413      	add	r3, r2
 8012a68:	b29a      	uxth	r2, r3
 8012a6a:	6879      	ldr	r1, [r7, #4]
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	440b      	add	r3, r1
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	4413      	add	r3, r2
 8012a76:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	617b      	str	r3, [r7, #20]
 8012a7e:	697a      	ldr	r2, [r7, #20]
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d3e2      	bcc.n	8012a4c <xdir_sum+0x1e>
		}
	}
	return sum;
 8012a86:	8a7b      	ldrh	r3, [r7, #18]
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	371c      	adds	r7, #28
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b084      	sub	sp, #16
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8012aa0:	e01f      	b.n	8012ae2 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8012aa2:	89bb      	ldrh	r3, [r7, #12]
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f003 fa71 	bl	8015f8c <ff_wtoupper>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8012aae:	89fb      	ldrh	r3, [r7, #14]
 8012ab0:	03db      	lsls	r3, r3, #15
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	89fb      	ldrh	r3, [r7, #14]
 8012ab6:	085b      	lsrs	r3, r3, #1
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	4413      	add	r3, r2
 8012abc:	b29a      	uxth	r2, r3
 8012abe:	89bb      	ldrh	r3, [r7, #12]
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	4413      	add	r3, r2
 8012ac6:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8012ac8:	89fb      	ldrh	r3, [r7, #14]
 8012aca:	03db      	lsls	r3, r3, #15
 8012acc:	b29a      	uxth	r2, r3
 8012ace:	89fb      	ldrh	r3, [r7, #14]
 8012ad0:	085b      	lsrs	r3, r3, #1
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	4413      	add	r3, r2
 8012ad6:	b29a      	uxth	r2, r3
 8012ad8:	89bb      	ldrh	r3, [r7, #12]
 8012ada:	0a1b      	lsrs	r3, r3, #8
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	4413      	add	r3, r2
 8012ae0:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	1c9a      	adds	r2, r3, #2
 8012ae6:	607a      	str	r2, [r7, #4]
 8012ae8:	881b      	ldrh	r3, [r3, #0]
 8012aea:	81bb      	strh	r3, [r7, #12]
 8012aec:	89bb      	ldrh	r3, [r7, #12]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d1d7      	bne.n	8012aa2 <xname_sum+0xe>
	}
	return sum;
 8012af2:	89fb      	ldrh	r3, [r7, #14]
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	3710      	adds	r7, #16
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8012afc:	b590      	push	{r4, r7, lr}
 8012afe:	b087      	sub	sp, #28
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	695b      	ldr	r3, [r3, #20]
 8012b0a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b14:	4619      	mov	r1, r3
 8012b16:	4610      	mov	r0, r2
 8012b18:	f7fe fcfa 	bl	8011510 <move_window>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8012b20:	7bfb      	ldrb	r3, [r7, #15]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d001      	beq.n	8012b2a <load_xdir+0x2e>
 8012b26:	7bfb      	ldrb	r3, [r7, #15]
 8012b28:	e09f      	b.n	8012c6a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	2b85      	cmp	r3, #133	; 0x85
 8012b32:	d001      	beq.n	8012b38 <load_xdir+0x3c>
 8012b34:	2302      	movs	r3, #2
 8012b36:	e098      	b.n	8012c6a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b3c:	2220      	movs	r2, #32
 8012b3e:	4619      	mov	r1, r3
 8012b40:	6938      	ldr	r0, [r7, #16]
 8012b42:	f7fe fab7 	bl	80110b4 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	015b      	lsls	r3, r3, #5
 8012b50:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	2b5f      	cmp	r3, #95	; 0x5f
 8012b56:	d903      	bls.n	8012b60 <load_xdir+0x64>
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8012b5e:	d901      	bls.n	8012b64 <load_xdir+0x68>
 8012b60:	2302      	movs	r3, #2
 8012b62:	e082      	b.n	8012c6a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8012b64:	2100      	movs	r1, #0
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f7ff fbf2 	bl	8012350 <dir_next>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8012b70:	7bfb      	ldrb	r3, [r7, #15]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d001      	beq.n	8012b7a <load_xdir+0x7e>
 8012b76:	7bfb      	ldrb	r3, [r7, #15]
 8012b78:	e077      	b.n	8012c6a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681a      	ldr	r2, [r3, #0]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b82:	4619      	mov	r1, r3
 8012b84:	4610      	mov	r0, r2
 8012b86:	f7fe fcc3 	bl	8011510 <move_window>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8012b8e:	7bfb      	ldrb	r3, [r7, #15]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d001      	beq.n	8012b98 <load_xdir+0x9c>
 8012b94:	7bfb      	ldrb	r3, [r7, #15]
 8012b96:	e068      	b.n	8012c6a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8012ba0:	d001      	beq.n	8012ba6 <load_xdir+0xaa>
 8012ba2:	2302      	movs	r3, #2
 8012ba4:	e061      	b.n	8012c6a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	f103 0020 	add.w	r0, r3, #32
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bb0:	2220      	movs	r2, #32
 8012bb2:	4619      	mov	r1, r3
 8012bb4:	f7fe fa7e 	bl	80110b4 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8012bb8:	693b      	ldr	r3, [r7, #16]
 8012bba:	3323      	adds	r3, #35	; 0x23
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	332c      	adds	r3, #44	; 0x2c
 8012bc0:	4a2c      	ldr	r2, [pc, #176]	; (8012c74 <load_xdir+0x178>)
 8012bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8012bc6:	08db      	lsrs	r3, r3, #3
 8012bc8:	015b      	lsls	r3, r3, #5
 8012bca:	68ba      	ldr	r2, [r7, #8]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d201      	bcs.n	8012bd4 <load_xdir+0xd8>
 8012bd0:	2302      	movs	r3, #2
 8012bd2:	e04a      	b.n	8012c6a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8012bd4:	2340      	movs	r3, #64	; 0x40
 8012bd6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8012bd8:	2100      	movs	r1, #0
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f7ff fbb8 	bl	8012350 <dir_next>
 8012be0:	4603      	mov	r3, r0
 8012be2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8012be4:	7bfb      	ldrb	r3, [r7, #15]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d001      	beq.n	8012bee <load_xdir+0xf2>
 8012bea:	7bfb      	ldrb	r3, [r7, #15]
 8012bec:	e03d      	b.n	8012c6a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	4610      	mov	r0, r2
 8012bfa:	f7fe fc89 	bl	8011510 <move_window>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8012c02:	7bfb      	ldrb	r3, [r7, #15]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d001      	beq.n	8012c0c <load_xdir+0x110>
 8012c08:	7bfb      	ldrb	r3, [r7, #15]
 8012c0a:	e02e      	b.n	8012c6a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	2bc1      	cmp	r3, #193	; 0xc1
 8012c14:	d001      	beq.n	8012c1a <load_xdir+0x11e>
 8012c16:	2302      	movs	r3, #2
 8012c18:	e027      	b.n	8012c6a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8012c20:	d208      	bcs.n	8012c34 <load_xdir+0x138>
 8012c22:	693a      	ldr	r2, [r7, #16]
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	18d0      	adds	r0, r2, r3
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c2c:	2220      	movs	r2, #32
 8012c2e:	4619      	mov	r1, r3
 8012c30:	f7fe fa40 	bl	80110b4 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	3320      	adds	r3, #32
 8012c38:	617b      	str	r3, [r7, #20]
 8012c3a:	697a      	ldr	r2, [r7, #20]
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d3ca      	bcc.n	8012bd8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8012c48:	d80e      	bhi.n	8012c68 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8012c4a:	6938      	ldr	r0, [r7, #16]
 8012c4c:	f7ff feef 	bl	8012a2e <xdir_sum>
 8012c50:	4603      	mov	r3, r0
 8012c52:	461c      	mov	r4, r3
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	3302      	adds	r3, #2
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7fe f865 	bl	8010d28 <ld_word>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	429c      	cmp	r4, r3
 8012c62:	d001      	beq.n	8012c68 <load_xdir+0x16c>
 8012c64:	2302      	movs	r3, #2
 8012c66:	e000      	b.n	8012c6a <load_xdir+0x16e>
	}
	return FR_OK;
 8012c68:	2300      	movs	r3, #0
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	371c      	adds	r7, #28
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd90      	pop	{r4, r7, pc}
 8012c72:	bf00      	nop
 8012c74:	88888889 	.word	0x88888889

08012c78 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8012c78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012c7c:	b084      	sub	sp, #16
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
 8012c82:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	681a      	ldr	r2, [r3, #0]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	6a1a      	ldr	r2, [r3, #32]
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c98:	b2da      	uxtb	r2, r3
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ca2:	469b      	mov	fp, r3
 8012ca4:	f04f 0c00 	mov.w	ip, #0
 8012ca8:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8012cac:	f04f 0200 	mov.w	r2, #0
 8012cb0:	ea0b 0301 	and.w	r3, fp, r1
 8012cb4:	ea0c 0402 	and.w	r4, ip, r2
 8012cb8:	687a      	ldr	r2, [r7, #4]
 8012cba:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012cca:	4619      	mov	r1, r3
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f7ff faab 	bl	8012228 <dir_sdi>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012cd6:	7bfb      	ldrb	r3, [r7, #15]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d104      	bne.n	8012ce6 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f7ff ff0d 	bl	8012afc <load_xdir>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8012ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	3710      	adds	r7, #16
 8012cec:	46bd      	mov	sp, r7
 8012cee:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08012cf2 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8012cf2:	b590      	push	{r4, r7, lr}
 8012cf4:	b087      	sub	sp, #28
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	695b      	ldr	r3, [r3, #20]
 8012d00:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	1c9c      	adds	r4, r3, #2
 8012d06:	68f8      	ldr	r0, [r7, #12]
 8012d08:	f7ff fe91 	bl	8012a2e <xdir_sum>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	4619      	mov	r1, r3
 8012d10:	4620      	mov	r0, r4
 8012d12:	f7fe f901 	bl	8010f18 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	3301      	adds	r3, #1
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d24:	4619      	mov	r1, r3
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f7ff fa7e 	bl	8012228 <dir_sdi>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8012d30:	e026      	b.n	8012d80 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	4610      	mov	r0, r2
 8012d3e:	f7fe fbe7 	bl	8011510 <move_window>
 8012d42:	4603      	mov	r3, r0
 8012d44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012d46:	7dfb      	ldrb	r3, [r7, #23]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d11d      	bne.n	8012d88 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d50:	2220      	movs	r2, #32
 8012d52:	68f9      	ldr	r1, [r7, #12]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7fe f9ad 	bl	80110b4 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	2201      	movs	r2, #1
 8012d60:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	3b01      	subs	r3, #1
 8012d66:	613b      	str	r3, [r7, #16]
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d00e      	beq.n	8012d8c <store_xdir+0x9a>
		dirb += SZDIRE;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	3320      	adds	r3, #32
 8012d72:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8012d74:	2100      	movs	r1, #0
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f7ff faea 	bl	8012350 <dir_next>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8012d80:	7dfb      	ldrb	r3, [r7, #23]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d0d5      	beq.n	8012d32 <store_xdir+0x40>
 8012d86:	e002      	b.n	8012d8e <store_xdir+0x9c>
		if (res != FR_OK) break;
 8012d88:	bf00      	nop
 8012d8a:	e000      	b.n	8012d8e <store_xdir+0x9c>
		if (--nent == 0) break;
 8012d8c:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8012d8e:	7dfb      	ldrb	r3, [r7, #23]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d002      	beq.n	8012d9a <store_xdir+0xa8>
 8012d94:	7dfb      	ldrb	r3, [r7, #23]
 8012d96:	2b01      	cmp	r3, #1
 8012d98:	d101      	bne.n	8012d9e <store_xdir+0xac>
 8012d9a:	7dfb      	ldrb	r3, [r7, #23]
 8012d9c:	e000      	b.n	8012da0 <store_xdir+0xae>
 8012d9e:	2302      	movs	r3, #2
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	371c      	adds	r7, #28
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd90      	pop	{r4, r7, pc}

08012da8 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8012da8:	b590      	push	{r4, r7, lr}
 8012daa:	b085      	sub	sp, #20
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8012db2:	2240      	movs	r2, #64	; 0x40
 8012db4:	2100      	movs	r1, #0
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f7fe f99d 	bl	80110f6 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2285      	movs	r2, #133	; 0x85
 8012dc0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	3320      	adds	r3, #32
 8012dc6:	22c0      	movs	r2, #192	; 0xc0
 8012dc8:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	72bb      	strb	r3, [r7, #10]
 8012dce:	2301      	movs	r3, #1
 8012dd0:	72fb      	strb	r3, [r7, #11]
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	813b      	strh	r3, [r7, #8]
 8012dd6:	2340      	movs	r3, #64	; 0x40
 8012dd8:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	1c5a      	adds	r2, r3, #1
 8012dde:	60fa      	str	r2, [r7, #12]
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	4413      	add	r3, r2
 8012de4:	22c1      	movs	r2, #193	; 0xc1
 8012de6:	701a      	strb	r2, [r3, #0]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	1c5a      	adds	r2, r3, #1
 8012dec:	60fa      	str	r2, [r7, #12]
 8012dee:	687a      	ldr	r2, [r7, #4]
 8012df0:	4413      	add	r3, r2
 8012df2:	2200      	movs	r2, #0
 8012df4:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8012df6:	893b      	ldrh	r3, [r7, #8]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d00b      	beq.n	8012e14 <create_xdir+0x6c>
 8012dfc:	7abb      	ldrb	r3, [r7, #10]
 8012dfe:	005b      	lsls	r3, r3, #1
 8012e00:	683a      	ldr	r2, [r7, #0]
 8012e02:	4413      	add	r3, r2
 8012e04:	881b      	ldrh	r3, [r3, #0]
 8012e06:	813b      	strh	r3, [r7, #8]
 8012e08:	893b      	ldrh	r3, [r7, #8]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d002      	beq.n	8012e14 <create_xdir+0x6c>
 8012e0e:	7abb      	ldrb	r3, [r7, #10]
 8012e10:	3301      	adds	r3, #1
 8012e12:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8012e14:	687a      	ldr	r2, [r7, #4]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	4413      	add	r3, r2
 8012e1a:	893a      	ldrh	r2, [r7, #8]
 8012e1c:	4611      	mov	r1, r2
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7fe f87a 	bl	8010f18 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	3302      	adds	r3, #2
 8012e28:	60fb      	str	r3, [r7, #12]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	f003 031f 	and.w	r3, r3, #31
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d1e0      	bne.n	8012df6 <create_xdir+0x4e>
		nb++;
 8012e34:	7afb      	ldrb	r3, [r7, #11]
 8012e36:	3301      	adds	r3, #1
 8012e38:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8012e3a:	7abb      	ldrb	r3, [r7, #10]
 8012e3c:	005b      	lsls	r3, r3, #1
 8012e3e:	683a      	ldr	r2, [r7, #0]
 8012e40:	4413      	add	r3, r2
 8012e42:	881b      	ldrh	r3, [r3, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d1c8      	bne.n	8012dda <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	3323      	adds	r3, #35	; 0x23
 8012e4c:	7aba      	ldrb	r2, [r7, #10]
 8012e4e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	3301      	adds	r3, #1
 8012e54:	7afa      	ldrb	r2, [r7, #11]
 8012e56:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8012e5e:	6838      	ldr	r0, [r7, #0]
 8012e60:	f7ff fe18 	bl	8012a94 <xname_sum>
 8012e64:	4603      	mov	r3, r0
 8012e66:	4619      	mov	r1, r3
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f7fe f855 	bl	8010f18 <st_word>
}
 8012e6e:	bf00      	nop
 8012e70:	3714      	adds	r7, #20
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd90      	pop	{r4, r7, pc}

08012e76 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b086      	sub	sp, #24
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
 8012e7e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012e80:	2304      	movs	r3, #4
 8012e82:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8012e8a:	23ff      	movs	r3, #255	; 0xff
 8012e8c:	757b      	strb	r3, [r7, #21]
 8012e8e:	23ff      	movs	r3, #255	; 0xff
 8012e90:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012e92:	e09f      	b.n	8012fd4 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e98:	4619      	mov	r1, r3
 8012e9a:	6938      	ldr	r0, [r7, #16]
 8012e9c:	f7fe fb38 	bl	8011510 <move_window>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012ea4:	7dfb      	ldrb	r3, [r7, #23]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	f040 809a 	bne.w	8012fe0 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012eb4:	7dbb      	ldrb	r3, [r7, #22]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d102      	bne.n	8012ec0 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012eba:	2304      	movs	r3, #4
 8012ebc:	75fb      	strb	r3, [r7, #23]
 8012ebe:	e096      	b.n	8012fee <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	2b04      	cmp	r3, #4
 8012ec6:	d118      	bne.n	8012efa <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8012ec8:	7dbb      	ldrb	r3, [r7, #22]
 8012eca:	2b85      	cmp	r3, #133	; 0x85
 8012ecc:	d179      	bne.n	8012fc2 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f7ff fe10 	bl	8012afc <load_xdir>
 8012edc:	4603      	mov	r3, r0
 8012ede:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8012ee0:	7dfb      	ldrb	r3, [r7, #23]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d17e      	bne.n	8012fe4 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	695b      	ldr	r3, [r3, #20]
 8012eea:	3304      	adds	r3, #4
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ef2:	b2da      	uxtb	r2, r3
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	719a      	strb	r2, [r3, #6]
					}
					break;
 8012ef8:	e074      	b.n	8012fe4 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012efe:	330b      	adds	r3, #11
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f06:	73fb      	strb	r3, [r7, #15]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	7bfa      	ldrb	r2, [r7, #15]
 8012f0c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012f0e:	7dbb      	ldrb	r3, [r7, #22]
 8012f10:	2be5      	cmp	r3, #229	; 0xe5
 8012f12:	d00e      	beq.n	8012f32 <dir_read+0xbc>
 8012f14:	7dbb      	ldrb	r3, [r7, #22]
 8012f16:	2b2e      	cmp	r3, #46	; 0x2e
 8012f18:	d00b      	beq.n	8012f32 <dir_read+0xbc>
 8012f1a:	7bfb      	ldrb	r3, [r7, #15]
 8012f1c:	f023 0320 	bic.w	r3, r3, #32
 8012f20:	2b08      	cmp	r3, #8
 8012f22:	bf0c      	ite	eq
 8012f24:	2301      	moveq	r3, #1
 8012f26:	2300      	movne	r3, #0
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	d002      	beq.n	8012f38 <dir_read+0xc2>
				ord = 0xFF;
 8012f32:	23ff      	movs	r3, #255	; 0xff
 8012f34:	757b      	strb	r3, [r7, #21]
 8012f36:	e044      	b.n	8012fc2 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8012f38:	7bfb      	ldrb	r3, [r7, #15]
 8012f3a:	2b0f      	cmp	r3, #15
 8012f3c:	d12f      	bne.n	8012f9e <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8012f3e:	7dbb      	ldrb	r3, [r7, #22]
 8012f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d00d      	beq.n	8012f64 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f4c:	7b5b      	ldrb	r3, [r3, #13]
 8012f4e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8012f50:	7dbb      	ldrb	r3, [r7, #22]
 8012f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012f56:	75bb      	strb	r3, [r7, #22]
 8012f58:	7dbb      	ldrb	r3, [r7, #22]
 8012f5a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012f64:	7dba      	ldrb	r2, [r7, #22]
 8012f66:	7d7b      	ldrb	r3, [r7, #21]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d115      	bne.n	8012f98 <dir_read+0x122>
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f70:	330d      	adds	r3, #13
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	7d3a      	ldrb	r2, [r7, #20]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d10e      	bne.n	8012f98 <dir_read+0x122>
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	691a      	ldr	r2, [r3, #16]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f82:	4619      	mov	r1, r3
 8012f84:	4610      	mov	r0, r2
 8012f86:	f7ff fbd5 	bl	8012734 <pick_lfn>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d003      	beq.n	8012f98 <dir_read+0x122>
 8012f90:	7d7b      	ldrb	r3, [r7, #21]
 8012f92:	3b01      	subs	r3, #1
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	e000      	b.n	8012f9a <dir_read+0x124>
 8012f98:	23ff      	movs	r3, #255	; 0xff
 8012f9a:	757b      	strb	r3, [r7, #21]
 8012f9c:	e011      	b.n	8012fc2 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012f9e:	7d7b      	ldrb	r3, [r7, #21]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d109      	bne.n	8012fb8 <dir_read+0x142>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7ff fd1f 	bl	80129ec <sum_sfn>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	461a      	mov	r2, r3
 8012fb2:	7d3b      	ldrb	r3, [r7, #20]
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d017      	beq.n	8012fe8 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f04f 32ff 	mov.w	r2, #4294967295
 8012fbe:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8012fc0:	e012      	b.n	8012fe8 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012fc2:	2100      	movs	r1, #0
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f7ff f9c3 	bl	8012350 <dir_next>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012fce:	7dfb      	ldrb	r3, [r7, #23]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d10b      	bne.n	8012fec <dir_read+0x176>
	while (dp->sect) {
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	f47f af5b 	bne.w	8012e94 <dir_read+0x1e>
 8012fde:	e006      	b.n	8012fee <dir_read+0x178>
		if (res != FR_OK) break;
 8012fe0:	bf00      	nop
 8012fe2:	e004      	b.n	8012fee <dir_read+0x178>
					break;
 8012fe4:	bf00      	nop
 8012fe6:	e002      	b.n	8012fee <dir_read+0x178>
					break;
 8012fe8:	bf00      	nop
 8012fea:	e000      	b.n	8012fee <dir_read+0x178>
		if (res != FR_OK) break;
 8012fec:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012fee:	7dfb      	ldrb	r3, [r7, #23]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d002      	beq.n	8012ffa <dir_read+0x184>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8012ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3718      	adds	r7, #24
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}

08013004 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013004:	b590      	push	{r4, r7, lr}
 8013006:	b089      	sub	sp, #36	; 0x24
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013012:	2100      	movs	r1, #0
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f7ff f907 	bl	8012228 <dir_sdi>
 801301a:	4603      	mov	r3, r0
 801301c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 801301e:	7ffb      	ldrb	r3, [r7, #31]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d001      	beq.n	8013028 <dir_find+0x24>
 8013024:	7ffb      	ldrb	r3, [r7, #31]
 8013026:	e112      	b.n	801324e <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	2b04      	cmp	r3, #4
 801302e:	d164      	bne.n	80130fa <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	691b      	ldr	r3, [r3, #16]
 8013034:	4618      	mov	r0, r3
 8013036:	f7ff fd2d 	bl	8012a94 <xname_sum>
 801303a:	4603      	mov	r3, r0
 801303c:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 801303e:	e04f      	b.n	80130e0 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	695b      	ldr	r3, [r3, #20]
 8013044:	3324      	adds	r3, #36	; 0x24
 8013046:	4618      	mov	r0, r3
 8013048:	f7fd fe6e 	bl	8010d28 <ld_word>
 801304c:	4603      	mov	r3, r0
 801304e:	461a      	mov	r2, r3
 8013050:	893b      	ldrh	r3, [r7, #8]
 8013052:	4293      	cmp	r3, r2
 8013054:	d000      	beq.n	8013058 <dir_find+0x54>
 8013056:	e043      	b.n	80130e0 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	695b      	ldr	r3, [r3, #20]
 801305c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8013060:	76fb      	strb	r3, [r7, #27]
 8013062:	2340      	movs	r3, #64	; 0x40
 8013064:	617b      	str	r3, [r7, #20]
 8013066:	2300      	movs	r3, #0
 8013068:	613b      	str	r3, [r7, #16]
 801306a:	e029      	b.n	80130c0 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	f003 031f 	and.w	r3, r3, #31
 8013072:	2b00      	cmp	r3, #0
 8013074:	d102      	bne.n	801307c <dir_find+0x78>
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	3302      	adds	r3, #2
 801307a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	695a      	ldr	r2, [r3, #20]
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	4413      	add	r3, r2
 8013084:	4618      	mov	r0, r3
 8013086:	f7fd fe4f 	bl	8010d28 <ld_word>
 801308a:	4603      	mov	r3, r0
 801308c:	4618      	mov	r0, r3
 801308e:	f002 ff7d 	bl	8015f8c <ff_wtoupper>
 8013092:	4603      	mov	r3, r0
 8013094:	461c      	mov	r4, r3
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	691a      	ldr	r2, [r3, #16]
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	005b      	lsls	r3, r3, #1
 801309e:	4413      	add	r3, r2
 80130a0:	881b      	ldrh	r3, [r3, #0]
 80130a2:	4618      	mov	r0, r3
 80130a4:	f002 ff72 	bl	8015f8c <ff_wtoupper>
 80130a8:	4603      	mov	r3, r0
 80130aa:	429c      	cmp	r4, r3
 80130ac:	d10c      	bne.n	80130c8 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80130ae:	7efb      	ldrb	r3, [r7, #27]
 80130b0:	3b01      	subs	r3, #1
 80130b2:	76fb      	strb	r3, [r7, #27]
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	3302      	adds	r3, #2
 80130b8:	617b      	str	r3, [r7, #20]
 80130ba:	693b      	ldr	r3, [r7, #16]
 80130bc:	3301      	adds	r3, #1
 80130be:	613b      	str	r3, [r7, #16]
 80130c0:	7efb      	ldrb	r3, [r7, #27]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d1d2      	bne.n	801306c <dir_find+0x68>
 80130c6:	e000      	b.n	80130ca <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80130c8:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80130ca:	7efb      	ldrb	r3, [r7, #27]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d107      	bne.n	80130e0 <dir_find+0xdc>
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	691a      	ldr	r2, [r3, #16]
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	005b      	lsls	r3, r3, #1
 80130d8:	4413      	add	r3, r2
 80130da:	881b      	ldrh	r3, [r3, #0]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d009      	beq.n	80130f4 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80130e0:	2100      	movs	r1, #0
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f7ff fec7 	bl	8012e76 <dir_read>
 80130e8:	4603      	mov	r3, r0
 80130ea:	77fb      	strb	r3, [r7, #31]
 80130ec:	7ffb      	ldrb	r3, [r7, #31]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d0a6      	beq.n	8013040 <dir_find+0x3c>
 80130f2:	e000      	b.n	80130f6 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80130f4:	bf00      	nop
		}
		return res;
 80130f6:	7ffb      	ldrb	r3, [r7, #31]
 80130f8:	e0a9      	b.n	801324e <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80130fa:	23ff      	movs	r3, #255	; 0xff
 80130fc:	773b      	strb	r3, [r7, #28]
 80130fe:	7f3b      	ldrb	r3, [r7, #28]
 8013100:	777b      	strb	r3, [r7, #29]
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f04f 32ff 	mov.w	r2, #4294967295
 8013108:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801310e:	4619      	mov	r1, r3
 8013110:	68f8      	ldr	r0, [r7, #12]
 8013112:	f7fe f9fd 	bl	8011510 <move_window>
 8013116:	4603      	mov	r3, r0
 8013118:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 801311a:	7ffb      	ldrb	r3, [r7, #31]
 801311c:	2b00      	cmp	r3, #0
 801311e:	f040 8090 	bne.w	8013242 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801312a:	7fbb      	ldrb	r3, [r7, #30]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d102      	bne.n	8013136 <dir_find+0x132>
 8013130:	2304      	movs	r3, #4
 8013132:	77fb      	strb	r3, [r7, #31]
 8013134:	e08a      	b.n	801324c <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801313a:	330b      	adds	r3, #11
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013142:	72fb      	strb	r3, [r7, #11]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	7afa      	ldrb	r2, [r7, #11]
 8013148:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801314a:	7fbb      	ldrb	r3, [r7, #30]
 801314c:	2be5      	cmp	r3, #229	; 0xe5
 801314e:	d007      	beq.n	8013160 <dir_find+0x15c>
 8013150:	7afb      	ldrb	r3, [r7, #11]
 8013152:	f003 0308 	and.w	r3, r3, #8
 8013156:	2b00      	cmp	r3, #0
 8013158:	d009      	beq.n	801316e <dir_find+0x16a>
 801315a:	7afb      	ldrb	r3, [r7, #11]
 801315c:	2b0f      	cmp	r3, #15
 801315e:	d006      	beq.n	801316e <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013160:	23ff      	movs	r3, #255	; 0xff
 8013162:	777b      	strb	r3, [r7, #29]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f04f 32ff 	mov.w	r2, #4294967295
 801316a:	64da      	str	r2, [r3, #76]	; 0x4c
 801316c:	e05e      	b.n	801322c <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801316e:	7afb      	ldrb	r3, [r7, #11]
 8013170:	2b0f      	cmp	r3, #15
 8013172:	d136      	bne.n	80131e2 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801317e:	2b00      	cmp	r3, #0
 8013180:	d154      	bne.n	801322c <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8013182:	7fbb      	ldrb	r3, [r7, #30]
 8013184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013188:	2b00      	cmp	r3, #0
 801318a:	d00d      	beq.n	80131a8 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013190:	7b5b      	ldrb	r3, [r3, #13]
 8013192:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8013194:	7fbb      	ldrb	r3, [r7, #30]
 8013196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801319a:	77bb      	strb	r3, [r7, #30]
 801319c:	7fbb      	ldrb	r3, [r7, #30]
 801319e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80131a8:	7fba      	ldrb	r2, [r7, #30]
 80131aa:	7f7b      	ldrb	r3, [r7, #29]
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d115      	bne.n	80131dc <dir_find+0x1d8>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131b4:	330d      	adds	r3, #13
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	7f3a      	ldrb	r2, [r7, #28]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d10e      	bne.n	80131dc <dir_find+0x1d8>
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	691a      	ldr	r2, [r3, #16]
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131c6:	4619      	mov	r1, r3
 80131c8:	4610      	mov	r0, r2
 80131ca:	f7ff fa43 	bl	8012654 <cmp_lfn>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d003      	beq.n	80131dc <dir_find+0x1d8>
 80131d4:	7f7b      	ldrb	r3, [r7, #29]
 80131d6:	3b01      	subs	r3, #1
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	e000      	b.n	80131de <dir_find+0x1da>
 80131dc:	23ff      	movs	r3, #255	; 0xff
 80131de:	777b      	strb	r3, [r7, #29]
 80131e0:	e024      	b.n	801322c <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80131e2:	7f7b      	ldrb	r3, [r7, #29]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d109      	bne.n	80131fc <dir_find+0x1f8>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7ff fbfd 	bl	80129ec <sum_sfn>
 80131f2:	4603      	mov	r3, r0
 80131f4:	461a      	mov	r2, r3
 80131f6:	7f3b      	ldrb	r3, [r7, #28]
 80131f8:	4293      	cmp	r3, r2
 80131fa:	d024      	beq.n	8013246 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8013202:	f003 0301 	and.w	r3, r3, #1
 8013206:	2b00      	cmp	r3, #0
 8013208:	d10a      	bne.n	8013220 <dir_find+0x21c>
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	3340      	adds	r3, #64	; 0x40
 8013212:	220b      	movs	r2, #11
 8013214:	4619      	mov	r1, r3
 8013216:	f7fd ff88 	bl	801112a <mem_cmp>
 801321a:	4603      	mov	r3, r0
 801321c:	2b00      	cmp	r3, #0
 801321e:	d014      	beq.n	801324a <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013220:	23ff      	movs	r3, #255	; 0xff
 8013222:	777b      	strb	r3, [r7, #29]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	f04f 32ff 	mov.w	r2, #4294967295
 801322a:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801322c:	2100      	movs	r1, #0
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f7ff f88e 	bl	8012350 <dir_next>
 8013234:	4603      	mov	r3, r0
 8013236:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8013238:	7ffb      	ldrb	r3, [r7, #31]
 801323a:	2b00      	cmp	r3, #0
 801323c:	f43f af65 	beq.w	801310a <dir_find+0x106>
 8013240:	e004      	b.n	801324c <dir_find+0x248>
		if (res != FR_OK) break;
 8013242:	bf00      	nop
 8013244:	e002      	b.n	801324c <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013246:	bf00      	nop
 8013248:	e000      	b.n	801324c <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801324a:	bf00      	nop

	return res;
 801324c:	7ffb      	ldrb	r3, [r7, #31]
}
 801324e:	4618      	mov	r0, r3
 8013250:	3724      	adds	r7, #36	; 0x24
 8013252:	46bd      	mov	sp, r7
 8013254:	bd90      	pop	{r4, r7, pc}
	...

08013258 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013258:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801325c:	b0a0      	sub	sp, #128	; 0x80
 801325e:	af00      	add	r7, sp, #0
 8013260:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801326e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8013272:	2b00      	cmp	r3, #0
 8013274:	d001      	beq.n	801327a <dir_register+0x22>
 8013276:	2306      	movs	r3, #6
 8013278:	e198      	b.n	80135ac <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801327a:	2300      	movs	r3, #0
 801327c:	677b      	str	r3, [r7, #116]	; 0x74
 801327e:	e002      	b.n	8013286 <dir_register+0x2e>
 8013280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013282:	3301      	adds	r3, #1
 8013284:	677b      	str	r3, [r7, #116]	; 0x74
 8013286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013288:	691a      	ldr	r2, [r3, #16]
 801328a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801328c:	005b      	lsls	r3, r3, #1
 801328e:	4413      	add	r3, r2
 8013290:	881b      	ldrh	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d1f4      	bne.n	8013280 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8013296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	2b04      	cmp	r3, #4
 801329c:	f040 80a9 	bne.w	80133f2 <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80132a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132a2:	330e      	adds	r3, #14
 80132a4:	4aa7      	ldr	r2, [pc, #668]	; (8013544 <dir_register+0x2ec>)
 80132a6:	fba2 2303 	umull	r2, r3, r2, r3
 80132aa:	08db      	lsrs	r3, r3, #3
 80132ac:	3302      	adds	r3, #2
 80132ae:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 80132b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f7ff f932 	bl	801251c <dir_alloc>
 80132b8:	4603      	mov	r3, r0
 80132ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 80132be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d002      	beq.n	80132cc <dir_register+0x74>
 80132c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80132ca:	e16f      	b.n	80135ac <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80132d2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80132d6:	440b      	add	r3, r1
 80132d8:	015b      	lsls	r3, r3, #5
 80132da:	1ad2      	subs	r2, r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	689b      	ldr	r3, [r3, #8]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d07a      	beq.n	80133de <dir_register+0x186>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	79db      	ldrb	r3, [r3, #7]
 80132ec:	f003 0304 	and.w	r3, r3, #4
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d074      	beq.n	80133de <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80132fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80132fc:	895b      	ldrh	r3, [r3, #10]
 80132fe:	4618      	mov	r0, r3
 8013300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013302:	899b      	ldrh	r3, [r3, #12]
 8013304:	fb03 f300 	mul.w	r3, r3, r0
 8013308:	469b      	mov	fp, r3
 801330a:	f04f 0c00 	mov.w	ip, #0
 801330e:	eb1b 0301 	adds.w	r3, fp, r1
 8013312:	eb4c 0402 	adc.w	r4, ip, r2
 8013316:	687a      	ldr	r2, [r7, #4]
 8013318:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	4618      	mov	r0, r3
 8013320:	f7fe fd26 	bl	8011d70 <fill_first_frag>
 8013324:	4603      	mov	r3, r0
 8013326:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801332a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801332e:	2b00      	cmp	r3, #0
 8013330:	d002      	beq.n	8013338 <dir_register+0xe0>
 8013332:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013336:	e139      	b.n	80135ac <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801333e:	f04f 32ff 	mov.w	r2, #4294967295
 8013342:	4619      	mov	r1, r3
 8013344:	f7fe fd43 	bl	8011dce <fill_last_frag>
 8013348:	4603      	mov	r3, r0
 801334a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801334e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013352:	2b00      	cmp	r3, #0
 8013354:	d002      	beq.n	801335c <dir_register+0x104>
 8013356:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801335a:	e127      	b.n	80135ac <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 801335c:	687a      	ldr	r2, [r7, #4]
 801335e:	f107 0308 	add.w	r3, r7, #8
 8013362:	4611      	mov	r1, r2
 8013364:	4618      	mov	r0, r3
 8013366:	f7ff fc87 	bl	8012c78 <load_obj_dir>
 801336a:	4603      	mov	r3, r0
 801336c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8013370:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013374:	2b00      	cmp	r3, #0
 8013376:	d002      	beq.n	801337e <dir_register+0x126>
 8013378:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801337c:	e116      	b.n	80135ac <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 801337e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013380:	695b      	ldr	r3, [r3, #20]
 8013382:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801338c:	461a      	mov	r2, r3
 801338e:	4623      	mov	r3, r4
 8013390:	4608      	mov	r0, r1
 8013392:	f7fd fe08 	bl	8010fa6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8013396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013398:	695b      	ldr	r3, [r3, #20]
 801339a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80133a4:	461a      	mov	r2, r3
 80133a6:	4623      	mov	r3, r4
 80133a8:	4608      	mov	r0, r1
 80133aa:	f7fd fdfc 	bl	8010fa6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	79da      	ldrb	r2, [r3, #7]
 80133b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133b4:	695b      	ldr	r3, [r3, #20]
 80133b6:	3321      	adds	r3, #33	; 0x21
 80133b8:	f042 0201 	orr.w	r2, r2, #1
 80133bc:	b2d2      	uxtb	r2, r2
 80133be:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 80133c0:	f107 0308 	add.w	r3, r7, #8
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7ff fc94 	bl	8012cf2 <store_xdir>
 80133ca:	4603      	mov	r3, r0
 80133cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80133d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d002      	beq.n	80133de <dir_register+0x186>
 80133d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80133dc:	e0e6      	b.n	80135ac <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80133de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133e0:	695a      	ldr	r2, [r3, #20]
 80133e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133e4:	691b      	ldr	r3, [r3, #16]
 80133e6:	4619      	mov	r1, r3
 80133e8:	4610      	mov	r0, r2
 80133ea:	f7ff fcdd 	bl	8012da8 <create_xdir>
		return FR_OK;
 80133ee:	2300      	movs	r3, #0
 80133f0:	e0dc      	b.n	80135ac <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80133f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80133fc:	220c      	movs	r2, #12
 80133fe:	4618      	mov	r0, r3
 8013400:	f7fd fe58 	bl	80110b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8013404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013408:	f003 0301 	and.w	r3, r3, #1
 801340c:	2b00      	cmp	r3, #0
 801340e:	d033      	beq.n	8013478 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2240      	movs	r2, #64	; 0x40
 8013414:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8013418:	2301      	movs	r3, #1
 801341a:	67bb      	str	r3, [r7, #120]	; 0x78
 801341c:	e016      	b.n	801344c <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013426:	691a      	ldr	r2, [r3, #16]
 8013428:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 801342c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801342e:	f7ff fa4d 	bl	80128cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f7ff fde6 	bl	8013004 <dir_find>
 8013438:	4603      	mov	r3, r0
 801343a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 801343e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013442:	2b00      	cmp	r3, #0
 8013444:	d106      	bne.n	8013454 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 8013446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013448:	3301      	adds	r3, #1
 801344a:	67bb      	str	r3, [r7, #120]	; 0x78
 801344c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801344e:	2b63      	cmp	r3, #99	; 0x63
 8013450:	d9e5      	bls.n	801341e <dir_register+0x1c6>
 8013452:	e000      	b.n	8013456 <dir_register+0x1fe>
			if (res != FR_OK) break;
 8013454:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013458:	2b64      	cmp	r3, #100	; 0x64
 801345a:	d101      	bne.n	8013460 <dir_register+0x208>
 801345c:	2307      	movs	r3, #7
 801345e:	e0a5      	b.n	80135ac <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013460:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013464:	2b04      	cmp	r3, #4
 8013466:	d002      	beq.n	801346e <dir_register+0x216>
 8013468:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801346c:	e09e      	b.n	80135ac <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801346e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013478:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801347c:	f003 0302 	and.w	r3, r3, #2
 8013480:	2b00      	cmp	r3, #0
 8013482:	d007      	beq.n	8013494 <dir_register+0x23c>
 8013484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013486:	330c      	adds	r3, #12
 8013488:	4a2f      	ldr	r2, [pc, #188]	; (8013548 <dir_register+0x2f0>)
 801348a:	fba2 2303 	umull	r2, r3, r2, r3
 801348e:	089b      	lsrs	r3, r3, #2
 8013490:	3301      	adds	r3, #1
 8013492:	e000      	b.n	8013496 <dir_register+0x23e>
 8013494:	2301      	movs	r3, #1
 8013496:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013498:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f7ff f83e 	bl	801251c <dir_alloc>
 80134a0:	4603      	mov	r3, r0
 80134a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80134a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d14f      	bne.n	801354e <dir_register+0x2f6>
 80134ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80134b0:	3b01      	subs	r3, #1
 80134b2:	673b      	str	r3, [r7, #112]	; 0x70
 80134b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d049      	beq.n	801354e <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80134be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80134c0:	015b      	lsls	r3, r3, #5
 80134c2:	1ad3      	subs	r3, r2, r3
 80134c4:	4619      	mov	r1, r3
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f7fe feae 	bl	8012228 <dir_sdi>
 80134cc:	4603      	mov	r3, r0
 80134ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80134d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d139      	bne.n	801354e <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	3340      	adds	r3, #64	; 0x40
 80134de:	4618      	mov	r0, r3
 80134e0:	f7ff fa84 	bl	80129ec <sum_sfn>
 80134e4:	4603      	mov	r3, r0
 80134e6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134ee:	4619      	mov	r1, r3
 80134f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80134f2:	f7fe f80d 	bl	8011510 <move_window>
 80134f6:	4603      	mov	r3, r0
 80134f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 80134fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013500:	2b00      	cmp	r3, #0
 8013502:	d123      	bne.n	801354c <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013506:	6918      	ldr	r0, [r3, #16]
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801350c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801350e:	b2da      	uxtb	r2, r3
 8013510:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013514:	f7ff f972 	bl	80127fc <put_lfn>
				fs->wflag = 1;
 8013518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801351a:	2201      	movs	r2, #1
 801351c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801351e:	2100      	movs	r1, #0
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f7fe ff15 	bl	8012350 <dir_next>
 8013526:	4603      	mov	r3, r0
 8013528:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 801352c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013530:	2b00      	cmp	r3, #0
 8013532:	d10c      	bne.n	801354e <dir_register+0x2f6>
 8013534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013536:	3b01      	subs	r3, #1
 8013538:	673b      	str	r3, [r7, #112]	; 0x70
 801353a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801353c:	2b00      	cmp	r3, #0
 801353e:	d1d4      	bne.n	80134ea <dir_register+0x292>
 8013540:	e005      	b.n	801354e <dir_register+0x2f6>
 8013542:	bf00      	nop
 8013544:	88888889 	.word	0x88888889
 8013548:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 801354c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801354e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013552:	2b00      	cmp	r3, #0
 8013554:	d128      	bne.n	80135a8 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801355a:	4619      	mov	r1, r3
 801355c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801355e:	f7fd ffd7 	bl	8011510 <move_window>
 8013562:	4603      	mov	r3, r0
 8013564:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8013568:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801356c:	2b00      	cmp	r3, #0
 801356e:	d11b      	bne.n	80135a8 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013574:	2220      	movs	r2, #32
 8013576:	2100      	movs	r1, #0
 8013578:	4618      	mov	r0, r3
 801357a:	f7fd fdbc 	bl	80110f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	3340      	adds	r3, #64	; 0x40
 8013586:	220b      	movs	r2, #11
 8013588:	4619      	mov	r1, r3
 801358a:	f7fd fd93 	bl	80110b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013598:	330c      	adds	r3, #12
 801359a:	f002 0218 	and.w	r2, r2, #24
 801359e:	b2d2      	uxtb	r2, r2
 80135a0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80135a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80135a4:	2201      	movs	r2, #1
 80135a6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80135a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3780      	adds	r7, #128	; 0x80
 80135b0:	46bd      	mov	sp, r7
 80135b2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80135b6:	bf00      	nop

080135b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b08a      	sub	sp, #40	; 0x28
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	613b      	str	r3, [r7, #16]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	691b      	ldr	r3, [r3, #16]
 80135ce:	60fb      	str	r3, [r7, #12]
 80135d0:	2300      	movs	r3, #0
 80135d2:	617b      	str	r3, [r7, #20]
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	1c5a      	adds	r2, r3, #1
 80135dc:	61ba      	str	r2, [r7, #24]
 80135de:	693a      	ldr	r2, [r7, #16]
 80135e0:	4413      	add	r3, r2
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80135e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135e8:	2b1f      	cmp	r3, #31
 80135ea:	d940      	bls.n	801366e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80135ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135ee:	2b2f      	cmp	r3, #47	; 0x2f
 80135f0:	d006      	beq.n	8013600 <create_name+0x48>
 80135f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135f4:	2b5c      	cmp	r3, #92	; 0x5c
 80135f6:	d110      	bne.n	801361a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80135f8:	e002      	b.n	8013600 <create_name+0x48>
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	3301      	adds	r3, #1
 80135fe:	61bb      	str	r3, [r7, #24]
 8013600:	693a      	ldr	r2, [r7, #16]
 8013602:	69bb      	ldr	r3, [r7, #24]
 8013604:	4413      	add	r3, r2
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	2b2f      	cmp	r3, #47	; 0x2f
 801360a:	d0f6      	beq.n	80135fa <create_name+0x42>
 801360c:	693a      	ldr	r2, [r7, #16]
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	4413      	add	r3, r2
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	2b5c      	cmp	r3, #92	; 0x5c
 8013616:	d0f0      	beq.n	80135fa <create_name+0x42>
			break;
 8013618:	e02a      	b.n	8013670 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	2bfe      	cmp	r3, #254	; 0xfe
 801361e:	d901      	bls.n	8013624 <create_name+0x6c>
 8013620:	2306      	movs	r3, #6
 8013622:	e177      	b.n	8013914 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013626:	b2db      	uxtb	r3, r3
 8013628:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801362a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801362c:	2101      	movs	r1, #1
 801362e:	4618      	mov	r0, r3
 8013630:	f002 fc70 	bl	8015f14 <ff_convert>
 8013634:	4603      	mov	r3, r0
 8013636:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801363a:	2b00      	cmp	r3, #0
 801363c:	d101      	bne.n	8013642 <create_name+0x8a>
 801363e:	2306      	movs	r3, #6
 8013640:	e168      	b.n	8013914 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013644:	2b7f      	cmp	r3, #127	; 0x7f
 8013646:	d809      	bhi.n	801365c <create_name+0xa4>
 8013648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801364a:	4619      	mov	r1, r3
 801364c:	48b3      	ldr	r0, [pc, #716]	; (801391c <create_name+0x364>)
 801364e:	f7fd fd93 	bl	8011178 <chk_chr>
 8013652:	4603      	mov	r3, r0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d001      	beq.n	801365c <create_name+0xa4>
 8013658:	2306      	movs	r3, #6
 801365a:	e15b      	b.n	8013914 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	1c5a      	adds	r2, r3, #1
 8013660:	617a      	str	r2, [r7, #20]
 8013662:	005b      	lsls	r3, r3, #1
 8013664:	68fa      	ldr	r2, [r7, #12]
 8013666:	4413      	add	r3, r2
 8013668:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801366a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801366c:	e7b4      	b.n	80135d8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801366e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013670:	693a      	ldr	r2, [r7, #16]
 8013672:	69bb      	ldr	r3, [r7, #24]
 8013674:	441a      	add	r2, r3
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801367a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801367c:	2b1f      	cmp	r3, #31
 801367e:	d801      	bhi.n	8013684 <create_name+0xcc>
 8013680:	2304      	movs	r3, #4
 8013682:	e000      	b.n	8013686 <create_name+0xce>
 8013684:	2300      	movs	r3, #0
 8013686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801368a:	e011      	b.n	80136b0 <create_name+0xf8>
		w = lfn[di - 1];
 801368c:	697a      	ldr	r2, [r7, #20]
 801368e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013692:	4413      	add	r3, r2
 8013694:	005b      	lsls	r3, r3, #1
 8013696:	68fa      	ldr	r2, [r7, #12]
 8013698:	4413      	add	r3, r2
 801369a:	881b      	ldrh	r3, [r3, #0]
 801369c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801369e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136a0:	2b20      	cmp	r3, #32
 80136a2:	d002      	beq.n	80136aa <create_name+0xf2>
 80136a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136a6:	2b2e      	cmp	r3, #46	; 0x2e
 80136a8:	d106      	bne.n	80136b8 <create_name+0x100>
		di--;
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	3b01      	subs	r3, #1
 80136ae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d1ea      	bne.n	801368c <create_name+0xd4>
 80136b6:	e000      	b.n	80136ba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80136b8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	005b      	lsls	r3, r3, #1
 80136be:	68fa      	ldr	r2, [r7, #12]
 80136c0:	4413      	add	r3, r2
 80136c2:	2200      	movs	r2, #0
 80136c4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d101      	bne.n	80136d0 <create_name+0x118>
 80136cc:	2306      	movs	r3, #6
 80136ce:	e121      	b.n	8013914 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	3340      	adds	r3, #64	; 0x40
 80136d4:	220b      	movs	r2, #11
 80136d6:	2120      	movs	r1, #32
 80136d8:	4618      	mov	r0, r3
 80136da:	f7fd fd0c 	bl	80110f6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80136de:	2300      	movs	r3, #0
 80136e0:	61bb      	str	r3, [r7, #24]
 80136e2:	e002      	b.n	80136ea <create_name+0x132>
 80136e4:	69bb      	ldr	r3, [r7, #24]
 80136e6:	3301      	adds	r3, #1
 80136e8:	61bb      	str	r3, [r7, #24]
 80136ea:	69bb      	ldr	r3, [r7, #24]
 80136ec:	005b      	lsls	r3, r3, #1
 80136ee:	68fa      	ldr	r2, [r7, #12]
 80136f0:	4413      	add	r3, r2
 80136f2:	881b      	ldrh	r3, [r3, #0]
 80136f4:	2b20      	cmp	r3, #32
 80136f6:	d0f5      	beq.n	80136e4 <create_name+0x12c>
 80136f8:	69bb      	ldr	r3, [r7, #24]
 80136fa:	005b      	lsls	r3, r3, #1
 80136fc:	68fa      	ldr	r2, [r7, #12]
 80136fe:	4413      	add	r3, r2
 8013700:	881b      	ldrh	r3, [r3, #0]
 8013702:	2b2e      	cmp	r3, #46	; 0x2e
 8013704:	d0ee      	beq.n	80136e4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013706:	69bb      	ldr	r3, [r7, #24]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d009      	beq.n	8013720 <create_name+0x168>
 801370c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013710:	f043 0303 	orr.w	r3, r3, #3
 8013714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8013718:	e002      	b.n	8013720 <create_name+0x168>
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	3b01      	subs	r3, #1
 801371e:	617b      	str	r3, [r7, #20]
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d009      	beq.n	801373a <create_name+0x182>
 8013726:	697a      	ldr	r2, [r7, #20]
 8013728:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801372c:	4413      	add	r3, r2
 801372e:	005b      	lsls	r3, r3, #1
 8013730:	68fa      	ldr	r2, [r7, #12]
 8013732:	4413      	add	r3, r2
 8013734:	881b      	ldrh	r3, [r3, #0]
 8013736:	2b2e      	cmp	r3, #46	; 0x2e
 8013738:	d1ef      	bne.n	801371a <create_name+0x162>

	i = b = 0; ni = 8;
 801373a:	2300      	movs	r3, #0
 801373c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013740:	2300      	movs	r3, #0
 8013742:	623b      	str	r3, [r7, #32]
 8013744:	2308      	movs	r3, #8
 8013746:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	1c5a      	adds	r2, r3, #1
 801374c:	61ba      	str	r2, [r7, #24]
 801374e:	005b      	lsls	r3, r3, #1
 8013750:	68fa      	ldr	r2, [r7, #12]
 8013752:	4413      	add	r3, r2
 8013754:	881b      	ldrh	r3, [r3, #0]
 8013756:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801375a:	2b00      	cmp	r3, #0
 801375c:	f000 8090 	beq.w	8013880 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013762:	2b20      	cmp	r3, #32
 8013764:	d006      	beq.n	8013774 <create_name+0x1bc>
 8013766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013768:	2b2e      	cmp	r3, #46	; 0x2e
 801376a:	d10a      	bne.n	8013782 <create_name+0x1ca>
 801376c:	69ba      	ldr	r2, [r7, #24]
 801376e:	697b      	ldr	r3, [r7, #20]
 8013770:	429a      	cmp	r2, r3
 8013772:	d006      	beq.n	8013782 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013778:	f043 0303 	orr.w	r3, r3, #3
 801377c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013780:	e07d      	b.n	801387e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013782:	6a3a      	ldr	r2, [r7, #32]
 8013784:	69fb      	ldr	r3, [r7, #28]
 8013786:	429a      	cmp	r2, r3
 8013788:	d203      	bcs.n	8013792 <create_name+0x1da>
 801378a:	69ba      	ldr	r2, [r7, #24]
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	429a      	cmp	r2, r3
 8013790:	d123      	bne.n	80137da <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013792:	69fb      	ldr	r3, [r7, #28]
 8013794:	2b0b      	cmp	r3, #11
 8013796:	d106      	bne.n	80137a6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801379c:	f043 0303 	orr.w	r3, r3, #3
 80137a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80137a4:	e06f      	b.n	8013886 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80137a6:	69ba      	ldr	r2, [r7, #24]
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d005      	beq.n	80137ba <create_name+0x202>
 80137ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137b2:	f043 0303 	orr.w	r3, r3, #3
 80137b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80137ba:	69ba      	ldr	r2, [r7, #24]
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d860      	bhi.n	8013884 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	61bb      	str	r3, [r7, #24]
 80137c6:	2308      	movs	r3, #8
 80137c8:	623b      	str	r3, [r7, #32]
 80137ca:	230b      	movs	r3, #11
 80137cc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80137ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80137d2:	009b      	lsls	r3, r3, #2
 80137d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80137d8:	e051      	b.n	801387e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80137da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137dc:	2b7f      	cmp	r3, #127	; 0x7f
 80137de:	d914      	bls.n	801380a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80137e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137e2:	2100      	movs	r1, #0
 80137e4:	4618      	mov	r0, r3
 80137e6:	f002 fb95 	bl	8015f14 <ff_convert>
 80137ea:	4603      	mov	r3, r0
 80137ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80137ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d004      	beq.n	80137fe <create_name+0x246>
 80137f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137f6:	3b80      	subs	r3, #128	; 0x80
 80137f8:	4a49      	ldr	r2, [pc, #292]	; (8013920 <create_name+0x368>)
 80137fa:	5cd3      	ldrb	r3, [r2, r3]
 80137fc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80137fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013802:	f043 0302 	orr.w	r3, r3, #2
 8013806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801380a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801380c:	2b00      	cmp	r3, #0
 801380e:	d007      	beq.n	8013820 <create_name+0x268>
 8013810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013812:	4619      	mov	r1, r3
 8013814:	4843      	ldr	r0, [pc, #268]	; (8013924 <create_name+0x36c>)
 8013816:	f7fd fcaf 	bl	8011178 <chk_chr>
 801381a:	4603      	mov	r3, r0
 801381c:	2b00      	cmp	r3, #0
 801381e:	d008      	beq.n	8013832 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013820:	235f      	movs	r3, #95	; 0x5f
 8013822:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013828:	f043 0303 	orr.w	r3, r3, #3
 801382c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013830:	e01b      	b.n	801386a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8013832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013834:	2b40      	cmp	r3, #64	; 0x40
 8013836:	d909      	bls.n	801384c <create_name+0x294>
 8013838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801383a:	2b5a      	cmp	r3, #90	; 0x5a
 801383c:	d806      	bhi.n	801384c <create_name+0x294>
					b |= 2;
 801383e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013842:	f043 0302 	orr.w	r3, r3, #2
 8013846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801384a:	e00e      	b.n	801386a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801384c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801384e:	2b60      	cmp	r3, #96	; 0x60
 8013850:	d90b      	bls.n	801386a <create_name+0x2b2>
 8013852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013854:	2b7a      	cmp	r3, #122	; 0x7a
 8013856:	d808      	bhi.n	801386a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013858:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801385c:	f043 0301 	orr.w	r3, r3, #1
 8013860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013866:	3b20      	subs	r3, #32
 8013868:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801386a:	6a3b      	ldr	r3, [r7, #32]
 801386c:	1c5a      	adds	r2, r3, #1
 801386e:	623a      	str	r2, [r7, #32]
 8013870:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013872:	b2d1      	uxtb	r1, r2
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	4413      	add	r3, r2
 8013878:	460a      	mov	r2, r1
 801387a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 801387e:	e763      	b.n	8013748 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013880:	bf00      	nop
 8013882:	e000      	b.n	8013886 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8013884:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801388c:	2be5      	cmp	r3, #229	; 0xe5
 801388e:	d103      	bne.n	8013898 <create_name+0x2e0>
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2205      	movs	r2, #5
 8013894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	2b08      	cmp	r3, #8
 801389c:	d104      	bne.n	80138a8 <create_name+0x2f0>
 801389e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138a2:	009b      	lsls	r3, r3, #2
 80138a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80138a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138ac:	f003 030c 	and.w	r3, r3, #12
 80138b0:	2b0c      	cmp	r3, #12
 80138b2:	d005      	beq.n	80138c0 <create_name+0x308>
 80138b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138b8:	f003 0303 	and.w	r3, r3, #3
 80138bc:	2b03      	cmp	r3, #3
 80138be:	d105      	bne.n	80138cc <create_name+0x314>
 80138c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138c4:	f043 0302 	orr.w	r3, r3, #2
 80138c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80138cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138d0:	f003 0302 	and.w	r3, r3, #2
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d117      	bne.n	8013908 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80138d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138dc:	f003 0303 	and.w	r3, r3, #3
 80138e0:	2b01      	cmp	r3, #1
 80138e2:	d105      	bne.n	80138f0 <create_name+0x338>
 80138e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138e8:	f043 0310 	orr.w	r3, r3, #16
 80138ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80138f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138f4:	f003 030c 	and.w	r3, r3, #12
 80138f8:	2b04      	cmp	r3, #4
 80138fa:	d105      	bne.n	8013908 <create_name+0x350>
 80138fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013900:	f043 0308 	orr.w	r3, r3, #8
 8013904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801390e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8013912:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013914:	4618      	mov	r0, r3
 8013916:	3728      	adds	r7, #40	; 0x28
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	08016d84 	.word	0x08016d84
 8013920:	08016e58 	.word	0x08016e58
 8013924:	08016d90 	.word	0x08016d90

08013928 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013928:	b590      	push	{r4, r7, lr}
 801392a:	b087      	sub	sp, #28
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801393c:	e002      	b.n	8013944 <follow_path+0x1c>
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	3301      	adds	r3, #1
 8013942:	603b      	str	r3, [r7, #0]
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	2b2f      	cmp	r3, #47	; 0x2f
 801394a:	d0f8      	beq.n	801393e <follow_path+0x16>
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	781b      	ldrb	r3, [r3, #0]
 8013950:	2b5c      	cmp	r3, #92	; 0x5c
 8013952:	d0f4      	beq.n	801393e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	2200      	movs	r2, #0
 8013958:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	2200      	movs	r2, #0
 801395e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	2b1f      	cmp	r3, #31
 8013966:	d80a      	bhi.n	801397e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2280      	movs	r2, #128	; 0x80
 801396c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8013970:	2100      	movs	r1, #0
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f7fe fc58 	bl	8012228 <dir_sdi>
 8013978:	4603      	mov	r3, r0
 801397a:	75fb      	strb	r3, [r7, #23]
 801397c:	e07c      	b.n	8013a78 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801397e:	463b      	mov	r3, r7
 8013980:	4619      	mov	r1, r3
 8013982:	6878      	ldr	r0, [r7, #4]
 8013984:	f7ff fe18 	bl	80135b8 <create_name>
 8013988:	4603      	mov	r3, r0
 801398a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801398c:	7dfb      	ldrb	r3, [r7, #23]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d16d      	bne.n	8013a6e <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f7ff fb36 	bl	8013004 <dir_find>
 8013998:	4603      	mov	r3, r0
 801399a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80139a2:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80139a4:	7dfb      	ldrb	r3, [r7, #23]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d00a      	beq.n	80139c0 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80139aa:	7dfb      	ldrb	r3, [r7, #23]
 80139ac:	2b04      	cmp	r3, #4
 80139ae:	d160      	bne.n	8013a72 <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80139b0:	7afb      	ldrb	r3, [r7, #11]
 80139b2:	f003 0304 	and.w	r3, r3, #4
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d15b      	bne.n	8013a72 <follow_path+0x14a>
 80139ba:	2305      	movs	r3, #5
 80139bc:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80139be:	e058      	b.n	8013a72 <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80139c0:	7afb      	ldrb	r3, [r7, #11]
 80139c2:	f003 0304 	and.w	r3, r3, #4
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d155      	bne.n	8013a76 <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	799b      	ldrb	r3, [r3, #6]
 80139ce:	f003 0310 	and.w	r3, r3, #16
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d102      	bne.n	80139dc <follow_path+0xb4>
				res = FR_NO_PATH; break;
 80139d6:	2305      	movs	r3, #5
 80139d8:	75fb      	strb	r3, [r7, #23]
 80139da:	e04d      	b.n	8013a78 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	781b      	ldrb	r3, [r3, #0]
 80139e0:	2b04      	cmp	r3, #4
 80139e2:	d12f      	bne.n	8013a44 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	689a      	ldr	r2, [r3, #8]
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80139f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80139f6:	693a      	ldr	r2, [r7, #16]
 80139f8:	79d2      	ldrb	r2, [r2, #7]
 80139fa:	431a      	orrs	r2, r3
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	695b      	ldr	r3, [r3, #20]
 8013a0c:	3334      	adds	r3, #52	; 0x34
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7fd f9a2 	bl	8010d58 <ld_dword>
 8013a14:	4602      	mov	r2, r0
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	695b      	ldr	r3, [r3, #20]
 8013a1e:	3321      	adds	r3, #33	; 0x21
 8013a20:	781b      	ldrb	r3, [r3, #0]
 8013a22:	f003 0302 	and.w	r3, r3, #2
 8013a26:	b2da      	uxtb	r2, r3
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	695b      	ldr	r3, [r3, #20]
 8013a30:	3338      	adds	r3, #56	; 0x38
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fd f9b3 	bl	8010d9e <ld_qword>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	460c      	mov	r4, r1
 8013a3c:	693a      	ldr	r2, [r7, #16]
 8013a3e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8013a42:	e79c      	b.n	801397e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a4e:	68fa      	ldr	r2, [r7, #12]
 8013a50:	8992      	ldrh	r2, [r2, #12]
 8013a52:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a56:	fb02 f200 	mul.w	r2, r2, r0
 8013a5a:	1a9b      	subs	r3, r3, r2
 8013a5c:	440b      	add	r3, r1
 8013a5e:	4619      	mov	r1, r3
 8013a60:	68f8      	ldr	r0, [r7, #12]
 8013a62:	f7fe fdb7 	bl	80125d4 <ld_clust>
 8013a66:	4602      	mov	r2, r0
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013a6c:	e787      	b.n	801397e <follow_path+0x56>
			if (res != FR_OK) break;
 8013a6e:	bf00      	nop
 8013a70:	e002      	b.n	8013a78 <follow_path+0x150>
				break;
 8013a72:	bf00      	nop
 8013a74:	e000      	b.n	8013a78 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013a76:	bf00      	nop
			}
		}
	}

	return res;
 8013a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	371c      	adds	r7, #28
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd90      	pop	{r4, r7, pc}

08013a82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013a82:	b480      	push	{r7}
 8013a84:	b087      	sub	sp, #28
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d031      	beq.n	8013afc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	617b      	str	r3, [r7, #20]
 8013a9e:	e002      	b.n	8013aa6 <get_ldnumber+0x24>
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	617b      	str	r3, [r7, #20]
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	2b1f      	cmp	r3, #31
 8013aac:	d903      	bls.n	8013ab6 <get_ldnumber+0x34>
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	2b3a      	cmp	r3, #58	; 0x3a
 8013ab4:	d1f4      	bne.n	8013aa0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	2b3a      	cmp	r3, #58	; 0x3a
 8013abc:	d11c      	bne.n	8013af8 <get_ldnumber+0x76>
			tp = *path;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	1c5a      	adds	r2, r3, #1
 8013ac8:	60fa      	str	r2, [r7, #12]
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	3b30      	subs	r3, #48	; 0x30
 8013ace:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	2b09      	cmp	r3, #9
 8013ad4:	d80e      	bhi.n	8013af4 <get_ldnumber+0x72>
 8013ad6:	68fa      	ldr	r2, [r7, #12]
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d10a      	bne.n	8013af4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	2b01      	cmp	r3, #1
 8013ae2:	d807      	bhi.n	8013af4 <get_ldnumber+0x72>
					vol = (int)i;
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	3301      	adds	r3, #1
 8013aec:	617b      	str	r3, [r7, #20]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	697a      	ldr	r2, [r7, #20]
 8013af2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013af4:	693b      	ldr	r3, [r7, #16]
 8013af6:	e002      	b.n	8013afe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013af8:	2300      	movs	r3, #0
 8013afa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013afc:	693b      	ldr	r3, [r7, #16]
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	371c      	adds	r7, #28
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr
	...

08013b0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
 8013b14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	70da      	strb	r2, [r3, #3]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b22:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013b24:	6839      	ldr	r1, [r7, #0]
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7fd fcf2 	bl	8011510 <move_window>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d001      	beq.n	8013b36 <check_fs+0x2a>
 8013b32:	2304      	movs	r3, #4
 8013b34:	e044      	b.n	8013bc0 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	333c      	adds	r3, #60	; 0x3c
 8013b3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7fd f8f2 	bl	8010d28 <ld_word>
 8013b44:	4603      	mov	r3, r0
 8013b46:	461a      	mov	r2, r3
 8013b48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d001      	beq.n	8013b54 <check_fs+0x48>
 8013b50:	2303      	movs	r3, #3
 8013b52:	e035      	b.n	8013bc0 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b5a:	2be9      	cmp	r3, #233	; 0xe9
 8013b5c:	d009      	beq.n	8013b72 <check_fs+0x66>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b64:	2beb      	cmp	r3, #235	; 0xeb
 8013b66:	d11e      	bne.n	8013ba6 <check_fs+0x9a>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013b6e:	2b90      	cmp	r3, #144	; 0x90
 8013b70:	d119      	bne.n	8013ba6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	333c      	adds	r3, #60	; 0x3c
 8013b76:	3336      	adds	r3, #54	; 0x36
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fd f8ed 	bl	8010d58 <ld_dword>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013b84:	4a10      	ldr	r2, [pc, #64]	; (8013bc8 <check_fs+0xbc>)
 8013b86:	4293      	cmp	r3, r2
 8013b88:	d101      	bne.n	8013b8e <check_fs+0x82>
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	e018      	b.n	8013bc0 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	333c      	adds	r3, #60	; 0x3c
 8013b92:	3352      	adds	r3, #82	; 0x52
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7fd f8df 	bl	8010d58 <ld_dword>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	4b0b      	ldr	r3, [pc, #44]	; (8013bcc <check_fs+0xc0>)
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d101      	bne.n	8013ba6 <check_fs+0x9a>
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	e00c      	b.n	8013bc0 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	333c      	adds	r3, #60	; 0x3c
 8013baa:	220b      	movs	r2, #11
 8013bac:	4908      	ldr	r1, [pc, #32]	; (8013bd0 <check_fs+0xc4>)
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7fd fabb 	bl	801112a <mem_cmp>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d101      	bne.n	8013bbe <check_fs+0xb2>
 8013bba:	2301      	movs	r3, #1
 8013bbc:	e000      	b.n	8013bc0 <check_fs+0xb4>
#endif
	return 2;
 8013bbe:	2302      	movs	r3, #2
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3708      	adds	r7, #8
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	00544146 	.word	0x00544146
 8013bcc:	33544146 	.word	0x33544146
 8013bd0:	08016d98 	.word	0x08016d98

08013bd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013bd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8013bd8:	b098      	sub	sp, #96	; 0x60
 8013bda:	af00      	add	r7, sp, #0
 8013bdc:	60f8      	str	r0, [r7, #12]
 8013bde:	60b9      	str	r1, [r7, #8]
 8013be0:	4613      	mov	r3, r2
 8013be2:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	2200      	movs	r2, #0
 8013be8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013bea:	68f8      	ldr	r0, [r7, #12]
 8013bec:	f7ff ff49 	bl	8013a82 <get_ldnumber>
 8013bf0:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8013bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	da01      	bge.n	8013bfc <find_volume+0x28>
 8013bf8:	230b      	movs	r3, #11
 8013bfa:	e368      	b.n	80142ce <find_volume+0x6fa>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013bfc:	4aaa      	ldr	r2, [pc, #680]	; (8013ea8 <find_volume+0x2d4>)
 8013bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c04:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d101      	bne.n	8013c10 <find_volume+0x3c>
 8013c0c:	230c      	movs	r3, #12
 8013c0e:	e35e      	b.n	80142ce <find_volume+0x6fa>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c14:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013c16:	79fb      	ldrb	r3, [r7, #7]
 8013c18:	f023 0301 	bic.w	r3, r3, #1
 8013c1c:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c20:	781b      	ldrb	r3, [r3, #0]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d01a      	beq.n	8013c5c <find_volume+0x88>
		stat = disk_status(fs->drv);
 8013c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c28:	785b      	ldrb	r3, [r3, #1]
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f7fc ffde 	bl	8010bec <disk_status>
 8013c30:	4603      	mov	r3, r0
 8013c32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013c36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c3a:	f003 0301 	and.w	r3, r3, #1
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d10c      	bne.n	8013c5c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013c42:	79fb      	ldrb	r3, [r7, #7]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d007      	beq.n	8013c58 <find_volume+0x84>
 8013c48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c4c:	f003 0304 	and.w	r3, r3, #4
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d001      	beq.n	8013c58 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8013c54:	230a      	movs	r3, #10
 8013c56:	e33a      	b.n	80142ce <find_volume+0x6fa>
			}
			return FR_OK;				/* The file system object is valid */
 8013c58:	2300      	movs	r3, #0
 8013c5a:	e338      	b.n	80142ce <find_volume+0x6fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c5e:	2200      	movs	r2, #0
 8013c60:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c64:	b2da      	uxtb	r2, r3
 8013c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c68:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c6c:	785b      	ldrb	r3, [r3, #1]
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7fc ffd6 	bl	8010c20 <disk_initialize>
 8013c74:	4603      	mov	r3, r0
 8013c76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013c7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c7e:	f003 0301 	and.w	r3, r3, #1
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d001      	beq.n	8013c8a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013c86:	2303      	movs	r3, #3
 8013c88:	e321      	b.n	80142ce <find_volume+0x6fa>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013c8a:	79fb      	ldrb	r3, [r7, #7]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d007      	beq.n	8013ca0 <find_volume+0xcc>
 8013c90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c94:	f003 0304 	and.w	r3, r3, #4
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d001      	beq.n	8013ca0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8013c9c:	230a      	movs	r3, #10
 8013c9e:	e316      	b.n	80142ce <find_volume+0x6fa>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8013ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ca2:	7858      	ldrb	r0, [r3, #1]
 8013ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ca6:	330c      	adds	r3, #12
 8013ca8:	461a      	mov	r2, r3
 8013caa:	2102      	movs	r1, #2
 8013cac:	f7fd f81e 	bl	8010cec <disk_ioctl>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d001      	beq.n	8013cba <find_volume+0xe6>
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	e309      	b.n	80142ce <find_volume+0x6fa>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cbc:	899b      	ldrh	r3, [r3, #12]
 8013cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013cc2:	d80d      	bhi.n	8013ce0 <find_volume+0x10c>
 8013cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cc6:	899b      	ldrh	r3, [r3, #12]
 8013cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ccc:	d308      	bcc.n	8013ce0 <find_volume+0x10c>
 8013cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cd0:	899b      	ldrh	r3, [r3, #12]
 8013cd2:	461a      	mov	r2, r3
 8013cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cd6:	899b      	ldrh	r3, [r3, #12]
 8013cd8:	3b01      	subs	r3, #1
 8013cda:	4013      	ands	r3, r2
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d001      	beq.n	8013ce4 <find_volume+0x110>
 8013ce0:	2301      	movs	r3, #1
 8013ce2:	e2f4      	b.n	80142ce <find_volume+0x6fa>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013ce8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013cea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013cec:	f7ff ff0e 	bl	8013b0c <check_fs>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013cfa:	2b02      	cmp	r3, #2
 8013cfc:	d14b      	bne.n	8013d96 <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013cfe:	2300      	movs	r3, #0
 8013d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d02:	e01f      	b.n	8013d44 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d06:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8013d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d0c:	011b      	lsls	r3, r3, #4
 8013d0e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013d12:	4413      	add	r3, r2
 8013d14:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d18:	3304      	adds	r3, #4
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d006      	beq.n	8013d2e <find_volume+0x15a>
 8013d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d22:	3308      	adds	r3, #8
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7fd f817 	bl	8010d58 <ld_dword>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	e000      	b.n	8013d30 <find_volume+0x15c>
 8013d2e:	2200      	movs	r2, #0
 8013d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d32:	009b      	lsls	r3, r3, #2
 8013d34:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8013d38:	440b      	add	r3, r1
 8013d3a:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d40:	3301      	adds	r3, #1
 8013d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d46:	2b03      	cmp	r3, #3
 8013d48:	d9dc      	bls.n	8013d04 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8013d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d002      	beq.n	8013d5a <find_volume+0x186>
 8013d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d56:	3b01      	subs	r3, #1
 8013d58:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d5c:	009b      	lsls	r3, r3, #2
 8013d5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8013d62:	4413      	add	r3, r2
 8013d64:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8013d68:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d005      	beq.n	8013d7c <find_volume+0x1a8>
 8013d70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013d72:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013d74:	f7ff feca 	bl	8013b0c <check_fs>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	e000      	b.n	8013d7e <find_volume+0x1aa>
 8013d7c:	2303      	movs	r3, #3
 8013d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d905      	bls.n	8013d96 <find_volume+0x1c2>
 8013d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d92:	2b03      	cmp	r3, #3
 8013d94:	d9e1      	bls.n	8013d5a <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013d96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d9a:	2b04      	cmp	r3, #4
 8013d9c:	d101      	bne.n	8013da2 <find_volume+0x1ce>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	e295      	b.n	80142ce <find_volume+0x6fa>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013da2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013da6:	2b01      	cmp	r3, #1
 8013da8:	d901      	bls.n	8013dae <find_volume+0x1da>
 8013daa:	230d      	movs	r3, #13
 8013dac:	e28f      	b.n	80142ce <find_volume+0x6fa>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8013dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013db2:	2b01      	cmp	r3, #1
 8013db4:	f040 8101 	bne.w	8013fba <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8013db8:	230b      	movs	r3, #11
 8013dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8013dbc:	e002      	b.n	8013dc4 <find_volume+0x1f0>
 8013dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dc0:	3301      	adds	r3, #1
 8013dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8013dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dc6:	2b3f      	cmp	r3, #63	; 0x3f
 8013dc8:	d806      	bhi.n	8013dd8 <find_volume+0x204>
 8013dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dce:	4413      	add	r3, r2
 8013dd0:	333c      	adds	r3, #60	; 0x3c
 8013dd2:	781b      	ldrb	r3, [r3, #0]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d0f2      	beq.n	8013dbe <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8013dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dda:	2b3f      	cmp	r3, #63	; 0x3f
 8013ddc:	d801      	bhi.n	8013de2 <find_volume+0x20e>
 8013dde:	230d      	movs	r3, #13
 8013de0:	e275      	b.n	80142ce <find_volume+0x6fa>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8013de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013de4:	333c      	adds	r3, #60	; 0x3c
 8013de6:	3368      	adds	r3, #104	; 0x68
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fc ff9d 	bl	8010d28 <ld_word>
 8013dee:	4603      	mov	r3, r0
 8013df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013df4:	d001      	beq.n	8013dfa <find_volume+0x226>
 8013df6:	230d      	movs	r3, #13
 8013df8:	e269      	b.n	80142ce <find_volume+0x6fa>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8013dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dfc:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8013e00:	461a      	mov	r2, r3
 8013e02:	2301      	movs	r3, #1
 8013e04:	4093      	lsls	r3, r2
 8013e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e08:	8992      	ldrh	r2, [r2, #12]
 8013e0a:	4293      	cmp	r3, r2
 8013e0c:	d001      	beq.n	8013e12 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 8013e0e:	230d      	movs	r3, #13
 8013e10:	e25d      	b.n	80142ce <find_volume+0x6fa>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8013e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e14:	333c      	adds	r3, #60	; 0x3c
 8013e16:	3348      	adds	r3, #72	; 0x48
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f7fc ffc0 	bl	8010d9e <ld_qword>
 8013e1e:	460a      	mov	r2, r1
 8013e20:	4601      	mov	r1, r0
 8013e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e24:	469b      	mov	fp, r3
 8013e26:	f04f 0c00 	mov.w	ip, #0
 8013e2a:	eb1b 0301 	adds.w	r3, fp, r1
 8013e2e:	eb4c 0402 	adc.w	r4, ip, r2
 8013e32:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8013e36:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013e3a:	2c01      	cmp	r4, #1
 8013e3c:	bf08      	it	eq
 8013e3e:	2b00      	cmpeq	r3, #0
 8013e40:	d301      	bcc.n	8013e46 <find_volume+0x272>
 8013e42:	230d      	movs	r3, #13
 8013e44:	e243      	b.n	80142ce <find_volume+0x6fa>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8013e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e48:	333c      	adds	r3, #60	; 0x3c
 8013e4a:	3354      	adds	r3, #84	; 0x54
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7fc ff83 	bl	8010d58 <ld_dword>
 8013e52:	4602      	mov	r2, r0
 8013e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e56:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8013e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e5a:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8013e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e60:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8013e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e64:	789b      	ldrb	r3, [r3, #2]
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d001      	beq.n	8013e6e <find_volume+0x29a>
 8013e6a:	230d      	movs	r3, #13
 8013e6c:	e22f      	b.n	80142ce <find_volume+0x6fa>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8013e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e70:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8013e74:	461a      	mov	r2, r3
 8013e76:	2301      	movs	r3, #1
 8013e78:	4093      	lsls	r3, r2
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e7e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8013e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e82:	895b      	ldrh	r3, [r3, #10]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d101      	bne.n	8013e8c <find_volume+0x2b8>
 8013e88:	230d      	movs	r3, #13
 8013e8a:	e220      	b.n	80142ce <find_volume+0x6fa>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8013e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e8e:	333c      	adds	r3, #60	; 0x3c
 8013e90:	335c      	adds	r3, #92	; 0x5c
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fc ff60 	bl	8010d58 <ld_dword>
 8013e98:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8013e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e9c:	4a03      	ldr	r2, [pc, #12]	; (8013eac <find_volume+0x2d8>)
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	d906      	bls.n	8013eb0 <find_volume+0x2dc>
 8013ea2:	230d      	movs	r3, #13
 8013ea4:	e213      	b.n	80142ce <find_volume+0x6fa>
 8013ea6:	bf00      	nop
 8013ea8:	24000284 	.word	0x24000284
 8013eac:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8013eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb2:	1c9a      	adds	r2, r3, #2
 8013eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013eb6:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8013eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013eba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013ebc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8013ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ec0:	333c      	adds	r3, #60	; 0x3c
 8013ec2:	3358      	adds	r3, #88	; 0x58
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7fc ff47 	bl	8010d58 <ld_dword>
 8013eca:	4602      	mov	r2, r0
 8013ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ece:	441a      	add	r2, r3
 8013ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ed2:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8013ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ed6:	333c      	adds	r3, #60	; 0x3c
 8013ed8:	3350      	adds	r3, #80	; 0x50
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7fc ff3c 	bl	8010d58 <ld_dword>
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ee4:	441a      	add	r2, r3
 8013ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ee8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8013eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eee:	4619      	mov	r1, r3
 8013ef0:	f04f 0200 	mov.w	r2, #0
 8013ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ef6:	895b      	ldrh	r3, [r3, #10]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013efc:	fb03 f300 	mul.w	r3, r3, r0
 8013f00:	469b      	mov	fp, r3
 8013f02:	f04f 0c00 	mov.w	ip, #0
 8013f06:	eb1b 0301 	adds.w	r3, fp, r1
 8013f0a:	eb4c 0402 	adc.w	r4, ip, r2
 8013f0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013f12:	42a2      	cmp	r2, r4
 8013f14:	bf08      	it	eq
 8013f16:	4299      	cmpeq	r1, r3
 8013f18:	d201      	bcs.n	8013f1e <find_volume+0x34a>
 8013f1a:	230d      	movs	r3, #13
 8013f1c:	e1d7      	b.n	80142ce <find_volume+0x6fa>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8013f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f20:	333c      	adds	r3, #60	; 0x3c
 8013f22:	3360      	adds	r3, #96	; 0x60
 8013f24:	4618      	mov	r0, r3
 8013f26:	f7fc ff17 	bl	8010d58 <ld_dword>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f2e:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8013f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f34:	4619      	mov	r1, r3
 8013f36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013f38:	f7fd fb88 	bl	801164c <clust2sect>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	4619      	mov	r1, r3
 8013f40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013f42:	f7fd fae5 	bl	8011510 <move_window>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d001      	beq.n	8013f50 <find_volume+0x37c>
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	e1be      	b.n	80142ce <find_volume+0x6fa>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8013f50:	2300      	movs	r3, #0
 8013f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f54:	e015      	b.n	8013f82 <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8013f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f5a:	4413      	add	r3, r2
 8013f5c:	333c      	adds	r3, #60	; 0x3c
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	2b81      	cmp	r3, #129	; 0x81
 8013f62:	d10b      	bne.n	8013f7c <find_volume+0x3a8>
 8013f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f66:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8013f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f6c:	3314      	adds	r3, #20
 8013f6e:	4413      	add	r3, r2
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7fc fef1 	bl	8010d58 <ld_dword>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b02      	cmp	r3, #2
 8013f7a:	d009      	beq.n	8013f90 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8013f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f7e:	3320      	adds	r3, #32
 8013f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f84:	899b      	ldrh	r3, [r3, #12]
 8013f86:	461a      	mov	r2, r3
 8013f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f8a:	4293      	cmp	r3, r2
 8013f8c:	d3e3      	bcc.n	8013f56 <find_volume+0x382>
 8013f8e:	e000      	b.n	8013f92 <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8013f90:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8013f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f94:	899b      	ldrh	r3, [r3, #12]
 8013f96:	461a      	mov	r2, r3
 8013f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f9a:	4293      	cmp	r3, r2
 8013f9c:	d101      	bne.n	8013fa2 <find_volume+0x3ce>
 8013f9e:	230d      	movs	r3, #13
 8013fa0:	e195      	b.n	80142ce <find_volume+0x6fa>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8013fa8:	61da      	str	r2, [r3, #28]
 8013faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fac:	69da      	ldr	r2, [r3, #28]
 8013fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fb0:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8013fb2:	2304      	movs	r3, #4
 8013fb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013fb8:	e177      	b.n	80142aa <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fbc:	333c      	adds	r3, #60	; 0x3c
 8013fbe:	330b      	adds	r3, #11
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7fc feb1 	bl	8010d28 <ld_word>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	461a      	mov	r2, r3
 8013fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fcc:	899b      	ldrh	r3, [r3, #12]
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	d001      	beq.n	8013fd6 <find_volume+0x402>
 8013fd2:	230d      	movs	r3, #13
 8013fd4:	e17b      	b.n	80142ce <find_volume+0x6fa>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fd8:	333c      	adds	r3, #60	; 0x3c
 8013fda:	3316      	adds	r3, #22
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7fc fea3 	bl	8010d28 <ld_word>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d106      	bne.n	8013ffa <find_volume+0x426>
 8013fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fee:	333c      	adds	r3, #60	; 0x3c
 8013ff0:	3324      	adds	r3, #36	; 0x24
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fc feb0 	bl	8010d58 <ld_dword>
 8013ff8:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 8013ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ffe:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014002:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8014006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014008:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801400a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801400c:	789b      	ldrb	r3, [r3, #2]
 801400e:	2b01      	cmp	r3, #1
 8014010:	d005      	beq.n	801401e <find_volume+0x44a>
 8014012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014014:	789b      	ldrb	r3, [r3, #2]
 8014016:	2b02      	cmp	r3, #2
 8014018:	d001      	beq.n	801401e <find_volume+0x44a>
 801401a:	230d      	movs	r3, #13
 801401c:	e157      	b.n	80142ce <find_volume+0x6fa>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801401e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014020:	789b      	ldrb	r3, [r3, #2]
 8014022:	461a      	mov	r2, r3
 8014024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014026:	fb02 f303 	mul.w	r3, r2, r3
 801402a:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801402c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801402e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014032:	b29a      	uxth	r2, r3
 8014034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014036:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801403a:	895b      	ldrh	r3, [r3, #10]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d008      	beq.n	8014052 <find_volume+0x47e>
 8014040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014042:	895b      	ldrh	r3, [r3, #10]
 8014044:	461a      	mov	r2, r3
 8014046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014048:	895b      	ldrh	r3, [r3, #10]
 801404a:	3b01      	subs	r3, #1
 801404c:	4013      	ands	r3, r2
 801404e:	2b00      	cmp	r3, #0
 8014050:	d001      	beq.n	8014056 <find_volume+0x482>
 8014052:	230d      	movs	r3, #13
 8014054:	e13b      	b.n	80142ce <find_volume+0x6fa>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014058:	333c      	adds	r3, #60	; 0x3c
 801405a:	3311      	adds	r3, #17
 801405c:	4618      	mov	r0, r3
 801405e:	f7fc fe63 	bl	8010d28 <ld_word>
 8014062:	4603      	mov	r3, r0
 8014064:	461a      	mov	r2, r3
 8014066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014068:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801406a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801406c:	891b      	ldrh	r3, [r3, #8]
 801406e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014070:	8992      	ldrh	r2, [r2, #12]
 8014072:	0952      	lsrs	r2, r2, #5
 8014074:	b292      	uxth	r2, r2
 8014076:	fbb3 f1f2 	udiv	r1, r3, r2
 801407a:	fb02 f201 	mul.w	r2, r2, r1
 801407e:	1a9b      	subs	r3, r3, r2
 8014080:	b29b      	uxth	r3, r3
 8014082:	2b00      	cmp	r3, #0
 8014084:	d001      	beq.n	801408a <find_volume+0x4b6>
 8014086:	230d      	movs	r3, #13
 8014088:	e121      	b.n	80142ce <find_volume+0x6fa>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801408a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801408c:	333c      	adds	r3, #60	; 0x3c
 801408e:	3313      	adds	r3, #19
 8014090:	4618      	mov	r0, r3
 8014092:	f7fc fe49 	bl	8010d28 <ld_word>
 8014096:	4603      	mov	r3, r0
 8014098:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801409a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801409c:	2b00      	cmp	r3, #0
 801409e:	d106      	bne.n	80140ae <find_volume+0x4da>
 80140a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80140a2:	333c      	adds	r3, #60	; 0x3c
 80140a4:	3320      	adds	r3, #32
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7fc fe56 	bl	8010d58 <ld_dword>
 80140ac:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80140ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80140b0:	333c      	adds	r3, #60	; 0x3c
 80140b2:	330e      	adds	r3, #14
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7fc fe37 	bl	8010d28 <ld_word>
 80140ba:	4603      	mov	r3, r0
 80140bc:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80140be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d101      	bne.n	80140c8 <find_volume+0x4f4>
 80140c4:	230d      	movs	r3, #13
 80140c6:	e102      	b.n	80142ce <find_volume+0x6fa>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80140c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80140ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140cc:	4413      	add	r3, r2
 80140ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80140d0:	8911      	ldrh	r1, [r2, #8]
 80140d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80140d4:	8992      	ldrh	r2, [r2, #12]
 80140d6:	0952      	lsrs	r2, r2, #5
 80140d8:	b292      	uxth	r2, r2
 80140da:	fbb1 f2f2 	udiv	r2, r1, r2
 80140de:	b292      	uxth	r2, r2
 80140e0:	4413      	add	r3, r2
 80140e2:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80140e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140e8:	429a      	cmp	r2, r3
 80140ea:	d201      	bcs.n	80140f0 <find_volume+0x51c>
 80140ec:	230d      	movs	r3, #13
 80140ee:	e0ee      	b.n	80142ce <find_volume+0x6fa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80140f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f4:	1ad3      	subs	r3, r2, r3
 80140f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80140f8:	8952      	ldrh	r2, [r2, #10]
 80140fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80140fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014102:	2b00      	cmp	r3, #0
 8014104:	d101      	bne.n	801410a <find_volume+0x536>
 8014106:	230d      	movs	r3, #13
 8014108:	e0e1      	b.n	80142ce <find_volume+0x6fa>
		fmt = FS_FAT32;
 801410a:	2303      	movs	r3, #3
 801410c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014112:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014116:	4293      	cmp	r3, r2
 8014118:	d802      	bhi.n	8014120 <find_volume+0x54c>
 801411a:	2302      	movs	r3, #2
 801411c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014122:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014126:	4293      	cmp	r3, r2
 8014128:	d802      	bhi.n	8014130 <find_volume+0x55c>
 801412a:	2301      	movs	r3, #1
 801412c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014132:	1c9a      	adds	r2, r3, #2
 8014134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014136:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8014138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801413a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801413c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801413e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014142:	441a      	add	r2, r3
 8014144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014146:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8014148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801414c:	441a      	add	r2, r3
 801414e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014150:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8014152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014156:	2b03      	cmp	r3, #3
 8014158:	d11e      	bne.n	8014198 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801415a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801415c:	333c      	adds	r3, #60	; 0x3c
 801415e:	332a      	adds	r3, #42	; 0x2a
 8014160:	4618      	mov	r0, r3
 8014162:	f7fc fde1 	bl	8010d28 <ld_word>
 8014166:	4603      	mov	r3, r0
 8014168:	2b00      	cmp	r3, #0
 801416a:	d001      	beq.n	8014170 <find_volume+0x59c>
 801416c:	230d      	movs	r3, #13
 801416e:	e0ae      	b.n	80142ce <find_volume+0x6fa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014172:	891b      	ldrh	r3, [r3, #8]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d001      	beq.n	801417c <find_volume+0x5a8>
 8014178:	230d      	movs	r3, #13
 801417a:	e0a8      	b.n	80142ce <find_volume+0x6fa>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801417c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801417e:	333c      	adds	r3, #60	; 0x3c
 8014180:	332c      	adds	r3, #44	; 0x2c
 8014182:	4618      	mov	r0, r3
 8014184:	f7fc fde8 	bl	8010d58 <ld_dword>
 8014188:	4602      	mov	r2, r0
 801418a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801418c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801418e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014190:	6a1b      	ldr	r3, [r3, #32]
 8014192:	009b      	lsls	r3, r3, #2
 8014194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014196:	e01f      	b.n	80141d8 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801419a:	891b      	ldrh	r3, [r3, #8]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d101      	bne.n	80141a4 <find_volume+0x5d0>
 80141a0:	230d      	movs	r3, #13
 80141a2:	e094      	b.n	80142ce <find_volume+0x6fa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80141a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141aa:	441a      	add	r2, r3
 80141ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141ae:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80141b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80141b4:	2b02      	cmp	r3, #2
 80141b6:	d103      	bne.n	80141c0 <find_volume+0x5ec>
 80141b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141ba:	6a1b      	ldr	r3, [r3, #32]
 80141bc:	005b      	lsls	r3, r3, #1
 80141be:	e00a      	b.n	80141d6 <find_volume+0x602>
 80141c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141c2:	6a1a      	ldr	r2, [r3, #32]
 80141c4:	4613      	mov	r3, r2
 80141c6:	005b      	lsls	r3, r3, #1
 80141c8:	4413      	add	r3, r2
 80141ca:	085a      	lsrs	r2, r3, #1
 80141cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141ce:	6a1b      	ldr	r3, [r3, #32]
 80141d0:	f003 0301 	and.w	r3, r3, #1
 80141d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80141d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80141d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141de:	899b      	ldrh	r3, [r3, #12]
 80141e0:	4619      	mov	r1, r3
 80141e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141e4:	440b      	add	r3, r1
 80141e6:	3b01      	subs	r3, #1
 80141e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80141ea:	8989      	ldrh	r1, [r1, #12]
 80141ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d201      	bcs.n	80141f8 <find_volume+0x624>
 80141f4:	230d      	movs	r3, #13
 80141f6:	e06a      	b.n	80142ce <find_volume+0x6fa>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80141f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141fa:	f04f 32ff 	mov.w	r2, #4294967295
 80141fe:	61da      	str	r2, [r3, #28]
 8014200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014202:	69da      	ldr	r2, [r3, #28]
 8014204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014206:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8014208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801420a:	2280      	movs	r2, #128	; 0x80
 801420c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801420e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014212:	2b03      	cmp	r3, #3
 8014214:	d149      	bne.n	80142aa <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014218:	333c      	adds	r3, #60	; 0x3c
 801421a:	3330      	adds	r3, #48	; 0x30
 801421c:	4618      	mov	r0, r3
 801421e:	f7fc fd83 	bl	8010d28 <ld_word>
 8014222:	4603      	mov	r3, r0
 8014224:	2b01      	cmp	r3, #1
 8014226:	d140      	bne.n	80142aa <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801422a:	3301      	adds	r3, #1
 801422c:	4619      	mov	r1, r3
 801422e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014230:	f7fd f96e 	bl	8011510 <move_window>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	d137      	bne.n	80142aa <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 801423a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801423c:	2200      	movs	r2, #0
 801423e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014242:	333c      	adds	r3, #60	; 0x3c
 8014244:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014248:	4618      	mov	r0, r3
 801424a:	f7fc fd6d 	bl	8010d28 <ld_word>
 801424e:	4603      	mov	r3, r0
 8014250:	461a      	mov	r2, r3
 8014252:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014256:	429a      	cmp	r2, r3
 8014258:	d127      	bne.n	80142aa <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801425a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801425c:	333c      	adds	r3, #60	; 0x3c
 801425e:	4618      	mov	r0, r3
 8014260:	f7fc fd7a 	bl	8010d58 <ld_dword>
 8014264:	4602      	mov	r2, r0
 8014266:	4b1c      	ldr	r3, [pc, #112]	; (80142d8 <find_volume+0x704>)
 8014268:	429a      	cmp	r2, r3
 801426a:	d11e      	bne.n	80142aa <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801426c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801426e:	333c      	adds	r3, #60	; 0x3c
 8014270:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014274:	4618      	mov	r0, r3
 8014276:	f7fc fd6f 	bl	8010d58 <ld_dword>
 801427a:	4602      	mov	r2, r0
 801427c:	4b17      	ldr	r3, [pc, #92]	; (80142dc <find_volume+0x708>)
 801427e:	429a      	cmp	r2, r3
 8014280:	d113      	bne.n	80142aa <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014284:	333c      	adds	r3, #60	; 0x3c
 8014286:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801428a:	4618      	mov	r0, r3
 801428c:	f7fc fd64 	bl	8010d58 <ld_dword>
 8014290:	4602      	mov	r2, r0
 8014292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014294:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014298:	333c      	adds	r3, #60	; 0x3c
 801429a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fc fd5a 	bl	8010d58 <ld_dword>
 80142a4:	4602      	mov	r2, r0
 80142a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142a8:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80142aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142ac:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80142b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80142b2:	4b0b      	ldr	r3, [pc, #44]	; (80142e0 <find_volume+0x70c>)
 80142b4:	881b      	ldrh	r3, [r3, #0]
 80142b6:	3301      	adds	r3, #1
 80142b8:	b29a      	uxth	r2, r3
 80142ba:	4b09      	ldr	r3, [pc, #36]	; (80142e0 <find_volume+0x70c>)
 80142bc:	801a      	strh	r2, [r3, #0]
 80142be:	4b08      	ldr	r3, [pc, #32]	; (80142e0 <find_volume+0x70c>)
 80142c0:	881a      	ldrh	r2, [r3, #0]
 80142c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80142c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80142c8:	f7fd f8ba 	bl	8011440 <clear_lock>
#endif
	return FR_OK;
 80142cc:	2300      	movs	r3, #0
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	3760      	adds	r7, #96	; 0x60
 80142d2:	46bd      	mov	sp, r7
 80142d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80142d8:	41615252 	.word	0x41615252
 80142dc:	61417272 	.word	0x61417272
 80142e0:	2400028c 	.word	0x2400028c

080142e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80142ee:	2309      	movs	r3, #9
 80142f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d01c      	beq.n	8014332 <validate+0x4e>
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d018      	beq.n	8014332 <validate+0x4e>
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d013      	beq.n	8014332 <validate+0x4e>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	889a      	ldrh	r2, [r3, #4]
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	88db      	ldrh	r3, [r3, #6]
 8014314:	429a      	cmp	r2, r3
 8014316:	d10c      	bne.n	8014332 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	785b      	ldrb	r3, [r3, #1]
 801431e:	4618      	mov	r0, r3
 8014320:	f7fc fc64 	bl	8010bec <disk_status>
 8014324:	4603      	mov	r3, r0
 8014326:	f003 0301 	and.w	r3, r3, #1
 801432a:	2b00      	cmp	r3, #0
 801432c:	d101      	bne.n	8014332 <validate+0x4e>
			res = FR_OK;
 801432e:	2300      	movs	r3, #0
 8014330:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014332:	7bfb      	ldrb	r3, [r7, #15]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d102      	bne.n	801433e <validate+0x5a>
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	e000      	b.n	8014340 <validate+0x5c>
 801433e:	2300      	movs	r3, #0
 8014340:	683a      	ldr	r2, [r7, #0]
 8014342:	6013      	str	r3, [r2, #0]
	return res;
 8014344:	7bfb      	ldrb	r3, [r7, #15]
}
 8014346:	4618      	mov	r0, r3
 8014348:	3710      	adds	r7, #16
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
	...

08014350 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b088      	sub	sp, #32
 8014354:	af00      	add	r7, sp, #0
 8014356:	60f8      	str	r0, [r7, #12]
 8014358:	60b9      	str	r1, [r7, #8]
 801435a:	4613      	mov	r3, r2
 801435c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014362:	f107 0310 	add.w	r3, r7, #16
 8014366:	4618      	mov	r0, r3
 8014368:	f7ff fb8b 	bl	8013a82 <get_ldnumber>
 801436c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801436e:	69fb      	ldr	r3, [r7, #28]
 8014370:	2b00      	cmp	r3, #0
 8014372:	da01      	bge.n	8014378 <f_mount+0x28>
 8014374:	230b      	movs	r3, #11
 8014376:	e02b      	b.n	80143d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014378:	4a17      	ldr	r2, [pc, #92]	; (80143d8 <f_mount+0x88>)
 801437a:	69fb      	ldr	r3, [r7, #28]
 801437c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014380:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014382:	69bb      	ldr	r3, [r7, #24]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d005      	beq.n	8014394 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014388:	69b8      	ldr	r0, [r7, #24]
 801438a:	f7fd f859 	bl	8011440 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801438e:	69bb      	ldr	r3, [r7, #24]
 8014390:	2200      	movs	r2, #0
 8014392:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d002      	beq.n	80143a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	2200      	movs	r2, #0
 801439e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80143a0:	68fa      	ldr	r2, [r7, #12]
 80143a2:	490d      	ldr	r1, [pc, #52]	; (80143d8 <f_mount+0x88>)
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d002      	beq.n	80143b6 <f_mount+0x66>
 80143b0:	79fb      	ldrb	r3, [r7, #7]
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d001      	beq.n	80143ba <f_mount+0x6a>
 80143b6:	2300      	movs	r3, #0
 80143b8:	e00a      	b.n	80143d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80143ba:	f107 010c 	add.w	r1, r7, #12
 80143be:	f107 0308 	add.w	r3, r7, #8
 80143c2:	2200      	movs	r2, #0
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7ff fc05 	bl	8013bd4 <find_volume>
 80143ca:	4603      	mov	r3, r0
 80143cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80143ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	3720      	adds	r7, #32
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}
 80143d8:	24000284 	.word	0x24000284

080143dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80143dc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80143e0:	b0a4      	sub	sp, #144	; 0x90
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	60f8      	str	r0, [r7, #12]
 80143e6:	60b9      	str	r1, [r7, #8]
 80143e8:	4613      	mov	r3, r2
 80143ea:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d101      	bne.n	80143f6 <f_open+0x1a>
 80143f2:	2309      	movs	r3, #9
 80143f4:	e2bd      	b.n	8014972 <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80143f6:	79fb      	ldrb	r3, [r7, #7]
 80143f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80143fc:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80143fe:	79fa      	ldrb	r2, [r7, #7]
 8014400:	f107 0114 	add.w	r1, r7, #20
 8014404:	f107 0308 	add.w	r3, r7, #8
 8014408:	4618      	mov	r0, r3
 801440a:	f7ff fbe3 	bl	8013bd4 <find_volume>
 801440e:	4603      	mov	r3, r0
 8014410:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 8014414:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014418:	2b00      	cmp	r3, #0
 801441a:	f040 82a1 	bne.w	8014960 <f_open+0x584>
		dj.obj.fs = fs;
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 8014422:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8014426:	f001 fe3b 	bl	80160a0 <ff_memalloc>
 801442a:	67f8      	str	r0, [r7, #124]	; 0x7c
 801442c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801442e:	2b00      	cmp	r3, #0
 8014430:	d101      	bne.n	8014436 <f_open+0x5a>
 8014432:	2311      	movs	r3, #17
 8014434:	e29d      	b.n	8014972 <f_open+0x596>
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801443a:	611a      	str	r2, [r3, #16]
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014440:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8014444:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014446:	68ba      	ldr	r2, [r7, #8]
 8014448:	f107 0318 	add.w	r3, r7, #24
 801444c:	4611      	mov	r1, r2
 801444e:	4618      	mov	r0, r3
 8014450:	f7ff fa6a 	bl	8013928 <follow_path>
 8014454:	4603      	mov	r3, r0
 8014456:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801445a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801445e:	2b00      	cmp	r3, #0
 8014460:	d11a      	bne.n	8014498 <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014462:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8014466:	b25b      	sxtb	r3, r3
 8014468:	2b00      	cmp	r3, #0
 801446a:	da03      	bge.n	8014474 <f_open+0x98>
				res = FR_INVALID_NAME;
 801446c:	2306      	movs	r3, #6
 801446e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8014472:	e011      	b.n	8014498 <f_open+0xbc>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014474:	79fb      	ldrb	r3, [r7, #7]
 8014476:	f023 0301 	bic.w	r3, r3, #1
 801447a:	2b00      	cmp	r3, #0
 801447c:	bf14      	ite	ne
 801447e:	2301      	movne	r3, #1
 8014480:	2300      	moveq	r3, #0
 8014482:	b2db      	uxtb	r3, r3
 8014484:	461a      	mov	r2, r3
 8014486:	f107 0318 	add.w	r3, r7, #24
 801448a:	4611      	mov	r1, r2
 801448c:	4618      	mov	r0, r3
 801448e:	f7fc fe8f 	bl	80111b0 <chk_lock>
 8014492:	4603      	mov	r3, r0
 8014494:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014498:	79fb      	ldrb	r3, [r7, #7]
 801449a:	f003 031c 	and.w	r3, r3, #28
 801449e:	2b00      	cmp	r3, #0
 80144a0:	f000 8109 	beq.w	80146b6 <f_open+0x2da>
			if (res != FR_OK) {					/* No file, create new */
 80144a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d017      	beq.n	80144dc <f_open+0x100>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80144ac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80144b0:	2b04      	cmp	r3, #4
 80144b2:	d10e      	bne.n	80144d2 <f_open+0xf6>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80144b4:	f7fc fed8 	bl	8011268 <enq_lock>
 80144b8:	4603      	mov	r3, r0
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d006      	beq.n	80144cc <f_open+0xf0>
 80144be:	f107 0318 	add.w	r3, r7, #24
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7fe fec8 	bl	8013258 <dir_register>
 80144c8:	4603      	mov	r3, r0
 80144ca:	e000      	b.n	80144ce <f_open+0xf2>
 80144cc:	2312      	movs	r3, #18
 80144ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80144d2:	79fb      	ldrb	r3, [r7, #7]
 80144d4:	f043 0308 	orr.w	r3, r3, #8
 80144d8:	71fb      	strb	r3, [r7, #7]
 80144da:	e010      	b.n	80144fe <f_open+0x122>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80144dc:	7fbb      	ldrb	r3, [r7, #30]
 80144de:	f003 0311 	and.w	r3, r3, #17
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d003      	beq.n	80144ee <f_open+0x112>
					res = FR_DENIED;
 80144e6:	2307      	movs	r3, #7
 80144e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80144ec:	e007      	b.n	80144fe <f_open+0x122>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80144ee:	79fb      	ldrb	r3, [r7, #7]
 80144f0:	f003 0304 	and.w	r3, r3, #4
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d002      	beq.n	80144fe <f_open+0x122>
 80144f8:	2308      	movs	r3, #8
 80144fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80144fe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014502:	2b00      	cmp	r3, #0
 8014504:	f040 80f1 	bne.w	80146ea <f_open+0x30e>
 8014508:	79fb      	ldrb	r3, [r7, #7]
 801450a:	f003 0308 	and.w	r3, r3, #8
 801450e:	2b00      	cmp	r3, #0
 8014510:	f000 80eb 	beq.w	80146ea <f_open+0x30e>
				dw = GET_FATTIME();
 8014514:	f7f9 feea 	bl	800e2ec <get_fattime>
 8014518:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	781b      	ldrb	r3, [r3, #0]
 801451e:	2b04      	cmp	r3, #4
 8014520:	f040 8082 	bne.w	8014628 <f_open+0x24c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8014524:	697a      	ldr	r2, [r7, #20]
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	695b      	ldr	r3, [r3, #20]
 801452e:	3334      	adds	r3, #52	; 0x34
 8014530:	4618      	mov	r0, r3
 8014532:	f7fc fc11 	bl	8010d58 <ld_dword>
 8014536:	4602      	mov	r2, r0
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	695b      	ldr	r3, [r3, #20]
 8014540:	3338      	adds	r3, #56	; 0x38
 8014542:	4618      	mov	r0, r3
 8014544:	f7fc fc2b 	bl	8010d9e <ld_qword>
 8014548:	4603      	mov	r3, r0
 801454a:	460c      	mov	r4, r1
 801454c:	68fa      	ldr	r2, [r7, #12]
 801454e:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8014552:	697b      	ldr	r3, [r7, #20]
 8014554:	695b      	ldr	r3, [r3, #20]
 8014556:	3321      	adds	r3, #33	; 0x21
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	f003 0302 	and.w	r3, r3, #2
 801455e:	b2da      	uxtb	r2, r3
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	2200      	movs	r2, #0
 8014568:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	695b      	ldr	r3, [r3, #20]
 801456e:	3308      	adds	r3, #8
 8014570:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014572:	4618      	mov	r0, r3
 8014574:	f7fc fceb 	bl	8010f4e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	695b      	ldr	r3, [r3, #20]
 801457c:	3314      	adds	r3, #20
 801457e:	2200      	movs	r2, #0
 8014580:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8014582:	697b      	ldr	r3, [r7, #20]
 8014584:	695b      	ldr	r3, [r3, #20]
 8014586:	330c      	adds	r3, #12
 8014588:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801458a:	4618      	mov	r0, r3
 801458c:	f7fc fcdf 	bl	8010f4e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	695b      	ldr	r3, [r3, #20]
 8014594:	3315      	adds	r3, #21
 8014596:	2200      	movs	r2, #0
 8014598:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	695b      	ldr	r3, [r3, #20]
 801459e:	3304      	adds	r3, #4
 80145a0:	2220      	movs	r2, #32
 80145a2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80145a4:	697b      	ldr	r3, [r7, #20]
 80145a6:	695b      	ldr	r3, [r3, #20]
 80145a8:	3334      	adds	r3, #52	; 0x34
 80145aa:	2100      	movs	r1, #0
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7fc fcce 	bl	8010f4e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	695b      	ldr	r3, [r3, #20]
 80145b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80145ba:	f04f 0200 	mov.w	r2, #0
 80145be:	f04f 0300 	mov.w	r3, #0
 80145c2:	4608      	mov	r0, r1
 80145c4:	f7fc fcef 	bl	8010fa6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	695b      	ldr	r3, [r3, #20]
 80145cc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80145d0:	f04f 0200 	mov.w	r2, #0
 80145d4:	f04f 0300 	mov.w	r3, #0
 80145d8:	4608      	mov	r0, r1
 80145da:	f7fc fce4 	bl	8010fa6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80145de:	697b      	ldr	r3, [r7, #20]
 80145e0:	695b      	ldr	r3, [r3, #20]
 80145e2:	3321      	adds	r3, #33	; 0x21
 80145e4:	2201      	movs	r2, #1
 80145e6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 80145e8:	f107 0318 	add.w	r3, r7, #24
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7fe fb80 	bl	8012cf2 <store_xdir>
 80145f2:	4603      	mov	r3, r0
 80145f4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 80145f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d174      	bne.n	80146ea <f_open+0x30e>
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	689b      	ldr	r3, [r3, #8]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d070      	beq.n	80146ea <f_open+0x30e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8014608:	68f8      	ldr	r0, [r7, #12]
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	689b      	ldr	r3, [r3, #8]
 801460e:	2200      	movs	r2, #0
 8014610:	4619      	mov	r1, r3
 8014612:	f7fd fc0d 	bl	8011e30 <remove_chain>
 8014616:	4603      	mov	r3, r0
 8014618:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	689a      	ldr	r2, [r3, #8]
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	3a01      	subs	r2, #1
 8014624:	619a      	str	r2, [r3, #24]
 8014626:	e060      	b.n	80146ea <f_open+0x30e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801462a:	330e      	adds	r3, #14
 801462c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801462e:	4618      	mov	r0, r3
 8014630:	f7fc fc8d 	bl	8010f4e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014636:	3316      	adds	r3, #22
 8014638:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801463a:	4618      	mov	r0, r3
 801463c:	f7fc fc87 	bl	8010f4e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014642:	330b      	adds	r3, #11
 8014644:	2220      	movs	r2, #32
 8014646:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801464c:	4611      	mov	r1, r2
 801464e:	4618      	mov	r0, r3
 8014650:	f7fd ffc0 	bl	80125d4 <ld_clust>
 8014654:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801465a:	2200      	movs	r2, #0
 801465c:	4618      	mov	r0, r3
 801465e:	f7fd ffd8 	bl	8012612 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014664:	331c      	adds	r3, #28
 8014666:	2100      	movs	r1, #0
 8014668:	4618      	mov	r0, r3
 801466a:	f7fc fc70 	bl	8010f4e <st_dword>
					fs->wflag = 1;
 801466e:	697b      	ldr	r3, [r7, #20]
 8014670:	2201      	movs	r2, #1
 8014672:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014676:	2b00      	cmp	r3, #0
 8014678:	d037      	beq.n	80146ea <f_open+0x30e>
						dw = fs->winsect;
 801467a:	697b      	ldr	r3, [r7, #20]
 801467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801467e:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 8014680:	f107 0318 	add.w	r3, r7, #24
 8014684:	2200      	movs	r2, #0
 8014686:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014688:	4618      	mov	r0, r3
 801468a:	f7fd fbd1 	bl	8011e30 <remove_chain>
 801468e:	4603      	mov	r3, r0
 8014690:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 8014694:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014698:	2b00      	cmp	r3, #0
 801469a:	d126      	bne.n	80146ea <f_open+0x30e>
							res = move_window(fs, dw);
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7fc ff35 	bl	8011510 <move_window>
 80146a6:	4603      	mov	r3, r0
 80146a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80146b0:	3a01      	subs	r2, #1
 80146b2:	619a      	str	r2, [r3, #24]
 80146b4:	e019      	b.n	80146ea <f_open+0x30e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80146b6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d115      	bne.n	80146ea <f_open+0x30e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80146be:	7fbb      	ldrb	r3, [r7, #30]
 80146c0:	f003 0310 	and.w	r3, r3, #16
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d003      	beq.n	80146d0 <f_open+0x2f4>
					res = FR_NO_FILE;
 80146c8:	2304      	movs	r3, #4
 80146ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80146ce:	e00c      	b.n	80146ea <f_open+0x30e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80146d0:	79fb      	ldrb	r3, [r7, #7]
 80146d2:	f003 0302 	and.w	r3, r3, #2
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d007      	beq.n	80146ea <f_open+0x30e>
 80146da:	7fbb      	ldrb	r3, [r7, #30]
 80146dc:	f003 0301 	and.w	r3, r3, #1
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d002      	beq.n	80146ea <f_open+0x30e>
						res = FR_DENIED;
 80146e4:	2307      	movs	r3, #7
 80146e6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 80146ea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d128      	bne.n	8014744 <f_open+0x368>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80146f2:	79fb      	ldrb	r3, [r7, #7]
 80146f4:	f003 0308 	and.w	r3, r3, #8
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d003      	beq.n	8014704 <f_open+0x328>
				mode |= FA_MODIFIED;
 80146fc:	79fb      	ldrb	r3, [r7, #7]
 80146fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014702:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 801470c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014712:	79fb      	ldrb	r3, [r7, #7]
 8014714:	f023 0301 	bic.w	r3, r3, #1
 8014718:	2b00      	cmp	r3, #0
 801471a:	bf14      	ite	ne
 801471c:	2301      	movne	r3, #1
 801471e:	2300      	moveq	r3, #0
 8014720:	b2db      	uxtb	r3, r3
 8014722:	461a      	mov	r2, r3
 8014724:	f107 0318 	add.w	r3, r7, #24
 8014728:	4611      	mov	r1, r2
 801472a:	4618      	mov	r0, r3
 801472c:	f7fc fdbe 	bl	80112ac <inc_lock>
 8014730:	4602      	mov	r2, r0
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801473a:	2b00      	cmp	r3, #0
 801473c:	d102      	bne.n	8014744 <f_open+0x368>
 801473e:	2302      	movs	r3, #2
 8014740:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014744:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014748:	2b00      	cmp	r3, #0
 801474a:	f040 8106 	bne.w	801495a <f_open+0x57e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	2b04      	cmp	r3, #4
 8014754:	d12b      	bne.n	80147ae <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8014756:	6a3a      	ldr	r2, [r7, #32]
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 801475c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8014760:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014764:	7ffa      	ldrb	r2, [r7, #31]
 8014766:	431a      	orrs	r2, r3
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 801476c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	695b      	ldr	r3, [r3, #20]
 8014776:	3334      	adds	r3, #52	; 0x34
 8014778:	4618      	mov	r0, r3
 801477a:	f7fc faed 	bl	8010d58 <ld_dword>
 801477e:	4602      	mov	r2, r0
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	695b      	ldr	r3, [r3, #20]
 8014788:	3338      	adds	r3, #56	; 0x38
 801478a:	4618      	mov	r0, r3
 801478c:	f7fc fb07 	bl	8010d9e <ld_qword>
 8014790:	4603      	mov	r3, r0
 8014792:	460c      	mov	r4, r1
 8014794:	68fa      	ldr	r2, [r7, #12]
 8014796:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	695b      	ldr	r3, [r3, #20]
 801479e:	3321      	adds	r3, #33	; 0x21
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	f003 0302 	and.w	r3, r3, #2
 80147a6:	b2da      	uxtb	r2, r3
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	71da      	strb	r2, [r3, #7]
 80147ac:	e013      	b.n	80147d6 <f_open+0x3fa>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80147b2:	4611      	mov	r1, r2
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fd ff0d 	bl	80125d4 <ld_clust>
 80147ba:	4602      	mov	r2, r0
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80147c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147c2:	331c      	adds	r3, #28
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7fc fac7 	bl	8010d58 <ld_dword>
 80147ca:	4603      	mov	r3, r0
 80147cc:	f04f 0400 	mov.w	r4, #0
 80147d0:	68fa      	ldr	r2, [r7, #12]
 80147d2:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	2200      	movs	r2, #0
 80147da:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80147dc:	697a      	ldr	r2, [r7, #20]
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	88da      	ldrh	r2, [r3, #6]
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	79fa      	ldrb	r2, [r7, #7]
 80147ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	2200      	movs	r2, #0
 80147f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	2200      	movs	r2, #0
 80147fe:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014800:	68fa      	ldr	r2, [r7, #12]
 8014802:	f04f 0300 	mov.w	r3, #0
 8014806:	f04f 0400 	mov.w	r4, #0
 801480a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	3354      	adds	r3, #84	; 0x54
 8014812:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014816:	2100      	movs	r1, #0
 8014818:	4618      	mov	r0, r3
 801481a:	f7fc fc6c 	bl	80110f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801481e:	79fb      	ldrb	r3, [r7, #7]
 8014820:	f003 0320 	and.w	r3, r3, #32
 8014824:	2b00      	cmp	r3, #0
 8014826:	f000 8098 	beq.w	801495a <f_open+0x57e>
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014830:	4323      	orrs	r3, r4
 8014832:	f000 8092 	beq.w	801495a <f_open+0x57e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801483c:	68fa      	ldr	r2, [r7, #12]
 801483e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014842:	697b      	ldr	r3, [r7, #20]
 8014844:	895b      	ldrh	r3, [r3, #10]
 8014846:	461a      	mov	r2, r3
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	899b      	ldrh	r3, [r3, #12]
 801484c:	fb03 f302 	mul.w	r3, r3, r2
 8014850:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	689b      	ldr	r3, [r3, #8]
 8014856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014860:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8014864:	e024      	b.n	80148b0 <f_open+0x4d4>
					clst = get_fat(&fp->obj, clst);
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801486c:	4618      	mov	r0, r3
 801486e:	f7fc ff0d 	bl	801168c <get_fat>
 8014872:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 8014876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801487a:	2b01      	cmp	r3, #1
 801487c:	d802      	bhi.n	8014884 <f_open+0x4a8>
 801487e:	2302      	movs	r3, #2
 8014880:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014888:	f1b3 3fff 	cmp.w	r3, #4294967295
 801488c:	d102      	bne.n	8014894 <f_open+0x4b8>
 801488e:	2301      	movs	r3, #1
 8014890:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014896:	469b      	mov	fp, r3
 8014898:	f04f 0c00 	mov.w	ip, #0
 801489c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80148a0:	460b      	mov	r3, r1
 80148a2:	4614      	mov	r4, r2
 80148a4:	ebb3 030b 	subs.w	r3, r3, fp
 80148a8:	eb64 040c 	sbc.w	r4, r4, ip
 80148ac:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 80148b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d109      	bne.n	80148cc <f_open+0x4f0>
 80148b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80148ba:	4619      	mov	r1, r3
 80148bc:	f04f 0200 	mov.w	r2, #0
 80148c0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80148c4:	42a2      	cmp	r2, r4
 80148c6:	bf08      	it	eq
 80148c8:	4299      	cmpeq	r1, r3
 80148ca:	d3cc      	bcc.n	8014866 <f_open+0x48a>
				}
				fp->clust = clst;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80148d2:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80148d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d13e      	bne.n	801495a <f_open+0x57e>
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	899b      	ldrh	r3, [r3, #12]
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	f04f 0400 	mov.w	r4, #0
 80148e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80148ea:	461a      	mov	r2, r3
 80148ec:	4623      	mov	r3, r4
 80148ee:	f7eb fcf3 	bl	80002d8 <__aeabi_uldivmod>
 80148f2:	461c      	mov	r4, r3
 80148f4:	4613      	mov	r3, r2
 80148f6:	4323      	orrs	r3, r4
 80148f8:	d02f      	beq.n	801495a <f_open+0x57e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014900:	4618      	mov	r0, r3
 8014902:	f7fc fea3 	bl	801164c <clust2sect>
 8014906:	66f8      	str	r0, [r7, #108]	; 0x6c
 8014908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801490a:	2b00      	cmp	r3, #0
 801490c:	d103      	bne.n	8014916 <f_open+0x53a>
						res = FR_INT_ERR;
 801490e:	2302      	movs	r3, #2
 8014910:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8014914:	e021      	b.n	801495a <f_open+0x57e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014916:	697b      	ldr	r3, [r7, #20]
 8014918:	899b      	ldrh	r3, [r3, #12]
 801491a:	b29b      	uxth	r3, r3
 801491c:	f04f 0400 	mov.w	r4, #0
 8014920:	461a      	mov	r2, r3
 8014922:	4623      	mov	r3, r4
 8014924:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8014928:	f7eb fcd6 	bl	80002d8 <__aeabi_uldivmod>
 801492c:	4603      	mov	r3, r0
 801492e:	460c      	mov	r4, r1
 8014930:	461a      	mov	r2, r3
 8014932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014934:	441a      	add	r2, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801493a:	697b      	ldr	r3, [r7, #20]
 801493c:	7858      	ldrb	r0, [r3, #1]
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014948:	2301      	movs	r3, #1
 801494a:	f7fc f98f 	bl	8010c6c <disk_read>
 801494e:	4603      	mov	r3, r0
 8014950:	2b00      	cmp	r3, #0
 8014952:	d002      	beq.n	801495a <f_open+0x57e>
 8014954:	2301      	movs	r3, #1
 8014956:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 801495a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801495c:	f001 fbac 	bl	80160b8 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014960:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014964:	2b00      	cmp	r3, #0
 8014966:	d002      	beq.n	801496e <f_open+0x592>
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	2200      	movs	r2, #0
 801496c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801496e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8014972:	4618      	mov	r0, r3
 8014974:	3790      	adds	r7, #144	; 0x90
 8014976:	46bd      	mov	sp, r7
 8014978:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801497c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801497c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801497e:	b091      	sub	sp, #68	; 0x44
 8014980:	af00      	add	r7, sp, #0
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	60b9      	str	r1, [r7, #8]
 8014986:	607a      	str	r2, [r7, #4]
 8014988:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	2200      	movs	r2, #0
 8014992:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	f107 0214 	add.w	r2, r7, #20
 801499a:	4611      	mov	r1, r2
 801499c:	4618      	mov	r0, r3
 801499e:	f7ff fca1 	bl	80142e4 <validate>
 80149a2:	4603      	mov	r3, r0
 80149a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80149a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d108      	bne.n	80149c2 <f_read+0x46>
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80149b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80149ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d002      	beq.n	80149c8 <f_read+0x4c>
 80149c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80149c6:	e16a      	b.n	8014c9e <f_read+0x322>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80149ce:	f003 0301 	and.w	r3, r3, #1
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d101      	bne.n	80149da <f_read+0x5e>
 80149d6:	2307      	movs	r3, #7
 80149d8:	e161      	b.n	8014c9e <f_read+0x322>
	remain = fp->obj.objsize - fp->fptr;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 80149e6:	460b      	mov	r3, r1
 80149e8:	4614      	mov	r4, r2
 80149ea:	1b5b      	subs	r3, r3, r5
 80149ec:	eb64 0406 	sbc.w	r4, r4, r6
 80149f0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f04f 0400 	mov.w	r4, #0
 80149fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80149fe:	42a2      	cmp	r2, r4
 8014a00:	bf08      	it	eq
 8014a02:	4299      	cmpeq	r1, r3
 8014a04:	f080 8146 	bcs.w	8014c94 <f_read+0x318>
 8014a08:	6a3b      	ldr	r3, [r7, #32]
 8014a0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014a0c:	e142      	b.n	8014c94 <f_read+0x318>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	899b      	ldrh	r3, [r3, #12]
 8014a18:	b29b      	uxth	r3, r3
 8014a1a:	f04f 0400 	mov.w	r4, #0
 8014a1e:	461a      	mov	r2, r3
 8014a20:	4623      	mov	r3, r4
 8014a22:	f7eb fc59 	bl	80002d8 <__aeabi_uldivmod>
 8014a26:	461c      	mov	r4, r3
 8014a28:	4613      	mov	r3, r2
 8014a2a:	4323      	orrs	r3, r4
 8014a2c:	f040 80eb 	bne.w	8014c06 <f_read+0x28a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	899b      	ldrh	r3, [r3, #12]
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	f04f 0400 	mov.w	r4, #0
 8014a40:	461a      	mov	r2, r3
 8014a42:	4623      	mov	r3, r4
 8014a44:	f7eb fc48 	bl	80002d8 <__aeabi_uldivmod>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	460c      	mov	r4, r1
 8014a4c:	461a      	mov	r2, r3
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	895b      	ldrh	r3, [r3, #10]
 8014a52:	3b01      	subs	r3, #1
 8014a54:	4013      	ands	r3, r2
 8014a56:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014a58:	69fb      	ldr	r3, [r7, #28]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d134      	bne.n	8014ac8 <f_read+0x14c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014a64:	4323      	orrs	r3, r4
 8014a66:	d103      	bne.n	8014a70 <f_read+0xf4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	689b      	ldr	r3, [r3, #8]
 8014a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8014a6e:	e015      	b.n	8014a9c <f_read+0x120>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d009      	beq.n	8014a8c <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014a7e:	461a      	mov	r2, r3
 8014a80:	4623      	mov	r3, r4
 8014a82:	68f8      	ldr	r0, [r7, #12]
 8014a84:	f7fd fb89 	bl	801219a <clmt_clust>
 8014a88:	63b8      	str	r0, [r7, #56]	; 0x38
 8014a8a:	e007      	b.n	8014a9c <f_read+0x120>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014a8c:	68fa      	ldr	r2, [r7, #12]
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a92:	4619      	mov	r1, r3
 8014a94:	4610      	mov	r0, r2
 8014a96:	f7fc fdf9 	bl	801168c <get_fat>
 8014a9a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d805      	bhi.n	8014aae <f_read+0x132>
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	2202      	movs	r2, #2
 8014aa6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014aaa:	2302      	movs	r3, #2
 8014aac:	e0f7      	b.n	8014c9e <f_read+0x322>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ab4:	d105      	bne.n	8014ac2 <f_read+0x146>
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	2201      	movs	r2, #1
 8014aba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014abe:	2301      	movs	r3, #1
 8014ac0:	e0ed      	b.n	8014c9e <f_read+0x322>
				fp->clust = clst;				/* Update current cluster */
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ac6:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014ac8:	697a      	ldr	r2, [r7, #20]
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ace:	4619      	mov	r1, r3
 8014ad0:	4610      	mov	r0, r2
 8014ad2:	f7fc fdbb 	bl	801164c <clust2sect>
 8014ad6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014ad8:	69bb      	ldr	r3, [r7, #24]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d105      	bne.n	8014aea <f_read+0x16e>
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	2202      	movs	r2, #2
 8014ae2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014ae6:	2302      	movs	r3, #2
 8014ae8:	e0d9      	b.n	8014c9e <f_read+0x322>
			sect += csect;
 8014aea:	69ba      	ldr	r2, [r7, #24]
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	4413      	add	r3, r2
 8014af0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	899b      	ldrh	r3, [r3, #12]
 8014af6:	461a      	mov	r2, r3
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8014afe:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d043      	beq.n	8014b8e <f_read+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014b06:	69fa      	ldr	r2, [r7, #28]
 8014b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b0a:	4413      	add	r3, r2
 8014b0c:	697a      	ldr	r2, [r7, #20]
 8014b0e:	8952      	ldrh	r2, [r2, #10]
 8014b10:	4293      	cmp	r3, r2
 8014b12:	d905      	bls.n	8014b20 <f_read+0x1a4>
					cc = fs->csize - csect;
 8014b14:	697b      	ldr	r3, [r7, #20]
 8014b16:	895b      	ldrh	r3, [r3, #10]
 8014b18:	461a      	mov	r2, r3
 8014b1a:	69fb      	ldr	r3, [r7, #28]
 8014b1c:	1ad3      	subs	r3, r2, r3
 8014b1e:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	7858      	ldrb	r0, [r3, #1]
 8014b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b26:	69ba      	ldr	r2, [r7, #24]
 8014b28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014b2a:	f7fc f89f 	bl	8010c6c <disk_read>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d005      	beq.n	8014b40 <f_read+0x1c4>
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2201      	movs	r2, #1
 8014b38:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	e0ae      	b.n	8014c9e <f_read+0x322>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b46:	b25b      	sxtb	r3, r3
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	da18      	bge.n	8014b7e <f_read+0x202>
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b50:	69bb      	ldr	r3, [r7, #24]
 8014b52:	1ad3      	subs	r3, r2, r3
 8014b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d911      	bls.n	8014b7e <f_read+0x202>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b5e:	69bb      	ldr	r3, [r7, #24]
 8014b60:	1ad3      	subs	r3, r2, r3
 8014b62:	697a      	ldr	r2, [r7, #20]
 8014b64:	8992      	ldrh	r2, [r2, #12]
 8014b66:	fb02 f303 	mul.w	r3, r2, r3
 8014b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b6c:	18d0      	adds	r0, r2, r3
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	899b      	ldrh	r3, [r3, #12]
 8014b78:	461a      	mov	r2, r3
 8014b7a:	f7fc fa9b 	bl	80110b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	899b      	ldrh	r3, [r3, #12]
 8014b82:	461a      	mov	r2, r3
 8014b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b86:	fb02 f303 	mul.w	r3, r2, r3
 8014b8a:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 8014b8c:	e067      	b.n	8014c5e <f_read+0x2e2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b92:	69ba      	ldr	r2, [r7, #24]
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d033      	beq.n	8014c00 <f_read+0x284>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b9e:	b25b      	sxtb	r3, r3
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	da1b      	bge.n	8014bdc <f_read+0x260>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	7858      	ldrb	r0, [r3, #1]
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014bb2:	2301      	movs	r3, #1
 8014bb4:	f7fc f87a 	bl	8010cac <disk_write>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d005      	beq.n	8014bca <f_read+0x24e>
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014bc6:	2301      	movs	r3, #1
 8014bc8:	e069      	b.n	8014c9e <f_read+0x322>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bd4:	b2da      	uxtb	r2, r3
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	7858      	ldrb	r0, [r3, #1]
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014be6:	2301      	movs	r3, #1
 8014be8:	69ba      	ldr	r2, [r7, #24]
 8014bea:	f7fc f83f 	bl	8010c6c <disk_read>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d005      	beq.n	8014c00 <f_read+0x284>
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	2201      	movs	r2, #1
 8014bf8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014bfc:	2301      	movs	r3, #1
 8014bfe:	e04e      	b.n	8014c9e <f_read+0x322>
			}
#endif
			fp->sect = sect;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	69ba      	ldr	r2, [r7, #24]
 8014c04:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014c06:	697b      	ldr	r3, [r7, #20]
 8014c08:	899b      	ldrh	r3, [r3, #12]
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014c12:	697a      	ldr	r2, [r7, #20]
 8014c14:	8992      	ldrh	r2, [r2, #12]
 8014c16:	fbb3 f1f2 	udiv	r1, r3, r2
 8014c1a:	fb02 f201 	mul.w	r2, r2, r1
 8014c1e:	1a9b      	subs	r3, r3, r2
 8014c20:	1ac3      	subs	r3, r0, r3
 8014c22:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	429a      	cmp	r2, r3
 8014c2a:	d901      	bls.n	8014c30 <f_read+0x2b4>
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	899b      	ldrh	r3, [r3, #12]
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	f04f 0400 	mov.w	r4, #0
 8014c46:	461a      	mov	r2, r3
 8014c48:	4623      	mov	r3, r4
 8014c4a:	f7eb fb45 	bl	80002d8 <__aeabi_uldivmod>
 8014c4e:	461c      	mov	r4, r3
 8014c50:	4613      	mov	r3, r2
 8014c52:	442b      	add	r3, r5
 8014c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c56:	4619      	mov	r1, r3
 8014c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c5a:	f7fc fa2b 	bl	80110b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c62:	4413      	add	r3, r2
 8014c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c6e:	461d      	mov	r5, r3
 8014c70:	f04f 0600 	mov.w	r6, #0
 8014c74:	186b      	adds	r3, r5, r1
 8014c76:	eb46 0402 	adc.w	r4, r6, r2
 8014c7a:	68fa      	ldr	r2, [r7, #12]
 8014c7c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8014c80:	683b      	ldr	r3, [r7, #0]
 8014c82:	681a      	ldr	r2, [r3, #0]
 8014c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c86:	441a      	add	r2, r3
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	601a      	str	r2, [r3, #0]
 8014c8c:	687a      	ldr	r2, [r7, #4]
 8014c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c90:	1ad3      	subs	r3, r2, r3
 8014c92:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	f47f aeb9 	bne.w	8014a0e <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014c9c:	2300      	movs	r3, #0
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3744      	adds	r7, #68	; 0x44
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ca6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ca8:	b08d      	sub	sp, #52	; 0x34
 8014caa:	af00      	add	r7, sp, #0
 8014cac:	60f8      	str	r0, [r7, #12]
 8014cae:	60b9      	str	r1, [r7, #8]
 8014cb0:	607a      	str	r2, [r7, #4]
 8014cb2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014cb8:	683b      	ldr	r3, [r7, #0]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	f107 0210 	add.w	r2, r7, #16
 8014cc4:	4611      	mov	r1, r2
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7ff fb0c 	bl	80142e4 <validate>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014cd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d108      	bne.n	8014cec <f_write+0x46>
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d002      	beq.n	8014cf2 <f_write+0x4c>
 8014cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cf0:	e1ab      	b.n	801504a <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014cf8:	f003 0302 	and.w	r3, r3, #2
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d101      	bne.n	8014d04 <f_write+0x5e>
 8014d00:	2307      	movs	r3, #7
 8014d02:	e1a2      	b.n	801504a <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	781b      	ldrb	r3, [r3, #0]
 8014d08:	2b04      	cmp	r3, #4
 8014d0a:	f000 818e 	beq.w	801502a <f_write+0x384>
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014d14:	461a      	mov	r2, r3
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	441a      	add	r2, r3
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014d20:	429a      	cmp	r2, r3
 8014d22:	f080 8182 	bcs.w	801502a <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014d2c:	43db      	mvns	r3, r3
 8014d2e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014d30:	e17b      	b.n	801502a <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	899b      	ldrh	r3, [r3, #12]
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	f04f 0400 	mov.w	r4, #0
 8014d42:	461a      	mov	r2, r3
 8014d44:	4623      	mov	r3, r4
 8014d46:	f7eb fac7 	bl	80002d8 <__aeabi_uldivmod>
 8014d4a:	461c      	mov	r4, r3
 8014d4c:	4613      	mov	r3, r2
 8014d4e:	4323      	orrs	r3, r4
 8014d50:	f040 810c 	bne.w	8014f6c <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	899b      	ldrh	r3, [r3, #12]
 8014d5e:	b29b      	uxth	r3, r3
 8014d60:	f04f 0400 	mov.w	r4, #0
 8014d64:	461a      	mov	r2, r3
 8014d66:	4623      	mov	r3, r4
 8014d68:	f7eb fab6 	bl	80002d8 <__aeabi_uldivmod>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	460c      	mov	r4, r1
 8014d70:	461a      	mov	r2, r3
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	895b      	ldrh	r3, [r3, #10]
 8014d76:	3b01      	subs	r3, #1
 8014d78:	4013      	ands	r3, r2
 8014d7a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014d7c:	69bb      	ldr	r3, [r7, #24]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d148      	bne.n	8014e14 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014d88:	4323      	orrs	r3, r4
 8014d8a:	d10c      	bne.n	8014da6 <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	689b      	ldr	r3, [r3, #8]
 8014d90:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d11c      	bne.n	8014dd2 <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2100      	movs	r1, #0
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7fd f8fb 	bl	8011f98 <create_chain>
 8014da2:	62b8      	str	r0, [r7, #40]	; 0x28
 8014da4:	e015      	b.n	8014dd2 <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d009      	beq.n	8014dc2 <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014db4:	461a      	mov	r2, r3
 8014db6:	4623      	mov	r3, r4
 8014db8:	68f8      	ldr	r0, [r7, #12]
 8014dba:	f7fd f9ee 	bl	801219a <clmt_clust>
 8014dbe:	62b8      	str	r0, [r7, #40]	; 0x28
 8014dc0:	e007      	b.n	8014dd2 <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014dc2:	68fa      	ldr	r2, [r7, #12]
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dc8:	4619      	mov	r1, r3
 8014dca:	4610      	mov	r0, r2
 8014dcc:	f7fd f8e4 	bl	8011f98 <create_chain>
 8014dd0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	f000 812d 	beq.w	8015034 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ddc:	2b01      	cmp	r3, #1
 8014dde:	d105      	bne.n	8014dec <f_write+0x146>
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	2202      	movs	r2, #2
 8014de4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014de8:	2302      	movs	r3, #2
 8014dea:	e12e      	b.n	801504a <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014df2:	d105      	bne.n	8014e00 <f_write+0x15a>
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	2201      	movs	r2, #1
 8014df8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	e124      	b.n	801504a <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e04:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	689b      	ldr	r3, [r3, #8]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d102      	bne.n	8014e14 <f_write+0x16e>
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014e1a:	b25b      	sxtb	r3, r3
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	da1b      	bge.n	8014e58 <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	7858      	ldrb	r0, [r3, #1]
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014e2e:	2301      	movs	r3, #1
 8014e30:	f7fb ff3c 	bl	8010cac <disk_write>
 8014e34:	4603      	mov	r3, r0
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d005      	beq.n	8014e46 <f_write+0x1a0>
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	2201      	movs	r2, #1
 8014e3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014e42:	2301      	movs	r3, #1
 8014e44:	e101      	b.n	801504a <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e50:	b2da      	uxtb	r2, r3
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014e58:	693a      	ldr	r2, [r7, #16]
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e5e:	4619      	mov	r1, r3
 8014e60:	4610      	mov	r0, r2
 8014e62:	f7fc fbf3 	bl	801164c <clust2sect>
 8014e66:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d105      	bne.n	8014e7a <f_write+0x1d4>
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	2202      	movs	r2, #2
 8014e72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014e76:	2302      	movs	r3, #2
 8014e78:	e0e7      	b.n	801504a <f_write+0x3a4>
			sect += csect;
 8014e7a:	697a      	ldr	r2, [r7, #20]
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	4413      	add	r3, r2
 8014e80:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	899b      	ldrh	r3, [r3, #12]
 8014e86:	461a      	mov	r2, r3
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e8e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014e90:	6a3b      	ldr	r3, [r7, #32]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d046      	beq.n	8014f24 <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014e96:	69ba      	ldr	r2, [r7, #24]
 8014e98:	6a3b      	ldr	r3, [r7, #32]
 8014e9a:	4413      	add	r3, r2
 8014e9c:	693a      	ldr	r2, [r7, #16]
 8014e9e:	8952      	ldrh	r2, [r2, #10]
 8014ea0:	4293      	cmp	r3, r2
 8014ea2:	d905      	bls.n	8014eb0 <f_write+0x20a>
					cc = fs->csize - csect;
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	895b      	ldrh	r3, [r3, #10]
 8014ea8:	461a      	mov	r2, r3
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	1ad3      	subs	r3, r2, r3
 8014eae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014eb0:	693b      	ldr	r3, [r7, #16]
 8014eb2:	7858      	ldrb	r0, [r3, #1]
 8014eb4:	6a3b      	ldr	r3, [r7, #32]
 8014eb6:	697a      	ldr	r2, [r7, #20]
 8014eb8:	69f9      	ldr	r1, [r7, #28]
 8014eba:	f7fb fef7 	bl	8010cac <disk_write>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d005      	beq.n	8014ed0 <f_write+0x22a>
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	2201      	movs	r2, #1
 8014ec8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014ecc:	2301      	movs	r3, #1
 8014ece:	e0bc      	b.n	801504a <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	1ad3      	subs	r3, r2, r3
 8014ed8:	6a3a      	ldr	r2, [r7, #32]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d91a      	bls.n	8014f14 <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	1ad3      	subs	r3, r2, r3
 8014eec:	693a      	ldr	r2, [r7, #16]
 8014eee:	8992      	ldrh	r2, [r2, #12]
 8014ef0:	fb02 f303 	mul.w	r3, r2, r3
 8014ef4:	69fa      	ldr	r2, [r7, #28]
 8014ef6:	18d1      	adds	r1, r2, r3
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	899b      	ldrh	r3, [r3, #12]
 8014efc:	461a      	mov	r2, r3
 8014efe:	f7fc f8d9 	bl	80110b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f0c:	b2da      	uxtb	r2, r3
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	899b      	ldrh	r3, [r3, #12]
 8014f18:	461a      	mov	r2, r3
 8014f1a:	6a3b      	ldr	r3, [r7, #32]
 8014f1c:	fb02 f303 	mul.w	r3, r2, r3
 8014f20:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014f22:	e058      	b.n	8014fd6 <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f28:	697a      	ldr	r2, [r7, #20]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d01b      	beq.n	8014f66 <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014f3a:	42a2      	cmp	r2, r4
 8014f3c:	bf08      	it	eq
 8014f3e:	4299      	cmpeq	r1, r3
 8014f40:	d211      	bcs.n	8014f66 <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	7858      	ldrb	r0, [r3, #1]
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	697a      	ldr	r2, [r7, #20]
 8014f50:	f7fb fe8c 	bl	8010c6c <disk_read>
 8014f54:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d005      	beq.n	8014f66 <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	2201      	movs	r2, #1
 8014f5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014f62:	2301      	movs	r3, #1
 8014f64:	e071      	b.n	801504a <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	697a      	ldr	r2, [r7, #20]
 8014f6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	899b      	ldrh	r3, [r3, #12]
 8014f70:	4618      	mov	r0, r3
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014f78:	693a      	ldr	r2, [r7, #16]
 8014f7a:	8992      	ldrh	r2, [r2, #12]
 8014f7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014f80:	fb02 f201 	mul.w	r2, r2, r1
 8014f84:	1a9b      	subs	r3, r3, r2
 8014f86:	1ac3      	subs	r3, r0, r3
 8014f88:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	d901      	bls.n	8014f96 <f_write+0x2f0>
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	899b      	ldrh	r3, [r3, #12]
 8014fa6:	b29b      	uxth	r3, r3
 8014fa8:	f04f 0400 	mov.w	r4, #0
 8014fac:	461a      	mov	r2, r3
 8014fae:	4623      	mov	r3, r4
 8014fb0:	f7eb f992 	bl	80002d8 <__aeabi_uldivmod>
 8014fb4:	461c      	mov	r4, r3
 8014fb6:	4613      	mov	r3, r2
 8014fb8:	442b      	add	r3, r5
 8014fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fbc:	69f9      	ldr	r1, [r7, #28]
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7fc f878 	bl	80110b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014fce:	b2da      	uxtb	r2, r3
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014fd6:	69fa      	ldr	r2, [r7, #28]
 8014fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fda:	4413      	add	r3, r2
 8014fdc:	61fb      	str	r3, [r7, #28]
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe6:	461d      	mov	r5, r3
 8014fe8:	f04f 0600 	mov.w	r6, #0
 8014fec:	186b      	adds	r3, r5, r1
 8014fee:	eb46 0402 	adc.w	r4, r6, r2
 8014ff2:	68fa      	ldr	r2, [r7, #12]
 8014ff4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014ffe:	68fa      	ldr	r2, [r7, #12]
 8015000:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8015004:	4294      	cmp	r4, r2
 8015006:	bf08      	it	eq
 8015008:	428b      	cmpeq	r3, r1
 801500a:	d201      	bcs.n	8015010 <f_write+0x36a>
 801500c:	460b      	mov	r3, r1
 801500e:	4614      	mov	r4, r2
 8015010:	68fa      	ldr	r2, [r7, #12]
 8015012:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501c:	441a      	add	r2, r3
 801501e:	683b      	ldr	r3, [r7, #0]
 8015020:	601a      	str	r2, [r3, #0]
 8015022:	687a      	ldr	r2, [r7, #4]
 8015024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015026:	1ad3      	subs	r3, r2, r3
 8015028:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2b00      	cmp	r3, #0
 801502e:	f47f ae80 	bne.w	8014d32 <f_write+0x8c>
 8015032:	e000      	b.n	8015036 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015034:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801503c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015040:	b2da      	uxtb	r2, r3
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8015048:	2300      	movs	r3, #0
}
 801504a:	4618      	mov	r0, r3
 801504c:	3734      	adds	r7, #52	; 0x34
 801504e:	46bd      	mov	sp, r7
 8015050:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015052 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015052:	b590      	push	{r4, r7, lr}
 8015054:	b09d      	sub	sp, #116	; 0x74
 8015056:	af00      	add	r7, sp, #0
 8015058:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8015060:	4611      	mov	r1, r2
 8015062:	4618      	mov	r0, r3
 8015064:	f7ff f93e 	bl	80142e4 <validate>
 8015068:	4603      	mov	r3, r0
 801506a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 801506e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015072:	2b00      	cmp	r3, #0
 8015074:	f040 811d 	bne.w	80152b2 <f_sync+0x260>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015082:	2b00      	cmp	r3, #0
 8015084:	f000 8115 	beq.w	80152b2 <f_sync+0x260>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801508e:	b25b      	sxtb	r3, r3
 8015090:	2b00      	cmp	r3, #0
 8015092:	da17      	bge.n	80150c4 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015096:	7858      	ldrb	r0, [r3, #1]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80150a2:	2301      	movs	r3, #1
 80150a4:	f7fb fe02 	bl	8010cac <disk_write>
 80150a8:	4603      	mov	r3, r0
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d001      	beq.n	80150b2 <f_sync+0x60>
 80150ae:	2301      	movs	r3, #1
 80150b0:	e101      	b.n	80152b6 <f_sync+0x264>
				fp->flag &= (BYTE)~FA_DIRTY;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80150b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150bc:	b2da      	uxtb	r2, r3
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80150c4:	f7f9 f912 	bl	800e2ec <get_fattime>
 80150c8:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80150ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80150cc:	781b      	ldrb	r3, [r3, #0]
 80150ce:	2b04      	cmp	r3, #4
 80150d0:	f040 80a4 	bne.w	801521c <f_sync+0x1ca>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7fc fe4a 	bl	8011d70 <fill_first_frag>
 80150dc:	4603      	mov	r3, r0
 80150de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80150e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d10a      	bne.n	8015100 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150f0:	f04f 32ff 	mov.w	r2, #4294967295
 80150f4:	4619      	mov	r1, r3
 80150f6:	f7fc fe6a 	bl	8011dce <fill_last_frag>
 80150fa:	4603      	mov	r3, r0
 80150fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 8015100:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015104:	2b00      	cmp	r3, #0
 8015106:	f040 80d4 	bne.w	80152b2 <f_sync+0x260>
					INIT_NAMBUF(fs);
 801510a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 801510e:	f000 ffc7 	bl	80160a0 <ff_memalloc>
 8015112:	6638      	str	r0, [r7, #96]	; 0x60
 8015114:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015116:	2b00      	cmp	r3, #0
 8015118:	d101      	bne.n	801511e <f_sync+0xcc>
 801511a:	2311      	movs	r3, #17
 801511c:	e0cb      	b.n	80152b6 <f_sync+0x264>
 801511e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015122:	611a      	str	r2, [r3, #16]
 8015124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015128:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801512c:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 801512e:	687a      	ldr	r2, [r7, #4]
 8015130:	f107 0308 	add.w	r3, r7, #8
 8015134:	4611      	mov	r1, r2
 8015136:	4618      	mov	r0, r3
 8015138:	f7fd fd9e 	bl	8012c78 <load_obj_dir>
 801513c:	4603      	mov	r3, r0
 801513e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 8015142:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015146:	2b00      	cmp	r3, #0
 8015148:	d164      	bne.n	8015214 <f_sync+0x1c2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 801514a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801514c:	695b      	ldr	r3, [r3, #20]
 801514e:	3304      	adds	r3, #4
 8015150:	781a      	ldrb	r2, [r3, #0]
 8015152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015154:	695b      	ldr	r3, [r3, #20]
 8015156:	3304      	adds	r3, #4
 8015158:	f042 0220 	orr.w	r2, r2, #32
 801515c:	b2d2      	uxtb	r2, r2
 801515e:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	79da      	ldrb	r2, [r3, #7]
 8015164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015166:	695b      	ldr	r3, [r3, #20]
 8015168:	3321      	adds	r3, #33	; 0x21
 801516a:	f042 0201 	orr.w	r2, r2, #1
 801516e:	b2d2      	uxtb	r2, r2
 8015170:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8015172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015174:	695b      	ldr	r3, [r3, #20]
 8015176:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	689b      	ldr	r3, [r3, #8]
 801517e:	4619      	mov	r1, r3
 8015180:	4610      	mov	r0, r2
 8015182:	f7fb fee4 	bl	8010f4e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8015186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015188:	695b      	ldr	r3, [r3, #20]
 801518a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8015194:	461a      	mov	r2, r3
 8015196:	4623      	mov	r3, r4
 8015198:	4608      	mov	r0, r1
 801519a:	f7fb ff04 	bl	8010fa6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 801519e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151a0:	695b      	ldr	r3, [r3, #20]
 80151a2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80151ac:	461a      	mov	r2, r3
 80151ae:	4623      	mov	r3, r4
 80151b0:	4608      	mov	r0, r1
 80151b2:	f7fb fef8 	bl	8010fa6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80151b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151b8:	695b      	ldr	r3, [r3, #20]
 80151ba:	330c      	adds	r3, #12
 80151bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80151be:	4618      	mov	r0, r3
 80151c0:	f7fb fec5 	bl	8010f4e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80151c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151c6:	695b      	ldr	r3, [r3, #20]
 80151c8:	3315      	adds	r3, #21
 80151ca:	2200      	movs	r2, #0
 80151cc:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80151ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151d0:	695b      	ldr	r3, [r3, #20]
 80151d2:	3310      	adds	r3, #16
 80151d4:	2100      	movs	r1, #0
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7fb feb9 	bl	8010f4e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80151dc:	f107 0308 	add.w	r3, r7, #8
 80151e0:	4618      	mov	r0, r3
 80151e2:	f7fd fd86 	bl	8012cf2 <store_xdir>
 80151e6:	4603      	mov	r3, r0
 80151e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 80151ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d10f      	bne.n	8015214 <f_sync+0x1c2>
							res = sync_fs(fs);
 80151f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7fc f9b8 	bl	801156c <sync_fs>
 80151fc:	4603      	mov	r3, r0
 80151fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801520c:	b2da      	uxtb	r2, r3
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8015214:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8015216:	f000 ff4f 	bl	80160b8 <ff_memfree>
 801521a:	e04a      	b.n	80152b2 <f_sync+0x260>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801521c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015222:	4619      	mov	r1, r3
 8015224:	4610      	mov	r0, r2
 8015226:	f7fc f973 	bl	8011510 <move_window>
 801522a:	4603      	mov	r3, r0
 801522c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8015230:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015234:	2b00      	cmp	r3, #0
 8015236:	d13c      	bne.n	80152b2 <f_sync+0x260>
					dir = fp->dir_ptr;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801523c:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801523e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015240:	330b      	adds	r3, #11
 8015242:	781a      	ldrb	r2, [r3, #0]
 8015244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015246:	330b      	adds	r3, #11
 8015248:	f042 0220 	orr.w	r2, r2, #32
 801524c:	b2d2      	uxtb	r2, r2
 801524e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	6818      	ldr	r0, [r3, #0]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	689b      	ldr	r3, [r3, #8]
 8015258:	461a      	mov	r2, r3
 801525a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801525c:	f7fd f9d9 	bl	8012612 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015262:	f103 021c 	add.w	r2, r3, #28
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801526c:	4619      	mov	r1, r3
 801526e:	4610      	mov	r0, r2
 8015270:	f7fb fe6d 	bl	8010f4e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015276:	3316      	adds	r3, #22
 8015278:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801527a:	4618      	mov	r0, r3
 801527c:	f7fb fe67 	bl	8010f4e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015282:	3312      	adds	r3, #18
 8015284:	2100      	movs	r1, #0
 8015286:	4618      	mov	r0, r3
 8015288:	f7fb fe46 	bl	8010f18 <st_word>
					fs->wflag = 1;
 801528c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801528e:	2201      	movs	r2, #1
 8015290:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015294:	4618      	mov	r0, r3
 8015296:	f7fc f969 	bl	801156c <sync_fs>
 801529a:	4603      	mov	r3, r0
 801529c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80152aa:	b2da      	uxtb	r2, r3
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80152b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3774      	adds	r7, #116	; 0x74
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd90      	pop	{r4, r7, pc}

080152be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80152be:	b580      	push	{r7, lr}
 80152c0:	b084      	sub	sp, #16
 80152c2:	af00      	add	r7, sp, #0
 80152c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80152c6:	6878      	ldr	r0, [r7, #4]
 80152c8:	f7ff fec3 	bl	8015052 <f_sync>
 80152cc:	4603      	mov	r3, r0
 80152ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80152d0:	7bfb      	ldrb	r3, [r7, #15]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d118      	bne.n	8015308 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f107 0208 	add.w	r2, r7, #8
 80152dc:	4611      	mov	r1, r2
 80152de:	4618      	mov	r0, r3
 80152e0:	f7ff f800 	bl	80142e4 <validate>
 80152e4:	4603      	mov	r3, r0
 80152e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80152e8:	7bfb      	ldrb	r3, [r7, #15]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d10c      	bne.n	8015308 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7fc f868 	bl	80113c8 <dec_lock>
 80152f8:	4603      	mov	r3, r0
 80152fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80152fc:	7bfb      	ldrb	r3, [r7, #15]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d102      	bne.n	8015308 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2200      	movs	r2, #0
 8015306:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015308:	7bfb      	ldrb	r3, [r7, #15]
}
 801530a:	4618      	mov	r0, r3
 801530c:	3710      	adds	r7, #16
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8015312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015314:	b095      	sub	sp, #84	; 0x54
 8015316:	af00      	add	r7, sp, #0
 8015318:	60f8      	str	r0, [r7, #12]
 801531a:	e9c7 2300 	strd	r2, r3, [r7]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	f107 0210 	add.w	r2, r7, #16
 8015324:	4611      	mov	r1, r2
 8015326:	4618      	mov	r0, r3
 8015328:	f7fe ffdc 	bl	80142e4 <validate>
 801532c:	4603      	mov	r3, r0
 801532e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015332:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015336:	2b00      	cmp	r3, #0
 8015338:	d104      	bne.n	8015344 <f_lseek+0x32>
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015340:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 8015344:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015348:	2b00      	cmp	r3, #0
 801534a:	d10e      	bne.n	801536a <f_lseek+0x58>
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	781b      	ldrb	r3, [r3, #0]
 8015350:	2b04      	cmp	r3, #4
 8015352:	d10a      	bne.n	801536a <f_lseek+0x58>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8015354:	68f8      	ldr	r0, [r7, #12]
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801535a:	f04f 32ff 	mov.w	r2, #4294967295
 801535e:	4619      	mov	r1, r3
 8015360:	f7fc fd35 	bl	8011dce <fill_last_frag>
 8015364:	4603      	mov	r3, r0
 8015366:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801536a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801536e:	2b00      	cmp	r3, #0
 8015370:	d002      	beq.n	8015378 <f_lseek+0x66>
 8015372:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015376:	e2d5      	b.n	8015924 <f_lseek+0x612>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801537c:	2b00      	cmp	r3, #0
 801537e:	f000 8104 	beq.w	801558a <f_lseek+0x278>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015382:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015386:	f1b4 3fff 	cmp.w	r4, #4294967295
 801538a:	bf08      	it	eq
 801538c:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 8015390:	d15c      	bne.n	801544c <f_lseek+0x13a>
			tbl = fp->cltbl;
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015396:	637b      	str	r3, [r7, #52]	; 0x34
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801539a:	1d1a      	adds	r2, r3, #4
 801539c:	637a      	str	r2, [r7, #52]	; 0x34
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	61fb      	str	r3, [r7, #28]
 80153a2:	2302      	movs	r3, #2
 80153a4:	63bb      	str	r3, [r7, #56]	; 0x38
			cl = fp->obj.sclust;		/* Origin of the chain */
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	689b      	ldr	r3, [r3, #8]
 80153aa:	643b      	str	r3, [r7, #64]	; 0x40
			if (cl) {
 80153ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d03c      	beq.n	801542c <f_lseek+0x11a>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80153b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153b4:	61bb      	str	r3, [r7, #24]
 80153b6:	2300      	movs	r3, #0
 80153b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80153ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153bc:	3302      	adds	r3, #2
 80153be:	63bb      	str	r3, [r7, #56]	; 0x38
					do {
						pcl = cl; ncl++;
 80153c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153c2:	617b      	str	r3, [r7, #20]
 80153c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153c6:	3301      	adds	r3, #1
 80153c8:	63fb      	str	r3, [r7, #60]	; 0x3c
						cl = get_fat(&fp->obj, cl);
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7fc f95c 	bl	801168c <get_fat>
 80153d4:	6438      	str	r0, [r7, #64]	; 0x40
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80153d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153d8:	2b01      	cmp	r3, #1
 80153da:	d805      	bhi.n	80153e8 <f_lseek+0xd6>
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	2202      	movs	r2, #2
 80153e0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80153e4:	2302      	movs	r3, #2
 80153e6:	e29d      	b.n	8015924 <f_lseek+0x612>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80153e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153ee:	d105      	bne.n	80153fc <f_lseek+0xea>
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	2201      	movs	r2, #1
 80153f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80153f8:	2301      	movs	r3, #1
 80153fa:	e293      	b.n	8015924 <f_lseek+0x612>
					} while (cl == pcl + 1);
 80153fc:	697b      	ldr	r3, [r7, #20]
 80153fe:	3301      	adds	r3, #1
 8015400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015402:	429a      	cmp	r2, r3
 8015404:	d0dc      	beq.n	80153c0 <f_lseek+0xae>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8015406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015408:	69fb      	ldr	r3, [r7, #28]
 801540a:	429a      	cmp	r2, r3
 801540c:	d809      	bhi.n	8015422 <f_lseek+0x110>
						*tbl++ = ncl; *tbl++ = tcl;
 801540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015410:	1d1a      	adds	r2, r3, #4
 8015412:	637a      	str	r2, [r7, #52]	; 0x34
 8015414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015416:	601a      	str	r2, [r3, #0]
 8015418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801541a:	1d1a      	adds	r2, r3, #4
 801541c:	637a      	str	r2, [r7, #52]	; 0x34
 801541e:	69ba      	ldr	r2, [r7, #24]
 8015420:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	6a1b      	ldr	r3, [r3, #32]
 8015426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015428:	429a      	cmp	r2, r3
 801542a:	d3c2      	bcc.n	80153b2 <f_lseek+0xa0>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015432:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8015434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015436:	69fb      	ldr	r3, [r7, #28]
 8015438:	429a      	cmp	r2, r3
 801543a:	d803      	bhi.n	8015444 <f_lseek+0x132>
				*tbl = 0;		/* Terminate table */
 801543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801543e:	2200      	movs	r2, #0
 8015440:	601a      	str	r2, [r3, #0]
 8015442:	e26d      	b.n	8015920 <f_lseek+0x60e>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015444:	2311      	movs	r3, #17
 8015446:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801544a:	e269      	b.n	8015920 <f_lseek+0x60e>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8015452:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015456:	42a2      	cmp	r2, r4
 8015458:	bf08      	it	eq
 801545a:	4299      	cmpeq	r1, r3
 801545c:	d204      	bcs.n	8015468 <f_lseek+0x156>
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8015464:	e9c7 3400 	strd	r3, r4, [r7]
			fp->fptr = ofs;				/* Set file pointer */
 8015468:	68fa      	ldr	r2, [r7, #12]
 801546a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801546e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			if (ofs) {
 8015472:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015476:	4323      	orrs	r3, r4
 8015478:	f000 8252 	beq.w	8015920 <f_lseek+0x60e>
				fp->clust = clmt_clust(fp, ofs - 1);
 801547c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015480:	f113 31ff 	adds.w	r1, r3, #4294967295
 8015484:	f144 32ff 	adc.w	r2, r4, #4294967295
 8015488:	4613      	mov	r3, r2
 801548a:	460a      	mov	r2, r1
 801548c:	68f8      	ldr	r0, [r7, #12]
 801548e:	f7fc fe84 	bl	801219a <clmt_clust>
 8015492:	4602      	mov	r2, r0
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 8015498:	693a      	ldr	r2, [r7, #16]
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801549e:	4619      	mov	r1, r3
 80154a0:	4610      	mov	r0, r2
 80154a2:	f7fc f8d3 	bl	801164c <clust2sect>
 80154a6:	6238      	str	r0, [r7, #32]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80154a8:	6a3b      	ldr	r3, [r7, #32]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d105      	bne.n	80154ba <f_lseek+0x1a8>
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	2202      	movs	r2, #2
 80154b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80154b6:	2302      	movs	r3, #2
 80154b8:	e234      	b.n	8015924 <f_lseek+0x612>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80154ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 80154be:	f113 30ff 	adds.w	r0, r3, #4294967295
 80154c2:	f144 31ff 	adc.w	r1, r4, #4294967295
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	899b      	ldrh	r3, [r3, #12]
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	f04f 0400 	mov.w	r4, #0
 80154d0:	461a      	mov	r2, r3
 80154d2:	4623      	mov	r3, r4
 80154d4:	f7ea ff00 	bl	80002d8 <__aeabi_uldivmod>
 80154d8:	4603      	mov	r3, r0
 80154da:	460c      	mov	r4, r1
 80154dc:	461a      	mov	r2, r3
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	895b      	ldrh	r3, [r3, #10]
 80154e2:	3b01      	subs	r3, #1
 80154e4:	4013      	ands	r3, r2
 80154e6:	6a3a      	ldr	r2, [r7, #32]
 80154e8:	4413      	add	r3, r2
 80154ea:	623b      	str	r3, [r7, #32]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80154f2:	693b      	ldr	r3, [r7, #16]
 80154f4:	899b      	ldrh	r3, [r3, #12]
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	f04f 0400 	mov.w	r4, #0
 80154fc:	461a      	mov	r2, r3
 80154fe:	4623      	mov	r3, r4
 8015500:	f7ea feea 	bl	80002d8 <__aeabi_uldivmod>
 8015504:	461c      	mov	r4, r3
 8015506:	4613      	mov	r3, r2
 8015508:	4323      	orrs	r3, r4
 801550a:	f000 8209 	beq.w	8015920 <f_lseek+0x60e>
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015512:	6a3a      	ldr	r2, [r7, #32]
 8015514:	429a      	cmp	r2, r3
 8015516:	f000 8203 	beq.w	8015920 <f_lseek+0x60e>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015520:	b25b      	sxtb	r3, r3
 8015522:	2b00      	cmp	r3, #0
 8015524:	da1b      	bge.n	801555e <f_lseek+0x24c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015526:	693b      	ldr	r3, [r7, #16]
 8015528:	7858      	ldrb	r0, [r3, #1]
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015534:	2301      	movs	r3, #1
 8015536:	f7fb fbb9 	bl	8010cac <disk_write>
 801553a:	4603      	mov	r3, r0
 801553c:	2b00      	cmp	r3, #0
 801553e:	d005      	beq.n	801554c <f_lseek+0x23a>
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	2201      	movs	r2, #1
 8015544:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015548:	2301      	movs	r3, #1
 801554a:	e1eb      	b.n	8015924 <f_lseek+0x612>
						fp->flag &= (BYTE)~FA_DIRTY;
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015556:	b2da      	uxtb	r2, r3
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	7858      	ldrb	r0, [r3, #1]
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8015568:	2301      	movs	r3, #1
 801556a:	6a3a      	ldr	r2, [r7, #32]
 801556c:	f7fb fb7e 	bl	8010c6c <disk_read>
 8015570:	4603      	mov	r3, r0
 8015572:	2b00      	cmp	r3, #0
 8015574:	d005      	beq.n	8015582 <f_lseek+0x270>
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	2201      	movs	r2, #1
 801557a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801557e:	2301      	movs	r3, #1
 8015580:	e1d0      	b.n	8015924 <f_lseek+0x612>
#endif
					fp->sect = dsc;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	6a3a      	ldr	r2, [r7, #32]
 8015586:	645a      	str	r2, [r3, #68]	; 0x44
 8015588:	e1ca      	b.n	8015920 <f_lseek+0x60e>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	2b04      	cmp	r3, #4
 8015590:	d00b      	beq.n	80155aa <f_lseek+0x298>
 8015592:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015596:	2c01      	cmp	r4, #1
 8015598:	bf08      	it	eq
 801559a:	2b00      	cmpeq	r3, #0
 801559c:	d305      	bcc.n	80155aa <f_lseek+0x298>
 801559e:	f04f 33ff 	mov.w	r3, #4294967295
 80155a2:	f04f 0400 	mov.w	r4, #0
 80155a6:	e9c7 3400 	strd	r3, r4, [r7]
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80155b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80155b4:	42a2      	cmp	r2, r4
 80155b6:	bf08      	it	eq
 80155b8:	4299      	cmpeq	r1, r3
 80155ba:	d20b      	bcs.n	80155d4 <f_lseek+0x2c2>
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80155c2:	f003 0302 	and.w	r3, r3, #2
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d104      	bne.n	80155d4 <f_lseek+0x2c2>
			ofs = fp->obj.objsize;
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80155d0:	e9c7 3400 	strd	r3, r4, [r7]
		}
		ifptr = fp->fptr;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80155da:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		fp->fptr = nsect = 0;
 80155de:	2300      	movs	r3, #0
 80155e0:	647b      	str	r3, [r7, #68]	; 0x44
 80155e2:	68fa      	ldr	r2, [r7, #12]
 80155e4:	f04f 0300 	mov.w	r3, #0
 80155e8:	f04f 0400 	mov.w	r4, #0
 80155ec:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if (ofs) {
 80155f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80155f4:	4323      	orrs	r3, r4
 80155f6:	f000 812e 	beq.w	8015856 <f_lseek+0x544>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80155fa:	693b      	ldr	r3, [r7, #16]
 80155fc:	895b      	ldrh	r3, [r3, #10]
 80155fe:	461a      	mov	r2, r3
 8015600:	693b      	ldr	r3, [r7, #16]
 8015602:	899b      	ldrh	r3, [r3, #12]
 8015604:	fb03 f302 	mul.w	r3, r3, r2
 8015608:	627b      	str	r3, [r7, #36]	; 0x24
			if (ifptr > 0 &&
 801560a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801560e:	4323      	orrs	r3, r4
 8015610:	d048      	beq.n	80156a4 <f_lseek+0x392>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015612:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015616:	f113 30ff 	adds.w	r0, r3, #4294967295
 801561a:	f144 31ff 	adc.w	r1, r4, #4294967295
 801561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015620:	f04f 0400 	mov.w	r4, #0
 8015624:	461a      	mov	r2, r3
 8015626:	4623      	mov	r3, r4
 8015628:	f7ea fe56 	bl	80002d8 <__aeabi_uldivmod>
 801562c:	4603      	mov	r3, r0
 801562e:	460c      	mov	r4, r1
 8015630:	461d      	mov	r5, r3
 8015632:	4626      	mov	r6, r4
 8015634:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8015638:	f113 30ff 	adds.w	r0, r3, #4294967295
 801563c:	f144 31ff 	adc.w	r1, r4, #4294967295
 8015640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015642:	f04f 0400 	mov.w	r4, #0
 8015646:	461a      	mov	r2, r3
 8015648:	4623      	mov	r3, r4
 801564a:	f7ea fe45 	bl	80002d8 <__aeabi_uldivmod>
 801564e:	4603      	mov	r3, r0
 8015650:	460c      	mov	r4, r1
			if (ifptr > 0 &&
 8015652:	42a6      	cmp	r6, r4
 8015654:	bf08      	it	eq
 8015656:	429d      	cmpeq	r5, r3
 8015658:	d324      	bcc.n	80156a4 <f_lseek+0x392>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801565a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801565e:	f113 31ff 	adds.w	r1, r3, #4294967295
 8015662:	f144 32ff 	adc.w	r2, r4, #4294967295
 8015666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015668:	3b01      	subs	r3, #1
 801566a:	f04f 0400 	mov.w	r4, #0
 801566e:	ea6f 0503 	mvn.w	r5, r3
 8015672:	ea6f 0604 	mvn.w	r6, r4
 8015676:	ea05 0301 	and.w	r3, r5, r1
 801567a:	ea06 0402 	and.w	r4, r6, r2
 801567e:	68fa      	ldr	r2, [r7, #12]
 8015680:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				ofs -= fp->fptr;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 801568a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801568e:	460b      	mov	r3, r1
 8015690:	4614      	mov	r4, r2
 8015692:	1b5b      	subs	r3, r3, r5
 8015694:	eb64 0406 	sbc.w	r4, r4, r6
 8015698:	e9c7 3400 	strd	r3, r4, [r7]
				clst = fp->clust;
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80156a2:	e024      	b.n	80156ee <f_lseek+0x3dc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	689b      	ldr	r3, [r3, #8]
 80156a8:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80156aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d11b      	bne.n	80156e8 <f_lseek+0x3d6>
					clst = create_chain(&fp->obj, 0);
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	2100      	movs	r1, #0
 80156b4:	4618      	mov	r0, r3
 80156b6:	f7fc fc6f 	bl	8011f98 <create_chain>
 80156ba:	64b8      	str	r0, [r7, #72]	; 0x48
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80156bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80156be:	2b01      	cmp	r3, #1
 80156c0:	d105      	bne.n	80156ce <f_lseek+0x3bc>
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	2202      	movs	r2, #2
 80156c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80156ca:	2302      	movs	r3, #2
 80156cc:	e12a      	b.n	8015924 <f_lseek+0x612>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80156ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80156d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156d4:	d105      	bne.n	80156e2 <f_lseek+0x3d0>
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2201      	movs	r2, #1
 80156da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80156de:	2301      	movs	r3, #1
 80156e0:	e120      	b.n	8015924 <f_lseek+0x612>
					fp->obj.sclust = clst;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80156e6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80156ec:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (clst != 0) {
 80156ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	f000 80b0 	beq.w	8015856 <f_lseek+0x544>
				while (ofs > bcs) {						/* Cluster following loop */
 80156f6:	e06a      	b.n	80157ce <f_lseek+0x4bc>
					ofs -= bcs; fp->fptr += bcs;
 80156f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156fa:	461d      	mov	r5, r3
 80156fc:	f04f 0600 	mov.w	r6, #0
 8015700:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015704:	460b      	mov	r3, r1
 8015706:	4614      	mov	r4, r2
 8015708:	1b5b      	subs	r3, r3, r5
 801570a:	eb64 0406 	sbc.w	r4, r4, r6
 801570e:	e9c7 3400 	strd	r3, r4, [r7]
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8015718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801571a:	461d      	mov	r5, r3
 801571c:	f04f 0600 	mov.w	r6, #0
 8015720:	186b      	adds	r3, r5, r1
 8015722:	eb46 0402 	adc.w	r4, r6, r2
 8015726:	68fa      	ldr	r2, [r7, #12]
 8015728:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015732:	f003 0302 	and.w	r3, r3, #2
 8015736:	2b00      	cmp	r3, #0
 8015738:	d028      	beq.n	801578c <f_lseek+0x47a>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8015740:	68fa      	ldr	r2, [r7, #12]
 8015742:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8015746:	42a2      	cmp	r2, r4
 8015748:	bf08      	it	eq
 801574a:	4299      	cmpeq	r1, r3
 801574c:	d20e      	bcs.n	801576c <f_lseek+0x45a>
							fp->obj.objsize = fp->fptr;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8015754:	68fa      	ldr	r2, [r7, #12]
 8015756:	e9c2 3404 	strd	r3, r4, [r2, #16]
							fp->flag |= FA_MODIFIED;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015764:	b2da      	uxtb	r2, r3
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015770:	4618      	mov	r0, r3
 8015772:	f7fc fc11 	bl	8011f98 <create_chain>
 8015776:	64b8      	str	r0, [r7, #72]	; 0x48
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801577a:	2b00      	cmp	r3, #0
 801577c:	d10c      	bne.n	8015798 <f_lseek+0x486>
							ofs = 0; break;
 801577e:	f04f 0300 	mov.w	r3, #0
 8015782:	f04f 0400 	mov.w	r4, #0
 8015786:	e9c7 3400 	strd	r3, r4, [r7]
 801578a:	e02a      	b.n	80157e2 <f_lseek+0x4d0>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015790:	4618      	mov	r0, r3
 8015792:	f7fb ff7b 	bl	801168c <get_fat>
 8015796:	64b8      	str	r0, [r7, #72]	; 0x48
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801579e:	d105      	bne.n	80157ac <f_lseek+0x49a>
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	2201      	movs	r2, #1
 80157a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80157a8:	2301      	movs	r3, #1
 80157aa:	e0bb      	b.n	8015924 <f_lseek+0x612>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80157ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157ae:	2b01      	cmp	r3, #1
 80157b0:	d904      	bls.n	80157bc <f_lseek+0x4aa>
 80157b2:	693b      	ldr	r3, [r7, #16]
 80157b4:	6a1b      	ldr	r3, [r3, #32]
 80157b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d305      	bcc.n	80157c8 <f_lseek+0x4b6>
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	2202      	movs	r2, #2
 80157c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80157c4:	2302      	movs	r3, #2
 80157c6:	e0ad      	b.n	8015924 <f_lseek+0x612>
					fp->clust = clst;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80157cc:	641a      	str	r2, [r3, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 80157ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d0:	4619      	mov	r1, r3
 80157d2:	f04f 0200 	mov.w	r2, #0
 80157d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80157da:	42a2      	cmp	r2, r4
 80157dc:	bf08      	it	eq
 80157de:	4299      	cmpeq	r1, r3
 80157e0:	d38a      	bcc.n	80156f8 <f_lseek+0x3e6>
				}
				fp->fptr += ofs;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80157e8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80157ec:	185d      	adds	r5, r3, r1
 80157ee:	eb44 0602 	adc.w	r6, r4, r2
 80157f2:	68fa      	ldr	r2, [r7, #12]
 80157f4:	e9c2 560e 	strd	r5, r6, [r2, #56]	; 0x38
				if (ofs % SS(fs)) {
 80157f8:	693b      	ldr	r3, [r7, #16]
 80157fa:	899b      	ldrh	r3, [r3, #12]
 80157fc:	b29b      	uxth	r3, r3
 80157fe:	f04f 0400 	mov.w	r4, #0
 8015802:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015806:	461a      	mov	r2, r3
 8015808:	4623      	mov	r3, r4
 801580a:	f7ea fd65 	bl	80002d8 <__aeabi_uldivmod>
 801580e:	461c      	mov	r4, r3
 8015810:	4613      	mov	r3, r2
 8015812:	4323      	orrs	r3, r4
 8015814:	d01f      	beq.n	8015856 <f_lseek+0x544>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015816:	693b      	ldr	r3, [r7, #16]
 8015818:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801581a:	4618      	mov	r0, r3
 801581c:	f7fb ff16 	bl	801164c <clust2sect>
 8015820:	6478      	str	r0, [r7, #68]	; 0x44
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015824:	2b00      	cmp	r3, #0
 8015826:	d105      	bne.n	8015834 <f_lseek+0x522>
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	2202      	movs	r2, #2
 801582c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015830:	2302      	movs	r3, #2
 8015832:	e077      	b.n	8015924 <f_lseek+0x612>
					nsect += (DWORD)(ofs / SS(fs));
 8015834:	693b      	ldr	r3, [r7, #16]
 8015836:	899b      	ldrh	r3, [r3, #12]
 8015838:	b29b      	uxth	r3, r3
 801583a:	f04f 0400 	mov.w	r4, #0
 801583e:	461a      	mov	r2, r3
 8015840:	4623      	mov	r3, r4
 8015842:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015846:	f7ea fd47 	bl	80002d8 <__aeabi_uldivmod>
 801584a:	4603      	mov	r3, r0
 801584c:	460c      	mov	r4, r1
 801584e:	461a      	mov	r2, r3
 8015850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015852:	4413      	add	r3, r2
 8015854:	647b      	str	r3, [r7, #68]	; 0x44
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801585c:	68fa      	ldr	r2, [r7, #12]
 801585e:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8015862:	42a2      	cmp	r2, r4
 8015864:	bf08      	it	eq
 8015866:	4299      	cmpeq	r1, r3
 8015868:	d20e      	bcs.n	8015888 <f_lseek+0x576>
			fp->obj.objsize = fp->fptr;
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8015870:	68fa      	ldr	r2, [r7, #12]
 8015872:	e9c2 3404 	strd	r3, r4, [r2, #16]
			fp->flag |= FA_MODIFIED;
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801587c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015880:	b2da      	uxtb	r2, r3
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801588e:	693b      	ldr	r3, [r7, #16]
 8015890:	899b      	ldrh	r3, [r3, #12]
 8015892:	b29b      	uxth	r3, r3
 8015894:	f04f 0400 	mov.w	r4, #0
 8015898:	461a      	mov	r2, r3
 801589a:	4623      	mov	r3, r4
 801589c:	f7ea fd1c 	bl	80002d8 <__aeabi_uldivmod>
 80158a0:	461c      	mov	r4, r3
 80158a2:	4613      	mov	r3, r2
 80158a4:	4323      	orrs	r3, r4
 80158a6:	d03b      	beq.n	8015920 <f_lseek+0x60e>
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d036      	beq.n	8015920 <f_lseek+0x60e>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80158b8:	b25b      	sxtb	r3, r3
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	da1b      	bge.n	80158f6 <f_lseek+0x5e4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80158be:	693b      	ldr	r3, [r7, #16]
 80158c0:	7858      	ldrb	r0, [r3, #1]
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80158cc:	2301      	movs	r3, #1
 80158ce:	f7fb f9ed 	bl	8010cac <disk_write>
 80158d2:	4603      	mov	r3, r0
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d005      	beq.n	80158e4 <f_lseek+0x5d2>
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	2201      	movs	r2, #1
 80158dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80158e0:	2301      	movs	r3, #1
 80158e2:	e01f      	b.n	8015924 <f_lseek+0x612>
				fp->flag &= (BYTE)~FA_DIRTY;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80158ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158ee:	b2da      	uxtb	r2, r3
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80158f6:	693b      	ldr	r3, [r7, #16]
 80158f8:	7858      	ldrb	r0, [r3, #1]
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8015900:	2301      	movs	r3, #1
 8015902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015904:	f7fb f9b2 	bl	8010c6c <disk_read>
 8015908:	4603      	mov	r3, r0
 801590a:	2b00      	cmp	r3, #0
 801590c:	d005      	beq.n	801591a <f_lseek+0x608>
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2201      	movs	r2, #1
 8015912:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015916:	2301      	movs	r3, #1
 8015918:	e004      	b.n	8015924 <f_lseek+0x612>
#endif
			fp->sect = nsect;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801591e:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8015920:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8015924:	4618      	mov	r0, r3
 8015926:	3754      	adds	r7, #84	; 0x54
 8015928:	46bd      	mov	sp, r7
 801592a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801592c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b084      	sub	sp, #16
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	460b      	mov	r3, r1
 8015936:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8015938:	78fb      	ldrb	r3, [r7, #3]
 801593a:	2b0a      	cmp	r3, #10
 801593c:	d103      	bne.n	8015946 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801593e:	210d      	movs	r1, #13
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f7ff fff3 	bl	801592c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	685b      	ldr	r3, [r3, #4]
 801594a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	2b00      	cmp	r3, #0
 8015950:	db25      	blt.n	801599e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	1c5a      	adds	r2, r3, #1
 8015956:	60fa      	str	r2, [r7, #12]
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	4413      	add	r3, r2
 801595c:	78fa      	ldrb	r2, [r7, #3]
 801595e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	2b3c      	cmp	r3, #60	; 0x3c
 8015964:	dd12      	ble.n	801598c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	6818      	ldr	r0, [r3, #0]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f103 010c 	add.w	r1, r3, #12
 8015970:	68fa      	ldr	r2, [r7, #12]
 8015972:	f107 0308 	add.w	r3, r7, #8
 8015976:	f7ff f996 	bl	8014ca6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801597a:	68ba      	ldr	r2, [r7, #8]
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	429a      	cmp	r2, r3
 8015980:	d101      	bne.n	8015986 <putc_bfd+0x5a>
 8015982:	2300      	movs	r3, #0
 8015984:	e001      	b.n	801598a <putc_bfd+0x5e>
 8015986:	f04f 33ff 	mov.w	r3, #4294967295
 801598a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	68fa      	ldr	r2, [r7, #12]
 8015990:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	689b      	ldr	r3, [r3, #8]
 8015996:	1c5a      	adds	r2, r3, #1
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	609a      	str	r2, [r3, #8]
 801599c:	e000      	b.n	80159a0 <putc_bfd+0x74>
	if (i < 0) return;
 801599e:	bf00      	nop
}
 80159a0:	3710      	adds	r7, #16
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}

080159a6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80159a6:	b580      	push	{r7, lr}
 80159a8:	b084      	sub	sp, #16
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	685b      	ldr	r3, [r3, #4]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	db17      	blt.n	80159e6 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	6818      	ldr	r0, [r3, #0]
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f103 010c 	add.w	r1, r3, #12
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	685b      	ldr	r3, [r3, #4]
 80159c4:	461a      	mov	r2, r3
 80159c6:	f107 030c 	add.w	r3, r7, #12
 80159ca:	f7ff f96c 	bl	8014ca6 <f_write>
 80159ce:	4603      	mov	r3, r0
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d108      	bne.n	80159e6 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	685b      	ldr	r3, [r3, #4]
 80159d8:	461a      	mov	r2, r3
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	429a      	cmp	r2, r3
 80159de:	d102      	bne.n	80159e6 <putc_flush+0x40>
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	689b      	ldr	r3, [r3, #8]
 80159e4:	e001      	b.n	80159ea <putc_flush+0x44>
	return EOF;
 80159e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80159ea:	4618      	mov	r0, r3
 80159ec:	3710      	adds	r7, #16
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}

080159f2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80159f2:	b480      	push	{r7}
 80159f4:	b083      	sub	sp, #12
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	6078      	str	r0, [r7, #4]
 80159fa:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	683a      	ldr	r2, [r7, #0]
 8015a00:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2200      	movs	r2, #0
 8015a06:	605a      	str	r2, [r3, #4]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	685a      	ldr	r2, [r3, #4]
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	609a      	str	r2, [r3, #8]
}
 8015a10:	bf00      	nop
 8015a12:	370c      	adds	r7, #12
 8015a14:	46bd      	mov	sp, r7
 8015a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1a:	4770      	bx	lr

08015a1c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8015a1c:	b40e      	push	{r1, r2, r3}
 8015a1e:	b580      	push	{r7, lr}
 8015a20:	b0a7      	sub	sp, #156	; 0x9c
 8015a22:	af00      	add	r7, sp, #0
 8015a24:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8015a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a2a:	6879      	ldr	r1, [r7, #4]
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7ff ffe0 	bl	80159f2 <putc_init>

	va_start(arp, fmt);
 8015a32:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015a36:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8015a38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015a3c:	1c5a      	adds	r2, r3, #1
 8015a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015a42:	781b      	ldrb	r3, [r3, #0]
 8015a44:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8015a48:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	f000 81f4 	beq.w	8015e3a <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8015a52:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015a56:	2b25      	cmp	r3, #37	; 0x25
 8015a58:	d008      	beq.n	8015a6c <f_printf+0x50>
			putc_bfd(&pb, c);
 8015a5a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8015a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a62:	4611      	mov	r1, r2
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7ff ff61 	bl	801592c <putc_bfd>
			continue;
 8015a6a:	e1e5      	b.n	8015e38 <f_printf+0x41c>
		}
		w = f = 0;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8015a72:	2300      	movs	r3, #0
 8015a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8015a78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015a7c:	1c5a      	adds	r2, r3, #1
 8015a7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015a82:	781b      	ldrb	r3, [r3, #0]
 8015a84:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8015a88:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015a8c:	2b30      	cmp	r3, #48	; 0x30
 8015a8e:	d10b      	bne.n	8015aa8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8015a90:	2301      	movs	r3, #1
 8015a92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8015a96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015a9a:	1c5a      	adds	r2, r3, #1
 8015a9c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8015aa6:	e024      	b.n	8015af2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8015aa8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015aac:	2b2d      	cmp	r3, #45	; 0x2d
 8015aae:	d120      	bne.n	8015af2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8015ab0:	2302      	movs	r3, #2
 8015ab2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8015ab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015aba:	1c5a      	adds	r2, r3, #1
 8015abc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015ac0:	781b      	ldrb	r3, [r3, #0]
 8015ac2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8015ac6:	e014      	b.n	8015af2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8015ac8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015acc:	4613      	mov	r3, r2
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	4413      	add	r3, r2
 8015ad2:	005b      	lsls	r3, r3, #1
 8015ad4:	461a      	mov	r2, r3
 8015ad6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015ada:	4413      	add	r3, r2
 8015adc:	3b30      	subs	r3, #48	; 0x30
 8015ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8015ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015ae6:	1c5a      	adds	r2, r3, #1
 8015ae8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8015af2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015af6:	2b2f      	cmp	r3, #47	; 0x2f
 8015af8:	d903      	bls.n	8015b02 <f_printf+0xe6>
 8015afa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015afe:	2b39      	cmp	r3, #57	; 0x39
 8015b00:	d9e2      	bls.n	8015ac8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8015b02:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015b06:	2b6c      	cmp	r3, #108	; 0x6c
 8015b08:	d003      	beq.n	8015b12 <f_printf+0xf6>
 8015b0a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015b0e:	2b4c      	cmp	r3, #76	; 0x4c
 8015b10:	d10d      	bne.n	8015b2e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8015b12:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015b16:	f043 0304 	orr.w	r3, r3, #4
 8015b1a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8015b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015b22:	1c5a      	adds	r2, r3, #1
 8015b24:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015b28:	781b      	ldrb	r3, [r3, #0]
 8015b2a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8015b2e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	f000 8183 	beq.w	8015e3e <f_printf+0x422>
		d = c;
 8015b38:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015b3c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8015b40:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015b44:	2b60      	cmp	r3, #96	; 0x60
 8015b46:	d908      	bls.n	8015b5a <f_printf+0x13e>
 8015b48:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015b4c:	2b7a      	cmp	r3, #122	; 0x7a
 8015b4e:	d804      	bhi.n	8015b5a <f_printf+0x13e>
 8015b50:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015b54:	3b20      	subs	r3, #32
 8015b56:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8015b5a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015b5e:	3b42      	subs	r3, #66	; 0x42
 8015b60:	2b16      	cmp	r3, #22
 8015b62:	f200 8098 	bhi.w	8015c96 <f_printf+0x27a>
 8015b66:	a201      	add	r2, pc, #4	; (adr r2, 8015b6c <f_printf+0x150>)
 8015b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b6c:	08015c77 	.word	0x08015c77
 8015b70:	08015c5f 	.word	0x08015c5f
 8015b74:	08015c87 	.word	0x08015c87
 8015b78:	08015c97 	.word	0x08015c97
 8015b7c:	08015c97 	.word	0x08015c97
 8015b80:	08015c97 	.word	0x08015c97
 8015b84:	08015c97 	.word	0x08015c97
 8015b88:	08015c97 	.word	0x08015c97
 8015b8c:	08015c97 	.word	0x08015c97
 8015b90:	08015c97 	.word	0x08015c97
 8015b94:	08015c97 	.word	0x08015c97
 8015b98:	08015c97 	.word	0x08015c97
 8015b9c:	08015c97 	.word	0x08015c97
 8015ba0:	08015c7f 	.word	0x08015c7f
 8015ba4:	08015c97 	.word	0x08015c97
 8015ba8:	08015c97 	.word	0x08015c97
 8015bac:	08015c97 	.word	0x08015c97
 8015bb0:	08015bc9 	.word	0x08015bc9
 8015bb4:	08015c97 	.word	0x08015c97
 8015bb8:	08015c87 	.word	0x08015c87
 8015bbc:	08015c97 	.word	0x08015c97
 8015bc0:	08015c97 	.word	0x08015c97
 8015bc4:	08015c8f 	.word	0x08015c8f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8015bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015bca:	1d1a      	adds	r2, r3, #4
 8015bcc:	67ba      	str	r2, [r7, #120]	; 0x78
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015bd8:	e004      	b.n	8015be4 <f_printf+0x1c8>
 8015bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015bde:	3301      	adds	r3, #1
 8015be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015be4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015bea:	4413      	add	r3, r2
 8015bec:	781b      	ldrb	r3, [r3, #0]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d1f3      	bne.n	8015bda <f_printf+0x1be>
			if (!(f & 2)) {
 8015bf2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015bf6:	f003 0302 	and.w	r3, r3, #2
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d11a      	bne.n	8015c34 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8015bfe:	e005      	b.n	8015c0c <f_printf+0x1f0>
 8015c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c04:	2120      	movs	r1, #32
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7ff fe90 	bl	801592c <putc_bfd>
 8015c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c10:	1c5a      	adds	r2, r3, #1
 8015c12:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015c16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d8f0      	bhi.n	8015c00 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8015c1e:	e009      	b.n	8015c34 <f_printf+0x218>
 8015c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015c22:	1c5a      	adds	r2, r3, #1
 8015c24:	67fa      	str	r2, [r7, #124]	; 0x7c
 8015c26:	781a      	ldrb	r2, [r3, #0]
 8015c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c2c:	4611      	mov	r1, r2
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f7ff fe7c 	bl	801592c <putc_bfd>
 8015c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d1f1      	bne.n	8015c20 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8015c3c:	e005      	b.n	8015c4a <f_printf+0x22e>
 8015c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c42:	2120      	movs	r1, #32
 8015c44:	4618      	mov	r0, r3
 8015c46:	f7ff fe71 	bl	801592c <putc_bfd>
 8015c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c4e:	1c5a      	adds	r2, r3, #1
 8015c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015c54:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d8f0      	bhi.n	8015c3e <f_printf+0x222>
			continue;
 8015c5c:	e0ec      	b.n	8015e38 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8015c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c60:	1d1a      	adds	r2, r3, #4
 8015c62:	67ba      	str	r2, [r7, #120]	; 0x78
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	b2da      	uxtb	r2, r3
 8015c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c6c:	4611      	mov	r1, r2
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7ff fe5c 	bl	801592c <putc_bfd>
 8015c74:	e0e0      	b.n	8015e38 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8015c76:	2302      	movs	r3, #2
 8015c78:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015c7c:	e014      	b.n	8015ca8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8015c7e:	2308      	movs	r3, #8
 8015c80:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015c84:	e010      	b.n	8015ca8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8015c86:	230a      	movs	r3, #10
 8015c88:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015c8c:	e00c      	b.n	8015ca8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8015c8e:	2310      	movs	r3, #16
 8015c90:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015c94:	e008      	b.n	8015ca8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8015c96:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8015c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c9e:	4611      	mov	r1, r2
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f7ff fe43 	bl	801592c <putc_bfd>
 8015ca6:	e0c7      	b.n	8015e38 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8015ca8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015cac:	f003 0304 	and.w	r3, r3, #4
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d004      	beq.n	8015cbe <f_printf+0x2a2>
 8015cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015cb6:	1d1a      	adds	r2, r3, #4
 8015cb8:	67ba      	str	r2, [r7, #120]	; 0x78
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	e00c      	b.n	8015cd8 <f_printf+0x2bc>
 8015cbe:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015cc2:	2b44      	cmp	r3, #68	; 0x44
 8015cc4:	d104      	bne.n	8015cd0 <f_printf+0x2b4>
 8015cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015cc8:	1d1a      	adds	r2, r3, #4
 8015cca:	67ba      	str	r2, [r7, #120]	; 0x78
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	e003      	b.n	8015cd8 <f_printf+0x2bc>
 8015cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015cd2:	1d1a      	adds	r2, r3, #4
 8015cd4:	67ba      	str	r2, [r7, #120]	; 0x78
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8015cdc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015ce0:	2b44      	cmp	r3, #68	; 0x44
 8015ce2:	d10e      	bne.n	8015d02 <f_printf+0x2e6>
 8015ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	da0a      	bge.n	8015d02 <f_printf+0x2e6>
			v = 0 - v;
 8015cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015cf0:	425b      	negs	r3, r3
 8015cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8015cf6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015cfa:	f043 0308 	orr.w	r3, r3, #8
 8015cfe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8015d02:	2300      	movs	r3, #0
 8015d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8015d08:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8015d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8015d14:	fb02 f201 	mul.w	r2, r2, r1
 8015d18:	1a9b      	subs	r3, r3, r2
 8015d1a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8015d1e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8015d22:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8015d2e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015d32:	2b09      	cmp	r3, #9
 8015d34:	d90b      	bls.n	8015d4e <f_printf+0x332>
 8015d36:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015d3a:	2b78      	cmp	r3, #120	; 0x78
 8015d3c:	d101      	bne.n	8015d42 <f_printf+0x326>
 8015d3e:	2227      	movs	r2, #39	; 0x27
 8015d40:	e000      	b.n	8015d44 <f_printf+0x328>
 8015d42:	2207      	movs	r2, #7
 8015d44:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015d48:	4413      	add	r3, r2
 8015d4a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8015d4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d52:	1c5a      	adds	r2, r3, #1
 8015d54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015d58:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8015d5c:	3230      	adds	r2, #48	; 0x30
 8015d5e:	b2d2      	uxtb	r2, r2
 8015d60:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8015d64:	440b      	add	r3, r1
 8015d66:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8015d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d003      	beq.n	8015d7a <f_printf+0x35e>
 8015d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d76:	2b1f      	cmp	r3, #31
 8015d78:	d9c6      	bls.n	8015d08 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8015d7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015d7e:	f003 0308 	and.w	r3, r3, #8
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d00a      	beq.n	8015d9c <f_printf+0x380>
 8015d86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d8a:	1c5a      	adds	r2, r3, #1
 8015d8c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015d90:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8015d94:	4413      	add	r3, r2
 8015d96:	222d      	movs	r2, #45	; 0x2d
 8015d98:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8015d9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015da0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015da4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015da8:	f003 0301 	and.w	r3, r3, #1
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d001      	beq.n	8015db4 <f_printf+0x398>
 8015db0:	2330      	movs	r3, #48	; 0x30
 8015db2:	e000      	b.n	8015db6 <f_printf+0x39a>
 8015db4:	2320      	movs	r3, #32
 8015db6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8015dba:	e007      	b.n	8015dcc <f_printf+0x3b0>
 8015dbc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8015dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015dc4:	4611      	mov	r1, r2
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f7ff fdb0 	bl	801592c <putc_bfd>
 8015dcc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015dd0:	f003 0302 	and.w	r3, r3, #2
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d108      	bne.n	8015dea <f_printf+0x3ce>
 8015dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015ddc:	1c5a      	adds	r2, r3, #1
 8015dde:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015de2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015de6:	429a      	cmp	r2, r3
 8015de8:	d8e8      	bhi.n	8015dbc <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8015dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015dee:	3b01      	subs	r3, #1
 8015df0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015df4:	f107 020c 	add.w	r2, r7, #12
 8015df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015dfc:	4413      	add	r3, r2
 8015dfe:	781a      	ldrb	r2, [r3, #0]
 8015e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015e04:	4611      	mov	r1, r2
 8015e06:	4618      	mov	r0, r3
 8015e08:	f7ff fd90 	bl	801592c <putc_bfd>
		} while (i);
 8015e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d1ea      	bne.n	8015dea <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8015e14:	e007      	b.n	8015e26 <f_printf+0x40a>
 8015e16:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8015e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015e1e:	4611      	mov	r1, r2
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7ff fd83 	bl	801592c <putc_bfd>
 8015e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015e2a:	1c5a      	adds	r2, r3, #1
 8015e2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015e30:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015e34:	429a      	cmp	r2, r3
 8015e36:	d8ee      	bhi.n	8015e16 <f_printf+0x3fa>
		c = *fmt++;
 8015e38:	e5fe      	b.n	8015a38 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8015e3a:	bf00      	nop
 8015e3c:	e000      	b.n	8015e40 <f_printf+0x424>
		if (!c) break;
 8015e3e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8015e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7ff fdae 	bl	80159a6 <putc_flush>
 8015e4a:	4603      	mov	r3, r0
}
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	379c      	adds	r7, #156	; 0x9c
 8015e50:	46bd      	mov	sp, r7
 8015e52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015e56:	b003      	add	sp, #12
 8015e58:	4770      	bx	lr
 8015e5a:	bf00      	nop

08015e5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015e5c:	b480      	push	{r7}
 8015e5e:	b087      	sub	sp, #28
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	60f8      	str	r0, [r7, #12]
 8015e64:	60b9      	str	r1, [r7, #8]
 8015e66:	4613      	mov	r3, r2
 8015e68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015e6a:	2301      	movs	r3, #1
 8015e6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015e72:	4b1f      	ldr	r3, [pc, #124]	; (8015ef0 <FATFS_LinkDriverEx+0x94>)
 8015e74:	7b9b      	ldrb	r3, [r3, #14]
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	2b01      	cmp	r3, #1
 8015e7a:	d831      	bhi.n	8015ee0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015e7c:	4b1c      	ldr	r3, [pc, #112]	; (8015ef0 <FATFS_LinkDriverEx+0x94>)
 8015e7e:	7b9b      	ldrb	r3, [r3, #14]
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	461a      	mov	r2, r3
 8015e84:	4b1a      	ldr	r3, [pc, #104]	; (8015ef0 <FATFS_LinkDriverEx+0x94>)
 8015e86:	2100      	movs	r1, #0
 8015e88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015e8a:	4b19      	ldr	r3, [pc, #100]	; (8015ef0 <FATFS_LinkDriverEx+0x94>)
 8015e8c:	7b9b      	ldrb	r3, [r3, #14]
 8015e8e:	b2db      	uxtb	r3, r3
 8015e90:	4a17      	ldr	r2, [pc, #92]	; (8015ef0 <FATFS_LinkDriverEx+0x94>)
 8015e92:	009b      	lsls	r3, r3, #2
 8015e94:	4413      	add	r3, r2
 8015e96:	68fa      	ldr	r2, [r7, #12]
 8015e98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015e9a:	4b15      	ldr	r3, [pc, #84]	; (8015ef0 <FATFS_LinkDriverEx+0x94>)
 8015e9c:	7b9b      	ldrb	r3, [r3, #14]
 8015e9e:	b2db      	uxtb	r3, r3
 8015ea0:	461a      	mov	r2, r3
 8015ea2:	4b13      	ldr	r3, [pc, #76]	; (8015ef0 <FATFS_LinkDriverEx+0x94>)
 8015ea4:	4413      	add	r3, r2
 8015ea6:	79fa      	ldrb	r2, [r7, #7]
 8015ea8:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8015eaa:	4b11      	ldr	r3, [pc, #68]	; (8015ef0 <FATFS_LinkDriverEx+0x94>)
 8015eac:	7b9b      	ldrb	r3, [r3, #14]
 8015eae:	b2db      	uxtb	r3, r3
 8015eb0:	1c5a      	adds	r2, r3, #1
 8015eb2:	b2d1      	uxtb	r1, r2
 8015eb4:	4a0e      	ldr	r2, [pc, #56]	; (8015ef0 <FATFS_LinkDriverEx+0x94>)
 8015eb6:	7391      	strb	r1, [r2, #14]
 8015eb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015eba:	7dbb      	ldrb	r3, [r7, #22]
 8015ebc:	3330      	adds	r3, #48	; 0x30
 8015ebe:	b2da      	uxtb	r2, r3
 8015ec0:	68bb      	ldr	r3, [r7, #8]
 8015ec2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	3301      	adds	r3, #1
 8015ec8:	223a      	movs	r2, #58	; 0x3a
 8015eca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	3302      	adds	r3, #2
 8015ed0:	222f      	movs	r2, #47	; 0x2f
 8015ed2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015ed4:	68bb      	ldr	r3, [r7, #8]
 8015ed6:	3303      	adds	r3, #3
 8015ed8:	2200      	movs	r2, #0
 8015eda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015edc:	2300      	movs	r3, #0
 8015ede:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	371c      	adds	r7, #28
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eec:	4770      	bx	lr
 8015eee:	bf00      	nop
 8015ef0:	240002b0 	.word	0x240002b0

08015ef4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b082      	sub	sp, #8
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
 8015efc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015efe:	2200      	movs	r2, #0
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f7ff ffaa 	bl	8015e5c <FATFS_LinkDriverEx>
 8015f08:	4603      	mov	r3, r0
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	3708      	adds	r7, #8
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}
	...

08015f14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015f14:	b480      	push	{r7}
 8015f16:	b085      	sub	sp, #20
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	6039      	str	r1, [r7, #0]
 8015f1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015f20:	88fb      	ldrh	r3, [r7, #6]
 8015f22:	2b7f      	cmp	r3, #127	; 0x7f
 8015f24:	d802      	bhi.n	8015f2c <ff_convert+0x18>
		c = chr;
 8015f26:	88fb      	ldrh	r3, [r7, #6]
 8015f28:	81fb      	strh	r3, [r7, #14]
 8015f2a:	e025      	b.n	8015f78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d00b      	beq.n	8015f4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015f32:	88fb      	ldrh	r3, [r7, #6]
 8015f34:	2bff      	cmp	r3, #255	; 0xff
 8015f36:	d805      	bhi.n	8015f44 <ff_convert+0x30>
 8015f38:	88fb      	ldrh	r3, [r7, #6]
 8015f3a:	3b80      	subs	r3, #128	; 0x80
 8015f3c:	4a12      	ldr	r2, [pc, #72]	; (8015f88 <ff_convert+0x74>)
 8015f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015f42:	e000      	b.n	8015f46 <ff_convert+0x32>
 8015f44:	2300      	movs	r3, #0
 8015f46:	81fb      	strh	r3, [r7, #14]
 8015f48:	e016      	b.n	8015f78 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	81fb      	strh	r3, [r7, #14]
 8015f4e:	e009      	b.n	8015f64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8015f50:	89fb      	ldrh	r3, [r7, #14]
 8015f52:	4a0d      	ldr	r2, [pc, #52]	; (8015f88 <ff_convert+0x74>)
 8015f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015f58:	88fa      	ldrh	r2, [r7, #6]
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d006      	beq.n	8015f6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8015f5e:	89fb      	ldrh	r3, [r7, #14]
 8015f60:	3301      	adds	r3, #1
 8015f62:	81fb      	strh	r3, [r7, #14]
 8015f64:	89fb      	ldrh	r3, [r7, #14]
 8015f66:	2b7f      	cmp	r3, #127	; 0x7f
 8015f68:	d9f2      	bls.n	8015f50 <ff_convert+0x3c>
 8015f6a:	e000      	b.n	8015f6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015f6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8015f6e:	89fb      	ldrh	r3, [r7, #14]
 8015f70:	3380      	adds	r3, #128	; 0x80
 8015f72:	b29b      	uxth	r3, r3
 8015f74:	b2db      	uxtb	r3, r3
 8015f76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015f78:	89fb      	ldrh	r3, [r7, #14]
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3714      	adds	r7, #20
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f84:	4770      	bx	lr
 8015f86:	bf00      	nop
 8015f88:	08016ee8 	.word	0x08016ee8

08015f8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015f8c:	b480      	push	{r7}
 8015f8e:	b087      	sub	sp, #28
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	4603      	mov	r3, r0
 8015f94:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015f96:	88fb      	ldrh	r3, [r7, #6]
 8015f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f9c:	d201      	bcs.n	8015fa2 <ff_wtoupper+0x16>
 8015f9e:	4b3e      	ldr	r3, [pc, #248]	; (8016098 <ff_wtoupper+0x10c>)
 8015fa0:	e000      	b.n	8015fa4 <ff_wtoupper+0x18>
 8015fa2:	4b3e      	ldr	r3, [pc, #248]	; (801609c <ff_wtoupper+0x110>)
 8015fa4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8015fa6:	697b      	ldr	r3, [r7, #20]
 8015fa8:	1c9a      	adds	r2, r3, #2
 8015faa:	617a      	str	r2, [r7, #20]
 8015fac:	881b      	ldrh	r3, [r3, #0]
 8015fae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8015fb0:	8a7b      	ldrh	r3, [r7, #18]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d068      	beq.n	8016088 <ff_wtoupper+0xfc>
 8015fb6:	88fa      	ldrh	r2, [r7, #6]
 8015fb8:	8a7b      	ldrh	r3, [r7, #18]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d364      	bcc.n	8016088 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8015fbe:	697b      	ldr	r3, [r7, #20]
 8015fc0:	1c9a      	adds	r2, r3, #2
 8015fc2:	617a      	str	r2, [r7, #20]
 8015fc4:	881b      	ldrh	r3, [r3, #0]
 8015fc6:	823b      	strh	r3, [r7, #16]
 8015fc8:	8a3b      	ldrh	r3, [r7, #16]
 8015fca:	0a1b      	lsrs	r3, r3, #8
 8015fcc:	81fb      	strh	r3, [r7, #14]
 8015fce:	8a3b      	ldrh	r3, [r7, #16]
 8015fd0:	b2db      	uxtb	r3, r3
 8015fd2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015fd4:	88fa      	ldrh	r2, [r7, #6]
 8015fd6:	8a79      	ldrh	r1, [r7, #18]
 8015fd8:	8a3b      	ldrh	r3, [r7, #16]
 8015fda:	440b      	add	r3, r1
 8015fdc:	429a      	cmp	r2, r3
 8015fde:	da49      	bge.n	8016074 <ff_wtoupper+0xe8>
			switch (cmd) {
 8015fe0:	89fb      	ldrh	r3, [r7, #14]
 8015fe2:	2b08      	cmp	r3, #8
 8015fe4:	d84f      	bhi.n	8016086 <ff_wtoupper+0xfa>
 8015fe6:	a201      	add	r2, pc, #4	; (adr r2, 8015fec <ff_wtoupper+0x60>)
 8015fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fec:	08016011 	.word	0x08016011
 8015ff0:	08016023 	.word	0x08016023
 8015ff4:	08016039 	.word	0x08016039
 8015ff8:	08016041 	.word	0x08016041
 8015ffc:	08016049 	.word	0x08016049
 8016000:	08016051 	.word	0x08016051
 8016004:	08016059 	.word	0x08016059
 8016008:	08016061 	.word	0x08016061
 801600c:	08016069 	.word	0x08016069
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8016010:	88fa      	ldrh	r2, [r7, #6]
 8016012:	8a7b      	ldrh	r3, [r7, #18]
 8016014:	1ad3      	subs	r3, r2, r3
 8016016:	005b      	lsls	r3, r3, #1
 8016018:	697a      	ldr	r2, [r7, #20]
 801601a:	4413      	add	r3, r2
 801601c:	881b      	ldrh	r3, [r3, #0]
 801601e:	80fb      	strh	r3, [r7, #6]
 8016020:	e027      	b.n	8016072 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8016022:	88fa      	ldrh	r2, [r7, #6]
 8016024:	8a7b      	ldrh	r3, [r7, #18]
 8016026:	1ad3      	subs	r3, r2, r3
 8016028:	b29b      	uxth	r3, r3
 801602a:	f003 0301 	and.w	r3, r3, #1
 801602e:	b29b      	uxth	r3, r3
 8016030:	88fa      	ldrh	r2, [r7, #6]
 8016032:	1ad3      	subs	r3, r2, r3
 8016034:	80fb      	strh	r3, [r7, #6]
 8016036:	e01c      	b.n	8016072 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016038:	88fb      	ldrh	r3, [r7, #6]
 801603a:	3b10      	subs	r3, #16
 801603c:	80fb      	strh	r3, [r7, #6]
 801603e:	e018      	b.n	8016072 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016040:	88fb      	ldrh	r3, [r7, #6]
 8016042:	3b20      	subs	r3, #32
 8016044:	80fb      	strh	r3, [r7, #6]
 8016046:	e014      	b.n	8016072 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8016048:	88fb      	ldrh	r3, [r7, #6]
 801604a:	3b30      	subs	r3, #48	; 0x30
 801604c:	80fb      	strh	r3, [r7, #6]
 801604e:	e010      	b.n	8016072 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016050:	88fb      	ldrh	r3, [r7, #6]
 8016052:	3b1a      	subs	r3, #26
 8016054:	80fb      	strh	r3, [r7, #6]
 8016056:	e00c      	b.n	8016072 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8016058:	88fb      	ldrh	r3, [r7, #6]
 801605a:	3308      	adds	r3, #8
 801605c:	80fb      	strh	r3, [r7, #6]
 801605e:	e008      	b.n	8016072 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016060:	88fb      	ldrh	r3, [r7, #6]
 8016062:	3b50      	subs	r3, #80	; 0x50
 8016064:	80fb      	strh	r3, [r7, #6]
 8016066:	e004      	b.n	8016072 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8016068:	88fb      	ldrh	r3, [r7, #6]
 801606a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801606e:	80fb      	strh	r3, [r7, #6]
 8016070:	bf00      	nop
			}
			break;
 8016072:	e008      	b.n	8016086 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8016074:	89fb      	ldrh	r3, [r7, #14]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d195      	bne.n	8015fa6 <ff_wtoupper+0x1a>
 801607a:	8a3b      	ldrh	r3, [r7, #16]
 801607c:	005b      	lsls	r3, r3, #1
 801607e:	697a      	ldr	r2, [r7, #20]
 8016080:	4413      	add	r3, r2
 8016082:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8016084:	e78f      	b.n	8015fa6 <ff_wtoupper+0x1a>
			break;
 8016086:	bf00      	nop
	}

	return chr;
 8016088:	88fb      	ldrh	r3, [r7, #6]
}
 801608a:	4618      	mov	r0, r3
 801608c:	371c      	adds	r7, #28
 801608e:	46bd      	mov	sp, r7
 8016090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016094:	4770      	bx	lr
 8016096:	bf00      	nop
 8016098:	08016fe8 	.word	0x08016fe8
 801609c:	080171dc 	.word	0x080171dc

080160a0 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f000 fd41 	bl	8016b30 <malloc>
 80160ae:	4603      	mov	r3, r0
}
 80160b0:	4618      	mov	r0, r3
 80160b2:	3708      	adds	r7, #8
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}

080160b8 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b082      	sub	sp, #8
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80160c0:	6878      	ldr	r0, [r7, #4]
 80160c2:	f000 fd3d 	bl	8016b40 <free>
}
 80160c6:	bf00      	nop
 80160c8:	3708      	adds	r7, #8
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}
	...

080160d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80160d4:	2200      	movs	r2, #0
 80160d6:	4913      	ldr	r1, [pc, #76]	; (8016124 <MX_USB_DEVICE_Init+0x54>)
 80160d8:	4813      	ldr	r0, [pc, #76]	; (8016128 <MX_USB_DEVICE_Init+0x58>)
 80160da:	f7f9 fcc0 	bl	800fa5e <USBD_Init>
 80160de:	4603      	mov	r3, r0
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d001      	beq.n	80160e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80160e4:	f7ea ffac 	bl	8001040 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80160e8:	4910      	ldr	r1, [pc, #64]	; (801612c <MX_USB_DEVICE_Init+0x5c>)
 80160ea:	480f      	ldr	r0, [pc, #60]	; (8016128 <MX_USB_DEVICE_Init+0x58>)
 80160ec:	f7f9 fce2 	bl	800fab4 <USBD_RegisterClass>
 80160f0:	4603      	mov	r3, r0
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d001      	beq.n	80160fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80160f6:	f7ea ffa3 	bl	8001040 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80160fa:	490d      	ldr	r1, [pc, #52]	; (8016130 <MX_USB_DEVICE_Init+0x60>)
 80160fc:	480a      	ldr	r0, [pc, #40]	; (8016128 <MX_USB_DEVICE_Init+0x58>)
 80160fe:	f7f8 fc89 	bl	800ea14 <USBD_MSC_RegisterStorage>
 8016102:	4603      	mov	r3, r0
 8016104:	2b00      	cmp	r3, #0
 8016106:	d001      	beq.n	801610c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016108:	f7ea ff9a 	bl	8001040 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801610c:	4806      	ldr	r0, [pc, #24]	; (8016128 <MX_USB_DEVICE_Init+0x58>)
 801610e:	f7f9 fceb 	bl	800fae8 <USBD_Start>
 8016112:	4603      	mov	r3, r0
 8016114:	2b00      	cmp	r3, #0
 8016116:	d001      	beq.n	801611c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016118:	f7ea ff92 	bl	8001040 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801611c:	f7ee fbf8 	bl	8004910 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016120:	bf00      	nop
 8016122:	bd80      	pop	{r7, pc}
 8016124:	240000c0 	.word	0x240000c0
 8016128:	240077fc 	.word	0x240077fc
 801612c:	2400001c 	.word	0x2400001c
 8016130:	24000110 	.word	0x24000110

08016134 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016134:	b480      	push	{r7}
 8016136:	b083      	sub	sp, #12
 8016138:	af00      	add	r7, sp, #0
 801613a:	4603      	mov	r3, r0
 801613c:	6039      	str	r1, [r7, #0]
 801613e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	2212      	movs	r2, #18
 8016144:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016146:	4b03      	ldr	r3, [pc, #12]	; (8016154 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016148:	4618      	mov	r0, r3
 801614a:	370c      	adds	r7, #12
 801614c:	46bd      	mov	sp, r7
 801614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016152:	4770      	bx	lr
 8016154:	240000dc 	.word	0x240000dc

08016158 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016158:	b480      	push	{r7}
 801615a:	b083      	sub	sp, #12
 801615c:	af00      	add	r7, sp, #0
 801615e:	4603      	mov	r3, r0
 8016160:	6039      	str	r1, [r7, #0]
 8016162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	2204      	movs	r2, #4
 8016168:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801616a:	4b03      	ldr	r3, [pc, #12]	; (8016178 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801616c:	4618      	mov	r0, r3
 801616e:	370c      	adds	r7, #12
 8016170:	46bd      	mov	sp, r7
 8016172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016176:	4770      	bx	lr
 8016178:	240000f0 	.word	0x240000f0

0801617c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b082      	sub	sp, #8
 8016180:	af00      	add	r7, sp, #0
 8016182:	4603      	mov	r3, r0
 8016184:	6039      	str	r1, [r7, #0]
 8016186:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016188:	79fb      	ldrb	r3, [r7, #7]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d105      	bne.n	801619a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801618e:	683a      	ldr	r2, [r7, #0]
 8016190:	4907      	ldr	r1, [pc, #28]	; (80161b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8016192:	4808      	ldr	r0, [pc, #32]	; (80161b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8016194:	f7fa fc6a 	bl	8010a6c <USBD_GetString>
 8016198:	e004      	b.n	80161a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801619a:	683a      	ldr	r2, [r7, #0]
 801619c:	4904      	ldr	r1, [pc, #16]	; (80161b0 <USBD_FS_ProductStrDescriptor+0x34>)
 801619e:	4805      	ldr	r0, [pc, #20]	; (80161b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80161a0:	f7fa fc64 	bl	8010a6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80161a4:	4b02      	ldr	r3, [pc, #8]	; (80161b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3708      	adds	r7, #8
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	24007ac0 	.word	0x24007ac0
 80161b4:	08016dd8 	.word	0x08016dd8

080161b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b082      	sub	sp, #8
 80161bc:	af00      	add	r7, sp, #0
 80161be:	4603      	mov	r3, r0
 80161c0:	6039      	str	r1, [r7, #0]
 80161c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80161c4:	683a      	ldr	r2, [r7, #0]
 80161c6:	4904      	ldr	r1, [pc, #16]	; (80161d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80161c8:	4804      	ldr	r0, [pc, #16]	; (80161dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80161ca:	f7fa fc4f 	bl	8010a6c <USBD_GetString>
  return USBD_StrDesc;
 80161ce:	4b02      	ldr	r3, [pc, #8]	; (80161d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80161d0:	4618      	mov	r0, r3
 80161d2:	3708      	adds	r7, #8
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	24007ac0 	.word	0x24007ac0
 80161dc:	08016dec 	.word	0x08016dec

080161e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b082      	sub	sp, #8
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	4603      	mov	r3, r0
 80161e8:	6039      	str	r1, [r7, #0]
 80161ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80161ec:	683b      	ldr	r3, [r7, #0]
 80161ee:	221a      	movs	r2, #26
 80161f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80161f2:	f000 f843 	bl	801627c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80161f6:	4b02      	ldr	r3, [pc, #8]	; (8016200 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80161f8:	4618      	mov	r0, r3
 80161fa:	3708      	adds	r7, #8
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}
 8016200:	240000f4 	.word	0x240000f4

08016204 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b082      	sub	sp, #8
 8016208:	af00      	add	r7, sp, #0
 801620a:	4603      	mov	r3, r0
 801620c:	6039      	str	r1, [r7, #0]
 801620e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016210:	79fb      	ldrb	r3, [r7, #7]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d105      	bne.n	8016222 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016216:	683a      	ldr	r2, [r7, #0]
 8016218:	4907      	ldr	r1, [pc, #28]	; (8016238 <USBD_FS_ConfigStrDescriptor+0x34>)
 801621a:	4808      	ldr	r0, [pc, #32]	; (801623c <USBD_FS_ConfigStrDescriptor+0x38>)
 801621c:	f7fa fc26 	bl	8010a6c <USBD_GetString>
 8016220:	e004      	b.n	801622c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016222:	683a      	ldr	r2, [r7, #0]
 8016224:	4904      	ldr	r1, [pc, #16]	; (8016238 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016226:	4805      	ldr	r0, [pc, #20]	; (801623c <USBD_FS_ConfigStrDescriptor+0x38>)
 8016228:	f7fa fc20 	bl	8010a6c <USBD_GetString>
  }
  return USBD_StrDesc;
 801622c:	4b02      	ldr	r3, [pc, #8]	; (8016238 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801622e:	4618      	mov	r0, r3
 8016230:	3708      	adds	r7, #8
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}
 8016236:	bf00      	nop
 8016238:	24007ac0 	.word	0x24007ac0
 801623c:	08016e00 	.word	0x08016e00

08016240 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b082      	sub	sp, #8
 8016244:	af00      	add	r7, sp, #0
 8016246:	4603      	mov	r3, r0
 8016248:	6039      	str	r1, [r7, #0]
 801624a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801624c:	79fb      	ldrb	r3, [r7, #7]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d105      	bne.n	801625e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016252:	683a      	ldr	r2, [r7, #0]
 8016254:	4907      	ldr	r1, [pc, #28]	; (8016274 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016256:	4808      	ldr	r0, [pc, #32]	; (8016278 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016258:	f7fa fc08 	bl	8010a6c <USBD_GetString>
 801625c:	e004      	b.n	8016268 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801625e:	683a      	ldr	r2, [r7, #0]
 8016260:	4904      	ldr	r1, [pc, #16]	; (8016274 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016262:	4805      	ldr	r0, [pc, #20]	; (8016278 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016264:	f7fa fc02 	bl	8010a6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016268:	4b02      	ldr	r3, [pc, #8]	; (8016274 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801626a:	4618      	mov	r0, r3
 801626c:	3708      	adds	r7, #8
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	bf00      	nop
 8016274:	24007ac0 	.word	0x24007ac0
 8016278:	08016e0c 	.word	0x08016e0c

0801627c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b084      	sub	sp, #16
 8016280:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016282:	4b0f      	ldr	r3, [pc, #60]	; (80162c0 <Get_SerialNum+0x44>)
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016288:	4b0e      	ldr	r3, [pc, #56]	; (80162c4 <Get_SerialNum+0x48>)
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801628e:	4b0e      	ldr	r3, [pc, #56]	; (80162c8 <Get_SerialNum+0x4c>)
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016294:	68fa      	ldr	r2, [r7, #12]
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	4413      	add	r3, r2
 801629a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d009      	beq.n	80162b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80162a2:	2208      	movs	r2, #8
 80162a4:	4909      	ldr	r1, [pc, #36]	; (80162cc <Get_SerialNum+0x50>)
 80162a6:	68f8      	ldr	r0, [r7, #12]
 80162a8:	f000 f814 	bl	80162d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80162ac:	2204      	movs	r2, #4
 80162ae:	4908      	ldr	r1, [pc, #32]	; (80162d0 <Get_SerialNum+0x54>)
 80162b0:	68b8      	ldr	r0, [r7, #8]
 80162b2:	f000 f80f 	bl	80162d4 <IntToUnicode>
  }
}
 80162b6:	bf00      	nop
 80162b8:	3710      	adds	r7, #16
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}
 80162be:	bf00      	nop
 80162c0:	1ff1e800 	.word	0x1ff1e800
 80162c4:	1ff1e804 	.word	0x1ff1e804
 80162c8:	1ff1e808 	.word	0x1ff1e808
 80162cc:	240000f6 	.word	0x240000f6
 80162d0:	24000106 	.word	0x24000106

080162d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80162d4:	b480      	push	{r7}
 80162d6:	b087      	sub	sp, #28
 80162d8:	af00      	add	r7, sp, #0
 80162da:	60f8      	str	r0, [r7, #12]
 80162dc:	60b9      	str	r1, [r7, #8]
 80162de:	4613      	mov	r3, r2
 80162e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80162e2:	2300      	movs	r3, #0
 80162e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80162e6:	2300      	movs	r3, #0
 80162e8:	75fb      	strb	r3, [r7, #23]
 80162ea:	e027      	b.n	801633c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	0f1b      	lsrs	r3, r3, #28
 80162f0:	2b09      	cmp	r3, #9
 80162f2:	d80b      	bhi.n	801630c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	0f1b      	lsrs	r3, r3, #28
 80162f8:	b2da      	uxtb	r2, r3
 80162fa:	7dfb      	ldrb	r3, [r7, #23]
 80162fc:	005b      	lsls	r3, r3, #1
 80162fe:	4619      	mov	r1, r3
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	440b      	add	r3, r1
 8016304:	3230      	adds	r2, #48	; 0x30
 8016306:	b2d2      	uxtb	r2, r2
 8016308:	701a      	strb	r2, [r3, #0]
 801630a:	e00a      	b.n	8016322 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	0f1b      	lsrs	r3, r3, #28
 8016310:	b2da      	uxtb	r2, r3
 8016312:	7dfb      	ldrb	r3, [r7, #23]
 8016314:	005b      	lsls	r3, r3, #1
 8016316:	4619      	mov	r1, r3
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	440b      	add	r3, r1
 801631c:	3237      	adds	r2, #55	; 0x37
 801631e:	b2d2      	uxtb	r2, r2
 8016320:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	011b      	lsls	r3, r3, #4
 8016326:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016328:	7dfb      	ldrb	r3, [r7, #23]
 801632a:	005b      	lsls	r3, r3, #1
 801632c:	3301      	adds	r3, #1
 801632e:	68ba      	ldr	r2, [r7, #8]
 8016330:	4413      	add	r3, r2
 8016332:	2200      	movs	r2, #0
 8016334:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016336:	7dfb      	ldrb	r3, [r7, #23]
 8016338:	3301      	adds	r3, #1
 801633a:	75fb      	strb	r3, [r7, #23]
 801633c:	7dfa      	ldrb	r2, [r7, #23]
 801633e:	79fb      	ldrb	r3, [r7, #7]
 8016340:	429a      	cmp	r2, r3
 8016342:	d3d3      	bcc.n	80162ec <IntToUnicode+0x18>
  }
}
 8016344:	bf00      	nop
 8016346:	371c      	adds	r7, #28
 8016348:	46bd      	mov	sp, r7
 801634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634e:	4770      	bx	lr

08016350 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8016350:	b480      	push	{r7}
 8016352:	b083      	sub	sp, #12
 8016354:	af00      	add	r7, sp, #0
 8016356:	4603      	mov	r3, r0
 8016358:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801635a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801635c:	4618      	mov	r0, r3
 801635e:	370c      	adds	r7, #12
 8016360:	46bd      	mov	sp, r7
 8016362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016366:	4770      	bx	lr

08016368 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b084      	sub	sp, #16
 801636c:	af00      	add	r7, sp, #0
 801636e:	4603      	mov	r3, r0
 8016370:	60b9      	str	r1, [r7, #8]
 8016372:	607a      	str	r2, [r7, #4]
 8016374:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 8016376:	490b      	ldr	r1, [pc, #44]	; (80163a4 <STORAGE_GetCapacity_FS+0x3c>)
 8016378:	480b      	ldr	r0, [pc, #44]	; (80163a8 <STORAGE_GetCapacity_FS+0x40>)
 801637a:	f7f2 fac7 	bl	800890c <HAL_SD_GetCardInfo>
 801637e:	4603      	mov	r3, r0
 8016380:	2b00      	cmp	r3, #0
 8016382:	d10a      	bne.n	801639a <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 8016384:	4b07      	ldr	r3, [pc, #28]	; (80163a4 <STORAGE_GetCapacity_FS+0x3c>)
 8016386:	699a      	ldr	r2, [r3, #24]
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 801638c:	4b05      	ldr	r3, [pc, #20]	; (80163a4 <STORAGE_GetCapacity_FS+0x3c>)
 801638e:	69db      	ldr	r3, [r3, #28]
 8016390:	b29a      	uxth	r2, r3
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8016396:	2300      	movs	r3, #0
 8016398:	e7ff      	b.n	801639a <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 801639a:	4618      	mov	r0, r3
 801639c:	3710      	adds	r7, #16
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}
 80163a2:	bf00      	nop
 80163a4:	24002520 	.word	0x24002520
 80163a8:	240013f8 	.word	0x240013f8

080163ac <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80163ac:	b480      	push	{r7}
 80163ae:	b083      	sub	sp, #12
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	4603      	mov	r3, r0
 80163b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80163b6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	370c      	adds	r7, #12
 80163bc:	46bd      	mov	sp, r7
 80163be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c2:	4770      	bx	lr

080163c4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80163c4:	b480      	push	{r7}
 80163c6:	b083      	sub	sp, #12
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	4603      	mov	r3, r0
 80163cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80163ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	370c      	adds	r7, #12
 80163d4:	46bd      	mov	sp, r7
 80163d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163da:	4770      	bx	lr

080163dc <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b086      	sub	sp, #24
 80163e0:	af02      	add	r7, sp, #8
 80163e2:	60b9      	str	r1, [r7, #8]
 80163e4:	607a      	str	r2, [r7, #4]
 80163e6:	461a      	mov	r2, r3
 80163e8:	4603      	mov	r3, r0
 80163ea:	73fb      	strb	r3, [r7, #15]
 80163ec:	4613      	mov	r3, r2
 80163ee:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 80163f0:	89ba      	ldrh	r2, [r7, #12]
 80163f2:	230a      	movs	r3, #10
 80163f4:	9300      	str	r3, [sp, #0]
 80163f6:	4613      	mov	r3, r2
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	68b9      	ldr	r1, [r7, #8]
 80163fc:	4805      	ldr	r0, [pc, #20]	; (8016414 <STORAGE_Read_FS+0x38>)
 80163fe:	f7f1 fd07 	bl	8007e10 <HAL_SD_ReadBlocks>
 8016402:	4603      	mov	r3, r0
 8016404:	2b00      	cmp	r3, #0
 8016406:	d101      	bne.n	801640c <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 8016408:	2300      	movs	r3, #0
 801640a:	e7ff      	b.n	801640c <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 801640c:	4618      	mov	r0, r3
 801640e:	3710      	adds	r7, #16
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}
 8016414:	240013f8 	.word	0x240013f8

08016418 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b086      	sub	sp, #24
 801641c:	af02      	add	r7, sp, #8
 801641e:	60b9      	str	r1, [r7, #8]
 8016420:	607a      	str	r2, [r7, #4]
 8016422:	461a      	mov	r2, r3
 8016424:	4603      	mov	r3, r0
 8016426:	73fb      	strb	r3, [r7, #15]
 8016428:	4613      	mov	r3, r2
 801642a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 801642c:	89ba      	ldrh	r2, [r7, #12]
 801642e:	230a      	movs	r3, #10
 8016430:	9300      	str	r3, [sp, #0]
 8016432:	4613      	mov	r3, r2
 8016434:	687a      	ldr	r2, [r7, #4]
 8016436:	68b9      	ldr	r1, [r7, #8]
 8016438:	4805      	ldr	r0, [pc, #20]	; (8016450 <STORAGE_Write_FS+0x38>)
 801643a:	f7f1 fe73 	bl	8008124 <HAL_SD_WriteBlocks>
 801643e:	4603      	mov	r3, r0
 8016440:	2b00      	cmp	r3, #0
 8016442:	d101      	bne.n	8016448 <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 8016444:	2300      	movs	r3, #0
 8016446:	e7ff      	b.n	8016448 <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 8016448:	4618      	mov	r0, r3
 801644a:	3710      	adds	r7, #16
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}
 8016450:	240013f8 	.word	0x240013f8

08016454 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8016454:	b480      	push	{r7}
 8016456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8016458:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801645a:	4618      	mov	r0, r3
 801645c:	46bd      	mov	sp, r7
 801645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016462:	4770      	bx	lr

08016464 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b08a      	sub	sp, #40	; 0x28
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801646c:	f107 0314 	add.w	r3, r7, #20
 8016470:	2200      	movs	r2, #0
 8016472:	601a      	str	r2, [r3, #0]
 8016474:	605a      	str	r2, [r3, #4]
 8016476:	609a      	str	r2, [r3, #8]
 8016478:	60da      	str	r2, [r3, #12]
 801647a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	4a1e      	ldr	r2, [pc, #120]	; (80164fc <HAL_PCD_MspInit+0x98>)
 8016482:	4293      	cmp	r3, r2
 8016484:	d136      	bne.n	80164f4 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016486:	4b1e      	ldr	r3, [pc, #120]	; (8016500 <HAL_PCD_MspInit+0x9c>)
 8016488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801648c:	4a1c      	ldr	r2, [pc, #112]	; (8016500 <HAL_PCD_MspInit+0x9c>)
 801648e:	f043 0301 	orr.w	r3, r3, #1
 8016492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8016496:	4b1a      	ldr	r3, [pc, #104]	; (8016500 <HAL_PCD_MspInit+0x9c>)
 8016498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801649c:	f003 0301 	and.w	r3, r3, #1
 80164a0:	613b      	str	r3, [r7, #16]
 80164a2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80164a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80164a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80164aa:	2302      	movs	r3, #2
 80164ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80164ae:	2300      	movs	r3, #0
 80164b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80164b2:	2300      	movs	r3, #0
 80164b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80164b6:	230a      	movs	r3, #10
 80164b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80164ba:	f107 0314 	add.w	r3, r7, #20
 80164be:	4619      	mov	r1, r3
 80164c0:	4810      	ldr	r0, [pc, #64]	; (8016504 <HAL_PCD_MspInit+0xa0>)
 80164c2:	f7ec fd91 	bl	8002fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80164c6:	4b0e      	ldr	r3, [pc, #56]	; (8016500 <HAL_PCD_MspInit+0x9c>)
 80164c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80164cc:	4a0c      	ldr	r2, [pc, #48]	; (8016500 <HAL_PCD_MspInit+0x9c>)
 80164ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80164d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80164d6:	4b0a      	ldr	r3, [pc, #40]	; (8016500 <HAL_PCD_MspInit+0x9c>)
 80164d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80164dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80164e0:	60fb      	str	r3, [r7, #12]
 80164e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80164e4:	2200      	movs	r2, #0
 80164e6:	2100      	movs	r1, #0
 80164e8:	2065      	movs	r0, #101	; 0x65
 80164ea:	f7eb fac0 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80164ee:	2065      	movs	r0, #101	; 0x65
 80164f0:	f7eb fad7 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80164f4:	bf00      	nop
 80164f6:	3728      	adds	r7, #40	; 0x28
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	40080000 	.word	0x40080000
 8016500:	58024400 	.word	0x58024400
 8016504:	58020000 	.word	0x58020000

08016508 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801651c:	4619      	mov	r1, r3
 801651e:	4610      	mov	r0, r2
 8016520:	f7f9 fb41 	bl	800fba6 <USBD_LL_SetupStage>
}
 8016524:	bf00      	nop
 8016526:	3708      	adds	r7, #8
 8016528:	46bd      	mov	sp, r7
 801652a:	bd80      	pop	{r7, pc}

0801652c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	460b      	mov	r3, r1
 8016536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801653e:	78fa      	ldrb	r2, [r7, #3]
 8016540:	6879      	ldr	r1, [r7, #4]
 8016542:	4613      	mov	r3, r2
 8016544:	00db      	lsls	r3, r3, #3
 8016546:	1a9b      	subs	r3, r3, r2
 8016548:	009b      	lsls	r3, r3, #2
 801654a:	440b      	add	r3, r1
 801654c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	78fb      	ldrb	r3, [r7, #3]
 8016554:	4619      	mov	r1, r3
 8016556:	f7f9 fb71 	bl	800fc3c <USBD_LL_DataOutStage>
}
 801655a:	bf00      	nop
 801655c:	3708      	adds	r7, #8
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}

08016562 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016562:	b580      	push	{r7, lr}
 8016564:	b082      	sub	sp, #8
 8016566:	af00      	add	r7, sp, #0
 8016568:	6078      	str	r0, [r7, #4]
 801656a:	460b      	mov	r3, r1
 801656c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016574:	78fa      	ldrb	r2, [r7, #3]
 8016576:	6879      	ldr	r1, [r7, #4]
 8016578:	4613      	mov	r3, r2
 801657a:	00db      	lsls	r3, r3, #3
 801657c:	1a9b      	subs	r3, r3, r2
 801657e:	009b      	lsls	r3, r3, #2
 8016580:	440b      	add	r3, r1
 8016582:	3348      	adds	r3, #72	; 0x48
 8016584:	681a      	ldr	r2, [r3, #0]
 8016586:	78fb      	ldrb	r3, [r7, #3]
 8016588:	4619      	mov	r1, r3
 801658a:	f7f9 fbc8 	bl	800fd1e <USBD_LL_DataInStage>
}
 801658e:	bf00      	nop
 8016590:	3708      	adds	r7, #8
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}

08016596 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016596:	b580      	push	{r7, lr}
 8016598:	b082      	sub	sp, #8
 801659a:	af00      	add	r7, sp, #0
 801659c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7f9 fcdb 	bl	800ff60 <USBD_LL_SOF>
}
 80165aa:	bf00      	nop
 80165ac:	3708      	adds	r7, #8
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}

080165b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80165b2:	b580      	push	{r7, lr}
 80165b4:	b084      	sub	sp, #16
 80165b6:	af00      	add	r7, sp, #0
 80165b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80165ba:	2301      	movs	r3, #1
 80165bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	68db      	ldr	r3, [r3, #12]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d102      	bne.n	80165cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80165c6:	2300      	movs	r3, #0
 80165c8:	73fb      	strb	r3, [r7, #15]
 80165ca:	e008      	b.n	80165de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	68db      	ldr	r3, [r3, #12]
 80165d0:	2b02      	cmp	r3, #2
 80165d2:	d102      	bne.n	80165da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80165d4:	2301      	movs	r3, #1
 80165d6:	73fb      	strb	r3, [r7, #15]
 80165d8:	e001      	b.n	80165de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80165da:	f7ea fd31 	bl	8001040 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80165e4:	7bfa      	ldrb	r2, [r7, #15]
 80165e6:	4611      	mov	r1, r2
 80165e8:	4618      	mov	r0, r3
 80165ea:	f7f9 fc7e 	bl	800feea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80165f4:	4618      	mov	r0, r3
 80165f6:	f7f9 fc37 	bl	800fe68 <USBD_LL_Reset>
}
 80165fa:	bf00      	nop
 80165fc:	3710      	adds	r7, #16
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
	...

08016604 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b082      	sub	sp, #8
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016612:	4618      	mov	r0, r3
 8016614:	f7f9 fc79 	bl	800ff0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	687a      	ldr	r2, [r7, #4]
 8016624:	6812      	ldr	r2, [r2, #0]
 8016626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801662a:	f043 0301 	orr.w	r3, r3, #1
 801662e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	6a1b      	ldr	r3, [r3, #32]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d005      	beq.n	8016644 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016638:	4b04      	ldr	r3, [pc, #16]	; (801664c <HAL_PCD_SuspendCallback+0x48>)
 801663a:	691b      	ldr	r3, [r3, #16]
 801663c:	4a03      	ldr	r2, [pc, #12]	; (801664c <HAL_PCD_SuspendCallback+0x48>)
 801663e:	f043 0306 	orr.w	r3, r3, #6
 8016642:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016644:	bf00      	nop
 8016646:	3708      	adds	r7, #8
 8016648:	46bd      	mov	sp, r7
 801664a:	bd80      	pop	{r7, pc}
 801664c:	e000ed00 	.word	0xe000ed00

08016650 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b082      	sub	sp, #8
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801665e:	4618      	mov	r0, r3
 8016660:	f7f9 fc68 	bl	800ff34 <USBD_LL_Resume>
}
 8016664:	bf00      	nop
 8016666:	3708      	adds	r7, #8
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}

0801666c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b082      	sub	sp, #8
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
 8016674:	460b      	mov	r3, r1
 8016676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801667e:	78fa      	ldrb	r2, [r7, #3]
 8016680:	4611      	mov	r1, r2
 8016682:	4618      	mov	r0, r3
 8016684:	f7f9 fc93 	bl	800ffae <USBD_LL_IsoOUTIncomplete>
}
 8016688:	bf00      	nop
 801668a:	3708      	adds	r7, #8
 801668c:	46bd      	mov	sp, r7
 801668e:	bd80      	pop	{r7, pc}

08016690 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b082      	sub	sp, #8
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
 8016698:	460b      	mov	r3, r1
 801669a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80166a2:	78fa      	ldrb	r2, [r7, #3]
 80166a4:	4611      	mov	r1, r2
 80166a6:	4618      	mov	r0, r3
 80166a8:	f7f9 fc74 	bl	800ff94 <USBD_LL_IsoINIncomplete>
}
 80166ac:	bf00      	nop
 80166ae:	3708      	adds	r7, #8
 80166b0:	46bd      	mov	sp, r7
 80166b2:	bd80      	pop	{r7, pc}

080166b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80166c2:	4618      	mov	r0, r3
 80166c4:	f7f9 fc80 	bl	800ffc8 <USBD_LL_DevConnected>
}
 80166c8:	bf00      	nop
 80166ca:	3708      	adds	r7, #8
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}

080166d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80166de:	4618      	mov	r0, r3
 80166e0:	f7f9 fc7d 	bl	800ffde <USBD_LL_DevDisconnected>
}
 80166e4:	bf00      	nop
 80166e6:	3708      	adds	r7, #8
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}

080166ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b082      	sub	sp, #8
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d13e      	bne.n	801677a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80166fc:	4a21      	ldr	r2, [pc, #132]	; (8016784 <USBD_LL_Init+0x98>)
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	4a1f      	ldr	r2, [pc, #124]	; (8016784 <USBD_LL_Init+0x98>)
 8016708:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801670c:	4b1d      	ldr	r3, [pc, #116]	; (8016784 <USBD_LL_Init+0x98>)
 801670e:	4a1e      	ldr	r2, [pc, #120]	; (8016788 <USBD_LL_Init+0x9c>)
 8016710:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8016712:	4b1c      	ldr	r3, [pc, #112]	; (8016784 <USBD_LL_Init+0x98>)
 8016714:	2209      	movs	r2, #9
 8016716:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016718:	4b1a      	ldr	r3, [pc, #104]	; (8016784 <USBD_LL_Init+0x98>)
 801671a:	2202      	movs	r2, #2
 801671c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801671e:	4b19      	ldr	r3, [pc, #100]	; (8016784 <USBD_LL_Init+0x98>)
 8016720:	2200      	movs	r2, #0
 8016722:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016724:	4b17      	ldr	r3, [pc, #92]	; (8016784 <USBD_LL_Init+0x98>)
 8016726:	2202      	movs	r2, #2
 8016728:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801672a:	4b16      	ldr	r3, [pc, #88]	; (8016784 <USBD_LL_Init+0x98>)
 801672c:	2200      	movs	r2, #0
 801672e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016730:	4b14      	ldr	r3, [pc, #80]	; (8016784 <USBD_LL_Init+0x98>)
 8016732:	2200      	movs	r2, #0
 8016734:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016736:	4b13      	ldr	r3, [pc, #76]	; (8016784 <USBD_LL_Init+0x98>)
 8016738:	2200      	movs	r2, #0
 801673a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801673c:	4b11      	ldr	r3, [pc, #68]	; (8016784 <USBD_LL_Init+0x98>)
 801673e:	2200      	movs	r2, #0
 8016740:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016742:	4b10      	ldr	r3, [pc, #64]	; (8016784 <USBD_LL_Init+0x98>)
 8016744:	2200      	movs	r2, #0
 8016746:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016748:	4b0e      	ldr	r3, [pc, #56]	; (8016784 <USBD_LL_Init+0x98>)
 801674a:	2200      	movs	r2, #0
 801674c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801674e:	480d      	ldr	r0, [pc, #52]	; (8016784 <USBD_LL_Init+0x98>)
 8016750:	f7ec fe6b 	bl	800342a <HAL_PCD_Init>
 8016754:	4603      	mov	r3, r0
 8016756:	2b00      	cmp	r3, #0
 8016758:	d001      	beq.n	801675e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801675a:	f7ea fc71 	bl	8001040 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801675e:	2180      	movs	r1, #128	; 0x80
 8016760:	4808      	ldr	r0, [pc, #32]	; (8016784 <USBD_LL_Init+0x98>)
 8016762:	f7ee f85a 	bl	800481a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016766:	2240      	movs	r2, #64	; 0x40
 8016768:	2100      	movs	r1, #0
 801676a:	4806      	ldr	r0, [pc, #24]	; (8016784 <USBD_LL_Init+0x98>)
 801676c:	f7ee f80e 	bl	800478c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016770:	2280      	movs	r2, #128	; 0x80
 8016772:	2101      	movs	r1, #1
 8016774:	4803      	ldr	r0, [pc, #12]	; (8016784 <USBD_LL_Init+0x98>)
 8016776:	f7ee f809 	bl	800478c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801677a:	2300      	movs	r3, #0
}
 801677c:	4618      	mov	r0, r3
 801677e:	3708      	adds	r7, #8
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}
 8016784:	24007cc0 	.word	0x24007cc0
 8016788:	40080000 	.word	0x40080000

0801678c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b084      	sub	sp, #16
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016794:	2300      	movs	r3, #0
 8016796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016798:	2300      	movs	r3, #0
 801679a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80167a2:	4618      	mov	r0, r3
 80167a4:	f7ec ff65 	bl	8003672 <HAL_PCD_Start>
 80167a8:	4603      	mov	r3, r0
 80167aa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80167ac:	7bfb      	ldrb	r3, [r7, #15]
 80167ae:	4618      	mov	r0, r3
 80167b0:	f000 f968 	bl	8016a84 <USBD_Get_USB_Status>
 80167b4:	4603      	mov	r3, r0
 80167b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80167b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3710      	adds	r7, #16
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}

080167c2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b084      	sub	sp, #16
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167ca:	2300      	movs	r3, #0
 80167cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167ce:	2300      	movs	r3, #0
 80167d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80167d8:	4618      	mov	r0, r3
 80167da:	f7ec ff7d 	bl	80036d8 <HAL_PCD_Stop>
 80167de:	4603      	mov	r3, r0
 80167e0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80167e2:	7bfb      	ldrb	r3, [r7, #15]
 80167e4:	4618      	mov	r0, r3
 80167e6:	f000 f94d 	bl	8016a84 <USBD_Get_USB_Status>
 80167ea:	4603      	mov	r3, r0
 80167ec:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80167ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80167f0:	4618      	mov	r0, r3
 80167f2:	3710      	adds	r7, #16
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}

080167f8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b084      	sub	sp, #16
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
 8016800:	4608      	mov	r0, r1
 8016802:	4611      	mov	r1, r2
 8016804:	461a      	mov	r2, r3
 8016806:	4603      	mov	r3, r0
 8016808:	70fb      	strb	r3, [r7, #3]
 801680a:	460b      	mov	r3, r1
 801680c:	70bb      	strb	r3, [r7, #2]
 801680e:	4613      	mov	r3, r2
 8016810:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016812:	2300      	movs	r3, #0
 8016814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016816:	2300      	movs	r3, #0
 8016818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016820:	78bb      	ldrb	r3, [r7, #2]
 8016822:	883a      	ldrh	r2, [r7, #0]
 8016824:	78f9      	ldrb	r1, [r7, #3]
 8016826:	f7ed fb8b 	bl	8003f40 <HAL_PCD_EP_Open>
 801682a:	4603      	mov	r3, r0
 801682c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801682e:	7bfb      	ldrb	r3, [r7, #15]
 8016830:	4618      	mov	r0, r3
 8016832:	f000 f927 	bl	8016a84 <USBD_Get_USB_Status>
 8016836:	4603      	mov	r3, r0
 8016838:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801683a:	7bbb      	ldrb	r3, [r7, #14]
}
 801683c:	4618      	mov	r0, r3
 801683e:	3710      	adds	r7, #16
 8016840:	46bd      	mov	sp, r7
 8016842:	bd80      	pop	{r7, pc}

08016844 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b084      	sub	sp, #16
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
 801684c:	460b      	mov	r3, r1
 801684e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016850:	2300      	movs	r3, #0
 8016852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016854:	2300      	movs	r3, #0
 8016856:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801685e:	78fa      	ldrb	r2, [r7, #3]
 8016860:	4611      	mov	r1, r2
 8016862:	4618      	mov	r0, r3
 8016864:	f7ed fbd4 	bl	8004010 <HAL_PCD_EP_Close>
 8016868:	4603      	mov	r3, r0
 801686a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801686c:	7bfb      	ldrb	r3, [r7, #15]
 801686e:	4618      	mov	r0, r3
 8016870:	f000 f908 	bl	8016a84 <USBD_Get_USB_Status>
 8016874:	4603      	mov	r3, r0
 8016876:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016878:	7bbb      	ldrb	r3, [r7, #14]
}
 801687a:	4618      	mov	r0, r3
 801687c:	3710      	adds	r7, #16
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}

08016882 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016882:	b580      	push	{r7, lr}
 8016884:	b084      	sub	sp, #16
 8016886:	af00      	add	r7, sp, #0
 8016888:	6078      	str	r0, [r7, #4]
 801688a:	460b      	mov	r3, r1
 801688c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801688e:	2300      	movs	r3, #0
 8016890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016892:	2300      	movs	r3, #0
 8016894:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801689c:	78fa      	ldrb	r2, [r7, #3]
 801689e:	4611      	mov	r1, r2
 80168a0:	4618      	mov	r0, r3
 80168a2:	f7ed fd66 	bl	8004372 <HAL_PCD_EP_Flush>
 80168a6:	4603      	mov	r3, r0
 80168a8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80168aa:	7bfb      	ldrb	r3, [r7, #15]
 80168ac:	4618      	mov	r0, r3
 80168ae:	f000 f8e9 	bl	8016a84 <USBD_Get_USB_Status>
 80168b2:	4603      	mov	r3, r0
 80168b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80168b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	3710      	adds	r7, #16
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}

080168c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b084      	sub	sp, #16
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
 80168c8:	460b      	mov	r3, r1
 80168ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168cc:	2300      	movs	r3, #0
 80168ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168d0:	2300      	movs	r3, #0
 80168d2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80168da:	78fa      	ldrb	r2, [r7, #3]
 80168dc:	4611      	mov	r1, r2
 80168de:	4618      	mov	r0, r3
 80168e0:	f7ed fc8d 	bl	80041fe <HAL_PCD_EP_SetStall>
 80168e4:	4603      	mov	r3, r0
 80168e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168e8:	7bfb      	ldrb	r3, [r7, #15]
 80168ea:	4618      	mov	r0, r3
 80168ec:	f000 f8ca 	bl	8016a84 <USBD_Get_USB_Status>
 80168f0:	4603      	mov	r3, r0
 80168f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80168f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80168f6:	4618      	mov	r0, r3
 80168f8:	3710      	adds	r7, #16
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}

080168fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168fe:	b580      	push	{r7, lr}
 8016900:	b084      	sub	sp, #16
 8016902:	af00      	add	r7, sp, #0
 8016904:	6078      	str	r0, [r7, #4]
 8016906:	460b      	mov	r3, r1
 8016908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801690a:	2300      	movs	r3, #0
 801690c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801690e:	2300      	movs	r3, #0
 8016910:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016918:	78fa      	ldrb	r2, [r7, #3]
 801691a:	4611      	mov	r1, r2
 801691c:	4618      	mov	r0, r3
 801691e:	f7ed fcd2 	bl	80042c6 <HAL_PCD_EP_ClrStall>
 8016922:	4603      	mov	r3, r0
 8016924:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016926:	7bfb      	ldrb	r3, [r7, #15]
 8016928:	4618      	mov	r0, r3
 801692a:	f000 f8ab 	bl	8016a84 <USBD_Get_USB_Status>
 801692e:	4603      	mov	r3, r0
 8016930:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016932:	7bbb      	ldrb	r3, [r7, #14]
}
 8016934:	4618      	mov	r0, r3
 8016936:	3710      	adds	r7, #16
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}

0801693c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801693c:	b480      	push	{r7}
 801693e:	b085      	sub	sp, #20
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	460b      	mov	r3, r1
 8016946:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801694e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016954:	2b00      	cmp	r3, #0
 8016956:	da0b      	bge.n	8016970 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016958:	78fb      	ldrb	r3, [r7, #3]
 801695a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801695e:	68f9      	ldr	r1, [r7, #12]
 8016960:	4613      	mov	r3, r2
 8016962:	00db      	lsls	r3, r3, #3
 8016964:	1a9b      	subs	r3, r3, r2
 8016966:	009b      	lsls	r3, r3, #2
 8016968:	440b      	add	r3, r1
 801696a:	333e      	adds	r3, #62	; 0x3e
 801696c:	781b      	ldrb	r3, [r3, #0]
 801696e:	e00b      	b.n	8016988 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016970:	78fb      	ldrb	r3, [r7, #3]
 8016972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016976:	68f9      	ldr	r1, [r7, #12]
 8016978:	4613      	mov	r3, r2
 801697a:	00db      	lsls	r3, r3, #3
 801697c:	1a9b      	subs	r3, r3, r2
 801697e:	009b      	lsls	r3, r3, #2
 8016980:	440b      	add	r3, r1
 8016982:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016986:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016988:	4618      	mov	r0, r3
 801698a:	3714      	adds	r7, #20
 801698c:	46bd      	mov	sp, r7
 801698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016992:	4770      	bx	lr

08016994 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b084      	sub	sp, #16
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
 801699c:	460b      	mov	r3, r1
 801699e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169a0:	2300      	movs	r3, #0
 80169a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169a4:	2300      	movs	r3, #0
 80169a6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80169ae:	78fa      	ldrb	r2, [r7, #3]
 80169b0:	4611      	mov	r1, r2
 80169b2:	4618      	mov	r0, r3
 80169b4:	f7ed fa9f 	bl	8003ef6 <HAL_PCD_SetAddress>
 80169b8:	4603      	mov	r3, r0
 80169ba:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80169bc:	7bfb      	ldrb	r3, [r7, #15]
 80169be:	4618      	mov	r0, r3
 80169c0:	f000 f860 	bl	8016a84 <USBD_Get_USB_Status>
 80169c4:	4603      	mov	r3, r0
 80169c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80169c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3710      	adds	r7, #16
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80169d2:	b580      	push	{r7, lr}
 80169d4:	b086      	sub	sp, #24
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	60f8      	str	r0, [r7, #12]
 80169da:	607a      	str	r2, [r7, #4]
 80169dc:	461a      	mov	r2, r3
 80169de:	460b      	mov	r3, r1
 80169e0:	72fb      	strb	r3, [r7, #11]
 80169e2:	4613      	mov	r3, r2
 80169e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169e6:	2300      	movs	r3, #0
 80169e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169ea:	2300      	movs	r3, #0
 80169ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80169f4:	893b      	ldrh	r3, [r7, #8]
 80169f6:	7af9      	ldrb	r1, [r7, #11]
 80169f8:	687a      	ldr	r2, [r7, #4]
 80169fa:	f7ed fbb6 	bl	800416a <HAL_PCD_EP_Transmit>
 80169fe:	4603      	mov	r3, r0
 8016a00:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016a02:	7dfb      	ldrb	r3, [r7, #23]
 8016a04:	4618      	mov	r0, r3
 8016a06:	f000 f83d 	bl	8016a84 <USBD_Get_USB_Status>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016a0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	3718      	adds	r7, #24
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}

08016a18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b086      	sub	sp, #24
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	60f8      	str	r0, [r7, #12]
 8016a20:	607a      	str	r2, [r7, #4]
 8016a22:	461a      	mov	r2, r3
 8016a24:	460b      	mov	r3, r1
 8016a26:	72fb      	strb	r3, [r7, #11]
 8016a28:	4613      	mov	r3, r2
 8016a2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a30:	2300      	movs	r3, #0
 8016a32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016a3a:	893b      	ldrh	r3, [r7, #8]
 8016a3c:	7af9      	ldrb	r1, [r7, #11]
 8016a3e:	687a      	ldr	r2, [r7, #4]
 8016a40:	f7ed fb30 	bl	80040a4 <HAL_PCD_EP_Receive>
 8016a44:	4603      	mov	r3, r0
 8016a46:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016a48:	7dfb      	ldrb	r3, [r7, #23]
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f000 f81a 	bl	8016a84 <USBD_Get_USB_Status>
 8016a50:	4603      	mov	r3, r0
 8016a52:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016a54:	7dbb      	ldrb	r3, [r7, #22]
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	3718      	adds	r7, #24
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}

08016a5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a5e:	b580      	push	{r7, lr}
 8016a60:	b082      	sub	sp, #8
 8016a62:	af00      	add	r7, sp, #0
 8016a64:	6078      	str	r0, [r7, #4]
 8016a66:	460b      	mov	r3, r1
 8016a68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016a70:	78fa      	ldrb	r2, [r7, #3]
 8016a72:	4611      	mov	r1, r2
 8016a74:	4618      	mov	r0, r3
 8016a76:	f7ed fb60 	bl	800413a <HAL_PCD_EP_GetRxCount>
 8016a7a:	4603      	mov	r3, r0
}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	3708      	adds	r7, #8
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}

08016a84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016a84:	b480      	push	{r7}
 8016a86:	b085      	sub	sp, #20
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a8e:	2300      	movs	r3, #0
 8016a90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016a92:	79fb      	ldrb	r3, [r7, #7]
 8016a94:	2b03      	cmp	r3, #3
 8016a96:	d817      	bhi.n	8016ac8 <USBD_Get_USB_Status+0x44>
 8016a98:	a201      	add	r2, pc, #4	; (adr r2, 8016aa0 <USBD_Get_USB_Status+0x1c>)
 8016a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a9e:	bf00      	nop
 8016aa0:	08016ab1 	.word	0x08016ab1
 8016aa4:	08016ab7 	.word	0x08016ab7
 8016aa8:	08016abd 	.word	0x08016abd
 8016aac:	08016ac3 	.word	0x08016ac3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8016ab4:	e00b      	b.n	8016ace <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016ab6:	2302      	movs	r3, #2
 8016ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8016aba:	e008      	b.n	8016ace <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016abc:	2301      	movs	r3, #1
 8016abe:	73fb      	strb	r3, [r7, #15]
    break;
 8016ac0:	e005      	b.n	8016ace <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016ac2:	2302      	movs	r3, #2
 8016ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8016ac6:	e002      	b.n	8016ace <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ac8:	2302      	movs	r3, #2
 8016aca:	73fb      	strb	r3, [r7, #15]
    break;
 8016acc:	bf00      	nop
  }
  return usb_status;
 8016ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	3714      	adds	r7, #20
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ada:	4770      	bx	lr

08016adc <__errno>:
 8016adc:	4b01      	ldr	r3, [pc, #4]	; (8016ae4 <__errno+0x8>)
 8016ade:	6818      	ldr	r0, [r3, #0]
 8016ae0:	4770      	bx	lr
 8016ae2:	bf00      	nop
 8016ae4:	24000130 	.word	0x24000130

08016ae8 <__libc_init_array>:
 8016ae8:	b570      	push	{r4, r5, r6, lr}
 8016aea:	4e0d      	ldr	r6, [pc, #52]	; (8016b20 <__libc_init_array+0x38>)
 8016aec:	4c0d      	ldr	r4, [pc, #52]	; (8016b24 <__libc_init_array+0x3c>)
 8016aee:	1ba4      	subs	r4, r4, r6
 8016af0:	10a4      	asrs	r4, r4, #2
 8016af2:	2500      	movs	r5, #0
 8016af4:	42a5      	cmp	r5, r4
 8016af6:	d109      	bne.n	8016b0c <__libc_init_array+0x24>
 8016af8:	4e0b      	ldr	r6, [pc, #44]	; (8016b28 <__libc_init_array+0x40>)
 8016afa:	4c0c      	ldr	r4, [pc, #48]	; (8016b2c <__libc_init_array+0x44>)
 8016afc:	f000 f8f6 	bl	8016cec <_init>
 8016b00:	1ba4      	subs	r4, r4, r6
 8016b02:	10a4      	asrs	r4, r4, #2
 8016b04:	2500      	movs	r5, #0
 8016b06:	42a5      	cmp	r5, r4
 8016b08:	d105      	bne.n	8016b16 <__libc_init_array+0x2e>
 8016b0a:	bd70      	pop	{r4, r5, r6, pc}
 8016b0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016b10:	4798      	blx	r3
 8016b12:	3501      	adds	r5, #1
 8016b14:	e7ee      	b.n	8016af4 <__libc_init_array+0xc>
 8016b16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016b1a:	4798      	blx	r3
 8016b1c:	3501      	adds	r5, #1
 8016b1e:	e7f2      	b.n	8016b06 <__libc_init_array+0x1e>
 8016b20:	080172c4 	.word	0x080172c4
 8016b24:	080172c4 	.word	0x080172c4
 8016b28:	080172c4 	.word	0x080172c4
 8016b2c:	080172c8 	.word	0x080172c8

08016b30 <malloc>:
 8016b30:	4b02      	ldr	r3, [pc, #8]	; (8016b3c <malloc+0xc>)
 8016b32:	4601      	mov	r1, r0
 8016b34:	6818      	ldr	r0, [r3, #0]
 8016b36:	f000 b86d 	b.w	8016c14 <_malloc_r>
 8016b3a:	bf00      	nop
 8016b3c:	24000130 	.word	0x24000130

08016b40 <free>:
 8016b40:	4b02      	ldr	r3, [pc, #8]	; (8016b4c <free+0xc>)
 8016b42:	4601      	mov	r1, r0
 8016b44:	6818      	ldr	r0, [r3, #0]
 8016b46:	f000 b817 	b.w	8016b78 <_free_r>
 8016b4a:	bf00      	nop
 8016b4c:	24000130 	.word	0x24000130

08016b50 <memcpy>:
 8016b50:	b510      	push	{r4, lr}
 8016b52:	1e43      	subs	r3, r0, #1
 8016b54:	440a      	add	r2, r1
 8016b56:	4291      	cmp	r1, r2
 8016b58:	d100      	bne.n	8016b5c <memcpy+0xc>
 8016b5a:	bd10      	pop	{r4, pc}
 8016b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b64:	e7f7      	b.n	8016b56 <memcpy+0x6>

08016b66 <memset>:
 8016b66:	4402      	add	r2, r0
 8016b68:	4603      	mov	r3, r0
 8016b6a:	4293      	cmp	r3, r2
 8016b6c:	d100      	bne.n	8016b70 <memset+0xa>
 8016b6e:	4770      	bx	lr
 8016b70:	f803 1b01 	strb.w	r1, [r3], #1
 8016b74:	e7f9      	b.n	8016b6a <memset+0x4>
	...

08016b78 <_free_r>:
 8016b78:	b538      	push	{r3, r4, r5, lr}
 8016b7a:	4605      	mov	r5, r0
 8016b7c:	2900      	cmp	r1, #0
 8016b7e:	d045      	beq.n	8016c0c <_free_r+0x94>
 8016b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b84:	1f0c      	subs	r4, r1, #4
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	bfb8      	it	lt
 8016b8a:	18e4      	addlt	r4, r4, r3
 8016b8c:	f000 f8ac 	bl	8016ce8 <__malloc_lock>
 8016b90:	4a1f      	ldr	r2, [pc, #124]	; (8016c10 <_free_r+0x98>)
 8016b92:	6813      	ldr	r3, [r2, #0]
 8016b94:	4610      	mov	r0, r2
 8016b96:	b933      	cbnz	r3, 8016ba6 <_free_r+0x2e>
 8016b98:	6063      	str	r3, [r4, #4]
 8016b9a:	6014      	str	r4, [r2, #0]
 8016b9c:	4628      	mov	r0, r5
 8016b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ba2:	f000 b8a2 	b.w	8016cea <__malloc_unlock>
 8016ba6:	42a3      	cmp	r3, r4
 8016ba8:	d90c      	bls.n	8016bc4 <_free_r+0x4c>
 8016baa:	6821      	ldr	r1, [r4, #0]
 8016bac:	1862      	adds	r2, r4, r1
 8016bae:	4293      	cmp	r3, r2
 8016bb0:	bf04      	itt	eq
 8016bb2:	681a      	ldreq	r2, [r3, #0]
 8016bb4:	685b      	ldreq	r3, [r3, #4]
 8016bb6:	6063      	str	r3, [r4, #4]
 8016bb8:	bf04      	itt	eq
 8016bba:	1852      	addeq	r2, r2, r1
 8016bbc:	6022      	streq	r2, [r4, #0]
 8016bbe:	6004      	str	r4, [r0, #0]
 8016bc0:	e7ec      	b.n	8016b9c <_free_r+0x24>
 8016bc2:	4613      	mov	r3, r2
 8016bc4:	685a      	ldr	r2, [r3, #4]
 8016bc6:	b10a      	cbz	r2, 8016bcc <_free_r+0x54>
 8016bc8:	42a2      	cmp	r2, r4
 8016bca:	d9fa      	bls.n	8016bc2 <_free_r+0x4a>
 8016bcc:	6819      	ldr	r1, [r3, #0]
 8016bce:	1858      	adds	r0, r3, r1
 8016bd0:	42a0      	cmp	r0, r4
 8016bd2:	d10b      	bne.n	8016bec <_free_r+0x74>
 8016bd4:	6820      	ldr	r0, [r4, #0]
 8016bd6:	4401      	add	r1, r0
 8016bd8:	1858      	adds	r0, r3, r1
 8016bda:	4282      	cmp	r2, r0
 8016bdc:	6019      	str	r1, [r3, #0]
 8016bde:	d1dd      	bne.n	8016b9c <_free_r+0x24>
 8016be0:	6810      	ldr	r0, [r2, #0]
 8016be2:	6852      	ldr	r2, [r2, #4]
 8016be4:	605a      	str	r2, [r3, #4]
 8016be6:	4401      	add	r1, r0
 8016be8:	6019      	str	r1, [r3, #0]
 8016bea:	e7d7      	b.n	8016b9c <_free_r+0x24>
 8016bec:	d902      	bls.n	8016bf4 <_free_r+0x7c>
 8016bee:	230c      	movs	r3, #12
 8016bf0:	602b      	str	r3, [r5, #0]
 8016bf2:	e7d3      	b.n	8016b9c <_free_r+0x24>
 8016bf4:	6820      	ldr	r0, [r4, #0]
 8016bf6:	1821      	adds	r1, r4, r0
 8016bf8:	428a      	cmp	r2, r1
 8016bfa:	bf04      	itt	eq
 8016bfc:	6811      	ldreq	r1, [r2, #0]
 8016bfe:	6852      	ldreq	r2, [r2, #4]
 8016c00:	6062      	str	r2, [r4, #4]
 8016c02:	bf04      	itt	eq
 8016c04:	1809      	addeq	r1, r1, r0
 8016c06:	6021      	streq	r1, [r4, #0]
 8016c08:	605c      	str	r4, [r3, #4]
 8016c0a:	e7c7      	b.n	8016b9c <_free_r+0x24>
 8016c0c:	bd38      	pop	{r3, r4, r5, pc}
 8016c0e:	bf00      	nop
 8016c10:	240002c0 	.word	0x240002c0

08016c14 <_malloc_r>:
 8016c14:	b570      	push	{r4, r5, r6, lr}
 8016c16:	1ccd      	adds	r5, r1, #3
 8016c18:	f025 0503 	bic.w	r5, r5, #3
 8016c1c:	3508      	adds	r5, #8
 8016c1e:	2d0c      	cmp	r5, #12
 8016c20:	bf38      	it	cc
 8016c22:	250c      	movcc	r5, #12
 8016c24:	2d00      	cmp	r5, #0
 8016c26:	4606      	mov	r6, r0
 8016c28:	db01      	blt.n	8016c2e <_malloc_r+0x1a>
 8016c2a:	42a9      	cmp	r1, r5
 8016c2c:	d903      	bls.n	8016c36 <_malloc_r+0x22>
 8016c2e:	230c      	movs	r3, #12
 8016c30:	6033      	str	r3, [r6, #0]
 8016c32:	2000      	movs	r0, #0
 8016c34:	bd70      	pop	{r4, r5, r6, pc}
 8016c36:	f000 f857 	bl	8016ce8 <__malloc_lock>
 8016c3a:	4a21      	ldr	r2, [pc, #132]	; (8016cc0 <_malloc_r+0xac>)
 8016c3c:	6814      	ldr	r4, [r2, #0]
 8016c3e:	4621      	mov	r1, r4
 8016c40:	b991      	cbnz	r1, 8016c68 <_malloc_r+0x54>
 8016c42:	4c20      	ldr	r4, [pc, #128]	; (8016cc4 <_malloc_r+0xb0>)
 8016c44:	6823      	ldr	r3, [r4, #0]
 8016c46:	b91b      	cbnz	r3, 8016c50 <_malloc_r+0x3c>
 8016c48:	4630      	mov	r0, r6
 8016c4a:	f000 f83d 	bl	8016cc8 <_sbrk_r>
 8016c4e:	6020      	str	r0, [r4, #0]
 8016c50:	4629      	mov	r1, r5
 8016c52:	4630      	mov	r0, r6
 8016c54:	f000 f838 	bl	8016cc8 <_sbrk_r>
 8016c58:	1c43      	adds	r3, r0, #1
 8016c5a:	d124      	bne.n	8016ca6 <_malloc_r+0x92>
 8016c5c:	230c      	movs	r3, #12
 8016c5e:	6033      	str	r3, [r6, #0]
 8016c60:	4630      	mov	r0, r6
 8016c62:	f000 f842 	bl	8016cea <__malloc_unlock>
 8016c66:	e7e4      	b.n	8016c32 <_malloc_r+0x1e>
 8016c68:	680b      	ldr	r3, [r1, #0]
 8016c6a:	1b5b      	subs	r3, r3, r5
 8016c6c:	d418      	bmi.n	8016ca0 <_malloc_r+0x8c>
 8016c6e:	2b0b      	cmp	r3, #11
 8016c70:	d90f      	bls.n	8016c92 <_malloc_r+0x7e>
 8016c72:	600b      	str	r3, [r1, #0]
 8016c74:	50cd      	str	r5, [r1, r3]
 8016c76:	18cc      	adds	r4, r1, r3
 8016c78:	4630      	mov	r0, r6
 8016c7a:	f000 f836 	bl	8016cea <__malloc_unlock>
 8016c7e:	f104 000b 	add.w	r0, r4, #11
 8016c82:	1d23      	adds	r3, r4, #4
 8016c84:	f020 0007 	bic.w	r0, r0, #7
 8016c88:	1ac3      	subs	r3, r0, r3
 8016c8a:	d0d3      	beq.n	8016c34 <_malloc_r+0x20>
 8016c8c:	425a      	negs	r2, r3
 8016c8e:	50e2      	str	r2, [r4, r3]
 8016c90:	e7d0      	b.n	8016c34 <_malloc_r+0x20>
 8016c92:	428c      	cmp	r4, r1
 8016c94:	684b      	ldr	r3, [r1, #4]
 8016c96:	bf16      	itet	ne
 8016c98:	6063      	strne	r3, [r4, #4]
 8016c9a:	6013      	streq	r3, [r2, #0]
 8016c9c:	460c      	movne	r4, r1
 8016c9e:	e7eb      	b.n	8016c78 <_malloc_r+0x64>
 8016ca0:	460c      	mov	r4, r1
 8016ca2:	6849      	ldr	r1, [r1, #4]
 8016ca4:	e7cc      	b.n	8016c40 <_malloc_r+0x2c>
 8016ca6:	1cc4      	adds	r4, r0, #3
 8016ca8:	f024 0403 	bic.w	r4, r4, #3
 8016cac:	42a0      	cmp	r0, r4
 8016cae:	d005      	beq.n	8016cbc <_malloc_r+0xa8>
 8016cb0:	1a21      	subs	r1, r4, r0
 8016cb2:	4630      	mov	r0, r6
 8016cb4:	f000 f808 	bl	8016cc8 <_sbrk_r>
 8016cb8:	3001      	adds	r0, #1
 8016cba:	d0cf      	beq.n	8016c5c <_malloc_r+0x48>
 8016cbc:	6025      	str	r5, [r4, #0]
 8016cbe:	e7db      	b.n	8016c78 <_malloc_r+0x64>
 8016cc0:	240002c0 	.word	0x240002c0
 8016cc4:	240002c4 	.word	0x240002c4

08016cc8 <_sbrk_r>:
 8016cc8:	b538      	push	{r3, r4, r5, lr}
 8016cca:	4c06      	ldr	r4, [pc, #24]	; (8016ce4 <_sbrk_r+0x1c>)
 8016ccc:	2300      	movs	r3, #0
 8016cce:	4605      	mov	r5, r0
 8016cd0:	4608      	mov	r0, r1
 8016cd2:	6023      	str	r3, [r4, #0]
 8016cd4:	f7ea fc64 	bl	80015a0 <_sbrk>
 8016cd8:	1c43      	adds	r3, r0, #1
 8016cda:	d102      	bne.n	8016ce2 <_sbrk_r+0x1a>
 8016cdc:	6823      	ldr	r3, [r4, #0]
 8016cde:	b103      	cbz	r3, 8016ce2 <_sbrk_r+0x1a>
 8016ce0:	602b      	str	r3, [r5, #0]
 8016ce2:	bd38      	pop	{r3, r4, r5, pc}
 8016ce4:	240080c8 	.word	0x240080c8

08016ce8 <__malloc_lock>:
 8016ce8:	4770      	bx	lr

08016cea <__malloc_unlock>:
 8016cea:	4770      	bx	lr

08016cec <_init>:
 8016cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cee:	bf00      	nop
 8016cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cf2:	bc08      	pop	{r3}
 8016cf4:	469e      	mov	lr, r3
 8016cf6:	4770      	bx	lr

08016cf8 <_fini>:
 8016cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cfa:	bf00      	nop
 8016cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cfe:	bc08      	pop	{r3}
 8016d00:	469e      	mov	lr, r3
 8016d02:	4770      	bx	lr
