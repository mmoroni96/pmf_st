
SD_USB_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015464  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  080156fc  080156fc  000256fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c6c  08015c6c  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  08015c6c  08015c6c  00025c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c74  08015c74  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c74  08015c74  00025c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c78  08015c78  00025c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  24000000  08015c7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000194  08015e10  00030194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240001f4  08015e70  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007dcc  24000258  08015ed0  00030258  2**3
                  ALLOC
 12 ._user_heap_stack 00006004  24008024  08015ed0  00038024  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 14 .debug_info   00041f9d  00000000  00000000  00030282  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006aa2  00000000  00000000  0007221f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002208  00000000  00000000  00078cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001f88  00000000  00000000  0007aed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000410c8  00000000  00000000  0007ce58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000250a5  00000000  00000000  000bdf20  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00179539  00000000  00000000  000e2fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0025c4fe  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009080  00000000  00000000  0025c57c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000258 	.word	0x24000258
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080156e4 	.word	0x080156e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400025c 	.word	0x2400025c
 80002d4:	080156e4 	.word	0x080156e4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db0b      	blt.n	8000602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f003 021f 	and.w	r2, r3, #31
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <__NVIC_EnableIRQ+0x38>)
 80005f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f6:	095b      	lsrs	r3, r3, #5
 80005f8:	2001      	movs	r0, #1
 80005fa:	fa00 f202 	lsl.w	r2, r0, r2
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e100 	.word	0xe000e100

08000614 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800061e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db10      	blt.n	8000648 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	f003 021f 	and.w	r2, r3, #31
 800062c:	4909      	ldr	r1, [pc, #36]	; (8000654 <__NVIC_DisableIRQ+0x40>)
 800062e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000632:	095b      	lsrs	r3, r3, #5
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	3320      	adds	r3, #32
 800063c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000640:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000644:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 ff07 	bl	8001470 <HAL_Init>

  /* USER CODE BEGIN Init */
  int i=0;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f889 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 fa93 	bl	8000b94 <MX_GPIO_Init>
  MX_ETH_Init();
 800066e:	f000 f94f 	bl	8000910 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000672:	f000 fa43 	bl	8000afc <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 8000676:	f000 f9f9 	bl	8000a6c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800067a:	f00c fe39 	bl	800d2f0 <MX_FATFS_Init>
  MX_RTC_Init();
 800067e:	f000 f999 	bl	80009b4 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000682:	f014 fa2d 	bl	8014ae0 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8000686:	f000 fa13 	bl	8000ab0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  //HAL_SD_Init(&hsd1);
  //HAL_SD_GetCardInfo(&hsd1, &SDCardInfo);
  //HAL_SD_Init(&hsd1);
  FRESULT res;
  res=f_mount(&myFatFS, SDPath, 1);
 800068a:	2201      	movs	r2, #1
 800068c:	4932      	ldr	r1, [pc, #200]	; (8000758 <main+0x100>)
 800068e:	4833      	ldr	r0, [pc, #204]	; (800075c <main+0x104>)
 8000690:	f012 fe72 	bl	8013378 <f_mount>
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_Base_Start_IT(&htim17);
 8000698:	4831      	ldr	r0, [pc, #196]	; (8000760 <main+0x108>)
 800069a:	f007 febb 	bl	8008414 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	4830      	ldr	r0, [pc, #192]	; (8000764 <main+0x10c>)
 80006a4:	f001 fe8e 	bl	80023c4 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d1f7      	bne.n	800069e <main+0x46>
		  if(i==0){
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d140      	bne.n	8000736 <main+0xde>
			  NVIC_DisableIRQ(OTG_FS_IRQn);
 80006b4:	2065      	movs	r0, #101	; 0x65
 80006b6:	f7ff ffad 	bl	8000614 <__NVIC_DisableIRQ>
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c0:	4829      	ldr	r0, [pc, #164]	; (8000768 <main+0x110>)
 80006c2:	f001 fe97 	bl	80023f4 <HAL_GPIO_WritePin>
			  if(USBD_Stop(&hUsbDeviceFS)!= USBD_OK) {
 80006c6:	4829      	ldr	r0, [pc, #164]	; (800076c <main+0x114>)
 80006c8:	f00e fa2e 	bl	800eb28 <USBD_Stop>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <main+0x7e>
								Error_Handler();
 80006d2:	f000 fbd3 	bl	8000e7c <Error_Handler>
							  }
			  res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 80006d6:	2208      	movs	r2, #8
 80006d8:	4925      	ldr	r1, [pc, #148]	; (8000770 <main+0x118>)
 80006da:	4826      	ldr	r0, [pc, #152]	; (8000774 <main+0x11c>)
 80006dc:	f012 fe92 	bl	8013404 <f_open>
 80006e0:	4603      	mov	r3, r0
 80006e2:	71fb      	strb	r3, [r7, #7]
			  res = f_close(&writeFile);
 80006e4:	4823      	ldr	r0, [pc, #140]	; (8000774 <main+0x11c>)
 80006e6:	f013 fdfe 	bl	80142e6 <f_close>
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
			  res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 80006ee:	2212      	movs	r2, #18
 80006f0:	491f      	ldr	r1, [pc, #124]	; (8000770 <main+0x118>)
 80006f2:	4820      	ldr	r0, [pc, #128]	; (8000774 <main+0x11c>)
 80006f4:	f012 fe86 	bl	8013404 <f_open>
 80006f8:	4603      	mov	r3, r0
 80006fa:	71fb      	strb	r3, [r7, #7]
			  for(int e=0;e<100000;e++){
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	e004      	b.n	800070c <main+0xb4>
				  scrivi_speed();
 8000702:	f000 fb77 	bl	8000df4 <scrivi_speed>
			  for(int e=0;e<100000;e++){
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	3301      	adds	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <main+0x120>)
 8000710:	4293      	cmp	r3, r2
 8000712:	ddf6      	ble.n	8000702 <main+0xaa>
			  }
			  res = f_close(&writeFile);
 8000714:	4817      	ldr	r0, [pc, #92]	; (8000774 <main+0x11c>)
 8000716:	f013 fde6 	bl	80142e6 <f_close>
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <main+0x110>)
 8000726:	f001 fe65 	bl	80023f4 <HAL_GPIO_WritePin>
		      i=1;
 800072a:	2301      	movs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
		      HAL_Delay(200);}
 800072e:	20c8      	movs	r0, #200	; 0xc8
 8000730:	f000 ff30 	bl	8001594 <HAL_Delay>
 8000734:	e7b3      	b.n	800069e <main+0x46>
		  else{

			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <main+0x110>)
 800073e:	f001 fe59 	bl	80023f4 <HAL_GPIO_WritePin>
			  MX_USB_DEVICE_Init();
 8000742:	f014 f9cd 	bl	8014ae0 <MX_USB_DEVICE_Init>
			  /*if(USBD_Start(&hUsbDeviceFS)!= USBD_OK) {
			 			  				    Error_Handler();
			 			  				  }*/
			  NVIC_EnableIRQ(OTG_FS_IRQn);
 8000746:	2065      	movs	r0, #101	; 0x65
 8000748:	f7ff ff46 	bl	80005d8 <__NVIC_EnableIRQ>
			  i=0;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(200);
 8000750:	20c8      	movs	r0, #200	; 0xc8
 8000752:	f000 ff1f 	bl	8001594 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 8000756:	e7a2      	b.n	800069e <main+0x46>
 8000758:	240056bc 	.word	0x240056bc
 800075c:	24003540 	.word	0x24003540
 8000760:	24001474 	.word	0x24001474
 8000764:	58020800 	.word	0x58020800
 8000768:	58020400 	.word	0x58020400
 800076c:	24007754 	.word	0x24007754
 8000770:	24000000 	.word	0x24000000
 8000774:	240014b8 	.word	0x240014b8
 8000778:	0001869f 	.word	0x0001869f

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b0cc      	sub	sp, #304	; 0x130
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000786:	224c      	movs	r2, #76	; 0x4c
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f014 fee8 	bl	8015560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000794:	2220      	movs	r2, #32
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f014 fee1 	bl	8015560 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4618      	mov	r0, r3
 80007a4:	23bc      	movs	r3, #188	; 0xbc
 80007a6:	461a      	mov	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f014 fed9 	bl	8015560 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007ae:	2002      	movs	r0, #2
 80007b0:	f003 f8b2 	bl	8003918 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	4b52      	ldr	r3, [pc, #328]	; (8000904 <SystemClock_Config+0x188>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	4a51      	ldr	r2, [pc, #324]	; (8000904 <SystemClock_Config+0x188>)
 80007c0:	f023 0301 	bic.w	r3, r3, #1
 80007c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007c6:	4b4f      	ldr	r3, [pc, #316]	; (8000904 <SystemClock_Config+0x188>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	f003 0201 	and.w	r2, r3, #1
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	4b4d      	ldr	r3, [pc, #308]	; (8000908 <SystemClock_Config+0x18c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a4c      	ldr	r2, [pc, #304]	; (8000908 <SystemClock_Config+0x18c>)
 80007d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b4a      	ldr	r3, [pc, #296]	; (8000908 <SystemClock_Config+0x18c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ee:	bf00      	nop
 80007f0:	4b45      	ldr	r3, [pc, #276]	; (8000908 <SystemClock_Config+0x18c>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007fc:	d1f8      	bne.n	80007f0 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80007fe:	2329      	movs	r3, #41	; 0x29
 8000800:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000804:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000808:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000812:	2301      	movs	r3, #1
 8000814:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 32;
 800082a:	2320      	movs	r3, #32
 800082c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000842:	230c      	movs	r3, #12
 8000844:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000848:	2300      	movs	r3, #0
 800084a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000858:	4618      	mov	r0, r3
 800085a:	f003 f8a7 	bl	80039ac <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000864:	f000 fb0a 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	233f      	movs	r3, #63	; 0x3f
 800086a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800089e:	2101      	movs	r1, #1
 80008a0:	4618      	mov	r0, r3
 80008a2:	f003 fc5b 	bl	800415c <HAL_RCC_ClockConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x134>
  {
    Error_Handler();
 80008ac:	f000 fae6 	bl	8000e7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4a15      	ldr	r2, [pc, #84]	; (800090c <SystemClock_Config+0x190>)
 80008b6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	2200      	movs	r2, #0
 80008c6:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 ffbd 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x178>
  {
    Error_Handler();
 80008f0:	f000 fac4 	bl	8000e7c <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80008f4:	f003 f84a 	bl	800398c <HAL_PWREx_EnableUSBVoltageDetector>
}
 80008f8:	bf00      	nop
 80008fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	58000400 	.word	0x58000400
 8000908:	58024800 	.word	0x58024800
 800090c:	00450002 	.word	0x00450002

08000910 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_ETH_Init+0x90>)
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <MX_ETH_Init+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_ETH_Init+0x90>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_ETH_Init+0x90>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	3301      	adds	r3, #1
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_ETH_Init+0x90>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	3302      	adds	r3, #2
 8000932:	22e1      	movs	r2, #225	; 0xe1
 8000934:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_ETH_Init+0x90>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	3303      	adds	r3, #3
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_ETH_Init+0x90>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	3304      	adds	r3, #4
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_ETH_Init+0x90>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	3305      	adds	r3, #5
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_ETH_Init+0x90>)
 8000956:	2201      	movs	r2, #1
 8000958:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_ETH_Init+0x90>)
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_ETH_Init+0x98>)
 800095e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_ETH_Init+0x90>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_ETH_Init+0x9c>)
 8000964:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_ETH_Init+0x90>)
 8000968:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800096c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_ETH_Init+0x90>)
 8000970:	f000 ff62 	bl	8001838 <HAL_ETH_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800097a:	f000 fa7f 	bl	8000e7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800097e:	2234      	movs	r2, #52	; 0x34
 8000980:	2100      	movs	r1, #0
 8000982:	480b      	ldr	r0, [pc, #44]	; (80009b0 <MX_ETH_Init+0xa0>)
 8000984:	f014 fdec 	bl	8015560 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_ETH_Init+0xa0>)
 800098a:	2221      	movs	r2, #33	; 0x21
 800098c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_ETH_Init+0xa0>)
 8000990:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000994:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_ETH_Init+0xa0>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	240045b4 	.word	0x240045b4
 80009a4:	40028000 	.word	0x40028000
 80009a8:	240001f4 	.word	0x240001f4
 80009ac:	24000194 	.word	0x24000194
 80009b0:	2400462c 	.word	0x2400462c

080009b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009ce:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <MX_RTC_Init+0xb4>)
 80009d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009da:	227f      	movs	r2, #127	; 0x7f
 80009dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009e0:	22ff      	movs	r2, #255	; 0xff
 80009e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009fc:	4819      	ldr	r0, [pc, #100]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009fe:	f005 fde5 	bl	80065cc <HAL_RTC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 fa38 	bl	8000e7c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <MX_RTC_Init+0xb0>)
 8000a28:	f005 fe6c 	bl	8006704 <HAL_RTC_SetTime>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000a32:	f000 fa23 	bl	8000e7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a36:	2301      	movs	r3, #1
 8000a38:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_RTC_Init+0xb0>)
 8000a4e:	f005 ff79 	bl	8006944 <HAL_RTC_SetDate>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a58:	f000 fa10 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	24004580 	.word	0x24004580
 8000a68:	58004000 	.word	0x58004000

08000a6c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <MX_SDMMC1_SD_Init+0x40>)
 8000a74:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a8e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	240013f0 	.word	0x240013f0
 8000aac:	52007000 	.word	0x52007000

08000ab0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_TIM17_Init+0x44>)
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <MX_TIM17_Init+0x48>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_TIM17_Init+0x44>)
 8000abc:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000ac0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_TIM17_Init+0x44>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 200;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_TIM17_Init+0x44>)
 8000aca:	22c8      	movs	r2, #200	; 0xc8
 8000acc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_TIM17_Init+0x44>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MX_TIM17_Init+0x44>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_TIM17_Init+0x44>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_TIM17_Init+0x44>)
 8000ae2:	f007 fc6b 	bl	80083bc <HAL_TIM_Base_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000aec:	f000 f9c6 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	24001474 	.word	0x24001474
 8000af8:	40014800 	.word	0x40014800

08000afc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b02:	4a23      	ldr	r2, [pc, #140]	; (8000b90 <MX_USART3_UART_Init+0x94>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b44:	4811      	ldr	r0, [pc, #68]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b46:	f007 fe8f 	bl	8008868 <HAL_UART_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b50:	f000 f994 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b54:	2100      	movs	r1, #0
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b58:	f00a f9f7 	bl	800af4a <HAL_UARTEx_SetTxFifoThreshold>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b62:	f000 f98b 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b6a:	f00a fa2c 	bl	800afc6 <HAL_UARTEx_SetRxFifoThreshold>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b74:	f000 f982 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b7a:	f00a f9ad 	bl	800aed8 <HAL_UARTEx_DisableFifoMode>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b84:	f000 f97a 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	24001320 	.word	0x24001320
 8000b90:	40004800 	.word	0x40004800

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b59      	ldr	r3, [pc, #356]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a57      	ldr	r2, [pc, #348]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b55      	ldr	r3, [pc, #340]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc8:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	4a50      	ldr	r2, [pc, #320]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd8:	4b4d      	ldr	r3, [pc, #308]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b4a      	ldr	r3, [pc, #296]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a41      	ldr	r2, [pc, #260]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a39      	ldr	r2, [pc, #228]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c40:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a32      	ldr	r2, [pc, #200]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <MX_GPIO_Init+0x17c>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c64:	482b      	ldr	r0, [pc, #172]	; (8000d14 <MX_GPIO_Init+0x180>)
 8000c66:	f001 fbc5 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2140      	movs	r1, #64	; 0x40
 8000c6e:	482a      	ldr	r0, [pc, #168]	; (8000d18 <MX_GPIO_Init+0x184>)
 8000c70:	f001 fbc0 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_GPIO_Init+0x188>)
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4825      	ldr	r0, [pc, #148]	; (8000d20 <MX_GPIO_Init+0x18c>)
 8000c8a:	f001 f9eb 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c8e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481b      	ldr	r0, [pc, #108]	; (8000d14 <MX_GPIO_Init+0x180>)
 8000ca8:	f001 f9dc 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cac:	2320      	movs	r3, #32
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4816      	ldr	r0, [pc, #88]	; (8000d18 <MX_GPIO_Init+0x184>)
 8000cc0:	f001 f9d0 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cc4:	2340      	movs	r3, #64	; 0x40
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480f      	ldr	r0, [pc, #60]	; (8000d18 <MX_GPIO_Init+0x184>)
 8000cdc:	f001 f9c2 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <MX_GPIO_Init+0x184>)
 8000cf4:	f001 f9b6 	bl	8002064 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2028      	movs	r0, #40	; 0x28
 8000cfe:	f000 fd66 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d02:	2028      	movs	r0, #40	; 0x28
 8000d04:	f000 fd7d 	bl	8001802 <HAL_NVIC_EnableIRQ>

}
 8000d08:	bf00      	nop
 8000d0a:	3730      	adds	r7, #48	; 0x30
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020400 	.word	0x58020400
 8000d18:	58021800 	.word	0x58021800
 8000d1c:	11110000 	.word	0x11110000
 8000d20:	58020800 	.word	0x58020800

08000d24 <HAL_TIM_PeriodElapsedCallback>:
 LD2_GPIO_Port -> ODR ^= LD2_Pin; // toggle LD2 LED
 }

}*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17) //check if the interrupt comes from TIM2
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d105      	bne.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x1e>
        {
    	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d3a:	f001 fb74 	bl	8002426 <HAL_GPIO_TogglePin>
    	leggi();
 8000d3e:	f000 f809 	bl	8000d54 <leggi>

        }}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40014800 	.word	0x40014800
 8000d50:	58020400 	.word	0x58020400

08000d54 <leggi>:
		indox=indox+f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);}
		res = f_close(&writeFile);

	return res;
}
FRESULT leggi(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
    	FIL readFile;       /* File  object for USER */
    		   /* File system object for USER logical drive */
    		//FIL USERFile;     /* File  object for USER */
    	char USERPath[4];   /* USER logical drive path */
    	uint8_t bytesWrote;
    	uint8_t path1[] = "current.txt";
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <leggi+0x8c>)
 8000d60:	f241 0270 	movw	r2, #4208	; 0x1070
 8000d64:	443a      	add	r2, r7
 8000d66:	4413      	add	r3, r2
 8000d68:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <leggi+0x90>)
 8000d6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	res = f_open(&readFile, &path1, FA_READ);
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <leggi+0x8c>)
 8000d72:	f241 0270 	movw	r2, #4208	; 0x1070
 8000d76:	443a      	add	r2, r7
 8000d78:	4413      	add	r3, r2
 8000d7a:	f107 0010 	add.w	r0, r7, #16
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4619      	mov	r1, r3
 8000d82:	f012 fb3f 	bl	8013404 <f_open>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f241 026f 	movw	r2, #4207	; 0x106f
 8000d8c:	443a      	add	r2, r7
 8000d8e:	7013      	strb	r3, [r2, #0]
    	res = f_read(&readFile,readBuff,1, &br);
 8000d90:	f107 0010 	add.w	r0, r7, #16
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <leggi+0x94>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	4914      	ldr	r1, [pc, #80]	; (8000dec <leggi+0x98>)
 8000d9a:	f012 fe03 	bl	80139a4 <f_read>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f241 026f 	movw	r2, #4207	; 0x106f
 8000da4:	443a      	add	r2, r7
 8000da6:	7013      	strb	r3, [r2, #0]
    	if(readBuff[0]=='1'){flag++;}
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <leggi+0x98>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b31      	cmp	r3, #49	; 0x31
 8000dae:	d105      	bne.n	8000dbc <leggi+0x68>
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <leggi+0x9c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <leggi+0x9c>)
 8000dba:	701a      	strb	r2, [r3, #0]
    	res = f_close(&readFile);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f013 fa90 	bl	80142e6 <f_close>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f241 026f 	movw	r2, #4207	; 0x106f
 8000dcc:	443a      	add	r2, r7
 8000dce:	7013      	strb	r3, [r2, #0]



    	}
 8000dd0:	bf00      	nop
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	ffffef90 	.word	0xffffef90
 8000de4:	08015718 	.word	0x08015718
 8000de8:	240014b4 	.word	0x240014b4
 8000dec:	240013b0 	.word	0x240013b0
 8000df0:	24000278 	.word	0x24000278

08000df4 <scrivi_speed>:
FRESULT scrivi_speed(){
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af04      	add	r7, sp, #16
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */



		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4917      	ldr	r1, [pc, #92]	; (8000e5c <scrivi_speed+0x68>)
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <scrivi_speed+0x6c>)
 8000e00:	f005 fd44 	bl	800688c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 8000e04:	2200      	movs	r2, #0
 8000e06:	4917      	ldr	r1, [pc, #92]	; (8000e64 <scrivi_speed+0x70>)
 8000e08:	4815      	ldr	r0, [pc, #84]	; (8000e60 <scrivi_speed+0x6c>)
 8000e0a:	f005 fe49 	bl	8006aa0 <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <scrivi_speed+0x68>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <scrivi_speed+0x74>)
 8000e14:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <scrivi_speed+0x68>)
 8000e18:	785a      	ldrb	r2, [r3, #1]
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <scrivi_speed+0x74>)
 8000e1c:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <scrivi_speed+0x68>)
 8000e20:	789a      	ldrb	r2, [r3, #2]
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <scrivi_speed+0x74>)
 8000e24:	709a      	strb	r2, [r3, #2]

	f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <scrivi_speed+0x74>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <scrivi_speed+0x74>)
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	461c      	mov	r4, r3
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <scrivi_speed+0x74>)
 8000e34:	789b      	ldrb	r3, [r3, #2]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <scrivi_speed+0x78>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <scrivi_speed+0x7c>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	9202      	str	r2, [sp, #8]
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	9100      	str	r1, [sp, #0]
 8000e46:	4623      	mov	r3, r4
 8000e48:	4602      	mov	r2, r0
 8000e4a:	490a      	ldr	r1, [pc, #40]	; (8000e74 <scrivi_speed+0x80>)
 8000e4c:	480a      	ldr	r0, [pc, #40]	; (8000e78 <scrivi_speed+0x84>)
 8000e4e:	f013 faed 	bl	801442c <f_printf>


	return res;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	2400569c 	.word	0x2400569c
 8000e60:	24004580 	.word	0x24004580
 8000e64:	2400457c 	.word	0x2400457c
 8000e68:	240045b0 	.word	0x240045b0
 8000e6c:	24002510 	.word	0x24002510
 8000e70:	24000274 	.word	0x24000274
 8000e74:	080156fc 	.word	0x080156fc
 8000e78:	240014b8 	.word	0x240014b8

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_MspInit+0x30>)
 8000e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e98:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x30>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x30>)
 8000ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	58024400 	.word	0x58024400

08000ec0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	; 0x38
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a59      	ldr	r2, [pc, #356]	; (8001044 <HAL_ETH_MspInit+0x184>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	f040 80ab 	bne.w	800103a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ee4:	4b58      	ldr	r3, [pc, #352]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000ee6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eea:	4a57      	ldr	r2, [pc, #348]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ef4:	4b54      	ldr	r3, [pc, #336]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000efe:	623b      	str	r3, [r7, #32]
 8000f00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f02:	4b51      	ldr	r3, [pc, #324]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f08:	4a4f      	ldr	r2, [pc, #316]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f12:	4b4d      	ldr	r3, [pc, #308]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f20:	4b49      	ldr	r3, [pc, #292]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f26:	4a48      	ldr	r2, [pc, #288]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f30:	4b45      	ldr	r3, [pc, #276]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b42      	ldr	r3, [pc, #264]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	4a40      	ldr	r2, [pc, #256]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	4a39      	ldr	r2, [pc, #228]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6c:	4b36      	ldr	r3, [pc, #216]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	4a31      	ldr	r2, [pc, #196]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	4a2a      	ldr	r2, [pc, #168]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <HAL_ETH_MspInit+0x188>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fb6:	2332      	movs	r3, #50	; 0x32
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc6:	230b      	movs	r3, #11
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	481e      	ldr	r0, [pc, #120]	; (800104c <HAL_ETH_MspInit+0x18c>)
 8000fd2:	f001 f847 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fd6:	2386      	movs	r3, #134	; 0x86
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4817      	ldr	r0, [pc, #92]	; (8001050 <HAL_ETH_MspInit+0x190>)
 8000ff2:	f001 f837 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001008:	230b      	movs	r3, #11
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	4810      	ldr	r0, [pc, #64]	; (8001054 <HAL_ETH_MspInit+0x194>)
 8001014:	f001 f826 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001018:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102a:	230b      	movs	r3, #11
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4808      	ldr	r0, [pc, #32]	; (8001058 <HAL_ETH_MspInit+0x198>)
 8001036:	f001 f815 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3738      	adds	r7, #56	; 0x38
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40028000 	.word	0x40028000
 8001048:	58024400 	.word	0x58024400
 800104c:	58020800 	.word	0x58020800
 8001050:	58020000 	.word	0x58020000
 8001054:	58020400 	.word	0x58020400
 8001058:	58021800 	.word	0x58021800

0800105c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_RTC_MspInit+0x2c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d105      	bne.n	800107a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <HAL_RTC_MspInit+0x30>)
 8001070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001072:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_RTC_MspInit+0x30>)
 8001074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001078:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	58004000 	.word	0x58004000
 800108c:	58024400 	.word	0x58024400

08001090 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a32      	ldr	r2, [pc, #200]	; (8001178 <HAL_SD_MspInit+0xe8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d15e      	bne.n	8001170 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <HAL_SD_MspInit+0xec>)
 80010b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010b8:	4a30      	ldr	r2, [pc, #192]	; (800117c <HAL_SD_MspInit+0xec>)
 80010ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010be:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_SD_MspInit+0xec>)
 80010c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	4b2a      	ldr	r3, [pc, #168]	; (800117c <HAL_SD_MspInit+0xec>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	4a29      	ldr	r2, [pc, #164]	; (800117c <HAL_SD_MspInit+0xec>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <HAL_SD_MspInit+0xec>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	4b23      	ldr	r3, [pc, #140]	; (800117c <HAL_SD_MspInit+0xec>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <HAL_SD_MspInit+0xec>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_SD_MspInit+0xec>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800110c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001116:	2301      	movs	r3, #1
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800111e:	230c      	movs	r3, #12
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4815      	ldr	r0, [pc, #84]	; (8001180 <HAL_SD_MspInit+0xf0>)
 800112a:	f000 ff9b 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001140:	230c      	movs	r3, #12
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <HAL_SD_MspInit+0xf0>)
 800114c:	f000 ff8a 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001150:	2304      	movs	r3, #4
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	2301      	movs	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001160:	230c      	movs	r3, #12
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <HAL_SD_MspInit+0xf4>)
 800116c:	f000 ff7a 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	52007000 	.word	0x52007000
 800117c:	58024400 	.word	0x58024400
 8001180:	58020800 	.word	0x58020800
 8001184:	58020c00 	.word	0x58020c00

08001188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_TIM_Base_MspInit+0x48>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d116      	bne.n	80011c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_TIM_Base_MspInit+0x4c>)
 800119c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <HAL_TIM_Base_MspInit+0x4c>)
 80011a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_TIM_Base_MspInit+0x4c>)
 80011ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2076      	movs	r0, #118	; 0x76
 80011be:	f000 fb06 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80011c2:	2076      	movs	r0, #118	; 0x76
 80011c4:	f000 fb1d 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40014800 	.word	0x40014800
 80011d4:	58024400 	.word	0x58024400

080011d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <HAL_UART_MspInit+0x88>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d12e      	bne.n	8001258 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_UART_MspInit+0x8c>)
 80011fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001200:	4a18      	ldr	r2, [pc, #96]	; (8001264 <HAL_UART_MspInit+0x8c>)
 8001202:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001206:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_UART_MspInit+0x8c>)
 800120c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_UART_MspInit+0x8c>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	4a11      	ldr	r2, [pc, #68]	; (8001264 <HAL_UART_MspInit+0x8c>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_UART_MspInit+0x8c>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001236:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001248:	2307      	movs	r3, #7
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_UART_MspInit+0x90>)
 8001254:	f000 ff06 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40004800 	.word	0x40004800
 8001264:	58024400 	.word	0x58024400
 8001268:	58020c00 	.word	0x58020c00

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler+0x4>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <UsageFault_Handler+0x4>

08001292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c0:	f000 f948 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012d0:	f001 f8c4 	bl	800245c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <OTG_FS_IRQHandler+0x10>)
 80012de:	f001 fa69 	bl	80027b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24007c18 	.word	0x24007c18

080012ec <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM17_IRQHandler+0x10>)
 80012f2:	f007 f8b9 	bl	8008468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	24001474 	.word	0x24001474

08001300 <_sbrk>:
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <_sbrk+0x50>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x16>
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <_sbrk+0x50>)
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <_sbrk+0x54>)
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <_sbrk+0x50>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <_sbrk+0x50>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	466a      	mov	r2, sp
 8001326:	4293      	cmp	r3, r2
 8001328:	d907      	bls.n	800133a <_sbrk+0x3a>
 800132a:	f014 f8df 	bl	80154ec <__errno>
 800132e:	4602      	mov	r2, r0
 8001330:	230c      	movs	r3, #12
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	e006      	b.n	8001348 <_sbrk+0x48>
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <_sbrk+0x50>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a03      	ldr	r2, [pc, #12]	; (8001350 <_sbrk+0x50>)
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2400027c 	.word	0x2400027c
 8001354:	24008028 	.word	0x24008028

08001358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <SystemInit+0xac>)
 800135e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001362:	4a28      	ldr	r2, [pc, #160]	; (8001404 <SystemInit+0xac>)
 8001364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800136c:	4b26      	ldr	r3, [pc, #152]	; (8001408 <SystemInit+0xb0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a25      	ldr	r2, [pc, #148]	; (8001408 <SystemInit+0xb0>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <SystemInit+0xb0>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <SystemInit+0xb0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4921      	ldr	r1, [pc, #132]	; (8001408 <SystemInit+0xb0>)
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <SystemInit+0xb4>)
 8001386:	4013      	ands	r3, r2
 8001388:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <SystemInit+0xb0>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <SystemInit+0xb0>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <SystemInit+0xb0>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <SystemInit+0xb0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <SystemInit+0xb0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <SystemInit+0xb0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <SystemInit+0xb0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <SystemInit+0xb0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <SystemInit+0xb0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <SystemInit+0xb0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <SystemInit+0xb0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <SystemInit+0xb0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <SystemInit+0xb0>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <SystemInit+0xb0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <SystemInit+0xb8>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <SystemInit+0xbc>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ea:	d202      	bcs.n	80013f2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <SystemInit+0xc0>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SystemInit+0xac>)
 80013f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	58024400 	.word	0x58024400
 800140c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001410:	5c001000 	.word	0x5c001000
 8001414:	ffff0000 	.word	0xffff0000
 8001418:	51008108 	.word	0x51008108

0800141c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800141c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001420:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001422:	e003      	b.n	800142c <LoopCopyDataInit>

08001424 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001426:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001428:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800142a:	3104      	adds	r1, #4

0800142c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001430:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001432:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001434:	d3f6      	bcc.n	8001424 <CopyDataInit>
  ldr  r2, =_sbss
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001438:	e002      	b.n	8001440 <LoopFillZerobss>

0800143a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800143a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800143c:	f842 3b04 	str.w	r3, [r2], #4

08001440 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001442:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001444:	d3f9      	bcc.n	800143a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001446:	f7ff ff87 	bl	8001358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144a:	f014 f855 	bl	80154f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144e:	f7ff f903 	bl	8000658 <main>
  bx  lr    
 8001452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001454:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001458:	08015c7c 	.word	0x08015c7c
  ldr  r0, =_sdata
 800145c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001460:	24000194 	.word	0x24000194
  ldr  r2, =_sbss
 8001464:	24000258 	.word	0x24000258
  ldr  r3, = _ebss
 8001468:	24008024 	.word	0x24008024

0800146c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC3_IRQHandler>
	...

08001470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001476:	2003      	movs	r0, #3
 8001478:	f000 f99e 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800147c:	f003 f824 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8001480:	4601      	mov	r1, r0
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_Init+0x68>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	f003 030f 	and.w	r3, r3, #15
 800148c:	4a13      	ldr	r2, [pc, #76]	; (80014dc <HAL_Init+0x6c>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	fa21 f303 	lsr.w	r3, r1, r3
 8001498:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_Init+0x68>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_Init+0x6c>)
 80014a4:	5cd3      	ldrb	r3, [r2, r3]
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_Init+0x70>)
 80014b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HAL_Init+0x74>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ba:	2000      	movs	r0, #0
 80014bc:	f000 f814 	bl	80014e8 <HAL_InitTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e002      	b.n	80014d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ca:	f7ff fcdf 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	58024400 	.word	0x58024400
 80014dc:	080157cc 	.word	0x080157cc
 80014e0:	24000010 	.word	0x24000010
 80014e4:	2400000c 	.word	0x2400000c

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_InitTick+0x60>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e021      	b.n	8001540 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_InitTick+0x64>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_InitTick+0x60>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f983 	bl	800181e <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f94d 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x68>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	24000018 	.word	0x24000018
 800154c:	2400000c 	.word	0x2400000c
 8001550:	24000014 	.word	0x24000014

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	24000018 	.word	0x24000018
 8001578:	240056b0 	.word	0x240056b0

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	240056b0 	.word	0x240056b0

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_Delay+0x40>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24000018 	.word	0x24000018

080015d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_GetREVID+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0c1b      	lsrs	r3, r3, #16
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	5c001000 	.word	0x5c001000

080015f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001600:	4904      	ldr	r1, [pc, #16]	; (8001614 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	58000400 	.word	0x58000400

08001618 <__NVIC_SetPriorityGrouping>:
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	05fa0000 	.word	0x05fa0000

08001660 <__NVIC_GetPriorityGrouping>:
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff29 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff40 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff33 	bl	800167c <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa4 	bl	8001774 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0c6      	b.n	80019d8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fb34 	bl	8000ec0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2223      	movs	r2, #35	; 0x23
 800185c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b60      	ldr	r3, [pc, #384]	; (80019e0 <HAL_ETH_Init+0x1a8>)
 8001860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001864:	4a5e      	ldr	r2, [pc, #376]	; (80019e0 <HAL_ETH_Init+0x1a8>)
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_ETH_Init+0x1a8>)
 8001870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7a1b      	ldrb	r3, [r3, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff feb3 	bl	80015f0 <HAL_SYSCFG_ETHInterfaceSelect>
 800188a:	e003      	b.n	8001894 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800188c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001890:	f7ff feae 	bl	80015f0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ac:	f7ff fe66 	bl	800157c <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018b2:	e00f      	b.n	80018d4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80018b4:	f7ff fe62 	bl	800157c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018c2:	d907      	bls.n	80018d4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2204      	movs	r2, #4
 80018c8:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	22e0      	movs	r2, #224	; 0xe0
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e081      	b.n	80019d8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1e6      	bne.n	80018b4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fac0 	bl	8001e6c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018ec:	f002 ff5e 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b3c      	ldr	r3, [pc, #240]	; (80019e4 <HAL_ETH_Init+0x1ac>)
 80018f4:	fba3 2302 	umull	r2, r3, r3, r2
 80018f8:	0c9a      	lsrs	r2, r3, #18
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3a01      	subs	r2, #1
 8001900:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fa13 	bl	8001d30 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001920:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001924:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	22e0      	movs	r2, #224	; 0xe0
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e04a      	b.n	80019d8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	f241 1308 	movw	r3, #4360	; 0x1108
 800194a:	4413      	add	r3, r2
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_ETH_Init+0x1b0>)
 8001950:	4013      	ands	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6952      	ldr	r2, [r2, #20]
 8001956:	0052      	lsls	r2, r2, #1
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	6809      	ldr	r1, [r1, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001962:	440b      	add	r3, r1
 8001964:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fad8 	bl	8001f1c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fb1c 	bl	8001faa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	3305      	adds	r3, #5
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	021a      	lsls	r2, r3, #8
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	3304      	adds	r3, #4
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	3303      	adds	r3, #3
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	061a      	lsls	r2, r3, #24
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	3302      	adds	r3, #2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	041b      	lsls	r3, r3, #16
 80019a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	3301      	adds	r3, #1
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019be:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2210      	movs	r2, #16
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2210      	movs	r2, #16
 80019d4:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	58024400 	.word	0x58024400
 80019e4:	431bde83 	.word	0x431bde83
 80019e8:	ffff8001 	.word	0xffff8001

080019ec <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80019fe:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	791b      	ldrb	r3, [r3, #4]
 8001a04:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001a06:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	7b1b      	ldrb	r3, [r3, #12]
 8001a0c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a0e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	7b5b      	ldrb	r3, [r3, #13]
 8001a14:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a16:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	7b9b      	ldrb	r3, [r3, #14]
 8001a1c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a1e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	7bdb      	ldrb	r3, [r3, #15]
 8001a24:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a26:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	7c12      	ldrb	r2, [r2, #16]
 8001a2c:	2a00      	cmp	r2, #0
 8001a2e:	d102      	bne.n	8001a36 <ETH_SetMACConfig+0x4a>
 8001a30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a34:	e000      	b.n	8001a38 <ETH_SetMACConfig+0x4c>
 8001a36:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a38:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	7c52      	ldrb	r2, [r2, #17]
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	d102      	bne.n	8001a48 <ETH_SetMACConfig+0x5c>
 8001a42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a46:	e000      	b.n	8001a4a <ETH_SetMACConfig+0x5e>
 8001a48:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a4a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	7c9b      	ldrb	r3, [r3, #18]
 8001a50:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a52:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001a58:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001a5e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001a66:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	7f5b      	ldrb	r3, [r3, #29]
 8001a6c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001a6e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	7f92      	ldrb	r2, [r2, #30]
 8001a74:	2a00      	cmp	r2, #0
 8001a76:	d102      	bne.n	8001a7e <ETH_SetMACConfig+0x92>
 8001a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7c:	e000      	b.n	8001a80 <ETH_SetMACConfig+0x94>
 8001a7e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001a80:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	7fdb      	ldrb	r3, [r3, #31]
 8001a86:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001a88:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d102      	bne.n	8001a9a <ETH_SetMACConfig+0xae>
 8001a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a98:	e000      	b.n	8001a9c <ETH_SetMACConfig+0xb0>
 8001a9a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001a9c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001aa2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001aaa:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001aac:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <ETH_SetMACConfig+0x22c>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	68f9      	ldr	r1, [r7, #12]
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ace:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ad6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001ad8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ae0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001ae2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001aea:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001aec:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001af4:	2a00      	cmp	r2, #0
 8001af6:	d102      	bne.n	8001afe <ETH_SetMACConfig+0x112>
 8001af8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001afc:	e000      	b.n	8001b00 <ETH_SetMACConfig+0x114>
 8001afe:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b00:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <ETH_SetMACConfig+0x230>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	68f9      	ldr	r1, [r7, #12]
 8001b1a:	430b      	orrs	r3, r1
 8001b1c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b24:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <ETH_SetMACConfig+0x234>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	68f9      	ldr	r1, [r7, #12]
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b48:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b4e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b56:	2a00      	cmp	r2, #0
 8001b58:	d101      	bne.n	8001b5e <ETH_SetMACConfig+0x172>
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	e000      	b.n	8001b60 <ETH_SetMACConfig+0x174>
 8001b5e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b60:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b66:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b72:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	68f9      	ldr	r1, [r7, #12]
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001b88:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b90:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9e:	f023 0103 	bic.w	r1, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001bb6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	d101      	bne.n	8001bda <ETH_SetMACConfig+0x1ee>
 8001bd6:	2240      	movs	r2, #64	; 0x40
 8001bd8:	e000      	b.n	8001bdc <ETH_SetMACConfig+0x1f0>
 8001bda:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001bdc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001be4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001be6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001bee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001bfc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	00048083 	.word	0x00048083
 8001c1c:	c0f88000 	.word	0xc0f88000
 8001c20:	fffffef0 	.word	0xfffffef0

08001c24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <ETH_SetDMAConfig+0xf8>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	6809      	ldr	r1, [r1, #0]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001c4a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	791b      	ldrb	r3, [r3, #4]
 8001c50:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c56:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	7b1b      	ldrb	r3, [r3, #12]
 8001c5c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f241 0304 	movw	r3, #4100	; 0x1004
 8001c6a:	4413      	add	r3, r2
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <ETH_SetDMAConfig+0xfc>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6811      	ldr	r1, [r2, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	f241 0304 	movw	r3, #4100	; 0x1004
 8001c7e:	440b      	add	r3, r1
 8001c80:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	7b5b      	ldrb	r3, [r3, #13]
 8001c86:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <ETH_SetDMAConfig+0x100>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6811      	ldr	r1, [r2, #0]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001caa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	7d1b      	ldrb	r3, [r3, #20]
 8001cb4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cb6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	7f5b      	ldrb	r3, [r3, #29]
 8001cbc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	f241 1304 	movw	r3, #4356	; 0x1104
 8001cca:	4413      	add	r3, r2
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <ETH_SetDMAConfig+0x104>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6811      	ldr	r1, [r2, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	f241 1304 	movw	r3, #4356	; 0x1104
 8001cde:	440b      	add	r3, r1
 8001ce0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	7f1b      	ldrb	r3, [r3, #28]
 8001ce6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	f241 1308 	movw	r3, #4360	; 0x1108
 8001cf8:	4413      	add	r3, r2
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <ETH_SetDMAConfig+0x108>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6811      	ldr	r1, [r2, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d0c:	440b      	add	r3, r1
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	ffff87fd 	.word	0xffff87fd
 8001d20:	ffff2ffe 	.word	0xffff2ffe
 8001d24:	fffec000 	.word	0xfffec000
 8001d28:	ffc0efef 	.word	0xffc0efef
 8001d2c:	7fc0ffff 	.word	0x7fc0ffff

08001d30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0a4      	sub	sp, #144	; 0x90
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001d88:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001d8c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001daa:	2300      	movs	r3, #0
 8001dac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001db2:	2300      	movs	r3, #0
 8001db4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001dda:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001de0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001de4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff fde6 	bl	80019ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e20:	2301      	movs	r3, #1
 8001e22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e24:	2301      	movs	r3, #1
 8001e26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001e50:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fee1 	bl	8001c24 <ETH_SetDMAConfig>
}
 8001e62:	bf00      	nop
 8001e64:	3790      	adds	r7, #144	; 0x90
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e86:	f002 fc91 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 8001e8a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d908      	bls.n	8001ea6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d804      	bhi.n	8001ea6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e027      	b.n	8001ef6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d908      	bls.n	8001ec0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d804      	bhi.n	8001ec0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	e01a      	b.n	8001ef6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d903      	bls.n	8001ed0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d911      	bls.n	8001ef4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d908      	bls.n	8001eea <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d804      	bhi.n	8001eea <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e005      	b.n	8001ef6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e000      	b.n	8001ef6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001ef4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	01312cff 	.word	0x01312cff
 8001f0c:	02160ebf 	.word	0x02160ebf
 8001f10:	039386ff 	.word	0x039386ff
 8001f14:	05f5e0ff 	.word	0x05f5e0ff
 8001f18:	08f0d17f 	.word	0x08f0d17f

08001f1c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e01d      	b.n	8001f66 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68d9      	ldr	r1, [r3, #12]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	3206      	adds	r2, #6
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3301      	adds	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d9de      	bls.n	8001f2a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	f241 132c 	movw	r3, #4396	; 0x112c
 8001f7a:	4413      	add	r3, r2
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68d9      	ldr	r1, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	f241 1314 	movw	r3, #4372	; 0x1114
 8001f8c:	4413      	add	r3, r2
 8001f8e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001f9c:	601a      	str	r2, [r3, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	e024      	b.n	8002002 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6919      	ldr	r1, [r3, #16]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2200      	movs	r2, #0
 8001fec:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	330a      	adds	r3, #10
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3301      	adds	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d9d7      	bls.n	8001fb8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f241 1330 	movw	r3, #4400	; 0x1130
 800202e:	4413      	add	r3, r2
 8002030:	2203      	movs	r2, #3
 8002032:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6919      	ldr	r1, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	f241 131c 	movw	r3, #4380	; 0x111c
 8002040:	4413      	add	r3, r2
 8002042:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f241 1328 	movw	r3, #4392	; 0x1128
 8002054:	4413      	add	r3, r2
 8002056:	6019      	str	r1, [r3, #0]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002072:	4b89      	ldr	r3, [pc, #548]	; (8002298 <HAL_GPIO_Init+0x234>)
 8002074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002076:	e194      	b.n	80023a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8186 	beq.w	800239c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d00b      	beq.n	80020b0 <HAL_GPIO_Init+0x4c>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d007      	beq.n	80020b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020a4:	2b11      	cmp	r3, #17
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b12      	cmp	r3, #18
 80020ae:	d130      	bne.n	8002112 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020e6:	2201      	movs	r2, #1
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 0201 	and.w	r2, r3, #1
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0xee>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b12      	cmp	r3, #18
 8002150:	d123      	bne.n	800219a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	08da      	lsrs	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3208      	adds	r2, #8
 800215a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	69b9      	ldr	r1, [r7, #24]
 8002196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0203 	and.w	r2, r3, #3
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80e0 	beq.w	800239c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_GPIO_Init+0x238>)
 80021de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021e2:	4a2e      	ldr	r2, [pc, #184]	; (800229c <HAL_GPIO_Init+0x238>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <HAL_GPIO_Init+0x238>)
 80021ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fa:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <HAL_GPIO_Init+0x23c>)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3302      	adds	r3, #2
 8002202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a20      	ldr	r2, [pc, #128]	; (80022a4 <HAL_GPIO_Init+0x240>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d052      	beq.n	80022cc <HAL_GPIO_Init+0x268>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a1f      	ldr	r2, [pc, #124]	; (80022a8 <HAL_GPIO_Init+0x244>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d031      	beq.n	8002292 <HAL_GPIO_Init+0x22e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <HAL_GPIO_Init+0x248>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d02b      	beq.n	800228e <HAL_GPIO_Init+0x22a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_GPIO_Init+0x24c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d025      	beq.n	800228a <HAL_GPIO_Init+0x226>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_GPIO_Init+0x250>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01f      	beq.n	8002286 <HAL_GPIO_Init+0x222>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_GPIO_Init+0x254>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d019      	beq.n	8002282 <HAL_GPIO_Init+0x21e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <HAL_GPIO_Init+0x258>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0x21a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_GPIO_Init+0x25c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00d      	beq.n	800227a <HAL_GPIO_Init+0x216>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_GPIO_Init+0x260>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <HAL_GPIO_Init+0x212>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_GPIO_Init+0x264>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_GPIO_Init+0x20e>
 800226e:	2309      	movs	r3, #9
 8002270:	e02d      	b.n	80022ce <HAL_GPIO_Init+0x26a>
 8002272:	230a      	movs	r3, #10
 8002274:	e02b      	b.n	80022ce <HAL_GPIO_Init+0x26a>
 8002276:	2308      	movs	r3, #8
 8002278:	e029      	b.n	80022ce <HAL_GPIO_Init+0x26a>
 800227a:	2307      	movs	r3, #7
 800227c:	e027      	b.n	80022ce <HAL_GPIO_Init+0x26a>
 800227e:	2306      	movs	r3, #6
 8002280:	e025      	b.n	80022ce <HAL_GPIO_Init+0x26a>
 8002282:	2305      	movs	r3, #5
 8002284:	e023      	b.n	80022ce <HAL_GPIO_Init+0x26a>
 8002286:	2304      	movs	r3, #4
 8002288:	e021      	b.n	80022ce <HAL_GPIO_Init+0x26a>
 800228a:	2303      	movs	r3, #3
 800228c:	e01f      	b.n	80022ce <HAL_GPIO_Init+0x26a>
 800228e:	2302      	movs	r3, #2
 8002290:	e01d      	b.n	80022ce <HAL_GPIO_Init+0x26a>
 8002292:	2301      	movs	r3, #1
 8002294:	e01b      	b.n	80022ce <HAL_GPIO_Init+0x26a>
 8002296:	bf00      	nop
 8002298:	58000080 	.word	0x58000080
 800229c:	58024400 	.word	0x58024400
 80022a0:	58000400 	.word	0x58000400
 80022a4:	58020000 	.word	0x58020000
 80022a8:	58020400 	.word	0x58020400
 80022ac:	58020800 	.word	0x58020800
 80022b0:	58020c00 	.word	0x58020c00
 80022b4:	58021000 	.word	0x58021000
 80022b8:	58021400 	.word	0x58021400
 80022bc:	58021800 	.word	0x58021800
 80022c0:	58021c00 	.word	0x58021c00
 80022c4:	58022000 	.word	0x58022000
 80022c8:	58022400 	.word	0x58022400
 80022cc:	2300      	movs	r3, #0
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	f002 0203 	and.w	r2, r2, #3
 80022d4:	0092      	lsls	r2, r2, #2
 80022d6:	4093      	lsls	r3, r2
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022de:	4938      	ldr	r1, [pc, #224]	; (80023c0 <HAL_GPIO_Init+0x35c>)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800236e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3301      	adds	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f47f ae63 	bne.w	8002078 <HAL_GPIO_Init+0x14>
  }
}
 80023b2:	bf00      	nop
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	58000400 	.word	0x58000400

080023c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	e001      	b.n	80023e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002410:	e003      	b.n	800241a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	401a      	ands	r2, r3
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	429a      	cmp	r2, r3
 800243e:	d104      	bne.n	800244a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	041a      	lsls	r2, r3, #16
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002448:	e002      	b.n	8002450 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	619a      	str	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f804 	bl	8002490 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a8:	b08f      	sub	sp, #60	; 0x3c
 80024aa:	af0a      	add	r7, sp, #40	; 0x28
 80024ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e116      	b.n	80026e6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f012 fcce 	bl	8014e74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2203      	movs	r2, #3
 80024dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f009 fcfd 	bl	800bef6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	687e      	ldr	r6, [r7, #4]
 8002504:	466d      	mov	r5, sp
 8002506:	f106 0410 	add.w	r4, r6, #16
 800250a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002516:	e885 0003 	stmia.w	r5, {r0, r1}
 800251a:	1d33      	adds	r3, r6, #4
 800251c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800251e:	6838      	ldr	r0, [r7, #0]
 8002520:	f009 fbd4 	bl	800bccc <USB_CoreInit>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0d7      	b.n	80026e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f009 fceb 	bl	800bf18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e04a      	b.n	80025de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	333d      	adds	r3, #61	; 0x3d
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	333c      	adds	r3, #60	; 0x3c
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	b298      	uxth	r0, r3
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3342      	adds	r3, #66	; 0x42
 8002584:	4602      	mov	r2, r0
 8002586:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	333f      	adds	r3, #63	; 0x3f
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3344      	adds	r3, #68	; 0x44
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3348      	adds	r3, #72	; 0x48
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	3350      	adds	r3, #80	; 0x50
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	3301      	adds	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d3af      	bcc.n	8002548 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e044      	b.n	8002678 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	3301      	adds	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d3b5      	bcc.n	80025ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	687e      	ldr	r6, [r7, #4]
 800268a:	466d      	mov	r5, sp
 800268c:	f106 0410 	add.w	r4, r6, #16
 8002690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002698:	e894 0003 	ldmia.w	r4, {r0, r1}
 800269c:	e885 0003 	stmia.w	r5, {r0, r1}
 80026a0:	1d33      	adds	r3, r6, #4
 80026a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a4:	6838      	ldr	r0, [r7, #0]
 80026a6:	f009 fc61 	bl	800bf6c <USB_DevInit>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e014      	b.n	80026e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d102      	bne.n	80026da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f001 f8ef 	bl	80038b8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f00a fc97 	bl	800d012 <USB_DevDisconnect>

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_PCD_Start+0x1c>
 8002706:	2302      	movs	r3, #2
 8002708:	e020      	b.n	800274c <HAL_PCD_Start+0x5e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	2b01      	cmp	r3, #1
 8002718:	d109      	bne.n	800272e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800271e:	2b01      	cmp	r3, #1
 8002720:	d005      	beq.n	800272e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f00a fc55 	bl	800cfe2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f009 fbc9 	bl	800bed4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_PCD_Stop+0x16>
 8002766:	2302      	movs	r3, #2
 8002768:	e020      	b.n	80027ac <HAL_PCD_Stop+0x58>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f009 fbbd 	bl	800bef6 <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f00a fbb9 	bl	800cef8 <USB_StopDevice>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e009      	b.n	80027ac <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f00a fc38 	bl	800d012 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b08d      	sub	sp, #52	; 0x34
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f00a fccc 	bl	800d168 <USB_GetMode>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 83ca 	bne.w	8002f6c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f00a fc30 	bl	800d042 <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 83c0 	beq.w	8002f6a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f00a fc27 	bl	800d042 <USB_ReadInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d107      	bne.n	800280e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f002 0202 	and.w	r2, r2, #2
 800280c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f00a fc15 	bl	800d042 <USB_ReadInterrupts>
 8002818:	4603      	mov	r3, r0
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d161      	bne.n	80028e6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699a      	ldr	r2, [r3, #24]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0210 	bic.w	r2, r2, #16
 8002830:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f003 020f 	and.w	r2, r3, #15
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	3304      	adds	r3, #4
 8002850:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	0c5b      	lsrs	r3, r3, #17
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	2b02      	cmp	r3, #2
 800285c:	d124      	bne.n	80028a8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d035      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002878:	b29b      	uxth	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	6a38      	ldr	r0, [r7, #32]
 800287e:	f00a fa3e 	bl	800ccfe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800288e:	441a      	add	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a0:	441a      	add	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	619a      	str	r2, [r3, #24]
 80028a6:	e016      	b.n	80028d6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	0c5b      	lsrs	r3, r3, #17
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d110      	bne.n	80028d6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028ba:	2208      	movs	r2, #8
 80028bc:	4619      	mov	r1, r3
 80028be:	6a38      	ldr	r0, [r7, #32]
 80028c0:	f00a fa1d 	bl	800ccfe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	699a      	ldr	r2, [r3, #24]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d0:	441a      	add	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0210 	orr.w	r2, r2, #16
 80028e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f00a fba9 	bl	800d042 <USB_ReadInterrupts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028fa:	d16e      	bne.n	80029da <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f00a fbaf 	bl	800d068 <USB_ReadDevAllOutEpInterrupt>
 800290a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800290c:	e062      	b.n	80029d4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d057      	beq.n	80029c8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f00a fbd4 	bl	800d0d0 <USB_ReadDevOutEPInterrupt>
 8002928:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00c      	beq.n	800294e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002940:	461a      	mov	r2, r3
 8002942:	2301      	movs	r3, #1
 8002944:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fe0b 	bl	8003564 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00c      	beq.n	8002972 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002964:	461a      	mov	r2, r3
 8002966:	2308      	movs	r3, #8
 8002968:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800296a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 ff05 	bl	800377c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002988:	461a      	mov	r2, r3
 800298a:	2310      	movs	r3, #16
 800298c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a4:	461a      	mov	r2, r3
 80029a6:	2320      	movs	r3, #32
 80029a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c0:	461a      	mov	r2, r3
 80029c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	3301      	adds	r3, #1
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d199      	bne.n	800290e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f00a fb2f 	bl	800d042 <USB_ReadInterrupts>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029ee:	f040 80c0 	bne.w	8002b72 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f00a fb50 	bl	800d09c <USB_ReadDevAllInEpInterrupt>
 80029fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a02:	e0b2      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80a7 	beq.w	8002b5e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00a fb76 	bl	800d10c <USB_ReadDevInEPInterrupt>
 8002a20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d057      	beq.n	8002adc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	2201      	movs	r2, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69f9      	ldr	r1, [r7, #28]
 8002a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2301      	movs	r3, #1
 8002a60:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d132      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3348      	adds	r3, #72	; 0x48
 8002a7a:	6819      	ldr	r1, [r3, #0]
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4403      	add	r3, r0
 8002a8a:	3344      	adds	r3, #68	; 0x44
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4419      	add	r1, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4403      	add	r3, r0
 8002a9e:	3348      	adds	r3, #72	; 0x48
 8002aa0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d113      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x31c>
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3350      	adds	r3, #80	; 0x50
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d108      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2101      	movs	r1, #1
 8002acc:	f00a fb7e 	bl	800d1cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f012 fa4b 	bl	8014f72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af2:	461a      	mov	r2, r3
 8002af4:	2308      	movs	r3, #8
 8002af6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b0e:	461a      	mov	r2, r3
 8002b10:	2310      	movs	r3, #16
 8002b12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2340      	movs	r3, #64	; 0x40
 8002b2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b46:	461a      	mov	r2, r3
 8002b48:	2302      	movs	r3, #2
 8002b4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fc75 	bl	8003448 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	3301      	adds	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f47f af49 	bne.w	8002a04 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f00a fa63 	bl	800d042 <USB_ReadInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b86:	d122      	bne.n	8002bce <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d108      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bae:	2100      	movs	r1, #0
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fea5 	bl	8003900 <HAL_PCDEx_LPM_Callback>
 8002bb6:	e002      	b.n	8002bbe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f012 fa51 	bl	8015060 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f00a fa35 	bl	800d042 <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be2:	d112      	bne.n	8002c0a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f012 fa0d 	bl	8015014 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c08:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f00a fa17 	bl	800d042 <USB_ReadInterrupts>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1e:	d121      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002c2e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d111      	bne.n	8002c5e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002c54:	2101      	movs	r1, #1
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fe52 	bl	8003900 <HAL_PCDEx_LPM_Callback>
 8002c5c:	e002      	b.n	8002c64 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f012 f9d8 	bl	8015014 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f00a f9ea 	bl	800d042 <USB_ReadInterrupts>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c78:	f040 80c7 	bne.w	8002e0a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2110      	movs	r1, #16
 8002c96:	4618      	mov	r0, r3
 8002c98:	f009 fac6 	bl	800c228 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca0:	e056      	b.n	8002d50 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cb4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc6:	0151      	lsls	r1, r2, #5
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	440a      	add	r2, r1
 8002ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cd4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce6:	0151      	lsls	r1, r2, #5
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	440a      	add	r2, r1
 8002cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cf4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d02:	461a      	mov	r2, r3
 8002d04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d08:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d3a:	0151      	lsls	r1, r2, #5
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	440a      	add	r2, r1
 8002d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d48:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d3a3      	bcc.n	8002ca2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d68:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d86:	f043 030b 	orr.w	r3, r3, #11
 8002d8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9c:	f043 030b 	orr.w	r3, r3, #11
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	e015      	b.n	8002dd0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db2:	4619      	mov	r1, r3
 8002db4:	f242 032b 	movw	r3, #8235	; 0x202b
 8002db8:	4313      	orrs	r3, r2
 8002dba:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dca:	f043 030b 	orr.w	r3, r3, #11
 8002dce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002de2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002df4:	461a      	mov	r2, r3
 8002df6:	f00a f9e9 	bl	800d1cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f00a f917 	bl	800d042 <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1e:	d124      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f00a f9ad 	bl	800d184 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f009 fa5b 	bl	800c2ea <USB_GetDevSpeed>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681c      	ldr	r4, [r3, #0]
 8002e40:	f001 fcb4 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 8002e44:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f008 ff9e 	bl	800bd90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f012 f8b4 	bl	8014fc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f00a f8e7 	bl	800d042 <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d10a      	bne.n	8002e94 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f012 f891 	bl	8014fa6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f002 0208 	and.w	r2, r2, #8
 8002e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f00a f8d2 	bl	800d042 <USB_ReadInterrupts>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea8:	d10f      	bne.n	8002eca <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f012 f8f3 	bl	80150a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f00a f8b7 	bl	800d042 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ede:	d10f      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f012 f8c6 	bl	801507c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f00a f89c 	bl	800d042 <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f14:	d10a      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f012 f8d4 	bl	80150c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f00a f886 	bl	800d042 <USB_ReadInterrupts>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d115      	bne.n	8002f6c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f012 f8c4 	bl	80150e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	e000      	b.n	8002f6c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002f6a:	bf00      	nop
    }
  }
}
 8002f6c:	3734      	adds	r7, #52	; 0x34
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}

08002f72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_PCD_SetAddress+0x1a>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e013      	b.n	8002fb4 <HAL_PCD_SetAddress+0x42>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f009 fff6 	bl	800cf96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	70fb      	strb	r3, [r7, #3]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	803b      	strh	r3, [r7, #0]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	da0f      	bge.n	8003002 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	3338      	adds	r3, #56	; 0x38
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	705a      	strb	r2, [r3, #1]
 8003000:	e00f      	b.n	8003022 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 020f 	and.w	r2, r3, #15
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800302e:	883a      	ldrh	r2, [r7, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	78ba      	ldrb	r2, [r7, #2]
 8003038:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d102      	bne.n	8003058 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_PCD_EP_Open+0xaa>
 8003062:	2302      	movs	r3, #2
 8003064:	e00e      	b.n	8003084 <HAL_PCD_EP_Open+0xc8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68f9      	ldr	r1, [r7, #12]
 8003074:	4618      	mov	r0, r3
 8003076:	f009 f95d 	bl	800c334 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003082:	7afb      	ldrb	r3, [r7, #11]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800309c:	2b00      	cmp	r3, #0
 800309e:	da0f      	bge.n	80030c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	3338      	adds	r3, #56	; 0x38
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	3304      	adds	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	705a      	strb	r2, [r3, #1]
 80030be:	e00f      	b.n	80030e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 020f 	and.w	r2, r3, #15
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	3304      	adds	r3, #4
 80030d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_PCD_EP_Close+0x6e>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e00e      	b.n	8003118 <HAL_PCD_EP_Close+0x8c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68f9      	ldr	r1, [r7, #12]
 8003108:	4618      	mov	r0, r3
 800310a:	f009 f99b 	bl	800c444 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	460b      	mov	r3, r1
 800312e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003130:	7afb      	ldrb	r3, [r7, #11]
 8003132:	f003 020f 	and.w	r2, r3, #15
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	3304      	adds	r3, #4
 8003148:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2200      	movs	r2, #0
 8003160:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003162:	7afb      	ldrb	r3, [r7, #11]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	b2da      	uxtb	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d102      	bne.n	800317c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800317c:	7afb      	ldrb	r3, [r7, #11]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	f009 fc26 	bl	800c9e4 <USB_EP0StartXfer>
 8003198:	e008      	b.n	80031ac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	6979      	ldr	r1, [r7, #20]
 80031a8:	f009 f9d0 	bl	800c54c <USB_EPStartXfer>
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 020f 	and.w	r2, r3, #15
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80031d8:	681b      	ldr	r3, [r3, #0]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	460b      	mov	r3, r1
 80031f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f6:	7afb      	ldrb	r3, [r7, #11]
 80031f8:	f003 020f 	and.w	r2, r3, #15
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	3338      	adds	r3, #56	; 0x38
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2201      	movs	r2, #1
 8003224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	b2da      	uxtb	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003240:	7afb      	ldrb	r3, [r7, #11]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	6979      	ldr	r1, [r7, #20]
 8003258:	f009 fbc4 	bl	800c9e4 <USB_EP0StartXfer>
 800325c:	e008      	b.n	8003270 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	6979      	ldr	r1, [r7, #20]
 800326c:	f009 f96e 	bl	800c54c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d901      	bls.n	8003298 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e050      	b.n	800333a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329c:	2b00      	cmp	r3, #0
 800329e:	da0f      	bge.n	80032c0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 020f 	and.w	r2, r3, #15
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	3338      	adds	r3, #56	; 0x38
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	3304      	adds	r3, #4
 80032b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	705a      	strb	r2, [r3, #1]
 80032be:	e00d      	b.n	80032dc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_PCD_EP_SetStall+0x82>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e01e      	b.n	800333a <HAL_PCD_EP_SetStall+0xc0>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	4618      	mov	r0, r3
 800330c:	f009 fd20 	bl	800cd50 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	b2d9      	uxtb	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800332a:	461a      	mov	r2, r3
 800332c:	f009 ff4e 	bl	800d1cc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	f003 020f 	and.w	r2, r3, #15
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d901      	bls.n	8003360 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e042      	b.n	80033e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003364:	2b00      	cmp	r3, #0
 8003366:	da0f      	bge.n	8003388 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 020f 	and.w	r2, r3, #15
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	3338      	adds	r3, #56	; 0x38
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	3304      	adds	r3, #4
 800337e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	705a      	strb	r2, [r3, #1]
 8003386:	e00f      	b.n	80033a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f003 020f 	and.w	r2, r3, #15
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	3304      	adds	r3, #4
 80033a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_PCD_EP_ClrStall+0x86>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e00e      	b.n	80033e6 <HAL_PCD_EP_ClrStall+0xa4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68f9      	ldr	r1, [r7, #12]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f009 fd28 	bl	800ce2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_PCD_EP_Flush+0x1a>
 8003404:	2302      	movs	r3, #2
 8003406:	e01b      	b.n	8003440 <HAL_PCD_EP_Flush+0x52>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003414:	2b00      	cmp	r3, #0
 8003416:	da09      	bge.n	800342c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f008 feff 	bl	800c228 <USB_FlushTxFifo>
 800342a:	e004      	b.n	8003436 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f008 ff1f 	bl	800c274 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	3338      	adds	r3, #56	; 0x38
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	4413      	add	r3, r2
 800346c:	3304      	adds	r3, #4
 800346e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	429a      	cmp	r2, r3
 800347a:	d901      	bls.n	8003480 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e06c      	b.n	800355a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	429a      	cmp	r2, r3
 8003494:	d902      	bls.n	800349c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	3303      	adds	r3, #3
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034a4:	e02b      	b.n	80034fe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d902      	bls.n	80034c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3303      	adds	r3, #3
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	68d9      	ldr	r1, [r3, #12]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	4603      	mov	r3, r0
 80034e0:	6978      	ldr	r0, [r7, #20]
 80034e2:	f009 fbd7 	bl	800cc94 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	441a      	add	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	441a      	add	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	b29b      	uxth	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	429a      	cmp	r2, r3
 8003512:	d809      	bhi.n	8003528 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800351c:	429a      	cmp	r2, r3
 800351e:	d203      	bcs.n	8003528 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1be      	bne.n	80034a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	429a      	cmp	r2, r3
 8003532:	d811      	bhi.n	8003558 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	2201      	movs	r2, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	43db      	mvns	r3, r3
 800354e:	6939      	ldr	r1, [r7, #16]
 8003550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003554:	4013      	ands	r3, r2
 8003556:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	333c      	adds	r3, #60	; 0x3c
 800357c:	3304      	adds	r3, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b01      	cmp	r3, #1
 8003598:	f040 80a0 	bne.w	80036dc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d015      	beq.n	80035d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4a72      	ldr	r2, [pc, #456]	; (8003774 <PCD_EP_OutXfrComplete_int+0x210>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	f240 80dd 	bls.w	800376a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80d7 	beq.w	800376a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c8:	461a      	mov	r2, r3
 80035ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ce:	6093      	str	r3, [r2, #8]
 80035d0:	e0cb      	b.n	800376a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e8:	461a      	mov	r2, r3
 80035ea:	2320      	movs	r3, #32
 80035ec:	6093      	str	r3, [r2, #8]
 80035ee:	e0bc      	b.n	800376a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 80b7 	bne.w	800376a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <PCD_EP_OutXfrComplete_int+0x210>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d90f      	bls.n	8003624 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361a:	461a      	mov	r2, r3
 800361c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003620:	6093      	str	r3, [r2, #8]
 8003622:	e0a2      	b.n	800376a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003636:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	0159      	lsls	r1, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	440b      	add	r3, r1
 8003640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800364a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4403      	add	r3, r0
 800365a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800365e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4403      	add	r3, r0
 8003682:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4419      	add	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4403      	add	r3, r0
 8003698:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800369c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d114      	bne.n	80036ce <PCD_EP_OutXfrComplete_int+0x16a>
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d108      	bne.n	80036ce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036c6:	461a      	mov	r2, r3
 80036c8:	2101      	movs	r1, #1
 80036ca:	f009 fd7f 	bl	800d1cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	4619      	mov	r1, r3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f011 fc31 	bl	8014f3c <HAL_PCD_DataOutStageCallback>
 80036da:	e046      	b.n	800376a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4a26      	ldr	r2, [pc, #152]	; (8003778 <PCD_EP_OutXfrComplete_int+0x214>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d124      	bne.n	800372e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	461a      	mov	r2, r3
 80036fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003700:	6093      	str	r3, [r2, #8]
 8003702:	e032      	b.n	800376a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371a:	461a      	mov	r2, r3
 800371c:	2320      	movs	r3, #32
 800371e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f011 fc08 	bl	8014f3c <HAL_PCD_DataOutStageCallback>
 800372c:	e01d      	b.n	800376a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d114      	bne.n	800375e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d108      	bne.n	800375e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003756:	461a      	mov	r2, r3
 8003758:	2100      	movs	r1, #0
 800375a:	f009 fd37 	bl	800d1cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f011 fbe9 	bl	8014f3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	4f54300a 	.word	0x4f54300a
 8003778:	4f54310a 	.word	0x4f54310a

0800377c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	333c      	adds	r3, #60	; 0x3c
 8003794:	3304      	adds	r3, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a15      	ldr	r2, [pc, #84]	; (8003804 <PCD_EP_OutSetupPacket_int+0x88>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d90e      	bls.n	80037d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c8:	461a      	mov	r2, r3
 80037ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f011 fba1 	bl	8014f18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <PCD_EP_OutSetupPacket_int+0x88>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d90c      	bls.n	80037f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037f0:	461a      	mov	r2, r3
 80037f2:	2101      	movs	r1, #1
 80037f4:	f009 fcea 	bl	800d1cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	4f54300a 	.word	0x4f54300a

08003808 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
 8003814:	4613      	mov	r3, r2
 8003816:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d107      	bne.n	8003836 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003826:	883b      	ldrh	r3, [r7, #0]
 8003828:	0419      	lsls	r1, r3, #16
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	430a      	orrs	r2, r1
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
 8003834:	e028      	b.n	8003888 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	4413      	add	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]
 8003848:	e00d      	b.n	8003866 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	3340      	adds	r3, #64	; 0x40
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4413      	add	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	3301      	adds	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	3b01      	subs	r3, #1
 800386c:	429a      	cmp	r2, r3
 800386e:	d3ec      	bcc.n	800384a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003870:	883b      	ldrh	r3, [r7, #0]
 8003872:	0418      	lsls	r0, r3, #16
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6819      	ldr	r1, [r3, #0]
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	3b01      	subs	r3, #1
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	4302      	orrs	r2, r0
 8003880:	3340      	adds	r3, #64	; 0x40
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_PCDEx_ActivateLPM+0x44>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	10000003 	.word	0x10000003

08003900 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_PWREx_ConfigSupply+0x70>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b04      	cmp	r3, #4
 800392a:	d00a      	beq.n	8003942 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800392c:	4b16      	ldr	r3, [pc, #88]	; (8003988 <HAL_PWREx_ConfigSupply+0x70>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	429a      	cmp	r2, r3
 8003938:	d001      	beq.n	800393e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e01f      	b.n	800397e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e01d      	b.n	800397e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003942:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_PWREx_ConfigSupply+0x70>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 0207 	bic.w	r2, r3, #7
 800394a:	490f      	ldr	r1, [pc, #60]	; (8003988 <HAL_PWREx_ConfigSupply+0x70>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4313      	orrs	r3, r2
 8003950:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003952:	f7fd fe13 	bl	800157c <HAL_GetTick>
 8003956:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003958:	e009      	b.n	800396e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800395a:	f7fd fe0f 	bl	800157c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003968:	d901      	bls.n	800396e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e007      	b.n	800397e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_PWREx_ConfigSupply+0x70>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397a:	d1ee      	bne.n	800395a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	58024800 	.word	0x58024800

0800398c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800399a:	60d3      	str	r3, [r2, #12]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	58024800 	.word	0x58024800

080039ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08c      	sub	sp, #48	; 0x30
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e3c4      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 8087 	beq.w	8003ada <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039cc:	4ba2      	ldr	r3, [pc, #648]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039d6:	4ba0      	ldr	r3, [pc, #640]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d007      	beq.n	80039f2 <HAL_RCC_OscConfig+0x46>
 80039e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e4:	2b18      	cmp	r3, #24
 80039e6:	d110      	bne.n	8003a0a <HAL_RCC_OscConfig+0x5e>
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d10b      	bne.n	8003a0a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f2:	4b99      	ldr	r3, [pc, #612]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d06c      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x12c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d168      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e39e      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x76>
 8003a14:	4b90      	ldr	r3, [pc, #576]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a8f      	ldr	r2, [pc, #572]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	e02e      	b.n	8003a80 <HAL_RCC_OscConfig+0xd4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x98>
 8003a2a:	4b8b      	ldr	r3, [pc, #556]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a8a      	ldr	r2, [pc, #552]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a87      	ldr	r2, [pc, #540]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e01d      	b.n	8003a80 <HAL_RCC_OscConfig+0xd4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCC_OscConfig+0xbc>
 8003a4e:	4b82      	ldr	r3, [pc, #520]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a81      	ldr	r2, [pc, #516]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a7e      	ldr	r2, [pc, #504]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e00b      	b.n	8003a80 <HAL_RCC_OscConfig+0xd4>
 8003a68:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a7a      	ldr	r2, [pc, #488]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b78      	ldr	r3, [pc, #480]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a77      	ldr	r2, [pc, #476]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d013      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fd fd78 	bl	800157c <HAL_GetTick>
 8003a8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a90:	f7fd fd74 	bl	800157c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	; 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e352      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aa2:	4b6d      	ldr	r3, [pc, #436]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0xe4>
 8003aae:	e014      	b.n	8003ada <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fd64 	bl	800157c <HAL_GetTick>
 8003ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fd fd60 	bl	800157c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e33e      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aca:	4b63      	ldr	r3, [pc, #396]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x10c>
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 8092 	beq.w	8003c0c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ae8:	4b5b      	ldr	r3, [pc, #364]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003af2:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_RCC_OscConfig+0x162>
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	2b18      	cmp	r3, #24
 8003b02:	d12d      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1b4>
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d128      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b0e:	4b52      	ldr	r3, [pc, #328]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x17a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e310      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	f7fd fd57 	bl	80015d8 <HAL_GetREVID>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d80a      	bhi.n	8003b4a <HAL_RCC_OscConfig+0x19e>
 8003b34:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	031b      	lsls	r3, r3, #12
 8003b42:	4945      	ldr	r1, [pc, #276]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b48:	e060      	b.n	8003c0c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4a:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	493f      	ldr	r1, [pc, #252]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b5e:	e055      	b.n	8003c0c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d038      	beq.n	8003bda <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b68:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 0219 	bic.w	r2, r3, #25
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4938      	ldr	r1, [pc, #224]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fcff 	bl	800157c <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fd fcfb 	bl	800157c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e2d9      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b94:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba0:	f7fd fd1a 	bl	80015d8 <HAL_GetREVID>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d80a      	bhi.n	8003bc4 <HAL_RCC_OscConfig+0x218>
 8003bae:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	031b      	lsls	r3, r3, #12
 8003bbc:	4926      	ldr	r1, [pc, #152]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
 8003bc2:	e023      	b.n	8003c0c <HAL_RCC_OscConfig+0x260>
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	4921      	ldr	r1, [pc, #132]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
 8003bd8:	e018      	b.n	8003c0c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bda:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fd fcc9 	bl	800157c <HAL_GetTick>
 8003bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bee:	f7fd fcc5 	bl	800157c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e2a3      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c00:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f0      	bne.n	8003bee <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8091 	beq.w	8003d3c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d007      	beq.n	8003c40 <HAL_RCC_OscConfig+0x294>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b18      	cmp	r3, #24
 8003c34:	d12f      	bne.n	8003c96 <HAL_RCC_OscConfig+0x2ea>
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d12a      	bne.n	8003c96 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <HAL_RCC_OscConfig+0x2b0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	2b80      	cmp	r3, #128	; 0x80
 8003c52:	d003      	beq.n	8003c5c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e277      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
 8003c58:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c5c:	f7fd fcbc 	bl	80015d8 <HAL_GetREVID>
 8003c60:	4602      	mov	r2, r0
 8003c62:	f241 0303 	movw	r3, #4099	; 0x1003
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d80a      	bhi.n	8003c80 <HAL_RCC_OscConfig+0x2d4>
 8003c6a:	4ba2      	ldr	r3, [pc, #648]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	069b      	lsls	r3, r3, #26
 8003c78:	499e      	ldr	r1, [pc, #632]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c7e:	e05d      	b.n	8003d3c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c80:	4b9c      	ldr	r3, [pc, #624]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	4999      	ldr	r1, [pc, #612]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c94:	e052      	b.n	8003d3c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d035      	beq.n	8003d0a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c9e:	4b95      	ldr	r3, [pc, #596]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a94      	ldr	r2, [pc, #592]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fd fc67 	bl	800157c <HAL_GetTick>
 8003cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cb2:	f7fd fc63 	bl	800157c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e241      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cc4:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cd0:	f7fd fc82 	bl	80015d8 <HAL_GetREVID>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d80a      	bhi.n	8003cf4 <HAL_RCC_OscConfig+0x348>
 8003cde:	4b85      	ldr	r3, [pc, #532]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	069b      	lsls	r3, r3, #26
 8003cec:	4981      	ldr	r1, [pc, #516]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]
 8003cf2:	e023      	b.n	8003d3c <HAL_RCC_OscConfig+0x390>
 8003cf4:	4b7f      	ldr	r3, [pc, #508]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	497c      	ldr	r1, [pc, #496]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60cb      	str	r3, [r1, #12]
 8003d08:	e018      	b.n	8003d3c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d0a:	4b7a      	ldr	r3, [pc, #488]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a79      	ldr	r2, [pc, #484]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fd fc31 	bl	800157c <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d1e:	f7fd fc2d 	bl	800157c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e20b      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d30:	4b70      	ldr	r3, [pc, #448]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d036      	beq.n	8003db6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d019      	beq.n	8003d84 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d50:	4b68      	ldr	r3, [pc, #416]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	4a67      	ldr	r2, [pc, #412]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fd fc0e 	bl	800157c <HAL_GetTick>
 8003d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fd fc0a 	bl	800157c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e1e8      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d76:	4b5f      	ldr	r3, [pc, #380]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x3b8>
 8003d82:	e018      	b.n	8003db6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d84:	4b5b      	ldr	r3, [pc, #364]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d88:	4a5a      	ldr	r2, [pc, #360]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fd fbf4 	bl	800157c <HAL_GetTick>
 8003d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fd fbf0 	bl	800157c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e1ce      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003daa:	4b52      	ldr	r3, [pc, #328]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d036      	beq.n	8003e30 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d019      	beq.n	8003dfe <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a49      	ldr	r2, [pc, #292]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fbd1 	bl	800157c <HAL_GetTick>
 8003dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dde:	f7fd fbcd 	bl	800157c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e1ab      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003df0:	4b40      	ldr	r3, [pc, #256]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x432>
 8003dfc:	e018      	b.n	8003e30 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dfe:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3c      	ldr	r2, [pc, #240]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e0a:	f7fd fbb7 	bl	800157c <HAL_GetTick>
 8003e0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e12:	f7fd fbb3 	bl	800157c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e191      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e24:	4b33      	ldr	r3, [pc, #204]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f0      	bne.n	8003e12 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8086 	beq.w	8003f4a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_RCC_OscConfig+0x54c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <HAL_RCC_OscConfig+0x54c>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e4a:	f7fd fb97 	bl	800157c <HAL_GetTick>
 8003e4e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e52:	f7fd fb93 	bl	800157c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b64      	cmp	r3, #100	; 0x64
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e171      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e64:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_OscConfig+0x54c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x4da>
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6713      	str	r3, [r2, #112]	; 0x70
 8003e84:	e02d      	b.n	8003ee2 <HAL_RCC_OscConfig+0x536>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4fc>
 8003e8e:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9a:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003ea0:	f023 0304 	bic.w	r3, r3, #4
 8003ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea6:	e01c      	b.n	8003ee2 <HAL_RCC_OscConfig+0x536>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	d10c      	bne.n	8003eca <HAL_RCC_OscConfig+0x51e>
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003eb6:	f043 0304 	orr.w	r3, r3, #4
 8003eba:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	e00b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x536>
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed6:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a06      	ldr	r2, [pc, #24]	; (8003ef4 <HAL_RCC_OscConfig+0x548>)
 8003edc:	f023 0304 	bic.w	r3, r3, #4
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01a      	beq.n	8003f20 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eea:	f7fd fb47 	bl	800157c <HAL_GetTick>
 8003eee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef0:	e00f      	b.n	8003f12 <HAL_RCC_OscConfig+0x566>
 8003ef2:	bf00      	nop
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fd fb3e 	bl	800157c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e11a      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f12:	4b8f      	ldr	r3, [pc, #572]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ee      	beq.n	8003efc <HAL_RCC_OscConfig+0x550>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd fb2c 	bl	800157c <HAL_GetTick>
 8003f24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fd fb28 	bl	800157c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e104      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f3e:	4b84      	ldr	r3, [pc, #528]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ee      	bne.n	8003f28 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80f9 	beq.w	8004146 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f54:	4b7e      	ldr	r3, [pc, #504]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f5c:	2b18      	cmp	r3, #24
 8003f5e:	f000 80b4 	beq.w	80040ca <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	f040 8095 	bne.w	8004096 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6c:	4b78      	ldr	r3, [pc, #480]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a77      	ldr	r2, [pc, #476]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fb00 	bl	800157c <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fd fafc 	bl	800157c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e0da      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f92:	4b6f      	ldr	r3, [pc, #444]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9e:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fa2:	4b6c      	ldr	r3, [pc, #432]	; (8004154 <HAL_RCC_OscConfig+0x7a8>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fae:	0112      	lsls	r2, r2, #4
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	4967      	ldr	r1, [pc, #412]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	628b      	str	r3, [r1, #40]	; 0x28
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	025b      	lsls	r3, r3, #9
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	061b      	lsls	r3, r3, #24
 8003fe4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fe8:	4959      	ldr	r1, [pc, #356]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003fee:	4b58      	ldr	r3, [pc, #352]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	4a57      	ldr	r2, [pc, #348]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ffa:	4b55      	ldr	r3, [pc, #340]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8003ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffe:	4b56      	ldr	r3, [pc, #344]	; (8004158 <HAL_RCC_OscConfig+0x7ac>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004006:	00d2      	lsls	r2, r2, #3
 8004008:	4951      	ldr	r1, [pc, #324]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800400e:	4b50      	ldr	r3, [pc, #320]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	f023 020c 	bic.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	494d      	ldr	r1, [pc, #308]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004020:	4b4b      	ldr	r3, [pc, #300]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	f023 0202 	bic.w	r2, r3, #2
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	4948      	ldr	r1, [pc, #288]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 800402e:	4313      	orrs	r3, r2
 8004030:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	4a46      	ldr	r2, [pc, #280]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800403e:	4b44      	ldr	r3, [pc, #272]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	4a43      	ldr	r2, [pc, #268]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004048:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800404a:	4b41      	ldr	r3, [pc, #260]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	4a40      	ldr	r2, [pc, #256]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004054:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004056:	4b3e      	ldr	r3, [pc, #248]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	4a3d      	ldr	r2, [pc, #244]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004062:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a3a      	ldr	r2, [pc, #232]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fd fa85 	bl	800157c <HAL_GetTick>
 8004072:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004076:	f7fd fa81 	bl	800157c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e05f      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004088:	4b31      	ldr	r3, [pc, #196]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x6ca>
 8004094:	e057      	b.n	8004146 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004096:	4b2e      	ldr	r3, [pc, #184]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2d      	ldr	r2, [pc, #180]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 800409c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fd fa6b 	bl	800157c <HAL_GetTick>
 80040a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fd fa67 	bl	800157c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e045      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040bc:	4b24      	ldr	r3, [pc, #144]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x6fe>
 80040c8:	e03d      	b.n	8004146 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040ca:	4b21      	ldr	r3, [pc, #132]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040d0:	4b1f      	ldr	r3, [pc, #124]	; (8004150 <HAL_RCC_OscConfig+0x7a4>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d031      	beq.n	8004142 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f003 0203 	and.w	r2, r3, #3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d12a      	bne.n	8004142 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d122      	bne.n	8004142 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d11a      	bne.n	8004142 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	0a5b      	lsrs	r3, r3, #9
 8004110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d111      	bne.n	8004142 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d108      	bne.n	8004142 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	0e1b      	lsrs	r3, r3, #24
 8004134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800413e:	429a      	cmp	r2, r3
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3730      	adds	r7, #48	; 0x30
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	58024400 	.word	0x58024400
 8004154:	fffffc0c 	.word	0xfffffc0c
 8004158:	ffff0007 	.word	0xffff0007

0800415c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e19c      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004170:	4b8a      	ldr	r3, [pc, #552]	; (800439c <HAL_RCC_ClockConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d910      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b87      	ldr	r3, [pc, #540]	; (800439c <HAL_RCC_ClockConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 020f 	bic.w	r2, r3, #15
 8004186:	4985      	ldr	r1, [pc, #532]	; (800439c <HAL_RCC_ClockConfig+0x240>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b83      	ldr	r3, [pc, #524]	; (800439c <HAL_RCC_ClockConfig+0x240>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e184      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	4b7b      	ldr	r3, [pc, #492]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d908      	bls.n	80041ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041bc:	4b78      	ldr	r3, [pc, #480]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4975      	ldr	r1, [pc, #468]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d010      	beq.n	80041fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	4b70      	ldr	r3, [pc, #448]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d908      	bls.n	80041fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ea:	4b6d      	ldr	r3, [pc, #436]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	496a      	ldr	r1, [pc, #424]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d010      	beq.n	800422a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004214:	429a      	cmp	r2, r3
 8004216:	d908      	bls.n	800422a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004218:	4b61      	ldr	r3, [pc, #388]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	495e      	ldr	r1, [pc, #376]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004226:	4313      	orrs	r3, r2
 8004228:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d010      	beq.n	8004258 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	4b59      	ldr	r3, [pc, #356]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004242:	429a      	cmp	r2, r3
 8004244:	d908      	bls.n	8004258 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004246:	4b56      	ldr	r3, [pc, #344]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4953      	ldr	r1, [pc, #332]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004254:	4313      	orrs	r3, r2
 8004256:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	4b4d      	ldr	r3, [pc, #308]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	429a      	cmp	r2, r3
 8004272:	d908      	bls.n	8004286 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b4a      	ldr	r3, [pc, #296]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f023 020f 	bic.w	r2, r3, #15
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4947      	ldr	r1, [pc, #284]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004282:	4313      	orrs	r3, r2
 8004284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d055      	beq.n	800433e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004292:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4940      	ldr	r1, [pc, #256]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042ac:	4b3c      	ldr	r3, [pc, #240]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d121      	bne.n	80042fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0f6      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d107      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042c4:	4b36      	ldr	r3, [pc, #216]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d115      	bne.n	80042fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0ea      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d107      	bne.n	80042ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042dc:	4b30      	ldr	r3, [pc, #192]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0de      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ec:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0d6      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042fc:	4b28      	ldr	r3, [pc, #160]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f023 0207 	bic.w	r2, r3, #7
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4925      	ldr	r1, [pc, #148]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800430a:	4313      	orrs	r3, r2
 800430c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430e:	f7fd f935 	bl	800157c <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004314:	e00a      	b.n	800432c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004316:	f7fd f931 	bl	800157c <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	; 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e0be      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432c:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	429a      	cmp	r2, r3
 800433c:	d1eb      	bne.n	8004316 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d010      	beq.n	800436c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	429a      	cmp	r2, r3
 8004358:	d208      	bcs.n	800436c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f023 020f 	bic.w	r2, r3, #15
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	490e      	ldr	r1, [pc, #56]	; (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004368:	4313      	orrs	r3, r2
 800436a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_ClockConfig+0x240>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d214      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_RCC_ClockConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 020f 	bic.w	r2, r3, #15
 8004382:	4906      	ldr	r1, [pc, #24]	; (800439c <HAL_RCC_ClockConfig+0x240>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b04      	ldr	r3, [pc, #16]	; (800439c <HAL_RCC_ClockConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e086      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
 800439c:	52002000 	.word	0x52002000
 80043a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d010      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043bc:	429a      	cmp	r2, r3
 80043be:	d208      	bcs.n	80043d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043c0:	4b3c      	ldr	r3, [pc, #240]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	4939      	ldr	r1, [pc, #228]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d010      	beq.n	8004400 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d208      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	492e      	ldr	r1, [pc, #184]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d010      	beq.n	800442e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004418:	429a      	cmp	r2, r3
 800441a:	d208      	bcs.n	800442e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	4922      	ldr	r1, [pc, #136]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 800442a:	4313      	orrs	r3, r2
 800442c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d010      	beq.n	800445c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004446:	429a      	cmp	r2, r3
 8004448:	d208      	bcs.n	800445c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800444a:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	4917      	ldr	r1, [pc, #92]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 8004458:	4313      	orrs	r3, r2
 800445a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800445c:	f000 f834 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8004460:	4601      	mov	r1, r0
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <HAL_RCC_ClockConfig+0x35c>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	fa21 f303 	lsr.w	r3, r1, r3
 8004478:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800447a:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <HAL_RCC_ClockConfig+0x358>)
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	4a0d      	ldr	r2, [pc, #52]	; (80044b8 <HAL_RCC_ClockConfig+0x35c>)
 8004484:	5cd3      	ldrb	r3, [r2, r3]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <HAL_RCC_ClockConfig+0x360>)
 8004492:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004494:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <HAL_RCC_ClockConfig+0x364>)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800449a:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <HAL_RCC_ClockConfig+0x368>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd f822 	bl	80014e8 <HAL_InitTick>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	58024400 	.word	0x58024400
 80044b8:	080157cc 	.word	0x080157cc
 80044bc:	24000010 	.word	0x24000010
 80044c0:	2400000c 	.word	0x2400000c
 80044c4:	24000014 	.word	0x24000014

080044c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ce:	4baf      	ldr	r3, [pc, #700]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044d6:	2b18      	cmp	r3, #24
 80044d8:	f200 814e 	bhi.w	8004778 <HAL_RCC_GetSysClockFreq+0x2b0>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	08004549 	.word	0x08004549
 80044e8:	08004779 	.word	0x08004779
 80044ec:	08004779 	.word	0x08004779
 80044f0:	08004779 	.word	0x08004779
 80044f4:	08004779 	.word	0x08004779
 80044f8:	08004779 	.word	0x08004779
 80044fc:	08004779 	.word	0x08004779
 8004500:	08004779 	.word	0x08004779
 8004504:	0800456f 	.word	0x0800456f
 8004508:	08004779 	.word	0x08004779
 800450c:	08004779 	.word	0x08004779
 8004510:	08004779 	.word	0x08004779
 8004514:	08004779 	.word	0x08004779
 8004518:	08004779 	.word	0x08004779
 800451c:	08004779 	.word	0x08004779
 8004520:	08004779 	.word	0x08004779
 8004524:	08004575 	.word	0x08004575
 8004528:	08004779 	.word	0x08004779
 800452c:	08004779 	.word	0x08004779
 8004530:	08004779 	.word	0x08004779
 8004534:	08004779 	.word	0x08004779
 8004538:	08004779 	.word	0x08004779
 800453c:	08004779 	.word	0x08004779
 8004540:	08004779 	.word	0x08004779
 8004544:	0800457b 	.word	0x0800457b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004548:	4b90      	ldr	r3, [pc, #576]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004554:	4b8d      	ldr	r3, [pc, #564]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	4a8c      	ldr	r2, [pc, #560]	; (8004790 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
 8004564:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004566:	e10a      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004568:	4b89      	ldr	r3, [pc, #548]	; (8004790 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800456a:	61bb      	str	r3, [r7, #24]
    break;
 800456c:	e107      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800456e:	4b89      	ldr	r3, [pc, #548]	; (8004794 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004570:	61bb      	str	r3, [r7, #24]
    break;
 8004572:	e104      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004574:	4b88      	ldr	r3, [pc, #544]	; (8004798 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004576:	61bb      	str	r3, [r7, #24]
    break;
 8004578:	e101      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800457a:	4b84      	ldr	r3, [pc, #528]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004584:	4b81      	ldr	r3, [pc, #516]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800458e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004590:	4b7e      	ldr	r3, [pc, #504]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800459a:	4b7c      	ldr	r3, [pc, #496]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	08db      	lsrs	r3, r3, #3
 80045a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80da 	beq.w	8004772 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d05a      	beq.n	800467a <HAL_RCC_GetSysClockFreq+0x1b2>
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d302      	bcc.n	80045ce <HAL_RCC_GetSysClockFreq+0x106>
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d078      	beq.n	80046be <HAL_RCC_GetSysClockFreq+0x1f6>
 80045cc:	e099      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045ce:	4b6f      	ldr	r3, [pc, #444]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02d      	beq.n	8004636 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045da:	4b6c      	ldr	r3, [pc, #432]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	08db      	lsrs	r3, r3, #3
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	4a6a      	ldr	r2, [pc, #424]	; (8004790 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80045e6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ea:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004604:	4b61      	ldr	r3, [pc, #388]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004614:	ed97 6a02 	vldr	s12, [r7, #8]
 8004618:	eddf 5a60 	vldr	s11, [pc, #384]	; 800479c <HAL_RCC_GetSysClockFreq+0x2d4>
 800461c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004630:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004634:	e087      	b.n	8004746 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004640:	eddf 6a57 	vldr	s13, [pc, #348]	; 80047a0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004648:	4b50      	ldr	r3, [pc, #320]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004658:	ed97 6a02 	vldr	s12, [r7, #8]
 800465c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800479c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004678:	e065      	b.n	8004746 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004684:	eddf 6a47 	vldr	s13, [pc, #284]	; 80047a4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468c:	4b3f      	ldr	r3, [pc, #252]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469c:	ed97 6a02 	vldr	s12, [r7, #8]
 80046a0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800479c <HAL_RCC_GetSysClockFreq+0x2d4>
 80046a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046bc:	e043      	b.n	8004746 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	ee07 3a90 	vmov	s15, r3
 80046c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80047a8 <HAL_RCC_GetSysClockFreq+0x2e0>
 80046cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d0:	4b2e      	ldr	r3, [pc, #184]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80046e4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800479c <HAL_RCC_GetSysClockFreq+0x2d4>
 80046e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004700:	e021      	b.n	8004746 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80047a4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004714:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004724:	ed97 6a02 	vldr	s12, [r7, #8]
 8004728:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800479c <HAL_RCC_GetSysClockFreq+0x2d4>
 800472c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004740:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004744:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	0a5b      	lsrs	r3, r3, #9
 800474c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004750:	3301      	adds	r3, #1
 8004752:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800475e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476a:	ee17 3a90 	vmov	r3, s15
 800476e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004770:	e005      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	61bb      	str	r3, [r7, #24]
    break;
 8004776:	e002      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800477a:	61bb      	str	r3, [r7, #24]
    break;
 800477c:	bf00      	nop
  }

  return sysclockfreq;
 800477e:	69bb      	ldr	r3, [r7, #24]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3724      	adds	r7, #36	; 0x24
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	58024400 	.word	0x58024400
 8004790:	03d09000 	.word	0x03d09000
 8004794:	003d0900 	.word	0x003d0900
 8004798:	007a1200 	.word	0x007a1200
 800479c:	46000000 	.word	0x46000000
 80047a0:	4c742400 	.word	0x4c742400
 80047a4:	4a742400 	.word	0x4a742400
 80047a8:	4af42400 	.word	0x4af42400

080047ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047b2:	f7ff fe89 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 80047b6:	4601      	mov	r1, r0
 80047b8:	4b10      	ldr	r3, [pc, #64]	; (80047fc <HAL_RCC_GetHCLKFreq+0x50>)
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	4a0f      	ldr	r2, [pc, #60]	; (8004800 <HAL_RCC_GetHCLKFreq+0x54>)
 80047c4:	5cd3      	ldrb	r3, [r2, r3]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	fa21 f303 	lsr.w	r3, r1, r3
 80047ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <HAL_RCC_GetHCLKFreq+0x50>)
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	4a09      	ldr	r2, [pc, #36]	; (8004800 <HAL_RCC_GetHCLKFreq+0x54>)
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	4a07      	ldr	r2, [pc, #28]	; (8004804 <HAL_RCC_GetHCLKFreq+0x58>)
 80047e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047ea:	4a07      	ldr	r2, [pc, #28]	; (8004808 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <HAL_RCC_GetHCLKFreq+0x58>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	58024400 	.word	0x58024400
 8004800:	080157cc 	.word	0x080157cc
 8004804:	24000010 	.word	0x24000010
 8004808:	2400000c 	.word	0x2400000c

0800480c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004810:	f7ff ffcc 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 8004814:	4601      	mov	r1, r0
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4a04      	ldr	r2, [pc, #16]	; (8004834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004822:	5cd3      	ldrb	r3, [r2, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	58024400 	.word	0x58024400
 8004834:	080157cc 	.word	0x080157cc

08004838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800483c:	f7ff ffb6 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 8004840:	4601      	mov	r1, r0
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4a04      	ldr	r2, [pc, #16]	; (8004860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800484e:	5cd3      	ldrb	r3, [r2, r3]
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	58024400 	.word	0x58024400
 8004860:	080157cc 	.word	0x080157cc

08004864 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004870:	2300      	movs	r3, #0
 8004872:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d03d      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004888:	d013      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800488a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800488e:	d802      	bhi.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004894:	e01f      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800489a:	d013      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800489c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048a0:	d01c      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80048a2:	e018      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a4:	4baf      	ldr	r3, [pc, #700]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4aae      	ldr	r2, [pc, #696]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048b0:	e015      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	2102      	movs	r1, #2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fd23 	bl	8006304 <RCCEx_PLL2_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048c2:	e00c      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3324      	adds	r3, #36	; 0x24
 80048c8:	2102      	movs	r1, #2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 fdcc 	bl	8006468 <RCCEx_PLL3_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048d4:	e003      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
      break;
 80048da:	e000      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80048dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048e4:	4b9f      	ldr	r3, [pc, #636]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f0:	499c      	ldr	r1, [pc, #624]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	650b      	str	r3, [r1, #80]	; 0x50
 80048f6:	e001      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d03d      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	2b04      	cmp	r3, #4
 800490e:	d826      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	0800492d 	.word	0x0800492d
 800491c:	0800493b 	.word	0x0800493b
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004965 	.word	0x08004965
 8004928:	08004965 	.word	0x08004965
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800492c:	4b8d      	ldr	r3, [pc, #564]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	4a8c      	ldr	r2, [pc, #560]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004938:	e015      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3304      	adds	r3, #4
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f001 fcdf 	bl	8006304 <RCCEx_PLL2_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800494a:	e00c      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3324      	adds	r3, #36	; 0x24
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f001 fd88 	bl	8006468 <RCCEx_PLL3_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
      break;
 8004962:	e000      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004966:	7dfb      	ldrb	r3, [r7, #23]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d109      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800496c:	4b7d      	ldr	r3, [pc, #500]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	f023 0207 	bic.w	r2, r3, #7
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	497a      	ldr	r1, [pc, #488]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800497a:	4313      	orrs	r3, r2
 800497c:	650b      	str	r3, [r1, #80]	; 0x50
 800497e:	e001      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004980:	7dfb      	ldrb	r3, [r7, #23]
 8004982:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498c:	2b00      	cmp	r3, #0
 800498e:	d03e      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d01c      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004998:	2b80      	cmp	r3, #128	; 0x80
 800499a:	d804      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80049a0:	2b40      	cmp	r3, #64	; 0x40
 80049a2:	d00d      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80049a4:	e01e      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80049a6:	2bc0      	cmp	r3, #192	; 0xc0
 80049a8:	d01f      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x186>
 80049aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ae:	d01e      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049b0:	e018      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b2:	4b6c      	ldr	r3, [pc, #432]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	4a6b      	ldr	r2, [pc, #428]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049be:	e017      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 fc9c 	bl	8006304 <RCCEx_PLL2_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049d0:	e00e      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3324      	adds	r3, #36	; 0x24
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 fd45 	bl	8006468 <RCCEx_PLL3_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049e2:	e005      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
      break;
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80049ea:	bf00      	nop
 80049ec:	e000      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80049ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80049f6:	4b5b      	ldr	r3, [pc, #364]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	4958      	ldr	r1, [pc, #352]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	650b      	str	r3, [r1, #80]	; 0x50
 8004a08:	e001      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d044      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a24:	d01f      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a2a:	d805      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a34:	d00e      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004a36:	e01f      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004a38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a3c:	d01f      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a42:	d01e      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004a44:	e018      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a46:	4b47      	ldr	r3, [pc, #284]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	4a46      	ldr	r2, [pc, #280]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a52:	e017      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fc52 	bl	8006304 <RCCEx_PLL2_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a64:	e00e      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3324      	adds	r3, #36	; 0x24
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 fcfb 	bl	8006468 <RCCEx_PLL3_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a76:	e005      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a7c:	e002      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a8a:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a98:	4932      	ldr	r1, [pc, #200]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	658b      	str	r3, [r1, #88]	; 0x58
 8004a9e:	e001      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d044      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aba:	d01f      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac0:	d805      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004ac6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aca:	d00e      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004acc:	e01f      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004ace:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ad2:	d01f      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ad4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ad8:	d01e      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004ada:	e018      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004adc:	4b21      	ldr	r3, [pc, #132]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	4a20      	ldr	r2, [pc, #128]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ae8:	e017      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3304      	adds	r3, #4
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fc07 	bl	8006304 <RCCEx_PLL2_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004afa:	e00e      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3324      	adds	r3, #36	; 0x24
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 fcb0 	bl	8006468 <RCCEx_PLL3_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b0c:	e005      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
      break;
 8004b12:	e002      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004b14:	bf00      	nop
 8004b16:	e000      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b20:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b24:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b2e:	490d      	ldr	r1, [pc, #52]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	658b      	str	r3, [r1, #88]	; 0x58
 8004b34:	e001      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d035      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d00c      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d802      	bhi.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01b      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004b56:	e017      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d00c      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004b5c:	2b30      	cmp	r3, #48	; 0x30
 8004b5e:	d018      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004b60:	e012      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004b62:	bf00      	nop
 8004b64:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b68:	4baf      	ldr	r3, [pc, #700]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4aae      	ldr	r2, [pc, #696]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b74:	e00e      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 fbc1 	bl	8006304 <RCCEx_PLL2_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b86:	e005      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b8c:	e002      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b9a:	4ba3      	ldr	r3, [pc, #652]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba6:	49a0      	ldr	r1, [pc, #640]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bac:	e001      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d042      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc6:	d01f      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bcc:	d805      	bhi.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004bd8:	e01f      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004bda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bde:	d01f      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be4:	d01e      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004be6:	e018      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be8:	4b8f      	ldr	r3, [pc, #572]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	4a8e      	ldr	r2, [pc, #568]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bf4:	e017      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 fb81 	bl	8006304 <RCCEx_PLL2_Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c06:	e00e      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3324      	adds	r3, #36	; 0x24
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 fc2a 	bl	8006468 <RCCEx_PLL3_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c18:	e005      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004c20:	bf00      	nop
 8004c22:	e000      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c2c:	4b7e      	ldr	r3, [pc, #504]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c38:	497b      	ldr	r1, [pc, #492]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c3e:	e001      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
 8004c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d042      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c58:	d01b      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c5e:	d805      	bhi.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d022      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c6a:	e01b      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c70:	d01d      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004c72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c76:	d01c      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004c78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c7c:	d01b      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004c7e:	e011      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	2101      	movs	r1, #1
 8004c86:	4618      	mov	r0, r3
 8004c88:	f001 fb3c 	bl	8006304 <RCCEx_PLL2_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c90:	e012      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3324      	adds	r3, #36	; 0x24
 8004c96:	2101      	movs	r1, #1
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 fbe5 	bl	8006468 <RCCEx_PLL3_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ca2:	e009      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca8:	e006      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004caa:	bf00      	nop
 8004cac:	e004      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e002      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cbe:	4b5a      	ldr	r3, [pc, #360]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	4957      	ldr	r1, [pc, #348]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	650b      	str	r3, [r1, #80]	; 0x50
 8004cd0:	e001      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d044      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cec:	d01b      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf2:	d805      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d022      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004cfe:	e01b      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d01d      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d0a:	d01c      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004d0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d10:	d01b      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d12:	e011      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 faf2 	bl	8006304 <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d24:	e012      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3324      	adds	r3, #36	; 0x24
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 fb9b 	bl	8006468 <RCCEx_PLL3_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d36:	e009      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d3c:	e006      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e004      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004d42:	bf00      	nop
 8004d44:	e002      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d52:	4b35      	ldr	r3, [pc, #212]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d60:	4931      	ldr	r1, [pc, #196]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	658b      	str	r3, [r1, #88]	; 0x58
 8004d66:	e001      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d02d      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d80:	d005      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d86:	d009      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004d8c:	e00f      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d8e:	4b26      	ldr	r3, [pc, #152]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	4a25      	ldr	r2, [pc, #148]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d9a:	e00c      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	2101      	movs	r1, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	f001 faae 	bl	8006304 <RCCEx_PLL2_Config>
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dac:	e003      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	75fb      	strb	r3, [r7, #23]
      break;
 8004db2:	e000      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc8:	4917      	ldr	r1, [pc, #92]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	650b      	str	r3, [r1, #80]	; 0x50
 8004dce:	e001      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d035      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d81b      	bhi.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e2d 	.word	0x08004e2d
 8004df4:	08004e01 	.word	0x08004e01
 8004df8:	08004e0f 	.word	0x08004e0f
 8004dfc:	08004e2d 	.word	0x08004e2d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e0c:	e00f      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3304      	adds	r3, #4
 8004e12:	2102      	movs	r1, #2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 fa75 	bl	8006304 <RCCEx_PLL2_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e1e:	e006      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	75fb      	strb	r3, [r7, #23]
      break;
 8004e24:	e003      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004e26:	bf00      	nop
 8004e28:	58024400 	.word	0x58024400
      break;
 8004e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e34:	4bba      	ldr	r3, [pc, #744]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e38:	f023 0203 	bic.w	r2, r3, #3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e40:	49b7      	ldr	r1, [pc, #732]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e46:	e001      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8086 	beq.w	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e5a:	4bb2      	ldr	r3, [pc, #712]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4ab1      	ldr	r2, [pc, #708]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e66:	f7fc fb89 	bl	800157c <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6c:	e009      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6e:	f7fc fb85 	bl	800157c <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b64      	cmp	r3, #100	; 0x64
 8004e7a:	d902      	bls.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	75fb      	strb	r3, [r7, #23]
        break;
 8004e80:	e005      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e82:	4ba8      	ldr	r3, [pc, #672]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0ef      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d166      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e94:	4ba2      	ldr	r3, [pc, #648]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e9e:	4053      	eors	r3, r2
 8004ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d013      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea8:	4b9d      	ldr	r3, [pc, #628]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eb2:	4b9b      	ldr	r3, [pc, #620]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	4a9a      	ldr	r2, [pc, #616]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ebe:	4b98      	ldr	r3, [pc, #608]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a97      	ldr	r2, [pc, #604]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004eca:	4a95      	ldr	r2, [pc, #596]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eda:	d115      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004edc:	f7fc fb4e 	bl	800157c <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ee2:	e00b      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fc fb4a 	bl	800157c <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d902      	bls.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	75fb      	strb	r3, [r7, #23]
            break;
 8004efa:	e005      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004efc:	4b88      	ldr	r3, [pc, #544]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ed      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d126      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1c:	d10d      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004f1e:	4b80      	ldr	r3, [pc, #512]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f2c:	0919      	lsrs	r1, r3, #4
 8004f2e:	4b7e      	ldr	r3, [pc, #504]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004f30:	400b      	ands	r3, r1
 8004f32:	497b      	ldr	r1, [pc, #492]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	610b      	str	r3, [r1, #16]
 8004f38:	e005      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004f3a:	4b79      	ldr	r3, [pc, #484]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	4a78      	ldr	r2, [pc, #480]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f44:	6113      	str	r3, [r2, #16]
 8004f46:	4b76      	ldr	r3, [pc, #472]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f54:	4972      	ldr	r1, [pc, #456]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	670b      	str	r3, [r1, #112]	; 0x70
 8004f5a:	e004      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	75bb      	strb	r3, [r7, #22]
 8004f60:	e001      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d07d      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f76:	2b28      	cmp	r3, #40	; 0x28
 8004f78:	d866      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	0800504f 	.word	0x0800504f
 8004f84:	08005049 	.word	0x08005049
 8004f88:	08005049 	.word	0x08005049
 8004f8c:	08005049 	.word	0x08005049
 8004f90:	08005049 	.word	0x08005049
 8004f94:	08005049 	.word	0x08005049
 8004f98:	08005049 	.word	0x08005049
 8004f9c:	08005049 	.word	0x08005049
 8004fa0:	08005025 	.word	0x08005025
 8004fa4:	08005049 	.word	0x08005049
 8004fa8:	08005049 	.word	0x08005049
 8004fac:	08005049 	.word	0x08005049
 8004fb0:	08005049 	.word	0x08005049
 8004fb4:	08005049 	.word	0x08005049
 8004fb8:	08005049 	.word	0x08005049
 8004fbc:	08005049 	.word	0x08005049
 8004fc0:	08005037 	.word	0x08005037
 8004fc4:	08005049 	.word	0x08005049
 8004fc8:	08005049 	.word	0x08005049
 8004fcc:	08005049 	.word	0x08005049
 8004fd0:	08005049 	.word	0x08005049
 8004fd4:	08005049 	.word	0x08005049
 8004fd8:	08005049 	.word	0x08005049
 8004fdc:	08005049 	.word	0x08005049
 8004fe0:	0800504f 	.word	0x0800504f
 8004fe4:	08005049 	.word	0x08005049
 8004fe8:	08005049 	.word	0x08005049
 8004fec:	08005049 	.word	0x08005049
 8004ff0:	08005049 	.word	0x08005049
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	08005049 	.word	0x08005049
 8004ffc:	08005049 	.word	0x08005049
 8005000:	0800504f 	.word	0x0800504f
 8005004:	08005049 	.word	0x08005049
 8005008:	08005049 	.word	0x08005049
 800500c:	08005049 	.word	0x08005049
 8005010:	08005049 	.word	0x08005049
 8005014:	08005049 	.word	0x08005049
 8005018:	08005049 	.word	0x08005049
 800501c:	08005049 	.word	0x08005049
 8005020:	0800504f 	.word	0x0800504f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	2101      	movs	r1, #1
 800502a:	4618      	mov	r0, r3
 800502c:	f001 f96a 	bl	8006304 <RCCEx_PLL2_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005034:	e00c      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3324      	adds	r3, #36	; 0x24
 800503a:	2101      	movs	r1, #1
 800503c:	4618      	mov	r0, r3
 800503e:	f001 fa13 	bl	8006468 <RCCEx_PLL3_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005046:	e003      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	e000      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800504e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005056:	4b32      	ldr	r3, [pc, #200]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005062:	492f      	ldr	r1, [pc, #188]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005064:	4313      	orrs	r3, r2
 8005066:	654b      	str	r3, [r1, #84]	; 0x54
 8005068:	e001      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506a:	7dfb      	ldrb	r3, [r7, #23]
 800506c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d037      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507e:	2b05      	cmp	r3, #5
 8005080:	d820      	bhi.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005082:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050cb 	.word	0x080050cb
 800508c:	080050a1 	.word	0x080050a1
 8005090:	080050b3 	.word	0x080050b3
 8005094:	080050cb 	.word	0x080050cb
 8005098:	080050cb 	.word	0x080050cb
 800509c:	080050cb 	.word	0x080050cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	2101      	movs	r1, #1
 80050a6:	4618      	mov	r0, r3
 80050a8:	f001 f92c 	bl	8006304 <RCCEx_PLL2_Config>
 80050ac:	4603      	mov	r3, r0
 80050ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050b0:	e00c      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3324      	adds	r3, #36	; 0x24
 80050b6:	2101      	movs	r1, #1
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 f9d5 	bl	8006468 <RCCEx_PLL3_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050c2:	e003      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	75fb      	strb	r3, [r7, #23]
      break;
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80050ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f023 0207 	bic.w	r2, r3, #7
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050de:	4910      	ldr	r1, [pc, #64]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	654b      	str	r3, [r1, #84]	; 0x54
 80050e4:	e001      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d040      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	2b05      	cmp	r3, #5
 80050fe:	d827      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005100:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	08005157 	.word	0x08005157
 800510c:	0800512d 	.word	0x0800512d
 8005110:	0800513f 	.word	0x0800513f
 8005114:	08005157 	.word	0x08005157
 8005118:	08005157 	.word	0x08005157
 800511c:	08005157 	.word	0x08005157
 8005120:	58024400 	.word	0x58024400
 8005124:	58024800 	.word	0x58024800
 8005128:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	2101      	movs	r1, #1
 8005132:	4618      	mov	r0, r3
 8005134:	f001 f8e6 	bl	8006304 <RCCEx_PLL2_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800513c:	e00c      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3324      	adds	r3, #36	; 0x24
 8005142:	2101      	movs	r1, #1
 8005144:	4618      	mov	r0, r3
 8005146:	f001 f98f 	bl	8006468 <RCCEx_PLL3_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800514e:	e003      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
      break;
 8005154:	e000      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800515e:	4bb2      	ldr	r3, [pc, #712]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005162:	f023 0207 	bic.w	r2, r3, #7
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516c:	49ae      	ldr	r1, [pc, #696]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800516e:	4313      	orrs	r3, r2
 8005170:	658b      	str	r3, [r1, #88]	; 0x58
 8005172:	e001      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d044      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800518a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518e:	d01b      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005194:	d805      	bhi.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d022      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800519a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80051a0:	e01b      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x976>
 80051a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a6:	d01d      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80051a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ac:	d01c      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80051ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051b2:	d01b      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x988>
 80051b4:	e011      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3304      	adds	r3, #4
 80051ba:	2100      	movs	r1, #0
 80051bc:	4618      	mov	r0, r3
 80051be:	f001 f8a1 	bl	8006304 <RCCEx_PLL2_Config>
 80051c2:	4603      	mov	r3, r0
 80051c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051c6:	e012      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3324      	adds	r3, #36	; 0x24
 80051cc:	2102      	movs	r1, #2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 f94a 	bl	8006468 <RCCEx_PLL3_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051d8:	e009      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	75fb      	strb	r3, [r7, #23]
      break;
 80051de:	e006      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80051e0:	bf00      	nop
 80051e2:	e004      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80051e4:	bf00      	nop
 80051e6:	e002      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80051e8:	bf00      	nop
 80051ea:	e000      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80051ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051f4:	4b8c      	ldr	r3, [pc, #560]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005202:	4989      	ldr	r1, [pc, #548]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	654b      	str	r3, [r1, #84]	; 0x54
 8005208:	e001      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d044      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005224:	d01b      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522a:	d805      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d022      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005236:	e01b      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523c:	d01d      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800523e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005242:	d01c      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005244:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005248:	d01b      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800524a:	e011      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3304      	adds	r3, #4
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f001 f856 	bl	8006304 <RCCEx_PLL2_Config>
 8005258:	4603      	mov	r3, r0
 800525a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800525c:	e012      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3324      	adds	r3, #36	; 0x24
 8005262:	2102      	movs	r1, #2
 8005264:	4618      	mov	r0, r3
 8005266:	f001 f8ff 	bl	8006468 <RCCEx_PLL3_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800526e:	e009      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	75fb      	strb	r3, [r7, #23]
      break;
 8005274:	e006      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005276:	bf00      	nop
 8005278:	e004      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800527a:	bf00      	nop
 800527c:	e002      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800527e:	bf00      	nop
 8005280:	e000      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800528a:	4b67      	ldr	r3, [pc, #412]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005298:	4963      	ldr	r1, [pc, #396]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	658b      	str	r3, [r1, #88]	; 0x58
 800529e:	e001      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
 80052a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d044      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ba:	d01b      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80052bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052c0:	d805      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d022      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80052c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80052cc:	e01b      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80052ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d2:	d01d      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80052d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052d8:	d01c      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80052da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052de:	d01b      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80052e0:	e011      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3304      	adds	r3, #4
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 f80b 	bl	8006304 <RCCEx_PLL2_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80052f2:	e012      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3324      	adds	r3, #36	; 0x24
 80052f8:	2102      	movs	r1, #2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 f8b4 	bl	8006468 <RCCEx_PLL3_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005304:	e009      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	75fb      	strb	r3, [r7, #23]
      break;
 800530a:	e006      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800530c:	bf00      	nop
 800530e:	e004      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005320:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005324:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800532e:	493e      	ldr	r1, [pc, #248]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005330:	4313      	orrs	r3, r2
 8005332:	658b      	str	r3, [r1, #88]	; 0x58
 8005334:	e001      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800534c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005350:	d10a      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3324      	adds	r3, #36	; 0x24
 8005356:	2102      	movs	r1, #2
 8005358:	4618      	mov	r0, r3
 800535a:	f001 f885 	bl	8006468 <RCCEx_PLL3_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005368:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005376:	492c      	ldr	r1, [pc, #176]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005378:	4313      	orrs	r3, r2
 800537a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01a      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005392:	d10a      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3324      	adds	r3, #36	; 0x24
 8005398:	2102      	movs	r1, #2
 800539a:	4618      	mov	r0, r3
 800539c:	f001 f864 	bl	8006468 <RCCEx_PLL3_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053aa:	4b1f      	ldr	r3, [pc, #124]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80053ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b8:	491b      	ldr	r1, [pc, #108]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d032      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d00d      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80053d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053da:	d016      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d111      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 ff8c 	bl	8006304 <RCCEx_PLL2_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80053f0:	e00c      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3324      	adds	r3, #36	; 0x24
 80053f6:	2102      	movs	r1, #2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 f835 	bl	8006468 <RCCEx_PLL3_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005402:	e003      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	75fb      	strb	r3, [r7, #23]
      break;
 8005408:	e000      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800540a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800540c:	7dfb      	ldrb	r3, [r7, #23]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10c      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005420:	4901      	ldr	r1, [pc, #4]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005422:	4313      	orrs	r3, r2
 8005424:	658b      	str	r3, [r1, #88]	; 0x58
 8005426:	e003      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d02f      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005446:	d00c      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800544c:	d015      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800544e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005452:	d10f      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005454:	4b71      	ldr	r3, [pc, #452]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	4a70      	ldr	r2, [pc, #448]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800545a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800545e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005460:	e00c      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3324      	adds	r3, #36	; 0x24
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fffd 	bl	8006468 <RCCEx_PLL3_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005472:	e003      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	75fb      	strb	r3, [r7, #23]
      break;
 8005478:	e000      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800547a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800547c:	7dfb      	ldrb	r3, [r7, #23]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005482:	4b66      	ldr	r3, [pc, #408]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005490:	4962      	ldr	r1, [pc, #392]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005492:	4313      	orrs	r3, r2
 8005494:	654b      	str	r3, [r1, #84]	; 0x54
 8005496:	e001      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d029      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d007      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80054b6:	e00f      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b8:	4b58      	ldr	r3, [pc, #352]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4a57      	ldr	r2, [pc, #348]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80054c4:	e00b      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3304      	adds	r3, #4
 80054ca:	2102      	movs	r1, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 ff19 	bl	8006304 <RCCEx_PLL2_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80054d6:	e002      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	75fb      	strb	r3, [r7, #23]
      break;
 80054dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d109      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054e4:	4b4d      	ldr	r3, [pc, #308]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f0:	494a      	ldr	r1, [pc, #296]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054f6:	e001      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3324      	adds	r3, #36	; 0x24
 800550c:	2102      	movs	r1, #2
 800550e:	4618      	mov	r0, r3
 8005510:	f000 ffaa 	bl	8006468 <RCCEx_PLL3_Config>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d02f      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800552e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005532:	d00c      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005538:	d802      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d011      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800553e:	e00d      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005544:	d00f      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800554a:	d00e      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554e:	4b33      	ldr	r3, [pc, #204]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	4a32      	ldr	r2, [pc, #200]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005558:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800555a:	e007      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
      break;
 8005560:	e004      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005562:	bf00      	nop
 8005564:	e002      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800556a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556c:	7dfb      	ldrb	r3, [r7, #23]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005572:	4b2a      	ldr	r3, [pc, #168]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557e:	4927      	ldr	r1, [pc, #156]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005580:	4313      	orrs	r3, r2
 8005582:	654b      	str	r3, [r1, #84]	; 0x54
 8005584:	e001      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d008      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005596:	4b21      	ldr	r3, [pc, #132]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a2:	491e      	ldr	r1, [pc, #120]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055b4:	4b19      	ldr	r3, [pc, #100]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80055b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c0:	4916      	ldr	r1, [pc, #88]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	4a11      	ldr	r2, [pc, #68]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80055d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055dc:	6113      	str	r3, [r2, #16]
 80055de:	4b0f      	ldr	r3, [pc, #60]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80055e8:	490c      	ldr	r1, [pc, #48]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	da08      	bge.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80055f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005602:	4906      	ldr	r1, [pc, #24]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005604:	4313      	orrs	r3, r2
 8005606:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005608:	7dbb      	ldrb	r3, [r7, #22]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e000      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	58024400 	.word	0x58024400

08005620 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b090      	sub	sp, #64	; 0x40
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800562e:	d150      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005630:	4ba1      	ldr	r3, [pc, #644]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	2b04      	cmp	r3, #4
 800563e:	d844      	bhi.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005640:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	0800565d 	.word	0x0800565d
 800564c:	0800566d 	.word	0x0800566d
 8005650:	0800567d 	.word	0x0800567d
 8005654:	080056c5 	.word	0x080056c5
 8005658:	0800568d 	.word	0x0800568d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800565c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fd03 	bl	800606c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800566a:	e241      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800566c:	f107 0318 	add.w	r3, r7, #24
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fa63 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800567a:	e239      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800567c:	f107 030c 	add.w	r3, r7, #12
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fba7 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800568a:	e231      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800568c:	4b8a      	ldr	r3, [pc, #552]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800568e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005694:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800569c:	4b87      	ldr	r3, [pc, #540]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80056a0:	e226      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056a8:	d102      	bne.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80056aa:	4b85      	ldr	r3, [pc, #532]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ae:	e21f      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b6:	d102      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80056b8:	4b82      	ldr	r3, [pc, #520]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056bc:	e218      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056c2:	e215      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056c4:	4b80      	ldr	r3, [pc, #512]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056c8:	e212      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ce:	bf00      	nop
 80056d0:	e20e      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d8:	d14f      	bne.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80056da:	4b77      	ldr	r3, [pc, #476]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80056e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	2b80      	cmp	r3, #128	; 0x80
 80056e8:	d01c      	beq.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80056ea:	2b80      	cmp	r3, #128	; 0x80
 80056ec:	d804      	bhi.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d008      	beq.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d00e      	beq.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80056f6:	e03c      	b.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80056f8:	2bc0      	cmp	r3, #192	; 0xc0
 80056fa:	d037      	beq.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80056fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005700:	d018      	beq.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005702:	e036      	b.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fcaf 	bl	800606c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005712:	e1ed      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005714:	f107 0318 	add.w	r3, r7, #24
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fa0f 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005722:	e1e5      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fb53 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005732:	e1dd      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005734:	4b60      	ldr	r3, [pc, #384]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005738:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800573c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005744:	4b5d      	ldr	r3, [pc, #372]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005748:	e1d2      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005750:	d102      	bne.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8005752:	4b5b      	ldr	r3, [pc, #364]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005756:	e1cb      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800575e:	d102      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005760:	4b58      	ldr	r3, [pc, #352]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005764:	e1c4      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800576a:	e1c1      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800576c:	4b56      	ldr	r3, [pc, #344]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005770:	e1be      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005776:	bf00      	nop
 8005778:	e1ba      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005780:	d153      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005782:	4b4d      	ldr	r3, [pc, #308]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005786:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800578a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005792:	d01f      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005798:	d805      	bhi.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800579e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057a2:	d00f      	beq.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80057a4:	e03d      	b.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80057a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057aa:	d037      	beq.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80057ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057b0:	d018      	beq.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80057b2:	e036      	b.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fc57 	bl	800606c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057c2:	e195      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057c4:	f107 0318 	add.w	r3, r7, #24
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 f9b7 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057d2:	e18d      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057d4:	f107 030c 	add.w	r3, r7, #12
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fafb 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057e2:	e185      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057e4:	4b34      	ldr	r3, [pc, #208]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80057e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80057f4:	4b31      	ldr	r3, [pc, #196]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80057f8:	e17a      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005800:	d102      	bne.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8005802:	4b2f      	ldr	r3, [pc, #188]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005804:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005806:	e173      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800580e:	d102      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005810:	4b2c      	ldr	r3, [pc, #176]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005814:	e16c      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800581a:	e169      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800581c:	4b2a      	ldr	r3, [pc, #168]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005820:	e166      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005826:	bf00      	nop
 8005828:	e162      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005830:	d15d      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005832:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005836:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800583a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005842:	d01f      	beq.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005848:	d805      	bhi.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800584e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005852:	d00f      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005854:	e047      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005856:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800585a:	d041      	beq.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800585c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005860:	d018      	beq.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005862:	e040      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fbff 	bl	800606c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005872:	e13d      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005874:	f107 0318 	add.w	r3, r7, #24
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f95f 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005882:	e135      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005884:	f107 030c 	add.w	r3, r7, #12
 8005888:	4618      	mov	r0, r3
 800588a:	f000 faa3 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005892:	e12d      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005894:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800589c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80058a8:	e122      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b0:	d10c      	bne.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80058b2:	4b03      	ldr	r3, [pc, #12]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b6:	e11b      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80058b8:	58024400 	.word	0x58024400
 80058bc:	03d09000 	.word	0x03d09000
 80058c0:	003d0900 	.word	0x003d0900
 80058c4:	007a1200 	.word	0x007a1200
 80058c8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d2:	d102      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80058d4:	4b89      	ldr	r3, [pc, #548]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058d8:	e10a      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058de:	e107      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80058e0:	4b87      	ldr	r3, [pc, #540]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e4:	e104      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ea:	bf00      	nop
 80058ec:	e100      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f4:	d153      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80058f6:	4b83      	ldr	r3, [pc, #524]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80058f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80058fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005906:	d01f      	beq.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590c:	d805      	bhi.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005916:	d00f      	beq.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005918:	e03d      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800591a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800591e:	d037      	beq.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005924:	d018      	beq.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005926:	e036      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fb9d 	bl	800606c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005936:	e0db      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005938:	f107 0318 	add.w	r3, r7, #24
 800593c:	4618      	mov	r0, r3
 800593e:	f000 f8fd 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005946:	e0d3      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005948:	f107 030c 	add.w	r3, r7, #12
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fa41 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005956:	e0cb      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005958:	4b6a      	ldr	r3, [pc, #424]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800595a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005960:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005968:	4b67      	ldr	r3, [pc, #412]	; (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800596c:	e0c0      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800596e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005974:	d102      	bne.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8005976:	4b65      	ldr	r3, [pc, #404]	; (8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800597a:	e0b9      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005982:	d102      	bne.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8005984:	4b5d      	ldr	r3, [pc, #372]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005988:	e0b2      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800598e:	e0af      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005990:	4b5b      	ldr	r3, [pc, #364]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005994:	e0ac      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800599a:	bf00      	nop
 800599c:	e0a8      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059a4:	d13d      	bne.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80059a6:	4b57      	ldr	r3, [pc, #348]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b6:	d00c      	beq.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80059b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059bc:	d011      	beq.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d12b      	bne.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c2:	f107 0318 	add.w	r3, r7, #24
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f8b8 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059d0:	e08e      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059d2:	f107 030c 	add.w	r3, r7, #12
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 f9fc 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e0:	e086      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059e2:	4b48      	ldr	r3, [pc, #288]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80059e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059ea:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80059ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80059f2:	4b45      	ldr	r3, [pc, #276]	; (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80059f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80059f6:	e07b      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059fe:	d102      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005a00:	4b42      	ldr	r3, [pc, #264]	; (8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a04:	e074      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a0c:	d102      	bne.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a12:	e06d      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a18:	e06a      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a1e:	bf00      	nop
 8005a20:	e066      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a28:	d11f      	bne.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005a2a:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a32:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3e:	d008      	beq.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005a40:	e00f      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fb10 	bl	800606c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a50:	e04e      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a52:	f107 0318 	add.w	r3, r7, #24
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 f870 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a60:	e046      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a66:	bf00      	nop
 8005a68:	e042      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a70:	d13c      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a76:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005a7a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a82:	d01e      	beq.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8005a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a88:	d805      	bhi.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a92:	d00e      	beq.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8005a94:	e026      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8005a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9a:	d01d      	beq.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aa0:	d01d      	beq.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005aa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005aa6:	d014      	beq.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8005aa8:	e01c      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005aaa:	f000 f831 	bl	8005b10 <HAL_RCCEx_GetD3PCLK1Freq>
 8005aae:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005ab0:	e01e      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ab2:	f107 0318 	add.w	r3, r7, #24
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f840 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ac0:	e016      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ac2:	f107 030c 	add.w	r3, r7, #12
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f984 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad0:	e00e      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad6:	e00b      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005ad8:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005adc:	e008      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8005ade:	4b07      	ldr	r3, [pc, #28]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ae2:	e005      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ae8:	bf00      	nop
 8005aea:	e001      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3740      	adds	r7, #64	; 0x40
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	007a1200 	.word	0x007a1200
 8005b00:	00bb8000 	.word	0x00bb8000
 8005b04:	58024400 	.word	0x58024400
 8005b08:	03d09000 	.word	0x03d09000
 8005b0c:	003d0900 	.word	0x003d0900

08005b10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b14:	f7fe fe4a 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 8005b18:	4601      	mov	r1, r0
 8005b1a:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	091b      	lsrs	r3, r3, #4
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	4a04      	ldr	r2, [pc, #16]	; (8005b38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b26:	5cd3      	ldrb	r3, [r2, r3]
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	58024400 	.word	0x58024400
 8005b38:	080157cc 	.word	0x080157cc

08005b3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b44:	4b9d      	ldr	r3, [pc, #628]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005b4e:	4b9b      	ldr	r3, [pc, #620]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	0b1b      	lsrs	r3, r3, #12
 8005b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b5a:	4b98      	ldr	r3, [pc, #608]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	091b      	lsrs	r3, r3, #4
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b66:	4b95      	ldr	r3, [pc, #596]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	08db      	lsrs	r3, r3, #3
 8005b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 810a 	beq.w	8005d9e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d05a      	beq.n	8005c46 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d302      	bcc.n	8005b9a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d078      	beq.n	8005c8a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005b98:	e099      	b.n	8005cce <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b9a:	4b88      	ldr	r3, [pc, #544]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d02d      	beq.n	8005c02 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ba6:	4b85      	ldr	r3, [pc, #532]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	08db      	lsrs	r3, r3, #3
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	4a83      	ldr	r2, [pc, #524]	; (8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	ee07 3a90 	vmov	s15, r3
 8005bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd0:	4b7a      	ldr	r3, [pc, #488]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c00:	e087      	b.n	8005d12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	ee07 3a90 	vmov	s15, r3
 8005c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c14:	4b69      	ldr	r3, [pc, #420]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c24:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c28:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c44:	e065      	b.n	8005d12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c50:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c58:	4b58      	ldr	r3, [pc, #352]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c60:	ee07 3a90 	vmov	s15, r3
 8005c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c88:	e043      	b.n	8005d12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c94:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9c:	4b47      	ldr	r3, [pc, #284]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca4:	ee07 3a90 	vmov	s15, r3
 8005ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cb0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ccc:	e021      	b.n	8005d12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce0:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d10:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005d12:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	0a5b      	lsrs	r3, r3, #9
 8005d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d1c:	ee07 3a90 	vmov	s15, r3
 8005d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d38:	ee17 2a90 	vmov	r2, s15
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d66:	ee17 2a90 	vmov	r2, s15
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	0e1b      	lsrs	r3, r3, #24
 8005d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d94:	ee17 2a90 	vmov	r2, s15
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d9c:	e008      	b.n	8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	3724      	adds	r7, #36	; 0x24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	58024400 	.word	0x58024400
 8005dc0:	03d09000 	.word	0x03d09000
 8005dc4:	46000000 	.word	0x46000000
 8005dc8:	4c742400 	.word	0x4c742400
 8005dcc:	4a742400 	.word	0x4a742400
 8005dd0:	4af42400 	.word	0x4af42400

08005dd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b089      	sub	sp, #36	; 0x24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ddc:	4b9d      	ldr	r3, [pc, #628]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005de6:	4b9b      	ldr	r3, [pc, #620]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	0d1b      	lsrs	r3, r3, #20
 8005dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005df0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005df2:	4b98      	ldr	r3, [pc, #608]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005dfe:	4b95      	ldr	r3, [pc, #596]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	08db      	lsrs	r3, r3, #3
 8005e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 810a 	beq.w	8006036 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d05a      	beq.n	8005ede <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d302      	bcc.n	8005e32 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d078      	beq.n	8005f22 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005e30:	e099      	b.n	8005f66 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e32:	4b88      	ldr	r3, [pc, #544]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d02d      	beq.n	8005e9a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e3e:	4b85      	ldr	r3, [pc, #532]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	08db      	lsrs	r3, r3, #3
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	4a83      	ldr	r2, [pc, #524]	; (8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e68:	4b7a      	ldr	r3, [pc, #488]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e70:	ee07 3a90 	vmov	s15, r3
 8005e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800605c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e94:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e98:	e087      	b.n	8005faa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006060 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eac:	4b69      	ldr	r3, [pc, #420]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb4:	ee07 3a90 	vmov	s15, r3
 8005eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800605c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005ec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005edc:	e065      	b.n	8005faa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	ee07 3a90 	vmov	s15, r3
 8005ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef0:	4b58      	ldr	r3, [pc, #352]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef8:	ee07 3a90 	vmov	s15, r3
 8005efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f00:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f04:	eddf 5a55 	vldr	s11, [pc, #340]	; 800605c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f20:	e043      	b.n	8005faa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006068 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f34:	4b47      	ldr	r3, [pc, #284]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3c:	ee07 3a90 	vmov	s15, r3
 8005f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f44:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f48:	eddf 5a44 	vldr	s11, [pc, #272]	; 800605c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f64:	e021      	b.n	8005faa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f70:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f78:	4b36      	ldr	r3, [pc, #216]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f88:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f8c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800605c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fa8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005faa:	4b2a      	ldr	r3, [pc, #168]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	0a5b      	lsrs	r3, r3, #9
 8005fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd0:	ee17 2a90 	vmov	r2, s15
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005fd8:	4b1e      	ldr	r3, [pc, #120]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	0c1b      	lsrs	r3, r3, #16
 8005fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ffe:	ee17 2a90 	vmov	r2, s15
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006006:	4b13      	ldr	r3, [pc, #76]	; (8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	0e1b      	lsrs	r3, r3, #24
 800600c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800601c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006020:	edd7 6a07 	vldr	s13, [r7, #28]
 8006024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800602c:	ee17 2a90 	vmov	r2, s15
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006034:	e008      	b.n	8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	609a      	str	r2, [r3, #8]
}
 8006048:	bf00      	nop
 800604a:	3724      	adds	r7, #36	; 0x24
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	58024400 	.word	0x58024400
 8006058:	03d09000 	.word	0x03d09000
 800605c:	46000000 	.word	0x46000000
 8006060:	4c742400 	.word	0x4c742400
 8006064:	4a742400 	.word	0x4a742400
 8006068:	4af42400 	.word	0x4af42400

0800606c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	; 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006074:	4b9d      	ldr	r3, [pc, #628]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800607e:	4b9b      	ldr	r3, [pc, #620]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006088:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800608a:	4b98      	ldr	r3, [pc, #608]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006094:	4b95      	ldr	r3, [pc, #596]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	08db      	lsrs	r3, r3, #3
 800609a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	fb02 f303 	mul.w	r3, r2, r3
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 810a 	beq.w	80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d05a      	beq.n	8006174 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d302      	bcc.n	80060c8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d078      	beq.n	80061b8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80060c6:	e099      	b.n	80061fc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060c8:	4b88      	ldr	r3, [pc, #544]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d02d      	beq.n	8006130 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060d4:	4b85      	ldr	r3, [pc, #532]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	08db      	lsrs	r3, r3, #3
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	4a84      	ldr	r2, [pc, #528]	; (80062f0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
 80060e4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	ee07 3a90 	vmov	s15, r3
 80060ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fe:	4b7b      	ldr	r3, [pc, #492]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006112:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062f4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800612e:	e087      	b.n	8006240 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800613e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006142:	4b6a      	ldr	r3, [pc, #424]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006152:	ed97 6a03 	vldr	s12, [r7, #12]
 8006156:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062f4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800615a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006172:	e065      	b.n	8006240 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006186:	4b59      	ldr	r3, [pc, #356]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006196:	ed97 6a03 	vldr	s12, [r7, #12]
 800619a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062f4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800619e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061b6:	e043      	b.n	8006240 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ca:	4b48      	ldr	r3, [pc, #288]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061da:	ed97 6a03 	vldr	s12, [r7, #12]
 80061de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062f4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80061e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061fa:	e021      	b.n	8006240 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800620a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620e:	4b37      	ldr	r3, [pc, #220]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006222:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062f4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800623e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006240:	4b2a      	ldr	r3, [pc, #168]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	0a5b      	lsrs	r3, r3, #9
 8006246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800625a:	edd7 6a07 	vldr	s13, [r7, #28]
 800625e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006266:	ee17 2a90 	vmov	r2, s15
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800626e:	4b1f      	ldr	r3, [pc, #124]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	0c1b      	lsrs	r3, r3, #16
 8006274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006278:	ee07 3a90 	vmov	s15, r3
 800627c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006284:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006288:	edd7 6a07 	vldr	s13, [r7, #28]
 800628c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006294:	ee17 2a90 	vmov	r2, s15
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800629c:	4b13      	ldr	r3, [pc, #76]	; (80062ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	0e1b      	lsrs	r3, r3, #24
 80062a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062c2:	ee17 2a90 	vmov	r2, s15
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80062ca:	e008      	b.n	80062de <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	609a      	str	r2, [r3, #8]
}
 80062de:	bf00      	nop
 80062e0:	3724      	adds	r7, #36	; 0x24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	58024400 	.word	0x58024400
 80062f0:	03d09000 	.word	0x03d09000
 80062f4:	46000000 	.word	0x46000000
 80062f8:	4c742400 	.word	0x4c742400
 80062fc:	4a742400 	.word	0x4a742400
 8006300:	4af42400 	.word	0x4af42400

08006304 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006312:	4b53      	ldr	r3, [pc, #332]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	2b03      	cmp	r3, #3
 800631c:	d101      	bne.n	8006322 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e099      	b.n	8006456 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006322:	4b4f      	ldr	r3, [pc, #316]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a4e      	ldr	r2, [pc, #312]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 8006328:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800632c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632e:	f7fb f925 	bl	800157c <HAL_GetTick>
 8006332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006334:	e008      	b.n	8006348 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006336:	f7fb f921 	bl	800157c <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e086      	b.n	8006456 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006348:	4b45      	ldr	r3, [pc, #276]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f0      	bne.n	8006336 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006354:	4b42      	ldr	r3, [pc, #264]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	031b      	lsls	r3, r3, #12
 8006362:	493f      	ldr	r1, [pc, #252]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 8006364:	4313      	orrs	r3, r2
 8006366:	628b      	str	r3, [r1, #40]	; 0x28
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	3b01      	subs	r3, #1
 800636e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	3b01      	subs	r3, #1
 8006378:	025b      	lsls	r3, r3, #9
 800637a:	b29b      	uxth	r3, r3
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	3b01      	subs	r3, #1
 8006384:	041b      	lsls	r3, r3, #16
 8006386:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	3b01      	subs	r3, #1
 8006392:	061b      	lsls	r3, r3, #24
 8006394:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006398:	4931      	ldr	r1, [pc, #196]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 800639a:	4313      	orrs	r3, r2
 800639c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800639e:	4b30      	ldr	r3, [pc, #192]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	492d      	ldr	r1, [pc, #180]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063b0:	4b2b      	ldr	r3, [pc, #172]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	f023 0220 	bic.w	r2, r3, #32
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	4928      	ldr	r1, [pc, #160]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063c2:	4b27      	ldr	r3, [pc, #156]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	4a26      	ldr	r2, [pc, #152]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063c8:	f023 0310 	bic.w	r3, r3, #16
 80063cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063ce:	4b24      	ldr	r3, [pc, #144]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063d2:	4b24      	ldr	r3, [pc, #144]	; (8006464 <RCCEx_PLL2_Config+0x160>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	69d2      	ldr	r2, [r2, #28]
 80063da:	00d2      	lsls	r2, r2, #3
 80063dc:	4920      	ldr	r1, [pc, #128]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063e2:	4b1f      	ldr	r3, [pc, #124]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	4a1e      	ldr	r2, [pc, #120]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063e8:	f043 0310 	orr.w	r3, r3, #16
 80063ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d106      	bne.n	8006402 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063f4:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	4a19      	ldr	r2, [pc, #100]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 80063fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006400:	e00f      	b.n	8006422 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d106      	bne.n	8006416 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006408:	4b15      	ldr	r3, [pc, #84]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	4a14      	ldr	r2, [pc, #80]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 800640e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006412:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006414:	e005      	b.n	8006422 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	4a11      	ldr	r2, [pc, #68]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 800641c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006420:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a0e      	ldr	r2, [pc, #56]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 8006428:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800642c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800642e:	f7fb f8a5 	bl	800157c <HAL_GetTick>
 8006432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006434:	e008      	b.n	8006448 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006436:	f7fb f8a1 	bl	800157c <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e006      	b.n	8006456 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <RCCEx_PLL2_Config+0x15c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	58024400 	.word	0x58024400
 8006464:	ffff0007 	.word	0xffff0007

08006468 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006476:	4b53      	ldr	r3, [pc, #332]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b03      	cmp	r3, #3
 8006480:	d101      	bne.n	8006486 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e099      	b.n	80065ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006486:	4b4f      	ldr	r3, [pc, #316]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a4e      	ldr	r2, [pc, #312]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 800648c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006492:	f7fb f873 	bl	800157c <HAL_GetTick>
 8006496:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006498:	e008      	b.n	80064ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800649a:	f7fb f86f 	bl	800157c <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e086      	b.n	80065ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064ac:	4b45      	ldr	r3, [pc, #276]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1f0      	bne.n	800649a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064b8:	4b42      	ldr	r3, [pc, #264]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	051b      	lsls	r3, r3, #20
 80064c6:	493f      	ldr	r1, [pc, #252]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	628b      	str	r3, [r1, #40]	; 0x28
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	3b01      	subs	r3, #1
 80064dc:	025b      	lsls	r3, r3, #9
 80064de:	b29b      	uxth	r3, r3
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	041b      	lsls	r3, r3, #16
 80064ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	061b      	lsls	r3, r3, #24
 80064f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064fc:	4931      	ldr	r1, [pc, #196]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006502:	4b30      	ldr	r3, [pc, #192]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	492d      	ldr	r1, [pc, #180]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006510:	4313      	orrs	r3, r2
 8006512:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006514:	4b2b      	ldr	r3, [pc, #172]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	4928      	ldr	r1, [pc, #160]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006522:	4313      	orrs	r3, r2
 8006524:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006526:	4b27      	ldr	r3, [pc, #156]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 800652c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006532:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006536:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <RCCEx_PLL3_Config+0x160>)
 8006538:	4013      	ands	r3, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	69d2      	ldr	r2, [r2, #28]
 800653e:	00d2      	lsls	r2, r2, #3
 8006540:	4920      	ldr	r1, [pc, #128]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006542:	4313      	orrs	r3, r2
 8006544:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006546:	4b1f      	ldr	r3, [pc, #124]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 800654c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006558:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	4a19      	ldr	r2, [pc, #100]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 800655e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006562:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006564:	e00f      	b.n	8006586 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d106      	bne.n	800657a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800656c:	4b15      	ldr	r3, [pc, #84]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	4a14      	ldr	r2, [pc, #80]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006572:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006576:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006578:	e005      	b.n	8006586 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800657a:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	4a11      	ldr	r2, [pc, #68]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006584:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006586:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a0e      	ldr	r2, [pc, #56]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 800658c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006592:	f7fa fff3 	bl	800157c <HAL_GetTick>
 8006596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006598:	e008      	b.n	80065ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800659a:	f7fa ffef 	bl	800157c <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e006      	b.n	80065ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065ac:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <RCCEx_PLL3_Config+0x15c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0f0      	beq.n	800659a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	58024400 	.word	0x58024400
 80065c8:	ffff0007 	.word	0xffff0007

080065cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 808a 	beq.w	80066f4 <HAL_RTC_Init+0x128>
  {
    status = HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d106      	bne.n	80065fe <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7fa fd2f 	bl	800105c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	22ca      	movs	r2, #202	; 0xca
 800660c:	625a      	str	r2, [r3, #36]	; 0x24
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2253      	movs	r2, #83	; 0x53
 8006614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fab6 	bl	8006b88 <RTC_EnterInitMode>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	22ff      	movs	r2, #255	; 0xff
 8006628:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2204      	movs	r2, #4
 800662e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	73fb      	strb	r3, [r7, #15]
 8006636:	e05d      	b.n	80066f4 <HAL_RTC_Init+0x128>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6899      	ldr	r1, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b2f      	ldr	r3, [pc, #188]	; (8006700 <HAL_RTC_Init+0x134>)
 8006644:	400b      	ands	r3, r1
 8006646:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6899      	ldr	r1, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	0419      	lsls	r1, r3, #16
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006686:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10f      	bne.n	80066b6 <HAL_RTC_Init+0xea>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa50 	bl	8006b3c <HAL_RTC_WaitForSynchro>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_RTC_Init+0xea>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	22ff      	movs	r2, #255	; 0xff
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2204      	movs	r2, #4
 80066ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d11b      	bne.n	80066f4 <HAL_RTC_Init+0x128>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0203 	bic.w	r2, r2, #3
 80066ca:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	22ff      	movs	r2, #255	; 0xff
 80066ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	ff8fffbf 	.word	0xff8fffbf

08006704 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006704:	b590      	push	{r4, r7, lr}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_RTC_SetTime+0x1a>
 800671a:	2302      	movs	r3, #2
 800671c:	e0b0      	b.n	8006880 <HAL_RTC_SetTime+0x17c>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2202      	movs	r2, #2
 800672a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	22ca      	movs	r2, #202	; 0xca
 8006734:	625a      	str	r2, [r3, #36]	; 0x24
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2253      	movs	r2, #83	; 0x53
 800673c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fa22 	bl	8006b88 <RTC_EnterInitMode>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00d      	beq.n	8006766 <HAL_RTC_SetTime+0x62>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	22ff      	movs	r2, #255	; 0xff
 8006750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2204      	movs	r2, #4
 8006756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e08c      	b.n	8006880 <HAL_RTC_SetTime+0x17c>
  }
  else
  {
    if(Format == RTC_FORMAT_BIN)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d126      	bne.n	80067ba <HAL_RTC_SetTime+0xb6>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <HAL_RTC_SetTime+0x7c>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2200      	movs	r2, #0
 800677e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fa29 	bl	8006bdc <RTC_ByteToBcd2>
 800678a:	4603      	mov	r3, r0
 800678c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fa22 	bl	8006bdc <RTC_ByteToBcd2>
 8006798:	4603      	mov	r3, r0
 800679a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800679c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	789b      	ldrb	r3, [r3, #2]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fa1a 	bl	8006bdc <RTC_ByteToBcd2>
 80067a8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067aa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	78db      	ldrb	r3, [r3, #3]
 80067b2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	e018      	b.n	80067ec <HAL_RTC_SetTime+0xe8>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <HAL_RTC_SetTime+0xca>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067da:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067e0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	78db      	ldrb	r3, [r3, #3]
 80067e6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	6979      	ldr	r1, [r7, #20]
 80067f2:	4b25      	ldr	r3, [pc, #148]	; (8006888 <HAL_RTC_SetTime+0x184>)
 80067f4:	400b      	ands	r3, r1
 80067f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006806:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6899      	ldr	r1, [r3, #8]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	431a      	orrs	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	609a      	str	r2, [r3, #8]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800682e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d113      	bne.n	8006866 <HAL_RTC_SetTime+0x162>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 f97c 	bl	8006b3c <HAL_RTC_WaitForSynchro>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00d      	beq.n	8006866 <HAL_RTC_SetTime+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	22ff      	movs	r2, #255	; 0xff
 8006850:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2204      	movs	r2, #4
 8006856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e00c      	b.n	8006880 <HAL_RTC_SetTime+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	22ff      	movs	r2, #255	; 0xff
 800686c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800687e:	2300      	movs	r3, #0
  }
}
 8006880:	4618      	mov	r0, r3
 8006882:	371c      	adds	r7, #28
 8006884:	46bd      	mov	sp, r7
 8006886:	bd90      	pop	{r4, r7, pc}
 8006888:	007f7f7f 	.word	0x007f7f7f

0800688c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4b22      	ldr	r3, [pc, #136]	; (8006940 <HAL_RTC_GetTime+0xb4>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	0c1b      	lsrs	r3, r3, #16
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	0a1b      	lsrs	r3, r3, #8
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	0d9b      	lsrs	r3, r3, #22
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d11a      	bne.n	8006936 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	f000 f989 	bl	8006c1c <RTC_Bcd2ToByte>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f980 	bl	8006c1c <RTC_Bcd2ToByte>
 800691c:	4603      	mov	r3, r0
 800691e:	461a      	mov	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	789b      	ldrb	r3, [r3, #2]
 8006928:	4618      	mov	r0, r3
 800692a:	f000 f977 	bl	8006c1c <RTC_Bcd2ToByte>
 800692e:	4603      	mov	r3, r0
 8006930:	461a      	mov	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	007f7f7f 	.word	0x007f7f7f

08006944 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_RTC_SetDate+0x1a>
 800695a:	2302      	movs	r3, #2
 800695c:	e09a      	b.n	8006a94 <HAL_RTC_SetDate+0x150>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2202      	movs	r2, #2
 800696a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10e      	bne.n	8006992 <HAL_RTC_SetDate+0x4e>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b00      	cmp	r3, #0
 800697e:	d008      	beq.n	8006992 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	f023 0310 	bic.w	r3, r3, #16
 8006988:	b2db      	uxtb	r3, r3
 800698a:	330a      	adds	r3, #10
 800698c:	b2da      	uxtb	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d11c      	bne.n	80069d2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	78db      	ldrb	r3, [r3, #3]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 f91d 	bl	8006bdc <RTC_ByteToBcd2>
 80069a2:	4603      	mov	r3, r0
 80069a4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 f916 	bl	8006bdc <RTC_ByteToBcd2>
 80069b0:	4603      	mov	r3, r0
 80069b2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069b4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	789b      	ldrb	r3, [r3, #2]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f90e 	bl	8006bdc <RTC_ByteToBcd2>
 80069c0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069c2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e00e      	b.n	80069f0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	78db      	ldrb	r3, [r3, #3]
 80069d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80069de:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80069e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	22ca      	movs	r2, #202	; 0xca
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2253      	movs	r2, #83	; 0x53
 80069fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f8c1 	bl	8006b88 <RTC_EnterInitMode>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00d      	beq.n	8006a28 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	22ff      	movs	r2, #255	; 0xff
 8006a12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2204      	movs	r2, #4
 8006a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e035      	b.n	8006a94 <HAL_RTC_SetDate+0x150>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	6979      	ldr	r1, [r7, #20]
 8006a2e:	4b1b      	ldr	r3, [pc, #108]	; (8006a9c <HAL_RTC_SetDate+0x158>)
 8006a30:	400b      	ands	r3, r1
 8006a32:	6053      	str	r3, [r2, #4]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ISR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a42:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d113      	bne.n	8006a7a <HAL_RTC_SetDate+0x136>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 f872 	bl	8006b3c <HAL_RTC_WaitForSynchro>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00d      	beq.n	8006a7a <HAL_RTC_SetDate+0x136>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	22ff      	movs	r2, #255	; 0xff
 8006a64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2204      	movs	r2, #4
 8006a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e00c      	b.n	8006a94 <HAL_RTC_SetDate+0x150>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	22ff      	movs	r2, #255	; 0xff
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006a92:	2300      	movs	r3, #0
  }
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd90      	pop	{r4, r7, pc}
 8006a9c:	00ffff3f 	.word	0x00ffff3f

08006aa0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	4b21      	ldr	r3, [pc, #132]	; (8006b38 <HAL_RTC_GetDate+0x98>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	0a1b      	lsrs	r3, r3, #8
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 031f 	and.w	r3, r3, #31
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	0b5b      	lsrs	r3, r3, #13
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d11a      	bne.n	8006b2c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	78db      	ldrb	r3, [r3, #3]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f88e 	bl	8006c1c <RTC_Bcd2ToByte>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 f885 	bl	8006c1c <RTC_Bcd2ToByte>
 8006b12:	4603      	mov	r3, r0
 8006b14:	461a      	mov	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	789b      	ldrb	r3, [r3, #2]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f87c 	bl	8006c1c <RTC_Bcd2ToByte>
 8006b24:	4603      	mov	r3, r0
 8006b26:	461a      	mov	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	00ffff3f 	.word	0x00ffff3f

08006b3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b52:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8006b54:	f7fa fd12 	bl	800157c <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b5a:	e009      	b.n	8006b70 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b5c:	f7fa fd0e 	bl	800157c <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b6a:	d901      	bls.n	8006b70 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e007      	b.n	8006b80 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0ee      	beq.n	8006b5c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d119      	bne.n	8006bd2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006ba8:	f7fa fce8 	bl	800157c <HAL_GetTick>
 8006bac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006bae:	e009      	b.n	8006bc4 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006bb0:	f7fa fce4 	bl	800157c <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bbe:	d901      	bls.n	8006bc4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e007      	b.n	8006bd4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0ee      	beq.n	8006bb0 <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8006bee:	e005      	b.n	8006bfc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
 8006bf8:	3b0a      	subs	r3, #10
 8006bfa:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	2b09      	cmp	r3, #9
 8006c00:	d8f6      	bhi.n	8006bf0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	7afb      	ldrb	r3, [r7, #11]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	b2db      	uxtb	r3, r3
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	091b      	lsrs	r3, r3, #4
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	0092      	lsls	r2, r2, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	4413      	add	r3, r2
 8006c42:	b2db      	uxtb	r3, r3
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08a      	sub	sp, #40	; 0x28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e07c      	b.n	8006d5c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10c      	bne.n	8006c88 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d102      	bne.n	8006c82 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fa fa04 	bl	8001090 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2203      	movs	r2, #3
 8006c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f867 	bl	8006d64 <HAL_SD_InitCard>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e05d      	b.n	8006d5c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006ca0:	f107 0308 	add.w	r3, r7, #8
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fdb8 	bl	800781c <HAL_SD_GetCardStatus>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e052      	b.n	8006d5c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006cb6:	7e3b      	ldrb	r3, [r7, #24]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006cbc:	7e7b      	ldrb	r3, [r7, #25]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d10a      	bne.n	8006ce0 <HAL_SD_Init+0x90>
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <HAL_SD_Init+0x86>
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d004      	beq.n	8006ce0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cde:	e00b      	b.n	8006cf8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d104      	bne.n	8006cf2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cee:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cf0:	e002      	b.n	8006cf8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fe6e 	bl	80079e0 <HAL_SD_ConfigWideBusOperation>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e026      	b.n	8006d5c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006d0e:	f7fa fc35 	bl	800157c <HAL_GetTick>
 8006d12:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006d14:	e011      	b.n	8006d3a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006d16:	f7fa fc31 	bl	800157c <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d109      	bne.n	8006d3a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e010      	b.n	8006d5c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fefa 	bl	8007b34 <HAL_SD_GetCardState>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d1e7      	bne.n	8006d16 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3728      	adds	r7, #40	; 0x28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d64:	b5b0      	push	{r4, r5, r7, lr}
 8006d66:	b08e      	sub	sp, #56	; 0x38
 8006d68:	af04      	add	r7, sp, #16
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006d7c:	23fa      	movs	r3, #250	; 0xfa
 8006d7e:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d107      	bne.n	8006d98 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0210 	orr.w	r2, r2, #16
 8006d96:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681d      	ldr	r5, [r3, #0]
 8006d9c:	466c      	mov	r4, sp
 8006d9e:	f107 0314 	add.w	r3, r7, #20
 8006da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006daa:	f107 0308 	add.w	r3, r7, #8
 8006dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006db0:	4628      	mov	r0, r5
 8006db2:	f004 f9af 	bl	800b114 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f004 f9f2 	bl	800b1a4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8006dc0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006dc4:	f7fe fc2c 	bl	8005620 <HAL_RCCEx_GetPeriphCLKFreq>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	4b2d      	ldr	r3, [pc, #180]	; (8006e80 <HAL_SD_InitCard+0x11c>)
 8006dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006dda:	4a2a      	ldr	r2, [pc, #168]	; (8006e84 <HAL_SD_InitCard+0x120>)
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de2:	3301      	adds	r3, #1
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fa fbd5 	bl	8001594 <HAL_Delay>
 8006dea:	e002      	b.n	8006df2 <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 8006dec:	2002      	movs	r0, #2
 8006dee:	f7fa fbd1 	bl	8001594 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 ff7c 	bl	8007cf0 <SD_PowerON>
 8006df8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e02e      	b.n	8006e76 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 feab 	bl	8007b74 <SD_InitCard>
 8006e1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e01b      	b.n	8006e76 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e46:	4618      	mov	r0, r3
 8006e48:	f004 fa42 	bl	800b2d0 <SDMMC_CmdBlockLength>
 8006e4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00f      	beq.n	8006e74 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a0b      	ldr	r2, [pc, #44]	; (8006e88 <HAL_SD_InitCard+0x124>)
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e000      	b.n	8006e76 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3728      	adds	r7, #40	; 0x28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	10624dd3 	.word	0x10624dd3
 8006e84:	00012110 	.word	0x00012110
 8006e88:	1fe00fff 	.word	0x1fe00fff

08006e8c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b092      	sub	sp, #72	; 0x48
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e9a:	f7fa fb6f 	bl	800157c <HAL_GetTick>
 8006e9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d107      	bne.n	8006ebe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e167      	b.n	800718e <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	f040 815a 	bne.w	8007180 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	441a      	add	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d907      	bls.n	8006ef0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e14e      	b.n	800718e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2203      	movs	r2, #3
 8006ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2200      	movs	r2, #0
 8006efe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d002      	beq.n	8006f0e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	025b      	lsls	r3, r3, #9
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f12:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	025b      	lsls	r3, r3, #9
 8006f18:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f1a:	2390      	movs	r3, #144	; 0x90
 8006f1c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006f26:	2300      	movs	r3, #0
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f107 0214 	add.w	r2, r7, #20
 8006f32:	4611      	mov	r1, r2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f004 f99f 	bl	800b278 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f48:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d90a      	bls.n	8006f66 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2202      	movs	r2, #2
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f004 f9fd 	bl	800b35c <SDMMC_CmdReadMultiBlock>
 8006f62:	6478      	str	r0, [r7, #68]	; 0x44
 8006f64:	e009      	b.n	8006f7a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f72:	4618      	mov	r0, r3
 8006f74:	f004 f9cf 	bl	800b316 <SDMMC_CmdReadSingleBlock>
 8006f78:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d012      	beq.n	8006fa6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a84      	ldr	r2, [pc, #528]	; (8007198 <HAL_SD_ReadBlocks+0x30c>)
 8006f86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e0f3      	b.n	800718e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006faa:	e058      	b.n	800705e <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d033      	beq.n	8007022 <HAL_SD_ReadBlocks+0x196>
 8006fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbc:	2b1f      	cmp	r3, #31
 8006fbe:	d930      	bls.n	8007022 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fc4:	e027      	b.n	8007016 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f004 f8cc 	bl	800b168 <SDMMC_ReadFIFO>
 8006fd0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fdc:	3301      	adds	r3, #1
 8006fde:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	3301      	adds	r3, #1
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	0c1b      	lsrs	r3, r3, #16
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	0e1b      	lsrs	r3, r3, #24
 8007004:	b2da      	uxtb	r2, r3
 8007006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007008:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700c:	3301      	adds	r3, #1
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8007010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007012:	3301      	adds	r3, #1
 8007014:	643b      	str	r3, [r7, #64]	; 0x40
 8007016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007018:	2b07      	cmp	r3, #7
 800701a:	d9d4      	bls.n	8006fc6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800701c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701e:	3b20      	subs	r3, #32
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007022:	f7fa faab 	bl	800157c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800702e:	429a      	cmp	r2, r3
 8007030:	d902      	bls.n	8007038 <HAL_SD_ReadBlocks+0x1ac>
 8007032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007034:	2b00      	cmp	r3, #0
 8007036:	d112      	bne.n	800705e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a56      	ldr	r2, [pc, #344]	; (8007198 <HAL_SD_ReadBlocks+0x30c>)
 800703e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e097      	b.n	800718e <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007064:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007068:	2b00      	cmp	r3, #0
 800706a:	d09f      	beq.n	8006fac <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800707a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007086:	2b00      	cmp	r3, #0
 8007088:	d022      	beq.n	80070d0 <HAL_SD_ReadBlocks+0x244>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d91f      	bls.n	80070d0 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007094:	2b03      	cmp	r3, #3
 8007096:	d01b      	beq.n	80070d0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f004 f9c7 	bl	800b430 <SDMMC_CmdStopTransfer>
 80070a2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80070a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d012      	beq.n	80070d0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a3a      	ldr	r2, [pc, #232]	; (8007198 <HAL_SD_ReadBlocks+0x30c>)
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b8:	431a      	orrs	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e05e      	b.n	800718e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d012      	beq.n	8007104 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a2d      	ldr	r2, [pc, #180]	; (8007198 <HAL_SD_ReadBlocks+0x30c>)
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	f043 0208 	orr.w	r2, r3, #8
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e044      	b.n	800718e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d012      	beq.n	8007138 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a20      	ldr	r2, [pc, #128]	; (8007198 <HAL_SD_ReadBlocks+0x30c>)
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	f043 0202 	orr.w	r2, r3, #2
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e02a      	b.n	800718e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b00      	cmp	r3, #0
 8007144:	d012      	beq.n	800716c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a13      	ldr	r2, [pc, #76]	; (8007198 <HAL_SD_ReadBlocks+0x30c>)
 800714c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	f043 0220 	orr.w	r2, r3, #32
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e010      	b.n	800718e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a0a      	ldr	r2, [pc, #40]	; (800719c <HAL_SD_ReadBlocks+0x310>)
 8007172:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	e006      	b.n	800718e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
  }
}
 800718e:	4618      	mov	r0, r3
 8007190:	3748      	adds	r7, #72	; 0x48
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	1fe00fff 	.word	0x1fe00fff
 800719c:	18000f3a 	.word	0x18000f3a

080071a0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b092      	sub	sp, #72	; 0x48
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80071ae:	f7fa f9e5 	bl	800157c <HAL_GetTick>
 80071b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d107      	bne.n	80071d2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e16b      	b.n	80074aa <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b01      	cmp	r3, #1
 80071dc:	f040 815e 	bne.w	800749c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80071e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	441a      	add	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d907      	bls.n	8007204 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e152      	b.n	80074aa <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2203      	movs	r2, #3
 8007208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2200      	movs	r2, #0
 8007212:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007218:	2b01      	cmp	r3, #1
 800721a:	d002      	beq.n	8007222 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	025b      	lsls	r3, r3, #9
 8007220:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007222:	f04f 33ff 	mov.w	r3, #4294967295
 8007226:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	025b      	lsls	r3, r3, #9
 800722c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800722e:	2390      	movs	r3, #144	; 0x90
 8007230:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007232:	2300      	movs	r3, #0
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007236:	2300      	movs	r3, #0
 8007238:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800723a:	2300      	movs	r3, #0
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f107 0218 	add.w	r2, r7, #24
 8007246:	4611      	mov	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	f004 f815 	bl	800b278 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800725c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d90a      	bls.n	800727a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007270:	4618      	mov	r0, r3
 8007272:	f004 f8b9 	bl	800b3e8 <SDMMC_CmdWriteMultiBlock>
 8007276:	6478      	str	r0, [r7, #68]	; 0x44
 8007278:	e009      	b.n	800728e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2210      	movs	r2, #16
 800727e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007286:	4618      	mov	r0, r3
 8007288:	f004 f88b 	bl	800b3a2 <SDMMC_CmdWriteSingleBlock>
 800728c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800728e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007290:	2b00      	cmp	r3, #0
 8007292:	d012      	beq.n	80072ba <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a86      	ldr	r2, [pc, #536]	; (80074b4 <HAL_SD_WriteBlocks+0x314>)
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072a2:	431a      	orrs	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e0f7      	b.n	80074aa <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80072be:	e05c      	b.n	800737a <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d037      	beq.n	800733e <HAL_SD_WriteBlocks+0x19e>
 80072ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d0:	2b1f      	cmp	r3, #31
 80072d2:	d934      	bls.n	800733e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	643b      	str	r3, [r7, #64]	; 0x40
 80072d8:	e02b      	b.n	8007332 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80072da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80072e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e2:	3301      	adds	r3, #1
 80072e4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80072e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	021a      	lsls	r2, r3, #8
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80072f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f4:	3301      	adds	r3, #1
 80072f6:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80072f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	041a      	lsls	r2, r3, #16
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007306:	3301      	adds	r3, #1
 8007308:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	061a      	lsls	r2, r3, #24
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007318:	3301      	adds	r3, #1
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f107 0214 	add.w	r2, r7, #20
 8007324:	4611      	mov	r1, r2
 8007326:	4618      	mov	r0, r3
 8007328:	f003 ff2b 	bl	800b182 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800732c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732e:	3301      	adds	r3, #1
 8007330:	643b      	str	r3, [r7, #64]	; 0x40
 8007332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007334:	2b07      	cmp	r3, #7
 8007336:	d9d0      	bls.n	80072da <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733a:	3b20      	subs	r3, #32
 800733c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800733e:	f7fa f91d 	bl	800157c <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800734a:	429a      	cmp	r2, r3
 800734c:	d902      	bls.n	8007354 <HAL_SD_WriteBlocks+0x1b4>
 800734e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007350:	2b00      	cmp	r3, #0
 8007352:	d112      	bne.n	800737a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a56      	ldr	r2, [pc, #344]	; (80074b4 <HAL_SD_WriteBlocks+0x314>)
 800735a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007362:	431a      	orrs	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e097      	b.n	80074aa <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007380:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007384:	2b00      	cmp	r3, #0
 8007386:	d09b      	beq.n	80072c0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007396:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d022      	beq.n	80073ec <HAL_SD_WriteBlocks+0x24c>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d91f      	bls.n	80073ec <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d01b      	beq.n	80073ec <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f004 f839 	bl	800b430 <SDMMC_CmdStopTransfer>
 80073be:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80073c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d012      	beq.n	80073ec <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a3a      	ldr	r2, [pc, #232]	; (80074b4 <HAL_SD_WriteBlocks+0x314>)
 80073cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d4:	431a      	orrs	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e05e      	b.n	80074aa <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d012      	beq.n	8007420 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a2d      	ldr	r2, [pc, #180]	; (80074b4 <HAL_SD_WriteBlocks+0x314>)
 8007400:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	f043 0208 	orr.w	r2, r3, #8
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e044      	b.n	80074aa <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d012      	beq.n	8007454 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a20      	ldr	r2, [pc, #128]	; (80074b4 <HAL_SD_WriteBlocks+0x314>)
 8007434:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743a:	f043 0202 	orr.w	r2, r3, #2
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e02a      	b.n	80074aa <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745a:	f003 0310 	and.w	r3, r3, #16
 800745e:	2b00      	cmp	r3, #0
 8007460:	d012      	beq.n	8007488 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a13      	ldr	r2, [pc, #76]	; (80074b4 <HAL_SD_WriteBlocks+0x314>)
 8007468:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746e:	f043 0210 	orr.w	r2, r3, #16
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e010      	b.n	80074aa <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a0a      	ldr	r2, [pc, #40]	; (80074b8 <HAL_SD_WriteBlocks+0x318>)
 800748e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	e006      	b.n	80074aa <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
  }
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3748      	adds	r7, #72	; 0x48
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	1fe00fff 	.word	0x1fe00fff
 80074b8:	18000f3a 	.word	0x18000f3a

080074bc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
	...

080074d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e2:	0f9b      	lsrs	r3, r3, #30
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ee:	0e9b      	lsrs	r3, r3, #26
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007500:	0e1b      	lsrs	r3, r3, #24
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	b2da      	uxtb	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007512:	0c1b      	lsrs	r3, r3, #16
 8007514:	b2da      	uxtb	r2, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751e:	0a1b      	lsrs	r3, r3, #8
 8007520:	b2da      	uxtb	r2, r3
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752a:	b2da      	uxtb	r2, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007534:	0d1b      	lsrs	r3, r3, #20
 8007536:	b29a      	uxth	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007540:	0c1b      	lsrs	r3, r3, #16
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	b2da      	uxtb	r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007552:	0bdb      	lsrs	r3, r3, #15
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	b2da      	uxtb	r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007564:	0b9b      	lsrs	r3, r3, #14
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	b2da      	uxtb	r2, r3
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007576:	0b5b      	lsrs	r3, r3, #13
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	b2da      	uxtb	r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007588:	0b1b      	lsrs	r3, r3, #12
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	b2da      	uxtb	r2, r3
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2200      	movs	r2, #0
 800759a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d163      	bne.n	800766c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a8:	009a      	lsls	r2, r3, #2
 80075aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80075ae:	4013      	ands	r3, r2
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075b4:	0f92      	lsrs	r2, r2, #30
 80075b6:	431a      	orrs	r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075c0:	0edb      	lsrs	r3, r3, #27
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d2:	0e1b      	lsrs	r3, r3, #24
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075e4:	0d5b      	lsrs	r3, r3, #21
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f6:	0c9b      	lsrs	r3, r3, #18
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007608:	0bdb      	lsrs	r3, r3, #15
 800760a:	b2db      	uxtb	r3, r3
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	b2da      	uxtb	r2, r3
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	7e1b      	ldrb	r3, [r3, #24]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	3302      	adds	r3, #2
 800762c:	2201      	movs	r2, #1
 800762e:	fa02 f303 	lsl.w	r3, r2, r3
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007636:	fb02 f203 	mul.w	r2, r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	7a1b      	ldrb	r3, [r3, #8]
 8007642:	b2db      	uxtb	r3, r3
 8007644:	f003 030f 	and.w	r3, r3, #15
 8007648:	2201      	movs	r2, #1
 800764a:	409a      	lsls	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007658:	0a52      	lsrs	r2, r2, #9
 800765a:	fb02 f203 	mul.w	r2, r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007668:	659a      	str	r2, [r3, #88]	; 0x58
 800766a:	e031      	b.n	80076d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007670:	2b01      	cmp	r3, #1
 8007672:	d11d      	bne.n	80076b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007678:	041b      	lsls	r3, r3, #16
 800767a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007682:	0c1b      	lsrs	r3, r3, #16
 8007684:	431a      	orrs	r2, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	3301      	adds	r3, #1
 8007690:	029a      	lsls	r2, r3, #10
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076a4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	659a      	str	r2, [r3, #88]	; 0x58
 80076ae:	e00f      	b.n	80076d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a58      	ldr	r2, [pc, #352]	; (8007818 <HAL_SD_GetCardCSD+0x344>)
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e09d      	b.n	800780c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076d4:	0b9b      	lsrs	r3, r3, #14
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e6:	09db      	lsrs	r3, r3, #7
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007708:	0fdb      	lsrs	r3, r3, #31
 800770a:	b2da      	uxtb	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007714:	0f5b      	lsrs	r3, r3, #29
 8007716:	b2db      	uxtb	r3, r3
 8007718:	f003 0303 	and.w	r3, r3, #3
 800771c:	b2da      	uxtb	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007726:	0e9b      	lsrs	r3, r3, #26
 8007728:	b2db      	uxtb	r3, r3
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	b2da      	uxtb	r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007738:	0d9b      	lsrs	r3, r3, #22
 800773a:	b2db      	uxtb	r3, r3
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	b2da      	uxtb	r2, r3
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800774a:	0d5b      	lsrs	r3, r3, #21
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	b2da      	uxtb	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007766:	0c1b      	lsrs	r3, r3, #16
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	b2da      	uxtb	r2, r3
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777a:	0bdb      	lsrs	r3, r3, #15
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	b2da      	uxtb	r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778e:	0b9b      	lsrs	r3, r3, #14
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a2:	0b5b      	lsrs	r3, r3, #13
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077b6:	0b1b      	lsrs	r3, r3, #12
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ca:	0a9b      	lsrs	r3, r3, #10
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077de:	0a1b      	lsrs	r3, r3, #8
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	1fe00fff 	.word	0x1fe00fff

0800781c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b094      	sub	sp, #80	; 0x50
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800782c:	f107 0308 	add.w	r3, r7, #8
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fb64 	bl	8007f00 <SD_SendSDStatus>
 8007838:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800783a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783c:	2b00      	cmp	r3, #0
 800783e:	d011      	beq.n	8007864 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a4f      	ldr	r2, [pc, #316]	; (8007984 <HAL_SD_GetCardStatus+0x168>)
 8007846:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800784c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007862:	e070      	b.n	8007946 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	099b      	lsrs	r3, r3, #6
 8007868:	b2db      	uxtb	r3, r3
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	b2da      	uxtb	r2, r3
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	0a1b      	lsrs	r3, r3, #8
 8007888:	b29b      	uxth	r3, r3
 800788a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800788e:	b29a      	uxth	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	0e1b      	lsrs	r3, r3, #24
 8007894:	b29b      	uxth	r3, r3
 8007896:	4313      	orrs	r3, r2
 8007898:	b29a      	uxth	r2, r3
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	061a      	lsls	r2, r3, #24
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	0a1b      	lsrs	r3, r3, #8
 80078b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80078b4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	0e1b      	lsrs	r3, r3, #24
 80078ba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	0d1b      	lsrs	r3, r3, #20
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	0c1b      	lsrs	r3, r3, #16
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	4313      	orrs	r3, r2
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	0a9b      	lsrs	r3, r3, #10
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007908:	b2da      	uxtb	r2, r3
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	0a1b      	lsrs	r3, r3, #8
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	b2da      	uxtb	r2, r3
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	091b      	lsrs	r3, r3, #4
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	b2da      	uxtb	r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	f003 030f 	and.w	r3, r3, #15
 8007936:	b2da      	uxtb	r2, r3
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	0e1b      	lsrs	r3, r3, #24
 8007940:	b2da      	uxtb	r2, r3
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800794e:	4618      	mov	r0, r3
 8007950:	f003 fcbe 	bl	800b2d0 <SDMMC_CmdBlockLength>
 8007954:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00d      	beq.n	8007978 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a08      	ldr	r2, [pc, #32]	; (8007984 <HAL_SD_GetCardStatus+0x168>)
 8007962:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007968:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007978:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800797c:	4618      	mov	r0, r3
 800797e:	3750      	adds	r7, #80	; 0x50
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	1fe00fff 	.word	0x1fe00fff

08007988 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80079e0:	b5b0      	push	{r4, r5, r7, lr}
 80079e2:	b08e      	sub	sp, #56	; 0x38
 80079e4:	af04      	add	r7, sp, #16
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2203      	movs	r2, #3
 80079f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d02e      	beq.n	8007a5e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a06:	d106      	bne.n	8007a16 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	639a      	str	r2, [r3, #56]	; 0x38
 8007a14:	e029      	b.n	8007a6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a1c:	d10a      	bne.n	8007a34 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fb66 	bl	80080f0 <SD_WideBus_Enable>
 8007a24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38
 8007a32:	e01a      	b.n	8007a6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10a      	bne.n	8007a50 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fba3 	bl	8008186 <SD_WideBus_Disable>
 8007a40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a4e:	e00c      	b.n	8007a6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38
 8007a5c:	e005      	b.n	8007a6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a2e      	ldr	r2, [pc, #184]	; (8007b30 <HAL_SD_ConfigWideBusOperation+0x150>)
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a80:	e034      	b.n	8007aec <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d903      	bls.n	8007aa8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	e012      	b.n	8007ace <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab0:	d103      	bne.n	8007aba <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	e009      	b.n	8007ace <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac2:	d102      	bne.n	8007aca <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	61bb      	str	r3, [r7, #24]
 8007ac8:	e001      	b.n	8007ace <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8007aca:	2304      	movs	r3, #4
 8007acc:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681d      	ldr	r5, [r3, #0]
 8007ad2:	466c      	mov	r4, sp
 8007ad4:	f107 0314 	add.w	r3, r7, #20
 8007ad8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ae0:	f107 0308 	add.w	r3, r7, #8
 8007ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f003 fb14 	bl	800b114 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007af4:	4618      	mov	r0, r3
 8007af6:	f003 fbeb 	bl	800b2d0 <SDMMC_CmdBlockLength>
 8007afa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00c      	beq.n	8007b1c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a0a      	ldr	r2, [pc, #40]	; (8007b30 <HAL_SD_ConfigWideBusOperation+0x150>)
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3728      	adds	r7, #40	; 0x28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b30:	1fe00fff 	.word	0x1fe00fff

08007b34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007b40:	f107 030c 	add.w	r3, r7, #12
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 faaa 	bl	80080a0 <SD_SendStatus>
 8007b4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	0a5b      	lsrs	r3, r3, #9
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007b6a:	693b      	ldr	r3, [r7, #16]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b091      	sub	sp, #68	; 0x44
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f003 fb1e 	bl	800b1c6 <SDMMC_GetPowerState>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007b94:	e0a8      	b.n	8007ce8 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d02e      	beq.n	8007bfc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f003 fd6a 	bl	800b67c <SDMMC_CmdSendCID>
 8007ba8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <SD_InitCard+0x40>
    {
      return errorstate;
 8007bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb2:	e099      	b.n	8007ce8 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f003 fb49 	bl	800b252 <SDMMC_GetResponse>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2104      	movs	r1, #4
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f003 fb40 	bl	800b252 <SDMMC_GetResponse>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2108      	movs	r1, #8
 8007bde:	4618      	mov	r0, r3
 8007be0:	f003 fb37 	bl	800b252 <SDMMC_GetResponse>
 8007be4:	4602      	mov	r2, r0
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	210c      	movs	r1, #12
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f003 fb2e 	bl	800b252 <SDMMC_GetResponse>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d00d      	beq.n	8007c20 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f107 020e 	add.w	r2, r7, #14
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f003 fd73 	bl	800b6fa <SDMMC_CmdSetRelAdd>
 8007c14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <SD_InitCard+0xac>
    {
      return errorstate;
 8007c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1e:	e063      	b.n	8007ce8 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d036      	beq.n	8007c96 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007c28:	89fb      	ldrh	r3, [r7, #14]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c38:	041b      	lsls	r3, r3, #16
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f003 fd3c 	bl	800b6ba <SDMMC_CmdSendCSD>
 8007c42:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <SD_InitCard+0xda>
    {
      return errorstate;
 8007c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c4c:	e04c      	b.n	8007ce8 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2100      	movs	r1, #0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f003 fafc 	bl	800b252 <SDMMC_GetResponse>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2104      	movs	r1, #4
 8007c66:	4618      	mov	r0, r3
 8007c68:	f003 faf3 	bl	800b252 <SDMMC_GetResponse>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2108      	movs	r1, #8
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f003 faea 	bl	800b252 <SDMMC_GetResponse>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	210c      	movs	r1, #12
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f003 fae1 	bl	800b252 <SDMMC_GetResponse>
 8007c90:	4602      	mov	r2, r0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2104      	movs	r1, #4
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f003 fad8 	bl	800b252 <SDMMC_GetResponse>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	0d1a      	lsrs	r2, r3, #20
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007caa:	f107 0310 	add.w	r3, r7, #16
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff fc0f 	bl	80074d4 <HAL_SD_GetCardCSD>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cc0:	e012      	b.n	8007ce8 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6819      	ldr	r1, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cca:	041b      	lsls	r3, r3, #16
 8007ccc:	f04f 0400 	mov.w	r4, #0
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4623      	mov	r3, r4
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	f003 fbe7 	bl	800b4a8 <SDMMC_CmdSelDesel>
 8007cda:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <SD_InitCard+0x172>
  {
    return errorstate;
 8007ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce4:	e000      	b.n	8007ce8 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3744      	adds	r7, #68	; 0x44
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd90      	pop	{r4, r7, pc}

08007cf0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8007d04:	f7f9 fc3a 	bl	800157c <HAL_GetTick>
 8007d08:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f003 fbee 	bl	800b4f0 <SDMMC_CmdGoIdleState>
 8007d14:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <SD_PowerON+0x30>
  {
    return errorstate;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	e0e9      	b.n	8007ef4 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f003 fc01 	bl	800b52c <SDMMC_CmdOperCond>
 8007d2a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00d      	beq.n	8007d4e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f003 fbd7 	bl	800b4f0 <SDMMC_CmdGoIdleState>
 8007d42:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <SD_PowerON+0x64>
    {
      return errorstate;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	e0d2      	b.n	8007ef4 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d137      	bne.n	8007dcc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2100      	movs	r1, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f003 fc02 	bl	800b56c <SDMMC_CmdAppCommand>
 8007d68:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d02d      	beq.n	8007dcc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d74:	e0be      	b.n	8007ef4 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f003 fbf5 	bl	800b56c <SDMMC_CmdAppCommand>
 8007d82:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <SD_PowerON+0x9e>
    {
      return errorstate;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	e0b2      	b.n	8007ef4 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	495a      	ldr	r1, [pc, #360]	; (8007efc <SD_PowerON+0x20c>)
 8007d94:	4618      	mov	r0, r3
 8007d96:	f003 fc0c 	bl	800b5b2 <SDMMC_CmdAppOperCommand>
 8007d9a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007da2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007da6:	e0a5      	b.n	8007ef4 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2100      	movs	r1, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f003 fa4f 	bl	800b252 <SDMMC_GetResponse>
 8007db4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	0fdb      	lsrs	r3, r3, #31
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <SD_PowerON+0xd2>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <SD_PowerON+0xd4>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	61bb      	str	r3, [r7, #24]

    count++;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d802      	bhi.n	8007ddc <SD_PowerON+0xec>
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d0cc      	beq.n	8007d76 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d902      	bls.n	8007dec <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dea:	e083      	b.n	8007ef4 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d07d      	beq.n	8007ef2 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d176      	bne.n	8007ef2 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d071      	beq.n	8007ef2 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e14:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f042 0208 	orr.w	r2, r2, #8
 8007e24:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f003 fccc 	bl	800b7c8 <SDMMC_CmdVoltageSwitch>
 8007e30:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00c      	beq.n	8007e52 <SD_PowerON+0x162>
        {
          return errorstate;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	e05b      	b.n	8007ef4 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e3c:	f7f9 fb9e 	bl	800157c <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4a:	d102      	bne.n	8007e52 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007e4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e50:	e050      	b.n	8007ef4 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e60:	d1ec      	bne.n	8007e3c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007e6a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e7a:	d002      	beq.n	8007e82 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007e7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e80:	e038      	b.n	8007ef4 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8007e82:	2001      	movs	r0, #1
 8007e84:	f7ff fb1a 	bl	80074bc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0204 	orr.w	r2, r2, #4
 8007e96:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007e98:	e00a      	b.n	8007eb0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e9a:	f7f9 fb6f 	bl	800157c <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d102      	bne.n	8007eb0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007eaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007eae:	e021      	b.n	8007ef4 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ebe:	d1ec      	bne.n	8007e9a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed8:	d102      	bne.n	8007ee0 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007eda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ede:	e009      	b.n	8007ef4 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2213      	movs	r2, #19
 8007ee6:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3720      	adds	r7, #32
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	c1100000 	.word	0xc1100000

08007f00 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08c      	sub	sp, #48	; 0x30
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f0a:	f7f9 fb37 	bl	800157c <HAL_GetTick>
 8007f0e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f003 f999 	bl	800b252 <SDMMC_GetResponse>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f2a:	d102      	bne.n	8007f32 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f30:	e0b0      	b.n	8008094 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2140      	movs	r1, #64	; 0x40
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f003 f9c9 	bl	800b2d0 <SDMMC_CmdBlockLength>
 8007f3e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	e0a0      	b.n	8008094 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4610      	mov	r0, r2
 8007f60:	f003 fb04 	bl	800b56c <SDMMC_CmdAppCommand>
 8007f64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	e08d      	b.n	8008094 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f78:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007f7e:	2340      	movs	r3, #64	; 0x40
 8007f80:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007f82:	2360      	movs	r3, #96	; 0x60
 8007f84:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f86:	2302      	movs	r3, #2
 8007f88:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f107 0208 	add.w	r2, r7, #8
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f003 f96b 	bl	800b278 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f003 fbec 	bl	800b784 <SDMMC_CmdStatusRegister>
 8007fac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d02b      	beq.n	800800c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	e069      	b.n	8008094 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d013      	beq.n	8007ff6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd2:	e00d      	b.n	8007ff0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f003 f8c5 	bl	800b168 <SDMMC_ReadFIFO>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	601a      	str	r2, [r3, #0]
        pData++;
 8007fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	3301      	adds	r3, #1
 8007fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	2b07      	cmp	r3, #7
 8007ff4:	d9ee      	bls.n	8007fd4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ff6:	f7f9 fac1 	bl	800157c <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008004:	d102      	bne.n	800800c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008006:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800800a:	e043      	b.n	8008094 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008012:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0d2      	beq.n	8007fc0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008020:	f003 0308 	and.w	r3, r3, #8
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008028:	2308      	movs	r3, #8
 800802a:	e033      	b.n	8008094 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800803a:	2302      	movs	r3, #2
 800803c:	e02a      	b.n	8008094 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008044:	f003 0320 	and.w	r3, r3, #32
 8008048:	2b00      	cmp	r3, #0
 800804a:	d017      	beq.n	800807c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800804c:	2320      	movs	r3, #32
 800804e:	e021      	b.n	8008094 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4618      	mov	r0, r3
 8008056:	f003 f887 	bl	800b168 <SDMMC_ReadFIFO>
 800805a:	4602      	mov	r2, r0
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	601a      	str	r2, [r3, #0]
    pData++;
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	3304      	adds	r3, #4
 8008064:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008066:	f7f9 fa89 	bl	800157c <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d102      	bne.n	800807c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008076:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800807a:	e00b      	b.n	8008094 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e2      	bne.n	8008050 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a03      	ldr	r2, [pc, #12]	; (800809c <SD_SendSDStatus+0x19c>)
 8008090:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3730      	adds	r7, #48	; 0x30
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	18000f3a 	.word	0x18000f3a

080080a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80080b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080b4:	e018      	b.n	80080e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080be:	041b      	lsls	r3, r3, #16
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f003 fb3b 	bl	800b73e <SDMMC_CmdSendStatus>
 80080c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	e009      	b.n	80080e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2100      	movs	r1, #0
 80080da:	4618      	mov	r0, r3
 80080dc:	f003 f8b9 	bl	800b252 <SDMMC_GetResponse>
 80080e0:	4602      	mov	r2, r0
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	2300      	movs	r3, #0
 80080fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2100      	movs	r1, #0
 8008106:	4618      	mov	r0, r3
 8008108:	f003 f8a3 	bl	800b252 <SDMMC_GetResponse>
 800810c:	4603      	mov	r3, r0
 800810e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008116:	d102      	bne.n	800811e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008118:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800811c:	e02f      	b.n	800817e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800811e:	f107 030c 	add.w	r3, r7, #12
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f879 	bl	800821c <SD_FindSCR>
 800812a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	e023      	b.n	800817e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d01c      	beq.n	800817a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008148:	041b      	lsls	r3, r3, #16
 800814a:	4619      	mov	r1, r3
 800814c:	4610      	mov	r0, r2
 800814e:	f003 fa0d 	bl	800b56c <SDMMC_CmdAppCommand>
 8008152:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	e00f      	b.n	800817e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2102      	movs	r1, #2
 8008164:	4618      	mov	r0, r3
 8008166:	f003 fa44 	bl	800b5f2 <SDMMC_CmdBusWidth>
 800816a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	e003      	b.n	800817e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008176:	2300      	movs	r3, #0
 8008178:	e001      	b.n	800817e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800817a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b086      	sub	sp, #24
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	2300      	movs	r3, #0
 8008194:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2100      	movs	r1, #0
 800819c:	4618      	mov	r0, r3
 800819e:	f003 f858 	bl	800b252 <SDMMC_GetResponse>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ac:	d102      	bne.n	80081b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081b2:	e02f      	b.n	8008214 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081b4:	f107 030c 	add.w	r3, r7, #12
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f82e 	bl	800821c <SD_FindSCR>
 80081c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	e023      	b.n	8008214 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d01c      	beq.n	8008210 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081de:	041b      	lsls	r3, r3, #16
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f003 f9c2 	bl	800b56c <SDMMC_CmdAppCommand>
 80081e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	e00f      	b.n	8008214 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2100      	movs	r1, #0
 80081fa:	4618      	mov	r0, r3
 80081fc:	f003 f9f9 	bl	800b5f2 <SDMMC_CmdBusWidth>
 8008200:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	e003      	b.n	8008214 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800820c:	2300      	movs	r3, #0
 800820e:	e001      	b.n	8008214 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008210:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08e      	sub	sp, #56	; 0x38
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008226:	f7f9 f9a9 	bl	800157c <HAL_GetTick>
 800822a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008230:	2300      	movs	r3, #0
 8008232:	60bb      	str	r3, [r7, #8]
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2108      	movs	r1, #8
 8008242:	4618      	mov	r0, r3
 8008244:	f003 f844 	bl	800b2d0 <SDMMC_CmdBlockLength>
 8008248:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	e0ad      	b.n	80083b0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800825c:	041b      	lsls	r3, r3, #16
 800825e:	4619      	mov	r1, r3
 8008260:	4610      	mov	r0, r2
 8008262:	f003 f983 	bl	800b56c <SDMMC_CmdAppCommand>
 8008266:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <SD_FindSCR+0x56>
  {
    return errorstate;
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	e09e      	b.n	80083b0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008272:	f04f 33ff 	mov.w	r3, #4294967295
 8008276:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008278:	2308      	movs	r3, #8
 800827a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800827c:	2330      	movs	r3, #48	; 0x30
 800827e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008280:	2302      	movs	r3, #2
 8008282:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008284:	2300      	movs	r3, #0
 8008286:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008288:	2301      	movs	r3, #1
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f107 0210 	add.w	r2, r7, #16
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f002 ffee 	bl	800b278 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f003 f9c9 	bl	800b638 <SDMMC_CmdSendSCR>
 80082a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d027      	beq.n	80082fe <SD_FindSCR+0xe2>
  {
    return errorstate;
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	e07e      	b.n	80083b0 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d113      	bne.n	80082e8 <SD_FindSCR+0xcc>
 80082c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d110      	bne.n	80082e8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f002 ff4c 	bl	800b168 <SDMMC_ReadFIFO>
 80082d0:	4603      	mov	r3, r0
 80082d2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	f002 ff45 	bl	800b168 <SDMMC_ReadFIFO>
 80082de:	4603      	mov	r3, r0
 80082e0:	60fb      	str	r3, [r7, #12]
      index++;
 80082e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e4:	3301      	adds	r3, #1
 80082e6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082e8:	f7f9 f948 	bl	800157c <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d102      	bne.n	80082fe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80082f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082fc:	e058      	b.n	80083b0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008304:	f240 532a 	movw	r3, #1322	; 0x52a
 8008308:	4013      	ands	r3, r2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d0d1      	beq.n	80082b2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2208      	movs	r2, #8
 8008322:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008324:	2308      	movs	r3, #8
 8008326:	e043      	b.n	80083b0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2202      	movs	r2, #2
 800833c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800833e:	2302      	movs	r3, #2
 8008340:	e036      	b.n	80083b0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008348:	f003 0320 	and.w	r3, r3, #32
 800834c:	2b00      	cmp	r3, #0
 800834e:	d005      	beq.n	800835c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2220      	movs	r2, #32
 8008356:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008358:	2320      	movs	r3, #32
 800835a:	e029      	b.n	80083b0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a15      	ldr	r2, [pc, #84]	; (80083b8 <SD_FindSCR+0x19c>)
 8008362:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	061a      	lsls	r2, r3, #24
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	021b      	lsls	r3, r3, #8
 800836c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008370:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	0a1b      	lsrs	r3, r3, #8
 8008376:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800837a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	0e1b      	lsrs	r3, r3, #24
 8008380:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	601a      	str	r2, [r3, #0]
    scr++;
 8008386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008388:	3304      	adds	r3, #4
 800838a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	061a      	lsls	r2, r3, #24
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008398:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	0a1b      	lsrs	r3, r3, #8
 800839e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	0e1b      	lsrs	r3, r3, #24
 80083a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3738      	adds	r7, #56	; 0x38
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	18000f3a 	.word	0x18000f3a

080083bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e01d      	b.n	800840a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7f8 fed0 	bl	8001188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3304      	adds	r3, #4
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f000 f97c 	bl	80086f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <HAL_TIM_Base_Start_IT+0x50>)
 8008434:	4013      	ands	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b06      	cmp	r3, #6
 800843c:	d00b      	beq.n	8008456 <HAL_TIM_Base_Start_IT+0x42>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008444:	d007      	beq.n	8008456 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f042 0201 	orr.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	00010007 	.word	0x00010007

08008468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b02      	cmp	r3, #2
 800847c:	d122      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b02      	cmp	r3, #2
 800848a:	d11b      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f06f 0202 	mvn.w	r2, #2
 8008494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f905 	bl	80086ba <HAL_TIM_IC_CaptureCallback>
 80084b0:	e005      	b.n	80084be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f8f7 	bl	80086a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f908 	bl	80086ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d122      	bne.n	8008518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d11b      	bne.n	8008518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0204 	mvn.w	r2, #4
 80084e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2202      	movs	r2, #2
 80084ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f8db 	bl	80086ba <HAL_TIM_IC_CaptureCallback>
 8008504:	e005      	b.n	8008512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f8cd 	bl	80086a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f8de 	bl	80086ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b08      	cmp	r3, #8
 8008524:	d122      	bne.n	800856c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b08      	cmp	r3, #8
 8008532:	d11b      	bne.n	800856c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0208 	mvn.w	r2, #8
 800853c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2204      	movs	r2, #4
 8008542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f8b1 	bl	80086ba <HAL_TIM_IC_CaptureCallback>
 8008558:	e005      	b.n	8008566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f8a3 	bl	80086a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f8b4 	bl	80086ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0310 	and.w	r3, r3, #16
 8008576:	2b10      	cmp	r3, #16
 8008578:	d122      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b10      	cmp	r3, #16
 8008586:	d11b      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0210 	mvn.w	r2, #16
 8008590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2208      	movs	r2, #8
 8008596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f887 	bl	80086ba <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f879 	bl	80086a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f88a 	bl	80086ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d10e      	bne.n	80085ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d107      	bne.n	80085ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0201 	mvn.w	r2, #1
 80085e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7f8 fb9c 	bl	8000d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f6:	2b80      	cmp	r3, #128	; 0x80
 80085f8:	d10e      	bne.n	8008618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d107      	bne.n	8008618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f914 	bl	8008840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008626:	d10e      	bne.n	8008646 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008632:	2b80      	cmp	r3, #128	; 0x80
 8008634:	d107      	bne.n	8008646 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800863e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f907 	bl	8008854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008650:	2b40      	cmp	r3, #64	; 0x40
 8008652:	d10e      	bne.n	8008672 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865e:	2b40      	cmp	r3, #64	; 0x40
 8008660:	d107      	bne.n	8008672 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800866a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f838 	bl	80086e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	f003 0320 	and.w	r3, r3, #32
 800867c:	2b20      	cmp	r3, #32
 800867e:	d10e      	bne.n	800869e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f003 0320 	and.w	r3, r3, #32
 800868a:	2b20      	cmp	r3, #32
 800868c:	d107      	bne.n	800869e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f06f 0220 	mvn.w	r2, #32
 8008696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8c7 	bl	800882c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800869e:	bf00      	nop
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a40      	ldr	r2, [pc, #256]	; (800880c <TIM_Base_SetConfig+0x114>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d013      	beq.n	8008738 <TIM_Base_SetConfig+0x40>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008716:	d00f      	beq.n	8008738 <TIM_Base_SetConfig+0x40>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a3d      	ldr	r2, [pc, #244]	; (8008810 <TIM_Base_SetConfig+0x118>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d00b      	beq.n	8008738 <TIM_Base_SetConfig+0x40>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a3c      	ldr	r2, [pc, #240]	; (8008814 <TIM_Base_SetConfig+0x11c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d007      	beq.n	8008738 <TIM_Base_SetConfig+0x40>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a3b      	ldr	r2, [pc, #236]	; (8008818 <TIM_Base_SetConfig+0x120>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d003      	beq.n	8008738 <TIM_Base_SetConfig+0x40>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a3a      	ldr	r2, [pc, #232]	; (800881c <TIM_Base_SetConfig+0x124>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d108      	bne.n	800874a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a2f      	ldr	r2, [pc, #188]	; (800880c <TIM_Base_SetConfig+0x114>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d01f      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008758:	d01b      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a2c      	ldr	r2, [pc, #176]	; (8008810 <TIM_Base_SetConfig+0x118>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d017      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a2b      	ldr	r2, [pc, #172]	; (8008814 <TIM_Base_SetConfig+0x11c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d013      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a2a      	ldr	r2, [pc, #168]	; (8008818 <TIM_Base_SetConfig+0x120>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00f      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a29      	ldr	r2, [pc, #164]	; (800881c <TIM_Base_SetConfig+0x124>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00b      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a28      	ldr	r2, [pc, #160]	; (8008820 <TIM_Base_SetConfig+0x128>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d007      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a27      	ldr	r2, [pc, #156]	; (8008824 <TIM_Base_SetConfig+0x12c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d003      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a26      	ldr	r2, [pc, #152]	; (8008828 <TIM_Base_SetConfig+0x130>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d108      	bne.n	80087a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a10      	ldr	r2, [pc, #64]	; (800880c <TIM_Base_SetConfig+0x114>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00f      	beq.n	80087f0 <TIM_Base_SetConfig+0xf8>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a12      	ldr	r2, [pc, #72]	; (800881c <TIM_Base_SetConfig+0x124>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00b      	beq.n	80087f0 <TIM_Base_SetConfig+0xf8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a11      	ldr	r2, [pc, #68]	; (8008820 <TIM_Base_SetConfig+0x128>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d007      	beq.n	80087f0 <TIM_Base_SetConfig+0xf8>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a10      	ldr	r2, [pc, #64]	; (8008824 <TIM_Base_SetConfig+0x12c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d003      	beq.n	80087f0 <TIM_Base_SetConfig+0xf8>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a0f      	ldr	r2, [pc, #60]	; (8008828 <TIM_Base_SetConfig+0x130>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d103      	bne.n	80087f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	615a      	str	r2, [r3, #20]
}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40010000 	.word	0x40010000
 8008810:	40000400 	.word	0x40000400
 8008814:	40000800 	.word	0x40000800
 8008818:	40000c00 	.word	0x40000c00
 800881c:	40010400 	.word	0x40010400
 8008820:	40014000 	.word	0x40014000
 8008824:	40014400 	.word	0x40014400
 8008828:	40014800 	.word	0x40014800

0800882c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e042      	b.n	8008900 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7f8 fca3 	bl	80011d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2224      	movs	r2, #36	; 0x24
 8008896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0201 	bic.w	r2, r2, #1
 80088a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f82c 	bl	8008908 <UART_SetConfig>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d101      	bne.n	80088ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e022      	b.n	8008900 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f002 f99e 	bl	800ac04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0201 	orr.w	r2, r2, #1
 80088f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f002 fa25 	bl	800ad48 <UART_CheckIdleState>
 80088fe:	4603      	mov	r3, r0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008908:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800890c:	b090      	sub	sp, #64	; 0x40
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008912:	2300      	movs	r3, #0
 8008914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800891c:	2300      	movs	r3, #0
 800891e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	4313      	orrs	r3, r2
 8008936:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800893c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800893e:	4313      	orrs	r3, r2
 8008940:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	4bc1      	ldr	r3, [pc, #772]	; (8008c50 <UART_SetConfig+0x348>)
 800894a:	4013      	ands	r3, r2
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6812      	ldr	r2, [r2, #0]
 8008950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008952:	430b      	orrs	r3, r1
 8008954:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4ab7      	ldr	r2, [pc, #732]	; (8008c54 <UART_SetConfig+0x34c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d004      	beq.n	8008986 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008982:	4313      	orrs	r3, r2
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	4bb2      	ldr	r3, [pc, #712]	; (8008c58 <UART_SetConfig+0x350>)
 800898e:	4013      	ands	r3, r2
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6812      	ldr	r2, [r2, #0]
 8008994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008996:	430b      	orrs	r3, r1
 8008998:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	f023 010f 	bic.w	r1, r3, #15
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4aa9      	ldr	r2, [pc, #676]	; (8008c5c <UART_SetConfig+0x354>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d177      	bne.n	8008aaa <UART_SetConfig+0x1a2>
 80089ba:	4ba9      	ldr	r3, [pc, #676]	; (8008c60 <UART_SetConfig+0x358>)
 80089bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089c2:	2b28      	cmp	r3, #40	; 0x28
 80089c4:	d86c      	bhi.n	8008aa0 <UART_SetConfig+0x198>
 80089c6:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <UART_SetConfig+0xc4>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a71 	.word	0x08008a71
 80089d0:	08008aa1 	.word	0x08008aa1
 80089d4:	08008aa1 	.word	0x08008aa1
 80089d8:	08008aa1 	.word	0x08008aa1
 80089dc:	08008aa1 	.word	0x08008aa1
 80089e0:	08008aa1 	.word	0x08008aa1
 80089e4:	08008aa1 	.word	0x08008aa1
 80089e8:	08008aa1 	.word	0x08008aa1
 80089ec:	08008a79 	.word	0x08008a79
 80089f0:	08008aa1 	.word	0x08008aa1
 80089f4:	08008aa1 	.word	0x08008aa1
 80089f8:	08008aa1 	.word	0x08008aa1
 80089fc:	08008aa1 	.word	0x08008aa1
 8008a00:	08008aa1 	.word	0x08008aa1
 8008a04:	08008aa1 	.word	0x08008aa1
 8008a08:	08008aa1 	.word	0x08008aa1
 8008a0c:	08008a81 	.word	0x08008a81
 8008a10:	08008aa1 	.word	0x08008aa1
 8008a14:	08008aa1 	.word	0x08008aa1
 8008a18:	08008aa1 	.word	0x08008aa1
 8008a1c:	08008aa1 	.word	0x08008aa1
 8008a20:	08008aa1 	.word	0x08008aa1
 8008a24:	08008aa1 	.word	0x08008aa1
 8008a28:	08008aa1 	.word	0x08008aa1
 8008a2c:	08008a89 	.word	0x08008a89
 8008a30:	08008aa1 	.word	0x08008aa1
 8008a34:	08008aa1 	.word	0x08008aa1
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008aa1 	.word	0x08008aa1
 8008a40:	08008aa1 	.word	0x08008aa1
 8008a44:	08008aa1 	.word	0x08008aa1
 8008a48:	08008aa1 	.word	0x08008aa1
 8008a4c:	08008a91 	.word	0x08008a91
 8008a50:	08008aa1 	.word	0x08008aa1
 8008a54:	08008aa1 	.word	0x08008aa1
 8008a58:	08008aa1 	.word	0x08008aa1
 8008a5c:	08008aa1 	.word	0x08008aa1
 8008a60:	08008aa1 	.word	0x08008aa1
 8008a64:	08008aa1 	.word	0x08008aa1
 8008a68:	08008aa1 	.word	0x08008aa1
 8008a6c:	08008a99 	.word	0x08008a99
 8008a70:	2301      	movs	r3, #1
 8008a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a76:	e233      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008a78:	2304      	movs	r3, #4
 8008a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a7e:	e22f      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008a80:	2308      	movs	r3, #8
 8008a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a86:	e22b      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008a88:	2310      	movs	r3, #16
 8008a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a8e:	e227      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008a90:	2320      	movs	r3, #32
 8008a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a96:	e223      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008a98:	2340      	movs	r3, #64	; 0x40
 8008a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a9e:	e21f      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008aa0:	2380      	movs	r3, #128	; 0x80
 8008aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008aa6:	bf00      	nop
 8008aa8:	e21a      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a6d      	ldr	r2, [pc, #436]	; (8008c64 <UART_SetConfig+0x35c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d132      	bne.n	8008b1a <UART_SetConfig+0x212>
 8008ab4:	4b6a      	ldr	r3, [pc, #424]	; (8008c60 <UART_SetConfig+0x358>)
 8008ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	2b05      	cmp	r3, #5
 8008abe:	d827      	bhi.n	8008b10 <UART_SetConfig+0x208>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <UART_SetConfig+0x1c0>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008ae1 	.word	0x08008ae1
 8008acc:	08008ae9 	.word	0x08008ae9
 8008ad0:	08008af1 	.word	0x08008af1
 8008ad4:	08008af9 	.word	0x08008af9
 8008ad8:	08008b01 	.word	0x08008b01
 8008adc:	08008b09 	.word	0x08008b09
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ae6:	e1fb      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008ae8:	2304      	movs	r3, #4
 8008aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008aee:	e1f7      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008af0:	2308      	movs	r3, #8
 8008af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008af6:	e1f3      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008af8:	2310      	movs	r3, #16
 8008afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008afe:	e1ef      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b00:	2320      	movs	r3, #32
 8008b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b06:	e1eb      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b08:	2340      	movs	r3, #64	; 0x40
 8008b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b0e:	e1e7      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b10:	2380      	movs	r3, #128	; 0x80
 8008b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b16:	bf00      	nop
 8008b18:	e1e2      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a52      	ldr	r2, [pc, #328]	; (8008c68 <UART_SetConfig+0x360>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d132      	bne.n	8008b8a <UART_SetConfig+0x282>
 8008b24:	4b4e      	ldr	r3, [pc, #312]	; (8008c60 <UART_SetConfig+0x358>)
 8008b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	2b05      	cmp	r3, #5
 8008b2e:	d827      	bhi.n	8008b80 <UART_SetConfig+0x278>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <UART_SetConfig+0x230>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b51 	.word	0x08008b51
 8008b3c:	08008b59 	.word	0x08008b59
 8008b40:	08008b61 	.word	0x08008b61
 8008b44:	08008b69 	.word	0x08008b69
 8008b48:	08008b71 	.word	0x08008b71
 8008b4c:	08008b79 	.word	0x08008b79
 8008b50:	2300      	movs	r3, #0
 8008b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b56:	e1c3      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b58:	2304      	movs	r3, #4
 8008b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b5e:	e1bf      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b60:	2308      	movs	r3, #8
 8008b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b66:	e1bb      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b68:	2310      	movs	r3, #16
 8008b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b6e:	e1b7      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b70:	2320      	movs	r3, #32
 8008b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b76:	e1b3      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b78:	2340      	movs	r3, #64	; 0x40
 8008b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b7e:	e1af      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b80:	2380      	movs	r3, #128	; 0x80
 8008b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b86:	bf00      	nop
 8008b88:	e1aa      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a37      	ldr	r2, [pc, #220]	; (8008c6c <UART_SetConfig+0x364>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d132      	bne.n	8008bfa <UART_SetConfig+0x2f2>
 8008b94:	4b32      	ldr	r3, [pc, #200]	; (8008c60 <UART_SetConfig+0x358>)
 8008b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	2b05      	cmp	r3, #5
 8008b9e:	d827      	bhi.n	8008bf0 <UART_SetConfig+0x2e8>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <UART_SetConfig+0x2a0>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bc9 	.word	0x08008bc9
 8008bb0:	08008bd1 	.word	0x08008bd1
 8008bb4:	08008bd9 	.word	0x08008bd9
 8008bb8:	08008be1 	.word	0x08008be1
 8008bbc:	08008be9 	.word	0x08008be9
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bc6:	e18b      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bce:	e187      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bd6:	e183      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008bd8:	2310      	movs	r3, #16
 8008bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bde:	e17f      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008be0:	2320      	movs	r3, #32
 8008be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008be6:	e17b      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008be8:	2340      	movs	r3, #64	; 0x40
 8008bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bee:	e177      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008bf0:	2380      	movs	r3, #128	; 0x80
 8008bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bf6:	bf00      	nop
 8008bf8:	e172      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a1c      	ldr	r2, [pc, #112]	; (8008c70 <UART_SetConfig+0x368>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d144      	bne.n	8008c8e <UART_SetConfig+0x386>
 8008c04:	4b16      	ldr	r3, [pc, #88]	; (8008c60 <UART_SetConfig+0x358>)
 8008c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	2b05      	cmp	r3, #5
 8008c0e:	d839      	bhi.n	8008c84 <UART_SetConfig+0x37c>
 8008c10:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <UART_SetConfig+0x310>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c31 	.word	0x08008c31
 8008c1c:	08008c39 	.word	0x08008c39
 8008c20:	08008c41 	.word	0x08008c41
 8008c24:	08008c49 	.word	0x08008c49
 8008c28:	08008c75 	.word	0x08008c75
 8008c2c:	08008c7d 	.word	0x08008c7d
 8008c30:	2300      	movs	r3, #0
 8008c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c36:	e153      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008c38:	2304      	movs	r3, #4
 8008c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c3e:	e14f      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008c40:	2308      	movs	r3, #8
 8008c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c46:	e14b      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008c48:	2310      	movs	r3, #16
 8008c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c4e:	e147      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008c50:	cfff69f3 	.word	0xcfff69f3
 8008c54:	58000c00 	.word	0x58000c00
 8008c58:	11fff4ff 	.word	0x11fff4ff
 8008c5c:	40011000 	.word	0x40011000
 8008c60:	58024400 	.word	0x58024400
 8008c64:	40004400 	.word	0x40004400
 8008c68:	40004800 	.word	0x40004800
 8008c6c:	40004c00 	.word	0x40004c00
 8008c70:	40005000 	.word	0x40005000
 8008c74:	2320      	movs	r3, #32
 8008c76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c7a:	e131      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008c7c:	2340      	movs	r3, #64	; 0x40
 8008c7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c82:	e12d      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008c84:	2380      	movs	r3, #128	; 0x80
 8008c86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c8a:	bf00      	nop
 8008c8c:	e128      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4ac3      	ldr	r2, [pc, #780]	; (8008fa0 <UART_SetConfig+0x698>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d178      	bne.n	8008d8a <UART_SetConfig+0x482>
 8008c98:	4bc2      	ldr	r3, [pc, #776]	; (8008fa4 <UART_SetConfig+0x69c>)
 8008c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ca0:	2b28      	cmp	r3, #40	; 0x28
 8008ca2:	d86d      	bhi.n	8008d80 <UART_SetConfig+0x478>
 8008ca4:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <UART_SetConfig+0x3a4>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008d51 	.word	0x08008d51
 8008cb0:	08008d81 	.word	0x08008d81
 8008cb4:	08008d81 	.word	0x08008d81
 8008cb8:	08008d81 	.word	0x08008d81
 8008cbc:	08008d81 	.word	0x08008d81
 8008cc0:	08008d81 	.word	0x08008d81
 8008cc4:	08008d81 	.word	0x08008d81
 8008cc8:	08008d81 	.word	0x08008d81
 8008ccc:	08008d59 	.word	0x08008d59
 8008cd0:	08008d81 	.word	0x08008d81
 8008cd4:	08008d81 	.word	0x08008d81
 8008cd8:	08008d81 	.word	0x08008d81
 8008cdc:	08008d81 	.word	0x08008d81
 8008ce0:	08008d81 	.word	0x08008d81
 8008ce4:	08008d81 	.word	0x08008d81
 8008ce8:	08008d81 	.word	0x08008d81
 8008cec:	08008d61 	.word	0x08008d61
 8008cf0:	08008d81 	.word	0x08008d81
 8008cf4:	08008d81 	.word	0x08008d81
 8008cf8:	08008d81 	.word	0x08008d81
 8008cfc:	08008d81 	.word	0x08008d81
 8008d00:	08008d81 	.word	0x08008d81
 8008d04:	08008d81 	.word	0x08008d81
 8008d08:	08008d81 	.word	0x08008d81
 8008d0c:	08008d69 	.word	0x08008d69
 8008d10:	08008d81 	.word	0x08008d81
 8008d14:	08008d81 	.word	0x08008d81
 8008d18:	08008d81 	.word	0x08008d81
 8008d1c:	08008d81 	.word	0x08008d81
 8008d20:	08008d81 	.word	0x08008d81
 8008d24:	08008d81 	.word	0x08008d81
 8008d28:	08008d81 	.word	0x08008d81
 8008d2c:	08008d71 	.word	0x08008d71
 8008d30:	08008d81 	.word	0x08008d81
 8008d34:	08008d81 	.word	0x08008d81
 8008d38:	08008d81 	.word	0x08008d81
 8008d3c:	08008d81 	.word	0x08008d81
 8008d40:	08008d81 	.word	0x08008d81
 8008d44:	08008d81 	.word	0x08008d81
 8008d48:	08008d81 	.word	0x08008d81
 8008d4c:	08008d79 	.word	0x08008d79
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d56:	e0c3      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008d58:	2304      	movs	r3, #4
 8008d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d5e:	e0bf      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008d60:	2308      	movs	r3, #8
 8008d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d66:	e0bb      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008d68:	2310      	movs	r3, #16
 8008d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d6e:	e0b7      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008d70:	2320      	movs	r3, #32
 8008d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d76:	e0b3      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008d78:	2340      	movs	r3, #64	; 0x40
 8008d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d7e:	e0af      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008d80:	2380      	movs	r3, #128	; 0x80
 8008d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d86:	bf00      	nop
 8008d88:	e0aa      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a86      	ldr	r2, [pc, #536]	; (8008fa8 <UART_SetConfig+0x6a0>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d132      	bne.n	8008dfa <UART_SetConfig+0x4f2>
 8008d94:	4b83      	ldr	r3, [pc, #524]	; (8008fa4 <UART_SetConfig+0x69c>)
 8008d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d98:	f003 0307 	and.w	r3, r3, #7
 8008d9c:	2b05      	cmp	r3, #5
 8008d9e:	d827      	bhi.n	8008df0 <UART_SetConfig+0x4e8>
 8008da0:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <UART_SetConfig+0x4a0>)
 8008da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da6:	bf00      	nop
 8008da8:	08008dc1 	.word	0x08008dc1
 8008dac:	08008dc9 	.word	0x08008dc9
 8008db0:	08008dd1 	.word	0x08008dd1
 8008db4:	08008dd9 	.word	0x08008dd9
 8008db8:	08008de1 	.word	0x08008de1
 8008dbc:	08008de9 	.word	0x08008de9
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dc6:	e08b      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008dc8:	2304      	movs	r3, #4
 8008dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dce:	e087      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dd6:	e083      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dde:	e07f      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008de0:	2320      	movs	r3, #32
 8008de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008de6:	e07b      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008de8:	2340      	movs	r3, #64	; 0x40
 8008dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dee:	e077      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008df0:	2380      	movs	r3, #128	; 0x80
 8008df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008df6:	bf00      	nop
 8008df8:	e072      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a6b      	ldr	r2, [pc, #428]	; (8008fac <UART_SetConfig+0x6a4>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d132      	bne.n	8008e6a <UART_SetConfig+0x562>
 8008e04:	4b67      	ldr	r3, [pc, #412]	; (8008fa4 <UART_SetConfig+0x69c>)
 8008e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e08:	f003 0307 	and.w	r3, r3, #7
 8008e0c:	2b05      	cmp	r3, #5
 8008e0e:	d827      	bhi.n	8008e60 <UART_SetConfig+0x558>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <UART_SetConfig+0x510>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e31 	.word	0x08008e31
 8008e1c:	08008e39 	.word	0x08008e39
 8008e20:	08008e41 	.word	0x08008e41
 8008e24:	08008e49 	.word	0x08008e49
 8008e28:	08008e51 	.word	0x08008e51
 8008e2c:	08008e59 	.word	0x08008e59
 8008e30:	2300      	movs	r3, #0
 8008e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e36:	e053      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008e38:	2304      	movs	r3, #4
 8008e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e3e:	e04f      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008e40:	2308      	movs	r3, #8
 8008e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e46:	e04b      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008e48:	2310      	movs	r3, #16
 8008e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e4e:	e047      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008e50:	2320      	movs	r3, #32
 8008e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e56:	e043      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008e58:	2340      	movs	r3, #64	; 0x40
 8008e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e5e:	e03f      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008e60:	2380      	movs	r3, #128	; 0x80
 8008e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e66:	bf00      	nop
 8008e68:	e03a      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a50      	ldr	r2, [pc, #320]	; (8008fb0 <UART_SetConfig+0x6a8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d132      	bne.n	8008eda <UART_SetConfig+0x5d2>
 8008e74:	4b4b      	ldr	r3, [pc, #300]	; (8008fa4 <UART_SetConfig+0x69c>)
 8008e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e78:	f003 0307 	and.w	r3, r3, #7
 8008e7c:	2b05      	cmp	r3, #5
 8008e7e:	d827      	bhi.n	8008ed0 <UART_SetConfig+0x5c8>
 8008e80:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <UART_SetConfig+0x580>)
 8008e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e86:	bf00      	nop
 8008e88:	08008ea1 	.word	0x08008ea1
 8008e8c:	08008ea9 	.word	0x08008ea9
 8008e90:	08008eb1 	.word	0x08008eb1
 8008e94:	08008eb9 	.word	0x08008eb9
 8008e98:	08008ec1 	.word	0x08008ec1
 8008e9c:	08008ec9 	.word	0x08008ec9
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ea6:	e01b      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008ea8:	2304      	movs	r3, #4
 8008eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008eae:	e017      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008eb6:	e013      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ebe:	e00f      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008ec0:	2320      	movs	r3, #32
 8008ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ec6:	e00b      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008ec8:	2340      	movs	r3, #64	; 0x40
 8008eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ece:	e007      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008ed0:	2380      	movs	r3, #128	; 0x80
 8008ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ed6:	bf00      	nop
 8008ed8:	e002      	b.n	8008ee0 <UART_SetConfig+0x5d8>
 8008eda:	2380      	movs	r3, #128	; 0x80
 8008edc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a32      	ldr	r2, [pc, #200]	; (8008fb0 <UART_SetConfig+0x6a8>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	f040 86f7 	bne.w	8009cda <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008eec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008ef0:	2b08      	cmp	r3, #8
 8008ef2:	f000 80c0 	beq.w	8009076 <UART_SetConfig+0x76e>
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	dc04      	bgt.n	8008f04 <UART_SetConfig+0x5fc>
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d00c      	beq.n	8008f18 <UART_SetConfig+0x610>
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	d065      	beq.n	8008fce <UART_SetConfig+0x6c6>
 8008f02:	e27a      	b.n	80093fa <UART_SetConfig+0xaf2>
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	f000 81b0 	beq.w	800926a <UART_SetConfig+0x962>
 8008f0a:	2b40      	cmp	r3, #64	; 0x40
 8008f0c:	f000 821e 	beq.w	800934c <UART_SetConfig+0xa44>
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	f000 8104 	beq.w	800911e <UART_SetConfig+0x816>
 8008f16:	e270      	b.n	80093fa <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008f18:	f7fc fdfa 	bl	8005b10 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d04e      	beq.n	8008fc4 <UART_SetConfig+0x6bc>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d048      	beq.n	8008fc0 <UART_SetConfig+0x6b8>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d042      	beq.n	8008fbc <UART_SetConfig+0x6b4>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d03c      	beq.n	8008fb8 <UART_SetConfig+0x6b0>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	2b04      	cmp	r3, #4
 8008f44:	d036      	beq.n	8008fb4 <UART_SetConfig+0x6ac>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	2b05      	cmp	r3, #5
 8008f4c:	d026      	beq.n	8008f9c <UART_SetConfig+0x694>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f52:	2b06      	cmp	r3, #6
 8008f54:	d020      	beq.n	8008f98 <UART_SetConfig+0x690>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	2b07      	cmp	r3, #7
 8008f5c:	d01a      	beq.n	8008f94 <UART_SetConfig+0x68c>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	d014      	beq.n	8008f90 <UART_SetConfig+0x688>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	d00e      	beq.n	8008f8c <UART_SetConfig+0x684>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	2b0a      	cmp	r3, #10
 8008f74:	d008      	beq.n	8008f88 <UART_SetConfig+0x680>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	2b0b      	cmp	r3, #11
 8008f7c:	d102      	bne.n	8008f84 <UART_SetConfig+0x67c>
 8008f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f82:	e020      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008f84:	2301      	movs	r3, #1
 8008f86:	e01e      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008f88:	2380      	movs	r3, #128	; 0x80
 8008f8a:	e01c      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008f8c:	2340      	movs	r3, #64	; 0x40
 8008f8e:	e01a      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008f90:	2320      	movs	r3, #32
 8008f92:	e018      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008f94:	2310      	movs	r3, #16
 8008f96:	e016      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	e014      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008f9c:	230a      	movs	r3, #10
 8008f9e:	e012      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008fa0:	40011400 	.word	0x40011400
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	40007800 	.word	0x40007800
 8008fac:	40007c00 	.word	0x40007c00
 8008fb0:	58000c00 	.word	0x58000c00
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	e006      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008fb8:	2306      	movs	r3, #6
 8008fba:	e004      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008fbc:	2304      	movs	r3, #4
 8008fbe:	e002      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e000      	b.n	8008fc6 <UART_SetConfig+0x6be>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fcc:	e219      	b.n	8009402 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fce:	f107 0318 	add.w	r3, r7, #24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fc fdb2 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d044      	beq.n	800906c <UART_SetConfig+0x764>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d03e      	beq.n	8009068 <UART_SetConfig+0x760>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d038      	beq.n	8009064 <UART_SetConfig+0x75c>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d032      	beq.n	8009060 <UART_SetConfig+0x758>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	d02c      	beq.n	800905c <UART_SetConfig+0x754>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	2b05      	cmp	r3, #5
 8009008:	d026      	beq.n	8009058 <UART_SetConfig+0x750>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	2b06      	cmp	r3, #6
 8009010:	d020      	beq.n	8009054 <UART_SetConfig+0x74c>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	2b07      	cmp	r3, #7
 8009018:	d01a      	beq.n	8009050 <UART_SetConfig+0x748>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	2b08      	cmp	r3, #8
 8009020:	d014      	beq.n	800904c <UART_SetConfig+0x744>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	2b09      	cmp	r3, #9
 8009028:	d00e      	beq.n	8009048 <UART_SetConfig+0x740>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	2b0a      	cmp	r3, #10
 8009030:	d008      	beq.n	8009044 <UART_SetConfig+0x73c>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	2b0b      	cmp	r3, #11
 8009038:	d102      	bne.n	8009040 <UART_SetConfig+0x738>
 800903a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800903e:	e016      	b.n	800906e <UART_SetConfig+0x766>
 8009040:	2301      	movs	r3, #1
 8009042:	e014      	b.n	800906e <UART_SetConfig+0x766>
 8009044:	2380      	movs	r3, #128	; 0x80
 8009046:	e012      	b.n	800906e <UART_SetConfig+0x766>
 8009048:	2340      	movs	r3, #64	; 0x40
 800904a:	e010      	b.n	800906e <UART_SetConfig+0x766>
 800904c:	2320      	movs	r3, #32
 800904e:	e00e      	b.n	800906e <UART_SetConfig+0x766>
 8009050:	2310      	movs	r3, #16
 8009052:	e00c      	b.n	800906e <UART_SetConfig+0x766>
 8009054:	230c      	movs	r3, #12
 8009056:	e00a      	b.n	800906e <UART_SetConfig+0x766>
 8009058:	230a      	movs	r3, #10
 800905a:	e008      	b.n	800906e <UART_SetConfig+0x766>
 800905c:	2308      	movs	r3, #8
 800905e:	e006      	b.n	800906e <UART_SetConfig+0x766>
 8009060:	2306      	movs	r3, #6
 8009062:	e004      	b.n	800906e <UART_SetConfig+0x766>
 8009064:	2304      	movs	r3, #4
 8009066:	e002      	b.n	800906e <UART_SetConfig+0x766>
 8009068:	2302      	movs	r3, #2
 800906a:	e000      	b.n	800906e <UART_SetConfig+0x766>
 800906c:	2301      	movs	r3, #1
 800906e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009074:	e1c5      	b.n	8009402 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009076:	f107 030c 	add.w	r3, r7, #12
 800907a:	4618      	mov	r0, r3
 800907c:	f7fc feaa 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	2b00      	cmp	r3, #0
 8009088:	d044      	beq.n	8009114 <UART_SetConfig+0x80c>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	2b01      	cmp	r3, #1
 8009090:	d03e      	beq.n	8009110 <UART_SetConfig+0x808>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	2b02      	cmp	r3, #2
 8009098:	d038      	beq.n	800910c <UART_SetConfig+0x804>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d032      	beq.n	8009108 <UART_SetConfig+0x800>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d02c      	beq.n	8009104 <UART_SetConfig+0x7fc>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	d026      	beq.n	8009100 <UART_SetConfig+0x7f8>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	2b06      	cmp	r3, #6
 80090b8:	d020      	beq.n	80090fc <UART_SetConfig+0x7f4>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	2b07      	cmp	r3, #7
 80090c0:	d01a      	beq.n	80090f8 <UART_SetConfig+0x7f0>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d014      	beq.n	80090f4 <UART_SetConfig+0x7ec>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	2b09      	cmp	r3, #9
 80090d0:	d00e      	beq.n	80090f0 <UART_SetConfig+0x7e8>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	2b0a      	cmp	r3, #10
 80090d8:	d008      	beq.n	80090ec <UART_SetConfig+0x7e4>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b0b      	cmp	r3, #11
 80090e0:	d102      	bne.n	80090e8 <UART_SetConfig+0x7e0>
 80090e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e6:	e016      	b.n	8009116 <UART_SetConfig+0x80e>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e014      	b.n	8009116 <UART_SetConfig+0x80e>
 80090ec:	2380      	movs	r3, #128	; 0x80
 80090ee:	e012      	b.n	8009116 <UART_SetConfig+0x80e>
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	e010      	b.n	8009116 <UART_SetConfig+0x80e>
 80090f4:	2320      	movs	r3, #32
 80090f6:	e00e      	b.n	8009116 <UART_SetConfig+0x80e>
 80090f8:	2310      	movs	r3, #16
 80090fa:	e00c      	b.n	8009116 <UART_SetConfig+0x80e>
 80090fc:	230c      	movs	r3, #12
 80090fe:	e00a      	b.n	8009116 <UART_SetConfig+0x80e>
 8009100:	230a      	movs	r3, #10
 8009102:	e008      	b.n	8009116 <UART_SetConfig+0x80e>
 8009104:	2308      	movs	r3, #8
 8009106:	e006      	b.n	8009116 <UART_SetConfig+0x80e>
 8009108:	2306      	movs	r3, #6
 800910a:	e004      	b.n	8009116 <UART_SetConfig+0x80e>
 800910c:	2304      	movs	r3, #4
 800910e:	e002      	b.n	8009116 <UART_SetConfig+0x80e>
 8009110:	2302      	movs	r3, #2
 8009112:	e000      	b.n	8009116 <UART_SetConfig+0x80e>
 8009114:	2301      	movs	r3, #1
 8009116:	fbb2 f3f3 	udiv	r3, r2, r3
 800911a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800911c:	e171      	b.n	8009402 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800911e:	4b7a      	ldr	r3, [pc, #488]	; (8009308 <UART_SetConfig+0xa00>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0320 	and.w	r3, r3, #32
 8009126:	2b00      	cmp	r3, #0
 8009128:	d054      	beq.n	80091d4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800912a:	4b77      	ldr	r3, [pc, #476]	; (8009308 <UART_SetConfig+0xa00>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	08db      	lsrs	r3, r3, #3
 8009130:	f003 0303 	and.w	r3, r3, #3
 8009134:	4a75      	ldr	r2, [pc, #468]	; (800930c <UART_SetConfig+0xa04>)
 8009136:	40da      	lsrs	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b00      	cmp	r3, #0
 800913e:	d044      	beq.n	80091ca <UART_SetConfig+0x8c2>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	2b01      	cmp	r3, #1
 8009146:	d03e      	beq.n	80091c6 <UART_SetConfig+0x8be>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b02      	cmp	r3, #2
 800914e:	d038      	beq.n	80091c2 <UART_SetConfig+0x8ba>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	2b03      	cmp	r3, #3
 8009156:	d032      	beq.n	80091be <UART_SetConfig+0x8b6>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	2b04      	cmp	r3, #4
 800915e:	d02c      	beq.n	80091ba <UART_SetConfig+0x8b2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	2b05      	cmp	r3, #5
 8009166:	d026      	beq.n	80091b6 <UART_SetConfig+0x8ae>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	2b06      	cmp	r3, #6
 800916e:	d020      	beq.n	80091b2 <UART_SetConfig+0x8aa>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	2b07      	cmp	r3, #7
 8009176:	d01a      	beq.n	80091ae <UART_SetConfig+0x8a6>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	2b08      	cmp	r3, #8
 800917e:	d014      	beq.n	80091aa <UART_SetConfig+0x8a2>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009184:	2b09      	cmp	r3, #9
 8009186:	d00e      	beq.n	80091a6 <UART_SetConfig+0x89e>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	2b0a      	cmp	r3, #10
 800918e:	d008      	beq.n	80091a2 <UART_SetConfig+0x89a>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	2b0b      	cmp	r3, #11
 8009196:	d102      	bne.n	800919e <UART_SetConfig+0x896>
 8009198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800919c:	e016      	b.n	80091cc <UART_SetConfig+0x8c4>
 800919e:	2301      	movs	r3, #1
 80091a0:	e014      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091a2:	2380      	movs	r3, #128	; 0x80
 80091a4:	e012      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091a6:	2340      	movs	r3, #64	; 0x40
 80091a8:	e010      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091aa:	2320      	movs	r3, #32
 80091ac:	e00e      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091ae:	2310      	movs	r3, #16
 80091b0:	e00c      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091b2:	230c      	movs	r3, #12
 80091b4:	e00a      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091b6:	230a      	movs	r3, #10
 80091b8:	e008      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091ba:	2308      	movs	r3, #8
 80091bc:	e006      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091be:	2306      	movs	r3, #6
 80091c0:	e004      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091c2:	2304      	movs	r3, #4
 80091c4:	e002      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e000      	b.n	80091cc <UART_SetConfig+0x8c4>
 80091ca:	2301      	movs	r3, #1
 80091cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80091d2:	e116      	b.n	8009402 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d043      	beq.n	8009264 <UART_SetConfig+0x95c>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d03d      	beq.n	8009260 <UART_SetConfig+0x958>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d037      	beq.n	800925c <UART_SetConfig+0x954>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d031      	beq.n	8009258 <UART_SetConfig+0x950>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d02b      	beq.n	8009254 <UART_SetConfig+0x94c>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	2b05      	cmp	r3, #5
 8009202:	d025      	beq.n	8009250 <UART_SetConfig+0x948>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b06      	cmp	r3, #6
 800920a:	d01f      	beq.n	800924c <UART_SetConfig+0x944>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	2b07      	cmp	r3, #7
 8009212:	d019      	beq.n	8009248 <UART_SetConfig+0x940>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	2b08      	cmp	r3, #8
 800921a:	d013      	beq.n	8009244 <UART_SetConfig+0x93c>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	2b09      	cmp	r3, #9
 8009222:	d00d      	beq.n	8009240 <UART_SetConfig+0x938>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009228:	2b0a      	cmp	r3, #10
 800922a:	d007      	beq.n	800923c <UART_SetConfig+0x934>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	2b0b      	cmp	r3, #11
 8009232:	d101      	bne.n	8009238 <UART_SetConfig+0x930>
 8009234:	4b36      	ldr	r3, [pc, #216]	; (8009310 <UART_SetConfig+0xa08>)
 8009236:	e016      	b.n	8009266 <UART_SetConfig+0x95e>
 8009238:	4b34      	ldr	r3, [pc, #208]	; (800930c <UART_SetConfig+0xa04>)
 800923a:	e014      	b.n	8009266 <UART_SetConfig+0x95e>
 800923c:	4b35      	ldr	r3, [pc, #212]	; (8009314 <UART_SetConfig+0xa0c>)
 800923e:	e012      	b.n	8009266 <UART_SetConfig+0x95e>
 8009240:	4b35      	ldr	r3, [pc, #212]	; (8009318 <UART_SetConfig+0xa10>)
 8009242:	e010      	b.n	8009266 <UART_SetConfig+0x95e>
 8009244:	4b35      	ldr	r3, [pc, #212]	; (800931c <UART_SetConfig+0xa14>)
 8009246:	e00e      	b.n	8009266 <UART_SetConfig+0x95e>
 8009248:	4b35      	ldr	r3, [pc, #212]	; (8009320 <UART_SetConfig+0xa18>)
 800924a:	e00c      	b.n	8009266 <UART_SetConfig+0x95e>
 800924c:	4b35      	ldr	r3, [pc, #212]	; (8009324 <UART_SetConfig+0xa1c>)
 800924e:	e00a      	b.n	8009266 <UART_SetConfig+0x95e>
 8009250:	4b35      	ldr	r3, [pc, #212]	; (8009328 <UART_SetConfig+0xa20>)
 8009252:	e008      	b.n	8009266 <UART_SetConfig+0x95e>
 8009254:	4b35      	ldr	r3, [pc, #212]	; (800932c <UART_SetConfig+0xa24>)
 8009256:	e006      	b.n	8009266 <UART_SetConfig+0x95e>
 8009258:	4b35      	ldr	r3, [pc, #212]	; (8009330 <UART_SetConfig+0xa28>)
 800925a:	e004      	b.n	8009266 <UART_SetConfig+0x95e>
 800925c:	4b35      	ldr	r3, [pc, #212]	; (8009334 <UART_SetConfig+0xa2c>)
 800925e:	e002      	b.n	8009266 <UART_SetConfig+0x95e>
 8009260:	4b35      	ldr	r3, [pc, #212]	; (8009338 <UART_SetConfig+0xa30>)
 8009262:	e000      	b.n	8009266 <UART_SetConfig+0x95e>
 8009264:	4b29      	ldr	r3, [pc, #164]	; (800930c <UART_SetConfig+0xa04>)
 8009266:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009268:	e0cb      	b.n	8009402 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	2b00      	cmp	r3, #0
 8009270:	d046      	beq.n	8009300 <UART_SetConfig+0x9f8>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009276:	2b01      	cmp	r3, #1
 8009278:	d040      	beq.n	80092fc <UART_SetConfig+0x9f4>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	2b02      	cmp	r3, #2
 8009280:	d03a      	beq.n	80092f8 <UART_SetConfig+0x9f0>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	2b03      	cmp	r3, #3
 8009288:	d034      	beq.n	80092f4 <UART_SetConfig+0x9ec>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	2b04      	cmp	r3, #4
 8009290:	d02e      	beq.n	80092f0 <UART_SetConfig+0x9e8>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	2b05      	cmp	r3, #5
 8009298:	d028      	beq.n	80092ec <UART_SetConfig+0x9e4>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d022      	beq.n	80092e8 <UART_SetConfig+0x9e0>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	2b07      	cmp	r3, #7
 80092a8:	d01c      	beq.n	80092e4 <UART_SetConfig+0x9dc>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	2b08      	cmp	r3, #8
 80092b0:	d016      	beq.n	80092e0 <UART_SetConfig+0x9d8>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	2b09      	cmp	r3, #9
 80092b8:	d00f      	beq.n	80092da <UART_SetConfig+0x9d2>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	2b0a      	cmp	r3, #10
 80092c0:	d008      	beq.n	80092d4 <UART_SetConfig+0x9cc>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	2b0b      	cmp	r3, #11
 80092c8:	d102      	bne.n	80092d0 <UART_SetConfig+0x9c8>
 80092ca:	f643 5309 	movw	r3, #15625	; 0x3d09
 80092ce:	e018      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092d0:	4b13      	ldr	r3, [pc, #76]	; (8009320 <UART_SetConfig+0xa18>)
 80092d2:	e016      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092d4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80092d8:	e013      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80092de:	e010      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092e0:	4b16      	ldr	r3, [pc, #88]	; (800933c <UART_SetConfig+0xa34>)
 80092e2:	e00e      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092e4:	4b0a      	ldr	r3, [pc, #40]	; (8009310 <UART_SetConfig+0xa08>)
 80092e6:	e00c      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092e8:	4b15      	ldr	r3, [pc, #84]	; (8009340 <UART_SetConfig+0xa38>)
 80092ea:	e00a      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092ec:	4b15      	ldr	r3, [pc, #84]	; (8009344 <UART_SetConfig+0xa3c>)
 80092ee:	e008      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092f0:	4b08      	ldr	r3, [pc, #32]	; (8009314 <UART_SetConfig+0xa0c>)
 80092f2:	e006      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092f4:	4b14      	ldr	r3, [pc, #80]	; (8009348 <UART_SetConfig+0xa40>)
 80092f6:	e004      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092f8:	4b07      	ldr	r3, [pc, #28]	; (8009318 <UART_SetConfig+0xa10>)
 80092fa:	e002      	b.n	8009302 <UART_SetConfig+0x9fa>
 80092fc:	4b07      	ldr	r3, [pc, #28]	; (800931c <UART_SetConfig+0xa14>)
 80092fe:	e000      	b.n	8009302 <UART_SetConfig+0x9fa>
 8009300:	4b07      	ldr	r3, [pc, #28]	; (8009320 <UART_SetConfig+0xa18>)
 8009302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009304:	e07d      	b.n	8009402 <UART_SetConfig+0xafa>
 8009306:	bf00      	nop
 8009308:	58024400 	.word	0x58024400
 800930c:	03d09000 	.word	0x03d09000
 8009310:	0003d090 	.word	0x0003d090
 8009314:	0007a120 	.word	0x0007a120
 8009318:	000f4240 	.word	0x000f4240
 800931c:	001e8480 	.word	0x001e8480
 8009320:	003d0900 	.word	0x003d0900
 8009324:	00516155 	.word	0x00516155
 8009328:	0061a800 	.word	0x0061a800
 800932c:	007a1200 	.word	0x007a1200
 8009330:	00a2c2aa 	.word	0x00a2c2aa
 8009334:	00f42400 	.word	0x00f42400
 8009338:	01e84800 	.word	0x01e84800
 800933c:	0001e848 	.word	0x0001e848
 8009340:	00051615 	.word	0x00051615
 8009344:	00061a80 	.word	0x00061a80
 8009348:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b00      	cmp	r3, #0
 8009352:	d04e      	beq.n	80093f2 <UART_SetConfig+0xaea>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	2b01      	cmp	r3, #1
 800935a:	d047      	beq.n	80093ec <UART_SetConfig+0xae4>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	2b02      	cmp	r3, #2
 8009362:	d040      	beq.n	80093e6 <UART_SetConfig+0xade>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	2b03      	cmp	r3, #3
 800936a:	d039      	beq.n	80093e0 <UART_SetConfig+0xad8>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	2b04      	cmp	r3, #4
 8009372:	d032      	beq.n	80093da <UART_SetConfig+0xad2>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	2b05      	cmp	r3, #5
 800937a:	d02b      	beq.n	80093d4 <UART_SetConfig+0xacc>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	2b06      	cmp	r3, #6
 8009382:	d024      	beq.n	80093ce <UART_SetConfig+0xac6>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	2b07      	cmp	r3, #7
 800938a:	d01d      	beq.n	80093c8 <UART_SetConfig+0xac0>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009390:	2b08      	cmp	r3, #8
 8009392:	d016      	beq.n	80093c2 <UART_SetConfig+0xaba>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009398:	2b09      	cmp	r3, #9
 800939a:	d00f      	beq.n	80093bc <UART_SetConfig+0xab4>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	2b0a      	cmp	r3, #10
 80093a2:	d008      	beq.n	80093b6 <UART_SetConfig+0xaae>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	2b0b      	cmp	r3, #11
 80093aa:	d101      	bne.n	80093b0 <UART_SetConfig+0xaa8>
 80093ac:	2380      	movs	r3, #128	; 0x80
 80093ae:	e022      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093b4:	e01f      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ba:	e01c      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093c0:	e019      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093c6:	e016      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093cc:	e013      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093ce:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80093d2:	e010      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093d4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80093d8:	e00d      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093de:	e00a      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093e0:	f241 5355 	movw	r3, #5461	; 0x1555
 80093e4:	e007      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093ea:	e004      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093f0:	e001      	b.n	80093f6 <UART_SetConfig+0xaee>
 80093f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093f8:	e003      	b.n	8009402 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009400:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	2b00      	cmp	r3, #0
 8009406:	f001 83e8 	beq.w	800abda <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	4613      	mov	r3, r2
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	4413      	add	r3, r2
 8009414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009416:	429a      	cmp	r2, r3
 8009418:	d305      	bcc.n	8009426 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009422:	429a      	cmp	r2, r3
 8009424:	d904      	bls.n	8009430 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800942c:	f001 bbd5 	b.w	800abda <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8009430:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009434:	2b08      	cmp	r3, #8
 8009436:	f000 8154 	beq.w	80096e2 <UART_SetConfig+0xdda>
 800943a:	2b08      	cmp	r3, #8
 800943c:	dc06      	bgt.n	800944c <UART_SetConfig+0xb44>
 800943e:	2b02      	cmp	r3, #2
 8009440:	d00f      	beq.n	8009462 <UART_SetConfig+0xb5a>
 8009442:	2b04      	cmp	r3, #4
 8009444:	f000 80ac 	beq.w	80095a0 <UART_SetConfig+0xc98>
 8009448:	f000 bc30 	b.w	8009cac <UART_SetConfig+0x13a4>
 800944c:	2b20      	cmp	r3, #32
 800944e:	f000 832d 	beq.w	8009aac <UART_SetConfig+0x11a4>
 8009452:	2b40      	cmp	r3, #64	; 0x40
 8009454:	f000 83a5 	beq.w	8009ba2 <UART_SetConfig+0x129a>
 8009458:	2b10      	cmp	r3, #16
 800945a:	f000 81e3 	beq.w	8009824 <UART_SetConfig+0xf1c>
 800945e:	f000 bc25 	b.w	8009cac <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009462:	f7fc fb55 	bl	8005b10 <HAL_RCCEx_GetD3PCLK1Freq>
 8009466:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	4618      	mov	r0, r3
 800946c:	f04f 0100 	mov.w	r1, #0
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	d067      	beq.n	8009548 <UART_SetConfig+0xc40>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	2b01      	cmp	r3, #1
 800947e:	d05e      	beq.n	800953e <UART_SetConfig+0xc36>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	2b02      	cmp	r3, #2
 8009486:	d055      	beq.n	8009534 <UART_SetConfig+0xc2c>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	2b03      	cmp	r3, #3
 800948e:	d04c      	beq.n	800952a <UART_SetConfig+0xc22>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	2b04      	cmp	r3, #4
 8009496:	d043      	beq.n	8009520 <UART_SetConfig+0xc18>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	2b05      	cmp	r3, #5
 800949e:	d03a      	beq.n	8009516 <UART_SetConfig+0xc0e>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	2b06      	cmp	r3, #6
 80094a6:	d031      	beq.n	800950c <UART_SetConfig+0xc04>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ac:	2b07      	cmp	r3, #7
 80094ae:	d028      	beq.n	8009502 <UART_SetConfig+0xbfa>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d01f      	beq.n	80094f8 <UART_SetConfig+0xbf0>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094bc:	2b09      	cmp	r3, #9
 80094be:	d016      	beq.n	80094ee <UART_SetConfig+0xbe6>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	2b0a      	cmp	r3, #10
 80094c6:	d00d      	beq.n	80094e4 <UART_SetConfig+0xbdc>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	2b0b      	cmp	r3, #11
 80094ce:	d104      	bne.n	80094da <UART_SetConfig+0xbd2>
 80094d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094d4:	f04f 0400 	mov.w	r4, #0
 80094d8:	e03a      	b.n	8009550 <UART_SetConfig+0xc48>
 80094da:	f04f 0301 	mov.w	r3, #1
 80094de:	f04f 0400 	mov.w	r4, #0
 80094e2:	e035      	b.n	8009550 <UART_SetConfig+0xc48>
 80094e4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80094e8:	f04f 0400 	mov.w	r4, #0
 80094ec:	e030      	b.n	8009550 <UART_SetConfig+0xc48>
 80094ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 80094f2:	f04f 0400 	mov.w	r4, #0
 80094f6:	e02b      	b.n	8009550 <UART_SetConfig+0xc48>
 80094f8:	f04f 0320 	mov.w	r3, #32
 80094fc:	f04f 0400 	mov.w	r4, #0
 8009500:	e026      	b.n	8009550 <UART_SetConfig+0xc48>
 8009502:	f04f 0310 	mov.w	r3, #16
 8009506:	f04f 0400 	mov.w	r4, #0
 800950a:	e021      	b.n	8009550 <UART_SetConfig+0xc48>
 800950c:	f04f 030c 	mov.w	r3, #12
 8009510:	f04f 0400 	mov.w	r4, #0
 8009514:	e01c      	b.n	8009550 <UART_SetConfig+0xc48>
 8009516:	f04f 030a 	mov.w	r3, #10
 800951a:	f04f 0400 	mov.w	r4, #0
 800951e:	e017      	b.n	8009550 <UART_SetConfig+0xc48>
 8009520:	f04f 0308 	mov.w	r3, #8
 8009524:	f04f 0400 	mov.w	r4, #0
 8009528:	e012      	b.n	8009550 <UART_SetConfig+0xc48>
 800952a:	f04f 0306 	mov.w	r3, #6
 800952e:	f04f 0400 	mov.w	r4, #0
 8009532:	e00d      	b.n	8009550 <UART_SetConfig+0xc48>
 8009534:	f04f 0304 	mov.w	r3, #4
 8009538:	f04f 0400 	mov.w	r4, #0
 800953c:	e008      	b.n	8009550 <UART_SetConfig+0xc48>
 800953e:	f04f 0302 	mov.w	r3, #2
 8009542:	f04f 0400 	mov.w	r4, #0
 8009546:	e003      	b.n	8009550 <UART_SetConfig+0xc48>
 8009548:	f04f 0301 	mov.w	r3, #1
 800954c:	f04f 0400 	mov.w	r4, #0
 8009550:	461a      	mov	r2, r3
 8009552:	4623      	mov	r3, r4
 8009554:	f7f6 fec0 	bl	80002d8 <__aeabi_uldivmod>
 8009558:	4603      	mov	r3, r0
 800955a:	460c      	mov	r4, r1
 800955c:	4619      	mov	r1, r3
 800955e:	4622      	mov	r2, r4
 8009560:	f04f 0300 	mov.w	r3, #0
 8009564:	f04f 0400 	mov.w	r4, #0
 8009568:	0214      	lsls	r4, r2, #8
 800956a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800956e:	020b      	lsls	r3, r1, #8
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	6852      	ldr	r2, [r2, #4]
 8009574:	0852      	lsrs	r2, r2, #1
 8009576:	4611      	mov	r1, r2
 8009578:	f04f 0200 	mov.w	r2, #0
 800957c:	eb13 0b01 	adds.w	fp, r3, r1
 8009580:	eb44 0c02 	adc.w	ip, r4, r2
 8009584:	4658      	mov	r0, fp
 8009586:	4661      	mov	r1, ip
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f04f 0400 	mov.w	r4, #0
 8009590:	461a      	mov	r2, r3
 8009592:	4623      	mov	r3, r4
 8009594:	f7f6 fea0 	bl	80002d8 <__aeabi_uldivmod>
 8009598:	4603      	mov	r3, r0
 800959a:	460c      	mov	r4, r1
 800959c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800959e:	e389      	b.n	8009cb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a0:	f107 0318 	add.w	r3, r7, #24
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fc fac9 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f04f 0100 	mov.w	r1, #0
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d067      	beq.n	800968a <UART_SetConfig+0xd82>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d05e      	beq.n	8009680 <UART_SetConfig+0xd78>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d055      	beq.n	8009676 <UART_SetConfig+0xd6e>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d04c      	beq.n	800966c <UART_SetConfig+0xd64>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d043      	beq.n	8009662 <UART_SetConfig+0xd5a>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	2b05      	cmp	r3, #5
 80095e0:	d03a      	beq.n	8009658 <UART_SetConfig+0xd50>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	2b06      	cmp	r3, #6
 80095e8:	d031      	beq.n	800964e <UART_SetConfig+0xd46>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ee:	2b07      	cmp	r3, #7
 80095f0:	d028      	beq.n	8009644 <UART_SetConfig+0xd3c>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f6:	2b08      	cmp	r3, #8
 80095f8:	d01f      	beq.n	800963a <UART_SetConfig+0xd32>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fe:	2b09      	cmp	r3, #9
 8009600:	d016      	beq.n	8009630 <UART_SetConfig+0xd28>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	2b0a      	cmp	r3, #10
 8009608:	d00d      	beq.n	8009626 <UART_SetConfig+0xd1e>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	2b0b      	cmp	r3, #11
 8009610:	d104      	bne.n	800961c <UART_SetConfig+0xd14>
 8009612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009616:	f04f 0400 	mov.w	r4, #0
 800961a:	e03a      	b.n	8009692 <UART_SetConfig+0xd8a>
 800961c:	f04f 0301 	mov.w	r3, #1
 8009620:	f04f 0400 	mov.w	r4, #0
 8009624:	e035      	b.n	8009692 <UART_SetConfig+0xd8a>
 8009626:	f04f 0380 	mov.w	r3, #128	; 0x80
 800962a:	f04f 0400 	mov.w	r4, #0
 800962e:	e030      	b.n	8009692 <UART_SetConfig+0xd8a>
 8009630:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009634:	f04f 0400 	mov.w	r4, #0
 8009638:	e02b      	b.n	8009692 <UART_SetConfig+0xd8a>
 800963a:	f04f 0320 	mov.w	r3, #32
 800963e:	f04f 0400 	mov.w	r4, #0
 8009642:	e026      	b.n	8009692 <UART_SetConfig+0xd8a>
 8009644:	f04f 0310 	mov.w	r3, #16
 8009648:	f04f 0400 	mov.w	r4, #0
 800964c:	e021      	b.n	8009692 <UART_SetConfig+0xd8a>
 800964e:	f04f 030c 	mov.w	r3, #12
 8009652:	f04f 0400 	mov.w	r4, #0
 8009656:	e01c      	b.n	8009692 <UART_SetConfig+0xd8a>
 8009658:	f04f 030a 	mov.w	r3, #10
 800965c:	f04f 0400 	mov.w	r4, #0
 8009660:	e017      	b.n	8009692 <UART_SetConfig+0xd8a>
 8009662:	f04f 0308 	mov.w	r3, #8
 8009666:	f04f 0400 	mov.w	r4, #0
 800966a:	e012      	b.n	8009692 <UART_SetConfig+0xd8a>
 800966c:	f04f 0306 	mov.w	r3, #6
 8009670:	f04f 0400 	mov.w	r4, #0
 8009674:	e00d      	b.n	8009692 <UART_SetConfig+0xd8a>
 8009676:	f04f 0304 	mov.w	r3, #4
 800967a:	f04f 0400 	mov.w	r4, #0
 800967e:	e008      	b.n	8009692 <UART_SetConfig+0xd8a>
 8009680:	f04f 0302 	mov.w	r3, #2
 8009684:	f04f 0400 	mov.w	r4, #0
 8009688:	e003      	b.n	8009692 <UART_SetConfig+0xd8a>
 800968a:	f04f 0301 	mov.w	r3, #1
 800968e:	f04f 0400 	mov.w	r4, #0
 8009692:	461a      	mov	r2, r3
 8009694:	4623      	mov	r3, r4
 8009696:	f7f6 fe1f 	bl	80002d8 <__aeabi_uldivmod>
 800969a:	4603      	mov	r3, r0
 800969c:	460c      	mov	r4, r1
 800969e:	4619      	mov	r1, r3
 80096a0:	4622      	mov	r2, r4
 80096a2:	f04f 0300 	mov.w	r3, #0
 80096a6:	f04f 0400 	mov.w	r4, #0
 80096aa:	0214      	lsls	r4, r2, #8
 80096ac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80096b0:	020b      	lsls	r3, r1, #8
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	6852      	ldr	r2, [r2, #4]
 80096b6:	0852      	lsrs	r2, r2, #1
 80096b8:	4611      	mov	r1, r2
 80096ba:	f04f 0200 	mov.w	r2, #0
 80096be:	eb13 0b01 	adds.w	fp, r3, r1
 80096c2:	eb44 0c02 	adc.w	ip, r4, r2
 80096c6:	4658      	mov	r0, fp
 80096c8:	4661      	mov	r1, ip
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f04f 0400 	mov.w	r4, #0
 80096d2:	461a      	mov	r2, r3
 80096d4:	4623      	mov	r3, r4
 80096d6:	f7f6 fdff 	bl	80002d8 <__aeabi_uldivmod>
 80096da:	4603      	mov	r3, r0
 80096dc:	460c      	mov	r4, r1
 80096de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80096e0:	e2e8      	b.n	8009cb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096e2:	f107 030c 	add.w	r3, r7, #12
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fc fb74 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f04f 0100 	mov.w	r1, #0
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d067      	beq.n	80097cc <UART_SetConfig+0xec4>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	2b01      	cmp	r3, #1
 8009702:	d05e      	beq.n	80097c2 <UART_SetConfig+0xeba>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009708:	2b02      	cmp	r3, #2
 800970a:	d055      	beq.n	80097b8 <UART_SetConfig+0xeb0>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009710:	2b03      	cmp	r3, #3
 8009712:	d04c      	beq.n	80097ae <UART_SetConfig+0xea6>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009718:	2b04      	cmp	r3, #4
 800971a:	d043      	beq.n	80097a4 <UART_SetConfig+0xe9c>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	2b05      	cmp	r3, #5
 8009722:	d03a      	beq.n	800979a <UART_SetConfig+0xe92>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009728:	2b06      	cmp	r3, #6
 800972a:	d031      	beq.n	8009790 <UART_SetConfig+0xe88>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009730:	2b07      	cmp	r3, #7
 8009732:	d028      	beq.n	8009786 <UART_SetConfig+0xe7e>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009738:	2b08      	cmp	r3, #8
 800973a:	d01f      	beq.n	800977c <UART_SetConfig+0xe74>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009740:	2b09      	cmp	r3, #9
 8009742:	d016      	beq.n	8009772 <UART_SetConfig+0xe6a>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	2b0a      	cmp	r3, #10
 800974a:	d00d      	beq.n	8009768 <UART_SetConfig+0xe60>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009750:	2b0b      	cmp	r3, #11
 8009752:	d104      	bne.n	800975e <UART_SetConfig+0xe56>
 8009754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009758:	f04f 0400 	mov.w	r4, #0
 800975c:	e03a      	b.n	80097d4 <UART_SetConfig+0xecc>
 800975e:	f04f 0301 	mov.w	r3, #1
 8009762:	f04f 0400 	mov.w	r4, #0
 8009766:	e035      	b.n	80097d4 <UART_SetConfig+0xecc>
 8009768:	f04f 0380 	mov.w	r3, #128	; 0x80
 800976c:	f04f 0400 	mov.w	r4, #0
 8009770:	e030      	b.n	80097d4 <UART_SetConfig+0xecc>
 8009772:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009776:	f04f 0400 	mov.w	r4, #0
 800977a:	e02b      	b.n	80097d4 <UART_SetConfig+0xecc>
 800977c:	f04f 0320 	mov.w	r3, #32
 8009780:	f04f 0400 	mov.w	r4, #0
 8009784:	e026      	b.n	80097d4 <UART_SetConfig+0xecc>
 8009786:	f04f 0310 	mov.w	r3, #16
 800978a:	f04f 0400 	mov.w	r4, #0
 800978e:	e021      	b.n	80097d4 <UART_SetConfig+0xecc>
 8009790:	f04f 030c 	mov.w	r3, #12
 8009794:	f04f 0400 	mov.w	r4, #0
 8009798:	e01c      	b.n	80097d4 <UART_SetConfig+0xecc>
 800979a:	f04f 030a 	mov.w	r3, #10
 800979e:	f04f 0400 	mov.w	r4, #0
 80097a2:	e017      	b.n	80097d4 <UART_SetConfig+0xecc>
 80097a4:	f04f 0308 	mov.w	r3, #8
 80097a8:	f04f 0400 	mov.w	r4, #0
 80097ac:	e012      	b.n	80097d4 <UART_SetConfig+0xecc>
 80097ae:	f04f 0306 	mov.w	r3, #6
 80097b2:	f04f 0400 	mov.w	r4, #0
 80097b6:	e00d      	b.n	80097d4 <UART_SetConfig+0xecc>
 80097b8:	f04f 0304 	mov.w	r3, #4
 80097bc:	f04f 0400 	mov.w	r4, #0
 80097c0:	e008      	b.n	80097d4 <UART_SetConfig+0xecc>
 80097c2:	f04f 0302 	mov.w	r3, #2
 80097c6:	f04f 0400 	mov.w	r4, #0
 80097ca:	e003      	b.n	80097d4 <UART_SetConfig+0xecc>
 80097cc:	f04f 0301 	mov.w	r3, #1
 80097d0:	f04f 0400 	mov.w	r4, #0
 80097d4:	461a      	mov	r2, r3
 80097d6:	4623      	mov	r3, r4
 80097d8:	f7f6 fd7e 	bl	80002d8 <__aeabi_uldivmod>
 80097dc:	4603      	mov	r3, r0
 80097de:	460c      	mov	r4, r1
 80097e0:	4619      	mov	r1, r3
 80097e2:	4622      	mov	r2, r4
 80097e4:	f04f 0300 	mov.w	r3, #0
 80097e8:	f04f 0400 	mov.w	r4, #0
 80097ec:	0214      	lsls	r4, r2, #8
 80097ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80097f2:	020b      	lsls	r3, r1, #8
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6852      	ldr	r2, [r2, #4]
 80097f8:	0852      	lsrs	r2, r2, #1
 80097fa:	4611      	mov	r1, r2
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	eb13 0b01 	adds.w	fp, r3, r1
 8009804:	eb44 0c02 	adc.w	ip, r4, r2
 8009808:	4658      	mov	r0, fp
 800980a:	4661      	mov	r1, ip
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	f04f 0400 	mov.w	r4, #0
 8009814:	461a      	mov	r2, r3
 8009816:	4623      	mov	r3, r4
 8009818:	f7f6 fd5e 	bl	80002d8 <__aeabi_uldivmod>
 800981c:	4603      	mov	r3, r0
 800981e:	460c      	mov	r4, r1
 8009820:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009822:	e247      	b.n	8009cb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009824:	4b96      	ldr	r3, [pc, #600]	; (8009a80 <UART_SetConfig+0x1178>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 80a3 	beq.w	8009978 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009832:	4b93      	ldr	r3, [pc, #588]	; (8009a80 <UART_SetConfig+0x1178>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	08db      	lsrs	r3, r3, #3
 8009838:	f003 0303 	and.w	r3, r3, #3
 800983c:	4a91      	ldr	r2, [pc, #580]	; (8009a84 <UART_SetConfig+0x117c>)
 800983e:	fa22 f303 	lsr.w	r3, r2, r3
 8009842:	4618      	mov	r0, r3
 8009844:	f04f 0100 	mov.w	r1, #0
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	2b00      	cmp	r3, #0
 800984e:	d067      	beq.n	8009920 <UART_SetConfig+0x1018>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009854:	2b01      	cmp	r3, #1
 8009856:	d05e      	beq.n	8009916 <UART_SetConfig+0x100e>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	2b02      	cmp	r3, #2
 800985e:	d055      	beq.n	800990c <UART_SetConfig+0x1004>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	2b03      	cmp	r3, #3
 8009866:	d04c      	beq.n	8009902 <UART_SetConfig+0xffa>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	2b04      	cmp	r3, #4
 800986e:	d043      	beq.n	80098f8 <UART_SetConfig+0xff0>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	2b05      	cmp	r3, #5
 8009876:	d03a      	beq.n	80098ee <UART_SetConfig+0xfe6>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2b06      	cmp	r3, #6
 800987e:	d031      	beq.n	80098e4 <UART_SetConfig+0xfdc>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	2b07      	cmp	r3, #7
 8009886:	d028      	beq.n	80098da <UART_SetConfig+0xfd2>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	2b08      	cmp	r3, #8
 800988e:	d01f      	beq.n	80098d0 <UART_SetConfig+0xfc8>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	2b09      	cmp	r3, #9
 8009896:	d016      	beq.n	80098c6 <UART_SetConfig+0xfbe>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	2b0a      	cmp	r3, #10
 800989e:	d00d      	beq.n	80098bc <UART_SetConfig+0xfb4>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	2b0b      	cmp	r3, #11
 80098a6:	d104      	bne.n	80098b2 <UART_SetConfig+0xfaa>
 80098a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098ac:	f04f 0400 	mov.w	r4, #0
 80098b0:	e03a      	b.n	8009928 <UART_SetConfig+0x1020>
 80098b2:	f04f 0301 	mov.w	r3, #1
 80098b6:	f04f 0400 	mov.w	r4, #0
 80098ba:	e035      	b.n	8009928 <UART_SetConfig+0x1020>
 80098bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80098c0:	f04f 0400 	mov.w	r4, #0
 80098c4:	e030      	b.n	8009928 <UART_SetConfig+0x1020>
 80098c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80098ca:	f04f 0400 	mov.w	r4, #0
 80098ce:	e02b      	b.n	8009928 <UART_SetConfig+0x1020>
 80098d0:	f04f 0320 	mov.w	r3, #32
 80098d4:	f04f 0400 	mov.w	r4, #0
 80098d8:	e026      	b.n	8009928 <UART_SetConfig+0x1020>
 80098da:	f04f 0310 	mov.w	r3, #16
 80098de:	f04f 0400 	mov.w	r4, #0
 80098e2:	e021      	b.n	8009928 <UART_SetConfig+0x1020>
 80098e4:	f04f 030c 	mov.w	r3, #12
 80098e8:	f04f 0400 	mov.w	r4, #0
 80098ec:	e01c      	b.n	8009928 <UART_SetConfig+0x1020>
 80098ee:	f04f 030a 	mov.w	r3, #10
 80098f2:	f04f 0400 	mov.w	r4, #0
 80098f6:	e017      	b.n	8009928 <UART_SetConfig+0x1020>
 80098f8:	f04f 0308 	mov.w	r3, #8
 80098fc:	f04f 0400 	mov.w	r4, #0
 8009900:	e012      	b.n	8009928 <UART_SetConfig+0x1020>
 8009902:	f04f 0306 	mov.w	r3, #6
 8009906:	f04f 0400 	mov.w	r4, #0
 800990a:	e00d      	b.n	8009928 <UART_SetConfig+0x1020>
 800990c:	f04f 0304 	mov.w	r3, #4
 8009910:	f04f 0400 	mov.w	r4, #0
 8009914:	e008      	b.n	8009928 <UART_SetConfig+0x1020>
 8009916:	f04f 0302 	mov.w	r3, #2
 800991a:	f04f 0400 	mov.w	r4, #0
 800991e:	e003      	b.n	8009928 <UART_SetConfig+0x1020>
 8009920:	f04f 0301 	mov.w	r3, #1
 8009924:	f04f 0400 	mov.w	r4, #0
 8009928:	461a      	mov	r2, r3
 800992a:	4623      	mov	r3, r4
 800992c:	f7f6 fcd4 	bl	80002d8 <__aeabi_uldivmod>
 8009930:	4603      	mov	r3, r0
 8009932:	460c      	mov	r4, r1
 8009934:	4619      	mov	r1, r3
 8009936:	4622      	mov	r2, r4
 8009938:	f04f 0300 	mov.w	r3, #0
 800993c:	f04f 0400 	mov.w	r4, #0
 8009940:	0214      	lsls	r4, r2, #8
 8009942:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009946:	020b      	lsls	r3, r1, #8
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	6852      	ldr	r2, [r2, #4]
 800994c:	0852      	lsrs	r2, r2, #1
 800994e:	4611      	mov	r1, r2
 8009950:	f04f 0200 	mov.w	r2, #0
 8009954:	eb13 0b01 	adds.w	fp, r3, r1
 8009958:	eb44 0c02 	adc.w	ip, r4, r2
 800995c:	4658      	mov	r0, fp
 800995e:	4661      	mov	r1, ip
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	f04f 0400 	mov.w	r4, #0
 8009968:	461a      	mov	r2, r3
 800996a:	4623      	mov	r3, r4
 800996c:	f7f6 fcb4 	bl	80002d8 <__aeabi_uldivmod>
 8009970:	4603      	mov	r3, r0
 8009972:	460c      	mov	r4, r1
 8009974:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8009976:	e19d      	b.n	8009cb4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	2b00      	cmp	r3, #0
 800997e:	d05b      	beq.n	8009a38 <UART_SetConfig+0x1130>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	2b01      	cmp	r3, #1
 8009986:	d053      	beq.n	8009a30 <UART_SetConfig+0x1128>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	2b02      	cmp	r3, #2
 800998e:	d04b      	beq.n	8009a28 <UART_SetConfig+0x1120>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	2b03      	cmp	r3, #3
 8009996:	d043      	beq.n	8009a20 <UART_SetConfig+0x1118>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	2b04      	cmp	r3, #4
 800999e:	d03b      	beq.n	8009a18 <UART_SetConfig+0x1110>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	2b05      	cmp	r3, #5
 80099a6:	d033      	beq.n	8009a10 <UART_SetConfig+0x1108>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	2b06      	cmp	r3, #6
 80099ae:	d02b      	beq.n	8009a08 <UART_SetConfig+0x1100>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	2b07      	cmp	r3, #7
 80099b6:	d023      	beq.n	8009a00 <UART_SetConfig+0x10f8>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d01b      	beq.n	80099f8 <UART_SetConfig+0x10f0>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	2b09      	cmp	r3, #9
 80099c6:	d013      	beq.n	80099f0 <UART_SetConfig+0x10e8>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	2b0a      	cmp	r3, #10
 80099ce:	d00b      	beq.n	80099e8 <UART_SetConfig+0x10e0>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	2b0b      	cmp	r3, #11
 80099d6:	d103      	bne.n	80099e0 <UART_SetConfig+0x10d8>
 80099d8:	4b2a      	ldr	r3, [pc, #168]	; (8009a84 <UART_SetConfig+0x117c>)
 80099da:	f04f 0400 	mov.w	r4, #0
 80099de:	e02e      	b.n	8009a3e <UART_SetConfig+0x1136>
 80099e0:	4b29      	ldr	r3, [pc, #164]	; (8009a88 <UART_SetConfig+0x1180>)
 80099e2:	f04f 0403 	mov.w	r4, #3
 80099e6:	e02a      	b.n	8009a3e <UART_SetConfig+0x1136>
 80099e8:	4b28      	ldr	r3, [pc, #160]	; (8009a8c <UART_SetConfig+0x1184>)
 80099ea:	f04f 0400 	mov.w	r4, #0
 80099ee:	e026      	b.n	8009a3e <UART_SetConfig+0x1136>
 80099f0:	4b27      	ldr	r3, [pc, #156]	; (8009a90 <UART_SetConfig+0x1188>)
 80099f2:	f04f 0400 	mov.w	r4, #0
 80099f6:	e022      	b.n	8009a3e <UART_SetConfig+0x1136>
 80099f8:	4b26      	ldr	r3, [pc, #152]	; (8009a94 <UART_SetConfig+0x118c>)
 80099fa:	f04f 0400 	mov.w	r4, #0
 80099fe:	e01e      	b.n	8009a3e <UART_SetConfig+0x1136>
 8009a00:	4b25      	ldr	r3, [pc, #148]	; (8009a98 <UART_SetConfig+0x1190>)
 8009a02:	f04f 0400 	mov.w	r4, #0
 8009a06:	e01a      	b.n	8009a3e <UART_SetConfig+0x1136>
 8009a08:	a419      	add	r4, pc, #100	; (adr r4, 8009a70 <UART_SetConfig+0x1168>)
 8009a0a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009a0e:	e016      	b.n	8009a3e <UART_SetConfig+0x1136>
 8009a10:	4b22      	ldr	r3, [pc, #136]	; (8009a9c <UART_SetConfig+0x1194>)
 8009a12:	f04f 0400 	mov.w	r4, #0
 8009a16:	e012      	b.n	8009a3e <UART_SetConfig+0x1136>
 8009a18:	4b21      	ldr	r3, [pc, #132]	; (8009aa0 <UART_SetConfig+0x1198>)
 8009a1a:	f04f 0400 	mov.w	r4, #0
 8009a1e:	e00e      	b.n	8009a3e <UART_SetConfig+0x1136>
 8009a20:	a415      	add	r4, pc, #84	; (adr r4, 8009a78 <UART_SetConfig+0x1170>)
 8009a22:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009a26:	e00a      	b.n	8009a3e <UART_SetConfig+0x1136>
 8009a28:	4b1e      	ldr	r3, [pc, #120]	; (8009aa4 <UART_SetConfig+0x119c>)
 8009a2a:	f04f 0400 	mov.w	r4, #0
 8009a2e:	e006      	b.n	8009a3e <UART_SetConfig+0x1136>
 8009a30:	4b1d      	ldr	r3, [pc, #116]	; (8009aa8 <UART_SetConfig+0x11a0>)
 8009a32:	f04f 0401 	mov.w	r4, #1
 8009a36:	e002      	b.n	8009a3e <UART_SetConfig+0x1136>
 8009a38:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <UART_SetConfig+0x1180>)
 8009a3a:	f04f 0403 	mov.w	r4, #3
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	6852      	ldr	r2, [r2, #4]
 8009a42:	0852      	lsrs	r2, r2, #1
 8009a44:	4611      	mov	r1, r2
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	eb13 0b01 	adds.w	fp, r3, r1
 8009a4e:	eb44 0c02 	adc.w	ip, r4, r2
 8009a52:	4658      	mov	r0, fp
 8009a54:	4661      	mov	r1, ip
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f04f 0400 	mov.w	r4, #0
 8009a5e:	461a      	mov	r2, r3
 8009a60:	4623      	mov	r3, r4
 8009a62:	f7f6 fc39 	bl	80002d8 <__aeabi_uldivmod>
 8009a66:	4603      	mov	r3, r0
 8009a68:	460c      	mov	r4, r1
 8009a6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009a6c:	e122      	b.n	8009cb4 <UART_SetConfig+0x13ac>
 8009a6e:	bf00      	nop
 8009a70:	51615500 	.word	0x51615500
 8009a74:	00000000 	.word	0x00000000
 8009a78:	a2c2aa00 	.word	0xa2c2aa00
 8009a7c:	00000000 	.word	0x00000000
 8009a80:	58024400 	.word	0x58024400
 8009a84:	03d09000 	.word	0x03d09000
 8009a88:	d0900000 	.word	0xd0900000
 8009a8c:	07a12000 	.word	0x07a12000
 8009a90:	0f424000 	.word	0x0f424000
 8009a94:	1e848000 	.word	0x1e848000
 8009a98:	3d090000 	.word	0x3d090000
 8009a9c:	61a80000 	.word	0x61a80000
 8009aa0:	7a120000 	.word	0x7a120000
 8009aa4:	f4240000 	.word	0xf4240000
 8009aa8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d05b      	beq.n	8009b6c <UART_SetConfig+0x1264>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d053      	beq.n	8009b64 <UART_SetConfig+0x125c>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d04b      	beq.n	8009b5c <UART_SetConfig+0x1254>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d043      	beq.n	8009b54 <UART_SetConfig+0x124c>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d03b      	beq.n	8009b4c <UART_SetConfig+0x1244>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	2b05      	cmp	r3, #5
 8009ada:	d033      	beq.n	8009b44 <UART_SetConfig+0x123c>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	2b06      	cmp	r3, #6
 8009ae2:	d02b      	beq.n	8009b3c <UART_SetConfig+0x1234>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	2b07      	cmp	r3, #7
 8009aea:	d023      	beq.n	8009b34 <UART_SetConfig+0x122c>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	2b08      	cmp	r3, #8
 8009af2:	d01b      	beq.n	8009b2c <UART_SetConfig+0x1224>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	2b09      	cmp	r3, #9
 8009afa:	d013      	beq.n	8009b24 <UART_SetConfig+0x121c>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b00:	2b0a      	cmp	r3, #10
 8009b02:	d00b      	beq.n	8009b1c <UART_SetConfig+0x1214>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b08:	2b0b      	cmp	r3, #11
 8009b0a:	d103      	bne.n	8009b14 <UART_SetConfig+0x120c>
 8009b0c:	4bc0      	ldr	r3, [pc, #768]	; (8009e10 <UART_SetConfig+0x1508>)
 8009b0e:	f04f 0400 	mov.w	r4, #0
 8009b12:	e02e      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b14:	4bbf      	ldr	r3, [pc, #764]	; (8009e14 <UART_SetConfig+0x150c>)
 8009b16:	f04f 0400 	mov.w	r4, #0
 8009b1a:	e02a      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b1c:	4bbe      	ldr	r3, [pc, #760]	; (8009e18 <UART_SetConfig+0x1510>)
 8009b1e:	f04f 0400 	mov.w	r4, #0
 8009b22:	e026      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b24:	4bbd      	ldr	r3, [pc, #756]	; (8009e1c <UART_SetConfig+0x1514>)
 8009b26:	f04f 0400 	mov.w	r4, #0
 8009b2a:	e022      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b2c:	4bbc      	ldr	r3, [pc, #752]	; (8009e20 <UART_SetConfig+0x1518>)
 8009b2e:	f04f 0400 	mov.w	r4, #0
 8009b32:	e01e      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b34:	4bbb      	ldr	r3, [pc, #748]	; (8009e24 <UART_SetConfig+0x151c>)
 8009b36:	f04f 0400 	mov.w	r4, #0
 8009b3a:	e01a      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b3c:	a4b0      	add	r4, pc, #704	; (adr r4, 8009e00 <UART_SetConfig+0x14f8>)
 8009b3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009b42:	e016      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b44:	4bb8      	ldr	r3, [pc, #736]	; (8009e28 <UART_SetConfig+0x1520>)
 8009b46:	f04f 0400 	mov.w	r4, #0
 8009b4a:	e012      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b4c:	4bb7      	ldr	r3, [pc, #732]	; (8009e2c <UART_SetConfig+0x1524>)
 8009b4e:	f04f 0400 	mov.w	r4, #0
 8009b52:	e00e      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b54:	a4ac      	add	r4, pc, #688	; (adr r4, 8009e08 <UART_SetConfig+0x1500>)
 8009b56:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009b5a:	e00a      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b5c:	4bb4      	ldr	r3, [pc, #720]	; (8009e30 <UART_SetConfig+0x1528>)
 8009b5e:	f04f 0400 	mov.w	r4, #0
 8009b62:	e006      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b64:	4bb3      	ldr	r3, [pc, #716]	; (8009e34 <UART_SetConfig+0x152c>)
 8009b66:	f04f 0400 	mov.w	r4, #0
 8009b6a:	e002      	b.n	8009b72 <UART_SetConfig+0x126a>
 8009b6c:	4ba9      	ldr	r3, [pc, #676]	; (8009e14 <UART_SetConfig+0x150c>)
 8009b6e:	f04f 0400 	mov.w	r4, #0
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	6852      	ldr	r2, [r2, #4]
 8009b76:	0852      	lsrs	r2, r2, #1
 8009b78:	4611      	mov	r1, r2
 8009b7a:	f04f 0200 	mov.w	r2, #0
 8009b7e:	eb13 0b01 	adds.w	fp, r3, r1
 8009b82:	eb44 0c02 	adc.w	ip, r4, r2
 8009b86:	4658      	mov	r0, fp
 8009b88:	4661      	mov	r1, ip
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f04f 0400 	mov.w	r4, #0
 8009b92:	461a      	mov	r2, r3
 8009b94:	4623      	mov	r3, r4
 8009b96:	f7f6 fb9f 	bl	80002d8 <__aeabi_uldivmod>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ba0:	e088      	b.n	8009cb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d064      	beq.n	8009c74 <UART_SetConfig+0x136c>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d05b      	beq.n	8009c6a <UART_SetConfig+0x1362>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d052      	beq.n	8009c60 <UART_SetConfig+0x1358>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d04a      	beq.n	8009c58 <UART_SetConfig+0x1350>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	2b04      	cmp	r3, #4
 8009bc8:	d041      	beq.n	8009c4e <UART_SetConfig+0x1346>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	2b05      	cmp	r3, #5
 8009bd0:	d039      	beq.n	8009c46 <UART_SetConfig+0x133e>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	2b06      	cmp	r3, #6
 8009bd8:	d031      	beq.n	8009c3e <UART_SetConfig+0x1336>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	2b07      	cmp	r3, #7
 8009be0:	d028      	beq.n	8009c34 <UART_SetConfig+0x132c>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	2b08      	cmp	r3, #8
 8009be8:	d01f      	beq.n	8009c2a <UART_SetConfig+0x1322>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	d016      	beq.n	8009c20 <UART_SetConfig+0x1318>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	2b0a      	cmp	r3, #10
 8009bf8:	d00d      	beq.n	8009c16 <UART_SetConfig+0x130e>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	2b0b      	cmp	r3, #11
 8009c00:	d104      	bne.n	8009c0c <UART_SetConfig+0x1304>
 8009c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c06:	f04f 0400 	mov.w	r4, #0
 8009c0a:	e037      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009c10:	f04f 0400 	mov.w	r4, #0
 8009c14:	e032      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c1a:	f04f 0400 	mov.w	r4, #0
 8009c1e:	e02d      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c24:	f04f 0400 	mov.w	r4, #0
 8009c28:	e028      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c2e:	f04f 0400 	mov.w	r4, #0
 8009c32:	e023      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c38:	f04f 0400 	mov.w	r4, #0
 8009c3c:	e01e      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c3e:	4b7e      	ldr	r3, [pc, #504]	; (8009e38 <UART_SetConfig+0x1530>)
 8009c40:	f04f 0400 	mov.w	r4, #0
 8009c44:	e01a      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c46:	4b7d      	ldr	r3, [pc, #500]	; (8009e3c <UART_SetConfig+0x1534>)
 8009c48:	f04f 0400 	mov.w	r4, #0
 8009c4c:	e016      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009c52:	f04f 0400 	mov.w	r4, #0
 8009c56:	e011      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c58:	4b79      	ldr	r3, [pc, #484]	; (8009e40 <UART_SetConfig+0x1538>)
 8009c5a:	f04f 0400 	mov.w	r4, #0
 8009c5e:	e00d      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009c64:	f04f 0400 	mov.w	r4, #0
 8009c68:	e008      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c6e:	f04f 0400 	mov.w	r4, #0
 8009c72:	e003      	b.n	8009c7c <UART_SetConfig+0x1374>
 8009c74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009c78:	f04f 0400 	mov.w	r4, #0
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	6852      	ldr	r2, [r2, #4]
 8009c80:	0852      	lsrs	r2, r2, #1
 8009c82:	4611      	mov	r1, r2
 8009c84:	f04f 0200 	mov.w	r2, #0
 8009c88:	eb13 0b01 	adds.w	fp, r3, r1
 8009c8c:	eb44 0c02 	adc.w	ip, r4, r2
 8009c90:	4658      	mov	r0, fp
 8009c92:	4661      	mov	r1, ip
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f04f 0400 	mov.w	r4, #0
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4623      	mov	r3, r4
 8009ca0:	f7f6 fb1a 	bl	80002d8 <__aeabi_uldivmod>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009caa:	e003      	b.n	8009cb4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8009cb2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cba:	d309      	bcc.n	8009cd0 <UART_SetConfig+0x13c8>
 8009cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cc2:	d205      	bcs.n	8009cd0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cca:	60da      	str	r2, [r3, #12]
 8009ccc:	f000 bf85 	b.w	800abda <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	f000 bf80 	b.w	800abda <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ce2:	f040 83da 	bne.w	800a49a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8009ce6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009cea:	2b40      	cmp	r3, #64	; 0x40
 8009cec:	f200 83b3 	bhi.w	800a456 <UART_SetConfig+0x1b4e>
 8009cf0:	a201      	add	r2, pc, #4	; (adr r2, 8009cf8 <UART_SetConfig+0x13f0>)
 8009cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf6:	bf00      	nop
 8009cf8:	08009e45 	.word	0x08009e45
 8009cfc:	08009efd 	.word	0x08009efd
 8009d00:	0800a457 	.word	0x0800a457
 8009d04:	0800a457 	.word	0x0800a457
 8009d08:	08009fb5 	.word	0x08009fb5
 8009d0c:	0800a457 	.word	0x0800a457
 8009d10:	0800a457 	.word	0x0800a457
 8009d14:	0800a457 	.word	0x0800a457
 8009d18:	0800a071 	.word	0x0800a071
 8009d1c:	0800a457 	.word	0x0800a457
 8009d20:	0800a457 	.word	0x0800a457
 8009d24:	0800a457 	.word	0x0800a457
 8009d28:	0800a457 	.word	0x0800a457
 8009d2c:	0800a457 	.word	0x0800a457
 8009d30:	0800a457 	.word	0x0800a457
 8009d34:	0800a457 	.word	0x0800a457
 8009d38:	0800a12d 	.word	0x0800a12d
 8009d3c:	0800a457 	.word	0x0800a457
 8009d40:	0800a457 	.word	0x0800a457
 8009d44:	0800a457 	.word	0x0800a457
 8009d48:	0800a457 	.word	0x0800a457
 8009d4c:	0800a457 	.word	0x0800a457
 8009d50:	0800a457 	.word	0x0800a457
 8009d54:	0800a457 	.word	0x0800a457
 8009d58:	0800a457 	.word	0x0800a457
 8009d5c:	0800a457 	.word	0x0800a457
 8009d60:	0800a457 	.word	0x0800a457
 8009d64:	0800a457 	.word	0x0800a457
 8009d68:	0800a457 	.word	0x0800a457
 8009d6c:	0800a457 	.word	0x0800a457
 8009d70:	0800a457 	.word	0x0800a457
 8009d74:	0800a457 	.word	0x0800a457
 8009d78:	0800a29f 	.word	0x0800a29f
 8009d7c:	0800a457 	.word	0x0800a457
 8009d80:	0800a457 	.word	0x0800a457
 8009d84:	0800a457 	.word	0x0800a457
 8009d88:	0800a457 	.word	0x0800a457
 8009d8c:	0800a457 	.word	0x0800a457
 8009d90:	0800a457 	.word	0x0800a457
 8009d94:	0800a457 	.word	0x0800a457
 8009d98:	0800a457 	.word	0x0800a457
 8009d9c:	0800a457 	.word	0x0800a457
 8009da0:	0800a457 	.word	0x0800a457
 8009da4:	0800a457 	.word	0x0800a457
 8009da8:	0800a457 	.word	0x0800a457
 8009dac:	0800a457 	.word	0x0800a457
 8009db0:	0800a457 	.word	0x0800a457
 8009db4:	0800a457 	.word	0x0800a457
 8009db8:	0800a457 	.word	0x0800a457
 8009dbc:	0800a457 	.word	0x0800a457
 8009dc0:	0800a457 	.word	0x0800a457
 8009dc4:	0800a457 	.word	0x0800a457
 8009dc8:	0800a457 	.word	0x0800a457
 8009dcc:	0800a457 	.word	0x0800a457
 8009dd0:	0800a457 	.word	0x0800a457
 8009dd4:	0800a457 	.word	0x0800a457
 8009dd8:	0800a457 	.word	0x0800a457
 8009ddc:	0800a457 	.word	0x0800a457
 8009de0:	0800a457 	.word	0x0800a457
 8009de4:	0800a457 	.word	0x0800a457
 8009de8:	0800a457 	.word	0x0800a457
 8009dec:	0800a457 	.word	0x0800a457
 8009df0:	0800a457 	.word	0x0800a457
 8009df4:	0800a457 	.word	0x0800a457
 8009df8:	0800a395 	.word	0x0800a395
 8009dfc:	f3af 8000 	nop.w
 8009e00:	05161500 	.word	0x05161500
 8009e04:	00000000 	.word	0x00000000
 8009e08:	0a2c2a00 	.word	0x0a2c2a00
 8009e0c:	00000000 	.word	0x00000000
 8009e10:	003d0900 	.word	0x003d0900
 8009e14:	3d090000 	.word	0x3d090000
 8009e18:	007a1200 	.word	0x007a1200
 8009e1c:	00f42400 	.word	0x00f42400
 8009e20:	01e84800 	.word	0x01e84800
 8009e24:	03d09000 	.word	0x03d09000
 8009e28:	061a8000 	.word	0x061a8000
 8009e2c:	07a12000 	.word	0x07a12000
 8009e30:	0f424000 	.word	0x0f424000
 8009e34:	1e848000 	.word	0x1e848000
 8009e38:	000aaa00 	.word	0x000aaa00
 8009e3c:	000ccc00 	.word	0x000ccc00
 8009e40:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e44:	f7fa fce2 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8009e48:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d044      	beq.n	8009edc <UART_SetConfig+0x15d4>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d03e      	beq.n	8009ed8 <UART_SetConfig+0x15d0>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d038      	beq.n	8009ed4 <UART_SetConfig+0x15cc>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d032      	beq.n	8009ed0 <UART_SetConfig+0x15c8>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d02c      	beq.n	8009ecc <UART_SetConfig+0x15c4>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	2b05      	cmp	r3, #5
 8009e78:	d026      	beq.n	8009ec8 <UART_SetConfig+0x15c0>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	2b06      	cmp	r3, #6
 8009e80:	d020      	beq.n	8009ec4 <UART_SetConfig+0x15bc>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	2b07      	cmp	r3, #7
 8009e88:	d01a      	beq.n	8009ec0 <UART_SetConfig+0x15b8>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	2b08      	cmp	r3, #8
 8009e90:	d014      	beq.n	8009ebc <UART_SetConfig+0x15b4>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e96:	2b09      	cmp	r3, #9
 8009e98:	d00e      	beq.n	8009eb8 <UART_SetConfig+0x15b0>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	2b0a      	cmp	r3, #10
 8009ea0:	d008      	beq.n	8009eb4 <UART_SetConfig+0x15ac>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	2b0b      	cmp	r3, #11
 8009ea8:	d102      	bne.n	8009eb0 <UART_SetConfig+0x15a8>
 8009eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eae:	e016      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e014      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009eb4:	2380      	movs	r3, #128	; 0x80
 8009eb6:	e012      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009eb8:	2340      	movs	r3, #64	; 0x40
 8009eba:	e010      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009ebc:	2320      	movs	r3, #32
 8009ebe:	e00e      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009ec0:	2310      	movs	r3, #16
 8009ec2:	e00c      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009ec4:	230c      	movs	r3, #12
 8009ec6:	e00a      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009ec8:	230a      	movs	r3, #10
 8009eca:	e008      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009ecc:	2308      	movs	r3, #8
 8009ece:	e006      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009ed0:	2306      	movs	r3, #6
 8009ed2:	e004      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	e002      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009ed8:	2302      	movs	r3, #2
 8009eda:	e000      	b.n	8009ede <UART_SetConfig+0x15d6>
 8009edc:	2301      	movs	r3, #1
 8009ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee4:	005a      	lsls	r2, r3, #1
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	085b      	lsrs	r3, r3, #1
 8009eec:	441a      	add	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009efa:	e2b0      	b.n	800a45e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009efc:	f7fa fc9c 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8009f00:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d044      	beq.n	8009f94 <UART_SetConfig+0x168c>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d03e      	beq.n	8009f90 <UART_SetConfig+0x1688>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d038      	beq.n	8009f8c <UART_SetConfig+0x1684>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d032      	beq.n	8009f88 <UART_SetConfig+0x1680>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d02c      	beq.n	8009f84 <UART_SetConfig+0x167c>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	2b05      	cmp	r3, #5
 8009f30:	d026      	beq.n	8009f80 <UART_SetConfig+0x1678>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	2b06      	cmp	r3, #6
 8009f38:	d020      	beq.n	8009f7c <UART_SetConfig+0x1674>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	2b07      	cmp	r3, #7
 8009f40:	d01a      	beq.n	8009f78 <UART_SetConfig+0x1670>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	2b08      	cmp	r3, #8
 8009f48:	d014      	beq.n	8009f74 <UART_SetConfig+0x166c>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	2b09      	cmp	r3, #9
 8009f50:	d00e      	beq.n	8009f70 <UART_SetConfig+0x1668>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	2b0a      	cmp	r3, #10
 8009f58:	d008      	beq.n	8009f6c <UART_SetConfig+0x1664>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	2b0b      	cmp	r3, #11
 8009f60:	d102      	bne.n	8009f68 <UART_SetConfig+0x1660>
 8009f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f66:	e016      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e014      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f6c:	2380      	movs	r3, #128	; 0x80
 8009f6e:	e012      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f70:	2340      	movs	r3, #64	; 0x40
 8009f72:	e010      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f74:	2320      	movs	r3, #32
 8009f76:	e00e      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f78:	2310      	movs	r3, #16
 8009f7a:	e00c      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	e00a      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f80:	230a      	movs	r3, #10
 8009f82:	e008      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f84:	2308      	movs	r3, #8
 8009f86:	e006      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f88:	2306      	movs	r3, #6
 8009f8a:	e004      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	e002      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f90:	2302      	movs	r3, #2
 8009f92:	e000      	b.n	8009f96 <UART_SetConfig+0x168e>
 8009f94:	2301      	movs	r3, #1
 8009f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9c:	005a      	lsls	r2, r3, #1
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	085b      	lsrs	r3, r3, #1
 8009fa4:	441a      	add	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fb2:	e254      	b.n	800a45e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fb4:	f107 0318 	add.w	r3, r7, #24
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fb fdbf 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d044      	beq.n	800a052 <UART_SetConfig+0x174a>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d03e      	beq.n	800a04e <UART_SetConfig+0x1746>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d038      	beq.n	800a04a <UART_SetConfig+0x1742>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d032      	beq.n	800a046 <UART_SetConfig+0x173e>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	2b04      	cmp	r3, #4
 8009fe6:	d02c      	beq.n	800a042 <UART_SetConfig+0x173a>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fec:	2b05      	cmp	r3, #5
 8009fee:	d026      	beq.n	800a03e <UART_SetConfig+0x1736>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	2b06      	cmp	r3, #6
 8009ff6:	d020      	beq.n	800a03a <UART_SetConfig+0x1732>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	2b07      	cmp	r3, #7
 8009ffe:	d01a      	beq.n	800a036 <UART_SetConfig+0x172e>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	2b08      	cmp	r3, #8
 800a006:	d014      	beq.n	800a032 <UART_SetConfig+0x172a>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	2b09      	cmp	r3, #9
 800a00e:	d00e      	beq.n	800a02e <UART_SetConfig+0x1726>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	2b0a      	cmp	r3, #10
 800a016:	d008      	beq.n	800a02a <UART_SetConfig+0x1722>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	2b0b      	cmp	r3, #11
 800a01e:	d102      	bne.n	800a026 <UART_SetConfig+0x171e>
 800a020:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a024:	e016      	b.n	800a054 <UART_SetConfig+0x174c>
 800a026:	2301      	movs	r3, #1
 800a028:	e014      	b.n	800a054 <UART_SetConfig+0x174c>
 800a02a:	2380      	movs	r3, #128	; 0x80
 800a02c:	e012      	b.n	800a054 <UART_SetConfig+0x174c>
 800a02e:	2340      	movs	r3, #64	; 0x40
 800a030:	e010      	b.n	800a054 <UART_SetConfig+0x174c>
 800a032:	2320      	movs	r3, #32
 800a034:	e00e      	b.n	800a054 <UART_SetConfig+0x174c>
 800a036:	2310      	movs	r3, #16
 800a038:	e00c      	b.n	800a054 <UART_SetConfig+0x174c>
 800a03a:	230c      	movs	r3, #12
 800a03c:	e00a      	b.n	800a054 <UART_SetConfig+0x174c>
 800a03e:	230a      	movs	r3, #10
 800a040:	e008      	b.n	800a054 <UART_SetConfig+0x174c>
 800a042:	2308      	movs	r3, #8
 800a044:	e006      	b.n	800a054 <UART_SetConfig+0x174c>
 800a046:	2306      	movs	r3, #6
 800a048:	e004      	b.n	800a054 <UART_SetConfig+0x174c>
 800a04a:	2304      	movs	r3, #4
 800a04c:	e002      	b.n	800a054 <UART_SetConfig+0x174c>
 800a04e:	2302      	movs	r3, #2
 800a050:	e000      	b.n	800a054 <UART_SetConfig+0x174c>
 800a052:	2301      	movs	r3, #1
 800a054:	fbb2 f3f3 	udiv	r3, r2, r3
 800a058:	005a      	lsls	r2, r3, #1
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	085b      	lsrs	r3, r3, #1
 800a060:	441a      	add	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	fbb2 f3f3 	udiv	r3, r2, r3
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a06e:	e1f6      	b.n	800a45e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a070:	f107 030c 	add.w	r3, r7, #12
 800a074:	4618      	mov	r0, r3
 800a076:	f7fb fead 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a07a:	693a      	ldr	r2, [r7, #16]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	2b00      	cmp	r3, #0
 800a082:	d044      	beq.n	800a10e <UART_SetConfig+0x1806>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d03e      	beq.n	800a10a <UART_SetConfig+0x1802>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	2b02      	cmp	r3, #2
 800a092:	d038      	beq.n	800a106 <UART_SetConfig+0x17fe>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d032      	beq.n	800a102 <UART_SetConfig+0x17fa>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d02c      	beq.n	800a0fe <UART_SetConfig+0x17f6>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	2b05      	cmp	r3, #5
 800a0aa:	d026      	beq.n	800a0fa <UART_SetConfig+0x17f2>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	2b06      	cmp	r3, #6
 800a0b2:	d020      	beq.n	800a0f6 <UART_SetConfig+0x17ee>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	2b07      	cmp	r3, #7
 800a0ba:	d01a      	beq.n	800a0f2 <UART_SetConfig+0x17ea>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d014      	beq.n	800a0ee <UART_SetConfig+0x17e6>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	2b09      	cmp	r3, #9
 800a0ca:	d00e      	beq.n	800a0ea <UART_SetConfig+0x17e2>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	2b0a      	cmp	r3, #10
 800a0d2:	d008      	beq.n	800a0e6 <UART_SetConfig+0x17de>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	2b0b      	cmp	r3, #11
 800a0da:	d102      	bne.n	800a0e2 <UART_SetConfig+0x17da>
 800a0dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0e0:	e016      	b.n	800a110 <UART_SetConfig+0x1808>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e014      	b.n	800a110 <UART_SetConfig+0x1808>
 800a0e6:	2380      	movs	r3, #128	; 0x80
 800a0e8:	e012      	b.n	800a110 <UART_SetConfig+0x1808>
 800a0ea:	2340      	movs	r3, #64	; 0x40
 800a0ec:	e010      	b.n	800a110 <UART_SetConfig+0x1808>
 800a0ee:	2320      	movs	r3, #32
 800a0f0:	e00e      	b.n	800a110 <UART_SetConfig+0x1808>
 800a0f2:	2310      	movs	r3, #16
 800a0f4:	e00c      	b.n	800a110 <UART_SetConfig+0x1808>
 800a0f6:	230c      	movs	r3, #12
 800a0f8:	e00a      	b.n	800a110 <UART_SetConfig+0x1808>
 800a0fa:	230a      	movs	r3, #10
 800a0fc:	e008      	b.n	800a110 <UART_SetConfig+0x1808>
 800a0fe:	2308      	movs	r3, #8
 800a100:	e006      	b.n	800a110 <UART_SetConfig+0x1808>
 800a102:	2306      	movs	r3, #6
 800a104:	e004      	b.n	800a110 <UART_SetConfig+0x1808>
 800a106:	2304      	movs	r3, #4
 800a108:	e002      	b.n	800a110 <UART_SetConfig+0x1808>
 800a10a:	2302      	movs	r3, #2
 800a10c:	e000      	b.n	800a110 <UART_SetConfig+0x1808>
 800a10e:	2301      	movs	r3, #1
 800a110:	fbb2 f3f3 	udiv	r3, r2, r3
 800a114:	005a      	lsls	r2, r3, #1
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	085b      	lsrs	r3, r3, #1
 800a11c:	441a      	add	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	fbb2 f3f3 	udiv	r3, r2, r3
 800a126:	b29b      	uxth	r3, r3
 800a128:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a12a:	e198      	b.n	800a45e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a12c:	4b87      	ldr	r3, [pc, #540]	; (800a34c <UART_SetConfig+0x1a44>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0320 	and.w	r3, r3, #32
 800a134:	2b00      	cmp	r3, #0
 800a136:	d05e      	beq.n	800a1f6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a138:	4b84      	ldr	r3, [pc, #528]	; (800a34c <UART_SetConfig+0x1a44>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	08db      	lsrs	r3, r3, #3
 800a13e:	f003 0303 	and.w	r3, r3, #3
 800a142:	4a83      	ldr	r2, [pc, #524]	; (800a350 <UART_SetConfig+0x1a48>)
 800a144:	40da      	lsrs	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d044      	beq.n	800a1d8 <UART_SetConfig+0x18d0>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a152:	2b01      	cmp	r3, #1
 800a154:	d03e      	beq.n	800a1d4 <UART_SetConfig+0x18cc>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d038      	beq.n	800a1d0 <UART_SetConfig+0x18c8>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	2b03      	cmp	r3, #3
 800a164:	d032      	beq.n	800a1cc <UART_SetConfig+0x18c4>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	d02c      	beq.n	800a1c8 <UART_SetConfig+0x18c0>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a172:	2b05      	cmp	r3, #5
 800a174:	d026      	beq.n	800a1c4 <UART_SetConfig+0x18bc>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17a:	2b06      	cmp	r3, #6
 800a17c:	d020      	beq.n	800a1c0 <UART_SetConfig+0x18b8>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	2b07      	cmp	r3, #7
 800a184:	d01a      	beq.n	800a1bc <UART_SetConfig+0x18b4>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	2b08      	cmp	r3, #8
 800a18c:	d014      	beq.n	800a1b8 <UART_SetConfig+0x18b0>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	2b09      	cmp	r3, #9
 800a194:	d00e      	beq.n	800a1b4 <UART_SetConfig+0x18ac>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19a:	2b0a      	cmp	r3, #10
 800a19c:	d008      	beq.n	800a1b0 <UART_SetConfig+0x18a8>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	2b0b      	cmp	r3, #11
 800a1a4:	d102      	bne.n	800a1ac <UART_SetConfig+0x18a4>
 800a1a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1aa:	e016      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e014      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1b0:	2380      	movs	r3, #128	; 0x80
 800a1b2:	e012      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1b4:	2340      	movs	r3, #64	; 0x40
 800a1b6:	e010      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1b8:	2320      	movs	r3, #32
 800a1ba:	e00e      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1bc:	2310      	movs	r3, #16
 800a1be:	e00c      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	e00a      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1c4:	230a      	movs	r3, #10
 800a1c6:	e008      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	e006      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1cc:	2306      	movs	r3, #6
 800a1ce:	e004      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	e002      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	e000      	b.n	800a1da <UART_SetConfig+0x18d2>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1de:	005a      	lsls	r2, r3, #1
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	085b      	lsrs	r3, r3, #1
 800a1e6:	441a      	add	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a1f4:	e133      	b.n	800a45e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d043      	beq.n	800a286 <UART_SetConfig+0x197e>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	2b01      	cmp	r3, #1
 800a204:	d03d      	beq.n	800a282 <UART_SetConfig+0x197a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d037      	beq.n	800a27e <UART_SetConfig+0x1976>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a212:	2b03      	cmp	r3, #3
 800a214:	d031      	beq.n	800a27a <UART_SetConfig+0x1972>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	d02b      	beq.n	800a276 <UART_SetConfig+0x196e>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	2b05      	cmp	r3, #5
 800a224:	d025      	beq.n	800a272 <UART_SetConfig+0x196a>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	2b06      	cmp	r3, #6
 800a22c:	d01f      	beq.n	800a26e <UART_SetConfig+0x1966>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a232:	2b07      	cmp	r3, #7
 800a234:	d019      	beq.n	800a26a <UART_SetConfig+0x1962>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	2b08      	cmp	r3, #8
 800a23c:	d013      	beq.n	800a266 <UART_SetConfig+0x195e>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a242:	2b09      	cmp	r3, #9
 800a244:	d00d      	beq.n	800a262 <UART_SetConfig+0x195a>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	2b0a      	cmp	r3, #10
 800a24c:	d007      	beq.n	800a25e <UART_SetConfig+0x1956>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a252:	2b0b      	cmp	r3, #11
 800a254:	d101      	bne.n	800a25a <UART_SetConfig+0x1952>
 800a256:	4b3f      	ldr	r3, [pc, #252]	; (800a354 <UART_SetConfig+0x1a4c>)
 800a258:	e016      	b.n	800a288 <UART_SetConfig+0x1980>
 800a25a:	4b3f      	ldr	r3, [pc, #252]	; (800a358 <UART_SetConfig+0x1a50>)
 800a25c:	e014      	b.n	800a288 <UART_SetConfig+0x1980>
 800a25e:	4b3f      	ldr	r3, [pc, #252]	; (800a35c <UART_SetConfig+0x1a54>)
 800a260:	e012      	b.n	800a288 <UART_SetConfig+0x1980>
 800a262:	4b3f      	ldr	r3, [pc, #252]	; (800a360 <UART_SetConfig+0x1a58>)
 800a264:	e010      	b.n	800a288 <UART_SetConfig+0x1980>
 800a266:	4b3f      	ldr	r3, [pc, #252]	; (800a364 <UART_SetConfig+0x1a5c>)
 800a268:	e00e      	b.n	800a288 <UART_SetConfig+0x1980>
 800a26a:	4b3f      	ldr	r3, [pc, #252]	; (800a368 <UART_SetConfig+0x1a60>)
 800a26c:	e00c      	b.n	800a288 <UART_SetConfig+0x1980>
 800a26e:	4b3f      	ldr	r3, [pc, #252]	; (800a36c <UART_SetConfig+0x1a64>)
 800a270:	e00a      	b.n	800a288 <UART_SetConfig+0x1980>
 800a272:	4b3f      	ldr	r3, [pc, #252]	; (800a370 <UART_SetConfig+0x1a68>)
 800a274:	e008      	b.n	800a288 <UART_SetConfig+0x1980>
 800a276:	4b3f      	ldr	r3, [pc, #252]	; (800a374 <UART_SetConfig+0x1a6c>)
 800a278:	e006      	b.n	800a288 <UART_SetConfig+0x1980>
 800a27a:	4b3f      	ldr	r3, [pc, #252]	; (800a378 <UART_SetConfig+0x1a70>)
 800a27c:	e004      	b.n	800a288 <UART_SetConfig+0x1980>
 800a27e:	4b3f      	ldr	r3, [pc, #252]	; (800a37c <UART_SetConfig+0x1a74>)
 800a280:	e002      	b.n	800a288 <UART_SetConfig+0x1980>
 800a282:	4b33      	ldr	r3, [pc, #204]	; (800a350 <UART_SetConfig+0x1a48>)
 800a284:	e000      	b.n	800a288 <UART_SetConfig+0x1980>
 800a286:	4b34      	ldr	r3, [pc, #208]	; (800a358 <UART_SetConfig+0x1a50>)
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	6852      	ldr	r2, [r2, #4]
 800a28c:	0852      	lsrs	r2, r2, #1
 800a28e:	441a      	add	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	fbb2 f3f3 	udiv	r3, r2, r3
 800a298:	b29b      	uxth	r3, r3
 800a29a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a29c:	e0df      	b.n	800a45e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d045      	beq.n	800a332 <UART_SetConfig+0x1a2a>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d03f      	beq.n	800a32e <UART_SetConfig+0x1a26>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d039      	beq.n	800a32a <UART_SetConfig+0x1a22>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d033      	beq.n	800a326 <UART_SetConfig+0x1a1e>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	2b04      	cmp	r3, #4
 800a2c4:	d02d      	beq.n	800a322 <UART_SetConfig+0x1a1a>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ca:	2b05      	cmp	r3, #5
 800a2cc:	d027      	beq.n	800a31e <UART_SetConfig+0x1a16>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	2b06      	cmp	r3, #6
 800a2d4:	d021      	beq.n	800a31a <UART_SetConfig+0x1a12>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	2b07      	cmp	r3, #7
 800a2dc:	d01b      	beq.n	800a316 <UART_SetConfig+0x1a0e>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d015      	beq.n	800a312 <UART_SetConfig+0x1a0a>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ea:	2b09      	cmp	r3, #9
 800a2ec:	d00f      	beq.n	800a30e <UART_SetConfig+0x1a06>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f2:	2b0a      	cmp	r3, #10
 800a2f4:	d008      	beq.n	800a308 <UART_SetConfig+0x1a00>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	2b0b      	cmp	r3, #11
 800a2fc:	d102      	bne.n	800a304 <UART_SetConfig+0x19fc>
 800a2fe:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a302:	e017      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a304:	4b18      	ldr	r3, [pc, #96]	; (800a368 <UART_SetConfig+0x1a60>)
 800a306:	e015      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a308:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a30c:	e012      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a30e:	4b1c      	ldr	r3, [pc, #112]	; (800a380 <UART_SetConfig+0x1a78>)
 800a310:	e010      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a312:	4b1c      	ldr	r3, [pc, #112]	; (800a384 <UART_SetConfig+0x1a7c>)
 800a314:	e00e      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a316:	4b0f      	ldr	r3, [pc, #60]	; (800a354 <UART_SetConfig+0x1a4c>)
 800a318:	e00c      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a31a:	4b1b      	ldr	r3, [pc, #108]	; (800a388 <UART_SetConfig+0x1a80>)
 800a31c:	e00a      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a31e:	4b1b      	ldr	r3, [pc, #108]	; (800a38c <UART_SetConfig+0x1a84>)
 800a320:	e008      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a322:	4b0e      	ldr	r3, [pc, #56]	; (800a35c <UART_SetConfig+0x1a54>)
 800a324:	e006      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a326:	4b1a      	ldr	r3, [pc, #104]	; (800a390 <UART_SetConfig+0x1a88>)
 800a328:	e004      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a32a:	4b0d      	ldr	r3, [pc, #52]	; (800a360 <UART_SetConfig+0x1a58>)
 800a32c:	e002      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a32e:	4b0d      	ldr	r3, [pc, #52]	; (800a364 <UART_SetConfig+0x1a5c>)
 800a330:	e000      	b.n	800a334 <UART_SetConfig+0x1a2c>
 800a332:	4b0d      	ldr	r3, [pc, #52]	; (800a368 <UART_SetConfig+0x1a60>)
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	6852      	ldr	r2, [r2, #4]
 800a338:	0852      	lsrs	r2, r2, #1
 800a33a:	441a      	add	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	fbb2 f3f3 	udiv	r3, r2, r3
 800a344:	b29b      	uxth	r3, r3
 800a346:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a348:	e089      	b.n	800a45e <UART_SetConfig+0x1b56>
 800a34a:	bf00      	nop
 800a34c:	58024400 	.word	0x58024400
 800a350:	03d09000 	.word	0x03d09000
 800a354:	0007a120 	.word	0x0007a120
 800a358:	07a12000 	.word	0x07a12000
 800a35c:	000f4240 	.word	0x000f4240
 800a360:	001e8480 	.word	0x001e8480
 800a364:	003d0900 	.word	0x003d0900
 800a368:	007a1200 	.word	0x007a1200
 800a36c:	00a2c2aa 	.word	0x00a2c2aa
 800a370:	00c35000 	.word	0x00c35000
 800a374:	00f42400 	.word	0x00f42400
 800a378:	01458554 	.word	0x01458554
 800a37c:	01e84800 	.word	0x01e84800
 800a380:	0001e848 	.word	0x0001e848
 800a384:	0003d090 	.word	0x0003d090
 800a388:	000a2c2a 	.word	0x000a2c2a
 800a38c:	000c3500 	.word	0x000c3500
 800a390:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d04f      	beq.n	800a43c <UART_SetConfig+0x1b34>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d048      	beq.n	800a436 <UART_SetConfig+0x1b2e>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d041      	beq.n	800a430 <UART_SetConfig+0x1b28>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d03a      	beq.n	800a42a <UART_SetConfig+0x1b22>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	d033      	beq.n	800a424 <UART_SetConfig+0x1b1c>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	2b05      	cmp	r3, #5
 800a3c2:	d02c      	beq.n	800a41e <UART_SetConfig+0x1b16>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	2b06      	cmp	r3, #6
 800a3ca:	d025      	beq.n	800a418 <UART_SetConfig+0x1b10>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	2b07      	cmp	r3, #7
 800a3d2:	d01e      	beq.n	800a412 <UART_SetConfig+0x1b0a>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	2b08      	cmp	r3, #8
 800a3da:	d017      	beq.n	800a40c <UART_SetConfig+0x1b04>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	2b09      	cmp	r3, #9
 800a3e2:	d010      	beq.n	800a406 <UART_SetConfig+0x1afe>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	2b0a      	cmp	r3, #10
 800a3ea:	d009      	beq.n	800a400 <UART_SetConfig+0x1af8>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f0:	2b0b      	cmp	r3, #11
 800a3f2:	d102      	bne.n	800a3fa <UART_SetConfig+0x1af2>
 800a3f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3f8:	e022      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a3fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a3fe:	e01f      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a400:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a404:	e01c      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a40a:	e019      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a40c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a410:	e016      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a416:	e013      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a418:	f241 5354 	movw	r3, #5460	; 0x1554
 800a41c:	e010      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a41e:	f641 1398 	movw	r3, #6552	; 0x1998
 800a422:	e00d      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a428:	e00a      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a42a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800a42e:	e007      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a430:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a434:	e004      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a43a:	e001      	b.n	800a440 <UART_SetConfig+0x1b38>
 800a43c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	6852      	ldr	r2, [r2, #4]
 800a444:	0852      	lsrs	r2, r2, #1
 800a446:	441a      	add	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a450:	b29b      	uxth	r3, r3
 800a452:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a454:	e003      	b.n	800a45e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a45c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a460:	2b0f      	cmp	r3, #15
 800a462:	d916      	bls.n	800a492 <UART_SetConfig+0x1b8a>
 800a464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a46a:	d212      	bcs.n	800a492 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	b29b      	uxth	r3, r3
 800a470:	f023 030f 	bic.w	r3, r3, #15
 800a474:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a478:	085b      	lsrs	r3, r3, #1
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	f003 0307 	and.w	r3, r3, #7
 800a480:	b29a      	uxth	r2, r3
 800a482:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a484:	4313      	orrs	r3, r2
 800a486:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a48e:	60da      	str	r2, [r3, #12]
 800a490:	e3a3      	b.n	800abda <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a498:	e39f      	b.n	800abda <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800a49a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a49e:	2b40      	cmp	r3, #64	; 0x40
 800a4a0:	f200 8388 	bhi.w	800abb4 <UART_SetConfig+0x22ac>
 800a4a4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <UART_SetConfig+0x1ba4>)
 800a4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4aa:	bf00      	nop
 800a4ac:	0800a5b1 	.word	0x0800a5b1
 800a4b0:	0800a667 	.word	0x0800a667
 800a4b4:	0800abb5 	.word	0x0800abb5
 800a4b8:	0800abb5 	.word	0x0800abb5
 800a4bc:	0800a71d 	.word	0x0800a71d
 800a4c0:	0800abb5 	.word	0x0800abb5
 800a4c4:	0800abb5 	.word	0x0800abb5
 800a4c8:	0800abb5 	.word	0x0800abb5
 800a4cc:	0800a7d7 	.word	0x0800a7d7
 800a4d0:	0800abb5 	.word	0x0800abb5
 800a4d4:	0800abb5 	.word	0x0800abb5
 800a4d8:	0800abb5 	.word	0x0800abb5
 800a4dc:	0800abb5 	.word	0x0800abb5
 800a4e0:	0800abb5 	.word	0x0800abb5
 800a4e4:	0800abb5 	.word	0x0800abb5
 800a4e8:	0800abb5 	.word	0x0800abb5
 800a4ec:	0800a891 	.word	0x0800a891
 800a4f0:	0800abb5 	.word	0x0800abb5
 800a4f4:	0800abb5 	.word	0x0800abb5
 800a4f8:	0800abb5 	.word	0x0800abb5
 800a4fc:	0800abb5 	.word	0x0800abb5
 800a500:	0800abb5 	.word	0x0800abb5
 800a504:	0800abb5 	.word	0x0800abb5
 800a508:	0800abb5 	.word	0x0800abb5
 800a50c:	0800abb5 	.word	0x0800abb5
 800a510:	0800abb5 	.word	0x0800abb5
 800a514:	0800abb5 	.word	0x0800abb5
 800a518:	0800abb5 	.word	0x0800abb5
 800a51c:	0800abb5 	.word	0x0800abb5
 800a520:	0800abb5 	.word	0x0800abb5
 800a524:	0800abb5 	.word	0x0800abb5
 800a528:	0800abb5 	.word	0x0800abb5
 800a52c:	0800aa01 	.word	0x0800aa01
 800a530:	0800abb5 	.word	0x0800abb5
 800a534:	0800abb5 	.word	0x0800abb5
 800a538:	0800abb5 	.word	0x0800abb5
 800a53c:	0800abb5 	.word	0x0800abb5
 800a540:	0800abb5 	.word	0x0800abb5
 800a544:	0800abb5 	.word	0x0800abb5
 800a548:	0800abb5 	.word	0x0800abb5
 800a54c:	0800abb5 	.word	0x0800abb5
 800a550:	0800abb5 	.word	0x0800abb5
 800a554:	0800abb5 	.word	0x0800abb5
 800a558:	0800abb5 	.word	0x0800abb5
 800a55c:	0800abb5 	.word	0x0800abb5
 800a560:	0800abb5 	.word	0x0800abb5
 800a564:	0800abb5 	.word	0x0800abb5
 800a568:	0800abb5 	.word	0x0800abb5
 800a56c:	0800abb5 	.word	0x0800abb5
 800a570:	0800abb5 	.word	0x0800abb5
 800a574:	0800abb5 	.word	0x0800abb5
 800a578:	0800abb5 	.word	0x0800abb5
 800a57c:	0800abb5 	.word	0x0800abb5
 800a580:	0800abb5 	.word	0x0800abb5
 800a584:	0800abb5 	.word	0x0800abb5
 800a588:	0800abb5 	.word	0x0800abb5
 800a58c:	0800abb5 	.word	0x0800abb5
 800a590:	0800abb5 	.word	0x0800abb5
 800a594:	0800abb5 	.word	0x0800abb5
 800a598:	0800abb5 	.word	0x0800abb5
 800a59c:	0800abb5 	.word	0x0800abb5
 800a5a0:	0800abb5 	.word	0x0800abb5
 800a5a4:	0800abb5 	.word	0x0800abb5
 800a5a8:	0800abb5 	.word	0x0800abb5
 800a5ac:	0800aaf5 	.word	0x0800aaf5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5b0:	f7fa f92c 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 800a5b4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d044      	beq.n	800a648 <UART_SetConfig+0x1d40>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d03e      	beq.n	800a644 <UART_SetConfig+0x1d3c>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d038      	beq.n	800a640 <UART_SetConfig+0x1d38>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	2b03      	cmp	r3, #3
 800a5d4:	d032      	beq.n	800a63c <UART_SetConfig+0x1d34>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	d02c      	beq.n	800a638 <UART_SetConfig+0x1d30>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e2:	2b05      	cmp	r3, #5
 800a5e4:	d026      	beq.n	800a634 <UART_SetConfig+0x1d2c>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ea:	2b06      	cmp	r3, #6
 800a5ec:	d020      	beq.n	800a630 <UART_SetConfig+0x1d28>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	2b07      	cmp	r3, #7
 800a5f4:	d01a      	beq.n	800a62c <UART_SetConfig+0x1d24>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	2b08      	cmp	r3, #8
 800a5fc:	d014      	beq.n	800a628 <UART_SetConfig+0x1d20>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	2b09      	cmp	r3, #9
 800a604:	d00e      	beq.n	800a624 <UART_SetConfig+0x1d1c>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	2b0a      	cmp	r3, #10
 800a60c:	d008      	beq.n	800a620 <UART_SetConfig+0x1d18>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	2b0b      	cmp	r3, #11
 800a614:	d102      	bne.n	800a61c <UART_SetConfig+0x1d14>
 800a616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a61a:	e016      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e014      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a620:	2380      	movs	r3, #128	; 0x80
 800a622:	e012      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a624:	2340      	movs	r3, #64	; 0x40
 800a626:	e010      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a628:	2320      	movs	r3, #32
 800a62a:	e00e      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a62c:	2310      	movs	r3, #16
 800a62e:	e00c      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a630:	230c      	movs	r3, #12
 800a632:	e00a      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a634:	230a      	movs	r3, #10
 800a636:	e008      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a638:	2308      	movs	r3, #8
 800a63a:	e006      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a63c:	2306      	movs	r3, #6
 800a63e:	e004      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a640:	2304      	movs	r3, #4
 800a642:	e002      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a644:	2302      	movs	r3, #2
 800a646:	e000      	b.n	800a64a <UART_SetConfig+0x1d42>
 800a648:	2301      	movs	r3, #1
 800a64a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a64c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	085b      	lsrs	r3, r3, #1
 800a656:	441a      	add	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a660:	b29b      	uxth	r3, r3
 800a662:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a664:	e2aa      	b.n	800abbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a666:	f7fa f8e7 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 800a66a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b00      	cmp	r3, #0
 800a672:	d044      	beq.n	800a6fe <UART_SetConfig+0x1df6>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d03e      	beq.n	800a6fa <UART_SetConfig+0x1df2>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b02      	cmp	r3, #2
 800a682:	d038      	beq.n	800a6f6 <UART_SetConfig+0x1dee>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d032      	beq.n	800a6f2 <UART_SetConfig+0x1dea>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b04      	cmp	r3, #4
 800a692:	d02c      	beq.n	800a6ee <UART_SetConfig+0x1de6>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	2b05      	cmp	r3, #5
 800a69a:	d026      	beq.n	800a6ea <UART_SetConfig+0x1de2>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	2b06      	cmp	r3, #6
 800a6a2:	d020      	beq.n	800a6e6 <UART_SetConfig+0x1dde>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	2b07      	cmp	r3, #7
 800a6aa:	d01a      	beq.n	800a6e2 <UART_SetConfig+0x1dda>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	2b08      	cmp	r3, #8
 800a6b2:	d014      	beq.n	800a6de <UART_SetConfig+0x1dd6>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	2b09      	cmp	r3, #9
 800a6ba:	d00e      	beq.n	800a6da <UART_SetConfig+0x1dd2>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	2b0a      	cmp	r3, #10
 800a6c2:	d008      	beq.n	800a6d6 <UART_SetConfig+0x1dce>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	2b0b      	cmp	r3, #11
 800a6ca:	d102      	bne.n	800a6d2 <UART_SetConfig+0x1dca>
 800a6cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6d0:	e016      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e014      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6d6:	2380      	movs	r3, #128	; 0x80
 800a6d8:	e012      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6da:	2340      	movs	r3, #64	; 0x40
 800a6dc:	e010      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6de:	2320      	movs	r3, #32
 800a6e0:	e00e      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6e2:	2310      	movs	r3, #16
 800a6e4:	e00c      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	e00a      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6ea:	230a      	movs	r3, #10
 800a6ec:	e008      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6ee:	2308      	movs	r3, #8
 800a6f0:	e006      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6f2:	2306      	movs	r3, #6
 800a6f4:	e004      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6f6:	2304      	movs	r3, #4
 800a6f8:	e002      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	e000      	b.n	800a700 <UART_SetConfig+0x1df8>
 800a6fe:	2301      	movs	r3, #1
 800a700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a702:	fbb2 f2f3 	udiv	r2, r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	085b      	lsrs	r3, r3, #1
 800a70c:	441a      	add	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	fbb2 f3f3 	udiv	r3, r2, r3
 800a716:	b29b      	uxth	r3, r3
 800a718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a71a:	e24f      	b.n	800abbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a71c:	f107 0318 	add.w	r3, r7, #24
 800a720:	4618      	mov	r0, r3
 800a722:	f7fb fa0b 	bl	8005b3c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a726:	69fa      	ldr	r2, [r7, #28]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d044      	beq.n	800a7ba <UART_SetConfig+0x1eb2>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	2b01      	cmp	r3, #1
 800a736:	d03e      	beq.n	800a7b6 <UART_SetConfig+0x1eae>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d038      	beq.n	800a7b2 <UART_SetConfig+0x1eaa>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	2b03      	cmp	r3, #3
 800a746:	d032      	beq.n	800a7ae <UART_SetConfig+0x1ea6>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d02c      	beq.n	800a7aa <UART_SetConfig+0x1ea2>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b05      	cmp	r3, #5
 800a756:	d026      	beq.n	800a7a6 <UART_SetConfig+0x1e9e>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2b06      	cmp	r3, #6
 800a75e:	d020      	beq.n	800a7a2 <UART_SetConfig+0x1e9a>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	2b07      	cmp	r3, #7
 800a766:	d01a      	beq.n	800a79e <UART_SetConfig+0x1e96>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b08      	cmp	r3, #8
 800a76e:	d014      	beq.n	800a79a <UART_SetConfig+0x1e92>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b09      	cmp	r3, #9
 800a776:	d00e      	beq.n	800a796 <UART_SetConfig+0x1e8e>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	2b0a      	cmp	r3, #10
 800a77e:	d008      	beq.n	800a792 <UART_SetConfig+0x1e8a>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	2b0b      	cmp	r3, #11
 800a786:	d102      	bne.n	800a78e <UART_SetConfig+0x1e86>
 800a788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a78c:	e016      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a78e:	2301      	movs	r3, #1
 800a790:	e014      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a792:	2380      	movs	r3, #128	; 0x80
 800a794:	e012      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a796:	2340      	movs	r3, #64	; 0x40
 800a798:	e010      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a79a:	2320      	movs	r3, #32
 800a79c:	e00e      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a79e:	2310      	movs	r3, #16
 800a7a0:	e00c      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a7a2:	230c      	movs	r3, #12
 800a7a4:	e00a      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a7a6:	230a      	movs	r3, #10
 800a7a8:	e008      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a7aa:	2308      	movs	r3, #8
 800a7ac:	e006      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a7ae:	2306      	movs	r3, #6
 800a7b0:	e004      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a7b2:	2304      	movs	r3, #4
 800a7b4:	e002      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	e000      	b.n	800a7bc <UART_SetConfig+0x1eb4>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	085b      	lsrs	r3, r3, #1
 800a7c6:	441a      	add	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7d4:	e1f2      	b.n	800abbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7d6:	f107 030c 	add.w	r3, r7, #12
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fb fafa 	bl	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d044      	beq.n	800a874 <UART_SetConfig+0x1f6c>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d03e      	beq.n	800a870 <UART_SetConfig+0x1f68>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d038      	beq.n	800a86c <UART_SetConfig+0x1f64>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	d032      	beq.n	800a868 <UART_SetConfig+0x1f60>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b04      	cmp	r3, #4
 800a808:	d02c      	beq.n	800a864 <UART_SetConfig+0x1f5c>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	2b05      	cmp	r3, #5
 800a810:	d026      	beq.n	800a860 <UART_SetConfig+0x1f58>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a816:	2b06      	cmp	r3, #6
 800a818:	d020      	beq.n	800a85c <UART_SetConfig+0x1f54>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b07      	cmp	r3, #7
 800a820:	d01a      	beq.n	800a858 <UART_SetConfig+0x1f50>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a826:	2b08      	cmp	r3, #8
 800a828:	d014      	beq.n	800a854 <UART_SetConfig+0x1f4c>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	2b09      	cmp	r3, #9
 800a830:	d00e      	beq.n	800a850 <UART_SetConfig+0x1f48>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a836:	2b0a      	cmp	r3, #10
 800a838:	d008      	beq.n	800a84c <UART_SetConfig+0x1f44>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	2b0b      	cmp	r3, #11
 800a840:	d102      	bne.n	800a848 <UART_SetConfig+0x1f40>
 800a842:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a846:	e016      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a848:	2301      	movs	r3, #1
 800a84a:	e014      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a84c:	2380      	movs	r3, #128	; 0x80
 800a84e:	e012      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a850:	2340      	movs	r3, #64	; 0x40
 800a852:	e010      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a854:	2320      	movs	r3, #32
 800a856:	e00e      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a858:	2310      	movs	r3, #16
 800a85a:	e00c      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a85c:	230c      	movs	r3, #12
 800a85e:	e00a      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a860:	230a      	movs	r3, #10
 800a862:	e008      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a864:	2308      	movs	r3, #8
 800a866:	e006      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a868:	2306      	movs	r3, #6
 800a86a:	e004      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a86c:	2304      	movs	r3, #4
 800a86e:	e002      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a870:	2302      	movs	r3, #2
 800a872:	e000      	b.n	800a876 <UART_SetConfig+0x1f6e>
 800a874:	2301      	movs	r3, #1
 800a876:	fbb2 f2f3 	udiv	r2, r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	085b      	lsrs	r3, r3, #1
 800a880:	441a      	add	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	fbb2 f3f3 	udiv	r3, r2, r3
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a88e:	e195      	b.n	800abbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a890:	4b87      	ldr	r3, [pc, #540]	; (800aab0 <UART_SetConfig+0x21a8>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d05d      	beq.n	800a958 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a89c:	4b84      	ldr	r3, [pc, #528]	; (800aab0 <UART_SetConfig+0x21a8>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	08db      	lsrs	r3, r3, #3
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	4a83      	ldr	r2, [pc, #524]	; (800aab4 <UART_SetConfig+0x21ac>)
 800a8a8:	40da      	lsrs	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d044      	beq.n	800a93c <UART_SetConfig+0x2034>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d03e      	beq.n	800a938 <UART_SetConfig+0x2030>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d038      	beq.n	800a934 <UART_SetConfig+0x202c>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d032      	beq.n	800a930 <UART_SetConfig+0x2028>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d02c      	beq.n	800a92c <UART_SetConfig+0x2024>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b05      	cmp	r3, #5
 800a8d8:	d026      	beq.n	800a928 <UART_SetConfig+0x2020>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8de:	2b06      	cmp	r3, #6
 800a8e0:	d020      	beq.n	800a924 <UART_SetConfig+0x201c>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	2b07      	cmp	r3, #7
 800a8e8:	d01a      	beq.n	800a920 <UART_SetConfig+0x2018>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	2b08      	cmp	r3, #8
 800a8f0:	d014      	beq.n	800a91c <UART_SetConfig+0x2014>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f6:	2b09      	cmp	r3, #9
 800a8f8:	d00e      	beq.n	800a918 <UART_SetConfig+0x2010>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	2b0a      	cmp	r3, #10
 800a900:	d008      	beq.n	800a914 <UART_SetConfig+0x200c>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a906:	2b0b      	cmp	r3, #11
 800a908:	d102      	bne.n	800a910 <UART_SetConfig+0x2008>
 800a90a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a90e:	e016      	b.n	800a93e <UART_SetConfig+0x2036>
 800a910:	2301      	movs	r3, #1
 800a912:	e014      	b.n	800a93e <UART_SetConfig+0x2036>
 800a914:	2380      	movs	r3, #128	; 0x80
 800a916:	e012      	b.n	800a93e <UART_SetConfig+0x2036>
 800a918:	2340      	movs	r3, #64	; 0x40
 800a91a:	e010      	b.n	800a93e <UART_SetConfig+0x2036>
 800a91c:	2320      	movs	r3, #32
 800a91e:	e00e      	b.n	800a93e <UART_SetConfig+0x2036>
 800a920:	2310      	movs	r3, #16
 800a922:	e00c      	b.n	800a93e <UART_SetConfig+0x2036>
 800a924:	230c      	movs	r3, #12
 800a926:	e00a      	b.n	800a93e <UART_SetConfig+0x2036>
 800a928:	230a      	movs	r3, #10
 800a92a:	e008      	b.n	800a93e <UART_SetConfig+0x2036>
 800a92c:	2308      	movs	r3, #8
 800a92e:	e006      	b.n	800a93e <UART_SetConfig+0x2036>
 800a930:	2306      	movs	r3, #6
 800a932:	e004      	b.n	800a93e <UART_SetConfig+0x2036>
 800a934:	2304      	movs	r3, #4
 800a936:	e002      	b.n	800a93e <UART_SetConfig+0x2036>
 800a938:	2302      	movs	r3, #2
 800a93a:	e000      	b.n	800a93e <UART_SetConfig+0x2036>
 800a93c:	2301      	movs	r3, #1
 800a93e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	085b      	lsrs	r3, r3, #1
 800a948:	441a      	add	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a952:	b29b      	uxth	r3, r3
 800a954:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a956:	e131      	b.n	800abbc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d043      	beq.n	800a9e8 <UART_SetConfig+0x20e0>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	2b01      	cmp	r3, #1
 800a966:	d03d      	beq.n	800a9e4 <UART_SetConfig+0x20dc>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d037      	beq.n	800a9e0 <UART_SetConfig+0x20d8>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a974:	2b03      	cmp	r3, #3
 800a976:	d031      	beq.n	800a9dc <UART_SetConfig+0x20d4>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	d02b      	beq.n	800a9d8 <UART_SetConfig+0x20d0>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a984:	2b05      	cmp	r3, #5
 800a986:	d025      	beq.n	800a9d4 <UART_SetConfig+0x20cc>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	2b06      	cmp	r3, #6
 800a98e:	d01f      	beq.n	800a9d0 <UART_SetConfig+0x20c8>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a994:	2b07      	cmp	r3, #7
 800a996:	d019      	beq.n	800a9cc <UART_SetConfig+0x20c4>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99c:	2b08      	cmp	r3, #8
 800a99e:	d013      	beq.n	800a9c8 <UART_SetConfig+0x20c0>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	2b09      	cmp	r3, #9
 800a9a6:	d00d      	beq.n	800a9c4 <UART_SetConfig+0x20bc>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	2b0a      	cmp	r3, #10
 800a9ae:	d007      	beq.n	800a9c0 <UART_SetConfig+0x20b8>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b4:	2b0b      	cmp	r3, #11
 800a9b6:	d101      	bne.n	800a9bc <UART_SetConfig+0x20b4>
 800a9b8:	4b3f      	ldr	r3, [pc, #252]	; (800aab8 <UART_SetConfig+0x21b0>)
 800a9ba:	e016      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9bc:	4b3d      	ldr	r3, [pc, #244]	; (800aab4 <UART_SetConfig+0x21ac>)
 800a9be:	e014      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9c0:	4b3e      	ldr	r3, [pc, #248]	; (800aabc <UART_SetConfig+0x21b4>)
 800a9c2:	e012      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9c4:	4b3e      	ldr	r3, [pc, #248]	; (800aac0 <UART_SetConfig+0x21b8>)
 800a9c6:	e010      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9c8:	4b3e      	ldr	r3, [pc, #248]	; (800aac4 <UART_SetConfig+0x21bc>)
 800a9ca:	e00e      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9cc:	4b3e      	ldr	r3, [pc, #248]	; (800aac8 <UART_SetConfig+0x21c0>)
 800a9ce:	e00c      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9d0:	4b3e      	ldr	r3, [pc, #248]	; (800aacc <UART_SetConfig+0x21c4>)
 800a9d2:	e00a      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9d4:	4b3e      	ldr	r3, [pc, #248]	; (800aad0 <UART_SetConfig+0x21c8>)
 800a9d6:	e008      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9d8:	4b3e      	ldr	r3, [pc, #248]	; (800aad4 <UART_SetConfig+0x21cc>)
 800a9da:	e006      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9dc:	4b3e      	ldr	r3, [pc, #248]	; (800aad8 <UART_SetConfig+0x21d0>)
 800a9de:	e004      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9e0:	4b3e      	ldr	r3, [pc, #248]	; (800aadc <UART_SetConfig+0x21d4>)
 800a9e2:	e002      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9e4:	4b3e      	ldr	r3, [pc, #248]	; (800aae0 <UART_SetConfig+0x21d8>)
 800a9e6:	e000      	b.n	800a9ea <UART_SetConfig+0x20e2>
 800a9e8:	4b32      	ldr	r3, [pc, #200]	; (800aab4 <UART_SetConfig+0x21ac>)
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	6852      	ldr	r2, [r2, #4]
 800a9ee:	0852      	lsrs	r2, r2, #1
 800a9f0:	441a      	add	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9fe:	e0dd      	b.n	800abbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d046      	beq.n	800aa96 <UART_SetConfig+0x218e>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d040      	beq.n	800aa92 <UART_SetConfig+0x218a>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d03a      	beq.n	800aa8e <UART_SetConfig+0x2186>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d034      	beq.n	800aa8a <UART_SetConfig+0x2182>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	d02e      	beq.n	800aa86 <UART_SetConfig+0x217e>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2c:	2b05      	cmp	r3, #5
 800aa2e:	d028      	beq.n	800aa82 <UART_SetConfig+0x217a>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	2b06      	cmp	r3, #6
 800aa36:	d022      	beq.n	800aa7e <UART_SetConfig+0x2176>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3c:	2b07      	cmp	r3, #7
 800aa3e:	d01c      	beq.n	800aa7a <UART_SetConfig+0x2172>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	2b08      	cmp	r3, #8
 800aa46:	d016      	beq.n	800aa76 <UART_SetConfig+0x216e>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	d00f      	beq.n	800aa70 <UART_SetConfig+0x2168>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	2b0a      	cmp	r3, #10
 800aa56:	d008      	beq.n	800aa6a <UART_SetConfig+0x2162>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	2b0b      	cmp	r3, #11
 800aa5e:	d102      	bne.n	800aa66 <UART_SetConfig+0x215e>
 800aa60:	f643 5309 	movw	r3, #15625	; 0x3d09
 800aa64:	e018      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa66:	4b18      	ldr	r3, [pc, #96]	; (800aac8 <UART_SetConfig+0x21c0>)
 800aa68:	e016      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa6a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800aa6e:	e013      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa70:	f24f 4324 	movw	r3, #62500	; 0xf424
 800aa74:	e010      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa76:	4b1b      	ldr	r3, [pc, #108]	; (800aae4 <UART_SetConfig+0x21dc>)
 800aa78:	e00e      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa7a:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <UART_SetConfig+0x21b0>)
 800aa7c:	e00c      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa7e:	4b1a      	ldr	r3, [pc, #104]	; (800aae8 <UART_SetConfig+0x21e0>)
 800aa80:	e00a      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa82:	4b1a      	ldr	r3, [pc, #104]	; (800aaec <UART_SetConfig+0x21e4>)
 800aa84:	e008      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa86:	4b0d      	ldr	r3, [pc, #52]	; (800aabc <UART_SetConfig+0x21b4>)
 800aa88:	e006      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa8a:	4b19      	ldr	r3, [pc, #100]	; (800aaf0 <UART_SetConfig+0x21e8>)
 800aa8c:	e004      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa8e:	4b0c      	ldr	r3, [pc, #48]	; (800aac0 <UART_SetConfig+0x21b8>)
 800aa90:	e002      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa92:	4b0c      	ldr	r3, [pc, #48]	; (800aac4 <UART_SetConfig+0x21bc>)
 800aa94:	e000      	b.n	800aa98 <UART_SetConfig+0x2190>
 800aa96:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <UART_SetConfig+0x21c0>)
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	6852      	ldr	r2, [r2, #4]
 800aa9c:	0852      	lsrs	r2, r2, #1
 800aa9e:	441a      	add	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aaac:	e086      	b.n	800abbc <UART_SetConfig+0x22b4>
 800aaae:	bf00      	nop
 800aab0:	58024400 	.word	0x58024400
 800aab4:	03d09000 	.word	0x03d09000
 800aab8:	0003d090 	.word	0x0003d090
 800aabc:	0007a120 	.word	0x0007a120
 800aac0:	000f4240 	.word	0x000f4240
 800aac4:	001e8480 	.word	0x001e8480
 800aac8:	003d0900 	.word	0x003d0900
 800aacc:	00516155 	.word	0x00516155
 800aad0:	0061a800 	.word	0x0061a800
 800aad4:	007a1200 	.word	0x007a1200
 800aad8:	00a2c2aa 	.word	0x00a2c2aa
 800aadc:	00f42400 	.word	0x00f42400
 800aae0:	01e84800 	.word	0x01e84800
 800aae4:	0001e848 	.word	0x0001e848
 800aae8:	00051615 	.word	0x00051615
 800aaec:	00061a80 	.word	0x00061a80
 800aaf0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d04e      	beq.n	800ab9a <UART_SetConfig+0x2292>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d047      	beq.n	800ab94 <UART_SetConfig+0x228c>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d040      	beq.n	800ab8e <UART_SetConfig+0x2286>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d039      	beq.n	800ab88 <UART_SetConfig+0x2280>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d032      	beq.n	800ab82 <UART_SetConfig+0x227a>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2b05      	cmp	r3, #5
 800ab22:	d02b      	beq.n	800ab7c <UART_SetConfig+0x2274>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b06      	cmp	r3, #6
 800ab2a:	d024      	beq.n	800ab76 <UART_SetConfig+0x226e>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	2b07      	cmp	r3, #7
 800ab32:	d01d      	beq.n	800ab70 <UART_SetConfig+0x2268>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	2b08      	cmp	r3, #8
 800ab3a:	d016      	beq.n	800ab6a <UART_SetConfig+0x2262>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	2b09      	cmp	r3, #9
 800ab42:	d00f      	beq.n	800ab64 <UART_SetConfig+0x225c>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab48:	2b0a      	cmp	r3, #10
 800ab4a:	d008      	beq.n	800ab5e <UART_SetConfig+0x2256>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab50:	2b0b      	cmp	r3, #11
 800ab52:	d101      	bne.n	800ab58 <UART_SetConfig+0x2250>
 800ab54:	2380      	movs	r3, #128	; 0x80
 800ab56:	e022      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab5c:	e01f      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab62:	e01c      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab68:	e019      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab6e:	e016      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab74:	e013      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab76:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ab7a:	e010      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab7c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ab80:	e00d      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab86:	e00a      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab88:	f241 5355 	movw	r3, #5461	; 0x1555
 800ab8c:	e007      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab92:	e004      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab98:	e001      	b.n	800ab9e <UART_SetConfig+0x2296>
 800ab9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	6852      	ldr	r2, [r2, #4]
 800aba2:	0852      	lsrs	r2, r2, #1
 800aba4:	441a      	add	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800abae:	b29b      	uxth	r3, r3
 800abb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800abb2:	e003      	b.n	800abbc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800abba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbe:	2b0f      	cmp	r3, #15
 800abc0:	d908      	bls.n	800abd4 <UART_SetConfig+0x22cc>
 800abc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc8:	d204      	bcs.n	800abd4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abd0:	60da      	str	r2, [r3, #12]
 800abd2:	e002      	b.n	800abda <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800abf6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3740      	adds	r7, #64	; 0x40
 800abfe:	46bd      	mov	sp, r7
 800ac00:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ac04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00a      	beq.n	800ac2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac32:	f003 0302 	and.w	r3, r3, #2
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00a      	beq.n	800ac50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00a      	beq.n	800ac72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac76:	f003 0308 	and.w	r3, r3, #8
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00a      	beq.n	800ac94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac98:	f003 0310 	and.w	r3, r3, #16
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00a      	beq.n	800acb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	430a      	orrs	r2, r1
 800acb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acba:	f003 0320 	and.w	r3, r3, #32
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00a      	beq.n	800acd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	430a      	orrs	r2, r1
 800acd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d01a      	beq.n	800ad1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	430a      	orrs	r2, r1
 800acf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad02:	d10a      	bne.n	800ad1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	605a      	str	r2, [r3, #4]
  }
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af02      	add	r7, sp, #8
 800ad4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ad58:	f7f6 fc10 	bl	800157c <HAL_GetTick>
 800ad5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 0308 	and.w	r3, r3, #8
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d10e      	bne.n	800ad8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f82c 	bl	800add8 <UART_WaitOnFlagUntilTimeout>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e022      	b.n	800add0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 0304 	and.w	r3, r3, #4
 800ad94:	2b04      	cmp	r3, #4
 800ad96:	d10e      	bne.n	800adb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f816 	bl	800add8 <UART_WaitOnFlagUntilTimeout>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e00c      	b.n	800add0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2220      	movs	r2, #32
 800adba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	4613      	mov	r3, r2
 800ade6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ade8:	e062      	b.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf0:	d05e      	beq.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adf2:	f7f6 fbc3 	bl	800157c <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d302      	bcc.n	800ae08 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d11d      	bne.n	800ae44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689a      	ldr	r2, [r3, #8]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f022 0201 	bic.w	r2, r2, #1
 800ae26:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2220      	movs	r2, #32
 800ae2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2220      	movs	r2, #32
 800ae34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e045      	b.n	800aed0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 0304 	and.w	r3, r3, #4
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d02e      	beq.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae60:	d126      	bne.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae6a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	689a      	ldr	r2, [r3, #8]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0201 	bic.w	r2, r2, #1
 800ae8a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2220      	movs	r2, #32
 800ae90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2220      	movs	r2, #32
 800ae98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2220      	movs	r2, #32
 800aea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e00f      	b.n	800aed0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	69da      	ldr	r2, [r3, #28]
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	4013      	ands	r3, r2
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	bf0c      	ite	eq
 800aec0:	2301      	moveq	r3, #1
 800aec2:	2300      	movne	r3, #0
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	461a      	mov	r2, r3
 800aec8:	79fb      	ldrb	r3, [r7, #7]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d08d      	beq.n	800adea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d101      	bne.n	800aeee <HAL_UARTEx_DisableFifoMode+0x16>
 800aeea:	2302      	movs	r3, #2
 800aeec:	e027      	b.n	800af3e <HAL_UARTEx_DisableFifoMode+0x66>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2224      	movs	r2, #36	; 0x24
 800aefa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f022 0201 	bic.w	r2, r2, #1
 800af14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2220      	movs	r2, #32
 800af30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d101      	bne.n	800af62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af5e:	2302      	movs	r3, #2
 800af60:	e02d      	b.n	800afbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2224      	movs	r2, #36	; 0x24
 800af6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 0201 	bic.w	r2, r2, #1
 800af88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	430a      	orrs	r2, r1
 800af9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f850 	bl	800b044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2220      	movs	r2, #32
 800afb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d101      	bne.n	800afde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afda:	2302      	movs	r3, #2
 800afdc:	e02d      	b.n	800b03a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2201      	movs	r2, #1
 800afe2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2224      	movs	r2, #36	; 0x24
 800afea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f022 0201 	bic.w	r2, r2, #1
 800b004:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	430a      	orrs	r2, r1
 800b018:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f812 	bl	800b044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2220      	movs	r2, #32
 800b02c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
	...

0800b044 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b044:	b480      	push	{r7}
 800b046:	b089      	sub	sp, #36	; 0x24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b04c:	4a2f      	ldr	r2, [pc, #188]	; (800b10c <UARTEx_SetNbDataToProcess+0xc8>)
 800b04e:	f107 0314 	add.w	r3, r7, #20
 800b052:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b056:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b05a:	4a2d      	ldr	r2, [pc, #180]	; (800b110 <UARTEx_SetNbDataToProcess+0xcc>)
 800b05c:	f107 030c 	add.w	r3, r7, #12
 800b060:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b064:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d108      	bne.n	800b082 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b080:	e03d      	b.n	800b0fe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b082:	2308      	movs	r3, #8
 800b084:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b086:	2308      	movs	r3, #8
 800b088:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	0e5b      	lsrs	r3, r3, #25
 800b092:	b2db      	uxtb	r3, r3
 800b094:	f003 0307 	and.w	r3, r3, #7
 800b098:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	0f5b      	lsrs	r3, r3, #29
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	f003 0307 	and.w	r3, r3, #7
 800b0a8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b0aa:	7fbb      	ldrb	r3, [r7, #30]
 800b0ac:	7f3a      	ldrb	r2, [r7, #28]
 800b0ae:	f107 0120 	add.w	r1, r7, #32
 800b0b2:	440a      	add	r2, r1
 800b0b4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b0b8:	fb02 f303 	mul.w	r3, r2, r3
 800b0bc:	7f3a      	ldrb	r2, [r7, #28]
 800b0be:	f107 0120 	add.w	r1, r7, #32
 800b0c2:	440a      	add	r2, r1
 800b0c4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b0c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b0d4:	7ffb      	ldrb	r3, [r7, #31]
 800b0d6:	7f7a      	ldrb	r2, [r7, #29]
 800b0d8:	f107 0120 	add.w	r1, r7, #32
 800b0dc:	440a      	add	r2, r1
 800b0de:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b0e2:	fb02 f303 	mul.w	r3, r2, r3
 800b0e6:	7f7a      	ldrb	r2, [r7, #29]
 800b0e8:	f107 0120 	add.w	r1, r7, #32
 800b0ec:	440a      	add	r2, r1
 800b0ee:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b0f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b0fe:	bf00      	nop
 800b100:	3724      	adds	r7, #36	; 0x24
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	08015724 	.word	0x08015724
 800b110:	0801572c 	.word	0x0801572c

0800b114 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b114:	b084      	sub	sp, #16
 800b116:	b480      	push	{r7}
 800b118:	b085      	sub	sp, #20
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	f107 001c 	add.w	r0, r7, #28
 800b122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b12a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b12c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b12e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b132:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b136:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b13a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685a      	ldr	r2, [r3, #4]
 800b146:	4b07      	ldr	r3, [pc, #28]	; (800b164 <SDMMC_Init+0x50>)
 800b148:	4013      	ands	r3, r2
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	431a      	orrs	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	b004      	add	sp, #16
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	ffc02c00 	.word	0xffc02c00

0800b168 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b176:	4618      	mov	r0, r3
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f043 0203 	orr.w	r2, r3, #3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 0303 	and.w	r3, r3, #3
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b202:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b208:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b20e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	4313      	orrs	r3, r2
 800b214:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	68da      	ldr	r2, [r3, #12]
 800b21a:	4b06      	ldr	r3, [pc, #24]	; (800b234 <SDMMC_SendCommand+0x50>)
 800b21c:	4013      	ands	r3, r2
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	431a      	orrs	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	fffee0c0 	.word	0xfffee0c0

0800b238 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	b2db      	uxtb	r3, r3
}
 800b246:	4618      	mov	r0, r3
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b252:	b480      	push	{r7}
 800b254:	b085      	sub	sp, #20
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3314      	adds	r3, #20
 800b260:	461a      	mov	r2, r3
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	4413      	add	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b29e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b2a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b2aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0

}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b088      	sub	sp, #32
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b2de:	2310      	movs	r3, #16
 800b2e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2f2:	f107 0308 	add.w	r3, r7, #8
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7ff ff73 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b2fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b302:	2110      	movs	r1, #16
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 faab 	bl	800b860 <SDMMC_GetCmdResp1>
 800b30a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b30c:	69fb      	ldr	r3, [r7, #28]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3720      	adds	r7, #32
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b088      	sub	sp, #32
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b324:	2311      	movs	r3, #17
 800b326:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b32c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b32e:	2300      	movs	r3, #0
 800b330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b336:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b338:	f107 0308 	add.w	r3, r7, #8
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff ff50 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b344:	f241 3288 	movw	r2, #5000	; 0x1388
 800b348:	2111      	movs	r1, #17
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 fa88 	bl	800b860 <SDMMC_GetCmdResp1>
 800b350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b352:	69fb      	ldr	r3, [r7, #28]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3720      	adds	r7, #32
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b088      	sub	sp, #32
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b36a:	2312      	movs	r3, #18
 800b36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b36e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b374:	2300      	movs	r3, #0
 800b376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b37c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b37e:	f107 0308 	add.w	r3, r7, #8
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7ff ff2d 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b38a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b38e:	2112      	movs	r1, #18
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fa65 	bl	800b860 <SDMMC_GetCmdResp1>
 800b396:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b398:	69fb      	ldr	r3, [r7, #28]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3720      	adds	r7, #32
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b088      	sub	sp, #32
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b3b0:	2318      	movs	r3, #24
 800b3b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3c4:	f107 0308 	add.w	r3, r7, #8
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7ff ff0a 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d4:	2118      	movs	r1, #24
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fa42 	bl	800b860 <SDMMC_GetCmdResp1>
 800b3dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3de:	69fb      	ldr	r3, [r7, #28]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3720      	adds	r7, #32
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b3f6:	2319      	movs	r3, #25
 800b3f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b400:	2300      	movs	r3, #0
 800b402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b40a:	f107 0308 	add.w	r3, r7, #8
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7ff fee7 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b416:	f241 3288 	movw	r2, #5000	; 0x1388
 800b41a:	2119      	movs	r1, #25
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fa1f 	bl	800b860 <SDMMC_GetCmdResp1>
 800b422:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b424:	69fb      	ldr	r3, [r7, #28]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3720      	adds	r7, #32
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b088      	sub	sp, #32
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b438:	2300      	movs	r3, #0
 800b43a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b43c:	230c      	movs	r3, #12
 800b43e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b440:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b446:	2300      	movs	r3, #0
 800b448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b44a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b44e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b468:	f107 0308 	add.w	r3, r7, #8
 800b46c:	4619      	mov	r1, r3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7ff feb8 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b474:	4a0b      	ldr	r2, [pc, #44]	; (800b4a4 <SDMMC_CmdStopTransfer+0x74>)
 800b476:	210c      	movs	r1, #12
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f9f1 	bl	800b860 <SDMMC_GetCmdResp1>
 800b47e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b492:	d101      	bne.n	800b498 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b494:	2300      	movs	r3, #0
 800b496:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b498:	69fb      	ldr	r3, [r7, #28]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3720      	adds	r7, #32
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	05f5e100 	.word	0x05f5e100

0800b4a8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08a      	sub	sp, #40	; 0x28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b4b8:	2307      	movs	r3, #7
 800b4ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4c0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ca:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4cc:	f107 0310 	add.w	r3, r7, #16
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff fe86 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4dc:	2107      	movs	r1, #7
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 f9be 	bl	800b860 <SDMMC_GetCmdResp1>
 800b4e4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3728      	adds	r7, #40	; 0x28
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b088      	sub	sp, #32
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b500:	2300      	movs	r3, #0
 800b502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b504:	2300      	movs	r3, #0
 800b506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b50c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b50e:	f107 0308 	add.w	r3, r7, #8
 800b512:	4619      	mov	r1, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff fe65 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f976 	bl	800b80c <SDMMC_GetCmdError>
 800b520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b522:	69fb      	ldr	r3, [r7, #28]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3720      	adds	r7, #32
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b088      	sub	sp, #32
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b534:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b53a:	2308      	movs	r3, #8
 800b53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b53e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b544:	2300      	movs	r3, #0
 800b546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b54c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b54e:	f107 0308 	add.w	r3, r7, #8
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff fe45 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fb6a 	bl	800bc34 <SDMMC_GetCmdResp7>
 800b560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b562:	69fb      	ldr	r3, [r7, #28]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3720      	adds	r7, #32
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b57a:	2337      	movs	r3, #55	; 0x37
 800b57c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b57e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b584:	2300      	movs	r3, #0
 800b586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b58c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b58e:	f107 0308 	add.w	r3, r7, #8
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff fe25 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b59a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b59e:	2137      	movs	r1, #55	; 0x37
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f95d 	bl	800b860 <SDMMC_GetCmdResp1>
 800b5a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5a8:	69fb      	ldr	r3, [r7, #28]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3720      	adds	r7, #32
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b088      	sub	sp, #32
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b5c0:	2329      	movs	r3, #41	; 0x29
 800b5c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5d4:	f107 0308 	add.w	r3, r7, #8
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff fe02 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fa75 	bl	800bad0 <SDMMC_GetCmdResp3>
 800b5e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5e8:	69fb      	ldr	r3, [r7, #28]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3720      	adds	r7, #32
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b088      	sub	sp, #32
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b600:	2306      	movs	r3, #6
 800b602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b604:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b60a:	2300      	movs	r3, #0
 800b60c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b60e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b612:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b614:	f107 0308 	add.w	r3, r7, #8
 800b618:	4619      	mov	r1, r3
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7ff fde2 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b620:	f241 3288 	movw	r2, #5000	; 0x1388
 800b624:	2106      	movs	r1, #6
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f91a 	bl	800b860 <SDMMC_GetCmdResp1>
 800b62c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b62e:	69fb      	ldr	r3, [r7, #28]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3720      	adds	r7, #32
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b088      	sub	sp, #32
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b640:	2300      	movs	r3, #0
 800b642:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b644:	2333      	movs	r3, #51	; 0x33
 800b646:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b64c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b64e:	2300      	movs	r3, #0
 800b650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b656:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b658:	f107 0308 	add.w	r3, r7, #8
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7ff fdc0 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b664:	f241 3288 	movw	r2, #5000	; 0x1388
 800b668:	2133      	movs	r1, #51	; 0x33
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f8f8 	bl	800b860 <SDMMC_GetCmdResp1>
 800b670:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b672:	69fb      	ldr	r3, [r7, #28]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3720      	adds	r7, #32
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b088      	sub	sp, #32
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b688:	2302      	movs	r3, #2
 800b68a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b68c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b692:	2300      	movs	r3, #0
 800b694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b69a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b69c:	f107 0308 	add.w	r3, r7, #8
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7ff fd9e 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f9c9 	bl	800ba40 <SDMMC_GetCmdResp2>
 800b6ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6b0:	69fb      	ldr	r3, [r7, #28]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3720      	adds	r7, #32
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b088      	sub	sp, #32
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b6c8:	2309      	movs	r3, #9
 800b6ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b6d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6dc:	f107 0308 	add.w	r3, r7, #8
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff fd7e 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f9a9 	bl	800ba40 <SDMMC_GetCmdResp2>
 800b6ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f0:	69fb      	ldr	r3, [r7, #28]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3720      	adds	r7, #32
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b088      	sub	sp, #32
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b708:	2303      	movs	r3, #3
 800b70a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b70c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b712:	2300      	movs	r3, #0
 800b714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b71a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b71c:	f107 0308 	add.w	r3, r7, #8
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff fd5e 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	2103      	movs	r1, #3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fa0b 	bl	800bb48 <SDMMC_GetCmdResp6>
 800b732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b734:	69fb      	ldr	r3, [r7, #28]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3720      	adds	r7, #32
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b088      	sub	sp, #32
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b74c:	230d      	movs	r3, #13
 800b74e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b750:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b756:	2300      	movs	r3, #0
 800b758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b75a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b75e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b760:	f107 0308 	add.w	r3, r7, #8
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff fd3c 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b76c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b770:	210d      	movs	r1, #13
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f874 	bl	800b860 <SDMMC_GetCmdResp1>
 800b778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b77a:	69fb      	ldr	r3, [r7, #28]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3720      	adds	r7, #32
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b088      	sub	sp, #32
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b78c:	2300      	movs	r3, #0
 800b78e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b790:	230d      	movs	r3, #13
 800b792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b794:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b79a:	2300      	movs	r3, #0
 800b79c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b79e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7a4:	f107 0308 	add.w	r3, r7, #8
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7ff fd1a 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b7b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b4:	210d      	movs	r1, #13
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f852 	bl	800b860 <SDMMC_GetCmdResp1>
 800b7bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7be:	69fb      	ldr	r3, [r7, #28]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3720      	adds	r7, #32
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b7d4:	230b      	movs	r3, #11
 800b7d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7e8:	f107 0308 	add.w	r3, r7, #8
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7ff fcf8 	bl	800b1e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b7f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7f8:	210b      	movs	r1, #11
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f830 	bl	800b860 <SDMMC_GetCmdResp1>
 800b800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b802:	69fb      	ldr	r3, [r7, #28]
}
 800b804:	4618      	mov	r0, r3
 800b806:	3720      	adds	r7, #32
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b80c:	b490      	push	{r4, r7}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b814:	4b0f      	ldr	r3, [pc, #60]	; (800b854 <SDMMC_GetCmdError+0x48>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a0f      	ldr	r2, [pc, #60]	; (800b858 <SDMMC_GetCmdError+0x4c>)
 800b81a:	fba2 2303 	umull	r2, r3, r2, r3
 800b81e:	0a5b      	lsrs	r3, r3, #9
 800b820:	f241 3288 	movw	r2, #5000	; 0x1388
 800b824:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b828:	4623      	mov	r3, r4
 800b82a:	1e5c      	subs	r4, r3, #1
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d102      	bne.n	800b836 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b830:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b834:	e009      	b.n	800b84a <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d0f2      	beq.n	800b828 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a05      	ldr	r2, [pc, #20]	; (800b85c <SDMMC_GetCmdError+0x50>)
 800b846:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bc90      	pop	{r4, r7}
 800b852:	4770      	bx	lr
 800b854:	2400000c 	.word	0x2400000c
 800b858:	10624dd3 	.word	0x10624dd3
 800b85c:	002000c5 	.word	0x002000c5

0800b860 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b860:	b590      	push	{r4, r7, lr}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	460b      	mov	r3, r1
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b86e:	4b6f      	ldr	r3, [pc, #444]	; (800ba2c <SDMMC_GetCmdResp1+0x1cc>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a6f      	ldr	r2, [pc, #444]	; (800ba30 <SDMMC_GetCmdResp1+0x1d0>)
 800b874:	fba2 2303 	umull	r2, r3, r2, r3
 800b878:	0a5b      	lsrs	r3, r3, #9
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b880:	4623      	mov	r3, r4
 800b882:	1e5c      	subs	r4, r3, #1
 800b884:	2b00      	cmp	r3, #0
 800b886:	d102      	bne.n	800b88e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b888:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b88c:	e0c9      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b892:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	4b67      	ldr	r3, [pc, #412]	; (800ba34 <SDMMC_GetCmdResp1+0x1d4>)
 800b898:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d0f0      	beq.n	800b880 <SDMMC_GetCmdResp1+0x20>
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1eb      	bne.n	800b880 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ac:	f003 0304 	and.w	r3, r3, #4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d004      	beq.n	800b8be <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2204      	movs	r2, #4
 800b8b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8ba:	2304      	movs	r3, #4
 800b8bc:	e0b1      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c2:	f003 0301 	and.w	r3, r3, #1
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d004      	beq.n	800b8d4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e0a6      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4a58      	ldr	r2, [pc, #352]	; (800ba38 <SDMMC_GetCmdResp1+0x1d8>)
 800b8d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f7ff fcac 	bl	800b238 <SDMMC_GetCommandResponse>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	7afb      	ldrb	r3, [r7, #11]
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d001      	beq.n	800b8ee <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e099      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f7ff fcae 	bl	800b252 <SDMMC_GetResponse>
 800b8f6:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	4b50      	ldr	r3, [pc, #320]	; (800ba3c <SDMMC_GetCmdResp1+0x1dc>)
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b902:	2300      	movs	r3, #0
 800b904:	e08d      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	da02      	bge.n	800b912 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b90c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b910:	e087      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b91c:	2340      	movs	r3, #64	; 0x40
 800b91e:	e080      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b92a:	2380      	movs	r3, #128	; 0x80
 800b92c:	e079      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b93c:	e071      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b94c:	e069      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b95c:	e061      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b96c:	e059      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b97c:	e051      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b98c:	e049      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b998:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b99c:	e041      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b9a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9ac:	e039      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b9b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b9bc:	e031      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9cc:	e029      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b9dc:	e021      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b9e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b9ec:	e019      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b9f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b9fc:	e011      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba0c:	e009      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f003 0308 	and.w	r3, r3, #8
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba1c:	e001      	b.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	371c      	adds	r7, #28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd90      	pop	{r4, r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	2400000c 	.word	0x2400000c
 800ba30:	10624dd3 	.word	0x10624dd3
 800ba34:	00200045 	.word	0x00200045
 800ba38:	002000c5 	.word	0x002000c5
 800ba3c:	fdffe008 	.word	0xfdffe008

0800ba40 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba40:	b490      	push	{r4, r7}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba48:	4b1e      	ldr	r3, [pc, #120]	; (800bac4 <SDMMC_GetCmdResp2+0x84>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a1e      	ldr	r2, [pc, #120]	; (800bac8 <SDMMC_GetCmdResp2+0x88>)
 800ba4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba52:	0a5b      	lsrs	r3, r3, #9
 800ba54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba58:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800ba5c:	4623      	mov	r3, r4
 800ba5e:	1e5c      	subs	r4, r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d102      	bne.n	800ba6a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba68:	e026      	b.n	800bab8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba6e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d0f0      	beq.n	800ba5c <SDMMC_GetCmdResp2+0x1c>
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1eb      	bne.n	800ba5c <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba88:	f003 0304 	and.w	r3, r3, #4
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d004      	beq.n	800ba9a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2204      	movs	r2, #4
 800ba94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba96:	2304      	movs	r3, #4
 800ba98:	e00e      	b.n	800bab8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba9e:	f003 0301 	and.w	r3, r3, #1
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d004      	beq.n	800bab0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2201      	movs	r2, #1
 800baaa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800baac:	2301      	movs	r3, #1
 800baae:	e003      	b.n	800bab8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a06      	ldr	r2, [pc, #24]	; (800bacc <SDMMC_GetCmdResp2+0x8c>)
 800bab4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bc90      	pop	{r4, r7}
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	2400000c 	.word	0x2400000c
 800bac8:	10624dd3 	.word	0x10624dd3
 800bacc:	002000c5 	.word	0x002000c5

0800bad0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bad0:	b490      	push	{r4, r7}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bad8:	4b18      	ldr	r3, [pc, #96]	; (800bb3c <SDMMC_GetCmdResp3+0x6c>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a18      	ldr	r2, [pc, #96]	; (800bb40 <SDMMC_GetCmdResp3+0x70>)
 800bade:	fba2 2303 	umull	r2, r3, r2, r3
 800bae2:	0a5b      	lsrs	r3, r3, #9
 800bae4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800baec:	4623      	mov	r3, r4
 800baee:	1e5c      	subs	r4, r3, #1
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d102      	bne.n	800bafa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800baf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800baf8:	e01b      	b.n	800bb32 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d0f0      	beq.n	800baec <SDMMC_GetCmdResp3+0x1c>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1eb      	bne.n	800baec <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb18:	f003 0304 	and.w	r3, r3, #4
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d004      	beq.n	800bb2a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2204      	movs	r2, #4
 800bb24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb26:	2304      	movs	r3, #4
 800bb28:	e003      	b.n	800bb32 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a05      	ldr	r2, [pc, #20]	; (800bb44 <SDMMC_GetCmdResp3+0x74>)
 800bb2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bc90      	pop	{r4, r7}
 800bb3a:	4770      	bx	lr
 800bb3c:	2400000c 	.word	0x2400000c
 800bb40:	10624dd3 	.word	0x10624dd3
 800bb44:	002000c5 	.word	0x002000c5

0800bb48 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb48:	b590      	push	{r4, r7, lr}
 800bb4a:	b087      	sub	sp, #28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	460b      	mov	r3, r1
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb56:	4b34      	ldr	r3, [pc, #208]	; (800bc28 <SDMMC_GetCmdResp6+0xe0>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a34      	ldr	r2, [pc, #208]	; (800bc2c <SDMMC_GetCmdResp6+0xe4>)
 800bb5c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb60:	0a5b      	lsrs	r3, r3, #9
 800bb62:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb66:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bb6a:	4623      	mov	r3, r4
 800bb6c:	1e5c      	subs	r4, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d102      	bne.n	800bb78 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb76:	e052      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0f0      	beq.n	800bb6a <SDMMC_GetCmdResp6+0x22>
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1eb      	bne.n	800bb6a <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb96:	f003 0304 	and.w	r3, r3, #4
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d004      	beq.n	800bba8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2204      	movs	r2, #4
 800bba2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bba4:	2304      	movs	r3, #4
 800bba6:	e03a      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d004      	beq.n	800bbbe <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e02f      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f7ff fb3a 	bl	800b238 <SDMMC_GetCommandResponse>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	7afb      	ldrb	r3, [r7, #11]
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d001      	beq.n	800bbd2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e025      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	4a16      	ldr	r2, [pc, #88]	; (800bc30 <SDMMC_GetCmdResp6+0xe8>)
 800bbd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bbd8:	2100      	movs	r1, #0
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f7ff fb39 	bl	800b252 <SDMMC_GetResponse>
 800bbe0:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d106      	bne.n	800bbfa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	0c1b      	lsrs	r3, r3, #16
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e011      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc08:	e009      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc18:	e001      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd90      	pop	{r4, r7, pc}
 800bc26:	bf00      	nop
 800bc28:	2400000c 	.word	0x2400000c
 800bc2c:	10624dd3 	.word	0x10624dd3
 800bc30:	002000c5 	.word	0x002000c5

0800bc34 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc34:	b490      	push	{r4, r7}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc3c:	4b21      	ldr	r3, [pc, #132]	; (800bcc4 <SDMMC_GetCmdResp7+0x90>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a21      	ldr	r2, [pc, #132]	; (800bcc8 <SDMMC_GetCmdResp7+0x94>)
 800bc42:	fba2 2303 	umull	r2, r3, r2, r3
 800bc46:	0a5b      	lsrs	r3, r3, #9
 800bc48:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc4c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bc50:	4623      	mov	r3, r4
 800bc52:	1e5c      	subs	r4, r3, #1
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d102      	bne.n	800bc5e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc5c:	e02c      	b.n	800bcb8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc62:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0f0      	beq.n	800bc50 <SDMMC_GetCmdResp7+0x1c>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1eb      	bne.n	800bc50 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7c:	f003 0304 	and.w	r3, r3, #4
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d004      	beq.n	800bc8e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2204      	movs	r2, #4
 800bc88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc8a:	2304      	movs	r3, #4
 800bc8c:	e014      	b.n	800bcb8 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc92:	f003 0301 	and.w	r3, r3, #1
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d004      	beq.n	800bca4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e009      	b.n	800bcb8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2240      	movs	r2, #64	; 0x40
 800bcb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcb6:	2300      	movs	r3, #0

}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bc90      	pop	{r4, r7}
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	2400000c 	.word	0x2400000c
 800bcc8:	10624dd3 	.word	0x10624dd3

0800bccc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bccc:	b084      	sub	sp, #16
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b084      	sub	sp, #16
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	f107 001c 	add.w	r0, r7, #28
 800bcda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d120      	bne.n	800bd26 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68da      	ldr	r2, [r3, #12]
 800bcf4:	4b25      	ldr	r3, [pc, #148]	; (800bd8c <USB_CoreInit+0xc0>)
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d105      	bne.n	800bd1a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f001 fab4 	bl	800d288 <USB_CoreReset>
 800bd20:	4603      	mov	r3, r0
 800bd22:	73fb      	strb	r3, [r7, #15]
 800bd24:	e01a      	b.n	800bd5c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f001 faa8 	bl	800d288 <USB_CoreReset>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bd3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d106      	bne.n	800bd50 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	639a      	str	r2, [r3, #56]	; 0x38
 800bd4e:	e005      	b.n	800bd5c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d10b      	bne.n	800bd7a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	f043 0206 	orr.w	r2, r3, #6
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	f043 0220 	orr.w	r2, r3, #32
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd86:	b004      	add	sp, #16
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	ffbdffbf 	.word	0xffbdffbf

0800bd90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b087      	sub	sp, #28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d165      	bne.n	800be70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	4a41      	ldr	r2, [pc, #260]	; (800beac <USB_SetTurnaroundTime+0x11c>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d906      	bls.n	800bdba <USB_SetTurnaroundTime+0x2a>
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	4a40      	ldr	r2, [pc, #256]	; (800beb0 <USB_SetTurnaroundTime+0x120>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d802      	bhi.n	800bdba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bdb4:	230f      	movs	r3, #15
 800bdb6:	617b      	str	r3, [r7, #20]
 800bdb8:	e062      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	4a3c      	ldr	r2, [pc, #240]	; (800beb0 <USB_SetTurnaroundTime+0x120>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d906      	bls.n	800bdd0 <USB_SetTurnaroundTime+0x40>
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	4a3b      	ldr	r2, [pc, #236]	; (800beb4 <USB_SetTurnaroundTime+0x124>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d802      	bhi.n	800bdd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bdca:	230e      	movs	r3, #14
 800bdcc:	617b      	str	r3, [r7, #20]
 800bdce:	e057      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	4a38      	ldr	r2, [pc, #224]	; (800beb4 <USB_SetTurnaroundTime+0x124>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d906      	bls.n	800bde6 <USB_SetTurnaroundTime+0x56>
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	4a37      	ldr	r2, [pc, #220]	; (800beb8 <USB_SetTurnaroundTime+0x128>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d802      	bhi.n	800bde6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bde0:	230d      	movs	r3, #13
 800bde2:	617b      	str	r3, [r7, #20]
 800bde4:	e04c      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	4a33      	ldr	r2, [pc, #204]	; (800beb8 <USB_SetTurnaroundTime+0x128>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d906      	bls.n	800bdfc <USB_SetTurnaroundTime+0x6c>
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	4a32      	ldr	r2, [pc, #200]	; (800bebc <USB_SetTurnaroundTime+0x12c>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d802      	bhi.n	800bdfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bdf6:	230c      	movs	r3, #12
 800bdf8:	617b      	str	r3, [r7, #20]
 800bdfa:	e041      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	4a2f      	ldr	r2, [pc, #188]	; (800bebc <USB_SetTurnaroundTime+0x12c>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d906      	bls.n	800be12 <USB_SetTurnaroundTime+0x82>
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	4a2e      	ldr	r2, [pc, #184]	; (800bec0 <USB_SetTurnaroundTime+0x130>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d802      	bhi.n	800be12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800be0c:	230b      	movs	r3, #11
 800be0e:	617b      	str	r3, [r7, #20]
 800be10:	e036      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	4a2a      	ldr	r2, [pc, #168]	; (800bec0 <USB_SetTurnaroundTime+0x130>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d906      	bls.n	800be28 <USB_SetTurnaroundTime+0x98>
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	4a29      	ldr	r2, [pc, #164]	; (800bec4 <USB_SetTurnaroundTime+0x134>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d802      	bhi.n	800be28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800be22:	230a      	movs	r3, #10
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	e02b      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	4a26      	ldr	r2, [pc, #152]	; (800bec4 <USB_SetTurnaroundTime+0x134>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d906      	bls.n	800be3e <USB_SetTurnaroundTime+0xae>
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4a25      	ldr	r2, [pc, #148]	; (800bec8 <USB_SetTurnaroundTime+0x138>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d802      	bhi.n	800be3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800be38:	2309      	movs	r3, #9
 800be3a:	617b      	str	r3, [r7, #20]
 800be3c:	e020      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	4a21      	ldr	r2, [pc, #132]	; (800bec8 <USB_SetTurnaroundTime+0x138>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d906      	bls.n	800be54 <USB_SetTurnaroundTime+0xc4>
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	4a20      	ldr	r2, [pc, #128]	; (800becc <USB_SetTurnaroundTime+0x13c>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d802      	bhi.n	800be54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800be4e:	2308      	movs	r3, #8
 800be50:	617b      	str	r3, [r7, #20]
 800be52:	e015      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	4a1d      	ldr	r2, [pc, #116]	; (800becc <USB_SetTurnaroundTime+0x13c>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d906      	bls.n	800be6a <USB_SetTurnaroundTime+0xda>
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	4a1c      	ldr	r2, [pc, #112]	; (800bed0 <USB_SetTurnaroundTime+0x140>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d802      	bhi.n	800be6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800be64:	2307      	movs	r3, #7
 800be66:	617b      	str	r3, [r7, #20]
 800be68:	e00a      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800be6a:	2306      	movs	r3, #6
 800be6c:	617b      	str	r3, [r7, #20]
 800be6e:	e007      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d102      	bne.n	800be7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800be76:	2309      	movs	r3, #9
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	e001      	b.n	800be80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800be7c:	2309      	movs	r3, #9
 800be7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	68da      	ldr	r2, [r3, #12]
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	029b      	lsls	r3, r3, #10
 800be94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800be98:	431a      	orrs	r2, r3
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	371c      	adds	r7, #28
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	00d8acbf 	.word	0x00d8acbf
 800beb0:	00e4e1bf 	.word	0x00e4e1bf
 800beb4:	00f423ff 	.word	0x00f423ff
 800beb8:	0106737f 	.word	0x0106737f
 800bebc:	011a499f 	.word	0x011a499f
 800bec0:	01312cff 	.word	0x01312cff
 800bec4:	014ca43f 	.word	0x014ca43f
 800bec8:	016e35ff 	.word	0x016e35ff
 800becc:	01a6ab1f 	.word	0x01a6ab1f
 800bed0:	01e847ff 	.word	0x01e847ff

0800bed4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f043 0201 	orr.w	r2, r3, #1
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b083      	sub	sp, #12
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	f023 0201 	bic.w	r2, r3, #1
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	460b      	mov	r3, r1
 800bf22:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf30:	78fb      	ldrb	r3, [r7, #3]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d106      	bne.n	800bf44 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60da      	str	r2, [r3, #12]
 800bf42:	e00b      	b.n	800bf5c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d106      	bne.n	800bf58 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	60da      	str	r2, [r3, #12]
 800bf56:	e001      	b.n	800bf5c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e003      	b.n	800bf64 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bf5c:	2032      	movs	r0, #50	; 0x32
 800bf5e:	f7f5 fb19 	bl	8001594 <HAL_Delay>

  return HAL_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf6c:	b084      	sub	sp, #16
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b086      	sub	sp, #24
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bf7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bf86:	2300      	movs	r3, #0
 800bf88:	613b      	str	r3, [r7, #16]
 800bf8a:	e009      	b.n	800bfa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	3340      	adds	r3, #64	; 0x40
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4413      	add	r3, r2
 800bf96:	2200      	movs	r2, #0
 800bf98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	613b      	str	r3, [r7, #16]
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	2b0e      	cmp	r3, #14
 800bfa4:	d9f2      	bls.n	800bf8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bfa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d11c      	bne.n	800bfe6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfba:	f043 0302 	orr.w	r3, r3, #2
 800bfbe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	e005      	b.n	800bff2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bff8:	461a      	mov	r2, r3
 800bffa:	2300      	movs	r3, #0
 800bffc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c004:	4619      	mov	r1, r3
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c00c:	461a      	mov	r2, r3
 800c00e:	680b      	ldr	r3, [r1, #0]
 800c010:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	2b01      	cmp	r3, #1
 800c016:	d10c      	bne.n	800c032 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d104      	bne.n	800c028 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c01e:	2100      	movs	r1, #0
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f949 	bl	800c2b8 <USB_SetDevSpeed>
 800c026:	e008      	b.n	800c03a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c028:	2101      	movs	r1, #1
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 f944 	bl	800c2b8 <USB_SetDevSpeed>
 800c030:	e003      	b.n	800c03a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c032:	2103      	movs	r1, #3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f93f 	bl	800c2b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c03a:	2110      	movs	r1, #16
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 f8f3 	bl	800c228 <USB_FlushTxFifo>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 f911 	bl	800c274 <USB_FlushRxFifo>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c062:	461a      	mov	r2, r3
 800c064:	2300      	movs	r3, #0
 800c066:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c06e:	461a      	mov	r2, r3
 800c070:	2300      	movs	r3, #0
 800c072:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c07a:	461a      	mov	r2, r3
 800c07c:	2300      	movs	r3, #0
 800c07e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c080:	2300      	movs	r3, #0
 800c082:	613b      	str	r3, [r7, #16]
 800c084:	e043      	b.n	800c10e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	015a      	lsls	r2, r3, #5
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	4413      	add	r3, r2
 800c08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c09c:	d118      	bne.n	800c0d0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10a      	bne.n	800c0ba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	015a      	lsls	r2, r3, #5
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	e013      	b.n	800c0e2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	015a      	lsls	r2, r3, #5
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c0cc:	6013      	str	r3, [r2, #0]
 800c0ce:	e008      	b.n	800c0e2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	015a      	lsls	r2, r3, #5
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0dc:	461a      	mov	r2, r3
 800c0de:	2300      	movs	r3, #0
 800c0e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c100:	461a      	mov	r2, r3
 800c102:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c106:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	3301      	adds	r3, #1
 800c10c:	613b      	str	r3, [r7, #16]
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	429a      	cmp	r2, r3
 800c114:	d3b7      	bcc.n	800c086 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c116:	2300      	movs	r3, #0
 800c118:	613b      	str	r3, [r7, #16]
 800c11a:	e043      	b.n	800c1a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c12e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c132:	d118      	bne.n	800c166 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10a      	bne.n	800c150 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	015a      	lsls	r2, r3, #5
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	4413      	add	r3, r2
 800c142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c146:	461a      	mov	r2, r3
 800c148:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c14c:	6013      	str	r3, [r2, #0]
 800c14e:	e013      	b.n	800c178 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4413      	add	r3, r2
 800c158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15c:	461a      	mov	r2, r3
 800c15e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c162:	6013      	str	r3, [r2, #0]
 800c164:	e008      	b.n	800c178 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	015a      	lsls	r2, r3, #5
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	4413      	add	r3, r2
 800c16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c172:	461a      	mov	r2, r3
 800c174:	2300      	movs	r3, #0
 800c176:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	015a      	lsls	r2, r3, #5
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	4413      	add	r3, r2
 800c180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c184:	461a      	mov	r2, r3
 800c186:	2300      	movs	r3, #0
 800c188:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	4413      	add	r3, r2
 800c192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c196:	461a      	mov	r2, r3
 800c198:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c19c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	613b      	str	r3, [r7, #16]
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d3b7      	bcc.n	800c11c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c1cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d105      	bne.n	800c1e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	f043 0210 	orr.w	r2, r3, #16
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	699a      	ldr	r2, [r3, #24]
 800c1e4:	4b0e      	ldr	r3, [pc, #56]	; (800c220 <USB_DevInit+0x2b4>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d005      	beq.n	800c1fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	f043 0208 	orr.w	r2, r3, #8
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c200:	2b01      	cmp	r3, #1
 800c202:	d105      	bne.n	800c210 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	699a      	ldr	r2, [r3, #24]
 800c208:	4b06      	ldr	r3, [pc, #24]	; (800c224 <USB_DevInit+0x2b8>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c210:	7dfb      	ldrb	r3, [r7, #23]
}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c21c:	b004      	add	sp, #16
 800c21e:	4770      	bx	lr
 800c220:	803c3800 	.word	0x803c3800
 800c224:	40000004 	.word	0x40000004

0800c228 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c232:	2300      	movs	r3, #0
 800c234:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	019b      	lsls	r3, r3, #6
 800c23a:	f043 0220 	orr.w	r2, r3, #32
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	3301      	adds	r3, #1
 800c246:	60fb      	str	r3, [r7, #12]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	4a09      	ldr	r2, [pc, #36]	; (800c270 <USB_FlushTxFifo+0x48>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d901      	bls.n	800c254 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c250:	2303      	movs	r3, #3
 800c252:	e006      	b.n	800c262 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	f003 0320 	and.w	r3, r3, #32
 800c25c:	2b20      	cmp	r3, #32
 800c25e:	d0f0      	beq.n	800c242 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	00030d40 	.word	0x00030d40

0800c274 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2210      	movs	r2, #16
 800c284:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	3301      	adds	r3, #1
 800c28a:	60fb      	str	r3, [r7, #12]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4a09      	ldr	r2, [pc, #36]	; (800c2b4 <USB_FlushRxFifo+0x40>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d901      	bls.n	800c298 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c294:	2303      	movs	r3, #3
 800c296:	e006      	b.n	800c2a6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	f003 0310 	and.w	r3, r3, #16
 800c2a0:	2b10      	cmp	r3, #16
 800c2a2:	d0f0      	beq.n	800c286 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	00030d40 	.word	0x00030d40

0800c2b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	68f9      	ldr	r1, [r7, #12]
 800c2d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b087      	sub	sp, #28
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	f003 0306 	and.w	r3, r3, #6
 800c302:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d102      	bne.n	800c310 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c30a:	2300      	movs	r3, #0
 800c30c:	75fb      	strb	r3, [r7, #23]
 800c30e:	e00a      	b.n	800c326 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2b02      	cmp	r3, #2
 800c314:	d002      	beq.n	800c31c <USB_GetDevSpeed+0x32>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2b06      	cmp	r3, #6
 800c31a:	d102      	bne.n	800c322 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c31c:	2302      	movs	r3, #2
 800c31e:	75fb      	strb	r3, [r7, #23]
 800c320:	e001      	b.n	800c326 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c322:	230f      	movs	r3, #15
 800c324:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c326:	7dfb      	ldrb	r3, [r7, #23]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	371c      	adds	r7, #28
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	785b      	ldrb	r3, [r3, #1]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d139      	bne.n	800c3c4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c356:	69da      	ldr	r2, [r3, #28]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	f003 030f 	and.w	r3, r3, #15
 800c360:	2101      	movs	r1, #1
 800c362:	fa01 f303 	lsl.w	r3, r1, r3
 800c366:	b29b      	uxth	r3, r3
 800c368:	68f9      	ldr	r1, [r7, #12]
 800c36a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c36e:	4313      	orrs	r3, r2
 800c370:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	015a      	lsls	r2, r3, #5
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	4413      	add	r3, r2
 800c37a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c384:	2b00      	cmp	r3, #0
 800c386:	d153      	bne.n	800c430 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	015a      	lsls	r2, r3, #5
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	4413      	add	r3, r2
 800c390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	78db      	ldrb	r3, [r3, #3]
 800c3a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c3a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	059b      	lsls	r3, r3, #22
 800c3aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c3ac:	431a      	orrs	r2, r3
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	0159      	lsls	r1, r3, #5
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	440b      	add	r3, r1
 800c3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4b20      	ldr	r3, [pc, #128]	; (800c440 <USB_ActivateEndpoint+0x10c>)
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	600b      	str	r3, [r1, #0]
 800c3c2:	e035      	b.n	800c430 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ca:	69da      	ldr	r2, [r3, #28]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	f003 030f 	and.w	r3, r3, #15
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c3da:	041b      	lsls	r3, r3, #16
 800c3dc:	68f9      	ldr	r1, [r7, #12]
 800c3de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	015a      	lsls	r2, r3, #5
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d119      	bne.n	800c430 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	015a      	lsls	r2, r3, #5
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	4413      	add	r3, r2
 800c404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	78db      	ldrb	r3, [r3, #3]
 800c416:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c418:	430b      	orrs	r3, r1
 800c41a:	431a      	orrs	r2, r3
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	0159      	lsls	r1, r3, #5
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	440b      	add	r3, r1
 800c424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c428:	4619      	mov	r1, r3
 800c42a:	4b05      	ldr	r3, [pc, #20]	; (800c440 <USB_ActivateEndpoint+0x10c>)
 800c42c:	4313      	orrs	r3, r2
 800c42e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3714      	adds	r7, #20
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	10008000 	.word	0x10008000

0800c444 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	785b      	ldrb	r3, [r3, #1]
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d135      	bne.n	800c4cc <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	f003 030f 	and.w	r3, r3, #15
 800c470:	2101      	movs	r1, #1
 800c472:	fa01 f303 	lsl.w	r3, r1, r3
 800c476:	b29b      	uxth	r3, r3
 800c478:	43db      	mvns	r3, r3
 800c47a:	68f9      	ldr	r1, [r7, #12]
 800c47c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c480:	4013      	ands	r3, r2
 800c482:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c48a:	69da      	ldr	r2, [r3, #28]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	f003 030f 	and.w	r3, r3, #15
 800c494:	2101      	movs	r1, #1
 800c496:	fa01 f303 	lsl.w	r3, r1, r3
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	43db      	mvns	r3, r3
 800c49e:	68f9      	ldr	r1, [r7, #12]
 800c4a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	015a      	lsls	r2, r3, #5
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	0159      	lsls	r1, r3, #5
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	440b      	add	r3, r1
 800c4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4b1f      	ldr	r3, [pc, #124]	; (800c544 <USB_DeactivateEndpoint+0x100>)
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	600b      	str	r3, [r1, #0]
 800c4ca:	e034      	b.n	800c536 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	f003 030f 	and.w	r3, r3, #15
 800c4dc:	2101      	movs	r1, #1
 800c4de:	fa01 f303 	lsl.w	r3, r1, r3
 800c4e2:	041b      	lsls	r3, r3, #16
 800c4e4:	43db      	mvns	r3, r3
 800c4e6:	68f9      	ldr	r1, [r7, #12]
 800c4e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4f6:	69da      	ldr	r2, [r3, #28]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	f003 030f 	and.w	r3, r3, #15
 800c500:	2101      	movs	r1, #1
 800c502:	fa01 f303 	lsl.w	r3, r1, r3
 800c506:	041b      	lsls	r3, r3, #16
 800c508:	43db      	mvns	r3, r3
 800c50a:	68f9      	ldr	r1, [r7, #12]
 800c50c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c510:	4013      	ands	r3, r2
 800c512:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	015a      	lsls	r2, r3, #5
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	4413      	add	r3, r2
 800c51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	0159      	lsls	r1, r3, #5
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	440b      	add	r3, r1
 800c52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c52e:	4619      	mov	r1, r3
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <USB_DeactivateEndpoint+0x104>)
 800c532:	4013      	ands	r3, r2
 800c534:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	ec337800 	.word	0xec337800
 800c548:	eff37800 	.word	0xeff37800

0800c54c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08a      	sub	sp, #40	; 0x28
 800c550:	af02      	add	r7, sp, #8
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4613      	mov	r3, r2
 800c558:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	785b      	ldrb	r3, [r3, #1]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	f040 8163 	bne.w	800c834 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d132      	bne.n	800c5dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	015a      	lsls	r2, r3, #5
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	4413      	add	r3, r2
 800c57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c582:	691a      	ldr	r2, [r3, #16]
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	0159      	lsls	r1, r3, #5
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	440b      	add	r3, r1
 800c58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c590:	4619      	mov	r1, r3
 800c592:	4ba5      	ldr	r3, [pc, #660]	; (800c828 <USB_EPStartXfer+0x2dc>)
 800c594:	4013      	ands	r3, r2
 800c596:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	69ba      	ldr	r2, [r7, #24]
 800c5a8:	0151      	lsls	r1, r2, #5
 800c5aa:	69fa      	ldr	r2, [r7, #28]
 800c5ac:	440a      	add	r2, r1
 800c5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	015a      	lsls	r2, r3, #5
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	4413      	add	r3, r2
 800c5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c4:	691a      	ldr	r2, [r3, #16]
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	0159      	lsls	r1, r3, #5
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	440b      	add	r3, r1
 800c5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4b95      	ldr	r3, [pc, #596]	; (800c82c <USB_EPStartXfer+0x2e0>)
 800c5d6:	4013      	ands	r3, r2
 800c5d8:	610b      	str	r3, [r1, #16]
 800c5da:	e074      	b.n	800c6c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e8:	691a      	ldr	r2, [r3, #16]
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	0159      	lsls	r1, r3, #5
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	440b      	add	r3, r1
 800c5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4b8c      	ldr	r3, [pc, #560]	; (800c82c <USB_EPStartXfer+0x2e0>)
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	015a      	lsls	r2, r3, #5
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	4413      	add	r3, r2
 800c606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c60a:	691a      	ldr	r2, [r3, #16]
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	0159      	lsls	r1, r3, #5
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	440b      	add	r3, r1
 800c614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c618:	4619      	mov	r1, r3
 800c61a:	4b83      	ldr	r3, [pc, #524]	; (800c828 <USB_EPStartXfer+0x2dc>)
 800c61c:	4013      	ands	r3, r2
 800c61e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	015a      	lsls	r2, r3, #5
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	4413      	add	r3, r2
 800c628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c62c:	691a      	ldr	r2, [r3, #16]
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	6959      	ldr	r1, [r3, #20]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	440b      	add	r3, r1
 800c638:	1e59      	subs	r1, r3, #1
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c642:	04d9      	lsls	r1, r3, #19
 800c644:	4b7a      	ldr	r3, [pc, #488]	; (800c830 <USB_EPStartXfer+0x2e4>)
 800c646:	400b      	ands	r3, r1
 800c648:	69b9      	ldr	r1, [r7, #24]
 800c64a:	0148      	lsls	r0, r1, #5
 800c64c:	69f9      	ldr	r1, [r7, #28]
 800c64e:	4401      	add	r1, r0
 800c650:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c654:	4313      	orrs	r3, r2
 800c656:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	015a      	lsls	r2, r3, #5
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	4413      	add	r3, r2
 800c660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c664:	691a      	ldr	r2, [r3, #16]
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	695b      	ldr	r3, [r3, #20]
 800c66a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c66e:	69b9      	ldr	r1, [r7, #24]
 800c670:	0148      	lsls	r0, r1, #5
 800c672:	69f9      	ldr	r1, [r7, #28]
 800c674:	4401      	add	r1, r0
 800c676:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c67a:	4313      	orrs	r3, r2
 800c67c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	78db      	ldrb	r3, [r3, #3]
 800c682:	2b01      	cmp	r3, #1
 800c684:	d11f      	bne.n	800c6c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	69ba      	ldr	r2, [r7, #24]
 800c696:	0151      	lsls	r1, r2, #5
 800c698:	69fa      	ldr	r2, [r7, #28]
 800c69a:	440a      	add	r2, r1
 800c69c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c6a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	015a      	lsls	r2, r3, #5
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b2:	691b      	ldr	r3, [r3, #16]
 800c6b4:	69ba      	ldr	r2, [r7, #24]
 800c6b6:	0151      	lsls	r1, r2, #5
 800c6b8:	69fa      	ldr	r2, [r7, #28]
 800c6ba:	440a      	add	r2, r1
 800c6bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c6c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c6c6:	79fb      	ldrb	r3, [r7, #7]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d14b      	bne.n	800c764 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d009      	beq.n	800c6e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	015a      	lsls	r2, r3, #5
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	4413      	add	r3, r2
 800c6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	78db      	ldrb	r3, [r3, #3]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d128      	bne.n	800c742 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d110      	bne.n	800c722 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	015a      	lsls	r2, r3, #5
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	4413      	add	r3, r2
 800c708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	69ba      	ldr	r2, [r7, #24]
 800c710:	0151      	lsls	r1, r2, #5
 800c712:	69fa      	ldr	r2, [r7, #28]
 800c714:	440a      	add	r2, r1
 800c716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c71a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	e00f      	b.n	800c742 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	015a      	lsls	r2, r3, #5
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	4413      	add	r3, r2
 800c72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	69ba      	ldr	r2, [r7, #24]
 800c732:	0151      	lsls	r1, r2, #5
 800c734:	69fa      	ldr	r2, [r7, #28]
 800c736:	440a      	add	r2, r1
 800c738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c73c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c740:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	015a      	lsls	r2, r3, #5
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	4413      	add	r3, r2
 800c74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	69ba      	ldr	r2, [r7, #24]
 800c752:	0151      	lsls	r1, r2, #5
 800c754:	69fa      	ldr	r2, [r7, #28]
 800c756:	440a      	add	r2, r1
 800c758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c75c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c760:	6013      	str	r3, [r2, #0]
 800c762:	e133      	b.n	800c9cc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	015a      	lsls	r2, r3, #5
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	4413      	add	r3, r2
 800c76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	69ba      	ldr	r2, [r7, #24]
 800c774:	0151      	lsls	r1, r2, #5
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	440a      	add	r2, r1
 800c77a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c77e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c782:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	78db      	ldrb	r3, [r3, #3]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d015      	beq.n	800c7b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 811b 	beq.w	800c9cc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c79c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	f003 030f 	and.w	r3, r3, #15
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c7ac:	69f9      	ldr	r1, [r7, #28]
 800c7ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	634b      	str	r3, [r1, #52]	; 0x34
 800c7b6:	e109      	b.n	800c9cc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d110      	bne.n	800c7ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	015a      	lsls	r2, r3, #5
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	69ba      	ldr	r2, [r7, #24]
 800c7d8:	0151      	lsls	r1, r2, #5
 800c7da:	69fa      	ldr	r2, [r7, #28]
 800c7dc:	440a      	add	r2, r1
 800c7de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7e6:	6013      	str	r3, [r2, #0]
 800c7e8:	e00f      	b.n	800c80a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	015a      	lsls	r2, r3, #5
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	69ba      	ldr	r2, [r7, #24]
 800c7fa:	0151      	lsls	r1, r2, #5
 800c7fc:	69fa      	ldr	r2, [r7, #28]
 800c7fe:	440a      	add	r2, r1
 800c800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c808:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	68d9      	ldr	r1, [r3, #12]
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	781a      	ldrb	r2, [r3, #0]
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	b298      	uxth	r0, r3
 800c818:	79fb      	ldrb	r3, [r7, #7]
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	4603      	mov	r3, r0
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f000 fa38 	bl	800cc94 <USB_WritePacket>
 800c824:	e0d2      	b.n	800c9cc <USB_EPStartXfer+0x480>
 800c826:	bf00      	nop
 800c828:	e007ffff 	.word	0xe007ffff
 800c82c:	fff80000 	.word	0xfff80000
 800c830:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c840:	691a      	ldr	r2, [r3, #16]
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	0159      	lsls	r1, r3, #5
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	440b      	add	r3, r1
 800c84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c84e:	4619      	mov	r1, r3
 800c850:	4b61      	ldr	r3, [pc, #388]	; (800c9d8 <USB_EPStartXfer+0x48c>)
 800c852:	4013      	ands	r3, r2
 800c854:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	015a      	lsls	r2, r3, #5
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	4413      	add	r3, r2
 800c85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c862:	691a      	ldr	r2, [r3, #16]
 800c864:	69bb      	ldr	r3, [r7, #24]
 800c866:	0159      	lsls	r1, r3, #5
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	440b      	add	r3, r1
 800c86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c870:	4619      	mov	r1, r3
 800c872:	4b5a      	ldr	r3, [pc, #360]	; (800c9dc <USB_EPStartXfer+0x490>)
 800c874:	4013      	ands	r3, r2
 800c876:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	695b      	ldr	r3, [r3, #20]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d123      	bne.n	800c8c8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	015a      	lsls	r2, r3, #5
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	4413      	add	r3, r2
 800c888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c88c:	691a      	ldr	r2, [r3, #16]
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c896:	69b9      	ldr	r1, [r7, #24]
 800c898:	0148      	lsls	r0, r1, #5
 800c89a:	69f9      	ldr	r1, [r7, #28]
 800c89c:	4401      	add	r1, r0
 800c89e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	015a      	lsls	r2, r3, #5
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	69ba      	ldr	r2, [r7, #24]
 800c8b6:	0151      	lsls	r1, r2, #5
 800c8b8:	69fa      	ldr	r2, [r7, #28]
 800c8ba:	440a      	add	r2, r1
 800c8bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8c4:	6113      	str	r3, [r2, #16]
 800c8c6:	e033      	b.n	800c930 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	695a      	ldr	r2, [r3, #20]
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	1e5a      	subs	r2, r3, #1
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8dc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	015a      	lsls	r2, r3, #5
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ea:	691a      	ldr	r2, [r3, #16]
 800c8ec:	8afb      	ldrh	r3, [r7, #22]
 800c8ee:	04d9      	lsls	r1, r3, #19
 800c8f0:	4b3b      	ldr	r3, [pc, #236]	; (800c9e0 <USB_EPStartXfer+0x494>)
 800c8f2:	400b      	ands	r3, r1
 800c8f4:	69b9      	ldr	r1, [r7, #24]
 800c8f6:	0148      	lsls	r0, r1, #5
 800c8f8:	69f9      	ldr	r1, [r7, #28]
 800c8fa:	4401      	add	r1, r0
 800c8fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c900:	4313      	orrs	r3, r2
 800c902:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	015a      	lsls	r2, r3, #5
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	4413      	add	r3, r2
 800c90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c910:	691a      	ldr	r2, [r3, #16]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	8af9      	ldrh	r1, [r7, #22]
 800c918:	fb01 f303 	mul.w	r3, r1, r3
 800c91c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c920:	69b9      	ldr	r1, [r7, #24]
 800c922:	0148      	lsls	r0, r1, #5
 800c924:	69f9      	ldr	r1, [r7, #28]
 800c926:	4401      	add	r1, r0
 800c928:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c92c:	4313      	orrs	r3, r2
 800c92e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c930:	79fb      	ldrb	r3, [r7, #7]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d10d      	bne.n	800c952 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d009      	beq.n	800c952 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	68d9      	ldr	r1, [r3, #12]
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	015a      	lsls	r2, r3, #5
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	4413      	add	r3, r2
 800c94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c94e:	460a      	mov	r2, r1
 800c950:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	78db      	ldrb	r3, [r3, #3]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d128      	bne.n	800c9ac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c966:	2b00      	cmp	r3, #0
 800c968:	d110      	bne.n	800c98c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	015a      	lsls	r2, r3, #5
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	4413      	add	r3, r2
 800c972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	69ba      	ldr	r2, [r7, #24]
 800c97a:	0151      	lsls	r1, r2, #5
 800c97c:	69fa      	ldr	r2, [r7, #28]
 800c97e:	440a      	add	r2, r1
 800c980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c988:	6013      	str	r3, [r2, #0]
 800c98a:	e00f      	b.n	800c9ac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	015a      	lsls	r2, r3, #5
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	4413      	add	r3, r2
 800c994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	69ba      	ldr	r2, [r7, #24]
 800c99c:	0151      	lsls	r1, r2, #5
 800c99e:	69fa      	ldr	r2, [r7, #28]
 800c9a0:	440a      	add	r2, r1
 800c9a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	015a      	lsls	r2, r3, #5
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	69ba      	ldr	r2, [r7, #24]
 800c9bc:	0151      	lsls	r1, r2, #5
 800c9be:	69fa      	ldr	r2, [r7, #28]
 800c9c0:	440a      	add	r2, r1
 800c9c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3720      	adds	r7, #32
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	fff80000 	.word	0xfff80000
 800c9dc:	e007ffff 	.word	0xe007ffff
 800c9e0:	1ff80000 	.word	0x1ff80000

0800c9e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b087      	sub	sp, #28
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	785b      	ldrb	r3, [r3, #1]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	f040 80cd 	bne.w	800cba0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	695b      	ldr	r3, [r3, #20]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d132      	bne.n	800ca74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	015a      	lsls	r2, r3, #5
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	4413      	add	r3, r2
 800ca16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca1a:	691a      	ldr	r2, [r3, #16]
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	0159      	lsls	r1, r3, #5
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	440b      	add	r3, r1
 800ca24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca28:	4619      	mov	r1, r3
 800ca2a:	4b98      	ldr	r3, [pc, #608]	; (800cc8c <USB_EP0StartXfer+0x2a8>)
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	015a      	lsls	r2, r3, #5
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	4413      	add	r3, r2
 800ca38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	0151      	lsls	r1, r2, #5
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	440a      	add	r2, r1
 800ca46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	015a      	lsls	r2, r3, #5
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	4413      	add	r3, r2
 800ca58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca5c:	691a      	ldr	r2, [r3, #16]
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	0159      	lsls	r1, r3, #5
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	440b      	add	r3, r1
 800ca66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	4b88      	ldr	r3, [pc, #544]	; (800cc90 <USB_EP0StartXfer+0x2ac>)
 800ca6e:	4013      	ands	r3, r2
 800ca70:	610b      	str	r3, [r1, #16]
 800ca72:	e04e      	b.n	800cb12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	015a      	lsls	r2, r3, #5
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca80:	691a      	ldr	r2, [r3, #16]
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	0159      	lsls	r1, r3, #5
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	440b      	add	r3, r1
 800ca8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca8e:	4619      	mov	r1, r3
 800ca90:	4b7f      	ldr	r3, [pc, #508]	; (800cc90 <USB_EP0StartXfer+0x2ac>)
 800ca92:	4013      	ands	r3, r2
 800ca94:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	015a      	lsls	r2, r3, #5
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caa2:	691a      	ldr	r2, [r3, #16]
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	0159      	lsls	r1, r3, #5
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	440b      	add	r3, r1
 800caac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab0:	4619      	mov	r1, r3
 800cab2:	4b76      	ldr	r3, [pc, #472]	; (800cc8c <USB_EP0StartXfer+0x2a8>)
 800cab4:	4013      	ands	r3, r2
 800cab6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	695a      	ldr	r2, [r3, #20]
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d903      	bls.n	800cacc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	689a      	ldr	r2, [r3, #8]
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	015a      	lsls	r2, r3, #5
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	4413      	add	r3, r2
 800cad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	0151      	lsls	r1, r2, #5
 800cade:	697a      	ldr	r2, [r7, #20]
 800cae0:	440a      	add	r2, r1
 800cae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800caea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	015a      	lsls	r2, r3, #5
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf8:	691a      	ldr	r2, [r3, #16]
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb02:	6939      	ldr	r1, [r7, #16]
 800cb04:	0148      	lsls	r0, r1, #5
 800cb06:	6979      	ldr	r1, [r7, #20]
 800cb08:	4401      	add	r1, r0
 800cb0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cb12:	79fb      	ldrb	r3, [r7, #7]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d11e      	bne.n	800cb56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d009      	beq.n	800cb34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	015a      	lsls	r2, r3, #5
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	4413      	add	r3, r2
 800cb28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	693a      	ldr	r2, [r7, #16]
 800cb44:	0151      	lsls	r1, r2, #5
 800cb46:	697a      	ldr	r2, [r7, #20]
 800cb48:	440a      	add	r2, r1
 800cb4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb52:	6013      	str	r3, [r2, #0]
 800cb54:	e092      	b.n	800cc7c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	015a      	lsls	r2, r3, #5
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	0151      	lsls	r1, r2, #5
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	440a      	add	r2, r1
 800cb6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	695b      	ldr	r3, [r3, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d07e      	beq.n	800cc7c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	f003 030f 	and.w	r3, r3, #15
 800cb8e:	2101      	movs	r1, #1
 800cb90:	fa01 f303 	lsl.w	r3, r1, r3
 800cb94:	6979      	ldr	r1, [r7, #20]
 800cb96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	634b      	str	r3, [r1, #52]	; 0x34
 800cb9e:	e06d      	b.n	800cc7c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	015a      	lsls	r2, r3, #5
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbac:	691a      	ldr	r2, [r3, #16]
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	0159      	lsls	r1, r3, #5
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	440b      	add	r3, r1
 800cbb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbba:	4619      	mov	r1, r3
 800cbbc:	4b34      	ldr	r3, [pc, #208]	; (800cc90 <USB_EP0StartXfer+0x2ac>)
 800cbbe:	4013      	ands	r3, r2
 800cbc0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	015a      	lsls	r2, r3, #5
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	4413      	add	r3, r2
 800cbca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbce:	691a      	ldr	r2, [r3, #16]
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	0159      	lsls	r1, r3, #5
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	440b      	add	r3, r1
 800cbd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4b2b      	ldr	r3, [pc, #172]	; (800cc8c <USB_EP0StartXfer+0x2a8>)
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	695b      	ldr	r3, [r3, #20]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d003      	beq.n	800cbf4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	689a      	ldr	r2, [r3, #8]
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	015a      	lsls	r2, r3, #5
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	693a      	ldr	r2, [r7, #16]
 800cc04:	0151      	lsls	r1, r2, #5
 800cc06:	697a      	ldr	r2, [r7, #20]
 800cc08:	440a      	add	r2, r1
 800cc0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	015a      	lsls	r2, r3, #5
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc20:	691a      	ldr	r2, [r3, #16]
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc2a:	6939      	ldr	r1, [r7, #16]
 800cc2c:	0148      	lsls	r0, r1, #5
 800cc2e:	6979      	ldr	r1, [r7, #20]
 800cc30:	4401      	add	r1, r0
 800cc32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc36:	4313      	orrs	r3, r2
 800cc38:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d10d      	bne.n	800cc5c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d009      	beq.n	800cc5c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	68d9      	ldr	r1, [r3, #12]
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc58:	460a      	mov	r2, r1
 800cc5a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	015a      	lsls	r2, r3, #5
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	4413      	add	r3, r2
 800cc64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	693a      	ldr	r2, [r7, #16]
 800cc6c:	0151      	lsls	r1, r2, #5
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	440a      	add	r2, r1
 800cc72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	371c      	adds	r7, #28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	e007ffff 	.word	0xe007ffff
 800cc90:	fff80000 	.word	0xfff80000

0800cc94 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b089      	sub	sp, #36	; 0x24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	4611      	mov	r1, r2
 800cca0:	461a      	mov	r2, r3
 800cca2:	460b      	mov	r3, r1
 800cca4:	71fb      	strb	r3, [r7, #7]
 800cca6:	4613      	mov	r3, r2
 800cca8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ccb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d11a      	bne.n	800ccf0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ccba:	88bb      	ldrh	r3, [r7, #4]
 800ccbc:	3303      	adds	r3, #3
 800ccbe:	089b      	lsrs	r3, r3, #2
 800ccc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	61bb      	str	r3, [r7, #24]
 800ccc6:	e00f      	b.n	800cce8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ccc8:	79fb      	ldrb	r3, [r7, #7]
 800ccca:	031a      	lsls	r2, r3, #12
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	4413      	add	r3, r2
 800ccd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	3304      	adds	r3, #4
 800cce0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	3301      	adds	r3, #1
 800cce6:	61bb      	str	r3, [r7, #24]
 800cce8:	69ba      	ldr	r2, [r7, #24]
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d3eb      	bcc.n	800ccc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ccf0:	2300      	movs	r3, #0
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3724      	adds	r7, #36	; 0x24
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b089      	sub	sp, #36	; 0x24
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	60f8      	str	r0, [r7, #12]
 800cd06:	60b9      	str	r1, [r7, #8]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cd14:	88fb      	ldrh	r3, [r7, #6]
 800cd16:	3303      	adds	r3, #3
 800cd18:	089b      	lsrs	r3, r3, #2
 800cd1a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	61bb      	str	r3, [r7, #24]
 800cd20:	e00b      	b.n	800cd3a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	3304      	adds	r3, #4
 800cd32:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	3301      	adds	r3, #1
 800cd38:	61bb      	str	r3, [r7, #24]
 800cd3a:	69ba      	ldr	r2, [r7, #24]
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d3ef      	bcc.n	800cd22 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cd42:	69fb      	ldr	r3, [r7, #28]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3724      	adds	r7, #36	; 0x24
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	785b      	ldrb	r3, [r3, #1]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d12c      	bne.n	800cdc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	015a      	lsls	r2, r3, #5
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	4413      	add	r3, r2
 800cd74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	db12      	blt.n	800cda4 <USB_EPSetStall+0x54>
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00f      	beq.n	800cda4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	015a      	lsls	r2, r3, #5
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	0151      	lsls	r1, r2, #5
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	440a      	add	r2, r1
 800cd9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cda2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	015a      	lsls	r2, r3, #5
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	4413      	add	r3, r2
 800cdac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	0151      	lsls	r1, r2, #5
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	440a      	add	r2, r1
 800cdba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdc2:	6013      	str	r3, [r2, #0]
 800cdc4:	e02b      	b.n	800ce1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	015a      	lsls	r2, r3, #5
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	4413      	add	r3, r2
 800cdce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	db12      	blt.n	800cdfe <USB_EPSetStall+0xae>
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00f      	beq.n	800cdfe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	015a      	lsls	r2, r3, #5
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	4413      	add	r3, r2
 800cde6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	0151      	lsls	r1, r2, #5
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	440a      	add	r2, r1
 800cdf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdfc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	015a      	lsls	r2, r3, #5
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	4413      	add	r3, r2
 800ce06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	0151      	lsls	r1, r2, #5
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	440a      	add	r2, r1
 800ce14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	785b      	ldrb	r3, [r3, #1]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d128      	bne.n	800ce9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	015a      	lsls	r2, r3, #5
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4413      	add	r3, r2
 800ce50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68ba      	ldr	r2, [r7, #8]
 800ce58:	0151      	lsls	r1, r2, #5
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	440a      	add	r2, r1
 800ce5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	78db      	ldrb	r3, [r3, #3]
 800ce6c:	2b03      	cmp	r3, #3
 800ce6e:	d003      	beq.n	800ce78 <USB_EPClearStall+0x4c>
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	78db      	ldrb	r3, [r3, #3]
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d138      	bne.n	800ceea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	015a      	lsls	r2, r3, #5
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	4413      	add	r3, r2
 800ce80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	0151      	lsls	r1, r2, #5
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	440a      	add	r2, r1
 800ce8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce96:	6013      	str	r3, [r2, #0]
 800ce98:	e027      	b.n	800ceea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	015a      	lsls	r2, r3, #5
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	4413      	add	r3, r2
 800cea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	0151      	lsls	r1, r2, #5
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	440a      	add	r2, r1
 800ceb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ceb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	78db      	ldrb	r3, [r3, #3]
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d003      	beq.n	800ceca <USB_EPClearStall+0x9e>
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	78db      	ldrb	r3, [r3, #3]
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	d10f      	bne.n	800ceea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	015a      	lsls	r2, r3, #5
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	4413      	add	r3, r2
 800ced2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	0151      	lsls	r1, r2, #5
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	440a      	add	r2, r1
 800cee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cee8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3714      	adds	r7, #20
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800cf04:	2300      	movs	r3, #0
 800cf06:	617b      	str	r3, [r7, #20]
 800cf08:	e016      	b.n	800cf38 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	015a      	lsls	r2, r3, #5
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	4413      	add	r3, r2
 800cf12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf16:	461a      	mov	r2, r3
 800cf18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf1c:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	015a      	lsls	r2, r3, #5
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	4413      	add	r3, r2
 800cf26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	3301      	adds	r3, #1
 800cf36:	617b      	str	r3, [r7, #20]
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	2b0e      	cmp	r3, #14
 800cf3c:	d9e5      	bls.n	800cf0a <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf44:	461a      	mov	r2, r3
 800cf46:	2300      	movs	r3, #0
 800cf48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf50:	461a      	mov	r2, r3
 800cf52:	2300      	movs	r3, #0
 800cf54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	2300      	movs	r3, #0
 800cf60:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7ff f986 	bl	800c274 <USB_FlushRxFifo>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <USB_StopDevice+0x7e>
  {
    return ret;
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
 800cf74:	e00b      	b.n	800cf8e <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800cf76:	2110      	movs	r1, #16
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7ff f955 	bl	800c228 <USB_FlushTxFifo>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800cf82:	7bfb      	ldrb	r3, [r7, #15]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <USB_StopDevice+0x94>
  {
    return ret;
 800cf88:	7bfb      	ldrb	r3, [r7, #15]
 800cf8a:	e000      	b.n	800cf8e <USB_StopDevice+0x96>
  }

  return ret;
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3718      	adds	r7, #24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cf96:	b480      	push	{r7}
 800cf98:	b085      	sub	sp, #20
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfb4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cfb8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	78fb      	ldrb	r3, [r7, #3]
 800cfc4:	011b      	lsls	r3, r3, #4
 800cfc6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cfca:	68f9      	ldr	r1, [r7, #12]
 800cfcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b084      	sub	sp, #16
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cffc:	f023 0302 	bic.w	r3, r3, #2
 800d000:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d002:	2003      	movs	r0, #3
 800d004:	f7f4 fac6 	bl	8001594 <HAL_Delay>

  return HAL_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b084      	sub	sp, #16
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d02c:	f043 0302 	orr.w	r3, r3, #2
 800d030:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d032:	2003      	movs	r0, #3
 800d034:	f7f4 faae 	bl	8001594 <HAL_Delay>

  return HAL_OK;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d042:	b480      	push	{r7}
 800d044:	b085      	sub	sp, #20
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	4013      	ands	r3, r2
 800d058:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d05a:	68fb      	ldr	r3, [r7, #12]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d084:	69db      	ldr	r3, [r3, #28]
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	4013      	ands	r3, r2
 800d08a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	0c1b      	lsrs	r3, r3, #16
}
 800d090:	4618      	mov	r0, r3
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ae:	699b      	ldr	r3, [r3, #24]
 800d0b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0b8:	69db      	ldr	r3, [r3, #28]
 800d0ba:	68ba      	ldr	r2, [r7, #8]
 800d0bc:	4013      	ands	r3, r2
 800d0be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	b29b      	uxth	r3, r3
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3714      	adds	r7, #20
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d0e0:	78fb      	ldrb	r3, [r7, #3]
 800d0e2:	015a      	lsls	r2, r3, #5
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0f6:	695b      	ldr	r3, [r3, #20]
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0fe:	68bb      	ldr	r3, [r7, #8]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3714      	adds	r7, #20
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b087      	sub	sp, #28
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	460b      	mov	r3, r1
 800d116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d12e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d130:	78fb      	ldrb	r3, [r7, #3]
 800d132:	f003 030f 	and.w	r3, r3, #15
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	fa22 f303 	lsr.w	r3, r2, r3
 800d13c:	01db      	lsls	r3, r3, #7
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	4313      	orrs	r3, r2
 800d144:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d146:	78fb      	ldrb	r3, [r7, #3]
 800d148:	015a      	lsls	r2, r3, #5
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	4413      	add	r3, r2
 800d14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	693a      	ldr	r2, [r7, #16]
 800d156:	4013      	ands	r3, r2
 800d158:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d15a:	68bb      	ldr	r3, [r7, #8]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	371c      	adds	r7, #28
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	695b      	ldr	r3, [r3, #20]
 800d174:	f003 0301 	and.w	r3, r3, #1
}
 800d178:	4618      	mov	r0, r3
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d19e:	4619      	mov	r1, r3
 800d1a0:	4b09      	ldr	r3, [pc, #36]	; (800d1c8 <USB_ActivateSetup+0x44>)
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	68fa      	ldr	r2, [r7, #12]
 800d1b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d1ba:	2300      	movs	r3, #0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	fffff800 	.word	0xfffff800

0800d1cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b087      	sub	sp, #28
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	607a      	str	r2, [r7, #4]
 800d1d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	333c      	adds	r3, #60	; 0x3c
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	4a26      	ldr	r2, [pc, #152]	; (800d284 <USB_EP0_OutStart+0xb8>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d90a      	bls.n	800d206 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d200:	d101      	bne.n	800d206 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	e037      	b.n	800d276 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d20c:	461a      	mov	r2, r3
 800d20e:	2300      	movs	r3, #0
 800d210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d224:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	697a      	ldr	r2, [r7, #20]
 800d230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d234:	f043 0318 	orr.w	r3, r3, #24
 800d238:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	697a      	ldr	r2, [r7, #20]
 800d244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d248:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d24c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d24e:	7afb      	ldrb	r3, [r7, #11]
 800d250:	2b01      	cmp	r3, #1
 800d252:	d10f      	bne.n	800d274 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25a:	461a      	mov	r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	697a      	ldr	r2, [r7, #20]
 800d26a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d26e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d272:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	371c      	adds	r7, #28
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	4f54300a 	.word	0x4f54300a

0800d288 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d290:	2300      	movs	r3, #0
 800d292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	3301      	adds	r3, #1
 800d298:	60fb      	str	r3, [r7, #12]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	4a13      	ldr	r2, [pc, #76]	; (800d2ec <USB_CoreReset+0x64>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d901      	bls.n	800d2a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	e01b      	b.n	800d2de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	691b      	ldr	r3, [r3, #16]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	daf2      	bge.n	800d294 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	f043 0201 	orr.w	r2, r3, #1
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	60fb      	str	r3, [r7, #12]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	4a09      	ldr	r2, [pc, #36]	; (800d2ec <USB_CoreReset+0x64>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d901      	bls.n	800d2d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	e006      	b.n	800d2de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	f003 0301 	and.w	r3, r3, #1
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d0f0      	beq.n	800d2be <USB_CoreReset+0x36>

  return HAL_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3714      	adds	r7, #20
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	00030d40 	.word	0x00030d40

0800d2f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d2f4:	4904      	ldr	r1, [pc, #16]	; (800d308 <MX_FATFS_Init+0x18>)
 800d2f6:	4805      	ldr	r0, [pc, #20]	; (800d30c <MX_FATFS_Init+0x1c>)
 800d2f8:	f007 fb04 	bl	8014904 <FATFS_LinkDriver>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	461a      	mov	r2, r3
 800d300:	4b03      	ldr	r3, [pc, #12]	; (800d310 <MX_FATFS_Init+0x20>)
 800d302:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d304:	bf00      	nop
 800d306:	bd80      	pop	{r7, pc}
 800d308:	240056bc 	.word	0x240056bc
 800d30c:	080157dc 	.word	0x080157dc
 800d310:	240056b8 	.word	0x240056b8

0800d314 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d314:	b480      	push	{r7}
 800d316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d318:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d32e:	f000 f86b 	bl	800d408 <BSP_SD_IsDetected>
 800d332:	4603      	mov	r3, r0
 800d334:	2b01      	cmp	r3, #1
 800d336:	d001      	beq.n	800d33c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d338:	2302      	movs	r3, #2
 800d33a:	e005      	b.n	800d348 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d33c:	4804      	ldr	r0, [pc, #16]	; (800d350 <BSP_SD_Init+0x2c>)
 800d33e:	f7f9 fc87 	bl	8006c50 <HAL_SD_Init>
 800d342:	4603      	mov	r3, r0
 800d344:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d346:	79fb      	ldrb	r3, [r7, #7]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	240013f0 	.word	0x240013f0

0800d354 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b088      	sub	sp, #32
 800d358:	af02      	add	r7, sp, #8
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]
 800d360:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	9300      	str	r3, [sp, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	68ba      	ldr	r2, [r7, #8]
 800d36e:	68f9      	ldr	r1, [r7, #12]
 800d370:	4806      	ldr	r0, [pc, #24]	; (800d38c <BSP_SD_ReadBlocks+0x38>)
 800d372:	f7f9 fd8b 	bl	8006e8c <HAL_SD_ReadBlocks>
 800d376:	4603      	mov	r3, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d001      	beq.n	800d380 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d37c:	2301      	movs	r3, #1
 800d37e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800d380:	7dfb      	ldrb	r3, [r7, #23]
}
 800d382:	4618      	mov	r0, r3
 800d384:	3718      	adds	r7, #24
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	240013f0 	.word	0x240013f0

0800d390 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b088      	sub	sp, #32
 800d394:	af02      	add	r7, sp, #8
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
 800d39c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	68f9      	ldr	r1, [r7, #12]
 800d3ac:	4806      	ldr	r0, [pc, #24]	; (800d3c8 <BSP_SD_WriteBlocks+0x38>)
 800d3ae:	f7f9 fef7 	bl	80071a0 <HAL_SD_WriteBlocks>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d001      	beq.n	800d3bc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800d3bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3718      	adds	r7, #24
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	240013f0 	.word	0x240013f0

0800d3cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d3d0:	4805      	ldr	r0, [pc, #20]	; (800d3e8 <BSP_SD_GetCardState+0x1c>)
 800d3d2:	f7fa fbaf 	bl	8007b34 <HAL_SD_GetCardState>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b04      	cmp	r3, #4
 800d3da:	bf14      	ite	ne
 800d3dc:	2301      	movne	r3, #1
 800d3de:	2300      	moveq	r3, #0
 800d3e0:	b2db      	uxtb	r3, r3
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	240013f0 	.word	0x240013f0

0800d3ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d3f4:	6879      	ldr	r1, [r7, #4]
 800d3f6:	4803      	ldr	r0, [pc, #12]	; (800d404 <BSP_SD_GetCardInfo+0x18>)
 800d3f8:	f7fa fac6 	bl	8007988 <HAL_SD_GetCardInfo>
}
 800d3fc:	bf00      	nop
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	240013f0 	.word	0x240013f0

0800d408 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d40e:	2301      	movs	r3, #1
 800d410:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800d412:	f000 f80b 	bl	800d42c <BSP_PlatformIsDetected>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d101      	bne.n	800d420 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d41c:	2300      	movs	r3, #0
 800d41e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d420:	79fb      	ldrb	r3, [r7, #7]
 800d422:	b2db      	uxtb	r3, r3
}
 800d424:	4618      	mov	r0, r3
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d432:	2301      	movs	r3, #1
 800d434:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d436:	2120      	movs	r1, #32
 800d438:	4806      	ldr	r0, [pc, #24]	; (800d454 <BSP_PlatformIsDetected+0x28>)
 800d43a:	f7f4 ffc3 	bl	80023c4 <HAL_GPIO_ReadPin>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d444:	2300      	movs	r3, #0
 800d446:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800d448:	79fb      	ldrb	r3, [r7, #7]
}  
 800d44a:	4618      	mov	r0, r3
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	58021800 	.word	0x58021800

0800d458 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	4603      	mov	r3, r0
 800d460:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d462:	4b0b      	ldr	r3, [pc, #44]	; (800d490 <SD_CheckStatus+0x38>)
 800d464:	2201      	movs	r2, #1
 800d466:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d468:	f7ff ffb0 	bl	800d3cc <BSP_SD_GetCardState>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d107      	bne.n	800d482 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d472:	4b07      	ldr	r3, [pc, #28]	; (800d490 <SD_CheckStatus+0x38>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	b2db      	uxtb	r3, r3
 800d478:	f023 0301 	bic.w	r3, r3, #1
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	4b04      	ldr	r3, [pc, #16]	; (800d490 <SD_CheckStatus+0x38>)
 800d480:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d482:	4b03      	ldr	r3, [pc, #12]	; (800d490 <SD_CheckStatus+0x38>)
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	b2db      	uxtb	r3, r3
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3708      	adds	r7, #8
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	24000019 	.word	0x24000019

0800d494 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	4603      	mov	r3, r0
 800d49c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800d49e:	4b0b      	ldr	r3, [pc, #44]	; (800d4cc <SD_initialize+0x38>)
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d4a4:	f7ff ff3e 	bl	800d324 <BSP_SD_Init>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d107      	bne.n	800d4be <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d4ae:	79fb      	ldrb	r3, [r7, #7]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7ff ffd1 	bl	800d458 <SD_CheckStatus>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	4b04      	ldr	r3, [pc, #16]	; (800d4cc <SD_initialize+0x38>)
 800d4bc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d4be:	4b03      	ldr	r3, [pc, #12]	; (800d4cc <SD_initialize+0x38>)
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	b2db      	uxtb	r3, r3
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	24000019 	.word	0x24000019

0800d4d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d4da:	79fb      	ldrb	r3, [r7, #7]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7ff ffbb 	bl	800d458 <SD_CheckStatus>
 800d4e2:	4603      	mov	r3, r0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60b9      	str	r1, [r7, #8]
 800d4f4:	607a      	str	r2, [r7, #4]
 800d4f6:	603b      	str	r3, [r7, #0]
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d500:	f04f 33ff 	mov.w	r3, #4294967295
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	68b8      	ldr	r0, [r7, #8]
 800d50a:	f7ff ff23 	bl	800d354 <BSP_SD_ReadBlocks>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d107      	bne.n	800d524 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d514:	bf00      	nop
 800d516:	f7ff ff59 	bl	800d3cc <BSP_SD_GetCardState>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d1fa      	bne.n	800d516 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d520:	2300      	movs	r3, #0
 800d522:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d524:	7dfb      	ldrb	r3, [r7, #23]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3718      	adds	r7, #24
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d52e:	b580      	push	{r7, lr}
 800d530:	b086      	sub	sp, #24
 800d532:	af00      	add	r7, sp, #0
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	603b      	str	r3, [r7, #0]
 800d53a:	4603      	mov	r3, r0
 800d53c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d53e:	2301      	movs	r3, #1
 800d540:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d542:	f04f 33ff 	mov.w	r3, #4294967295
 800d546:	683a      	ldr	r2, [r7, #0]
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	68b8      	ldr	r0, [r7, #8]
 800d54c:	f7ff ff20 	bl	800d390 <BSP_SD_WriteBlocks>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d107      	bne.n	800d566 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d556:	bf00      	nop
 800d558:	f7ff ff38 	bl	800d3cc <BSP_SD_GetCardState>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1fa      	bne.n	800d558 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d562:	2300      	movs	r3, #0
 800d564:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d566:	7dfb      	ldrb	r3, [r7, #23]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3718      	adds	r7, #24
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b08c      	sub	sp, #48	; 0x30
 800d574:	af00      	add	r7, sp, #0
 800d576:	4603      	mov	r3, r0
 800d578:	603a      	str	r2, [r7, #0]
 800d57a:	71fb      	strb	r3, [r7, #7]
 800d57c:	460b      	mov	r3, r1
 800d57e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d586:	4b25      	ldr	r3, [pc, #148]	; (800d61c <SD_ioctl+0xac>)
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	f003 0301 	and.w	r3, r3, #1
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <SD_ioctl+0x28>
 800d594:	2303      	movs	r3, #3
 800d596:	e03c      	b.n	800d612 <SD_ioctl+0xa2>

  switch (cmd)
 800d598:	79bb      	ldrb	r3, [r7, #6]
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	d834      	bhi.n	800d608 <SD_ioctl+0x98>
 800d59e:	a201      	add	r2, pc, #4	; (adr r2, 800d5a4 <SD_ioctl+0x34>)
 800d5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a4:	0800d5b5 	.word	0x0800d5b5
 800d5a8:	0800d5bd 	.word	0x0800d5bd
 800d5ac:	0800d5d5 	.word	0x0800d5d5
 800d5b0:	0800d5ef 	.word	0x0800d5ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5ba:	e028      	b.n	800d60e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5bc:	f107 0308 	add.w	r3, r7, #8
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7ff ff13 	bl	800d3ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d5c6:	6a3a      	ldr	r2, [r7, #32]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5d2:	e01c      	b.n	800d60e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5d4:	f107 0308 	add.w	r3, r7, #8
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff ff07 	bl	800d3ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5ec:	e00f      	b.n	800d60e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5ee:	f107 0308 	add.w	r3, r7, #8
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7ff fefa 	bl	800d3ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fa:	0a5a      	lsrs	r2, r3, #9
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d600:	2300      	movs	r3, #0
 800d602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d606:	e002      	b.n	800d60e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d608:	2304      	movs	r3, #4
 800d60a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d60e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d612:	4618      	mov	r0, r3
 800d614:	3730      	adds	r7, #48	; 0x30
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	24000019 	.word	0x24000019

0800d620 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	460b      	mov	r3, r1
 800d62a:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	7c1b      	ldrb	r3, [r3, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d115      	bne.n	800d660 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d634:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d638:	2202      	movs	r2, #2
 800d63a:	2101      	movs	r1, #1
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f007 fde3 	bl	8015208 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2201      	movs	r2, #1
 800d646:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d64a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d64e:	2202      	movs	r2, #2
 800d650:	2181      	movs	r1, #129	; 0x81
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f007 fdd8 	bl	8015208 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	62da      	str	r2, [r3, #44]	; 0x2c
 800d65e:	e012      	b.n	800d686 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d660:	2340      	movs	r3, #64	; 0x40
 800d662:	2202      	movs	r2, #2
 800d664:	2101      	movs	r1, #1
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f007 fdce 	bl	8015208 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2201      	movs	r2, #1
 800d670:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d674:	2340      	movs	r3, #64	; 0x40
 800d676:	2202      	movs	r2, #2
 800d678:	2181      	movs	r1, #129	; 0x81
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f007 fdc4 	bl	8015208 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2201      	movs	r2, #1
 800d684:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d686:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800d68a:	f007 ff59 	bl	8015540 <malloc>
 800d68e:	4603      	mov	r3, r0
 800d690:	461a      	mov	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <USBD_MSC_Init+0x86>
  {
    return USBD_FAIL;
 800d6a2:	2302      	movs	r3, #2
 800d6a4:	e003      	b.n	800d6ae <USBD_MSC_Init+0x8e>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f9db 	bl	800da62 <MSC_BOT_Init>

  return USBD_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	460b      	mov	r3, r1
 800d6c0:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800d6c2:	2101      	movs	r1, #1
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f007 fdc5 	bl	8015254 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800d6d2:	2181      	movs	r1, #129	; 0x81
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f007 fdbd 	bl	8015254 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 fa08 	bl	800daf6 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d009      	beq.n	800d704 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f007 ff2a 	bl	8015550 <free>
    pdev->pClassData  = NULL;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800d704:	2300      	movs	r3, #0
}
 800d706:	4618      	mov	r0, r3
 800d708:	3708      	adds	r7, #8
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
	...

0800d710 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d720:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800d722:	2300      	movs	r3, #0
 800d724:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d726:	2300      	movs	r3, #0
 800d728:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d732:	2b00      	cmp	r3, #0
 800d734:	d04d      	beq.n	800d7d2 <USBD_MSC_Setup+0xc2>
 800d736:	2b20      	cmp	r3, #32
 800d738:	f040 8113 	bne.w	800d962 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	785b      	ldrb	r3, [r3, #1]
 800d740:	2bfe      	cmp	r3, #254	; 0xfe
 800d742:	d002      	beq.n	800d74a <USBD_MSC_Setup+0x3a>
 800d744:	2bff      	cmp	r3, #255	; 0xff
 800d746:	d024      	beq.n	800d792 <USBD_MSC_Setup+0x82>
 800d748:	e03b      	b.n	800d7c2 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	885b      	ldrh	r3, [r3, #2]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d118      	bne.n	800d784 <USBD_MSC_Setup+0x74>
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	88db      	ldrh	r3, [r3, #6]
 800d756:	2b01      	cmp	r3, #1
 800d758:	d114      	bne.n	800d784 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d760:	2b00      	cmp	r3, #0
 800d762:	da0f      	bge.n	800d784 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	4798      	blx	r3
 800d76e:	4603      	mov	r3, r0
 800d770:	461a      	mov	r2, r3
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	2201      	movs	r2, #1
 800d77a:	4619      	mov	r1, r3
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f002 f9e3 	bl	800fb48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d782:	e025      	b.n	800d7d0 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800d784:	6839      	ldr	r1, [r7, #0]
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f002 f973 	bl	800fa72 <USBD_CtlError>
            ret = USBD_FAIL;
 800d78c:	2302      	movs	r3, #2
 800d78e:	75fb      	strb	r3, [r7, #23]
          break;
 800d790:	e01e      	b.n	800d7d0 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	885b      	ldrh	r3, [r3, #2]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10c      	bne.n	800d7b4 <USBD_MSC_Setup+0xa4>
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	88db      	ldrh	r3, [r3, #6]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d108      	bne.n	800d7b4 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	db03      	blt.n	800d7b4 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f988 	bl	800dac2 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d7b2:	e00d      	b.n	800d7d0 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f002 f95b 	bl	800fa72 <USBD_CtlError>
            ret = USBD_FAIL;
 800d7bc:	2302      	movs	r3, #2
 800d7be:	75fb      	strb	r3, [r7, #23]
          break;
 800d7c0:	e006      	b.n	800d7d0 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f002 f954 	bl	800fa72 <USBD_CtlError>
          ret = USBD_FAIL;
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	75fb      	strb	r3, [r7, #23]
          break;
 800d7ce:	bf00      	nop
      }
      break;
 800d7d0:	e0ce      	b.n	800d970 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	785b      	ldrb	r3, [r3, #1]
 800d7d6:	2b0b      	cmp	r3, #11
 800d7d8:	f200 80bb 	bhi.w	800d952 <USBD_MSC_Setup+0x242>
 800d7dc:	a201      	add	r2, pc, #4	; (adr r2, 800d7e4 <USBD_MSC_Setup+0xd4>)
 800d7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e2:	bf00      	nop
 800d7e4:	0800d815 	.word	0x0800d815
 800d7e8:	0800d88b 	.word	0x0800d88b
 800d7ec:	0800d953 	.word	0x0800d953
 800d7f0:	0800d953 	.word	0x0800d953
 800d7f4:	0800d953 	.word	0x0800d953
 800d7f8:	0800d953 	.word	0x0800d953
 800d7fc:	0800d953 	.word	0x0800d953
 800d800:	0800d953 	.word	0x0800d953
 800d804:	0800d953 	.word	0x0800d953
 800d808:	0800d953 	.word	0x0800d953
 800d80c:	0800d83d 	.word	0x0800d83d
 800d810:	0800d865 	.word	0x0800d865
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d107      	bne.n	800d82e <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d81e:	f107 030e 	add.w	r3, r7, #14
 800d822:	2202      	movs	r2, #2
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f002 f98e 	bl	800fb48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d82c:	e098      	b.n	800d960 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f002 f91e 	bl	800fa72 <USBD_CtlError>
            ret = USBD_FAIL;
 800d836:	2302      	movs	r3, #2
 800d838:	75fb      	strb	r3, [r7, #23]
          break;
 800d83a:	e091      	b.n	800d960 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d842:	2b03      	cmp	r3, #3
 800d844:	d107      	bne.n	800d856 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	3304      	adds	r3, #4
 800d84a:	2201      	movs	r2, #1
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f002 f97a 	bl	800fb48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d854:	e084      	b.n	800d960 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800d856:	6839      	ldr	r1, [r7, #0]
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f002 f90a 	bl	800fa72 <USBD_CtlError>
            ret = USBD_FAIL;
 800d85e:	2302      	movs	r3, #2
 800d860:	75fb      	strb	r3, [r7, #23]
          break;
 800d862:	e07d      	b.n	800d960 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d106      	bne.n	800d87c <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	885b      	ldrh	r3, [r3, #2]
 800d872:	b2db      	uxtb	r3, r3
 800d874:	461a      	mov	r2, r3
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d87a:	e071      	b.n	800d960 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800d87c:	6839      	ldr	r1, [r7, #0]
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f002 f8f7 	bl	800fa72 <USBD_CtlError>
            ret = USBD_FAIL;
 800d884:	2302      	movs	r3, #2
 800d886:	75fb      	strb	r3, [r7, #23]
          break;
 800d888:	e06a      	b.n	800d960 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	889b      	ldrh	r3, [r3, #4]
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	4619      	mov	r1, r3
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f007 fcfd 	bl	8015292 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	889b      	ldrh	r3, [r3, #4]
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	4619      	mov	r1, r3
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f007 fcd7 	bl	8015254 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	889b      	ldrh	r3, [r3, #4]
 800d8aa:	b25b      	sxtb	r3, r3
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	da23      	bge.n	800d8f8 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	889b      	ldrh	r3, [r3, #4]
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 020f 	and.w	r2, r3, #15
 800d8ba:	6879      	ldr	r1, [r7, #4]
 800d8bc:	4613      	mov	r3, r2
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	4413      	add	r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	440b      	add	r3, r1
 800d8c6:	3318      	adds	r3, #24
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	7c1b      	ldrb	r3, [r3, #16]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d107      	bne.n	800d8e4 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800d8d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8d8:	2202      	movs	r2, #2
 800d8da:	2181      	movs	r1, #129	; 0x81
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f007 fc93 	bl	8015208 <USBD_LL_OpenEP>
 800d8e2:	e005      	b.n	800d8f0 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800d8e4:	2340      	movs	r3, #64	; 0x40
 800d8e6:	2202      	movs	r2, #2
 800d8e8:	2181      	movs	r1, #129	; 0x81
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f007 fc8c 	bl	8015208 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	62da      	str	r2, [r3, #44]	; 0x2c
 800d8f6:	e024      	b.n	800d942 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	889b      	ldrh	r3, [r3, #4]
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	f003 020f 	and.w	r2, r3, #15
 800d902:	6879      	ldr	r1, [r7, #4]
 800d904:	4613      	mov	r3, r2
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	4413      	add	r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	440b      	add	r3, r1
 800d90e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d912:	2200      	movs	r2, #0
 800d914:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	7c1b      	ldrb	r3, [r3, #16]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d107      	bne.n	800d92e <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800d91e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d922:	2202      	movs	r2, #2
 800d924:	2101      	movs	r1, #1
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f007 fc6e 	bl	8015208 <USBD_LL_OpenEP>
 800d92c:	e005      	b.n	800d93a <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800d92e:	2340      	movs	r3, #64	; 0x40
 800d930:	2202      	movs	r2, #2
 800d932:	2101      	movs	r1, #1
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f007 fc67 	bl	8015208 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2201      	movs	r2, #1
 800d93e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	889b      	ldrh	r3, [r3, #4]
 800d946:	b2db      	uxtb	r3, r3
 800d948:	4619      	mov	r1, r3
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 fa52 	bl	800ddf4 <MSC_BOT_CplClrFeature>
          break;
 800d950:	e006      	b.n	800d960 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 800d952:	6839      	ldr	r1, [r7, #0]
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f002 f88c 	bl	800fa72 <USBD_CtlError>
          ret = USBD_FAIL;
 800d95a:	2302      	movs	r3, #2
 800d95c:	75fb      	strb	r3, [r7, #23]
          break;
 800d95e:	bf00      	nop
      }
      break;
 800d960:	e006      	b.n	800d970 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 800d962:	6839      	ldr	r1, [r7, #0]
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f002 f884 	bl	800fa72 <USBD_CtlError>
      ret = USBD_FAIL;
 800d96a:	2302      	movs	r3, #2
 800d96c:	75fb      	strb	r3, [r7, #23]
      break;
 800d96e:	bf00      	nop
  }

  return ret;
 800d970:	7dfb      	ldrb	r3, [r7, #23]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop

0800d97c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d988:	78fb      	ldrb	r3, [r7, #3]
 800d98a:	4619      	mov	r1, r3
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 f8c3 	bl	800db18 <MSC_BOT_DataIn>

  return USBD_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d9a8:	78fb      	ldrb	r3, [r7, #3]
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 f8e4 	bl	800db7a <MSC_BOT_DataOut>

  return USBD_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2220      	movs	r2, #32
 800d9c8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d9ca:	4b03      	ldr	r3, [pc, #12]	; (800d9d8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr
 800d9d8:	24000054 	.word	0x24000054

0800d9dc <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2220      	movs	r2, #32
 800d9e8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d9ea:	4b03      	ldr	r3, [pc, #12]	; (800d9f8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr
 800d9f8:	24000074 	.word	0x24000074

0800d9fc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2220      	movs	r2, #32
 800da08:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800da0a:	4b03      	ldr	r3, [pc, #12]	; (800da18 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr
 800da18:	24000094 	.word	0x24000094

0800da1c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	220a      	movs	r2, #10
 800da28:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800da2a:	4b03      	ldr	r3, [pc, #12]	; (800da38 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr
 800da38:	240000b4 	.word	0x240000b4

0800da3c <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d003      	beq.n	800da54 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	683a      	ldr	r2, [r7, #0]
 800da50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	370c      	adds	r7, #12
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr

0800da62 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 800da62:	b580      	push	{r7, lr}
 800da64:	b084      	sub	sp, #16
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da70:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2200      	movs	r2, #0
 800da76:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2200      	movs	r2, #0
 800da8a:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2000      	movs	r0, #0
 800da98:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800da9a:	2101      	movs	r1, #1
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f007 fbf8 	bl	8015292 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800daa2:	2181      	movs	r1, #129	; 0x81
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f007 fbf4 	bl	8015292 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800dab0:	231f      	movs	r3, #31
 800dab2:	2101      	movs	r1, #1
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f007 fcb7 	bl	8015428 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800daba:	bf00      	nop
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dad0:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2200      	movs	r2, #0
 800dad6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2201      	movs	r2, #1
 800dadc:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800dae4:	231f      	movs	r3, #31
 800dae6:	2101      	movs	r1, #1
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f007 fc9d 	bl	8015428 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800daee:	bf00      	nop
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b085      	sub	sp, #20
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db04:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2200      	movs	r2, #0
 800db0a:	721a      	strb	r2, [r3, #8]
}
 800db0c:	bf00      	nop
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	460b      	mov	r3, r1
 800db22:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db2a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	7a1b      	ldrb	r3, [r3, #8]
 800db30:	2b02      	cmp	r3, #2
 800db32:	d004      	beq.n	800db3e <MSC_BOT_DataIn+0x26>
 800db34:	2b02      	cmp	r3, #2
 800db36:	db19      	blt.n	800db6c <MSC_BOT_DataIn+0x54>
 800db38:	2b04      	cmp	r3, #4
 800db3a:	dc17      	bgt.n	800db6c <MSC_BOT_DataIn+0x54>
 800db3c:	e011      	b.n	800db62 <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800db4a:	461a      	mov	r2, r3
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 f979 	bl	800de44 <SCSI_ProcessCmd>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	da0b      	bge.n	800db70 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800db58:	2101      	movs	r1, #1
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 f8f0 	bl	800dd40 <MSC_BOT_SendCSW>
      }
      break;
 800db60:	e006      	b.n	800db70 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800db62:	2100      	movs	r1, #0
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 f8eb 	bl	800dd40 <MSC_BOT_SendCSW>
      break;
 800db6a:	e002      	b.n	800db72 <MSC_BOT_DataIn+0x5a>

    default:
      break;
 800db6c:	bf00      	nop
 800db6e:	e000      	b.n	800db72 <MSC_BOT_DataIn+0x5a>
      break;
 800db70:	bf00      	nop
  }
}
 800db72:	bf00      	nop
 800db74:	3710      	adds	r7, #16
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b084      	sub	sp, #16
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
 800db82:	460b      	mov	r3, r1
 800db84:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db8c:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	7a1b      	ldrb	r3, [r3, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d002      	beq.n	800db9c <MSC_BOT_DataOut+0x22>
 800db96:	2b01      	cmp	r3, #1
 800db98:	d004      	beq.n	800dba4 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800db9a:	e015      	b.n	800dbc8 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 f817 	bl	800dbd0 <MSC_BOT_CBW_Decode>
      break;
 800dba2:	e011      	b.n	800dbc8 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 f946 	bl	800de44 <SCSI_ProcessCmd>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	da03      	bge.n	800dbc6 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dbbe:	2101      	movs	r1, #1
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f8bd 	bl	800dd40 <MSC_BOT_SendCSW>
      break;
 800dbc6:	bf00      	nop
  }
}
 800dbc8:	bf00      	nop
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbde:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800dbf8:	2101      	movs	r1, #1
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f007 fc37 	bl	801546e <USBD_LL_GetRxDataSize>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b1f      	cmp	r3, #31
 800dc04:	d114      	bne.n	800dc30 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800dc0c:	4a32      	ldr	r2, [pc, #200]	; (800dcd8 <MSC_BOT_CBW_Decode+0x108>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d10e      	bne.n	800dc30 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d809      	bhi.n	800dc30 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d004      	beq.n	800dc30 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800dc2c:	2b10      	cmp	r3, #16
 800dc2e:	d90e      	bls.n	800dc4e <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800dc36:	2320      	movs	r3, #32
 800dc38:	2205      	movs	r2, #5
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 fc4b 	bl	800e4d6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2202      	movs	r2, #2
 800dc44:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f8a6 	bl	800dd98 <MSC_BOT_Abort>
 800dc4c:	e041      	b.n	800dcd2 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 f8f1 	bl	800de44 <SCSI_ProcessCmd>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	da0c      	bge.n	800dc82 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	7a1b      	ldrb	r3, [r3, #8]
 800dc6c:	2b05      	cmp	r3, #5
 800dc6e:	d104      	bne.n	800dc7a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dc70:	2101      	movs	r1, #1
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f864 	bl	800dd40 <MSC_BOT_SendCSW>
 800dc78:	e02b      	b.n	800dcd2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f88c 	bl	800dd98 <MSC_BOT_Abort>
 800dc80:	e027      	b.n	800dcd2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	7a1b      	ldrb	r3, [r3, #8]
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d022      	beq.n	800dcd0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d01e      	beq.n	800dcd0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dc96:	2b03      	cmp	r3, #3
 800dc98:	d01a      	beq.n	800dcd0 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	895b      	ldrh	r3, [r3, #10]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d009      	beq.n	800dcb6 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f103 010c 	add.w	r1, r3, #12
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	895b      	ldrh	r3, [r3, #10]
 800dcac:	461a      	mov	r2, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f814 	bl	800dcdc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800dcb4:	e00d      	b.n	800dcd2 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	895b      	ldrh	r3, [r3, #10]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d104      	bne.n	800dcc8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f83d 	bl	800dd40 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800dcc6:	e004      	b.n	800dcd2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 f865 	bl	800dd98 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800dcce:	e000      	b.n	800dcd2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800dcd0:	bf00      	nop
    }
  }
}
 800dcd2:	3710      	adds	r7, #16
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	43425355 	.word	0x43425355

0800dcdc <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	4613      	mov	r3, r2
 800dce8:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcf0:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800dcf8:	88fb      	ldrh	r3, [r7, #6]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d204      	bcs.n	800dd08 <MSC_BOT_SendData+0x2c>
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	e000      	b.n	800dd0a <MSC_BOT_SendData+0x2e>
 800dd08:	88fb      	ldrh	r3, [r7, #6]
 800dd0a:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800dd12:	88fb      	ldrh	r3, [r7, #6]
 800dd14:	1ad2      	subs	r2, r2, r3
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	2204      	movs	r2, #4
 800dd28:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800dd2a:	8a7b      	ldrh	r3, [r7, #18]
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	2181      	movs	r1, #129	; 0x81
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f007 fb56 	bl	80153e2 <USBD_LL_Transmit>
}
 800dd36:	bf00      	nop
 800dd38:	3718      	adds	r7, #24
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
	...

0800dd40 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd52:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	4a0f      	ldr	r2, [pc, #60]	; (800dd94 <MSC_BOT_SendCSW+0x54>)
 800dd58:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	78fa      	ldrb	r2, [r7, #3]
 800dd60:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 800dd70:	230d      	movs	r3, #13
 800dd72:	2181      	movs	r1, #129	; 0x81
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f007 fb34 	bl	80153e2 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800dd80:	231f      	movs	r3, #31
 800dd82:	2101      	movs	r1, #1
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f007 fb4f 	bl	8015428 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800dd8a:	bf00      	nop
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	53425355 	.word	0x53425355

0800dd98 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dda6:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10c      	bne.n	800ddcc <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d007      	beq.n	800ddcc <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d103      	bne.n	800ddcc <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ddc4:	2101      	movs	r1, #1
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f007 fa82 	bl	80152d0 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ddcc:	2181      	movs	r1, #129	; 0x81
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f007 fa7e 	bl	80152d0 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	7a5b      	ldrb	r3, [r3, #9]
 800ddd8:	2b02      	cmp	r3, #2
 800ddda:	d107      	bne.n	800ddec <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800dde2:	231f      	movs	r3, #31
 800dde4:	2101      	movs	r1, #1
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f007 fb1e 	bl	8015428 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 800ddec:	bf00      	nop
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de06:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	7a5b      	ldrb	r3, [r3, #9]
 800de0c:	2b02      	cmp	r3, #2
 800de0e:	d107      	bne.n	800de20 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800de10:	2181      	movs	r1, #129	; 0x81
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f007 fa5c 	bl	80152d0 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2200      	movs	r2, #0
 800de1c:	725a      	strb	r2, [r3, #9]
 800de1e:	e00d      	b.n	800de3c <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800de20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de24:	2b00      	cmp	r3, #0
 800de26:	da08      	bge.n	800de3a <MSC_BOT_CplClrFeature+0x46>
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	7a5b      	ldrb	r3, [r3, #9]
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d004      	beq.n	800de3a <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800de30:	2101      	movs	r1, #1
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7ff ff84 	bl	800dd40 <MSC_BOT_SendCSW>
 800de38:	e000      	b.n	800de3c <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800de3a:	bf00      	nop
  }
}
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
	...

0800de44 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	460b      	mov	r3, r1
 800de4e:	607a      	str	r2, [r7, #4]
 800de50:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b5a      	cmp	r3, #90	; 0x5a
 800de58:	f200 810e 	bhi.w	800e078 <SCSI_ProcessCmd+0x234>
 800de5c:	a201      	add	r2, pc, #4	; (adr r2, 800de64 <SCSI_ProcessCmd+0x20>)
 800de5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de62:	bf00      	nop
 800de64:	0800dfd1 	.word	0x0800dfd1
 800de68:	0800e079 	.word	0x0800e079
 800de6c:	0800e079 	.word	0x0800e079
 800de70:	0800dfdf 	.word	0x0800dfdf
 800de74:	0800e079 	.word	0x0800e079
 800de78:	0800e079 	.word	0x0800e079
 800de7c:	0800e079 	.word	0x0800e079
 800de80:	0800e079 	.word	0x0800e079
 800de84:	0800e079 	.word	0x0800e079
 800de88:	0800e079 	.word	0x0800e079
 800de8c:	0800e079 	.word	0x0800e079
 800de90:	0800e079 	.word	0x0800e079
 800de94:	0800e079 	.word	0x0800e079
 800de98:	0800e079 	.word	0x0800e079
 800de9c:	0800e079 	.word	0x0800e079
 800dea0:	0800e079 	.word	0x0800e079
 800dea4:	0800e079 	.word	0x0800e079
 800dea8:	0800e079 	.word	0x0800e079
 800deac:	0800dfed 	.word	0x0800dfed
 800deb0:	0800e079 	.word	0x0800e079
 800deb4:	0800e079 	.word	0x0800e079
 800deb8:	0800e079 	.word	0x0800e079
 800debc:	0800e079 	.word	0x0800e079
 800dec0:	0800e079 	.word	0x0800e079
 800dec4:	0800e079 	.word	0x0800e079
 800dec8:	0800e079 	.word	0x0800e079
 800decc:	0800e017 	.word	0x0800e017
 800ded0:	0800dffb 	.word	0x0800dffb
 800ded4:	0800e079 	.word	0x0800e079
 800ded8:	0800e079 	.word	0x0800e079
 800dedc:	0800e009 	.word	0x0800e009
 800dee0:	0800e079 	.word	0x0800e079
 800dee4:	0800e079 	.word	0x0800e079
 800dee8:	0800e079 	.word	0x0800e079
 800deec:	0800e079 	.word	0x0800e079
 800def0:	0800e033 	.word	0x0800e033
 800def4:	0800e079 	.word	0x0800e079
 800def8:	0800e041 	.word	0x0800e041
 800defc:	0800e079 	.word	0x0800e079
 800df00:	0800e079 	.word	0x0800e079
 800df04:	0800e04f 	.word	0x0800e04f
 800df08:	0800e079 	.word	0x0800e079
 800df0c:	0800e05d 	.word	0x0800e05d
 800df10:	0800e079 	.word	0x0800e079
 800df14:	0800e079 	.word	0x0800e079
 800df18:	0800e079 	.word	0x0800e079
 800df1c:	0800e079 	.word	0x0800e079
 800df20:	0800e06b 	.word	0x0800e06b
 800df24:	0800e079 	.word	0x0800e079
 800df28:	0800e079 	.word	0x0800e079
 800df2c:	0800e079 	.word	0x0800e079
 800df30:	0800e079 	.word	0x0800e079
 800df34:	0800e079 	.word	0x0800e079
 800df38:	0800e079 	.word	0x0800e079
 800df3c:	0800e079 	.word	0x0800e079
 800df40:	0800e079 	.word	0x0800e079
 800df44:	0800e079 	.word	0x0800e079
 800df48:	0800e079 	.word	0x0800e079
 800df4c:	0800e079 	.word	0x0800e079
 800df50:	0800e079 	.word	0x0800e079
 800df54:	0800e079 	.word	0x0800e079
 800df58:	0800e079 	.word	0x0800e079
 800df5c:	0800e079 	.word	0x0800e079
 800df60:	0800e079 	.word	0x0800e079
 800df64:	0800e079 	.word	0x0800e079
 800df68:	0800e079 	.word	0x0800e079
 800df6c:	0800e079 	.word	0x0800e079
 800df70:	0800e079 	.word	0x0800e079
 800df74:	0800e079 	.word	0x0800e079
 800df78:	0800e079 	.word	0x0800e079
 800df7c:	0800e079 	.word	0x0800e079
 800df80:	0800e079 	.word	0x0800e079
 800df84:	0800e079 	.word	0x0800e079
 800df88:	0800e079 	.word	0x0800e079
 800df8c:	0800e079 	.word	0x0800e079
 800df90:	0800e079 	.word	0x0800e079
 800df94:	0800e079 	.word	0x0800e079
 800df98:	0800e079 	.word	0x0800e079
 800df9c:	0800e079 	.word	0x0800e079
 800dfa0:	0800e079 	.word	0x0800e079
 800dfa4:	0800e079 	.word	0x0800e079
 800dfa8:	0800e079 	.word	0x0800e079
 800dfac:	0800e079 	.word	0x0800e079
 800dfb0:	0800e079 	.word	0x0800e079
 800dfb4:	0800e079 	.word	0x0800e079
 800dfb8:	0800e079 	.word	0x0800e079
 800dfbc:	0800e079 	.word	0x0800e079
 800dfc0:	0800e079 	.word	0x0800e079
 800dfc4:	0800e079 	.word	0x0800e079
 800dfc8:	0800e079 	.word	0x0800e079
 800dfcc:	0800e025 	.word	0x0800e025
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 800dfd0:	7afb      	ldrb	r3, [r7, #11]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f000 f85c 	bl	800e094 <SCSI_TestUnitReady>
      break;
 800dfdc:	e055      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 800dfde:	7afb      	ldrb	r3, [r7, #11]
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f000 fa0b 	bl	800e400 <SCSI_RequestSense>
      break;
 800dfea:	e04e      	b.n	800e08a <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 800dfec:	7afb      	ldrb	r3, [r7, #11]
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	4619      	mov	r1, r3
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f000 f888 	bl	800e108 <SCSI_Inquiry>
      break;
 800dff8:	e047      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800dffa:	7afb      	ldrb	r3, [r7, #11]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	4619      	mov	r1, r3
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f000 faa2 	bl	800e54a <SCSI_StartStopUnit>
      break;
 800e006:	e040      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800e008:	7afb      	ldrb	r3, [r7, #11]
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	4619      	mov	r1, r3
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f000 fa9b 	bl	800e54a <SCSI_StartStopUnit>
      break;
 800e014:	e039      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800e016:	7afb      	ldrb	r3, [r7, #11]
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	4619      	mov	r1, r3
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f000 f99f 	bl	800e360 <SCSI_ModeSense6>
      break;
 800e022:	e032      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 800e024:	7afb      	ldrb	r3, [r7, #11]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	4619      	mov	r1, r3
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f000 f9c0 	bl	800e3b0 <SCSI_ModeSense10>
      break;
 800e030:	e02b      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e032:	7afb      	ldrb	r3, [r7, #11]
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	4619      	mov	r1, r3
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f000 f92c 	bl	800e296 <SCSI_ReadFormatCapacity>
      break;
 800e03e:	e024      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 800e040:	7afb      	ldrb	r3, [r7, #11]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	4619      	mov	r1, r3
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f000 f8be 	bl	800e1c8 <SCSI_ReadCapacity10>
      break;
 800e04c:	e01d      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 800e04e:	7afb      	ldrb	r3, [r7, #11]
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	4619      	mov	r1, r3
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f000 fa8d 	bl	800e574 <SCSI_Read10>
      break;
 800e05a:	e016      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 800e05c:	7afb      	ldrb	r3, [r7, #11]
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	4619      	mov	r1, r3
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f000 fb12 	bl	800e68c <SCSI_Write10>
      break;
 800e068:	e00f      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 800e06a:	7afb      	ldrb	r3, [r7, #11]
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	4619      	mov	r1, r3
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f000 fbbb 	bl	800e7ec <SCSI_Verify10>
      break;
 800e076:	e008      	b.n	800e08a <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e078:	7af9      	ldrb	r1, [r7, #11]
 800e07a:	2320      	movs	r3, #32
 800e07c:	2205      	movs	r2, #5
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f000 fa29 	bl	800e4d6 <SCSI_SenseCode>
      return -1;
 800e084:	f04f 33ff 	mov.w	r3, #4294967295
 800e088:	e000      	b.n	800e08c <SCSI_ProcessCmd+0x248>
  }

  return 0;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	460b      	mov	r3, r1
 800e09e:	607a      	str	r2, [r7, #4]
 800e0a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0a8:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00a      	beq.n	800e0ca <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e0ba:	2320      	movs	r3, #32
 800e0bc:	2205      	movs	r2, #5
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f000 fa09 	bl	800e4d6 <SCSI_SenseCode>

    return -1;
 800e0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c8:	e019      	b.n	800e0fe <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	7afa      	ldrb	r2, [r7, #11]
 800e0d4:	4610      	mov	r0, r2
 800e0d6:	4798      	blx	r3
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00b      	beq.n	800e0f6 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e0de:	7af9      	ldrb	r1, [r7, #11]
 800e0e0:	233a      	movs	r3, #58	; 0x3a
 800e0e2:	2202      	movs	r2, #2
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f000 f9f6 	bl	800e4d6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	2205      	movs	r2, #5
 800e0ee:	721a      	strb	r2, [r3, #8]

    return -1;
 800e0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f4:	e003      	b.n	800e0fe <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	815a      	strh	r2, [r3, #10]

  return 0;
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3718      	adds	r7, #24
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e108:	b480      	push	{r7}
 800e10a:	b089      	sub	sp, #36	; 0x24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	460b      	mov	r3, r1
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e11c:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	3301      	adds	r3, #1
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	f003 0301 	and.w	r3, r3, #1
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d014      	beq.n	800e156 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800e12c:	2307      	movs	r3, #7
 800e12e:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	8bfa      	ldrh	r2, [r7, #30]
 800e134:	815a      	strh	r2, [r3, #10]

    while (len)
 800e136:	e00a      	b.n	800e14e <SCSI_Inquiry+0x46>
    {
      len--;
 800e138:	8bfb      	ldrh	r3, [r7, #30]
 800e13a:	3b01      	subs	r3, #1
 800e13c:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800e13e:	8bfa      	ldrh	r2, [r7, #30]
 800e140:	8bfb      	ldrh	r3, [r7, #30]
 800e142:	4920      	ldr	r1, [pc, #128]	; (800e1c4 <SCSI_Inquiry+0xbc>)
 800e144:	5c89      	ldrb	r1, [r1, r2]
 800e146:	69ba      	ldr	r2, [r7, #24]
 800e148:	4413      	add	r3, r2
 800e14a:	460a      	mov	r2, r1
 800e14c:	731a      	strb	r2, [r3, #12]
    while (len)
 800e14e:	8bfb      	ldrh	r3, [r7, #30]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d1f1      	bne.n	800e138 <SCSI_Inquiry+0x30>
 800e154:	e02e      	b.n	800e1b4 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e15c:	69d9      	ldr	r1, [r3, #28]
 800e15e:	7afa      	ldrb	r2, [r7, #11]
 800e160:	4613      	mov	r3, r2
 800e162:	00db      	lsls	r3, r3, #3
 800e164:	4413      	add	r3, r2
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	440b      	add	r3, r1
 800e16a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	3304      	adds	r3, #4
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	b29b      	uxth	r3, r3
 800e174:	3305      	adds	r3, #5
 800e176:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	3304      	adds	r3, #4
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	8bfa      	ldrh	r2, [r7, #30]
 800e182:	429a      	cmp	r2, r3
 800e184:	d303      	bcc.n	800e18e <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	3304      	adds	r3, #4
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	8bfa      	ldrh	r2, [r7, #30]
 800e192:	815a      	strh	r2, [r3, #10]

    while (len)
 800e194:	e00b      	b.n	800e1ae <SCSI_Inquiry+0xa6>
    {
      len--;
 800e196:	8bfb      	ldrh	r3, [r7, #30]
 800e198:	3b01      	subs	r3, #1
 800e19a:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800e19c:	8bfb      	ldrh	r3, [r7, #30]
 800e19e:	697a      	ldr	r2, [r7, #20]
 800e1a0:	441a      	add	r2, r3
 800e1a2:	8bfb      	ldrh	r3, [r7, #30]
 800e1a4:	7811      	ldrb	r1, [r2, #0]
 800e1a6:	69ba      	ldr	r2, [r7, #24]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	460a      	mov	r2, r1
 800e1ac:	731a      	strb	r2, [r3, #12]
    while (len)
 800e1ae:	8bfb      	ldrh	r3, [r7, #30]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1f0      	bne.n	800e196 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800e1b4:	2300      	movs	r3, #0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3724      	adds	r7, #36	; 0x24
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
 800e1c2:	bf00      	nop
 800e1c4:	080157f0 	.word	0x080157f0

0800e1c8 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b086      	sub	sp, #24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	607a      	str	r2, [r7, #4]
 800e1d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1dc:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	697a      	ldr	r2, [r7, #20]
 800e1e8:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800e1ec:	697a      	ldr	r2, [r7, #20]
 800e1ee:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800e1f2:	7af8      	ldrb	r0, [r7, #11]
 800e1f4:	4798      	blx	r3
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d008      	beq.n	800e20e <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e1fc:	7af9      	ldrb	r1, [r7, #11]
 800e1fe:	233a      	movs	r3, #58	; 0x3a
 800e200:	2202      	movs	r2, #2
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f000 f967 	bl	800e4d6 <SCSI_SenseCode>
    return -1;
 800e208:	f04f 33ff 	mov.w	r3, #4294967295
 800e20c:	e03f      	b.n	800e28e <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e214:	3b01      	subs	r3, #1
 800e216:	0e1b      	lsrs	r3, r3, #24
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e224:	3b01      	subs	r3, #1
 800e226:	0c1b      	lsrs	r3, r3, #16
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e234:	3b01      	subs	r3, #1
 800e236:	0a1b      	lsrs	r3, r3, #8
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e244:	b2db      	uxtb	r3, r3
 800e246:	3b01      	subs	r3, #1
 800e248:	b2da      	uxtb	r2, r3
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e254:	161b      	asrs	r3, r3, #24
 800e256:	b2da      	uxtb	r2, r3
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e262:	141b      	asrs	r3, r3, #16
 800e264:	b2da      	uxtb	r2, r3
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e270:	0a1b      	lsrs	r3, r3, #8
 800e272:	b29b      	uxth	r3, r3
 800e274:	b2da      	uxtb	r2, r3
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e280:	b2da      	uxtb	r2, r3
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	2208      	movs	r2, #8
 800e28a:	815a      	strh	r2, [r3, #10]
    return 0;
 800e28c:	2300      	movs	r3, #0
  }
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3718      	adds	r7, #24
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e296:	b580      	push	{r7, lr}
 800e298:	b088      	sub	sp, #32
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	60f8      	str	r0, [r7, #12]
 800e29e:	460b      	mov	r3, r1
 800e2a0:	607a      	str	r2, [r7, #4]
 800e2a2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2aa:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	83fb      	strh	r3, [r7, #30]
 800e2b0:	e007      	b.n	800e2c2 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800e2b2:	8bfb      	ldrh	r3, [r7, #30]
 800e2b4:	69ba      	ldr	r2, [r7, #24]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 800e2bc:	8bfb      	ldrh	r3, [r7, #30]
 800e2be:	3301      	adds	r3, #1
 800e2c0:	83fb      	strh	r3, [r7, #30]
 800e2c2:	8bfb      	ldrh	r3, [r7, #30]
 800e2c4:	2b0b      	cmp	r3, #11
 800e2c6:	d9f4      	bls.n	800e2b2 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	f107 0216 	add.w	r2, r7, #22
 800e2d4:	f107 0110 	add.w	r1, r7, #16
 800e2d8:	7af8      	ldrb	r0, [r7, #11]
 800e2da:	4798      	blx	r3
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d008      	beq.n	800e2f4 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e2e2:	7af9      	ldrb	r1, [r7, #11]
 800e2e4:	233a      	movs	r3, #58	; 0x3a
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f000 f8f4 	bl	800e4d6 <SCSI_SenseCode>
    return -1;
 800e2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f2:	e030      	b.n	800e356 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	2208      	movs	r2, #8
 800e2f8:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	0e1b      	lsrs	r3, r3, #24
 800e300:	b2da      	uxtb	r2, r3
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	3b01      	subs	r3, #1
 800e30a:	0c1b      	lsrs	r3, r3, #16
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	3b01      	subs	r3, #1
 800e316:	0a1b      	lsrs	r3, r3, #8
 800e318:	b2da      	uxtb	r2, r3
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	b2db      	uxtb	r3, r3
 800e322:	3b01      	subs	r3, #1
 800e324:	b2da      	uxtb	r2, r3
 800e326:	69bb      	ldr	r3, [r7, #24]
 800e328:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	2202      	movs	r2, #2
 800e32e:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e330:	8afb      	ldrh	r3, [r7, #22]
 800e332:	141b      	asrs	r3, r3, #16
 800e334:	b2da      	uxtb	r2, r3
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e33a:	8afb      	ldrh	r3, [r7, #22]
 800e33c:	0a1b      	lsrs	r3, r3, #8
 800e33e:	b29b      	uxth	r3, r3
 800e340:	b2da      	uxtb	r2, r3
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800e346:	8afb      	ldrh	r3, [r7, #22]
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	220c      	movs	r2, #12
 800e352:	815a      	strh	r2, [r3, #10]
    return 0;
 800e354:	2300      	movs	r3, #0
  }
}
 800e356:	4618      	mov	r0, r3
 800e358:	3720      	adds	r7, #32
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
	...

0800e360 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e360:	b480      	push	{r7}
 800e362:	b087      	sub	sp, #28
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	460b      	mov	r3, r1
 800e36a:	607a      	str	r2, [r7, #4]
 800e36c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e374:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800e376:	2308      	movs	r3, #8
 800e378:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	8afa      	ldrh	r2, [r7, #22]
 800e37e:	815a      	strh	r2, [r3, #10]

  while (len)
 800e380:	e00a      	b.n	800e398 <SCSI_ModeSense6+0x38>
  {
    len--;
 800e382:	8afb      	ldrh	r3, [r7, #22]
 800e384:	3b01      	subs	r3, #1
 800e386:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800e388:	8afa      	ldrh	r2, [r7, #22]
 800e38a:	8afb      	ldrh	r3, [r7, #22]
 800e38c:	4907      	ldr	r1, [pc, #28]	; (800e3ac <SCSI_ModeSense6+0x4c>)
 800e38e:	5c89      	ldrb	r1, [r1, r2]
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	4413      	add	r3, r2
 800e394:	460a      	mov	r2, r1
 800e396:	731a      	strb	r2, [r3, #12]
  while (len)
 800e398:	8afb      	ldrh	r3, [r7, #22]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1f1      	bne.n	800e382 <SCSI_ModeSense6+0x22>
  }
  return 0;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	371c      	adds	r7, #28
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr
 800e3ac:	080157f8 	.word	0x080157f8

0800e3b0 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800e3be:	2308      	movs	r3, #8
 800e3c0:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3c8:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	8afa      	ldrh	r2, [r7, #22]
 800e3ce:	815a      	strh	r2, [r3, #10]

  while (len)
 800e3d0:	e00a      	b.n	800e3e8 <SCSI_ModeSense10+0x38>
  {
    len--;
 800e3d2:	8afb      	ldrh	r3, [r7, #22]
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800e3d8:	8afa      	ldrh	r2, [r7, #22]
 800e3da:	8afb      	ldrh	r3, [r7, #22]
 800e3dc:	4907      	ldr	r1, [pc, #28]	; (800e3fc <SCSI_ModeSense10+0x4c>)
 800e3de:	5c89      	ldrb	r1, [r1, r2]
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	4413      	add	r3, r2
 800e3e4:	460a      	mov	r2, r1
 800e3e6:	731a      	strb	r2, [r3, #12]
  while (len)
 800e3e8:	8afb      	ldrh	r3, [r7, #22]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1f1      	bne.n	800e3d2 <SCSI_ModeSense10+0x22>
  }

  return 0;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	371c      	adds	r7, #28
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	08015800 	.word	0x08015800

0800e400 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e400:	b480      	push	{r7}
 800e402:	b087      	sub	sp, #28
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	460b      	mov	r3, r1
 800e40a:	607a      	str	r2, [r7, #4]
 800e40c:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e414:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800e416:	2300      	movs	r3, #0
 800e418:	75fb      	strb	r3, [r7, #23]
 800e41a:	e007      	b.n	800e42c <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800e41c:	7dfb      	ldrb	r3, [r7, #23]
 800e41e:	693a      	ldr	r2, [r7, #16]
 800e420:	4413      	add	r3, r2
 800e422:	2200      	movs	r2, #0
 800e424:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800e426:	7dfb      	ldrb	r3, [r7, #23]
 800e428:	3301      	adds	r3, #1
 800e42a:	75fb      	strb	r3, [r7, #23]
 800e42c:	7dfb      	ldrb	r3, [r7, #23]
 800e42e:	2b11      	cmp	r3, #17
 800e430:	d9f4      	bls.n	800e41c <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	2270      	movs	r2, #112	; 0x70
 800e436:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	220c      	movs	r2, #12
 800e43c:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d02e      	beq.n	800e4ac <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	3347      	adds	r3, #71	; 0x47
 800e458:	00db      	lsls	r3, r3, #3
 800e45a:	4413      	add	r3, r2
 800e45c:	791a      	ldrb	r2, [r3, #4]
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800e468:	693a      	ldr	r2, [r7, #16]
 800e46a:	3347      	adds	r3, #71	; 0x47
 800e46c:	00db      	lsls	r3, r3, #3
 800e46e:	4413      	add	r3, r2
 800e470:	7a5a      	ldrb	r2, [r3, #9]
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800e47c:	693a      	ldr	r2, [r7, #16]
 800e47e:	3347      	adds	r3, #71	; 0x47
 800e480:	00db      	lsls	r3, r3, #3
 800e482:	4413      	add	r3, r2
 800e484:	7a1a      	ldrb	r2, [r3, #8]
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800e490:	3301      	adds	r3, #1
 800e492:	b2da      	uxtb	r2, r3
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800e4a0:	2b04      	cmp	r3, #4
 800e4a2:	d103      	bne.n	800e4ac <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	2212      	movs	r2, #18
 800e4b0:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	3304      	adds	r3, #4
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	2b12      	cmp	r3, #18
 800e4ba:	d805      	bhi.n	800e4c8 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	3304      	adds	r3, #4
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	371c      	adds	r7, #28
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800e4d6:	b480      	push	{r7}
 800e4d8:	b085      	sub	sp, #20
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	4608      	mov	r0, r1
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	70fb      	strb	r3, [r7, #3]
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	70bb      	strb	r3, [r7, #2]
 800e4ec:	4613      	mov	r3, r2
 800e4ee:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4f6:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	3347      	adds	r3, #71	; 0x47
 800e502:	00db      	lsls	r3, r3, #3
 800e504:	4413      	add	r3, r2
 800e506:	78ba      	ldrb	r2, [r7, #2]
 800e508:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	3347      	adds	r3, #71	; 0x47
 800e514:	00db      	lsls	r3, r3, #3
 800e516:	4413      	add	r3, r2
 800e518:	2200      	movs	r2, #0
 800e51a:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800e522:	3301      	adds	r3, #1
 800e524:	b2da      	uxtb	r2, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800e532:	2b04      	cmp	r3, #4
 800e534:	d103      	bne.n	800e53e <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2200      	movs	r2, #0
 800e53a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800e53e:	bf00      	nop
 800e540:	3714      	adds	r7, #20
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr

0800e54a <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e54a:	b480      	push	{r7}
 800e54c:	b087      	sub	sp, #28
 800e54e:	af00      	add	r7, sp, #0
 800e550:	60f8      	str	r0, [r7, #12]
 800e552:	460b      	mov	r3, r1
 800e554:	607a      	str	r2, [r7, #4]
 800e556:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e55e:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	2200      	movs	r2, #0
 800e564:	815a      	strh	r2, [r3, #10]
  return 0;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	371c      	adds	r7, #28
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr

0800e574 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	460b      	mov	r3, r1
 800e57e:	607a      	str	r2, [r7, #4]
 800e580:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e588:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	7a1b      	ldrb	r3, [r3, #8]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d16e      	bne.n	800e670 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800e598:	b25b      	sxtb	r3, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	db0a      	blt.n	800e5b4 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e5a4:	2320      	movs	r3, #32
 800e5a6:	2205      	movs	r2, #5
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f7ff ff94 	bl	800e4d6 <SCSI_SenseCode>
      return -1;
 800e5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b2:	e067      	b.n	800e684 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	7afa      	ldrb	r2, [r7, #11]
 800e5be:	4610      	mov	r0, r2
 800e5c0:	4798      	blx	r3
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d008      	beq.n	800e5da <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e5c8:	7af9      	ldrb	r1, [r7, #11]
 800e5ca:	233a      	movs	r3, #58	; 0x3a
 800e5cc:	2202      	movs	r2, #2
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f7ff ff81 	bl	800e4d6 <SCSI_SenseCode>
      return -1;
 800e5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d8:	e054      	b.n	800e684 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	3302      	adds	r3, #2
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	3303      	adds	r3, #3
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5ea:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	3304      	adds	r3, #4
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e5f4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	3205      	adds	r2, #5
 800e5fa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e5fc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	3307      	adds	r3, #7
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	021b      	lsls	r3, r3, #8
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	3208      	adds	r2, #8
 800e610:	7812      	ldrb	r2, [r2, #0]
 800e612:	431a      	orrs	r2, r3
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e626:	7af9      	ldrb	r1, [r7, #11]
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f000 f912 	bl	800e852 <SCSI_CheckAddressRange>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	da02      	bge.n	800e63a <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e634:	f04f 33ff 	mov.w	r3, #4294967295
 800e638:	e024      	b.n	800e684 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	2202      	movs	r2, #2
 800e63e:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e64c:	6979      	ldr	r1, [r7, #20]
 800e64e:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800e652:	fb01 f303 	mul.w	r3, r1, r3
 800e656:	429a      	cmp	r2, r3
 800e658:	d00a      	beq.n	800e670 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e660:	2320      	movs	r3, #32
 800e662:	2205      	movs	r2, #5
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f7ff ff36 	bl	800e4d6 <SCSI_SenseCode>
      return -1;
 800e66a:	f04f 33ff 	mov.w	r3, #4294967295
 800e66e:	e009      	b.n	800e684 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e676:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800e678:	7afb      	ldrb	r3, [r7, #11]
 800e67a:	4619      	mov	r1, r3
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f000 f90a 	bl	800e896 <SCSI_ProcessRead>
 800e682:	4603      	mov	r3, r0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b086      	sub	sp, #24
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	460b      	mov	r3, r1
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6a0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	7a1b      	ldrb	r3, [r3, #8]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f040 8096 	bne.w	800e7d8 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800e6b2:	b25b      	sxtb	r3, r3
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	da0a      	bge.n	800e6ce <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e6be:	2320      	movs	r3, #32
 800e6c0:	2205      	movs	r2, #5
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f7ff ff07 	bl	800e4d6 <SCSI_SenseCode>
      return -1;
 800e6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6cc:	e08a      	b.n	800e7e4 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	7afa      	ldrb	r2, [r7, #11]
 800e6d8:	4610      	mov	r0, r2
 800e6da:	4798      	blx	r3
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d008      	beq.n	800e6f4 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e6e2:	7af9      	ldrb	r1, [r7, #11]
 800e6e4:	233a      	movs	r3, #58	; 0x3a
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f7ff fef4 	bl	800e4d6 <SCSI_SenseCode>
      return -1;
 800e6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e6f2:	e077      	b.n	800e7e4 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	7afa      	ldrb	r2, [r7, #11]
 800e6fe:	4610      	mov	r0, r2
 800e700:	4798      	blx	r3
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d008      	beq.n	800e71a <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e708:	7af9      	ldrb	r1, [r7, #11]
 800e70a:	2327      	movs	r3, #39	; 0x27
 800e70c:	2202      	movs	r2, #2
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7ff fee1 	bl	800e4d6 <SCSI_SenseCode>
      return -1;
 800e714:	f04f 33ff 	mov.w	r3, #4294967295
 800e718:	e064      	b.n	800e7e4 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	3302      	adds	r3, #2
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	3303      	adds	r3, #3
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e72a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	3304      	adds	r3, #4
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e734:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	3205      	adds	r2, #5
 800e73a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e73c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	3307      	adds	r3, #7
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	3208      	adds	r2, #8
 800e750:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e752:	431a      	orrs	r2, r3
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e766:	7af9      	ldrb	r1, [r7, #11]
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f000 f872 	bl	800e852 <SCSI_CheckAddressRange>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	da02      	bge.n	800e77a <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e774:	f04f 33ff 	mov.w	r3, #4294967295
 800e778:	e034      	b.n	800e7e4 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e780:	697a      	ldr	r2, [r7, #20]
 800e782:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800e786:	fb02 f303 	mul.w	r3, r2, r3
 800e78a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e792:	693a      	ldr	r2, [r7, #16]
 800e794:	429a      	cmp	r2, r3
 800e796:	d00a      	beq.n	800e7ae <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e79e:	2320      	movs	r3, #32
 800e7a0:	2205      	movs	r2, #5
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f7ff fe97 	bl	800e4d6 <SCSI_SenseCode>
      return -1;
 800e7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ac:	e01a      	b.n	800e7e4 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7b4:	bf28      	it	cs
 800e7b6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e7ba:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	f103 020c 	add.w	r2, r3, #12
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	2101      	movs	r1, #1
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f006 fe2a 	bl	8015428 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	e005      	b.n	800e7e4 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800e7d8:	7afb      	ldrb	r3, [r7, #11]
 800e7da:	4619      	mov	r1, r3
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 f8ce 	bl	800e97e <SCSI_ProcessWrite>
 800e7e2:	4603      	mov	r3, r0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3718      	adds	r7, #24
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b086      	sub	sp, #24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	607a      	str	r2, [r7, #4]
 800e7f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e800:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	3301      	adds	r3, #1
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	f003 0302 	and.w	r3, r3, #2
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d008      	beq.n	800e822 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e810:	7af9      	ldrb	r1, [r7, #11]
 800e812:	2324      	movs	r3, #36	; 0x24
 800e814:	2205      	movs	r2, #5
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f7ff fe5d 	bl	800e4d6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e81c:	f04f 33ff 	mov.w	r3, #4294967295
 800e820:	e013      	b.n	800e84a <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e82e:	7af9      	ldrb	r1, [r7, #11]
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	f000 f80e 	bl	800e852 <SCSI_CheckAddressRange>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	da02      	bge.n	800e842 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800e83c:	f04f 33ff 	mov.w	r3, #4294967295
 800e840:	e003      	b.n	800e84a <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	2200      	movs	r2, #0
 800e846:	815a      	strh	r2, [r3, #10]
  return 0;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3718      	adds	r7, #24
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b086      	sub	sp, #24
 800e856:	af00      	add	r7, sp, #0
 800e858:	60f8      	str	r0, [r7, #12]
 800e85a:	607a      	str	r2, [r7, #4]
 800e85c:	603b      	str	r3, [r7, #0]
 800e85e:	460b      	mov	r3, r1
 800e860:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e868:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	441a      	add	r2, r3
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e876:	429a      	cmp	r2, r3
 800e878:	d908      	bls.n	800e88c <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e87a:	7af9      	ldrb	r1, [r7, #11]
 800e87c:	2321      	movs	r3, #33	; 0x21
 800e87e:	2205      	movs	r2, #5
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	f7ff fe28 	bl	800e4d6 <SCSI_SenseCode>
    return -1;
 800e886:	f04f 33ff 	mov.w	r3, #4294967295
 800e88a:	e000      	b.n	800e88e <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3718      	adds	r7, #24
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800e896:	b590      	push	{r4, r7, lr}
 800e898:	b085      	sub	sp, #20
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
 800e89e:	460b      	mov	r3, r1
 800e8a0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8a8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800e8b6:	fb02 f303 	mul.w	r3, r2, r3
 800e8ba:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8c2:	bf28      	it	cs
 800e8c4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e8c8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8d0:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	78f8      	ldrb	r0, [r7, #3]
 800e8f0:	47a0      	blx	r4
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	da08      	bge.n	800e90a <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e8f8:	78f9      	ldrb	r1, [r7, #3]
 800e8fa:	2311      	movs	r3, #17
 800e8fc:	2204      	movs	r2, #4
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f7ff fde9 	bl	800e4d6 <SCSI_SenseCode>
    return -1;
 800e904:	f04f 33ff 	mov.w	r3, #4294967295
 800e908:	e035      	b.n	800e976 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f103 020c 	add.w	r2, r3, #12
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	b29b      	uxth	r3, r3
 800e914:	2181      	movs	r1, #129	; 0x81
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f006 fd63 	bl	80153e2 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e928:	4619      	mov	r1, r3
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e930:	441a      	add	r2, r3
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e944:	4619      	mov	r1, r3
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	fbb3 f3f1 	udiv	r3, r3, r1
 800e94c:	1ad2      	subs	r2, r2, r3
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	1ad2      	subs	r2, r2, r3
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d102      	bne.n	800e974 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2203      	movs	r2, #3
 800e972:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3714      	adds	r7, #20
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd90      	pop	{r4, r7, pc}

0800e97e <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800e97e:	b590      	push	{r4, r7, lr}
 800e980:	b085      	sub	sp, #20
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
 800e986:	460b      	mov	r3, r1
 800e988:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e990:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800e99e:	fb02 f303 	mul.w	r3, r2, r3
 800e9a2:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9aa:	bf28      	it	cs
 800e9ac:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e9b0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9b8:	695c      	ldr	r4, [r3, #20]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f103 010c 	add.w	r1, r3, #12
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	78f8      	ldrb	r0, [r7, #3]
 800e9d8:	47a0      	blx	r4
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	da08      	bge.n	800e9f2 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e9e0:	78f9      	ldrb	r1, [r7, #3]
 800e9e2:	2303      	movs	r3, #3
 800e9e4:	2204      	movs	r2, #4
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7ff fd75 	bl	800e4d6 <SCSI_SenseCode>

    return -1;
 800e9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f0:	e045      	b.n	800ea7e <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e9fe:	4619      	mov	r1, r3
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea06:	441a      	add	r2, r3
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea22:	1ad2      	subs	r2, r2, r3
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	1ad2      	subs	r2, r2, r3
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d104      	bne.n	800ea4e <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ea44:	2100      	movs	r1, #0
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7ff f97a 	bl	800dd40 <MSC_BOT_SendCSW>
 800ea4c:	e016      	b.n	800ea7c <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800ea5a:	fb02 f303 	mul.w	r3, r2, r3
 800ea5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea62:	bf28      	it	cs
 800ea64:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ea68:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f103 020c 	add.w	r2, r3, #12
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	2101      	movs	r1, #1
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f006 fcd6 	bl	8015428 <USBD_LL_PrepareReceive>
  }

  return 0;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3714      	adds	r7, #20
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd90      	pop	{r4, r7, pc}

0800ea86 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b084      	sub	sp, #16
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	60f8      	str	r0, [r7, #12]
 800ea8e:	60b9      	str	r1, [r7, #8]
 800ea90:	4613      	mov	r3, r2
 800ea92:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d101      	bne.n	800ea9e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ea9a:	2302      	movs	r3, #2
 800ea9c:	e01a      	b.n	800ead4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d003      	beq.n	800eab0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	68ba      	ldr	r2, [r7, #8]
 800eaba:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2201      	movs	r2, #1
 800eac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	79fa      	ldrb	r2, [r7, #7]
 800eaca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f006 fb15 	bl	80150fc <USBD_LL_Init>

  return USBD_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3710      	adds	r7, #16
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800eae6:	2300      	movs	r3, #0
 800eae8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d006      	beq.n	800eafe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	73fb      	strb	r3, [r7, #15]
 800eafc:	e001      	b.n	800eb02 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800eafe:	2302      	movs	r3, #2
 800eb00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f006 fb3f 	bl	801519c <USBD_LL_Start>

  return USBD_OK;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	6852      	ldr	r2, [r2, #4]
 800eb3c:	b2d2      	uxtb	r2, r2
 800eb3e:	4611      	mov	r1, r2
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f006 fb44 	bl	80151d2 <USBD_LL_Stop>

  return USBD_OK;
 800eb4a:	2300      	movs	r3, #0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	370c      	adds	r7, #12
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr

0800eb6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b084      	sub	sp, #16
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
 800eb72:	460b      	mov	r3, r1
 800eb74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800eb76:	2302      	movs	r3, #2
 800eb78:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00c      	beq.n	800eb9e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	78fa      	ldrb	r2, [r7, #3]
 800eb8e:	4611      	mov	r1, r2
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	4798      	blx	r3
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d101      	bne.n	800eb9e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800eb9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	78fa      	ldrb	r2, [r7, #3]
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	4798      	blx	r3

  return USBD_OK;
 800ebc4:	2300      	movs	r3, #0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b082      	sub	sp, #8
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ebde:	6839      	ldr	r1, [r7, #0]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f000 ff09 	bl	800f9f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ec02:	f003 031f 	and.w	r3, r3, #31
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d00c      	beq.n	800ec24 <USBD_LL_SetupStage+0x56>
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d302      	bcc.n	800ec14 <USBD_LL_SetupStage+0x46>
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d010      	beq.n	800ec34 <USBD_LL_SetupStage+0x66>
 800ec12:	e017      	b.n	800ec44 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 fa09 	bl	800f034 <USBD_StdDevReq>
      break;
 800ec22:	e01a      	b.n	800ec5a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 fa6b 	bl	800f108 <USBD_StdItfReq>
      break;
 800ec32:	e012      	b.n	800ec5a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 faa9 	bl	800f194 <USBD_StdEPReq>
      break;
 800ec42:	e00a      	b.n	800ec5a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ec4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	4619      	mov	r1, r3
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f006 fb3c 	bl	80152d0 <USBD_LL_StallEP>
      break;
 800ec58:	bf00      	nop
  }

  return USBD_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	607a      	str	r2, [r7, #4]
 800ec70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ec72:	7afb      	ldrb	r3, [r7, #11]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d14b      	bne.n	800ed10 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ec7e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ec86:	2b03      	cmp	r3, #3
 800ec88:	d134      	bne.n	800ecf4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	68da      	ldr	r2, [r3, #12]
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d919      	bls.n	800ecca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	68da      	ldr	r2, [r3, #12]
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	1ad2      	subs	r2, r2, r3
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	68da      	ldr	r2, [r3, #12]
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d203      	bcs.n	800ecb8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	e002      	b.n	800ecbe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	6879      	ldr	r1, [r7, #4]
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	f000 ff6e 	bl	800fba4 <USBD_CtlContinueRx>
 800ecc8:	e038      	b.n	800ed3c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00a      	beq.n	800ecec <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ecdc:	2b03      	cmp	r3, #3
 800ecde:	d105      	bne.n	800ecec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f000 ff6b 	bl	800fbc8 <USBD_CtlSendStatus>
 800ecf2:	e023      	b.n	800ed3c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ecfa:	2b05      	cmp	r3, #5
 800ecfc:	d11e      	bne.n	800ed3c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ed06:	2100      	movs	r1, #0
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f006 fae1 	bl	80152d0 <USBD_LL_StallEP>
 800ed0e:	e015      	b.n	800ed3c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed16:	699b      	ldr	r3, [r3, #24]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00d      	beq.n	800ed38 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ed22:	2b03      	cmp	r3, #3
 800ed24:	d108      	bne.n	800ed38 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed2c:	699b      	ldr	r3, [r3, #24]
 800ed2e:	7afa      	ldrb	r2, [r7, #11]
 800ed30:	4611      	mov	r1, r2
 800ed32:	68f8      	ldr	r0, [r7, #12]
 800ed34:	4798      	blx	r3
 800ed36:	e001      	b.n	800ed3c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ed38:	2302      	movs	r3, #2
 800ed3a:	e000      	b.n	800ed3e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3718      	adds	r7, #24
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b086      	sub	sp, #24
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	60f8      	str	r0, [r7, #12]
 800ed4e:	460b      	mov	r3, r1
 800ed50:	607a      	str	r2, [r7, #4]
 800ed52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ed54:	7afb      	ldrb	r3, [r7, #11]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d17f      	bne.n	800ee5a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	3314      	adds	r3, #20
 800ed5e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d15c      	bne.n	800ee24 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	68da      	ldr	r2, [r3, #12]
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d915      	bls.n	800eda2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	68da      	ldr	r2, [r3, #12]
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	1ad2      	subs	r2, r2, r3
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	6879      	ldr	r1, [r7, #4]
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f000 fef6 	bl	800fb80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed94:	2300      	movs	r3, #0
 800ed96:	2200      	movs	r2, #0
 800ed98:	2100      	movs	r1, #0
 800ed9a:	68f8      	ldr	r0, [r7, #12]
 800ed9c:	f006 fb44 	bl	8015428 <USBD_LL_PrepareReceive>
 800eda0:	e04e      	b.n	800ee40 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	697a      	ldr	r2, [r7, #20]
 800eda8:	6912      	ldr	r2, [r2, #16]
 800edaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800edae:	fb02 f201 	mul.w	r2, r2, r1
 800edb2:	1a9b      	subs	r3, r3, r2
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d11c      	bne.n	800edf2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	689a      	ldr	r2, [r3, #8]
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d316      	bcc.n	800edf2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	689a      	ldr	r2, [r3, #8]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800edce:	429a      	cmp	r2, r3
 800edd0:	d20f      	bcs.n	800edf2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800edd2:	2200      	movs	r2, #0
 800edd4:	2100      	movs	r1, #0
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f000 fed2 	bl	800fb80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ede4:	2300      	movs	r3, #0
 800ede6:	2200      	movs	r2, #0
 800ede8:	2100      	movs	r1, #0
 800edea:	68f8      	ldr	r0, [r7, #12]
 800edec:	f006 fb1c 	bl	8015428 <USBD_LL_PrepareReceive>
 800edf0:	e026      	b.n	800ee40 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00a      	beq.n	800ee14 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ee04:	2b03      	cmp	r3, #3
 800ee06:	d105      	bne.n	800ee14 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ee14:	2180      	movs	r1, #128	; 0x80
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f006 fa5a 	bl	80152d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 fee6 	bl	800fbee <USBD_CtlReceiveStatus>
 800ee22:	e00d      	b.n	800ee40 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee2a:	2b04      	cmp	r3, #4
 800ee2c:	d004      	beq.n	800ee38 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d103      	bne.n	800ee40 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ee38:	2180      	movs	r1, #128	; 0x80
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f006 fa48 	bl	80152d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d11d      	bne.n	800ee86 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	f7ff fe82 	bl	800eb54 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ee58:	e015      	b.n	800ee86 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee60:	695b      	ldr	r3, [r3, #20]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00d      	beq.n	800ee82 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ee6c:	2b03      	cmp	r3, #3
 800ee6e:	d108      	bne.n	800ee82 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee76:	695b      	ldr	r3, [r3, #20]
 800ee78:	7afa      	ldrb	r2, [r7, #11]
 800ee7a:	4611      	mov	r1, r2
 800ee7c:	68f8      	ldr	r0, [r7, #12]
 800ee7e:	4798      	blx	r3
 800ee80:	e001      	b.n	800ee86 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ee82:	2302      	movs	r3, #2
 800ee84:	e000      	b.n	800ee88 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee98:	2340      	movs	r3, #64	; 0x40
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f006 f9b2 	bl	8015208 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2201      	movs	r2, #1
 800eea8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2240      	movs	r2, #64	; 0x40
 800eeb0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eeb4:	2340      	movs	r3, #64	; 0x40
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	2180      	movs	r1, #128	; 0x80
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f006 f9a4 	bl	8015208 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2240      	movs	r2, #64	; 0x40
 800eeca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2200      	movs	r2, #0
 800eed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d009      	beq.n	800ef08 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	6852      	ldr	r2, [r2, #4]
 800ef00:	b2d2      	uxtb	r2, r2
 800ef02:	4611      	mov	r1, r2
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	4798      	blx	r3
  }

  return USBD_OK;
 800ef08:	2300      	movs	r3, #0
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef12:	b480      	push	{r7}
 800ef14:	b083      	sub	sp, #12
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	78fa      	ldrb	r2, [r7, #3]
 800ef22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef24:	2300      	movs	r3, #0
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	370c      	adds	r7, #12
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr

0800ef32 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ef32:	b480      	push	{r7}
 800ef34:	b083      	sub	sp, #12
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2204      	movs	r2, #4
 800ef4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef6a:	2b04      	cmp	r3, #4
 800ef6c:	d105      	bne.n	800ef7a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef96:	2b03      	cmp	r3, #3
 800ef98:	d10b      	bne.n	800efb2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efa0:	69db      	ldr	r3, [r3, #28]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d005      	beq.n	800efb2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efac:	69db      	ldr	r3, [r3, #28]
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3708      	adds	r7, #8
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	460b      	mov	r3, r1
 800efc6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	370c      	adds	r7, #12
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr

0800efd6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800efd6:	b480      	push	{r7}
 800efd8:	b083      	sub	sp, #12
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
 800efde:	460b      	mov	r3, r1
 800efe0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800efe2:	2300      	movs	r3, #0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eff8:	2300      	movs	r3, #0
}
 800effa:	4618      	mov	r0, r3
 800effc:	370c      	adds	r7, #12
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr

0800f006 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f006:	b580      	push	{r7, lr}
 800f008:	b082      	sub	sp, #8
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2201      	movs	r2, #1
 800f012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	6852      	ldr	r2, [r2, #4]
 800f022:	b2d2      	uxtb	r2, r2
 800f024:	4611      	mov	r1, r2
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	4798      	blx	r3

  return USBD_OK;
 800f02a:	2300      	movs	r3, #0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3708      	adds	r7, #8
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f04a:	2b20      	cmp	r3, #32
 800f04c:	d004      	beq.n	800f058 <USBD_StdDevReq+0x24>
 800f04e:	2b40      	cmp	r3, #64	; 0x40
 800f050:	d002      	beq.n	800f058 <USBD_StdDevReq+0x24>
 800f052:	2b00      	cmp	r3, #0
 800f054:	d008      	beq.n	800f068 <USBD_StdDevReq+0x34>
 800f056:	e04c      	b.n	800f0f2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	6839      	ldr	r1, [r7, #0]
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	4798      	blx	r3
      break;
 800f066:	e049      	b.n	800f0fc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	785b      	ldrb	r3, [r3, #1]
 800f06c:	2b09      	cmp	r3, #9
 800f06e:	d83a      	bhi.n	800f0e6 <USBD_StdDevReq+0xb2>
 800f070:	a201      	add	r2, pc, #4	; (adr r2, 800f078 <USBD_StdDevReq+0x44>)
 800f072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f076:	bf00      	nop
 800f078:	0800f0c9 	.word	0x0800f0c9
 800f07c:	0800f0dd 	.word	0x0800f0dd
 800f080:	0800f0e7 	.word	0x0800f0e7
 800f084:	0800f0d3 	.word	0x0800f0d3
 800f088:	0800f0e7 	.word	0x0800f0e7
 800f08c:	0800f0ab 	.word	0x0800f0ab
 800f090:	0800f0a1 	.word	0x0800f0a1
 800f094:	0800f0e7 	.word	0x0800f0e7
 800f098:	0800f0bf 	.word	0x0800f0bf
 800f09c:	0800f0b5 	.word	0x0800f0b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f000 f9d4 	bl	800f450 <USBD_GetDescriptor>
          break;
 800f0a8:	e022      	b.n	800f0f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f0aa:	6839      	ldr	r1, [r7, #0]
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 fb37 	bl	800f720 <USBD_SetAddress>
          break;
 800f0b2:	e01d      	b.n	800f0f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800f0b4:	6839      	ldr	r1, [r7, #0]
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 fb74 	bl	800f7a4 <USBD_SetConfig>
          break;
 800f0bc:	e018      	b.n	800f0f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f0be:	6839      	ldr	r1, [r7, #0]
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f000 fbfd 	bl	800f8c0 <USBD_GetConfig>
          break;
 800f0c6:	e013      	b.n	800f0f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f0c8:	6839      	ldr	r1, [r7, #0]
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 fc2c 	bl	800f928 <USBD_GetStatus>
          break;
 800f0d0:	e00e      	b.n	800f0f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 fc5a 	bl	800f98e <USBD_SetFeature>
          break;
 800f0da:	e009      	b.n	800f0f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f0dc:	6839      	ldr	r1, [r7, #0]
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 fc69 	bl	800f9b6 <USBD_ClrFeature>
          break;
 800f0e4:	e004      	b.n	800f0f0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800f0e6:	6839      	ldr	r1, [r7, #0]
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f000 fcc2 	bl	800fa72 <USBD_CtlError>
          break;
 800f0ee:	bf00      	nop
      }
      break;
 800f0f0:	e004      	b.n	800f0fc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 fcbc 	bl	800fa72 <USBD_CtlError>
      break;
 800f0fa:	bf00      	nop
  }

  return ret;
 800f0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop

0800f108 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f112:	2300      	movs	r3, #0
 800f114:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f11e:	2b20      	cmp	r3, #32
 800f120:	d003      	beq.n	800f12a <USBD_StdItfReq+0x22>
 800f122:	2b40      	cmp	r3, #64	; 0x40
 800f124:	d001      	beq.n	800f12a <USBD_StdItfReq+0x22>
 800f126:	2b00      	cmp	r3, #0
 800f128:	d12a      	bne.n	800f180 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f130:	3b01      	subs	r3, #1
 800f132:	2b02      	cmp	r3, #2
 800f134:	d81d      	bhi.n	800f172 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	889b      	ldrh	r3, [r3, #4]
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d813      	bhi.n	800f168 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f146:	689b      	ldr	r3, [r3, #8]
 800f148:	6839      	ldr	r1, [r7, #0]
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	4798      	blx	r3
 800f14e:	4603      	mov	r3, r0
 800f150:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	88db      	ldrh	r3, [r3, #6]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d110      	bne.n	800f17c <USBD_StdItfReq+0x74>
 800f15a:	7bfb      	ldrb	r3, [r7, #15]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10d      	bne.n	800f17c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 fd31 	bl	800fbc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f166:	e009      	b.n	800f17c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800f168:	6839      	ldr	r1, [r7, #0]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 fc81 	bl	800fa72 <USBD_CtlError>
          break;
 800f170:	e004      	b.n	800f17c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800f172:	6839      	ldr	r1, [r7, #0]
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 fc7c 	bl	800fa72 <USBD_CtlError>
          break;
 800f17a:	e000      	b.n	800f17e <USBD_StdItfReq+0x76>
          break;
 800f17c:	bf00      	nop
      }
      break;
 800f17e:	e004      	b.n	800f18a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800f180:	6839      	ldr	r1, [r7, #0]
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 fc75 	bl	800fa72 <USBD_CtlError>
      break;
 800f188:	bf00      	nop
  }

  return USBD_OK;
 800f18a:	2300      	movs	r3, #0
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	889b      	ldrh	r3, [r3, #4]
 800f1a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1b0:	2b20      	cmp	r3, #32
 800f1b2:	d004      	beq.n	800f1be <USBD_StdEPReq+0x2a>
 800f1b4:	2b40      	cmp	r3, #64	; 0x40
 800f1b6:	d002      	beq.n	800f1be <USBD_StdEPReq+0x2a>
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d008      	beq.n	800f1ce <USBD_StdEPReq+0x3a>
 800f1bc:	e13d      	b.n	800f43a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	6839      	ldr	r1, [r7, #0]
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	4798      	blx	r3
      break;
 800f1cc:	e13a      	b.n	800f444 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1d6:	2b20      	cmp	r3, #32
 800f1d8:	d10a      	bne.n	800f1f0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1e0:	689b      	ldr	r3, [r3, #8]
 800f1e2:	6839      	ldr	r1, [r7, #0]
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	4798      	blx	r3
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	73fb      	strb	r3, [r7, #15]

        return ret;
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
 800f1ee:	e12a      	b.n	800f446 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	785b      	ldrb	r3, [r3, #1]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d03e      	beq.n	800f276 <USBD_StdEPReq+0xe2>
 800f1f8:	2b03      	cmp	r3, #3
 800f1fa:	d002      	beq.n	800f202 <USBD_StdEPReq+0x6e>
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d070      	beq.n	800f2e2 <USBD_StdEPReq+0x14e>
 800f200:	e115      	b.n	800f42e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d002      	beq.n	800f212 <USBD_StdEPReq+0x7e>
 800f20c:	2b03      	cmp	r3, #3
 800f20e:	d015      	beq.n	800f23c <USBD_StdEPReq+0xa8>
 800f210:	e02b      	b.n	800f26a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f212:	7bbb      	ldrb	r3, [r7, #14]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00c      	beq.n	800f232 <USBD_StdEPReq+0x9e>
 800f218:	7bbb      	ldrb	r3, [r7, #14]
 800f21a:	2b80      	cmp	r3, #128	; 0x80
 800f21c:	d009      	beq.n	800f232 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800f21e:	7bbb      	ldrb	r3, [r7, #14]
 800f220:	4619      	mov	r1, r3
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f006 f854 	bl	80152d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800f228:	2180      	movs	r1, #128	; 0x80
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f006 f850 	bl	80152d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f230:	e020      	b.n	800f274 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800f232:	6839      	ldr	r1, [r7, #0]
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f000 fc1c 	bl	800fa72 <USBD_CtlError>
              break;
 800f23a:	e01b      	b.n	800f274 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	885b      	ldrh	r3, [r3, #2]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d10e      	bne.n	800f262 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800f244:	7bbb      	ldrb	r3, [r7, #14]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00b      	beq.n	800f262 <USBD_StdEPReq+0xce>
 800f24a:	7bbb      	ldrb	r3, [r7, #14]
 800f24c:	2b80      	cmp	r3, #128	; 0x80
 800f24e:	d008      	beq.n	800f262 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	88db      	ldrh	r3, [r3, #6]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d104      	bne.n	800f262 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800f258:	7bbb      	ldrb	r3, [r7, #14]
 800f25a:	4619      	mov	r1, r3
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f006 f837 	bl	80152d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 fcb0 	bl	800fbc8 <USBD_CtlSendStatus>

              break;
 800f268:	e004      	b.n	800f274 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 fc00 	bl	800fa72 <USBD_CtlError>
              break;
 800f272:	bf00      	nop
          }
          break;
 800f274:	e0e0      	b.n	800f438 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f27c:	2b02      	cmp	r3, #2
 800f27e:	d002      	beq.n	800f286 <USBD_StdEPReq+0xf2>
 800f280:	2b03      	cmp	r3, #3
 800f282:	d015      	beq.n	800f2b0 <USBD_StdEPReq+0x11c>
 800f284:	e026      	b.n	800f2d4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f286:	7bbb      	ldrb	r3, [r7, #14]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00c      	beq.n	800f2a6 <USBD_StdEPReq+0x112>
 800f28c:	7bbb      	ldrb	r3, [r7, #14]
 800f28e:	2b80      	cmp	r3, #128	; 0x80
 800f290:	d009      	beq.n	800f2a6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800f292:	7bbb      	ldrb	r3, [r7, #14]
 800f294:	4619      	mov	r1, r3
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f006 f81a 	bl	80152d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800f29c:	2180      	movs	r1, #128	; 0x80
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f006 f816 	bl	80152d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f2a4:	e01c      	b.n	800f2e0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800f2a6:	6839      	ldr	r1, [r7, #0]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 fbe2 	bl	800fa72 <USBD_CtlError>
              break;
 800f2ae:	e017      	b.n	800f2e0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	885b      	ldrh	r3, [r3, #2]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d112      	bne.n	800f2de <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f2b8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d004      	beq.n	800f2cc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800f2c2:	7bbb      	ldrb	r3, [r7, #14]
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f006 f821 	bl	801530e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 fc7b 	bl	800fbc8 <USBD_CtlSendStatus>
              }
              break;
 800f2d2:	e004      	b.n	800f2de <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800f2d4:	6839      	ldr	r1, [r7, #0]
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 fbcb 	bl	800fa72 <USBD_CtlError>
              break;
 800f2dc:	e000      	b.n	800f2e0 <USBD_StdEPReq+0x14c>
              break;
 800f2de:	bf00      	nop
          }
          break;
 800f2e0:	e0aa      	b.n	800f438 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2e8:	2b02      	cmp	r3, #2
 800f2ea:	d002      	beq.n	800f2f2 <USBD_StdEPReq+0x15e>
 800f2ec:	2b03      	cmp	r3, #3
 800f2ee:	d032      	beq.n	800f356 <USBD_StdEPReq+0x1c2>
 800f2f0:	e097      	b.n	800f422 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2f2:	7bbb      	ldrb	r3, [r7, #14]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d007      	beq.n	800f308 <USBD_StdEPReq+0x174>
 800f2f8:	7bbb      	ldrb	r3, [r7, #14]
 800f2fa:	2b80      	cmp	r3, #128	; 0x80
 800f2fc:	d004      	beq.n	800f308 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800f2fe:	6839      	ldr	r1, [r7, #0]
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f000 fbb6 	bl	800fa72 <USBD_CtlError>
                break;
 800f306:	e091      	b.n	800f42c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	da0b      	bge.n	800f328 <USBD_StdEPReq+0x194>
 800f310:	7bbb      	ldrb	r3, [r7, #14]
 800f312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f316:	4613      	mov	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4413      	add	r3, r2
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	3310      	adds	r3, #16
 800f320:	687a      	ldr	r2, [r7, #4]
 800f322:	4413      	add	r3, r2
 800f324:	3304      	adds	r3, #4
 800f326:	e00b      	b.n	800f340 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f328:	7bbb      	ldrb	r3, [r7, #14]
 800f32a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f32e:	4613      	mov	r3, r2
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	4413      	add	r3, r2
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	4413      	add	r3, r2
 800f33e:	3304      	adds	r3, #4
 800f340:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	2200      	movs	r2, #0
 800f346:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	2202      	movs	r2, #2
 800f34c:	4619      	mov	r1, r3
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 fbfa 	bl	800fb48 <USBD_CtlSendData>
              break;
 800f354:	e06a      	b.n	800f42c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	da11      	bge.n	800f382 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f35e:	7bbb      	ldrb	r3, [r7, #14]
 800f360:	f003 020f 	and.w	r2, r3, #15
 800f364:	6879      	ldr	r1, [r7, #4]
 800f366:	4613      	mov	r3, r2
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	4413      	add	r3, r2
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	440b      	add	r3, r1
 800f370:	3318      	adds	r3, #24
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d117      	bne.n	800f3a8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800f378:	6839      	ldr	r1, [r7, #0]
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fb79 	bl	800fa72 <USBD_CtlError>
                  break;
 800f380:	e054      	b.n	800f42c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f382:	7bbb      	ldrb	r3, [r7, #14]
 800f384:	f003 020f 	and.w	r2, r3, #15
 800f388:	6879      	ldr	r1, [r7, #4]
 800f38a:	4613      	mov	r3, r2
 800f38c:	009b      	lsls	r3, r3, #2
 800f38e:	4413      	add	r3, r2
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	440b      	add	r3, r1
 800f394:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d104      	bne.n	800f3a8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800f39e:	6839      	ldr	r1, [r7, #0]
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fb66 	bl	800fa72 <USBD_CtlError>
                  break;
 800f3a6:	e041      	b.n	800f42c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	da0b      	bge.n	800f3c8 <USBD_StdEPReq+0x234>
 800f3b0:	7bbb      	ldrb	r3, [r7, #14]
 800f3b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	4413      	add	r3, r2
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	3310      	adds	r3, #16
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	e00b      	b.n	800f3e0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f3c8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3ce:	4613      	mov	r3, r2
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	4413      	add	r3, r2
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	4413      	add	r3, r2
 800f3de:	3304      	adds	r3, #4
 800f3e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f3e2:	7bbb      	ldrb	r3, [r7, #14]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d002      	beq.n	800f3ee <USBD_StdEPReq+0x25a>
 800f3e8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ea:	2b80      	cmp	r3, #128	; 0x80
 800f3ec:	d103      	bne.n	800f3f6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	601a      	str	r2, [r3, #0]
 800f3f4:	e00e      	b.n	800f414 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800f3f6:	7bbb      	ldrb	r3, [r7, #14]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f005 ffa6 	bl	801534c <USBD_LL_IsStallEP>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	d003      	beq.n	800f40e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2201      	movs	r2, #1
 800f40a:	601a      	str	r2, [r3, #0]
 800f40c:	e002      	b.n	800f414 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	2200      	movs	r2, #0
 800f412:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	2202      	movs	r2, #2
 800f418:	4619      	mov	r1, r3
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 fb94 	bl	800fb48 <USBD_CtlSendData>
              break;
 800f420:	e004      	b.n	800f42c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800f422:	6839      	ldr	r1, [r7, #0]
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 fb24 	bl	800fa72 <USBD_CtlError>
              break;
 800f42a:	bf00      	nop
          }
          break;
 800f42c:	e004      	b.n	800f438 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800f42e:	6839      	ldr	r1, [r7, #0]
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fb1e 	bl	800fa72 <USBD_CtlError>
          break;
 800f436:	bf00      	nop
      }
      break;
 800f438:	e004      	b.n	800f444 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800f43a:	6839      	ldr	r1, [r7, #0]
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 fb18 	bl	800fa72 <USBD_CtlError>
      break;
 800f442:	bf00      	nop
  }

  return ret;
 800f444:	7bfb      	ldrb	r3, [r7, #15]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
	...

0800f450 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f45a:	2300      	movs	r3, #0
 800f45c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f45e:	2300      	movs	r3, #0
 800f460:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f462:	2300      	movs	r3, #0
 800f464:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	885b      	ldrh	r3, [r3, #2]
 800f46a:	0a1b      	lsrs	r3, r3, #8
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	3b01      	subs	r3, #1
 800f470:	2b06      	cmp	r3, #6
 800f472:	f200 8128 	bhi.w	800f6c6 <USBD_GetDescriptor+0x276>
 800f476:	a201      	add	r2, pc, #4	; (adr r2, 800f47c <USBD_GetDescriptor+0x2c>)
 800f478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f47c:	0800f499 	.word	0x0800f499
 800f480:	0800f4b1 	.word	0x0800f4b1
 800f484:	0800f4f1 	.word	0x0800f4f1
 800f488:	0800f6c7 	.word	0x0800f6c7
 800f48c:	0800f6c7 	.word	0x0800f6c7
 800f490:	0800f667 	.word	0x0800f667
 800f494:	0800f693 	.word	0x0800f693
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	7c12      	ldrb	r2, [r2, #16]
 800f4a4:	f107 0108 	add.w	r1, r7, #8
 800f4a8:	4610      	mov	r0, r2
 800f4aa:	4798      	blx	r3
 800f4ac:	60f8      	str	r0, [r7, #12]
      break;
 800f4ae:	e112      	b.n	800f6d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	7c1b      	ldrb	r3, [r3, #16]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d10d      	bne.n	800f4d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4c0:	f107 0208 	add.w	r2, r7, #8
 800f4c4:	4610      	mov	r0, r2
 800f4c6:	4798      	blx	r3
 800f4c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	2202      	movs	r2, #2
 800f4d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f4d2:	e100      	b.n	800f6d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4dc:	f107 0208 	add.w	r2, r7, #8
 800f4e0:	4610      	mov	r0, r2
 800f4e2:	4798      	blx	r3
 800f4e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	2202      	movs	r2, #2
 800f4ec:	701a      	strb	r2, [r3, #0]
      break;
 800f4ee:	e0f2      	b.n	800f6d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	885b      	ldrh	r3, [r3, #2]
 800f4f4:	b2db      	uxtb	r3, r3
 800f4f6:	2b05      	cmp	r3, #5
 800f4f8:	f200 80ac 	bhi.w	800f654 <USBD_GetDescriptor+0x204>
 800f4fc:	a201      	add	r2, pc, #4	; (adr r2, 800f504 <USBD_GetDescriptor+0xb4>)
 800f4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f502:	bf00      	nop
 800f504:	0800f51d 	.word	0x0800f51d
 800f508:	0800f551 	.word	0x0800f551
 800f50c:	0800f585 	.word	0x0800f585
 800f510:	0800f5b9 	.word	0x0800f5b9
 800f514:	0800f5ed 	.word	0x0800f5ed
 800f518:	0800f621 	.word	0x0800f621
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d00b      	beq.n	800f540 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	7c12      	ldrb	r2, [r2, #16]
 800f534:	f107 0108 	add.w	r1, r7, #8
 800f538:	4610      	mov	r0, r2
 800f53a:	4798      	blx	r3
 800f53c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f53e:	e091      	b.n	800f664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f540:	6839      	ldr	r1, [r7, #0]
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 fa95 	bl	800fa72 <USBD_CtlError>
            err++;
 800f548:	7afb      	ldrb	r3, [r7, #11]
 800f54a:	3301      	adds	r3, #1
 800f54c:	72fb      	strb	r3, [r7, #11]
          break;
 800f54e:	e089      	b.n	800f664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f556:	689b      	ldr	r3, [r3, #8]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d00b      	beq.n	800f574 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	7c12      	ldrb	r2, [r2, #16]
 800f568:	f107 0108 	add.w	r1, r7, #8
 800f56c:	4610      	mov	r0, r2
 800f56e:	4798      	blx	r3
 800f570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f572:	e077      	b.n	800f664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f574:	6839      	ldr	r1, [r7, #0]
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 fa7b 	bl	800fa72 <USBD_CtlError>
            err++;
 800f57c:	7afb      	ldrb	r3, [r7, #11]
 800f57e:	3301      	adds	r3, #1
 800f580:	72fb      	strb	r3, [r7, #11]
          break;
 800f582:	e06f      	b.n	800f664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00b      	beq.n	800f5a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	7c12      	ldrb	r2, [r2, #16]
 800f59c:	f107 0108 	add.w	r1, r7, #8
 800f5a0:	4610      	mov	r0, r2
 800f5a2:	4798      	blx	r3
 800f5a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5a6:	e05d      	b.n	800f664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5a8:	6839      	ldr	r1, [r7, #0]
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 fa61 	bl	800fa72 <USBD_CtlError>
            err++;
 800f5b0:	7afb      	ldrb	r3, [r7, #11]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	72fb      	strb	r3, [r7, #11]
          break;
 800f5b6:	e055      	b.n	800f664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f5be:	691b      	ldr	r3, [r3, #16]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d00b      	beq.n	800f5dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f5ca:	691b      	ldr	r3, [r3, #16]
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	7c12      	ldrb	r2, [r2, #16]
 800f5d0:	f107 0108 	add.w	r1, r7, #8
 800f5d4:	4610      	mov	r0, r2
 800f5d6:	4798      	blx	r3
 800f5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5da:	e043      	b.n	800f664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5dc:	6839      	ldr	r1, [r7, #0]
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 fa47 	bl	800fa72 <USBD_CtlError>
            err++;
 800f5e4:	7afb      	ldrb	r3, [r7, #11]
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	72fb      	strb	r3, [r7, #11]
          break;
 800f5ea:	e03b      	b.n	800f664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f5f2:	695b      	ldr	r3, [r3, #20]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00b      	beq.n	800f610 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f5fe:	695b      	ldr	r3, [r3, #20]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	7c12      	ldrb	r2, [r2, #16]
 800f604:	f107 0108 	add.w	r1, r7, #8
 800f608:	4610      	mov	r0, r2
 800f60a:	4798      	blx	r3
 800f60c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f60e:	e029      	b.n	800f664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f610:	6839      	ldr	r1, [r7, #0]
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 fa2d 	bl	800fa72 <USBD_CtlError>
            err++;
 800f618:	7afb      	ldrb	r3, [r7, #11]
 800f61a:	3301      	adds	r3, #1
 800f61c:	72fb      	strb	r3, [r7, #11]
          break;
 800f61e:	e021      	b.n	800f664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f626:	699b      	ldr	r3, [r3, #24]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d00b      	beq.n	800f644 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f632:	699b      	ldr	r3, [r3, #24]
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	7c12      	ldrb	r2, [r2, #16]
 800f638:	f107 0108 	add.w	r1, r7, #8
 800f63c:	4610      	mov	r0, r2
 800f63e:	4798      	blx	r3
 800f640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f642:	e00f      	b.n	800f664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f644:	6839      	ldr	r1, [r7, #0]
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 fa13 	bl	800fa72 <USBD_CtlError>
            err++;
 800f64c:	7afb      	ldrb	r3, [r7, #11]
 800f64e:	3301      	adds	r3, #1
 800f650:	72fb      	strb	r3, [r7, #11]
          break;
 800f652:	e007      	b.n	800f664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800f654:	6839      	ldr	r1, [r7, #0]
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f000 fa0b 	bl	800fa72 <USBD_CtlError>
          err++;
 800f65c:	7afb      	ldrb	r3, [r7, #11]
 800f65e:	3301      	adds	r3, #1
 800f660:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800f662:	e038      	b.n	800f6d6 <USBD_GetDescriptor+0x286>
 800f664:	e037      	b.n	800f6d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	7c1b      	ldrb	r3, [r3, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d109      	bne.n	800f682 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f676:	f107 0208 	add.w	r2, r7, #8
 800f67a:	4610      	mov	r0, r2
 800f67c:	4798      	blx	r3
 800f67e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f680:	e029      	b.n	800f6d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f682:	6839      	ldr	r1, [r7, #0]
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f000 f9f4 	bl	800fa72 <USBD_CtlError>
        err++;
 800f68a:	7afb      	ldrb	r3, [r7, #11]
 800f68c:	3301      	adds	r3, #1
 800f68e:	72fb      	strb	r3, [r7, #11]
      break;
 800f690:	e021      	b.n	800f6d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	7c1b      	ldrb	r3, [r3, #16]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d10d      	bne.n	800f6b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6a2:	f107 0208 	add.w	r2, r7, #8
 800f6a6:	4610      	mov	r0, r2
 800f6a8:	4798      	blx	r3
 800f6aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	2207      	movs	r2, #7
 800f6b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f6b4:	e00f      	b.n	800f6d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f6b6:	6839      	ldr	r1, [r7, #0]
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f000 f9da 	bl	800fa72 <USBD_CtlError>
        err++;
 800f6be:	7afb      	ldrb	r3, [r7, #11]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	72fb      	strb	r3, [r7, #11]
      break;
 800f6c4:	e007      	b.n	800f6d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f6c6:	6839      	ldr	r1, [r7, #0]
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f000 f9d2 	bl	800fa72 <USBD_CtlError>
      err++;
 800f6ce:	7afb      	ldrb	r3, [r7, #11]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	72fb      	strb	r3, [r7, #11]
      break;
 800f6d4:	bf00      	nop
  }

  if (err != 0U)
 800f6d6:	7afb      	ldrb	r3, [r7, #11]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d11c      	bne.n	800f716 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800f6dc:	893b      	ldrh	r3, [r7, #8]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d011      	beq.n	800f706 <USBD_GetDescriptor+0x2b6>
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	88db      	ldrh	r3, [r3, #6]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00d      	beq.n	800f706 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	88da      	ldrh	r2, [r3, #6]
 800f6ee:	893b      	ldrh	r3, [r7, #8]
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	bf28      	it	cs
 800f6f4:	4613      	movcs	r3, r2
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f6fa:	893b      	ldrh	r3, [r7, #8]
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	68f9      	ldr	r1, [r7, #12]
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 fa21 	bl	800fb48 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	88db      	ldrh	r3, [r3, #6]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d104      	bne.n	800f718 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f000 fa5a 	bl	800fbc8 <USBD_CtlSendStatus>
 800f714:	e000      	b.n	800f718 <USBD_GetDescriptor+0x2c8>
    return;
 800f716:	bf00      	nop
    }
  }
}
 800f718:	3710      	adds	r7, #16
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop

0800f720 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	889b      	ldrh	r3, [r3, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d130      	bne.n	800f794 <USBD_SetAddress+0x74>
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	88db      	ldrh	r3, [r3, #6]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d12c      	bne.n	800f794 <USBD_SetAddress+0x74>
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	885b      	ldrh	r3, [r3, #2]
 800f73e:	2b7f      	cmp	r3, #127	; 0x7f
 800f740:	d828      	bhi.n	800f794 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	885b      	ldrh	r3, [r3, #2]
 800f746:	b2db      	uxtb	r3, r3
 800f748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f74c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f754:	2b03      	cmp	r3, #3
 800f756:	d104      	bne.n	800f762 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f758:	6839      	ldr	r1, [r7, #0]
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f000 f989 	bl	800fa72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f760:	e01c      	b.n	800f79c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	7bfa      	ldrb	r2, [r7, #15]
 800f766:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f76a:	7bfb      	ldrb	r3, [r7, #15]
 800f76c:	4619      	mov	r1, r3
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f005 fe18 	bl	80153a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 fa27 	bl	800fbc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f77a:	7bfb      	ldrb	r3, [r7, #15]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d004      	beq.n	800f78a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2202      	movs	r2, #2
 800f784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f788:	e008      	b.n	800f79c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2201      	movs	r2, #1
 800f78e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f792:	e003      	b.n	800f79c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f794:	6839      	ldr	r1, [r7, #0]
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 f96b 	bl	800fa72 <USBD_CtlError>
  }
}
 800f79c:	bf00      	nop
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	885b      	ldrh	r3, [r3, #2]
 800f7b2:	b2da      	uxtb	r2, r3
 800f7b4:	4b41      	ldr	r3, [pc, #260]	; (800f8bc <USBD_SetConfig+0x118>)
 800f7b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f7b8:	4b40      	ldr	r3, [pc, #256]	; (800f8bc <USBD_SetConfig+0x118>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d904      	bls.n	800f7ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800f7c0:	6839      	ldr	r1, [r7, #0]
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 f955 	bl	800fa72 <USBD_CtlError>
 800f7c8:	e075      	b.n	800f8b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7d0:	2b02      	cmp	r3, #2
 800f7d2:	d002      	beq.n	800f7da <USBD_SetConfig+0x36>
 800f7d4:	2b03      	cmp	r3, #3
 800f7d6:	d023      	beq.n	800f820 <USBD_SetConfig+0x7c>
 800f7d8:	e062      	b.n	800f8a0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800f7da:	4b38      	ldr	r3, [pc, #224]	; (800f8bc <USBD_SetConfig+0x118>)
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d01a      	beq.n	800f818 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800f7e2:	4b36      	ldr	r3, [pc, #216]	; (800f8bc <USBD_SetConfig+0x118>)
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2203      	movs	r2, #3
 800f7f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f7f4:	4b31      	ldr	r3, [pc, #196]	; (800f8bc <USBD_SetConfig+0x118>)
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	4619      	mov	r1, r3
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7ff f9b5 	bl	800eb6a <USBD_SetClassConfig>
 800f800:	4603      	mov	r3, r0
 800f802:	2b02      	cmp	r3, #2
 800f804:	d104      	bne.n	800f810 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800f806:	6839      	ldr	r1, [r7, #0]
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 f932 	bl	800fa72 <USBD_CtlError>
            return;
 800f80e:	e052      	b.n	800f8b6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 f9d9 	bl	800fbc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f816:	e04e      	b.n	800f8b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f000 f9d5 	bl	800fbc8 <USBD_CtlSendStatus>
        break;
 800f81e:	e04a      	b.n	800f8b6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800f820:	4b26      	ldr	r3, [pc, #152]	; (800f8bc <USBD_SetConfig+0x118>)
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d112      	bne.n	800f84e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2202      	movs	r2, #2
 800f82c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800f830:	4b22      	ldr	r3, [pc, #136]	; (800f8bc <USBD_SetConfig+0x118>)
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	461a      	mov	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800f83a:	4b20      	ldr	r3, [pc, #128]	; (800f8bc <USBD_SetConfig+0x118>)
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	4619      	mov	r1, r3
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7ff f9b1 	bl	800eba8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 f9be 	bl	800fbc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f84c:	e033      	b.n	800f8b6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800f84e:	4b1b      	ldr	r3, [pc, #108]	; (800f8bc <USBD_SetConfig+0x118>)
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	461a      	mov	r2, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d01d      	beq.n	800f898 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	b2db      	uxtb	r3, r3
 800f862:	4619      	mov	r1, r3
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7ff f99f 	bl	800eba8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800f86a:	4b14      	ldr	r3, [pc, #80]	; (800f8bc <USBD_SetConfig+0x118>)
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	461a      	mov	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f874:	4b11      	ldr	r3, [pc, #68]	; (800f8bc <USBD_SetConfig+0x118>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	4619      	mov	r1, r3
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7ff f975 	bl	800eb6a <USBD_SetClassConfig>
 800f880:	4603      	mov	r3, r0
 800f882:	2b02      	cmp	r3, #2
 800f884:	d104      	bne.n	800f890 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800f886:	6839      	ldr	r1, [r7, #0]
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 f8f2 	bl	800fa72 <USBD_CtlError>
            return;
 800f88e:	e012      	b.n	800f8b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 f999 	bl	800fbc8 <USBD_CtlSendStatus>
        break;
 800f896:	e00e      	b.n	800f8b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 f995 	bl	800fbc8 <USBD_CtlSendStatus>
        break;
 800f89e:	e00a      	b.n	800f8b6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800f8a0:	6839      	ldr	r1, [r7, #0]
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f8e5 	bl	800fa72 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800f8a8:	4b04      	ldr	r3, [pc, #16]	; (800f8bc <USBD_SetConfig+0x118>)
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f7ff f97a 	bl	800eba8 <USBD_ClrClassConfig>
        break;
 800f8b4:	bf00      	nop
    }
  }
}
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	24000280 	.word	0x24000280

0800f8c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	88db      	ldrh	r3, [r3, #6]
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d004      	beq.n	800f8dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 f8cc 	bl	800fa72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f8da:	e021      	b.n	800f920 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	db17      	blt.n	800f916 <USBD_GetConfig+0x56>
 800f8e6:	2b02      	cmp	r3, #2
 800f8e8:	dd02      	ble.n	800f8f0 <USBD_GetConfig+0x30>
 800f8ea:	2b03      	cmp	r3, #3
 800f8ec:	d00b      	beq.n	800f906 <USBD_GetConfig+0x46>
 800f8ee:	e012      	b.n	800f916 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	3308      	adds	r3, #8
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 f922 	bl	800fb48 <USBD_CtlSendData>
        break;
 800f904:	e00c      	b.n	800f920 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	3304      	adds	r3, #4
 800f90a:	2201      	movs	r2, #1
 800f90c:	4619      	mov	r1, r3
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f91a 	bl	800fb48 <USBD_CtlSendData>
        break;
 800f914:	e004      	b.n	800f920 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800f916:	6839      	ldr	r1, [r7, #0]
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 f8aa 	bl	800fa72 <USBD_CtlError>
        break;
 800f91e:	bf00      	nop
}
 800f920:	bf00      	nop
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f938:	3b01      	subs	r3, #1
 800f93a:	2b02      	cmp	r3, #2
 800f93c:	d81e      	bhi.n	800f97c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	88db      	ldrh	r3, [r3, #6]
 800f942:	2b02      	cmp	r3, #2
 800f944:	d004      	beq.n	800f950 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800f946:	6839      	ldr	r1, [r7, #0]
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 f892 	bl	800fa72 <USBD_CtlError>
        break;
 800f94e:	e01a      	b.n	800f986 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2201      	movs	r2, #1
 800f954:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d005      	beq.n	800f96c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	68db      	ldr	r3, [r3, #12]
 800f964:	f043 0202 	orr.w	r2, r3, #2
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	330c      	adds	r3, #12
 800f970:	2202      	movs	r2, #2
 800f972:	4619      	mov	r1, r3
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 f8e7 	bl	800fb48 <USBD_CtlSendData>
      break;
 800f97a:	e004      	b.n	800f986 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800f97c:	6839      	ldr	r1, [r7, #0]
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f000 f877 	bl	800fa72 <USBD_CtlError>
      break;
 800f984:	bf00      	nop
  }
}
 800f986:	bf00      	nop
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f98e:	b580      	push	{r7, lr}
 800f990:	b082      	sub	sp, #8
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
 800f996:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	885b      	ldrh	r3, [r3, #2]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d106      	bne.n	800f9ae <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f90d 	bl	800fbc8 <USBD_CtlSendStatus>
  }
}
 800f9ae:	bf00      	nop
 800f9b0:	3708      	adds	r7, #8
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b082      	sub	sp, #8
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
 800f9be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9c6:	3b01      	subs	r3, #1
 800f9c8:	2b02      	cmp	r3, #2
 800f9ca:	d80b      	bhi.n	800f9e4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	885b      	ldrh	r3, [r3, #2]
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d10c      	bne.n	800f9ee <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 f8f3 	bl	800fbc8 <USBD_CtlSendStatus>
      }
      break;
 800f9e2:	e004      	b.n	800f9ee <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f9e4:	6839      	ldr	r1, [r7, #0]
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 f843 	bl	800fa72 <USBD_CtlError>
      break;
 800f9ec:	e000      	b.n	800f9f0 <USBD_ClrFeature+0x3a>
      break;
 800f9ee:	bf00      	nop
  }
}
 800f9f0:	bf00      	nop
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	781a      	ldrb	r2, [r3, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	785a      	ldrb	r2, [r3, #1]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	3302      	adds	r3, #2
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	b29a      	uxth	r2, r3
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	3303      	adds	r3, #3
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	021b      	lsls	r3, r3, #8
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	4413      	add	r3, r2
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	3304      	adds	r3, #4
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	3305      	adds	r3, #5
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	021b      	lsls	r3, r3, #8
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	4413      	add	r3, r2
 800fa44:	b29a      	uxth	r2, r3
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	3306      	adds	r3, #6
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	3307      	adds	r3, #7
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	021b      	lsls	r3, r3, #8
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	4413      	add	r3, r2
 800fa60:	b29a      	uxth	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	80da      	strh	r2, [r3, #6]

}
 800fa66:	bf00      	nop
 800fa68:	370c      	adds	r7, #12
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr

0800fa72 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b082      	sub	sp, #8
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
 800fa7a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800fa7c:	2180      	movs	r1, #128	; 0x80
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f005 fc26 	bl	80152d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800fa84:	2100      	movs	r1, #0
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f005 fc22 	bl	80152d0 <USBD_LL_StallEP>
}
 800fa8c:	bf00      	nop
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b086      	sub	sp, #24
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800faa0:	2300      	movs	r3, #0
 800faa2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d032      	beq.n	800fb10 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f000 f834 	bl	800fb18 <USBD_GetLen>
 800fab0:	4603      	mov	r3, r0
 800fab2:	3301      	adds	r3, #1
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	005b      	lsls	r3, r3, #1
 800fab8:	b29a      	uxth	r2, r3
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800fabe:	7dfb      	ldrb	r3, [r7, #23]
 800fac0:	1c5a      	adds	r2, r3, #1
 800fac2:	75fa      	strb	r2, [r7, #23]
 800fac4:	461a      	mov	r2, r3
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	4413      	add	r3, r2
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	7812      	ldrb	r2, [r2, #0]
 800face:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800fad0:	7dfb      	ldrb	r3, [r7, #23]
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	75fa      	strb	r2, [r7, #23]
 800fad6:	461a      	mov	r2, r3
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	4413      	add	r3, r2
 800fadc:	2203      	movs	r2, #3
 800fade:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800fae0:	e012      	b.n	800fb08 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	1c5a      	adds	r2, r3, #1
 800fae6:	60fa      	str	r2, [r7, #12]
 800fae8:	7dfa      	ldrb	r2, [r7, #23]
 800faea:	1c51      	adds	r1, r2, #1
 800faec:	75f9      	strb	r1, [r7, #23]
 800faee:	4611      	mov	r1, r2
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	440a      	add	r2, r1
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800faf8:	7dfb      	ldrb	r3, [r7, #23]
 800fafa:	1c5a      	adds	r2, r3, #1
 800fafc:	75fa      	strb	r2, [r7, #23]
 800fafe:	461a      	mov	r2, r3
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	4413      	add	r3, r2
 800fb04:	2200      	movs	r2, #0
 800fb06:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d1e8      	bne.n	800fae2 <USBD_GetString+0x4e>
    }
  }
}
 800fb10:	bf00      	nop
 800fb12:	3718      	adds	r7, #24
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fb20:	2300      	movs	r3, #0
 800fb22:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800fb24:	e005      	b.n	800fb32 <USBD_GetLen+0x1a>
  {
    len++;
 800fb26:	7bfb      	ldrb	r3, [r7, #15]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d1f5      	bne.n	800fb26 <USBD_GetLen+0xe>
  }

  return len;
 800fb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3714      	adds	r7, #20
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
 800fb52:	4613      	mov	r3, r2
 800fb54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2202      	movs	r2, #2
 800fb5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fb5e:	88fa      	ldrh	r2, [r7, #6]
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800fb64:	88fa      	ldrh	r2, [r7, #6]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb6a:	88fb      	ldrh	r3, [r7, #6]
 800fb6c:	68ba      	ldr	r2, [r7, #8]
 800fb6e:	2100      	movs	r1, #0
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f005 fc36 	bl	80153e2 <USBD_LL_Transmit>

  return USBD_OK;
 800fb76:	2300      	movs	r3, #0
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3710      	adds	r7, #16
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	4613      	mov	r3, r2
 800fb8c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb8e:	88fb      	ldrh	r3, [r7, #6]
 800fb90:	68ba      	ldr	r2, [r7, #8]
 800fb92:	2100      	movs	r1, #0
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	f005 fc24 	bl	80153e2 <USBD_LL_Transmit>

  return USBD_OK;
 800fb9a:	2300      	movs	r3, #0
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3710      	adds	r7, #16
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fbb2:	88fb      	ldrh	r3, [r7, #6]
 800fbb4:	68ba      	ldr	r2, [r7, #8]
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f005 fc35 	bl	8015428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbbe:	2300      	movs	r3, #0
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3710      	adds	r7, #16
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2204      	movs	r2, #4
 800fbd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fbd8:	2300      	movs	r3, #0
 800fbda:	2200      	movs	r2, #0
 800fbdc:	2100      	movs	r1, #0
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f005 fbff 	bl	80153e2 <USBD_LL_Transmit>

  return USBD_OK;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3708      	adds	r7, #8
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b082      	sub	sp, #8
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2205      	movs	r2, #5
 800fbfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fbfe:	2300      	movs	r3, #0
 800fc00:	2200      	movs	r2, #0
 800fc02:	2100      	movs	r1, #0
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f005 fc0f 	bl	8015428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fc1e:	79fb      	ldrb	r3, [r7, #7]
 800fc20:	4a08      	ldr	r2, [pc, #32]	; (800fc44 <disk_status+0x30>)
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	4413      	add	r3, r2
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	79fa      	ldrb	r2, [r7, #7]
 800fc2c:	4905      	ldr	r1, [pc, #20]	; (800fc44 <disk_status+0x30>)
 800fc2e:	440a      	add	r2, r1
 800fc30:	7a12      	ldrb	r2, [r2, #8]
 800fc32:	4610      	mov	r0, r2
 800fc34:	4798      	blx	r3
 800fc36:	4603      	mov	r3, r0
 800fc38:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3710      	adds	r7, #16
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	240002ac 	.word	0x240002ac

0800fc48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	4603      	mov	r3, r0
 800fc50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fc52:	2300      	movs	r3, #0
 800fc54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fc56:	79fb      	ldrb	r3, [r7, #7]
 800fc58:	4a0d      	ldr	r2, [pc, #52]	; (800fc90 <disk_initialize+0x48>)
 800fc5a:	5cd3      	ldrb	r3, [r2, r3]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d111      	bne.n	800fc84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fc60:	79fb      	ldrb	r3, [r7, #7]
 800fc62:	4a0b      	ldr	r2, [pc, #44]	; (800fc90 <disk_initialize+0x48>)
 800fc64:	2101      	movs	r1, #1
 800fc66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fc68:	79fb      	ldrb	r3, [r7, #7]
 800fc6a:	4a09      	ldr	r2, [pc, #36]	; (800fc90 <disk_initialize+0x48>)
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	4413      	add	r3, r2
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	79fa      	ldrb	r2, [r7, #7]
 800fc76:	4906      	ldr	r1, [pc, #24]	; (800fc90 <disk_initialize+0x48>)
 800fc78:	440a      	add	r2, r1
 800fc7a:	7a12      	ldrb	r2, [r2, #8]
 800fc7c:	4610      	mov	r0, r2
 800fc7e:	4798      	blx	r3
 800fc80:	4603      	mov	r3, r0
 800fc82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3710      	adds	r7, #16
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	240002ac 	.word	0x240002ac

0800fc94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fc94:	b590      	push	{r4, r7, lr}
 800fc96:	b087      	sub	sp, #28
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60b9      	str	r1, [r7, #8]
 800fc9c:	607a      	str	r2, [r7, #4]
 800fc9e:	603b      	str	r3, [r7, #0]
 800fca0:	4603      	mov	r3, r0
 800fca2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fca4:	7bfb      	ldrb	r3, [r7, #15]
 800fca6:	4a0a      	ldr	r2, [pc, #40]	; (800fcd0 <disk_read+0x3c>)
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	4413      	add	r3, r2
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	689c      	ldr	r4, [r3, #8]
 800fcb0:	7bfb      	ldrb	r3, [r7, #15]
 800fcb2:	4a07      	ldr	r2, [pc, #28]	; (800fcd0 <disk_read+0x3c>)
 800fcb4:	4413      	add	r3, r2
 800fcb6:	7a18      	ldrb	r0, [r3, #8]
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	68b9      	ldr	r1, [r7, #8]
 800fcbe:	47a0      	blx	r4
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	75fb      	strb	r3, [r7, #23]
  return res;
 800fcc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	371c      	adds	r7, #28
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd90      	pop	{r4, r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	240002ac 	.word	0x240002ac

0800fcd4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fcd4:	b590      	push	{r4, r7, lr}
 800fcd6:	b087      	sub	sp, #28
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60b9      	str	r1, [r7, #8]
 800fcdc:	607a      	str	r2, [r7, #4]
 800fcde:	603b      	str	r3, [r7, #0]
 800fce0:	4603      	mov	r3, r0
 800fce2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fce4:	7bfb      	ldrb	r3, [r7, #15]
 800fce6:	4a0a      	ldr	r2, [pc, #40]	; (800fd10 <disk_write+0x3c>)
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	4413      	add	r3, r2
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	68dc      	ldr	r4, [r3, #12]
 800fcf0:	7bfb      	ldrb	r3, [r7, #15]
 800fcf2:	4a07      	ldr	r2, [pc, #28]	; (800fd10 <disk_write+0x3c>)
 800fcf4:	4413      	add	r3, r2
 800fcf6:	7a18      	ldrb	r0, [r3, #8]
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	68b9      	ldr	r1, [r7, #8]
 800fcfe:	47a0      	blx	r4
 800fd00:	4603      	mov	r3, r0
 800fd02:	75fb      	strb	r3, [r7, #23]
  return res;
 800fd04:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	371c      	adds	r7, #28
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd90      	pop	{r4, r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	240002ac 	.word	0x240002ac

0800fd14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	603a      	str	r2, [r7, #0]
 800fd1e:	71fb      	strb	r3, [r7, #7]
 800fd20:	460b      	mov	r3, r1
 800fd22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fd24:	79fb      	ldrb	r3, [r7, #7]
 800fd26:	4a09      	ldr	r2, [pc, #36]	; (800fd4c <disk_ioctl+0x38>)
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	4413      	add	r3, r2
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	79fa      	ldrb	r2, [r7, #7]
 800fd32:	4906      	ldr	r1, [pc, #24]	; (800fd4c <disk_ioctl+0x38>)
 800fd34:	440a      	add	r2, r1
 800fd36:	7a10      	ldrb	r0, [r2, #8]
 800fd38:	79b9      	ldrb	r1, [r7, #6]
 800fd3a:	683a      	ldr	r2, [r7, #0]
 800fd3c:	4798      	blx	r3
 800fd3e:	4603      	mov	r3, r0
 800fd40:	73fb      	strb	r3, [r7, #15]
  return res;
 800fd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	240002ac 	.word	0x240002ac

0800fd50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fd60:	89fb      	ldrh	r3, [r7, #14]
 800fd62:	021b      	lsls	r3, r3, #8
 800fd64:	b21a      	sxth	r2, r3
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	b21b      	sxth	r3, r3
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	b21b      	sxth	r3, r3
 800fd70:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fd72:	89fb      	ldrh	r3, [r7, #14]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3714      	adds	r7, #20
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	3303      	adds	r3, #3
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	021b      	lsls	r3, r3, #8
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	3202      	adds	r2, #2
 800fd98:	7812      	ldrb	r2, [r2, #0]
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	021b      	lsls	r3, r3, #8
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	3201      	adds	r2, #1
 800fda6:	7812      	ldrb	r2, [r2, #0]
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	021b      	lsls	r3, r3, #8
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	7812      	ldrb	r2, [r2, #0]
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	60fb      	str	r3, [r7, #12]
	return rv;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3714      	adds	r7, #20
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr

0800fdc6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800fdc6:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	3307      	adds	r3, #7
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	b2db      	uxtb	r3, r3
 800fdd8:	f04f 0400 	mov.w	r4, #0
 800fddc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800fde0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fde4:	f04f 0b00 	mov.w	fp, #0
 800fde8:	f04f 0c00 	mov.w	ip, #0
 800fdec:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fdf0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fdf4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	3206      	adds	r2, #6
 800fdfc:	7812      	ldrb	r2, [r2, #0]
 800fdfe:	b2d1      	uxtb	r1, r2
 800fe00:	f04f 0200 	mov.w	r2, #0
 800fe04:	ea4b 0301 	orr.w	r3, fp, r1
 800fe08:	ea4c 0402 	orr.w	r4, ip, r2
 800fe0c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800fe10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fe14:	f04f 0b00 	mov.w	fp, #0
 800fe18:	f04f 0c00 	mov.w	ip, #0
 800fe1c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fe20:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fe24:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	3205      	adds	r2, #5
 800fe2c:	7812      	ldrb	r2, [r2, #0]
 800fe2e:	b2d1      	uxtb	r1, r2
 800fe30:	f04f 0200 	mov.w	r2, #0
 800fe34:	ea4b 0301 	orr.w	r3, fp, r1
 800fe38:	ea4c 0402 	orr.w	r4, ip, r2
 800fe3c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800fe40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fe44:	f04f 0b00 	mov.w	fp, #0
 800fe48:	f04f 0c00 	mov.w	ip, #0
 800fe4c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fe50:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fe54:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	3204      	adds	r2, #4
 800fe5c:	7812      	ldrb	r2, [r2, #0]
 800fe5e:	b2d1      	uxtb	r1, r2
 800fe60:	f04f 0200 	mov.w	r2, #0
 800fe64:	ea4b 0301 	orr.w	r3, fp, r1
 800fe68:	ea4c 0402 	orr.w	r4, ip, r2
 800fe6c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800fe70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fe74:	f04f 0b00 	mov.w	fp, #0
 800fe78:	f04f 0c00 	mov.w	ip, #0
 800fe7c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fe80:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fe84:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	3203      	adds	r2, #3
 800fe8c:	7812      	ldrb	r2, [r2, #0]
 800fe8e:	b2d1      	uxtb	r1, r2
 800fe90:	f04f 0200 	mov.w	r2, #0
 800fe94:	ea4b 0301 	orr.w	r3, fp, r1
 800fe98:	ea4c 0402 	orr.w	r4, ip, r2
 800fe9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800fea0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fea4:	f04f 0b00 	mov.w	fp, #0
 800fea8:	f04f 0c00 	mov.w	ip, #0
 800feac:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800feb0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800feb4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	3202      	adds	r2, #2
 800febc:	7812      	ldrb	r2, [r2, #0]
 800febe:	b2d1      	uxtb	r1, r2
 800fec0:	f04f 0200 	mov.w	r2, #0
 800fec4:	ea4b 0301 	orr.w	r3, fp, r1
 800fec8:	ea4c 0402 	orr.w	r4, ip, r2
 800fecc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800fed0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fed4:	f04f 0b00 	mov.w	fp, #0
 800fed8:	f04f 0c00 	mov.w	ip, #0
 800fedc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fee0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fee4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	3201      	adds	r2, #1
 800feec:	7812      	ldrb	r2, [r2, #0]
 800feee:	b2d1      	uxtb	r1, r2
 800fef0:	f04f 0200 	mov.w	r2, #0
 800fef4:	ea4b 0301 	orr.w	r3, fp, r1
 800fef8:	ea4c 0402 	orr.w	r4, ip, r2
 800fefc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800ff00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ff04:	f04f 0b00 	mov.w	fp, #0
 800ff08:	f04f 0c00 	mov.w	ip, #0
 800ff0c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800ff10:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800ff14:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	7812      	ldrb	r2, [r2, #0]
 800ff1c:	b2d1      	uxtb	r1, r2
 800ff1e:	f04f 0200 	mov.w	r2, #0
 800ff22:	ea4b 0301 	orr.w	r3, fp, r1
 800ff26:	ea4c 0402 	orr.w	r4, ip, r2
 800ff2a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800ff2e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	4621      	mov	r1, r4
 800ff36:	3714      	adds	r7, #20
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800ff3e:	4770      	bx	lr

0800ff40 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	607a      	str	r2, [r7, #4]
 800ff52:	887a      	ldrh	r2, [r7, #2]
 800ff54:	b2d2      	uxtb	r2, r2
 800ff56:	701a      	strb	r2, [r3, #0]
 800ff58:	887b      	ldrh	r3, [r7, #2]
 800ff5a:	0a1b      	lsrs	r3, r3, #8
 800ff5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	607a      	str	r2, [r7, #4]
 800ff64:	887a      	ldrh	r2, [r7, #2]
 800ff66:	b2d2      	uxtb	r2, r2
 800ff68:	701a      	strb	r2, [r3, #0]
}
 800ff6a:	bf00      	nop
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr

0800ff76 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ff76:	b480      	push	{r7}
 800ff78:	b083      	sub	sp, #12
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
 800ff7e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	1c5a      	adds	r2, r3, #1
 800ff84:	607a      	str	r2, [r7, #4]
 800ff86:	683a      	ldr	r2, [r7, #0]
 800ff88:	b2d2      	uxtb	r2, r2
 800ff8a:	701a      	strb	r2, [r3, #0]
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	0a1b      	lsrs	r3, r3, #8
 800ff90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	1c5a      	adds	r2, r3, #1
 800ff96:	607a      	str	r2, [r7, #4]
 800ff98:	683a      	ldr	r2, [r7, #0]
 800ff9a:	b2d2      	uxtb	r2, r2
 800ff9c:	701a      	strb	r2, [r3, #0]
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	0a1b      	lsrs	r3, r3, #8
 800ffa2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	1c5a      	adds	r2, r3, #1
 800ffa8:	607a      	str	r2, [r7, #4]
 800ffaa:	683a      	ldr	r2, [r7, #0]
 800ffac:	b2d2      	uxtb	r2, r2
 800ffae:	701a      	strb	r2, [r3, #0]
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	0a1b      	lsrs	r3, r3, #8
 800ffb4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	1c5a      	adds	r2, r3, #1
 800ffba:	607a      	str	r2, [r7, #4]
 800ffbc:	683a      	ldr	r2, [r7, #0]
 800ffbe:	b2d2      	uxtb	r2, r2
 800ffc0:	701a      	strb	r2, [r3, #0]
}
 800ffc2:	bf00      	nop
 800ffc4:	370c      	adds	r7, #12
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffcc:	4770      	bx	lr

0800ffce <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800ffce:	b490      	push	{r4, r7}
 800ffd0:	b084      	sub	sp, #16
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	60f8      	str	r0, [r7, #12]
 800ffd6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	1c5a      	adds	r2, r3, #1
 800ffde:	60fa      	str	r2, [r7, #12]
 800ffe0:	783a      	ldrb	r2, [r7, #0]
 800ffe2:	701a      	strb	r2, [r3, #0]
 800ffe4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ffe8:	f04f 0300 	mov.w	r3, #0
 800ffec:	f04f 0400 	mov.w	r4, #0
 800fff0:	0a0b      	lsrs	r3, r1, #8
 800fff2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fff6:	0a14      	lsrs	r4, r2, #8
 800fff8:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	1c5a      	adds	r2, r3, #1
 8010000:	60fa      	str	r2, [r7, #12]
 8010002:	783a      	ldrb	r2, [r7, #0]
 8010004:	701a      	strb	r2, [r3, #0]
 8010006:	e9d7 1200 	ldrd	r1, r2, [r7]
 801000a:	f04f 0300 	mov.w	r3, #0
 801000e:	f04f 0400 	mov.w	r4, #0
 8010012:	0a0b      	lsrs	r3, r1, #8
 8010014:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010018:	0a14      	lsrs	r4, r2, #8
 801001a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	1c5a      	adds	r2, r3, #1
 8010022:	60fa      	str	r2, [r7, #12]
 8010024:	783a      	ldrb	r2, [r7, #0]
 8010026:	701a      	strb	r2, [r3, #0]
 8010028:	e9d7 1200 	ldrd	r1, r2, [r7]
 801002c:	f04f 0300 	mov.w	r3, #0
 8010030:	f04f 0400 	mov.w	r4, #0
 8010034:	0a0b      	lsrs	r3, r1, #8
 8010036:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801003a:	0a14      	lsrs	r4, r2, #8
 801003c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	60fa      	str	r2, [r7, #12]
 8010046:	783a      	ldrb	r2, [r7, #0]
 8010048:	701a      	strb	r2, [r3, #0]
 801004a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801004e:	f04f 0300 	mov.w	r3, #0
 8010052:	f04f 0400 	mov.w	r4, #0
 8010056:	0a0b      	lsrs	r3, r1, #8
 8010058:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801005c:	0a14      	lsrs	r4, r2, #8
 801005e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	1c5a      	adds	r2, r3, #1
 8010066:	60fa      	str	r2, [r7, #12]
 8010068:	783a      	ldrb	r2, [r7, #0]
 801006a:	701a      	strb	r2, [r3, #0]
 801006c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010070:	f04f 0300 	mov.w	r3, #0
 8010074:	f04f 0400 	mov.w	r4, #0
 8010078:	0a0b      	lsrs	r3, r1, #8
 801007a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801007e:	0a14      	lsrs	r4, r2, #8
 8010080:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	1c5a      	adds	r2, r3, #1
 8010088:	60fa      	str	r2, [r7, #12]
 801008a:	783a      	ldrb	r2, [r7, #0]
 801008c:	701a      	strb	r2, [r3, #0]
 801008e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010092:	f04f 0300 	mov.w	r3, #0
 8010096:	f04f 0400 	mov.w	r4, #0
 801009a:	0a0b      	lsrs	r3, r1, #8
 801009c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80100a0:	0a14      	lsrs	r4, r2, #8
 80100a2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	1c5a      	adds	r2, r3, #1
 80100aa:	60fa      	str	r2, [r7, #12]
 80100ac:	783a      	ldrb	r2, [r7, #0]
 80100ae:	701a      	strb	r2, [r3, #0]
 80100b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80100b4:	f04f 0300 	mov.w	r3, #0
 80100b8:	f04f 0400 	mov.w	r4, #0
 80100bc:	0a0b      	lsrs	r3, r1, #8
 80100be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80100c2:	0a14      	lsrs	r4, r2, #8
 80100c4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	1c5a      	adds	r2, r3, #1
 80100cc:	60fa      	str	r2, [r7, #12]
 80100ce:	783a      	ldrb	r2, [r7, #0]
 80100d0:	701a      	strb	r2, [r3, #0]
}
 80100d2:	bf00      	nop
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bc90      	pop	{r4, r7}
 80100da:	4770      	bx	lr

080100dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80100dc:	b480      	push	{r7}
 80100de:	b087      	sub	sp, #28
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	60f8      	str	r0, [r7, #12]
 80100e4:	60b9      	str	r1, [r7, #8]
 80100e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00d      	beq.n	8010112 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80100f6:	693a      	ldr	r2, [r7, #16]
 80100f8:	1c53      	adds	r3, r2, #1
 80100fa:	613b      	str	r3, [r7, #16]
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	1c59      	adds	r1, r3, #1
 8010100:	6179      	str	r1, [r7, #20]
 8010102:	7812      	ldrb	r2, [r2, #0]
 8010104:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	3b01      	subs	r3, #1
 801010a:	607b      	str	r3, [r7, #4]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1f1      	bne.n	80100f6 <mem_cpy+0x1a>
	}
}
 8010112:	bf00      	nop
 8010114:	371c      	adds	r7, #28
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr

0801011e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801011e:	b480      	push	{r7}
 8010120:	b087      	sub	sp, #28
 8010122:	af00      	add	r7, sp, #0
 8010124:	60f8      	str	r0, [r7, #12]
 8010126:	60b9      	str	r1, [r7, #8]
 8010128:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	1c5a      	adds	r2, r3, #1
 8010132:	617a      	str	r2, [r7, #20]
 8010134:	68ba      	ldr	r2, [r7, #8]
 8010136:	b2d2      	uxtb	r2, r2
 8010138:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	3b01      	subs	r3, #1
 801013e:	607b      	str	r3, [r7, #4]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1f3      	bne.n	801012e <mem_set+0x10>
}
 8010146:	bf00      	nop
 8010148:	371c      	adds	r7, #28
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr

08010152 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010152:	b480      	push	{r7}
 8010154:	b089      	sub	sp, #36	; 0x24
 8010156:	af00      	add	r7, sp, #0
 8010158:	60f8      	str	r0, [r7, #12]
 801015a:	60b9      	str	r1, [r7, #8]
 801015c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	61fb      	str	r3, [r7, #28]
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	1c5a      	adds	r2, r3, #1
 801016e:	61fa      	str	r2, [r7, #28]
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	4619      	mov	r1, r3
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	1c5a      	adds	r2, r3, #1
 8010178:	61ba      	str	r2, [r7, #24]
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	1acb      	subs	r3, r1, r3
 801017e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	3b01      	subs	r3, #1
 8010184:	607b      	str	r3, [r7, #4]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d002      	beq.n	8010192 <mem_cmp+0x40>
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d0eb      	beq.n	801016a <mem_cmp+0x18>

	return r;
 8010192:	697b      	ldr	r3, [r7, #20]
}
 8010194:	4618      	mov	r0, r3
 8010196:	3724      	adds	r7, #36	; 0x24
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr

080101a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80101aa:	e002      	b.n	80101b2 <chk_chr+0x12>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	3301      	adds	r3, #1
 80101b0:	607b      	str	r3, [r7, #4]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d005      	beq.n	80101c6 <chk_chr+0x26>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	461a      	mov	r2, r3
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d1f2      	bne.n	80101ac <chk_chr+0xc>
	return *str;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	781b      	ldrb	r3, [r3, #0]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	370c      	adds	r7, #12
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr
	...

080101d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80101e2:	2300      	movs	r3, #0
 80101e4:	60bb      	str	r3, [r7, #8]
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	60fb      	str	r3, [r7, #12]
 80101ea:	e029      	b.n	8010240 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80101ec:	4a27      	ldr	r2, [pc, #156]	; (801028c <chk_lock+0xb4>)
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	011b      	lsls	r3, r3, #4
 80101f2:	4413      	add	r3, r2
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d01d      	beq.n	8010236 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80101fa:	4a24      	ldr	r2, [pc, #144]	; (801028c <chk_lock+0xb4>)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	011b      	lsls	r3, r3, #4
 8010200:	4413      	add	r3, r2
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	429a      	cmp	r2, r3
 801020a:	d116      	bne.n	801023a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801020c:	4a1f      	ldr	r2, [pc, #124]	; (801028c <chk_lock+0xb4>)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	011b      	lsls	r3, r3, #4
 8010212:	4413      	add	r3, r2
 8010214:	3304      	adds	r3, #4
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801021c:	429a      	cmp	r2, r3
 801021e:	d10c      	bne.n	801023a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010220:	4a1a      	ldr	r2, [pc, #104]	; (801028c <chk_lock+0xb4>)
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	011b      	lsls	r3, r3, #4
 8010226:	4413      	add	r3, r2
 8010228:	3308      	adds	r3, #8
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8010230:	429a      	cmp	r2, r3
 8010232:	d102      	bne.n	801023a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010234:	e007      	b.n	8010246 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010236:	2301      	movs	r3, #1
 8010238:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	3301      	adds	r3, #1
 801023e:	60fb      	str	r3, [r7, #12]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d9d2      	bls.n	80101ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2b02      	cmp	r3, #2
 801024a:	d109      	bne.n	8010260 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d102      	bne.n	8010258 <chk_lock+0x80>
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	2b02      	cmp	r3, #2
 8010256:	d101      	bne.n	801025c <chk_lock+0x84>
 8010258:	2300      	movs	r3, #0
 801025a:	e010      	b.n	801027e <chk_lock+0xa6>
 801025c:	2312      	movs	r3, #18
 801025e:	e00e      	b.n	801027e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d108      	bne.n	8010278 <chk_lock+0xa0>
 8010266:	4a09      	ldr	r2, [pc, #36]	; (801028c <chk_lock+0xb4>)
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	011b      	lsls	r3, r3, #4
 801026c:	4413      	add	r3, r2
 801026e:	330c      	adds	r3, #12
 8010270:	881b      	ldrh	r3, [r3, #0]
 8010272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010276:	d101      	bne.n	801027c <chk_lock+0xa4>
 8010278:	2310      	movs	r3, #16
 801027a:	e000      	b.n	801027e <chk_lock+0xa6>
 801027c:	2300      	movs	r3, #0
}
 801027e:	4618      	mov	r0, r3
 8010280:	3714      	adds	r7, #20
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr
 801028a:	bf00      	nop
 801028c:	2400028c 	.word	0x2400028c

08010290 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010296:	2300      	movs	r3, #0
 8010298:	607b      	str	r3, [r7, #4]
 801029a:	e002      	b.n	80102a2 <enq_lock+0x12>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	3301      	adds	r3, #1
 80102a0:	607b      	str	r3, [r7, #4]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d806      	bhi.n	80102b6 <enq_lock+0x26>
 80102a8:	4a09      	ldr	r2, [pc, #36]	; (80102d0 <enq_lock+0x40>)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	011b      	lsls	r3, r3, #4
 80102ae:	4413      	add	r3, r2
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1f2      	bne.n	801029c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b02      	cmp	r3, #2
 80102ba:	bf14      	ite	ne
 80102bc:	2301      	movne	r3, #1
 80102be:	2300      	moveq	r3, #0
 80102c0:	b2db      	uxtb	r3, r3
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	370c      	adds	r7, #12
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	2400028c 	.word	0x2400028c

080102d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80102de:	2300      	movs	r3, #0
 80102e0:	60fb      	str	r3, [r7, #12]
 80102e2:	e01f      	b.n	8010324 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80102e4:	4a41      	ldr	r2, [pc, #260]	; (80103ec <inc_lock+0x118>)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	011b      	lsls	r3, r3, #4
 80102ea:	4413      	add	r3, r2
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d113      	bne.n	801031e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80102f6:	4a3d      	ldr	r2, [pc, #244]	; (80103ec <inc_lock+0x118>)
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	011b      	lsls	r3, r3, #4
 80102fc:	4413      	add	r3, r2
 80102fe:	3304      	adds	r3, #4
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010306:	429a      	cmp	r2, r3
 8010308:	d109      	bne.n	801031e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801030a:	4a38      	ldr	r2, [pc, #224]	; (80103ec <inc_lock+0x118>)
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	011b      	lsls	r3, r3, #4
 8010310:	4413      	add	r3, r2
 8010312:	3308      	adds	r3, #8
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 801031a:	429a      	cmp	r2, r3
 801031c:	d006      	beq.n	801032c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3301      	adds	r3, #1
 8010322:	60fb      	str	r3, [r7, #12]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2b01      	cmp	r3, #1
 8010328:	d9dc      	bls.n	80102e4 <inc_lock+0x10>
 801032a:	e000      	b.n	801032e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801032c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b02      	cmp	r3, #2
 8010332:	d132      	bne.n	801039a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010334:	2300      	movs	r3, #0
 8010336:	60fb      	str	r3, [r7, #12]
 8010338:	e002      	b.n	8010340 <inc_lock+0x6c>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	3301      	adds	r3, #1
 801033e:	60fb      	str	r3, [r7, #12]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	2b01      	cmp	r3, #1
 8010344:	d806      	bhi.n	8010354 <inc_lock+0x80>
 8010346:	4a29      	ldr	r2, [pc, #164]	; (80103ec <inc_lock+0x118>)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	011b      	lsls	r3, r3, #4
 801034c:	4413      	add	r3, r2
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1f2      	bne.n	801033a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2b02      	cmp	r3, #2
 8010358:	d101      	bne.n	801035e <inc_lock+0x8a>
 801035a:	2300      	movs	r3, #0
 801035c:	e040      	b.n	80103e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	4922      	ldr	r1, [pc, #136]	; (80103ec <inc_lock+0x118>)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	011b      	lsls	r3, r3, #4
 8010368:	440b      	add	r3, r1
 801036a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	689a      	ldr	r2, [r3, #8]
 8010370:	491e      	ldr	r1, [pc, #120]	; (80103ec <inc_lock+0x118>)
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	011b      	lsls	r3, r3, #4
 8010376:	440b      	add	r3, r1
 8010378:	3304      	adds	r3, #4
 801037a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010380:	491a      	ldr	r1, [pc, #104]	; (80103ec <inc_lock+0x118>)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	011b      	lsls	r3, r3, #4
 8010386:	440b      	add	r3, r1
 8010388:	3308      	adds	r3, #8
 801038a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801038c:	4a17      	ldr	r2, [pc, #92]	; (80103ec <inc_lock+0x118>)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	011b      	lsls	r3, r3, #4
 8010392:	4413      	add	r3, r2
 8010394:	330c      	adds	r3, #12
 8010396:	2200      	movs	r2, #0
 8010398:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d009      	beq.n	80103b4 <inc_lock+0xe0>
 80103a0:	4a12      	ldr	r2, [pc, #72]	; (80103ec <inc_lock+0x118>)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	011b      	lsls	r3, r3, #4
 80103a6:	4413      	add	r3, r2
 80103a8:	330c      	adds	r3, #12
 80103aa:	881b      	ldrh	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d001      	beq.n	80103b4 <inc_lock+0xe0>
 80103b0:	2300      	movs	r3, #0
 80103b2:	e015      	b.n	80103e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d108      	bne.n	80103cc <inc_lock+0xf8>
 80103ba:	4a0c      	ldr	r2, [pc, #48]	; (80103ec <inc_lock+0x118>)
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	011b      	lsls	r3, r3, #4
 80103c0:	4413      	add	r3, r2
 80103c2:	330c      	adds	r3, #12
 80103c4:	881b      	ldrh	r3, [r3, #0]
 80103c6:	3301      	adds	r3, #1
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	e001      	b.n	80103d0 <inc_lock+0xfc>
 80103cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103d0:	4906      	ldr	r1, [pc, #24]	; (80103ec <inc_lock+0x118>)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	011b      	lsls	r3, r3, #4
 80103d6:	440b      	add	r3, r1
 80103d8:	330c      	adds	r3, #12
 80103da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	3301      	adds	r3, #1
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3714      	adds	r7, #20
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr
 80103ec:	2400028c 	.word	0x2400028c

080103f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b085      	sub	sp, #20
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	3b01      	subs	r3, #1
 80103fc:	607b      	str	r3, [r7, #4]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b01      	cmp	r3, #1
 8010402:	d825      	bhi.n	8010450 <dec_lock+0x60>
		n = Files[i].ctr;
 8010404:	4a17      	ldr	r2, [pc, #92]	; (8010464 <dec_lock+0x74>)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	011b      	lsls	r3, r3, #4
 801040a:	4413      	add	r3, r2
 801040c:	330c      	adds	r3, #12
 801040e:	881b      	ldrh	r3, [r3, #0]
 8010410:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010412:	89fb      	ldrh	r3, [r7, #14]
 8010414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010418:	d101      	bne.n	801041e <dec_lock+0x2e>
 801041a:	2300      	movs	r3, #0
 801041c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801041e:	89fb      	ldrh	r3, [r7, #14]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d002      	beq.n	801042a <dec_lock+0x3a>
 8010424:	89fb      	ldrh	r3, [r7, #14]
 8010426:	3b01      	subs	r3, #1
 8010428:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801042a:	4a0e      	ldr	r2, [pc, #56]	; (8010464 <dec_lock+0x74>)
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	011b      	lsls	r3, r3, #4
 8010430:	4413      	add	r3, r2
 8010432:	330c      	adds	r3, #12
 8010434:	89fa      	ldrh	r2, [r7, #14]
 8010436:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010438:	89fb      	ldrh	r3, [r7, #14]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d105      	bne.n	801044a <dec_lock+0x5a>
 801043e:	4a09      	ldr	r2, [pc, #36]	; (8010464 <dec_lock+0x74>)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	011b      	lsls	r3, r3, #4
 8010444:	4413      	add	r3, r2
 8010446:	2200      	movs	r2, #0
 8010448:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801044a:	2300      	movs	r3, #0
 801044c:	737b      	strb	r3, [r7, #13]
 801044e:	e001      	b.n	8010454 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010450:	2302      	movs	r3, #2
 8010452:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010454:	7b7b      	ldrb	r3, [r7, #13]
}
 8010456:	4618      	mov	r0, r3
 8010458:	3714      	adds	r7, #20
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr
 8010462:	bf00      	nop
 8010464:	2400028c 	.word	0x2400028c

08010468 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010468:	b480      	push	{r7}
 801046a:	b085      	sub	sp, #20
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010470:	2300      	movs	r3, #0
 8010472:	60fb      	str	r3, [r7, #12]
 8010474:	e010      	b.n	8010498 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010476:	4a0d      	ldr	r2, [pc, #52]	; (80104ac <clear_lock+0x44>)
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	011b      	lsls	r3, r3, #4
 801047c:	4413      	add	r3, r2
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	429a      	cmp	r2, r3
 8010484:	d105      	bne.n	8010492 <clear_lock+0x2a>
 8010486:	4a09      	ldr	r2, [pc, #36]	; (80104ac <clear_lock+0x44>)
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	011b      	lsls	r3, r3, #4
 801048c:	4413      	add	r3, r2
 801048e:	2200      	movs	r2, #0
 8010490:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	3301      	adds	r3, #1
 8010496:	60fb      	str	r3, [r7, #12]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2b01      	cmp	r3, #1
 801049c:	d9eb      	bls.n	8010476 <clear_lock+0xe>
	}
}
 801049e:	bf00      	nop
 80104a0:	3714      	adds	r7, #20
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	2400028c 	.word	0x2400028c

080104b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b086      	sub	sp, #24
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80104b8:	2300      	movs	r3, #0
 80104ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	78db      	ldrb	r3, [r3, #3]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d034      	beq.n	801052e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	7858      	ldrb	r0, [r3, #1]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80104d4:	2301      	movs	r3, #1
 80104d6:	697a      	ldr	r2, [r7, #20]
 80104d8:	f7ff fbfc 	bl	800fcd4 <disk_write>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d002      	beq.n	80104e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80104e2:	2301      	movs	r3, #1
 80104e4:	73fb      	strb	r3, [r7, #15]
 80104e6:	e022      	b.n	801052e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104f2:	697a      	ldr	r2, [r7, #20]
 80104f4:	1ad2      	subs	r2, r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d217      	bcs.n	801052e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	789b      	ldrb	r3, [r3, #2]
 8010502:	613b      	str	r3, [r7, #16]
 8010504:	e010      	b.n	8010528 <sync_window+0x78>
					wsect += fs->fsize;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801050a:	697a      	ldr	r2, [r7, #20]
 801050c:	4413      	add	r3, r2
 801050e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	7858      	ldrb	r0, [r3, #1]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801051a:	2301      	movs	r3, #1
 801051c:	697a      	ldr	r2, [r7, #20]
 801051e:	f7ff fbd9 	bl	800fcd4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	3b01      	subs	r3, #1
 8010526:	613b      	str	r3, [r7, #16]
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	2b01      	cmp	r3, #1
 801052c:	d8eb      	bhi.n	8010506 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801052e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010530:	4618      	mov	r0, r3
 8010532:	3718      	adds	r7, #24
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010542:	2300      	movs	r3, #0
 8010544:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801054a:	683a      	ldr	r2, [r7, #0]
 801054c:	429a      	cmp	r2, r3
 801054e:	d01b      	beq.n	8010588 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f7ff ffad 	bl	80104b0 <sync_window>
 8010556:	4603      	mov	r3, r0
 8010558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801055a:	7bfb      	ldrb	r3, [r7, #15]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d113      	bne.n	8010588 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	7858      	ldrb	r0, [r3, #1]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801056a:	2301      	movs	r3, #1
 801056c:	683a      	ldr	r2, [r7, #0]
 801056e:	f7ff fb91 	bl	800fc94 <disk_read>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d004      	beq.n	8010582 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010578:	f04f 33ff 	mov.w	r3, #4294967295
 801057c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801057e:	2301      	movs	r3, #1
 8010580:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	683a      	ldr	r2, [r7, #0]
 8010586:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8010588:	7bfb      	ldrb	r3, [r7, #15]
}
 801058a:	4618      	mov	r0, r3
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
	...

08010594 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f7ff ff87 	bl	80104b0 <sync_window>
 80105a2:	4603      	mov	r3, r0
 80105a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80105a6:	7bfb      	ldrb	r3, [r7, #15]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d159      	bne.n	8010660 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	2b03      	cmp	r3, #3
 80105b2:	d149      	bne.n	8010648 <sync_fs+0xb4>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	791b      	ldrb	r3, [r3, #4]
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	d145      	bne.n	8010648 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	899b      	ldrh	r3, [r3, #12]
 80105c6:	461a      	mov	r2, r3
 80105c8:	2100      	movs	r1, #0
 80105ca:	f7ff fda8 	bl	801011e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	333c      	adds	r3, #60	; 0x3c
 80105d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80105d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80105da:	4618      	mov	r0, r3
 80105dc:	f7ff fcb0 	bl	800ff40 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	333c      	adds	r3, #60	; 0x3c
 80105e4:	4921      	ldr	r1, [pc, #132]	; (801066c <sync_fs+0xd8>)
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7ff fcc5 	bl	800ff76 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	333c      	adds	r3, #60	; 0x3c
 80105f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80105f4:	491e      	ldr	r1, [pc, #120]	; (8010670 <sync_fs+0xdc>)
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7ff fcbd 	bl	800ff76 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	333c      	adds	r3, #60	; 0x3c
 8010600:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	69db      	ldr	r3, [r3, #28]
 8010608:	4619      	mov	r1, r3
 801060a:	4610      	mov	r0, r2
 801060c:	f7ff fcb3 	bl	800ff76 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	333c      	adds	r3, #60	; 0x3c
 8010614:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	699b      	ldr	r3, [r3, #24]
 801061c:	4619      	mov	r1, r3
 801061e:	4610      	mov	r0, r2
 8010620:	f7ff fca9 	bl	800ff76 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010628:	1c5a      	adds	r2, r3, #1
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	7858      	ldrb	r0, [r3, #1]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801063c:	2301      	movs	r3, #1
 801063e:	f7ff fb49 	bl	800fcd4 <disk_write>
			fs->fsi_flag = 0;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	785b      	ldrb	r3, [r3, #1]
 801064c:	2200      	movs	r2, #0
 801064e:	2100      	movs	r1, #0
 8010650:	4618      	mov	r0, r3
 8010652:	f7ff fb5f 	bl	800fd14 <disk_ioctl>
 8010656:	4603      	mov	r3, r0
 8010658:	2b00      	cmp	r3, #0
 801065a:	d001      	beq.n	8010660 <sync_fs+0xcc>
 801065c:	2301      	movs	r3, #1
 801065e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010660:	7bfb      	ldrb	r3, [r7, #15]
}
 8010662:	4618      	mov	r0, r3
 8010664:	3710      	adds	r7, #16
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	41615252 	.word	0x41615252
 8010670:	61417272 	.word	0x61417272

08010674 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010674:	b480      	push	{r7}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	3b02      	subs	r3, #2
 8010682:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6a1b      	ldr	r3, [r3, #32]
 8010688:	3b02      	subs	r3, #2
 801068a:	683a      	ldr	r2, [r7, #0]
 801068c:	429a      	cmp	r2, r3
 801068e:	d301      	bcc.n	8010694 <clust2sect+0x20>
 8010690:	2300      	movs	r3, #0
 8010692:	e008      	b.n	80106a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	895b      	ldrh	r3, [r3, #10]
 8010698:	461a      	mov	r2, r3
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	fb03 f202 	mul.w	r2, r3, r2
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106a4:	4413      	add	r3, r2
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	370c      	adds	r7, #12
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
	...

080106b4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80106b4:	b590      	push	{r4, r7, lr}
 80106b6:	b089      	sub	sp, #36	; 0x24
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d904      	bls.n	80106d4 <get_fat+0x20>
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	6a1b      	ldr	r3, [r3, #32]
 80106ce:	683a      	ldr	r2, [r7, #0]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d302      	bcc.n	80106da <get_fat+0x26>
		val = 1;	/* Internal error */
 80106d4:	2301      	movs	r3, #1
 80106d6:	61fb      	str	r3, [r7, #28]
 80106d8:	e13a      	b.n	8010950 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80106da:	f04f 33ff 	mov.w	r3, #4294967295
 80106de:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80106e0:	69bb      	ldr	r3, [r7, #24]
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	3b01      	subs	r3, #1
 80106e6:	2b03      	cmp	r3, #3
 80106e8:	f200 8126 	bhi.w	8010938 <get_fat+0x284>
 80106ec:	a201      	add	r2, pc, #4	; (adr r2, 80106f4 <get_fat+0x40>)
 80106ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f2:	bf00      	nop
 80106f4:	08010705 	.word	0x08010705
 80106f8:	080107b3 	.word	0x080107b3
 80106fc:	080107ff 	.word	0x080107ff
 8010700:	0801084f 	.word	0x0801084f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	60fb      	str	r3, [r7, #12]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	085b      	lsrs	r3, r3, #1
 801070c:	68fa      	ldr	r2, [r7, #12]
 801070e:	4413      	add	r3, r2
 8010710:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010712:	69bb      	ldr	r3, [r7, #24]
 8010714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	899b      	ldrh	r3, [r3, #12]
 801071a:	4619      	mov	r1, r3
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010722:	4413      	add	r3, r2
 8010724:	4619      	mov	r1, r3
 8010726:	69b8      	ldr	r0, [r7, #24]
 8010728:	f7ff ff06 	bl	8010538 <move_window>
 801072c:	4603      	mov	r3, r0
 801072e:	2b00      	cmp	r3, #0
 8010730:	f040 8105 	bne.w	801093e <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	1c5a      	adds	r2, r3, #1
 8010738:	60fa      	str	r2, [r7, #12]
 801073a:	69ba      	ldr	r2, [r7, #24]
 801073c:	8992      	ldrh	r2, [r2, #12]
 801073e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010742:	fb02 f201 	mul.w	r2, r2, r1
 8010746:	1a9b      	subs	r3, r3, r2
 8010748:	69ba      	ldr	r2, [r7, #24]
 801074a:	4413      	add	r3, r2
 801074c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010750:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	899b      	ldrh	r3, [r3, #12]
 801075a:	4619      	mov	r1, r3
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010762:	4413      	add	r3, r2
 8010764:	4619      	mov	r1, r3
 8010766:	69b8      	ldr	r0, [r7, #24]
 8010768:	f7ff fee6 	bl	8010538 <move_window>
 801076c:	4603      	mov	r3, r0
 801076e:	2b00      	cmp	r3, #0
 8010770:	f040 80e7 	bne.w	8010942 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	899b      	ldrh	r3, [r3, #12]
 8010778:	461a      	mov	r2, r3
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010780:	fb02 f201 	mul.w	r2, r2, r1
 8010784:	1a9b      	subs	r3, r3, r2
 8010786:	69ba      	ldr	r2, [r7, #24]
 8010788:	4413      	add	r3, r2
 801078a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801078e:	021b      	lsls	r3, r3, #8
 8010790:	461a      	mov	r2, r3
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	4313      	orrs	r3, r2
 8010796:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	f003 0301 	and.w	r3, r3, #1
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d002      	beq.n	80107a8 <get_fat+0xf4>
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	091b      	lsrs	r3, r3, #4
 80107a6:	e002      	b.n	80107ae <get_fat+0xfa>
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80107ae:	61fb      	str	r3, [r7, #28]
			break;
 80107b0:	e0ce      	b.n	8010950 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80107b2:	69bb      	ldr	r3, [r7, #24]
 80107b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	899b      	ldrh	r3, [r3, #12]
 80107ba:	085b      	lsrs	r3, r3, #1
 80107bc:	b29b      	uxth	r3, r3
 80107be:	4619      	mov	r1, r3
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80107c6:	4413      	add	r3, r2
 80107c8:	4619      	mov	r1, r3
 80107ca:	69b8      	ldr	r0, [r7, #24]
 80107cc:	f7ff feb4 	bl	8010538 <move_window>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f040 80b7 	bne.w	8010946 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80107d8:	69bb      	ldr	r3, [r7, #24]
 80107da:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	005b      	lsls	r3, r3, #1
 80107e2:	69ba      	ldr	r2, [r7, #24]
 80107e4:	8992      	ldrh	r2, [r2, #12]
 80107e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80107ea:	fb02 f200 	mul.w	r2, r2, r0
 80107ee:	1a9b      	subs	r3, r3, r2
 80107f0:	440b      	add	r3, r1
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7ff faac 	bl	800fd50 <ld_word>
 80107f8:	4603      	mov	r3, r0
 80107fa:	61fb      	str	r3, [r7, #28]
			break;
 80107fc:	e0a8      	b.n	8010950 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	899b      	ldrh	r3, [r3, #12]
 8010806:	089b      	lsrs	r3, r3, #2
 8010808:	b29b      	uxth	r3, r3
 801080a:	4619      	mov	r1, r3
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010812:	4413      	add	r3, r2
 8010814:	4619      	mov	r1, r3
 8010816:	69b8      	ldr	r0, [r7, #24]
 8010818:	f7ff fe8e 	bl	8010538 <move_window>
 801081c:	4603      	mov	r3, r0
 801081e:	2b00      	cmp	r3, #0
 8010820:	f040 8093 	bne.w	801094a <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010824:	69bb      	ldr	r3, [r7, #24]
 8010826:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	009b      	lsls	r3, r3, #2
 801082e:	69ba      	ldr	r2, [r7, #24]
 8010830:	8992      	ldrh	r2, [r2, #12]
 8010832:	fbb3 f0f2 	udiv	r0, r3, r2
 8010836:	fb02 f200 	mul.w	r2, r2, r0
 801083a:	1a9b      	subs	r3, r3, r2
 801083c:	440b      	add	r3, r1
 801083e:	4618      	mov	r0, r3
 8010840:	f7ff fa9e 	bl	800fd80 <ld_dword>
 8010844:	4603      	mov	r3, r0
 8010846:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801084a:	61fb      	str	r3, [r7, #28]
			break;
 801084c:	e080      	b.n	8010950 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010854:	4323      	orrs	r3, r4
 8010856:	d06f      	beq.n	8010938 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	689b      	ldr	r3, [r3, #8]
 801085c:	683a      	ldr	r2, [r7, #0]
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010868:	f113 30ff 	adds.w	r0, r3, #4294967295
 801086c:	f144 31ff 	adc.w	r1, r4, #4294967295
 8010870:	69bb      	ldr	r3, [r7, #24]
 8010872:	899b      	ldrh	r3, [r3, #12]
 8010874:	b29b      	uxth	r3, r3
 8010876:	f04f 0400 	mov.w	r4, #0
 801087a:	461a      	mov	r2, r3
 801087c:	4623      	mov	r3, r4
 801087e:	f7ef fd2b 	bl	80002d8 <__aeabi_uldivmod>
 8010882:	4603      	mov	r3, r0
 8010884:	460c      	mov	r4, r1
 8010886:	461a      	mov	r2, r3
 8010888:	69bb      	ldr	r3, [r7, #24]
 801088a:	895b      	ldrh	r3, [r3, #10]
 801088c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010890:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	79db      	ldrb	r3, [r3, #7]
 8010896:	2b02      	cmp	r3, #2
 8010898:	d10e      	bne.n	80108b8 <get_fat+0x204>
					if (cofs <= clen) {
 801089a:	697a      	ldr	r2, [r7, #20]
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d80a      	bhi.n	80108b8 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80108a2:	697a      	ldr	r2, [r7, #20]
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d002      	beq.n	80108b0 <get_fat+0x1fc>
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	3301      	adds	r3, #1
 80108ae:	e001      	b.n	80108b4 <get_fat+0x200>
 80108b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80108b4:	61fb      	str	r3, [r7, #28]
						break;
 80108b6:	e04b      	b.n	8010950 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	79db      	ldrb	r3, [r3, #7]
 80108bc:	2b03      	cmp	r3, #3
 80108be:	d108      	bne.n	80108d2 <get_fat+0x21e>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	699b      	ldr	r3, [r3, #24]
 80108c4:	697a      	ldr	r2, [r7, #20]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d203      	bcs.n	80108d2 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	3301      	adds	r3, #1
 80108ce:	61fb      	str	r3, [r7, #28]
					break;
 80108d0:	e03e      	b.n	8010950 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	79db      	ldrb	r3, [r3, #7]
 80108d6:	2b02      	cmp	r3, #2
 80108d8:	d02e      	beq.n	8010938 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	69db      	ldr	r3, [r3, #28]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d003      	beq.n	80108ea <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80108e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80108e6:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80108e8:	e032      	b.n	8010950 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	899b      	ldrh	r3, [r3, #12]
 80108f2:	089b      	lsrs	r3, r3, #2
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	4619      	mov	r1, r3
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80108fe:	4413      	add	r3, r2
 8010900:	4619      	mov	r1, r3
 8010902:	69b8      	ldr	r0, [r7, #24]
 8010904:	f7ff fe18 	bl	8010538 <move_window>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d11f      	bne.n	801094e <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	69ba      	ldr	r2, [r7, #24]
 801091a:	8992      	ldrh	r2, [r2, #12]
 801091c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010920:	fb02 f200 	mul.w	r2, r2, r0
 8010924:	1a9b      	subs	r3, r3, r2
 8010926:	440b      	add	r3, r1
 8010928:	4618      	mov	r0, r3
 801092a:	f7ff fa29 	bl	800fd80 <ld_dword>
 801092e:	4603      	mov	r3, r0
 8010930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010934:	61fb      	str	r3, [r7, #28]
					break;
 8010936:	e00b      	b.n	8010950 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010938:	2301      	movs	r3, #1
 801093a:	61fb      	str	r3, [r7, #28]
 801093c:	e008      	b.n	8010950 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801093e:	bf00      	nop
 8010940:	e006      	b.n	8010950 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010942:	bf00      	nop
 8010944:	e004      	b.n	8010950 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010946:	bf00      	nop
 8010948:	e002      	b.n	8010950 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801094a:	bf00      	nop
 801094c:	e000      	b.n	8010950 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801094e:	bf00      	nop
		}
	}

	return val;
 8010950:	69fb      	ldr	r3, [r7, #28]
}
 8010952:	4618      	mov	r0, r3
 8010954:	3724      	adds	r7, #36	; 0x24
 8010956:	46bd      	mov	sp, r7
 8010958:	bd90      	pop	{r4, r7, pc}
 801095a:	bf00      	nop

0801095c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801095c:	b590      	push	{r4, r7, lr}
 801095e:	b089      	sub	sp, #36	; 0x24
 8010960:	af00      	add	r7, sp, #0
 8010962:	60f8      	str	r0, [r7, #12]
 8010964:	60b9      	str	r1, [r7, #8]
 8010966:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010968:	2302      	movs	r3, #2
 801096a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	2b01      	cmp	r3, #1
 8010970:	f240 8111 	bls.w	8010b96 <put_fat+0x23a>
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6a1b      	ldr	r3, [r3, #32]
 8010978:	68ba      	ldr	r2, [r7, #8]
 801097a:	429a      	cmp	r2, r3
 801097c:	f080 810b 	bcs.w	8010b96 <put_fat+0x23a>
		switch (fs->fs_type) {
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	3b01      	subs	r3, #1
 8010986:	2b03      	cmp	r3, #3
 8010988:	f200 8105 	bhi.w	8010b96 <put_fat+0x23a>
 801098c:	a201      	add	r2, pc, #4	; (adr r2, 8010994 <put_fat+0x38>)
 801098e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010992:	bf00      	nop
 8010994:	080109a5 	.word	0x080109a5
 8010998:	08010aa9 	.word	0x08010aa9
 801099c:	08010aff 	.word	0x08010aff
 80109a0:	08010aff 	.word	0x08010aff
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	61bb      	str	r3, [r7, #24]
 80109a8:	69bb      	ldr	r3, [r7, #24]
 80109aa:	085b      	lsrs	r3, r3, #1
 80109ac:	69ba      	ldr	r2, [r7, #24]
 80109ae:	4413      	add	r3, r2
 80109b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	899b      	ldrh	r3, [r3, #12]
 80109ba:	4619      	mov	r1, r3
 80109bc:	69bb      	ldr	r3, [r7, #24]
 80109be:	fbb3 f3f1 	udiv	r3, r3, r1
 80109c2:	4413      	add	r3, r2
 80109c4:	4619      	mov	r1, r3
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	f7ff fdb6 	bl	8010538 <move_window>
 80109cc:	4603      	mov	r3, r0
 80109ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80109d0:	7ffb      	ldrb	r3, [r7, #31]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f040 80d8 	bne.w	8010b88 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80109de:	69bb      	ldr	r3, [r7, #24]
 80109e0:	1c5a      	adds	r2, r3, #1
 80109e2:	61ba      	str	r2, [r7, #24]
 80109e4:	68fa      	ldr	r2, [r7, #12]
 80109e6:	8992      	ldrh	r2, [r2, #12]
 80109e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80109ec:	fb02 f200 	mul.w	r2, r2, r0
 80109f0:	1a9b      	subs	r3, r3, r2
 80109f2:	440b      	add	r3, r1
 80109f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	f003 0301 	and.w	r3, r3, #1
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d00d      	beq.n	8010a1c <put_fat+0xc0>
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	b25b      	sxtb	r3, r3
 8010a06:	f003 030f 	and.w	r3, r3, #15
 8010a0a:	b25a      	sxtb	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	011b      	lsls	r3, r3, #4
 8010a12:	b25b      	sxtb	r3, r3
 8010a14:	4313      	orrs	r3, r2
 8010a16:	b25b      	sxtb	r3, r3
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	e001      	b.n	8010a20 <put_fat+0xc4>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	697a      	ldr	r2, [r7, #20]
 8010a22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2201      	movs	r2, #1
 8010a28:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	899b      	ldrh	r3, [r3, #12]
 8010a32:	4619      	mov	r1, r3
 8010a34:	69bb      	ldr	r3, [r7, #24]
 8010a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a3a:	4413      	add	r3, r2
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	68f8      	ldr	r0, [r7, #12]
 8010a40:	f7ff fd7a 	bl	8010538 <move_window>
 8010a44:	4603      	mov	r3, r0
 8010a46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a48:	7ffb      	ldrb	r3, [r7, #31]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f040 809e 	bne.w	8010b8c <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	899b      	ldrh	r3, [r3, #12]
 8010a5a:	461a      	mov	r2, r3
 8010a5c:	69bb      	ldr	r3, [r7, #24]
 8010a5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a62:	fb02 f200 	mul.w	r2, r2, r0
 8010a66:	1a9b      	subs	r3, r3, r2
 8010a68:	440b      	add	r3, r1
 8010a6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	f003 0301 	and.w	r3, r3, #1
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d003      	beq.n	8010a7e <put_fat+0x122>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	091b      	lsrs	r3, r3, #4
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	e00e      	b.n	8010a9c <put_fat+0x140>
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	b25b      	sxtb	r3, r3
 8010a84:	f023 030f 	bic.w	r3, r3, #15
 8010a88:	b25a      	sxtb	r2, r3
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	0a1b      	lsrs	r3, r3, #8
 8010a8e:	b25b      	sxtb	r3, r3
 8010a90:	f003 030f 	and.w	r3, r3, #15
 8010a94:	b25b      	sxtb	r3, r3
 8010a96:	4313      	orrs	r3, r2
 8010a98:	b25b      	sxtb	r3, r3
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	697a      	ldr	r2, [r7, #20]
 8010a9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	70da      	strb	r2, [r3, #3]
			break;
 8010aa6:	e076      	b.n	8010b96 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	899b      	ldrh	r3, [r3, #12]
 8010ab0:	085b      	lsrs	r3, r3, #1
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	fbb3 f3f1 	udiv	r3, r3, r1
 8010abc:	4413      	add	r3, r2
 8010abe:	4619      	mov	r1, r3
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f7ff fd39 	bl	8010538 <move_window>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010aca:	7ffb      	ldrb	r3, [r7, #31]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d15f      	bne.n	8010b90 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	005b      	lsls	r3, r3, #1
 8010ada:	68fa      	ldr	r2, [r7, #12]
 8010adc:	8992      	ldrh	r2, [r2, #12]
 8010ade:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ae2:	fb02 f200 	mul.w	r2, r2, r0
 8010ae6:	1a9b      	subs	r3, r3, r2
 8010ae8:	440b      	add	r3, r1
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	b292      	uxth	r2, r2
 8010aee:	4611      	mov	r1, r2
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7ff fa25 	bl	800ff40 <st_word>
			fs->wflag = 1;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	2201      	movs	r2, #1
 8010afa:	70da      	strb	r2, [r3, #3]
			break;
 8010afc:	e04b      	b.n	8010b96 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	899b      	ldrh	r3, [r3, #12]
 8010b06:	089b      	lsrs	r3, r3, #2
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b12:	4413      	add	r3, r2
 8010b14:	4619      	mov	r1, r3
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f7ff fd0e 	bl	8010538 <move_window>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b20:	7ffb      	ldrb	r3, [r7, #31]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d136      	bne.n	8010b94 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	2b04      	cmp	r3, #4
 8010b2c:	d017      	beq.n	8010b5e <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	68fa      	ldr	r2, [r7, #12]
 8010b40:	8992      	ldrh	r2, [r2, #12]
 8010b42:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b46:	fb02 f200 	mul.w	r2, r2, r0
 8010b4a:	1a9b      	subs	r3, r3, r2
 8010b4c:	440b      	add	r3, r1
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7ff f916 	bl	800fd80 <ld_dword>
 8010b54:	4603      	mov	r3, r0
 8010b56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010b5a:	4323      	orrs	r3, r4
 8010b5c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	8992      	ldrh	r2, [r2, #12]
 8010b6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b70:	fb02 f200 	mul.w	r2, r2, r0
 8010b74:	1a9b      	subs	r3, r3, r2
 8010b76:	440b      	add	r3, r1
 8010b78:	6879      	ldr	r1, [r7, #4]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7ff f9fb 	bl	800ff76 <st_dword>
			fs->wflag = 1;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2201      	movs	r2, #1
 8010b84:	70da      	strb	r2, [r3, #3]
			break;
 8010b86:	e006      	b.n	8010b96 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010b88:	bf00      	nop
 8010b8a:	e004      	b.n	8010b96 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010b8c:	bf00      	nop
 8010b8e:	e002      	b.n	8010b96 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010b90:	bf00      	nop
 8010b92:	e000      	b.n	8010b96 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010b94:	bf00      	nop
		}
	}
	return res;
 8010b96:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3724      	adds	r7, #36	; 0x24
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd90      	pop	{r4, r7, pc}

08010ba0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b08a      	sub	sp, #40	; 0x28
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	3b02      	subs	r3, #2
 8010bb0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	6a1b      	ldr	r3, [r3, #32]
 8010bb6:	3b02      	subs	r3, #2
 8010bb8:	68ba      	ldr	r2, [r7, #8]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d301      	bcc.n	8010bc2 <find_bitmap+0x22>
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	61fb      	str	r3, [r7, #28]
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	61bb      	str	r3, [r7, #24]
 8010bca:	2300      	movs	r3, #0
 8010bcc:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	08db      	lsrs	r3, r3, #3
 8010bd6:	68f9      	ldr	r1, [r7, #12]
 8010bd8:	8989      	ldrh	r1, [r1, #12]
 8010bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8010bde:	4413      	add	r3, r2
 8010be0:	4619      	mov	r1, r3
 8010be2:	68f8      	ldr	r0, [r7, #12]
 8010be4:	f7ff fca8 	bl	8010538 <move_window>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d002      	beq.n	8010bf4 <find_bitmap+0x54>
 8010bee:	f04f 33ff 	mov.w	r3, #4294967295
 8010bf2:	e058      	b.n	8010ca6 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	08db      	lsrs	r3, r3, #3
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	8992      	ldrh	r2, [r2, #12]
 8010bfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c00:	fb02 f201 	mul.w	r2, r2, r1
 8010c04:	1a9b      	subs	r3, r3, r2
 8010c06:	623b      	str	r3, [r7, #32]
 8010c08:	69fb      	ldr	r3, [r7, #28]
 8010c0a:	f003 0307 	and.w	r3, r3, #7
 8010c0e:	2201      	movs	r2, #1
 8010c10:	fa02 f303 	lsl.w	r3, r2, r3
 8010c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8010c18:	68fa      	ldr	r2, [r7, #12]
 8010c1a:	6a3b      	ldr	r3, [r7, #32]
 8010c1c:	4413      	add	r3, r2
 8010c1e:	333c      	adds	r3, #60	; 0x3c
 8010c20:	781a      	ldrb	r2, [r3, #0]
 8010c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c26:	4013      	ands	r3, r2
 8010c28:	74fb      	strb	r3, [r7, #19]
 8010c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c2e:	005b      	lsls	r3, r3, #1
 8010c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8010c34:	69fb      	ldr	r3, [r7, #28]
 8010c36:	3301      	adds	r3, #1
 8010c38:	61fb      	str	r3, [r7, #28]
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	6a1b      	ldr	r3, [r3, #32]
 8010c3e:	3b02      	subs	r3, #2
 8010c40:	69fa      	ldr	r2, [r7, #28]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d307      	bcc.n	8010c56 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8010c46:	2300      	movs	r3, #0
 8010c48:	61fb      	str	r3, [r7, #28]
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	899b      	ldrh	r3, [r3, #12]
 8010c54:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8010c56:	7cfb      	ldrb	r3, [r7, #19]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d109      	bne.n	8010c70 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	3301      	adds	r3, #1
 8010c60:	617b      	str	r3, [r7, #20]
 8010c62:	697a      	ldr	r2, [r7, #20]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d106      	bne.n	8010c78 <find_bitmap+0xd8>
 8010c6a:	69bb      	ldr	r3, [r7, #24]
 8010c6c:	3302      	adds	r3, #2
 8010c6e:	e01a      	b.n	8010ca6 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8010c70:	69fb      	ldr	r3, [r7, #28]
 8010c72:	61bb      	str	r3, [r7, #24]
 8010c74:	2300      	movs	r3, #0
 8010c76:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8010c78:	69fa      	ldr	r2, [r7, #28]
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d101      	bne.n	8010c84 <find_bitmap+0xe4>
 8010c80:	2300      	movs	r3, #0
 8010c82:	e010      	b.n	8010ca6 <find_bitmap+0x106>
			} while (bm);
 8010c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d1c5      	bne.n	8010c18 <find_bitmap+0x78>
			bm = 1;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	3301      	adds	r3, #1
 8010c96:	623b      	str	r3, [r7, #32]
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	899b      	ldrh	r3, [r3, #12]
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	6a3b      	ldr	r3, [r7, #32]
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d3b9      	bcc.n	8010c18 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010ca4:	e793      	b.n	8010bce <find_bitmap+0x2e>
	}
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3728      	adds	r7, #40	; 0x28
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}

08010cae <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8010cae:	b580      	push	{r7, lr}
 8010cb0:	b088      	sub	sp, #32
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	60f8      	str	r0, [r7, #12]
 8010cb6:	60b9      	str	r1, [r7, #8]
 8010cb8:	607a      	str	r2, [r7, #4]
 8010cba:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	3b02      	subs	r3, #2
 8010cc0:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	08db      	lsrs	r3, r3, #3
 8010cca:	68f9      	ldr	r1, [r7, #12]
 8010ccc:	8989      	ldrh	r1, [r1, #12]
 8010cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cd2:	4413      	add	r3, r2
 8010cd4:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	08db      	lsrs	r3, r3, #3
 8010cda:	68fa      	ldr	r2, [r7, #12]
 8010cdc:	8992      	ldrh	r2, [r2, #12]
 8010cde:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ce2:	fb02 f201 	mul.w	r2, r2, r1
 8010ce6:	1a9b      	subs	r3, r3, r2
 8010ce8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	f003 0307 	and.w	r3, r3, #7
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	1c5a      	adds	r2, r3, #1
 8010cfc:	617a      	str	r2, [r7, #20]
 8010cfe:	4619      	mov	r1, r3
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f7ff fc19 	bl	8010538 <move_window>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d001      	beq.n	8010d10 <change_bitmap+0x62>
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	e03f      	b.n	8010d90 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8010d10:	68fa      	ldr	r2, [r7, #12]
 8010d12:	69bb      	ldr	r3, [r7, #24]
 8010d14:	4413      	add	r3, r2
 8010d16:	333c      	adds	r3, #60	; 0x3c
 8010d18:	781a      	ldrb	r2, [r3, #0]
 8010d1a:	7ffb      	ldrb	r3, [r7, #31]
 8010d1c:	4013      	ands	r3, r2
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	bf14      	ite	ne
 8010d24:	2301      	movne	r3, #1
 8010d26:	2300      	moveq	r3, #0
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d101      	bne.n	8010d36 <change_bitmap+0x88>
 8010d32:	2302      	movs	r3, #2
 8010d34:	e02c      	b.n	8010d90 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8010d36:	68fa      	ldr	r2, [r7, #12]
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	4413      	add	r3, r2
 8010d3c:	333c      	adds	r3, #60	; 0x3c
 8010d3e:	781a      	ldrb	r2, [r3, #0]
 8010d40:	7ffb      	ldrb	r3, [r7, #31]
 8010d42:	4053      	eors	r3, r2
 8010d44:	b2d9      	uxtb	r1, r3
 8010d46:	68fa      	ldr	r2, [r7, #12]
 8010d48:	69bb      	ldr	r3, [r7, #24]
 8010d4a:	4413      	add	r3, r2
 8010d4c:	333c      	adds	r3, #60	; 0x3c
 8010d4e:	460a      	mov	r2, r1
 8010d50:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2201      	movs	r2, #1
 8010d56:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	607b      	str	r3, [r7, #4]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d101      	bne.n	8010d68 <change_bitmap+0xba>
 8010d64:	2300      	movs	r3, #0
 8010d66:	e013      	b.n	8010d90 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8010d68:	7ffb      	ldrb	r3, [r7, #31]
 8010d6a:	005b      	lsls	r3, r3, #1
 8010d6c:	77fb      	strb	r3, [r7, #31]
 8010d6e:	7ffb      	ldrb	r3, [r7, #31]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d1cd      	bne.n	8010d10 <change_bitmap+0x62>
			bm = 1;
 8010d74:	2301      	movs	r3, #1
 8010d76:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	61bb      	str	r3, [r7, #24]
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	899b      	ldrh	r3, [r3, #12]
 8010d82:	461a      	mov	r2, r3
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d3c2      	bcc.n	8010d10 <change_bitmap+0x62>
		i = 0;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010d8e:	e7b3      	b.n	8010cf8 <change_bitmap+0x4a>
	}
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3720      	adds	r7, #32
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}

08010d98 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b086      	sub	sp, #24
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	79db      	ldrb	r3, [r3, #7]
 8010da4:	2b03      	cmp	r3, #3
 8010da6:	d121      	bne.n	8010dec <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	689b      	ldr	r3, [r3, #8]
 8010dac:	617b      	str	r3, [r7, #20]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	613b      	str	r3, [r7, #16]
 8010db4:	e014      	b.n	8010de0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6818      	ldr	r0, [r3, #0]
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	6979      	ldr	r1, [r7, #20]
 8010dc2:	f7ff fdcb 	bl	801095c <put_fat>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8010dca:	7bfb      	ldrb	r3, [r7, #15]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d001      	beq.n	8010dd4 <fill_first_frag+0x3c>
 8010dd0:	7bfb      	ldrb	r3, [r7, #15]
 8010dd2:	e00c      	b.n	8010dee <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	617b      	str	r3, [r7, #20]
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	613b      	str	r3, [r7, #16]
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d1e7      	bne.n	8010db6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2200      	movs	r2, #0
 8010dea:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8010dec:	2300      	movs	r3, #0
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3718      	adds	r7, #24
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}

08010df6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8010df6:	b580      	push	{r7, lr}
 8010df8:	b086      	sub	sp, #24
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	60f8      	str	r0, [r7, #12]
 8010dfe:	60b9      	str	r1, [r7, #8]
 8010e00:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010e02:	e020      	b.n	8010e46 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	6818      	ldr	r0, [r3, #0]
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	69db      	ldr	r3, [r3, #28]
 8010e0c:	68ba      	ldr	r2, [r7, #8]
 8010e0e:	1ad3      	subs	r3, r2, r3
 8010e10:	1c59      	adds	r1, r3, #1
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	69db      	ldr	r3, [r3, #28]
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d905      	bls.n	8010e26 <fill_last_frag+0x30>
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	69db      	ldr	r3, [r3, #28]
 8010e1e:	68ba      	ldr	r2, [r7, #8]
 8010e20:	1ad3      	subs	r3, r2, r3
 8010e22:	3302      	adds	r3, #2
 8010e24:	e000      	b.n	8010e28 <fill_last_frag+0x32>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	461a      	mov	r2, r3
 8010e2a:	f7ff fd97 	bl	801095c <put_fat>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8010e32:	7dfb      	ldrb	r3, [r7, #23]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d001      	beq.n	8010e3c <fill_last_frag+0x46>
 8010e38:	7dfb      	ldrb	r3, [r7, #23]
 8010e3a:	e009      	b.n	8010e50 <fill_last_frag+0x5a>
		obj->n_frag--;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	69db      	ldr	r3, [r3, #28]
 8010e40:	1e5a      	subs	r2, r3, #1
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	69db      	ldr	r3, [r3, #28]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d1da      	bne.n	8010e04 <fill_last_frag+0xe>
	}
	return FR_OK;
 8010e4e:	2300      	movs	r3, #0
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3718      	adds	r7, #24
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b08a      	sub	sp, #40	; 0x28
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010e64:	2300      	movs	r3, #0
 8010e66:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	627b      	str	r3, [r7, #36]	; 0x24
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	2b01      	cmp	r3, #1
 8010e7a:	d904      	bls.n	8010e86 <remove_chain+0x2e>
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	6a1b      	ldr	r3, [r3, #32]
 8010e80:	68ba      	ldr	r2, [r7, #8]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d301      	bcc.n	8010e8a <remove_chain+0x32>
 8010e86:	2302      	movs	r3, #2
 8010e88:	e096      	b.n	8010fb8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d014      	beq.n	8010eba <remove_chain+0x62>
 8010e90:	69bb      	ldr	r3, [r7, #24]
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	2b04      	cmp	r3, #4
 8010e96:	d103      	bne.n	8010ea0 <remove_chain+0x48>
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	79db      	ldrb	r3, [r3, #7]
 8010e9c:	2b02      	cmp	r3, #2
 8010e9e:	d00c      	beq.n	8010eba <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ea4:	6879      	ldr	r1, [r7, #4]
 8010ea6:	69b8      	ldr	r0, [r7, #24]
 8010ea8:	f7ff fd58 	bl	801095c <put_fat>
 8010eac:	4603      	mov	r3, r0
 8010eae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010eb0:	7ffb      	ldrb	r3, [r7, #31]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d001      	beq.n	8010eba <remove_chain+0x62>
 8010eb6:	7ffb      	ldrb	r3, [r7, #31]
 8010eb8:	e07e      	b.n	8010fb8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010eba:	68b9      	ldr	r1, [r7, #8]
 8010ebc:	68f8      	ldr	r0, [r7, #12]
 8010ebe:	f7ff fbf9 	bl	80106b4 <get_fat>
 8010ec2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d055      	beq.n	8010f76 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d101      	bne.n	8010ed4 <remove_chain+0x7c>
 8010ed0:	2302      	movs	r3, #2
 8010ed2:	e071      	b.n	8010fb8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eda:	d101      	bne.n	8010ee0 <remove_chain+0x88>
 8010edc:	2301      	movs	r3, #1
 8010ede:	e06b      	b.n	8010fb8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010ee0:	69bb      	ldr	r3, [r7, #24]
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	2b04      	cmp	r3, #4
 8010ee6:	d00b      	beq.n	8010f00 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010ee8:	2200      	movs	r2, #0
 8010eea:	68b9      	ldr	r1, [r7, #8]
 8010eec:	69b8      	ldr	r0, [r7, #24]
 8010eee:	f7ff fd35 	bl	801095c <put_fat>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010ef6:	7ffb      	ldrb	r3, [r7, #31]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d001      	beq.n	8010f00 <remove_chain+0xa8>
 8010efc:	7ffb      	ldrb	r3, [r7, #31]
 8010efe:	e05b      	b.n	8010fb8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010f00:	69bb      	ldr	r3, [r7, #24]
 8010f02:	69da      	ldr	r2, [r3, #28]
 8010f04:	69bb      	ldr	r3, [r7, #24]
 8010f06:	6a1b      	ldr	r3, [r3, #32]
 8010f08:	3b02      	subs	r3, #2
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d20b      	bcs.n	8010f26 <remove_chain+0xce>
			fs->free_clst++;
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	69db      	ldr	r3, [r3, #28]
 8010f12:	1c5a      	adds	r2, r3, #1
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8010f18:	69bb      	ldr	r3, [r7, #24]
 8010f1a:	791b      	ldrb	r3, [r3, #4]
 8010f1c:	f043 0301 	orr.w	r3, r3, #1
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8010f26:	6a3b      	ldr	r3, [r7, #32]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	697a      	ldr	r2, [r7, #20]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d102      	bne.n	8010f36 <remove_chain+0xde>
			ecl = nxt;
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	623b      	str	r3, [r7, #32]
 8010f34:	e017      	b.n	8010f66 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	781b      	ldrb	r3, [r3, #0]
 8010f3a:	2b04      	cmp	r3, #4
 8010f3c:	d10f      	bne.n	8010f5e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8010f3e:	6a3a      	ldr	r2, [r7, #32]
 8010f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f42:	1ad3      	subs	r3, r2, r3
 8010f44:	1c5a      	adds	r2, r3, #1
 8010f46:	2300      	movs	r3, #0
 8010f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f4a:	69b8      	ldr	r0, [r7, #24]
 8010f4c:	f7ff feaf 	bl	8010cae <change_bitmap>
 8010f50:	4603      	mov	r3, r0
 8010f52:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8010f54:	7ffb      	ldrb	r3, [r7, #31]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d001      	beq.n	8010f5e <remove_chain+0x106>
 8010f5a:	7ffb      	ldrb	r3, [r7, #31]
 8010f5c:	e02c      	b.n	8010fb8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	623b      	str	r3, [r7, #32]
 8010f62:	6a3b      	ldr	r3, [r7, #32]
 8010f64:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	6a1b      	ldr	r3, [r3, #32]
 8010f6e:	68ba      	ldr	r2, [r7, #8]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d3a2      	bcc.n	8010eba <remove_chain+0x62>
 8010f74:	e000      	b.n	8010f78 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8010f76:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8010f78:	69bb      	ldr	r3, [r7, #24]
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	2b04      	cmp	r3, #4
 8010f7e:	d11a      	bne.n	8010fb6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d103      	bne.n	8010f8e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	71da      	strb	r2, [r3, #7]
 8010f8c:	e013      	b.n	8010fb6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	79db      	ldrb	r3, [r3, #7]
 8010f92:	2b03      	cmp	r3, #3
 8010f94:	d10f      	bne.n	8010fb6 <remove_chain+0x15e>
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	689b      	ldr	r3, [r3, #8]
 8010f9a:	687a      	ldr	r2, [r7, #4]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d30a      	bcc.n	8010fb6 <remove_chain+0x15e>
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	689a      	ldr	r2, [r3, #8]
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	699b      	ldr	r3, [r3, #24]
 8010fa8:	4413      	add	r3, r2
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d802      	bhi.n	8010fb6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2202      	movs	r2, #2
 8010fb4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8010fb6:	2300      	movs	r3, #0
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3728      	adds	r7, #40	; 0x28
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b088      	sub	sp, #32
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d10d      	bne.n	8010ff2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	699b      	ldr	r3, [r3, #24]
 8010fda:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010fdc:	69bb      	ldr	r3, [r7, #24]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d004      	beq.n	8010fec <create_chain+0x2c>
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	6a1b      	ldr	r3, [r3, #32]
 8010fe6:	69ba      	ldr	r2, [r7, #24]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d31b      	bcc.n	8011024 <create_chain+0x64>
 8010fec:	2301      	movs	r3, #1
 8010fee:	61bb      	str	r3, [r7, #24]
 8010ff0:	e018      	b.n	8011024 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010ff2:	6839      	ldr	r1, [r7, #0]
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7ff fb5d 	bl	80106b4 <get_fat>
 8010ffa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d801      	bhi.n	8011006 <create_chain+0x46>
 8011002:	2301      	movs	r3, #1
 8011004:	e0d9      	b.n	80111ba <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100c:	d101      	bne.n	8011012 <create_chain+0x52>
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	e0d3      	b.n	80111ba <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	6a1b      	ldr	r3, [r3, #32]
 8011016:	68fa      	ldr	r2, [r7, #12]
 8011018:	429a      	cmp	r2, r3
 801101a:	d201      	bcs.n	8011020 <create_chain+0x60>
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	e0cc      	b.n	80111ba <create_chain+0x1fa>
		scl = clst;
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	2b04      	cmp	r3, #4
 801102a:	d164      	bne.n	80110f6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 801102c:	2201      	movs	r2, #1
 801102e:	69b9      	ldr	r1, [r7, #24]
 8011030:	6938      	ldr	r0, [r7, #16]
 8011032:	f7ff fdb5 	bl	8010ba0 <find_bitmap>
 8011036:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d003      	beq.n	8011046 <create_chain+0x86>
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011044:	d101      	bne.n	801104a <create_chain+0x8a>
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	e0b7      	b.n	80111ba <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 801104a:	2301      	movs	r3, #1
 801104c:	2201      	movs	r2, #1
 801104e:	69f9      	ldr	r1, [r7, #28]
 8011050:	6938      	ldr	r0, [r7, #16]
 8011052:	f7ff fe2c 	bl	8010cae <change_bitmap>
 8011056:	4603      	mov	r3, r0
 8011058:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 801105a:	7dfb      	ldrb	r3, [r7, #23]
 801105c:	2b02      	cmp	r3, #2
 801105e:	d101      	bne.n	8011064 <create_chain+0xa4>
 8011060:	2301      	movs	r3, #1
 8011062:	e0aa      	b.n	80111ba <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8011064:	7dfb      	ldrb	r3, [r7, #23]
 8011066:	2b01      	cmp	r3, #1
 8011068:	d102      	bne.n	8011070 <create_chain+0xb0>
 801106a:	f04f 33ff 	mov.w	r3, #4294967295
 801106e:	e0a4      	b.n	80111ba <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d103      	bne.n	801107e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2202      	movs	r2, #2
 801107a:	71da      	strb	r2, [r3, #7]
 801107c:	e011      	b.n	80110a2 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	79db      	ldrb	r3, [r3, #7]
 8011082:	2b02      	cmp	r3, #2
 8011084:	d10d      	bne.n	80110a2 <create_chain+0xe2>
 8011086:	69bb      	ldr	r3, [r7, #24]
 8011088:	3301      	adds	r3, #1
 801108a:	69fa      	ldr	r2, [r7, #28]
 801108c:	429a      	cmp	r2, r3
 801108e:	d008      	beq.n	80110a2 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	689b      	ldr	r3, [r3, #8]
 8011094:	69ba      	ldr	r2, [r7, #24]
 8011096:	1ad2      	subs	r2, r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2203      	movs	r2, #3
 80110a0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	79db      	ldrb	r3, [r3, #7]
 80110a6:	2b02      	cmp	r3, #2
 80110a8:	d064      	beq.n	8011174 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	3301      	adds	r3, #1
 80110ae:	69fa      	ldr	r2, [r7, #28]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d10b      	bne.n	80110cc <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	69db      	ldr	r3, [r3, #28]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d003      	beq.n	80110c4 <create_chain+0x104>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	69db      	ldr	r3, [r3, #28]
 80110c0:	3301      	adds	r3, #1
 80110c2:	e000      	b.n	80110c6 <create_chain+0x106>
 80110c4:	2302      	movs	r3, #2
 80110c6:	687a      	ldr	r2, [r7, #4]
 80110c8:	61d3      	str	r3, [r2, #28]
 80110ca:	e053      	b.n	8011174 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	69db      	ldr	r3, [r3, #28]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d102      	bne.n	80110da <create_chain+0x11a>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2201      	movs	r2, #1
 80110d8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80110da:	69fa      	ldr	r2, [r7, #28]
 80110dc:	6839      	ldr	r1, [r7, #0]
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7ff fe89 	bl	8010df6 <fill_last_frag>
 80110e4:	4603      	mov	r3, r0
 80110e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80110e8:	7dfb      	ldrb	r3, [r7, #23]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d142      	bne.n	8011174 <create_chain+0x1b4>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2201      	movs	r2, #1
 80110f2:	61da      	str	r2, [r3, #28]
 80110f4:	e03e      	b.n	8011174 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	3301      	adds	r3, #1
 80110fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	6a1b      	ldr	r3, [r3, #32]
 8011104:	69fa      	ldr	r2, [r7, #28]
 8011106:	429a      	cmp	r2, r3
 8011108:	d307      	bcc.n	801111a <create_chain+0x15a>
				ncl = 2;
 801110a:	2302      	movs	r3, #2
 801110c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801110e:	69fa      	ldr	r2, [r7, #28]
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	429a      	cmp	r2, r3
 8011114:	d901      	bls.n	801111a <create_chain+0x15a>
 8011116:	2300      	movs	r3, #0
 8011118:	e04f      	b.n	80111ba <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801111a:	69f9      	ldr	r1, [r7, #28]
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f7ff fac9 	bl	80106b4 <get_fat>
 8011122:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00e      	beq.n	8011148 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2b01      	cmp	r3, #1
 801112e:	d003      	beq.n	8011138 <create_chain+0x178>
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011136:	d101      	bne.n	801113c <create_chain+0x17c>
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	e03e      	b.n	80111ba <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 801113c:	69fa      	ldr	r2, [r7, #28]
 801113e:	69bb      	ldr	r3, [r7, #24]
 8011140:	429a      	cmp	r2, r3
 8011142:	d1da      	bne.n	80110fa <create_chain+0x13a>
 8011144:	2300      	movs	r3, #0
 8011146:	e038      	b.n	80111ba <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8011148:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801114a:	f04f 32ff 	mov.w	r2, #4294967295
 801114e:	69f9      	ldr	r1, [r7, #28]
 8011150:	6938      	ldr	r0, [r7, #16]
 8011152:	f7ff fc03 	bl	801095c <put_fat>
 8011156:	4603      	mov	r3, r0
 8011158:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801115a:	7dfb      	ldrb	r3, [r7, #23]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d109      	bne.n	8011174 <create_chain+0x1b4>
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d006      	beq.n	8011174 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011166:	69fa      	ldr	r2, [r7, #28]
 8011168:	6839      	ldr	r1, [r7, #0]
 801116a:	6938      	ldr	r0, [r7, #16]
 801116c:	f7ff fbf6 	bl	801095c <put_fat>
 8011170:	4603      	mov	r3, r0
 8011172:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011174:	7dfb      	ldrb	r3, [r7, #23]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d116      	bne.n	80111a8 <create_chain+0x1e8>
		fs->last_clst = ncl;
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	69fa      	ldr	r2, [r7, #28]
 801117e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	69da      	ldr	r2, [r3, #28]
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	6a1b      	ldr	r3, [r3, #32]
 8011188:	3b02      	subs	r3, #2
 801118a:	429a      	cmp	r2, r3
 801118c:	d804      	bhi.n	8011198 <create_chain+0x1d8>
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	69db      	ldr	r3, [r3, #28]
 8011192:	1e5a      	subs	r2, r3, #1
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	791b      	ldrb	r3, [r3, #4]
 801119c:	f043 0301 	orr.w	r3, r3, #1
 80111a0:	b2da      	uxtb	r2, r3
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	711a      	strb	r2, [r3, #4]
 80111a6:	e007      	b.n	80111b8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80111a8:	7dfb      	ldrb	r3, [r7, #23]
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d102      	bne.n	80111b4 <create_chain+0x1f4>
 80111ae:	f04f 33ff 	mov.w	r3, #4294967295
 80111b2:	e000      	b.n	80111b6 <create_chain+0x1f6>
 80111b4:	2301      	movs	r3, #1
 80111b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80111b8:	69fb      	ldr	r3, [r7, #28]
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3720      	adds	r7, #32
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}

080111c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80111c2:	b590      	push	{r4, r7, lr}
 80111c4:	b089      	sub	sp, #36	; 0x24
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	60f8      	str	r0, [r7, #12]
 80111ca:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111d8:	3304      	adds	r3, #4
 80111da:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	899b      	ldrh	r3, [r3, #12]
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	f04f 0400 	mov.w	r4, #0
 80111e6:	461a      	mov	r2, r3
 80111e8:	4623      	mov	r3, r4
 80111ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80111ee:	f7ef f873 	bl	80002d8 <__aeabi_uldivmod>
 80111f2:	4603      	mov	r3, r0
 80111f4:	460c      	mov	r4, r1
 80111f6:	4618      	mov	r0, r3
 80111f8:	4621      	mov	r1, r4
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	895b      	ldrh	r3, [r3, #10]
 80111fe:	b29b      	uxth	r3, r3
 8011200:	f04f 0400 	mov.w	r4, #0
 8011204:	461a      	mov	r2, r3
 8011206:	4623      	mov	r3, r4
 8011208:	f7ef f866 	bl	80002d8 <__aeabi_uldivmod>
 801120c:	4603      	mov	r3, r0
 801120e:	460c      	mov	r4, r1
 8011210:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011212:	69bb      	ldr	r3, [r7, #24]
 8011214:	1d1a      	adds	r2, r3, #4
 8011216:	61ba      	str	r2, [r7, #24]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d101      	bne.n	8011226 <clmt_clust+0x64>
 8011222:	2300      	movs	r3, #0
 8011224:	e010      	b.n	8011248 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 8011226:	69fa      	ldr	r2, [r7, #28]
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	429a      	cmp	r2, r3
 801122c:	d307      	bcc.n	801123e <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 801122e:	69fa      	ldr	r2, [r7, #28]
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	1ad3      	subs	r3, r2, r3
 8011234:	61fb      	str	r3, [r7, #28]
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	3304      	adds	r3, #4
 801123a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801123c:	e7e9      	b.n	8011212 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 801123e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	681a      	ldr	r2, [r3, #0]
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	4413      	add	r3, r2
}
 8011248:	4618      	mov	r0, r3
 801124a:	3724      	adds	r7, #36	; 0x24
 801124c:	46bd      	mov	sp, r7
 801124e:	bd90      	pop	{r4, r7, pc}

08011250 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b086      	sub	sp, #24
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	2b04      	cmp	r3, #4
 8011266:	d102      	bne.n	801126e <dir_sdi+0x1e>
 8011268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801126c:	e001      	b.n	8011272 <dir_sdi+0x22>
 801126e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	429a      	cmp	r2, r3
 8011276:	d904      	bls.n	8011282 <dir_sdi+0x32>
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	f003 031f 	and.w	r3, r3, #31
 801127e:	2b00      	cmp	r3, #0
 8011280:	d001      	beq.n	8011286 <dir_sdi+0x36>
		return FR_INT_ERR;
 8011282:	2302      	movs	r3, #2
 8011284:	e074      	b.n	8011370 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	683a      	ldr	r2, [r7, #0]
 801128a:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	689b      	ldr	r3, [r3, #8]
 8011290:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d109      	bne.n	80112ac <dir_sdi+0x5c>
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	2b02      	cmp	r3, #2
 801129e:	d905      	bls.n	80112ac <dir_sdi+0x5c>
		clst = fs->dirbase;
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2200      	movs	r2, #0
 80112aa:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d10c      	bne.n	80112cc <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	095b      	lsrs	r3, r3, #5
 80112b6:	693a      	ldr	r2, [r7, #16]
 80112b8:	8912      	ldrh	r2, [r2, #8]
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d301      	bcc.n	80112c2 <dir_sdi+0x72>
 80112be:	2302      	movs	r3, #2
 80112c0:	e056      	b.n	8011370 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	639a      	str	r2, [r3, #56]	; 0x38
 80112ca:	e02d      	b.n	8011328 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	895b      	ldrh	r3, [r3, #10]
 80112d0:	461a      	mov	r2, r3
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	899b      	ldrh	r3, [r3, #12]
 80112d6:	fb03 f302 	mul.w	r3, r3, r2
 80112da:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80112dc:	e019      	b.n	8011312 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6979      	ldr	r1, [r7, #20]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7ff f9e6 	bl	80106b4 <get_fat>
 80112e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112f0:	d101      	bne.n	80112f6 <dir_sdi+0xa6>
 80112f2:	2301      	movs	r3, #1
 80112f4:	e03c      	b.n	8011370 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d904      	bls.n	8011306 <dir_sdi+0xb6>
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	6a1b      	ldr	r3, [r3, #32]
 8011300:	697a      	ldr	r2, [r7, #20]
 8011302:	429a      	cmp	r2, r3
 8011304:	d301      	bcc.n	801130a <dir_sdi+0xba>
 8011306:	2302      	movs	r3, #2
 8011308:	e032      	b.n	8011370 <dir_sdi+0x120>
			ofs -= csz;
 801130a:	683a      	ldr	r2, [r7, #0]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011312:	683a      	ldr	r2, [r7, #0]
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	429a      	cmp	r2, r3
 8011318:	d2e1      	bcs.n	80112de <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 801131a:	6979      	ldr	r1, [r7, #20]
 801131c:	6938      	ldr	r0, [r7, #16]
 801131e:	f7ff f9a9 	bl	8010674 <clust2sect>
 8011322:	4602      	mov	r2, r0
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	697a      	ldr	r2, [r7, #20]
 801132c:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011332:	2b00      	cmp	r3, #0
 8011334:	d101      	bne.n	801133a <dir_sdi+0xea>
 8011336:	2302      	movs	r3, #2
 8011338:	e01a      	b.n	8011370 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	899b      	ldrh	r3, [r3, #12]
 8011342:	4619      	mov	r1, r3
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	fbb3 f3f1 	udiv	r3, r3, r1
 801134a:	441a      	add	r2, r3
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	899b      	ldrh	r3, [r3, #12]
 801135a:	461a      	mov	r2, r3
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011362:	fb02 f200 	mul.w	r2, r2, r0
 8011366:	1a9b      	subs	r3, r3, r2
 8011368:	18ca      	adds	r2, r1, r3
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 801136e:	2300      	movs	r3, #0
}
 8011370:	4618      	mov	r0, r3
 8011372:	3718      	adds	r7, #24
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b086      	sub	sp, #24
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801138c:	3320      	adds	r3, #32
 801138e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011394:	2b00      	cmp	r3, #0
 8011396:	d00b      	beq.n	80113b0 <dir_next+0x38>
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	2b04      	cmp	r3, #4
 801139e:	d102      	bne.n	80113a6 <dir_next+0x2e>
 80113a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113a4:	e001      	b.n	80113aa <dir_next+0x32>
 80113a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	429a      	cmp	r2, r3
 80113ae:	d801      	bhi.n	80113b4 <dir_next+0x3c>
 80113b0:	2304      	movs	r3, #4
 80113b2:	e0c3      	b.n	801153c <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	899b      	ldrh	r3, [r3, #12]
 80113b8:	461a      	mov	r2, r3
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80113c0:	fb02 f201 	mul.w	r2, r2, r1
 80113c4:	1a9b      	subs	r3, r3, r2
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f040 80a5 	bne.w	8011516 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d0:	1c5a      	adds	r2, r3, #1
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d10b      	bne.n	80113f6 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	095b      	lsrs	r3, r3, #5
 80113e2:	68fa      	ldr	r2, [r7, #12]
 80113e4:	8912      	ldrh	r2, [r2, #8]
 80113e6:	4293      	cmp	r3, r2
 80113e8:	f0c0 8095 	bcc.w	8011516 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2200      	movs	r2, #0
 80113f0:	639a      	str	r2, [r3, #56]	; 0x38
 80113f2:	2304      	movs	r3, #4
 80113f4:	e0a2      	b.n	801153c <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	899b      	ldrh	r3, [r3, #12]
 80113fa:	461a      	mov	r2, r3
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8011402:	68fa      	ldr	r2, [r7, #12]
 8011404:	8952      	ldrh	r2, [r2, #10]
 8011406:	3a01      	subs	r2, #1
 8011408:	4013      	ands	r3, r2
 801140a:	2b00      	cmp	r3, #0
 801140c:	f040 8083 	bne.w	8011516 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011416:	4619      	mov	r1, r3
 8011418:	4610      	mov	r0, r2
 801141a:	f7ff f94b 	bl	80106b4 <get_fat>
 801141e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	2b01      	cmp	r3, #1
 8011424:	d801      	bhi.n	801142a <dir_next+0xb2>
 8011426:	2302      	movs	r3, #2
 8011428:	e088      	b.n	801153c <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011430:	d101      	bne.n	8011436 <dir_next+0xbe>
 8011432:	2301      	movs	r3, #1
 8011434:	e082      	b.n	801153c <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	6a1b      	ldr	r3, [r3, #32]
 801143a:	697a      	ldr	r2, [r7, #20]
 801143c:	429a      	cmp	r2, r3
 801143e:	d360      	bcc.n	8011502 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d104      	bne.n	8011450 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2200      	movs	r2, #0
 801144a:	639a      	str	r2, [r3, #56]	; 0x38
 801144c:	2304      	movs	r3, #4
 801144e:	e075      	b.n	801153c <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011450:	687a      	ldr	r2, [r7, #4]
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011456:	4619      	mov	r1, r3
 8011458:	4610      	mov	r0, r2
 801145a:	f7ff fdb1 	bl	8010fc0 <create_chain>
 801145e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d101      	bne.n	801146a <dir_next+0xf2>
 8011466:	2307      	movs	r3, #7
 8011468:	e068      	b.n	801153c <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	2b01      	cmp	r3, #1
 801146e:	d101      	bne.n	8011474 <dir_next+0xfc>
 8011470:	2302      	movs	r3, #2
 8011472:	e063      	b.n	801153c <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	f1b3 3fff 	cmp.w	r3, #4294967295
 801147a:	d101      	bne.n	8011480 <dir_next+0x108>
 801147c:	2301      	movs	r3, #1
 801147e:	e05d      	b.n	801153c <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	79db      	ldrb	r3, [r3, #7]
 8011484:	f043 0304 	orr.w	r3, r3, #4
 8011488:	b2da      	uxtb	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801148e:	68f8      	ldr	r0, [r7, #12]
 8011490:	f7ff f80e 	bl	80104b0 <sync_window>
 8011494:	4603      	mov	r3, r0
 8011496:	2b00      	cmp	r3, #0
 8011498:	d001      	beq.n	801149e <dir_next+0x126>
 801149a:	2301      	movs	r3, #1
 801149c:	e04e      	b.n	801153c <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	899b      	ldrh	r3, [r3, #12]
 80114a8:	461a      	mov	r2, r3
 80114aa:	2100      	movs	r1, #0
 80114ac:	f7fe fe37 	bl	801011e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80114b0:	2300      	movs	r3, #0
 80114b2:	613b      	str	r3, [r7, #16]
 80114b4:	6979      	ldr	r1, [r7, #20]
 80114b6:	68f8      	ldr	r0, [r7, #12]
 80114b8:	f7ff f8dc 	bl	8010674 <clust2sect>
 80114bc:	4602      	mov	r2, r0
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	639a      	str	r2, [r3, #56]	; 0x38
 80114c2:	e012      	b.n	80114ea <dir_next+0x172>
						fs->wflag = 1;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2201      	movs	r2, #1
 80114c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80114ca:	68f8      	ldr	r0, [r7, #12]
 80114cc:	f7fe fff0 	bl	80104b0 <sync_window>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d001      	beq.n	80114da <dir_next+0x162>
 80114d6:	2301      	movs	r3, #1
 80114d8:	e030      	b.n	801153c <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	3301      	adds	r3, #1
 80114de:	613b      	str	r3, [r7, #16]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114e4:	1c5a      	adds	r2, r3, #1
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	639a      	str	r2, [r3, #56]	; 0x38
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	895b      	ldrh	r3, [r3, #10]
 80114ee:	461a      	mov	r2, r3
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d3e6      	bcc.n	80114c4 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	1ad2      	subs	r2, r2, r3
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	697a      	ldr	r2, [r7, #20]
 8011506:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8011508:	6979      	ldr	r1, [r7, #20]
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f7ff f8b2 	bl	8010674 <clust2sect>
 8011510:	4602      	mov	r2, r0
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	68ba      	ldr	r2, [r7, #8]
 801151a:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	899b      	ldrh	r3, [r3, #12]
 8011526:	461a      	mov	r2, r3
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	fbb3 f0f2 	udiv	r0, r3, r2
 801152e:	fb02 f200 	mul.w	r2, r2, r0
 8011532:	1a9b      	subs	r3, r3, r2
 8011534:	18ca      	adds	r2, r1, r3
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3718      	adds	r7, #24
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b086      	sub	sp, #24
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011554:	2100      	movs	r1, #0
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f7ff fe7a 	bl	8011250 <dir_sdi>
 801155c:	4603      	mov	r3, r0
 801155e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011560:	7dfb      	ldrb	r3, [r7, #23]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d140      	bne.n	80115e8 <dir_alloc+0xa4>
		n = 0;
 8011566:	2300      	movs	r3, #0
 8011568:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801156e:	4619      	mov	r1, r3
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f7fe ffe1 	bl	8010538 <move_window>
 8011576:	4603      	mov	r3, r0
 8011578:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801157a:	7dfb      	ldrb	r3, [r7, #23]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d132      	bne.n	80115e6 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	2b04      	cmp	r3, #4
 8011586:	d108      	bne.n	801159a <dir_alloc+0x56>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	b25b      	sxtb	r3, r3
 8011590:	43db      	mvns	r3, r3
 8011592:	b2db      	uxtb	r3, r3
 8011594:	09db      	lsrs	r3, r3, #7
 8011596:	b2db      	uxtb	r3, r3
 8011598:	e00f      	b.n	80115ba <dir_alloc+0x76>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	2be5      	cmp	r3, #229	; 0xe5
 80115a2:	d004      	beq.n	80115ae <dir_alloc+0x6a>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d101      	bne.n	80115b2 <dir_alloc+0x6e>
 80115ae:	2301      	movs	r3, #1
 80115b0:	e000      	b.n	80115b4 <dir_alloc+0x70>
 80115b2:	2300      	movs	r3, #0
 80115b4:	f003 0301 	and.w	r3, r3, #1
 80115b8:	b2db      	uxtb	r3, r3
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d007      	beq.n	80115ce <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	3301      	adds	r3, #1
 80115c2:	613b      	str	r3, [r7, #16]
 80115c4:	693a      	ldr	r2, [r7, #16]
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d102      	bne.n	80115d2 <dir_alloc+0x8e>
 80115cc:	e00c      	b.n	80115e8 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80115ce:	2300      	movs	r3, #0
 80115d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80115d2:	2101      	movs	r1, #1
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f7ff fecf 	bl	8011378 <dir_next>
 80115da:	4603      	mov	r3, r0
 80115dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80115de:	7dfb      	ldrb	r3, [r7, #23]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d0c2      	beq.n	801156a <dir_alloc+0x26>
 80115e4:	e000      	b.n	80115e8 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 80115e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80115e8:	7dfb      	ldrb	r3, [r7, #23]
 80115ea:	2b04      	cmp	r3, #4
 80115ec:	d101      	bne.n	80115f2 <dir_alloc+0xae>
 80115ee:	2307      	movs	r3, #7
 80115f0:	75fb      	strb	r3, [r7, #23]
	return res;
 80115f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3718      	adds	r7, #24
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b084      	sub	sp, #16
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	331a      	adds	r3, #26
 801160a:	4618      	mov	r0, r3
 801160c:	f7fe fba0 	bl	800fd50 <ld_word>
 8011610:	4603      	mov	r3, r0
 8011612:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	2b03      	cmp	r3, #3
 801161a:	d109      	bne.n	8011630 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	3314      	adds	r3, #20
 8011620:	4618      	mov	r0, r3
 8011622:	f7fe fb95 	bl	800fd50 <ld_word>
 8011626:	4603      	mov	r3, r0
 8011628:	041b      	lsls	r3, r3, #16
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	4313      	orrs	r3, r2
 801162e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011630:	68fb      	ldr	r3, [r7, #12]
}
 8011632:	4618      	mov	r0, r3
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}

0801163a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801163a:	b580      	push	{r7, lr}
 801163c:	b084      	sub	sp, #16
 801163e:	af00      	add	r7, sp, #0
 8011640:	60f8      	str	r0, [r7, #12]
 8011642:	60b9      	str	r1, [r7, #8]
 8011644:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	331a      	adds	r3, #26
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	b292      	uxth	r2, r2
 801164e:	4611      	mov	r1, r2
 8011650:	4618      	mov	r0, r3
 8011652:	f7fe fc75 	bl	800ff40 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	781b      	ldrb	r3, [r3, #0]
 801165a:	2b03      	cmp	r3, #3
 801165c:	d109      	bne.n	8011672 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	f103 0214 	add.w	r2, r3, #20
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	0c1b      	lsrs	r3, r3, #16
 8011668:	b29b      	uxth	r3, r3
 801166a:	4619      	mov	r1, r3
 801166c:	4610      	mov	r0, r2
 801166e:	f7fe fc67 	bl	800ff40 <st_word>
	}
}
 8011672:	bf00      	nop
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}
	...

0801167c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801167c:	b590      	push	{r4, r7, lr}
 801167e:	b087      	sub	sp, #28
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	331a      	adds	r3, #26
 801168a:	4618      	mov	r0, r3
 801168c:	f7fe fb60 	bl	800fd50 <ld_word>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d001      	beq.n	801169a <cmp_lfn+0x1e>
 8011696:	2300      	movs	r3, #0
 8011698:	e059      	b.n	801174e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80116a2:	1e5a      	subs	r2, r3, #1
 80116a4:	4613      	mov	r3, r2
 80116a6:	005b      	lsls	r3, r3, #1
 80116a8:	4413      	add	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	4413      	add	r3, r2
 80116ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80116b0:	2301      	movs	r3, #1
 80116b2:	81fb      	strh	r3, [r7, #14]
 80116b4:	2300      	movs	r3, #0
 80116b6:	613b      	str	r3, [r7, #16]
 80116b8:	e033      	b.n	8011722 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80116ba:	4a27      	ldr	r2, [pc, #156]	; (8011758 <cmp_lfn+0xdc>)
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	4413      	add	r3, r2
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	461a      	mov	r2, r3
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	4413      	add	r3, r2
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fe fb41 	bl	800fd50 <ld_word>
 80116ce:	4603      	mov	r3, r0
 80116d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80116d2:	89fb      	ldrh	r3, [r7, #14]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d01a      	beq.n	801170e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	2bfe      	cmp	r3, #254	; 0xfe
 80116dc:	d812      	bhi.n	8011704 <cmp_lfn+0x88>
 80116de:	89bb      	ldrh	r3, [r7, #12]
 80116e0:	4618      	mov	r0, r3
 80116e2:	f003 f95b 	bl	801499c <ff_wtoupper>
 80116e6:	4603      	mov	r3, r0
 80116e8:	461c      	mov	r4, r3
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	1c5a      	adds	r2, r3, #1
 80116ee:	617a      	str	r2, [r7, #20]
 80116f0:	005b      	lsls	r3, r3, #1
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	4413      	add	r3, r2
 80116f6:	881b      	ldrh	r3, [r3, #0]
 80116f8:	4618      	mov	r0, r3
 80116fa:	f003 f94f 	bl	801499c <ff_wtoupper>
 80116fe:	4603      	mov	r3, r0
 8011700:	429c      	cmp	r4, r3
 8011702:	d001      	beq.n	8011708 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011704:	2300      	movs	r3, #0
 8011706:	e022      	b.n	801174e <cmp_lfn+0xd2>
			}
			wc = uc;
 8011708:	89bb      	ldrh	r3, [r7, #12]
 801170a:	81fb      	strh	r3, [r7, #14]
 801170c:	e006      	b.n	801171c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801170e:	89bb      	ldrh	r3, [r7, #12]
 8011710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011714:	4293      	cmp	r3, r2
 8011716:	d001      	beq.n	801171c <cmp_lfn+0xa0>
 8011718:	2300      	movs	r3, #0
 801171a:	e018      	b.n	801174e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	3301      	adds	r3, #1
 8011720:	613b      	str	r3, [r7, #16]
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	2b0c      	cmp	r3, #12
 8011726:	d9c8      	bls.n	80116ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011730:	2b00      	cmp	r3, #0
 8011732:	d00b      	beq.n	801174c <cmp_lfn+0xd0>
 8011734:	89fb      	ldrh	r3, [r7, #14]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d008      	beq.n	801174c <cmp_lfn+0xd0>
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	005b      	lsls	r3, r3, #1
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	4413      	add	r3, r2
 8011742:	881b      	ldrh	r3, [r3, #0]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d001      	beq.n	801174c <cmp_lfn+0xd0>
 8011748:	2300      	movs	r3, #0
 801174a:	e000      	b.n	801174e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801174c:	2301      	movs	r3, #1
}
 801174e:	4618      	mov	r0, r3
 8011750:	371c      	adds	r7, #28
 8011752:	46bd      	mov	sp, r7
 8011754:	bd90      	pop	{r4, r7, pc}
 8011756:	bf00      	nop
 8011758:	08015888 	.word	0x08015888

0801175c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b086      	sub	sp, #24
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	331a      	adds	r3, #26
 801176a:	4618      	mov	r0, r3
 801176c:	f7fe faf0 	bl	800fd50 <ld_word>
 8011770:	4603      	mov	r3, r0
 8011772:	2b00      	cmp	r3, #0
 8011774:	d001      	beq.n	801177a <pick_lfn+0x1e>
 8011776:	2300      	movs	r3, #0
 8011778:	e04d      	b.n	8011816 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011782:	1e5a      	subs	r2, r3, #1
 8011784:	4613      	mov	r3, r2
 8011786:	005b      	lsls	r3, r3, #1
 8011788:	4413      	add	r3, r2
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	4413      	add	r3, r2
 801178e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011790:	2301      	movs	r3, #1
 8011792:	81fb      	strh	r3, [r7, #14]
 8011794:	2300      	movs	r3, #0
 8011796:	613b      	str	r3, [r7, #16]
 8011798:	e028      	b.n	80117ec <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801179a:	4a21      	ldr	r2, [pc, #132]	; (8011820 <pick_lfn+0xc4>)
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	4413      	add	r3, r2
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	461a      	mov	r2, r3
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	4413      	add	r3, r2
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7fe fad1 	bl	800fd50 <ld_word>
 80117ae:	4603      	mov	r3, r0
 80117b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80117b2:	89fb      	ldrh	r3, [r7, #14]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d00f      	beq.n	80117d8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	2bfe      	cmp	r3, #254	; 0xfe
 80117bc:	d901      	bls.n	80117c2 <pick_lfn+0x66>
 80117be:	2300      	movs	r3, #0
 80117c0:	e029      	b.n	8011816 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80117c2:	89bb      	ldrh	r3, [r7, #12]
 80117c4:	81fb      	strh	r3, [r7, #14]
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	1c5a      	adds	r2, r3, #1
 80117ca:	617a      	str	r2, [r7, #20]
 80117cc:	005b      	lsls	r3, r3, #1
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	4413      	add	r3, r2
 80117d2:	89fa      	ldrh	r2, [r7, #14]
 80117d4:	801a      	strh	r2, [r3, #0]
 80117d6:	e006      	b.n	80117e6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80117d8:	89bb      	ldrh	r3, [r7, #12]
 80117da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117de:	4293      	cmp	r3, r2
 80117e0:	d001      	beq.n	80117e6 <pick_lfn+0x8a>
 80117e2:	2300      	movs	r3, #0
 80117e4:	e017      	b.n	8011816 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	3301      	adds	r3, #1
 80117ea:	613b      	str	r3, [r7, #16]
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	2b0c      	cmp	r3, #12
 80117f0:	d9d3      	bls.n	801179a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d00a      	beq.n	8011814 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	2bfe      	cmp	r3, #254	; 0xfe
 8011802:	d901      	bls.n	8011808 <pick_lfn+0xac>
 8011804:	2300      	movs	r3, #0
 8011806:	e006      	b.n	8011816 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	005b      	lsls	r3, r3, #1
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	4413      	add	r3, r2
 8011810:	2200      	movs	r2, #0
 8011812:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011814:	2301      	movs	r3, #1
}
 8011816:	4618      	mov	r0, r3
 8011818:	3718      	adds	r7, #24
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	08015888 	.word	0x08015888

08011824 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b088      	sub	sp, #32
 8011828:	af00      	add	r7, sp, #0
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	60b9      	str	r1, [r7, #8]
 801182e:	4611      	mov	r1, r2
 8011830:	461a      	mov	r2, r3
 8011832:	460b      	mov	r3, r1
 8011834:	71fb      	strb	r3, [r7, #7]
 8011836:	4613      	mov	r3, r2
 8011838:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	330d      	adds	r3, #13
 801183e:	79ba      	ldrb	r2, [r7, #6]
 8011840:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	330b      	adds	r3, #11
 8011846:	220f      	movs	r2, #15
 8011848:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	330c      	adds	r3, #12
 801184e:	2200      	movs	r2, #0
 8011850:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	331a      	adds	r3, #26
 8011856:	2100      	movs	r1, #0
 8011858:	4618      	mov	r0, r3
 801185a:	f7fe fb71 	bl	800ff40 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801185e:	79fb      	ldrb	r3, [r7, #7]
 8011860:	1e5a      	subs	r2, r3, #1
 8011862:	4613      	mov	r3, r2
 8011864:	005b      	lsls	r3, r3, #1
 8011866:	4413      	add	r3, r2
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	4413      	add	r3, r2
 801186c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801186e:	2300      	movs	r3, #0
 8011870:	82fb      	strh	r3, [r7, #22]
 8011872:	2300      	movs	r3, #0
 8011874:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011876:	8afb      	ldrh	r3, [r7, #22]
 8011878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801187c:	4293      	cmp	r3, r2
 801187e:	d007      	beq.n	8011890 <put_lfn+0x6c>
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	1c5a      	adds	r2, r3, #1
 8011884:	61fa      	str	r2, [r7, #28]
 8011886:	005b      	lsls	r3, r3, #1
 8011888:	68fa      	ldr	r2, [r7, #12]
 801188a:	4413      	add	r3, r2
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011890:	4a17      	ldr	r2, [pc, #92]	; (80118f0 <put_lfn+0xcc>)
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	4413      	add	r3, r2
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	461a      	mov	r2, r3
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	4413      	add	r3, r2
 801189e:	8afa      	ldrh	r2, [r7, #22]
 80118a0:	4611      	mov	r1, r2
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fe fb4c 	bl	800ff40 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80118a8:	8afb      	ldrh	r3, [r7, #22]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d102      	bne.n	80118b4 <put_lfn+0x90>
 80118ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80118b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80118b4:	69bb      	ldr	r3, [r7, #24]
 80118b6:	3301      	adds	r3, #1
 80118b8:	61bb      	str	r3, [r7, #24]
 80118ba:	69bb      	ldr	r3, [r7, #24]
 80118bc:	2b0c      	cmp	r3, #12
 80118be:	d9da      	bls.n	8011876 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80118c0:	8afb      	ldrh	r3, [r7, #22]
 80118c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d006      	beq.n	80118d8 <put_lfn+0xb4>
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	005b      	lsls	r3, r3, #1
 80118ce:	68fa      	ldr	r2, [r7, #12]
 80118d0:	4413      	add	r3, r2
 80118d2:	881b      	ldrh	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d103      	bne.n	80118e0 <put_lfn+0xbc>
 80118d8:	79fb      	ldrb	r3, [r7, #7]
 80118da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	79fa      	ldrb	r2, [r7, #7]
 80118e4:	701a      	strb	r2, [r3, #0]
}
 80118e6:	bf00      	nop
 80118e8:	3720      	adds	r7, #32
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	08015888 	.word	0x08015888

080118f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b08c      	sub	sp, #48	; 0x30
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	607a      	str	r2, [r7, #4]
 8011900:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011902:	220b      	movs	r2, #11
 8011904:	68b9      	ldr	r1, [r7, #8]
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f7fe fbe8 	bl	80100dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	2b05      	cmp	r3, #5
 8011910:	d929      	bls.n	8011966 <gen_numname+0x72>
		sr = seq;
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011916:	e020      	b.n	801195a <gen_numname+0x66>
			wc = *lfn++;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	1c9a      	adds	r2, r3, #2
 801191c:	607a      	str	r2, [r7, #4]
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011922:	2300      	movs	r3, #0
 8011924:	62bb      	str	r3, [r7, #40]	; 0x28
 8011926:	e015      	b.n	8011954 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011928:	69fb      	ldr	r3, [r7, #28]
 801192a:	005a      	lsls	r2, r3, #1
 801192c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801192e:	f003 0301 	and.w	r3, r3, #1
 8011932:	4413      	add	r3, r2
 8011934:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011938:	085b      	lsrs	r3, r3, #1
 801193a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011942:	2b00      	cmp	r3, #0
 8011944:	d003      	beq.n	801194e <gen_numname+0x5a>
 8011946:	69fa      	ldr	r2, [r7, #28]
 8011948:	4b31      	ldr	r3, [pc, #196]	; (8011a10 <gen_numname+0x11c>)
 801194a:	4053      	eors	r3, r2
 801194c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011950:	3301      	adds	r3, #1
 8011952:	62bb      	str	r3, [r7, #40]	; 0x28
 8011954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011956:	2b0f      	cmp	r3, #15
 8011958:	d9e6      	bls.n	8011928 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	881b      	ldrh	r3, [r3, #0]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d1da      	bne.n	8011918 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011966:	2307      	movs	r3, #7
 8011968:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	b2db      	uxtb	r3, r3
 801196e:	f003 030f 	and.w	r3, r3, #15
 8011972:	b2db      	uxtb	r3, r3
 8011974:	3330      	adds	r3, #48	; 0x30
 8011976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801197a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801197e:	2b39      	cmp	r3, #57	; 0x39
 8011980:	d904      	bls.n	801198c <gen_numname+0x98>
 8011982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011986:	3307      	adds	r3, #7
 8011988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198e:	1e5a      	subs	r2, r3, #1
 8011990:	62ba      	str	r2, [r7, #40]	; 0x28
 8011992:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011996:	4413      	add	r3, r2
 8011998:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801199c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	091b      	lsrs	r3, r3, #4
 80119a4:	603b      	str	r3, [r7, #0]
	} while (seq);
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d1de      	bne.n	801196a <gen_numname+0x76>
	ns[i] = '~';
 80119ac:	f107 0214 	add.w	r2, r7, #20
 80119b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b2:	4413      	add	r3, r2
 80119b4:	227e      	movs	r2, #126	; 0x7e
 80119b6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80119b8:	2300      	movs	r3, #0
 80119ba:	627b      	str	r3, [r7, #36]	; 0x24
 80119bc:	e002      	b.n	80119c4 <gen_numname+0xd0>
 80119be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c0:	3301      	adds	r3, #1
 80119c2:	627b      	str	r3, [r7, #36]	; 0x24
 80119c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d205      	bcs.n	80119d8 <gen_numname+0xe4>
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d0:	4413      	add	r3, r2
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	2b20      	cmp	r3, #32
 80119d6:	d1f2      	bne.n	80119be <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80119d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119da:	2b07      	cmp	r3, #7
 80119dc:	d808      	bhi.n	80119f0 <gen_numname+0xfc>
 80119de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e0:	1c5a      	adds	r2, r3, #1
 80119e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80119e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80119e8:	4413      	add	r3, r2
 80119ea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80119ee:	e000      	b.n	80119f2 <gen_numname+0xfe>
 80119f0:	2120      	movs	r1, #32
 80119f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f4:	1c5a      	adds	r2, r3, #1
 80119f6:	627a      	str	r2, [r7, #36]	; 0x24
 80119f8:	68fa      	ldr	r2, [r7, #12]
 80119fa:	4413      	add	r3, r2
 80119fc:	460a      	mov	r2, r1
 80119fe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a02:	2b07      	cmp	r3, #7
 8011a04:	d9e8      	bls.n	80119d8 <gen_numname+0xe4>
}
 8011a06:	bf00      	nop
 8011a08:	3730      	adds	r7, #48	; 0x30
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	00011021 	.word	0x00011021

08011a14 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b085      	sub	sp, #20
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011a20:	230b      	movs	r3, #11
 8011a22:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011a24:	7bfb      	ldrb	r3, [r7, #15]
 8011a26:	b2da      	uxtb	r2, r3
 8011a28:	0852      	lsrs	r2, r2, #1
 8011a2a:	01db      	lsls	r3, r3, #7
 8011a2c:	4313      	orrs	r3, r2
 8011a2e:	b2da      	uxtb	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	1c59      	adds	r1, r3, #1
 8011a34:	6079      	str	r1, [r7, #4]
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	4413      	add	r3, r2
 8011a3a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	3b01      	subs	r3, #1
 8011a40:	60bb      	str	r3, [r7, #8]
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d1ed      	bne.n	8011a24 <sum_sfn+0x10>
	return sum;
 8011a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3714      	adds	r7, #20
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr

08011a56 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8011a56:	b480      	push	{r7}
 8011a58:	b087      	sub	sp, #28
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	3301      	adds	r3, #1
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	3301      	adds	r3, #1
 8011a66:	015b      	lsls	r3, r3, #5
 8011a68:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	827b      	strh	r3, [r7, #18]
 8011a6e:	2300      	movs	r3, #0
 8011a70:	617b      	str	r3, [r7, #20]
 8011a72:	e018      	b.n	8011aa6 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	2b02      	cmp	r3, #2
 8011a78:	d103      	bne.n	8011a82 <xdir_sum+0x2c>
			i++;
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	617b      	str	r3, [r7, #20]
 8011a80:	e00e      	b.n	8011aa0 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8011a82:	8a7b      	ldrh	r3, [r7, #18]
 8011a84:	03db      	lsls	r3, r3, #15
 8011a86:	b29a      	uxth	r2, r3
 8011a88:	8a7b      	ldrh	r3, [r7, #18]
 8011a8a:	085b      	lsrs	r3, r3, #1
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	4413      	add	r3, r2
 8011a90:	b29a      	uxth	r2, r3
 8011a92:	6879      	ldr	r1, [r7, #4]
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	440b      	add	r3, r1
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	b29b      	uxth	r3, r3
 8011a9c:	4413      	add	r3, r2
 8011a9e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	617b      	str	r3, [r7, #20]
 8011aa6:	697a      	ldr	r2, [r7, #20]
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d3e2      	bcc.n	8011a74 <xdir_sum+0x1e>
		}
	}
	return sum;
 8011aae:	8a7b      	ldrh	r3, [r7, #18]
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	371c      	adds	r7, #28
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aba:	4770      	bx	lr

08011abc <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8011ac8:	e01f      	b.n	8011b0a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8011aca:	89bb      	ldrh	r3, [r7, #12]
 8011acc:	4618      	mov	r0, r3
 8011ace:	f002 ff65 	bl	801499c <ff_wtoupper>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8011ad6:	89fb      	ldrh	r3, [r7, #14]
 8011ad8:	03db      	lsls	r3, r3, #15
 8011ada:	b29a      	uxth	r2, r3
 8011adc:	89fb      	ldrh	r3, [r7, #14]
 8011ade:	085b      	lsrs	r3, r3, #1
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	4413      	add	r3, r2
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	89bb      	ldrh	r3, [r7, #12]
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	4413      	add	r3, r2
 8011aee:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8011af0:	89fb      	ldrh	r3, [r7, #14]
 8011af2:	03db      	lsls	r3, r3, #15
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	89fb      	ldrh	r3, [r7, #14]
 8011af8:	085b      	lsrs	r3, r3, #1
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	4413      	add	r3, r2
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	89bb      	ldrh	r3, [r7, #12]
 8011b02:	0a1b      	lsrs	r3, r3, #8
 8011b04:	b29b      	uxth	r3, r3
 8011b06:	4413      	add	r3, r2
 8011b08:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	1c9a      	adds	r2, r3, #2
 8011b0e:	607a      	str	r2, [r7, #4]
 8011b10:	881b      	ldrh	r3, [r3, #0]
 8011b12:	81bb      	strh	r3, [r7, #12]
 8011b14:	89bb      	ldrh	r3, [r7, #12]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d1d7      	bne.n	8011aca <xname_sum+0xe>
	}
	return sum;
 8011b1a:	89fb      	ldrh	r3, [r7, #14]
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3710      	adds	r7, #16
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8011b24:	b590      	push	{r4, r7, lr}
 8011b26:	b087      	sub	sp, #28
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	695b      	ldr	r3, [r3, #20]
 8011b32:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681a      	ldr	r2, [r3, #0]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	4610      	mov	r0, r2
 8011b40:	f7fe fcfa 	bl	8010538 <move_window>
 8011b44:	4603      	mov	r3, r0
 8011b46:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d001      	beq.n	8011b52 <load_xdir+0x2e>
 8011b4e:	7bfb      	ldrb	r3, [r7, #15]
 8011b50:	e09f      	b.n	8011c92 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b56:	781b      	ldrb	r3, [r3, #0]
 8011b58:	2b85      	cmp	r3, #133	; 0x85
 8011b5a:	d001      	beq.n	8011b60 <load_xdir+0x3c>
 8011b5c:	2302      	movs	r3, #2
 8011b5e:	e098      	b.n	8011c92 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b64:	2220      	movs	r2, #32
 8011b66:	4619      	mov	r1, r3
 8011b68:	6938      	ldr	r0, [r7, #16]
 8011b6a:	f7fe fab7 	bl	80100dc <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	3301      	adds	r3, #1
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	3301      	adds	r3, #1
 8011b76:	015b      	lsls	r3, r3, #5
 8011b78:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	2b5f      	cmp	r3, #95	; 0x5f
 8011b7e:	d903      	bls.n	8011b88 <load_xdir+0x64>
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011b86:	d901      	bls.n	8011b8c <load_xdir+0x68>
 8011b88:	2302      	movs	r3, #2
 8011b8a:	e082      	b.n	8011c92 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f7ff fbf2 	bl	8011378 <dir_next>
 8011b94:	4603      	mov	r3, r0
 8011b96:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011b98:	7bfb      	ldrb	r3, [r7, #15]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d001      	beq.n	8011ba2 <load_xdir+0x7e>
 8011b9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ba0:	e077      	b.n	8011c92 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681a      	ldr	r2, [r3, #0]
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011baa:	4619      	mov	r1, r3
 8011bac:	4610      	mov	r0, r2
 8011bae:	f7fe fcc3 	bl	8010538 <move_window>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011bb6:	7bfb      	ldrb	r3, [r7, #15]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d001      	beq.n	8011bc0 <load_xdir+0x9c>
 8011bbc:	7bfb      	ldrb	r3, [r7, #15]
 8011bbe:	e068      	b.n	8011c92 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8011bc8:	d001      	beq.n	8011bce <load_xdir+0xaa>
 8011bca:	2302      	movs	r3, #2
 8011bcc:	e061      	b.n	8011c92 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	f103 0020 	add.w	r0, r3, #32
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bd8:	2220      	movs	r2, #32
 8011bda:	4619      	mov	r1, r3
 8011bdc:	f7fe fa7e 	bl	80100dc <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	3323      	adds	r3, #35	; 0x23
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	332c      	adds	r3, #44	; 0x2c
 8011be8:	4a2c      	ldr	r2, [pc, #176]	; (8011c9c <load_xdir+0x178>)
 8011bea:	fba2 2303 	umull	r2, r3, r2, r3
 8011bee:	08db      	lsrs	r3, r3, #3
 8011bf0:	015b      	lsls	r3, r3, #5
 8011bf2:	68ba      	ldr	r2, [r7, #8]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d201      	bcs.n	8011bfc <load_xdir+0xd8>
 8011bf8:	2302      	movs	r3, #2
 8011bfa:	e04a      	b.n	8011c92 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8011bfc:	2340      	movs	r3, #64	; 0x40
 8011bfe:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8011c00:	2100      	movs	r1, #0
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f7ff fbb8 	bl	8011378 <dir_next>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011c0c:	7bfb      	ldrb	r3, [r7, #15]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d001      	beq.n	8011c16 <load_xdir+0xf2>
 8011c12:	7bfb      	ldrb	r3, [r7, #15]
 8011c14:	e03d      	b.n	8011c92 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681a      	ldr	r2, [r3, #0]
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c1e:	4619      	mov	r1, r3
 8011c20:	4610      	mov	r0, r2
 8011c22:	f7fe fc89 	bl	8010538 <move_window>
 8011c26:	4603      	mov	r3, r0
 8011c28:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011c2a:	7bfb      	ldrb	r3, [r7, #15]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d001      	beq.n	8011c34 <load_xdir+0x110>
 8011c30:	7bfb      	ldrb	r3, [r7, #15]
 8011c32:	e02e      	b.n	8011c92 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	2bc1      	cmp	r3, #193	; 0xc1
 8011c3c:	d001      	beq.n	8011c42 <load_xdir+0x11e>
 8011c3e:	2302      	movs	r3, #2
 8011c40:	e027      	b.n	8011c92 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011c48:	d208      	bcs.n	8011c5c <load_xdir+0x138>
 8011c4a:	693a      	ldr	r2, [r7, #16]
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	18d0      	adds	r0, r2, r3
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c54:	2220      	movs	r2, #32
 8011c56:	4619      	mov	r1, r3
 8011c58:	f7fe fa40 	bl	80100dc <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	3320      	adds	r3, #32
 8011c60:	617b      	str	r3, [r7, #20]
 8011c62:	697a      	ldr	r2, [r7, #20]
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d3ca      	bcc.n	8011c00 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011c70:	d80e      	bhi.n	8011c90 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8011c72:	6938      	ldr	r0, [r7, #16]
 8011c74:	f7ff feef 	bl	8011a56 <xdir_sum>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	461c      	mov	r4, r3
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	3302      	adds	r3, #2
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7fe f865 	bl	800fd50 <ld_word>
 8011c86:	4603      	mov	r3, r0
 8011c88:	429c      	cmp	r4, r3
 8011c8a:	d001      	beq.n	8011c90 <load_xdir+0x16c>
 8011c8c:	2302      	movs	r3, #2
 8011c8e:	e000      	b.n	8011c92 <load_xdir+0x16e>
	}
	return FR_OK;
 8011c90:	2300      	movs	r3, #0
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	371c      	adds	r7, #28
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd90      	pop	{r4, r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	88888889 	.word	0x88888889

08011ca0 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8011ca0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011ca4:	b084      	sub	sp, #16
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
 8011caa:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	681a      	ldr	r2, [r3, #0]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	6a1a      	ldr	r2, [r3, #32]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc0:	b2da      	uxtb	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cca:	469b      	mov	fp, r3
 8011ccc:	f04f 0c00 	mov.w	ip, #0
 8011cd0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8011cd4:	f04f 0200 	mov.w	r2, #0
 8011cd8:	ea0b 0301 	and.w	r3, fp, r1
 8011cdc:	ea0c 0402 	and.w	r4, ip, r2
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ff faab 	bl	8011250 <dir_sdi>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011cfe:	7bfb      	ldrb	r3, [r7, #15]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d104      	bne.n	8011d0e <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	f7ff ff0d 	bl	8011b24 <load_xdir>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8011d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3710      	adds	r7, #16
 8011d14:	46bd      	mov	sp, r7
 8011d16:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08011d1a <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8011d1a:	b590      	push	{r4, r7, lr}
 8011d1c:	b087      	sub	sp, #28
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	695b      	ldr	r3, [r3, #20]
 8011d28:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	1c9c      	adds	r4, r3, #2
 8011d2e:	68f8      	ldr	r0, [r7, #12]
 8011d30:	f7ff fe91 	bl	8011a56 <xdir_sum>
 8011d34:	4603      	mov	r3, r0
 8011d36:	4619      	mov	r1, r3
 8011d38:	4620      	mov	r0, r4
 8011d3a:	f7fe f901 	bl	800ff40 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	3301      	adds	r3, #1
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	3301      	adds	r3, #1
 8011d46:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f7ff fa7e 	bl	8011250 <dir_sdi>
 8011d54:	4603      	mov	r3, r0
 8011d56:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011d58:	e026      	b.n	8011da8 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681a      	ldr	r2, [r3, #0]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d62:	4619      	mov	r1, r3
 8011d64:	4610      	mov	r0, r2
 8011d66:	f7fe fbe7 	bl	8010538 <move_window>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011d6e:	7dfb      	ldrb	r3, [r7, #23]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d11d      	bne.n	8011db0 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d78:	2220      	movs	r2, #32
 8011d7a:	68f9      	ldr	r1, [r7, #12]
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fe f9ad 	bl	80100dc <mem_cpy>
		dp->obj.fs->wflag = 1;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	2201      	movs	r2, #1
 8011d88:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	3b01      	subs	r3, #1
 8011d8e:	613b      	str	r3, [r7, #16]
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d00e      	beq.n	8011db4 <store_xdir+0x9a>
		dirb += SZDIRE;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	3320      	adds	r3, #32
 8011d9a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f7ff faea 	bl	8011378 <dir_next>
 8011da4:	4603      	mov	r3, r0
 8011da6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011da8:	7dfb      	ldrb	r3, [r7, #23]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d0d5      	beq.n	8011d5a <store_xdir+0x40>
 8011dae:	e002      	b.n	8011db6 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8011db0:	bf00      	nop
 8011db2:	e000      	b.n	8011db6 <store_xdir+0x9c>
		if (--nent == 0) break;
 8011db4:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8011db6:	7dfb      	ldrb	r3, [r7, #23]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d002      	beq.n	8011dc2 <store_xdir+0xa8>
 8011dbc:	7dfb      	ldrb	r3, [r7, #23]
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d101      	bne.n	8011dc6 <store_xdir+0xac>
 8011dc2:	7dfb      	ldrb	r3, [r7, #23]
 8011dc4:	e000      	b.n	8011dc8 <store_xdir+0xae>
 8011dc6:	2302      	movs	r3, #2
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	371c      	adds	r7, #28
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd90      	pop	{r4, r7, pc}

08011dd0 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8011dd0:	b590      	push	{r4, r7, lr}
 8011dd2:	b085      	sub	sp, #20
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8011dda:	2240      	movs	r2, #64	; 0x40
 8011ddc:	2100      	movs	r1, #0
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f7fe f99d 	bl	801011e <mem_set>
	dirb[XDIR_Type] = 0x85;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2285      	movs	r2, #133	; 0x85
 8011de8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	3320      	adds	r3, #32
 8011dee:	22c0      	movs	r2, #192	; 0xc0
 8011df0:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8011df2:	2300      	movs	r3, #0
 8011df4:	72bb      	strb	r3, [r7, #10]
 8011df6:	2301      	movs	r3, #1
 8011df8:	72fb      	strb	r3, [r7, #11]
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	813b      	strh	r3, [r7, #8]
 8011dfe:	2340      	movs	r3, #64	; 0x40
 8011e00:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	1c5a      	adds	r2, r3, #1
 8011e06:	60fa      	str	r2, [r7, #12]
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	22c1      	movs	r2, #193	; 0xc1
 8011e0e:	701a      	strb	r2, [r3, #0]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	1c5a      	adds	r2, r3, #1
 8011e14:	60fa      	str	r2, [r7, #12]
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	4413      	add	r3, r2
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8011e1e:	893b      	ldrh	r3, [r7, #8]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d00b      	beq.n	8011e3c <create_xdir+0x6c>
 8011e24:	7abb      	ldrb	r3, [r7, #10]
 8011e26:	005b      	lsls	r3, r3, #1
 8011e28:	683a      	ldr	r2, [r7, #0]
 8011e2a:	4413      	add	r3, r2
 8011e2c:	881b      	ldrh	r3, [r3, #0]
 8011e2e:	813b      	strh	r3, [r7, #8]
 8011e30:	893b      	ldrh	r3, [r7, #8]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d002      	beq.n	8011e3c <create_xdir+0x6c>
 8011e36:	7abb      	ldrb	r3, [r7, #10]
 8011e38:	3301      	adds	r3, #1
 8011e3a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	4413      	add	r3, r2
 8011e42:	893a      	ldrh	r2, [r7, #8]
 8011e44:	4611      	mov	r1, r2
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fe f87a 	bl	800ff40 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	3302      	adds	r3, #2
 8011e50:	60fb      	str	r3, [r7, #12]
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	f003 031f 	and.w	r3, r3, #31
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d1e0      	bne.n	8011e1e <create_xdir+0x4e>
		nb++;
 8011e5c:	7afb      	ldrb	r3, [r7, #11]
 8011e5e:	3301      	adds	r3, #1
 8011e60:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8011e62:	7abb      	ldrb	r3, [r7, #10]
 8011e64:	005b      	lsls	r3, r3, #1
 8011e66:	683a      	ldr	r2, [r7, #0]
 8011e68:	4413      	add	r3, r2
 8011e6a:	881b      	ldrh	r3, [r3, #0]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d1c8      	bne.n	8011e02 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	3323      	adds	r3, #35	; 0x23
 8011e74:	7aba      	ldrb	r2, [r7, #10]
 8011e76:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	3301      	adds	r3, #1
 8011e7c:	7afa      	ldrb	r2, [r7, #11]
 8011e7e:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8011e86:	6838      	ldr	r0, [r7, #0]
 8011e88:	f7ff fe18 	bl	8011abc <xname_sum>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	4619      	mov	r1, r3
 8011e90:	4620      	mov	r0, r4
 8011e92:	f7fe f855 	bl	800ff40 <st_word>
}
 8011e96:	bf00      	nop
 8011e98:	3714      	adds	r7, #20
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd90      	pop	{r4, r7, pc}

08011e9e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b086      	sub	sp, #24
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
 8011ea6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011ea8:	2304      	movs	r3, #4
 8011eaa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011eb2:	23ff      	movs	r3, #255	; 0xff
 8011eb4:	757b      	strb	r3, [r7, #21]
 8011eb6:	23ff      	movs	r3, #255	; 0xff
 8011eb8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8011eba:	e09f      	b.n	8011ffc <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	6938      	ldr	r0, [r7, #16]
 8011ec4:	f7fe fb38 	bl	8010538 <move_window>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011ecc:	7dfb      	ldrb	r3, [r7, #23]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	f040 809a 	bne.w	8012008 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011edc:	7dbb      	ldrb	r3, [r7, #22]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d102      	bne.n	8011ee8 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011ee2:	2304      	movs	r3, #4
 8011ee4:	75fb      	strb	r3, [r7, #23]
 8011ee6:	e096      	b.n	8012016 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	2b04      	cmp	r3, #4
 8011eee:	d118      	bne.n	8011f22 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8011ef0:	7dbb      	ldrb	r3, [r7, #22]
 8011ef2:	2b85      	cmp	r3, #133	; 0x85
 8011ef4:	d179      	bne.n	8011fea <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f7ff fe10 	bl	8011b24 <load_xdir>
 8011f04:	4603      	mov	r3, r0
 8011f06:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8011f08:	7dfb      	ldrb	r3, [r7, #23]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d17e      	bne.n	801200c <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	695b      	ldr	r3, [r3, #20]
 8011f12:	3304      	adds	r3, #4
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f1a:	b2da      	uxtb	r2, r3
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	719a      	strb	r2, [r3, #6]
					}
					break;
 8011f20:	e074      	b.n	801200c <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f26:	330b      	adds	r3, #11
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f2e:	73fb      	strb	r3, [r7, #15]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	7bfa      	ldrb	r2, [r7, #15]
 8011f34:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011f36:	7dbb      	ldrb	r3, [r7, #22]
 8011f38:	2be5      	cmp	r3, #229	; 0xe5
 8011f3a:	d00e      	beq.n	8011f5a <dir_read+0xbc>
 8011f3c:	7dbb      	ldrb	r3, [r7, #22]
 8011f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8011f40:	d00b      	beq.n	8011f5a <dir_read+0xbc>
 8011f42:	7bfb      	ldrb	r3, [r7, #15]
 8011f44:	f023 0320 	bic.w	r3, r3, #32
 8011f48:	2b08      	cmp	r3, #8
 8011f4a:	bf0c      	ite	eq
 8011f4c:	2301      	moveq	r3, #1
 8011f4e:	2300      	movne	r3, #0
 8011f50:	b2db      	uxtb	r3, r3
 8011f52:	461a      	mov	r2, r3
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	4293      	cmp	r3, r2
 8011f58:	d002      	beq.n	8011f60 <dir_read+0xc2>
				ord = 0xFF;
 8011f5a:	23ff      	movs	r3, #255	; 0xff
 8011f5c:	757b      	strb	r3, [r7, #21]
 8011f5e:	e044      	b.n	8011fea <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011f60:	7bfb      	ldrb	r3, [r7, #15]
 8011f62:	2b0f      	cmp	r3, #15
 8011f64:	d12f      	bne.n	8011fc6 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011f66:	7dbb      	ldrb	r3, [r7, #22]
 8011f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d00d      	beq.n	8011f8c <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f74:	7b5b      	ldrb	r3, [r3, #13]
 8011f76:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011f78:	7dbb      	ldrb	r3, [r7, #22]
 8011f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f7e:	75bb      	strb	r3, [r7, #22]
 8011f80:	7dbb      	ldrb	r3, [r7, #22]
 8011f82:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011f8c:	7dba      	ldrb	r2, [r7, #22]
 8011f8e:	7d7b      	ldrb	r3, [r7, #21]
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d115      	bne.n	8011fc0 <dir_read+0x122>
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f98:	330d      	adds	r3, #13
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	7d3a      	ldrb	r2, [r7, #20]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d10e      	bne.n	8011fc0 <dir_read+0x122>
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	691a      	ldr	r2, [r3, #16]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011faa:	4619      	mov	r1, r3
 8011fac:	4610      	mov	r0, r2
 8011fae:	f7ff fbd5 	bl	801175c <pick_lfn>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d003      	beq.n	8011fc0 <dir_read+0x122>
 8011fb8:	7d7b      	ldrb	r3, [r7, #21]
 8011fba:	3b01      	subs	r3, #1
 8011fbc:	b2db      	uxtb	r3, r3
 8011fbe:	e000      	b.n	8011fc2 <dir_read+0x124>
 8011fc0:	23ff      	movs	r3, #255	; 0xff
 8011fc2:	757b      	strb	r3, [r7, #21]
 8011fc4:	e011      	b.n	8011fea <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011fc6:	7d7b      	ldrb	r3, [r7, #21]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d109      	bne.n	8011fe0 <dir_read+0x142>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7ff fd1f 	bl	8011a14 <sum_sfn>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	461a      	mov	r2, r3
 8011fda:	7d3b      	ldrb	r3, [r7, #20]
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d017      	beq.n	8012010 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8011fe6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8011fe8:	e012      	b.n	8012010 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011fea:	2100      	movs	r1, #0
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f7ff f9c3 	bl	8011378 <dir_next>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011ff6:	7dfb      	ldrb	r3, [r7, #23]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d10b      	bne.n	8012014 <dir_read+0x176>
	while (dp->sect) {
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012000:	2b00      	cmp	r3, #0
 8012002:	f47f af5b 	bne.w	8011ebc <dir_read+0x1e>
 8012006:	e006      	b.n	8012016 <dir_read+0x178>
		if (res != FR_OK) break;
 8012008:	bf00      	nop
 801200a:	e004      	b.n	8012016 <dir_read+0x178>
					break;
 801200c:	bf00      	nop
 801200e:	e002      	b.n	8012016 <dir_read+0x178>
					break;
 8012010:	bf00      	nop
 8012012:	e000      	b.n	8012016 <dir_read+0x178>
		if (res != FR_OK) break;
 8012014:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012016:	7dfb      	ldrb	r3, [r7, #23]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d002      	beq.n	8012022 <dir_read+0x184>
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2200      	movs	r2, #0
 8012020:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8012022:	7dfb      	ldrb	r3, [r7, #23]
}
 8012024:	4618      	mov	r0, r3
 8012026:	3718      	adds	r7, #24
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801202c:	b590      	push	{r4, r7, lr}
 801202e:	b089      	sub	sp, #36	; 0x24
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801203a:	2100      	movs	r1, #0
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f7ff f907 	bl	8011250 <dir_sdi>
 8012042:	4603      	mov	r3, r0
 8012044:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8012046:	7ffb      	ldrb	r3, [r7, #31]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d001      	beq.n	8012050 <dir_find+0x24>
 801204c:	7ffb      	ldrb	r3, [r7, #31]
 801204e:	e112      	b.n	8012276 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	2b04      	cmp	r3, #4
 8012056:	d164      	bne.n	8012122 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	691b      	ldr	r3, [r3, #16]
 801205c:	4618      	mov	r0, r3
 801205e:	f7ff fd2d 	bl	8011abc <xname_sum>
 8012062:	4603      	mov	r3, r0
 8012064:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8012066:	e04f      	b.n	8012108 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	695b      	ldr	r3, [r3, #20]
 801206c:	3324      	adds	r3, #36	; 0x24
 801206e:	4618      	mov	r0, r3
 8012070:	f7fd fe6e 	bl	800fd50 <ld_word>
 8012074:	4603      	mov	r3, r0
 8012076:	461a      	mov	r2, r3
 8012078:	893b      	ldrh	r3, [r7, #8]
 801207a:	4293      	cmp	r3, r2
 801207c:	d000      	beq.n	8012080 <dir_find+0x54>
 801207e:	e043      	b.n	8012108 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	695b      	ldr	r3, [r3, #20]
 8012084:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012088:	76fb      	strb	r3, [r7, #27]
 801208a:	2340      	movs	r3, #64	; 0x40
 801208c:	617b      	str	r3, [r7, #20]
 801208e:	2300      	movs	r3, #0
 8012090:	613b      	str	r3, [r7, #16]
 8012092:	e029      	b.n	80120e8 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	f003 031f 	and.w	r3, r3, #31
 801209a:	2b00      	cmp	r3, #0
 801209c:	d102      	bne.n	80120a4 <dir_find+0x78>
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	3302      	adds	r3, #2
 80120a2:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	695a      	ldr	r2, [r3, #20]
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	4413      	add	r3, r2
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7fd fe4f 	bl	800fd50 <ld_word>
 80120b2:	4603      	mov	r3, r0
 80120b4:	4618      	mov	r0, r3
 80120b6:	f002 fc71 	bl	801499c <ff_wtoupper>
 80120ba:	4603      	mov	r3, r0
 80120bc:	461c      	mov	r4, r3
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	691a      	ldr	r2, [r3, #16]
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	4413      	add	r3, r2
 80120c8:	881b      	ldrh	r3, [r3, #0]
 80120ca:	4618      	mov	r0, r3
 80120cc:	f002 fc66 	bl	801499c <ff_wtoupper>
 80120d0:	4603      	mov	r3, r0
 80120d2:	429c      	cmp	r4, r3
 80120d4:	d10c      	bne.n	80120f0 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80120d6:	7efb      	ldrb	r3, [r7, #27]
 80120d8:	3b01      	subs	r3, #1
 80120da:	76fb      	strb	r3, [r7, #27]
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	3302      	adds	r3, #2
 80120e0:	617b      	str	r3, [r7, #20]
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	3301      	adds	r3, #1
 80120e6:	613b      	str	r3, [r7, #16]
 80120e8:	7efb      	ldrb	r3, [r7, #27]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d1d2      	bne.n	8012094 <dir_find+0x68>
 80120ee:	e000      	b.n	80120f2 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80120f0:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80120f2:	7efb      	ldrb	r3, [r7, #27]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d107      	bne.n	8012108 <dir_find+0xdc>
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	691a      	ldr	r2, [r3, #16]
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	005b      	lsls	r3, r3, #1
 8012100:	4413      	add	r3, r2
 8012102:	881b      	ldrh	r3, [r3, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d009      	beq.n	801211c <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8012108:	2100      	movs	r1, #0
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7ff fec7 	bl	8011e9e <dir_read>
 8012110:	4603      	mov	r3, r0
 8012112:	77fb      	strb	r3, [r7, #31]
 8012114:	7ffb      	ldrb	r3, [r7, #31]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d0a6      	beq.n	8012068 <dir_find+0x3c>
 801211a:	e000      	b.n	801211e <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801211c:	bf00      	nop
		}
		return res;
 801211e:	7ffb      	ldrb	r3, [r7, #31]
 8012120:	e0a9      	b.n	8012276 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012122:	23ff      	movs	r3, #255	; 0xff
 8012124:	773b      	strb	r3, [r7, #28]
 8012126:	7f3b      	ldrb	r3, [r7, #28]
 8012128:	777b      	strb	r3, [r7, #29]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f04f 32ff 	mov.w	r2, #4294967295
 8012130:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012136:	4619      	mov	r1, r3
 8012138:	68f8      	ldr	r0, [r7, #12]
 801213a:	f7fe f9fd 	bl	8010538 <move_window>
 801213e:	4603      	mov	r3, r0
 8012140:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8012142:	7ffb      	ldrb	r3, [r7, #31]
 8012144:	2b00      	cmp	r3, #0
 8012146:	f040 8090 	bne.w	801226a <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012152:	7fbb      	ldrb	r3, [r7, #30]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d102      	bne.n	801215e <dir_find+0x132>
 8012158:	2304      	movs	r3, #4
 801215a:	77fb      	strb	r3, [r7, #31]
 801215c:	e08a      	b.n	8012274 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012162:	330b      	adds	r3, #11
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801216a:	72fb      	strb	r3, [r7, #11]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	7afa      	ldrb	r2, [r7, #11]
 8012170:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012172:	7fbb      	ldrb	r3, [r7, #30]
 8012174:	2be5      	cmp	r3, #229	; 0xe5
 8012176:	d007      	beq.n	8012188 <dir_find+0x15c>
 8012178:	7afb      	ldrb	r3, [r7, #11]
 801217a:	f003 0308 	and.w	r3, r3, #8
 801217e:	2b00      	cmp	r3, #0
 8012180:	d009      	beq.n	8012196 <dir_find+0x16a>
 8012182:	7afb      	ldrb	r3, [r7, #11]
 8012184:	2b0f      	cmp	r3, #15
 8012186:	d006      	beq.n	8012196 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012188:	23ff      	movs	r3, #255	; 0xff
 801218a:	777b      	strb	r3, [r7, #29]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f04f 32ff 	mov.w	r2, #4294967295
 8012192:	64da      	str	r2, [r3, #76]	; 0x4c
 8012194:	e05e      	b.n	8012254 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012196:	7afb      	ldrb	r3, [r7, #11]
 8012198:	2b0f      	cmp	r3, #15
 801219a:	d136      	bne.n	801220a <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80121a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d154      	bne.n	8012254 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80121aa:	7fbb      	ldrb	r3, [r7, #30]
 80121ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d00d      	beq.n	80121d0 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121b8:	7b5b      	ldrb	r3, [r3, #13]
 80121ba:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80121bc:	7fbb      	ldrb	r3, [r7, #30]
 80121be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80121c2:	77bb      	strb	r3, [r7, #30]
 80121c4:	7fbb      	ldrb	r3, [r7, #30]
 80121c6:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80121d0:	7fba      	ldrb	r2, [r7, #30]
 80121d2:	7f7b      	ldrb	r3, [r7, #29]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d115      	bne.n	8012204 <dir_find+0x1d8>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121dc:	330d      	adds	r3, #13
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	7f3a      	ldrb	r2, [r7, #28]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d10e      	bne.n	8012204 <dir_find+0x1d8>
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	691a      	ldr	r2, [r3, #16]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121ee:	4619      	mov	r1, r3
 80121f0:	4610      	mov	r0, r2
 80121f2:	f7ff fa43 	bl	801167c <cmp_lfn>
 80121f6:	4603      	mov	r3, r0
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d003      	beq.n	8012204 <dir_find+0x1d8>
 80121fc:	7f7b      	ldrb	r3, [r7, #29]
 80121fe:	3b01      	subs	r3, #1
 8012200:	b2db      	uxtb	r3, r3
 8012202:	e000      	b.n	8012206 <dir_find+0x1da>
 8012204:	23ff      	movs	r3, #255	; 0xff
 8012206:	777b      	strb	r3, [r7, #29]
 8012208:	e024      	b.n	8012254 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801220a:	7f7b      	ldrb	r3, [r7, #29]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d109      	bne.n	8012224 <dir_find+0x1f8>
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012214:	4618      	mov	r0, r3
 8012216:	f7ff fbfd 	bl	8011a14 <sum_sfn>
 801221a:	4603      	mov	r3, r0
 801221c:	461a      	mov	r2, r3
 801221e:	7f3b      	ldrb	r3, [r7, #28]
 8012220:	4293      	cmp	r3, r2
 8012222:	d024      	beq.n	801226e <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801222a:	f003 0301 	and.w	r3, r3, #1
 801222e:	2b00      	cmp	r3, #0
 8012230:	d10a      	bne.n	8012248 <dir_find+0x21c>
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	3340      	adds	r3, #64	; 0x40
 801223a:	220b      	movs	r2, #11
 801223c:	4619      	mov	r1, r3
 801223e:	f7fd ff88 	bl	8010152 <mem_cmp>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d014      	beq.n	8012272 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012248:	23ff      	movs	r3, #255	; 0xff
 801224a:	777b      	strb	r3, [r7, #29]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f04f 32ff 	mov.w	r2, #4294967295
 8012252:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012254:	2100      	movs	r1, #0
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f7ff f88e 	bl	8011378 <dir_next>
 801225c:	4603      	mov	r3, r0
 801225e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8012260:	7ffb      	ldrb	r3, [r7, #31]
 8012262:	2b00      	cmp	r3, #0
 8012264:	f43f af65 	beq.w	8012132 <dir_find+0x106>
 8012268:	e004      	b.n	8012274 <dir_find+0x248>
		if (res != FR_OK) break;
 801226a:	bf00      	nop
 801226c:	e002      	b.n	8012274 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801226e:	bf00      	nop
 8012270:	e000      	b.n	8012274 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012272:	bf00      	nop

	return res;
 8012274:	7ffb      	ldrb	r3, [r7, #31]
}
 8012276:	4618      	mov	r0, r3
 8012278:	3724      	adds	r7, #36	; 0x24
 801227a:	46bd      	mov	sp, r7
 801227c:	bd90      	pop	{r4, r7, pc}
	...

08012280 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012280:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012284:	b0a0      	sub	sp, #128	; 0x80
 8012286:	af00      	add	r7, sp, #0
 8012288:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012296:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801229a:	2b00      	cmp	r3, #0
 801229c:	d001      	beq.n	80122a2 <dir_register+0x22>
 801229e:	2306      	movs	r3, #6
 80122a0:	e198      	b.n	80125d4 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80122a2:	2300      	movs	r3, #0
 80122a4:	677b      	str	r3, [r7, #116]	; 0x74
 80122a6:	e002      	b.n	80122ae <dir_register+0x2e>
 80122a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122aa:	3301      	adds	r3, #1
 80122ac:	677b      	str	r3, [r7, #116]	; 0x74
 80122ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122b0:	691a      	ldr	r2, [r3, #16]
 80122b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122b4:	005b      	lsls	r3, r3, #1
 80122b6:	4413      	add	r3, r2
 80122b8:	881b      	ldrh	r3, [r3, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d1f4      	bne.n	80122a8 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80122be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	2b04      	cmp	r3, #4
 80122c4:	f040 80a9 	bne.w	801241a <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80122c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122ca:	330e      	adds	r3, #14
 80122cc:	4aa7      	ldr	r2, [pc, #668]	; (801256c <dir_register+0x2ec>)
 80122ce:	fba2 2303 	umull	r2, r3, r2, r3
 80122d2:	08db      	lsrs	r3, r3, #3
 80122d4:	3302      	adds	r3, #2
 80122d6:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 80122d8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f7ff f932 	bl	8011544 <dir_alloc>
 80122e0:	4603      	mov	r3, r0
 80122e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 80122e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d002      	beq.n	80122f4 <dir_register+0x74>
 80122ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80122f2:	e16f      	b.n	80125d4 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122f8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80122fa:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80122fe:	440b      	add	r3, r1
 8012300:	015b      	lsls	r3, r3, #5
 8012302:	1ad2      	subs	r2, r2, r3
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	689b      	ldr	r3, [r3, #8]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d07a      	beq.n	8012406 <dir_register+0x186>
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	79db      	ldrb	r3, [r3, #7]
 8012314:	f003 0304 	and.w	r3, r3, #4
 8012318:	2b00      	cmp	r3, #0
 801231a:	d074      	beq.n	8012406 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8012322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012324:	895b      	ldrh	r3, [r3, #10]
 8012326:	4618      	mov	r0, r3
 8012328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801232a:	899b      	ldrh	r3, [r3, #12]
 801232c:	fb03 f300 	mul.w	r3, r3, r0
 8012330:	469b      	mov	fp, r3
 8012332:	f04f 0c00 	mov.w	ip, #0
 8012336:	eb1b 0301 	adds.w	r3, fp, r1
 801233a:	eb4c 0402 	adc.w	r4, ip, r2
 801233e:	687a      	ldr	r2, [r7, #4]
 8012340:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	4618      	mov	r0, r3
 8012348:	f7fe fd26 	bl	8010d98 <fill_first_frag>
 801234c:	4603      	mov	r3, r0
 801234e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8012352:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012356:	2b00      	cmp	r3, #0
 8012358:	d002      	beq.n	8012360 <dir_register+0xe0>
 801235a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801235e:	e139      	b.n	80125d4 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012366:	f04f 32ff 	mov.w	r2, #4294967295
 801236a:	4619      	mov	r1, r3
 801236c:	f7fe fd43 	bl	8010df6 <fill_last_frag>
 8012370:	4603      	mov	r3, r0
 8012372:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8012376:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801237a:	2b00      	cmp	r3, #0
 801237c:	d002      	beq.n	8012384 <dir_register+0x104>
 801237e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012382:	e127      	b.n	80125d4 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8012384:	687a      	ldr	r2, [r7, #4]
 8012386:	f107 0308 	add.w	r3, r7, #8
 801238a:	4611      	mov	r1, r2
 801238c:	4618      	mov	r0, r3
 801238e:	f7ff fc87 	bl	8011ca0 <load_obj_dir>
 8012392:	4603      	mov	r3, r0
 8012394:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8012398:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801239c:	2b00      	cmp	r3, #0
 801239e:	d002      	beq.n	80123a6 <dir_register+0x126>
 80123a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80123a4:	e116      	b.n	80125d4 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80123a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123a8:	695b      	ldr	r3, [r3, #20]
 80123aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80123b4:	461a      	mov	r2, r3
 80123b6:	4623      	mov	r3, r4
 80123b8:	4608      	mov	r0, r1
 80123ba:	f7fd fe08 	bl	800ffce <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80123be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123c0:	695b      	ldr	r3, [r3, #20]
 80123c2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80123cc:	461a      	mov	r2, r3
 80123ce:	4623      	mov	r3, r4
 80123d0:	4608      	mov	r0, r1
 80123d2:	f7fd fdfc 	bl	800ffce <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	79da      	ldrb	r2, [r3, #7]
 80123da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123dc:	695b      	ldr	r3, [r3, #20]
 80123de:	3321      	adds	r3, #33	; 0x21
 80123e0:	f042 0201 	orr.w	r2, r2, #1
 80123e4:	b2d2      	uxtb	r2, r2
 80123e6:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 80123e8:	f107 0308 	add.w	r3, r7, #8
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7ff fc94 	bl	8011d1a <store_xdir>
 80123f2:	4603      	mov	r3, r0
 80123f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80123f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d002      	beq.n	8012406 <dir_register+0x186>
 8012400:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012404:	e0e6      	b.n	80125d4 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8012406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012408:	695a      	ldr	r2, [r3, #20]
 801240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801240c:	691b      	ldr	r3, [r3, #16]
 801240e:	4619      	mov	r1, r3
 8012410:	4610      	mov	r0, r2
 8012412:	f7ff fcdd 	bl	8011dd0 <create_xdir>
		return FR_OK;
 8012416:	2300      	movs	r3, #0
 8012418:	e0dc      	b.n	80125d4 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8012420:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012424:	220c      	movs	r2, #12
 8012426:	4618      	mov	r0, r3
 8012428:	f7fd fe58 	bl	80100dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801242c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012430:	f003 0301 	and.w	r3, r3, #1
 8012434:	2b00      	cmp	r3, #0
 8012436:	d033      	beq.n	80124a0 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2240      	movs	r2, #64	; 0x40
 801243c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8012440:	2301      	movs	r3, #1
 8012442:	67bb      	str	r3, [r7, #120]	; 0x78
 8012444:	e016      	b.n	8012474 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801244e:	691a      	ldr	r2, [r3, #16]
 8012450:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8012454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012456:	f7ff fa4d 	bl	80118f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f7ff fde6 	bl	801202c <dir_find>
 8012460:	4603      	mov	r3, r0
 8012462:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8012466:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801246a:	2b00      	cmp	r3, #0
 801246c:	d106      	bne.n	801247c <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 801246e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012470:	3301      	adds	r3, #1
 8012472:	67bb      	str	r3, [r7, #120]	; 0x78
 8012474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012476:	2b63      	cmp	r3, #99	; 0x63
 8012478:	d9e5      	bls.n	8012446 <dir_register+0x1c6>
 801247a:	e000      	b.n	801247e <dir_register+0x1fe>
			if (res != FR_OK) break;
 801247c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801247e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012480:	2b64      	cmp	r3, #100	; 0x64
 8012482:	d101      	bne.n	8012488 <dir_register+0x208>
 8012484:	2307      	movs	r3, #7
 8012486:	e0a5      	b.n	80125d4 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012488:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801248c:	2b04      	cmp	r3, #4
 801248e:	d002      	beq.n	8012496 <dir_register+0x216>
 8012490:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012494:	e09e      	b.n	80125d4 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012496:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80124a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80124a4:	f003 0302 	and.w	r3, r3, #2
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d007      	beq.n	80124bc <dir_register+0x23c>
 80124ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80124ae:	330c      	adds	r3, #12
 80124b0:	4a2f      	ldr	r2, [pc, #188]	; (8012570 <dir_register+0x2f0>)
 80124b2:	fba2 2303 	umull	r2, r3, r2, r3
 80124b6:	089b      	lsrs	r3, r3, #2
 80124b8:	3301      	adds	r3, #1
 80124ba:	e000      	b.n	80124be <dir_register+0x23e>
 80124bc:	2301      	movs	r3, #1
 80124be:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80124c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f7ff f83e 	bl	8011544 <dir_alloc>
 80124c8:	4603      	mov	r3, r0
 80124ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80124ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d14f      	bne.n	8012576 <dir_register+0x2f6>
 80124d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80124d8:	3b01      	subs	r3, #1
 80124da:	673b      	str	r3, [r7, #112]	; 0x70
 80124dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d049      	beq.n	8012576 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80124e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80124e8:	015b      	lsls	r3, r3, #5
 80124ea:	1ad3      	subs	r3, r2, r3
 80124ec:	4619      	mov	r1, r3
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7fe feae 	bl	8011250 <dir_sdi>
 80124f4:	4603      	mov	r3, r0
 80124f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80124fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d139      	bne.n	8012576 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	3340      	adds	r3, #64	; 0x40
 8012506:	4618      	mov	r0, r3
 8012508:	f7ff fa84 	bl	8011a14 <sum_sfn>
 801250c:	4603      	mov	r3, r0
 801250e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012516:	4619      	mov	r1, r3
 8012518:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801251a:	f7fe f80d 	bl	8010538 <move_window>
 801251e:	4603      	mov	r3, r0
 8012520:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8012524:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012528:	2b00      	cmp	r3, #0
 801252a:	d123      	bne.n	8012574 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801252c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801252e:	6918      	ldr	r0, [r3, #16]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8012534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012536:	b2da      	uxtb	r2, r3
 8012538:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801253c:	f7ff f972 	bl	8011824 <put_lfn>
				fs->wflag = 1;
 8012540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012542:	2201      	movs	r2, #1
 8012544:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012546:	2100      	movs	r1, #0
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f7fe ff15 	bl	8011378 <dir_next>
 801254e:	4603      	mov	r3, r0
 8012550:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8012554:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012558:	2b00      	cmp	r3, #0
 801255a:	d10c      	bne.n	8012576 <dir_register+0x2f6>
 801255c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801255e:	3b01      	subs	r3, #1
 8012560:	673b      	str	r3, [r7, #112]	; 0x70
 8012562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012564:	2b00      	cmp	r3, #0
 8012566:	d1d4      	bne.n	8012512 <dir_register+0x292>
 8012568:	e005      	b.n	8012576 <dir_register+0x2f6>
 801256a:	bf00      	nop
 801256c:	88888889 	.word	0x88888889
 8012570:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8012574:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012576:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801257a:	2b00      	cmp	r3, #0
 801257c:	d128      	bne.n	80125d0 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012582:	4619      	mov	r1, r3
 8012584:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012586:	f7fd ffd7 	bl	8010538 <move_window>
 801258a:	4603      	mov	r3, r0
 801258c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8012590:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012594:	2b00      	cmp	r3, #0
 8012596:	d11b      	bne.n	80125d0 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801259c:	2220      	movs	r2, #32
 801259e:	2100      	movs	r1, #0
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fd fdbc 	bl	801011e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	3340      	adds	r3, #64	; 0x40
 80125ae:	220b      	movs	r2, #11
 80125b0:	4619      	mov	r1, r3
 80125b2:	f7fd fd93 	bl	80100dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125c0:	330c      	adds	r3, #12
 80125c2:	f002 0218 	and.w	r2, r2, #24
 80125c6:	b2d2      	uxtb	r2, r2
 80125c8:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80125ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125cc:	2201      	movs	r2, #1
 80125ce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80125d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3780      	adds	r7, #128	; 0x80
 80125d8:	46bd      	mov	sp, r7
 80125da:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80125de:	bf00      	nop

080125e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b08a      	sub	sp, #40	; 0x28
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	613b      	str	r3, [r7, #16]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	691b      	ldr	r3, [r3, #16]
 80125f6:	60fb      	str	r3, [r7, #12]
 80125f8:	2300      	movs	r3, #0
 80125fa:	617b      	str	r3, [r7, #20]
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012600:	69bb      	ldr	r3, [r7, #24]
 8012602:	1c5a      	adds	r2, r3, #1
 8012604:	61ba      	str	r2, [r7, #24]
 8012606:	693a      	ldr	r2, [r7, #16]
 8012608:	4413      	add	r3, r2
 801260a:	781b      	ldrb	r3, [r3, #0]
 801260c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801260e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012610:	2b1f      	cmp	r3, #31
 8012612:	d940      	bls.n	8012696 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012614:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012616:	2b2f      	cmp	r3, #47	; 0x2f
 8012618:	d006      	beq.n	8012628 <create_name+0x48>
 801261a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801261c:	2b5c      	cmp	r3, #92	; 0x5c
 801261e:	d110      	bne.n	8012642 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012620:	e002      	b.n	8012628 <create_name+0x48>
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	3301      	adds	r3, #1
 8012626:	61bb      	str	r3, [r7, #24]
 8012628:	693a      	ldr	r2, [r7, #16]
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	4413      	add	r3, r2
 801262e:	781b      	ldrb	r3, [r3, #0]
 8012630:	2b2f      	cmp	r3, #47	; 0x2f
 8012632:	d0f6      	beq.n	8012622 <create_name+0x42>
 8012634:	693a      	ldr	r2, [r7, #16]
 8012636:	69bb      	ldr	r3, [r7, #24]
 8012638:	4413      	add	r3, r2
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	2b5c      	cmp	r3, #92	; 0x5c
 801263e:	d0f0      	beq.n	8012622 <create_name+0x42>
			break;
 8012640:	e02a      	b.n	8012698 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	2bfe      	cmp	r3, #254	; 0xfe
 8012646:	d901      	bls.n	801264c <create_name+0x6c>
 8012648:	2306      	movs	r3, #6
 801264a:	e177      	b.n	801293c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 801264c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801264e:	b2db      	uxtb	r3, r3
 8012650:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012654:	2101      	movs	r1, #1
 8012656:	4618      	mov	r0, r3
 8012658:	f002 f964 	bl	8014924 <ff_convert>
 801265c:	4603      	mov	r3, r0
 801265e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012662:	2b00      	cmp	r3, #0
 8012664:	d101      	bne.n	801266a <create_name+0x8a>
 8012666:	2306      	movs	r3, #6
 8012668:	e168      	b.n	801293c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801266a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801266c:	2b7f      	cmp	r3, #127	; 0x7f
 801266e:	d809      	bhi.n	8012684 <create_name+0xa4>
 8012670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012672:	4619      	mov	r1, r3
 8012674:	48b3      	ldr	r0, [pc, #716]	; (8012944 <create_name+0x364>)
 8012676:	f7fd fd93 	bl	80101a0 <chk_chr>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d001      	beq.n	8012684 <create_name+0xa4>
 8012680:	2306      	movs	r3, #6
 8012682:	e15b      	b.n	801293c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	1c5a      	adds	r2, r3, #1
 8012688:	617a      	str	r2, [r7, #20]
 801268a:	005b      	lsls	r3, r3, #1
 801268c:	68fa      	ldr	r2, [r7, #12]
 801268e:	4413      	add	r3, r2
 8012690:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012692:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012694:	e7b4      	b.n	8012600 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012696:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012698:	693a      	ldr	r2, [r7, #16]
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	441a      	add	r2, r3
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80126a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126a4:	2b1f      	cmp	r3, #31
 80126a6:	d801      	bhi.n	80126ac <create_name+0xcc>
 80126a8:	2304      	movs	r3, #4
 80126aa:	e000      	b.n	80126ae <create_name+0xce>
 80126ac:	2300      	movs	r3, #0
 80126ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80126b2:	e011      	b.n	80126d8 <create_name+0xf8>
		w = lfn[di - 1];
 80126b4:	697a      	ldr	r2, [r7, #20]
 80126b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80126ba:	4413      	add	r3, r2
 80126bc:	005b      	lsls	r3, r3, #1
 80126be:	68fa      	ldr	r2, [r7, #12]
 80126c0:	4413      	add	r3, r2
 80126c2:	881b      	ldrh	r3, [r3, #0]
 80126c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80126c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126c8:	2b20      	cmp	r3, #32
 80126ca:	d002      	beq.n	80126d2 <create_name+0xf2>
 80126cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126ce:	2b2e      	cmp	r3, #46	; 0x2e
 80126d0:	d106      	bne.n	80126e0 <create_name+0x100>
		di--;
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	3b01      	subs	r3, #1
 80126d6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d1ea      	bne.n	80126b4 <create_name+0xd4>
 80126de:	e000      	b.n	80126e2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80126e0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	005b      	lsls	r3, r3, #1
 80126e6:	68fa      	ldr	r2, [r7, #12]
 80126e8:	4413      	add	r3, r2
 80126ea:	2200      	movs	r2, #0
 80126ec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d101      	bne.n	80126f8 <create_name+0x118>
 80126f4:	2306      	movs	r3, #6
 80126f6:	e121      	b.n	801293c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	3340      	adds	r3, #64	; 0x40
 80126fc:	220b      	movs	r2, #11
 80126fe:	2120      	movs	r1, #32
 8012700:	4618      	mov	r0, r3
 8012702:	f7fd fd0c 	bl	801011e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012706:	2300      	movs	r3, #0
 8012708:	61bb      	str	r3, [r7, #24]
 801270a:	e002      	b.n	8012712 <create_name+0x132>
 801270c:	69bb      	ldr	r3, [r7, #24]
 801270e:	3301      	adds	r3, #1
 8012710:	61bb      	str	r3, [r7, #24]
 8012712:	69bb      	ldr	r3, [r7, #24]
 8012714:	005b      	lsls	r3, r3, #1
 8012716:	68fa      	ldr	r2, [r7, #12]
 8012718:	4413      	add	r3, r2
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	2b20      	cmp	r3, #32
 801271e:	d0f5      	beq.n	801270c <create_name+0x12c>
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	005b      	lsls	r3, r3, #1
 8012724:	68fa      	ldr	r2, [r7, #12]
 8012726:	4413      	add	r3, r2
 8012728:	881b      	ldrh	r3, [r3, #0]
 801272a:	2b2e      	cmp	r3, #46	; 0x2e
 801272c:	d0ee      	beq.n	801270c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801272e:	69bb      	ldr	r3, [r7, #24]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d009      	beq.n	8012748 <create_name+0x168>
 8012734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012738:	f043 0303 	orr.w	r3, r3, #3
 801273c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012740:	e002      	b.n	8012748 <create_name+0x168>
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	3b01      	subs	r3, #1
 8012746:	617b      	str	r3, [r7, #20]
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d009      	beq.n	8012762 <create_name+0x182>
 801274e:	697a      	ldr	r2, [r7, #20]
 8012750:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012754:	4413      	add	r3, r2
 8012756:	005b      	lsls	r3, r3, #1
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	4413      	add	r3, r2
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	2b2e      	cmp	r3, #46	; 0x2e
 8012760:	d1ef      	bne.n	8012742 <create_name+0x162>

	i = b = 0; ni = 8;
 8012762:	2300      	movs	r3, #0
 8012764:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012768:	2300      	movs	r3, #0
 801276a:	623b      	str	r3, [r7, #32]
 801276c:	2308      	movs	r3, #8
 801276e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012770:	69bb      	ldr	r3, [r7, #24]
 8012772:	1c5a      	adds	r2, r3, #1
 8012774:	61ba      	str	r2, [r7, #24]
 8012776:	005b      	lsls	r3, r3, #1
 8012778:	68fa      	ldr	r2, [r7, #12]
 801277a:	4413      	add	r3, r2
 801277c:	881b      	ldrh	r3, [r3, #0]
 801277e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012782:	2b00      	cmp	r3, #0
 8012784:	f000 8090 	beq.w	80128a8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801278a:	2b20      	cmp	r3, #32
 801278c:	d006      	beq.n	801279c <create_name+0x1bc>
 801278e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012790:	2b2e      	cmp	r3, #46	; 0x2e
 8012792:	d10a      	bne.n	80127aa <create_name+0x1ca>
 8012794:	69ba      	ldr	r2, [r7, #24]
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	429a      	cmp	r2, r3
 801279a:	d006      	beq.n	80127aa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801279c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127a0:	f043 0303 	orr.w	r3, r3, #3
 80127a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80127a8:	e07d      	b.n	80128a6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80127aa:	6a3a      	ldr	r2, [r7, #32]
 80127ac:	69fb      	ldr	r3, [r7, #28]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d203      	bcs.n	80127ba <create_name+0x1da>
 80127b2:	69ba      	ldr	r2, [r7, #24]
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d123      	bne.n	8012802 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80127ba:	69fb      	ldr	r3, [r7, #28]
 80127bc:	2b0b      	cmp	r3, #11
 80127be:	d106      	bne.n	80127ce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80127c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127c4:	f043 0303 	orr.w	r3, r3, #3
 80127c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80127cc:	e06f      	b.n	80128ae <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80127ce:	69ba      	ldr	r2, [r7, #24]
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d005      	beq.n	80127e2 <create_name+0x202>
 80127d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127da:	f043 0303 	orr.w	r3, r3, #3
 80127de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80127e2:	69ba      	ldr	r2, [r7, #24]
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d860      	bhi.n	80128ac <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	61bb      	str	r3, [r7, #24]
 80127ee:	2308      	movs	r3, #8
 80127f0:	623b      	str	r3, [r7, #32]
 80127f2:	230b      	movs	r3, #11
 80127f4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80127f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80127fa:	009b      	lsls	r3, r3, #2
 80127fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012800:	e051      	b.n	80128a6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012804:	2b7f      	cmp	r3, #127	; 0x7f
 8012806:	d914      	bls.n	8012832 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801280a:	2100      	movs	r1, #0
 801280c:	4618      	mov	r0, r3
 801280e:	f002 f889 	bl	8014924 <ff_convert>
 8012812:	4603      	mov	r3, r0
 8012814:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012818:	2b00      	cmp	r3, #0
 801281a:	d004      	beq.n	8012826 <create_name+0x246>
 801281c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801281e:	3b80      	subs	r3, #128	; 0x80
 8012820:	4a49      	ldr	r2, [pc, #292]	; (8012948 <create_name+0x368>)
 8012822:	5cd3      	ldrb	r3, [r2, r3]
 8012824:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801282a:	f043 0302 	orr.w	r3, r3, #2
 801282e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012834:	2b00      	cmp	r3, #0
 8012836:	d007      	beq.n	8012848 <create_name+0x268>
 8012838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801283a:	4619      	mov	r1, r3
 801283c:	4843      	ldr	r0, [pc, #268]	; (801294c <create_name+0x36c>)
 801283e:	f7fd fcaf 	bl	80101a0 <chk_chr>
 8012842:	4603      	mov	r3, r0
 8012844:	2b00      	cmp	r3, #0
 8012846:	d008      	beq.n	801285a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012848:	235f      	movs	r3, #95	; 0x5f
 801284a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801284c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012850:	f043 0303 	orr.w	r3, r3, #3
 8012854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012858:	e01b      	b.n	8012892 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801285a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801285c:	2b40      	cmp	r3, #64	; 0x40
 801285e:	d909      	bls.n	8012874 <create_name+0x294>
 8012860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012862:	2b5a      	cmp	r3, #90	; 0x5a
 8012864:	d806      	bhi.n	8012874 <create_name+0x294>
					b |= 2;
 8012866:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801286a:	f043 0302 	orr.w	r3, r3, #2
 801286e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012872:	e00e      	b.n	8012892 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012876:	2b60      	cmp	r3, #96	; 0x60
 8012878:	d90b      	bls.n	8012892 <create_name+0x2b2>
 801287a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801287c:	2b7a      	cmp	r3, #122	; 0x7a
 801287e:	d808      	bhi.n	8012892 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012884:	f043 0301 	orr.w	r3, r3, #1
 8012888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801288c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801288e:	3b20      	subs	r3, #32
 8012890:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012892:	6a3b      	ldr	r3, [r7, #32]
 8012894:	1c5a      	adds	r2, r3, #1
 8012896:	623a      	str	r2, [r7, #32]
 8012898:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801289a:	b2d1      	uxtb	r1, r2
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	4413      	add	r3, r2
 80128a0:	460a      	mov	r2, r1
 80128a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 80128a6:	e763      	b.n	8012770 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80128a8:	bf00      	nop
 80128aa:	e000      	b.n	80128ae <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80128ac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128b4:	2be5      	cmp	r3, #229	; 0xe5
 80128b6:	d103      	bne.n	80128c0 <create_name+0x2e0>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2205      	movs	r2, #5
 80128bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 80128c0:	69fb      	ldr	r3, [r7, #28]
 80128c2:	2b08      	cmp	r3, #8
 80128c4:	d104      	bne.n	80128d0 <create_name+0x2f0>
 80128c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128ca:	009b      	lsls	r3, r3, #2
 80128cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80128d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128d4:	f003 030c 	and.w	r3, r3, #12
 80128d8:	2b0c      	cmp	r3, #12
 80128da:	d005      	beq.n	80128e8 <create_name+0x308>
 80128dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128e0:	f003 0303 	and.w	r3, r3, #3
 80128e4:	2b03      	cmp	r3, #3
 80128e6:	d105      	bne.n	80128f4 <create_name+0x314>
 80128e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128ec:	f043 0302 	orr.w	r3, r3, #2
 80128f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80128f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128f8:	f003 0302 	and.w	r3, r3, #2
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d117      	bne.n	8012930 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012904:	f003 0303 	and.w	r3, r3, #3
 8012908:	2b01      	cmp	r3, #1
 801290a:	d105      	bne.n	8012918 <create_name+0x338>
 801290c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012910:	f043 0310 	orr.w	r3, r3, #16
 8012914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012918:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801291c:	f003 030c 	and.w	r3, r3, #12
 8012920:	2b04      	cmp	r3, #4
 8012922:	d105      	bne.n	8012930 <create_name+0x350>
 8012924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012928:	f043 0308 	orr.w	r3, r3, #8
 801292c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012936:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 801293a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801293c:	4618      	mov	r0, r3
 801293e:	3728      	adds	r7, #40	; 0x28
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}
 8012944:	08015734 	.word	0x08015734
 8012948:	08015808 	.word	0x08015808
 801294c:	08015740 	.word	0x08015740

08012950 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012950:	b590      	push	{r4, r7, lr}
 8012952:	b087      	sub	sp, #28
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012964:	e002      	b.n	801296c <follow_path+0x1c>
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	3301      	adds	r3, #1
 801296a:	603b      	str	r3, [r7, #0]
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	2b2f      	cmp	r3, #47	; 0x2f
 8012972:	d0f8      	beq.n	8012966 <follow_path+0x16>
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	781b      	ldrb	r3, [r3, #0]
 8012978:	2b5c      	cmp	r3, #92	; 0x5c
 801297a:	d0f4      	beq.n	8012966 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	2200      	movs	r2, #0
 8012980:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	2200      	movs	r2, #0
 8012986:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	2b1f      	cmp	r3, #31
 801298e:	d80a      	bhi.n	80129a6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2280      	movs	r2, #128	; 0x80
 8012994:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8012998:	2100      	movs	r1, #0
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f7fe fc58 	bl	8011250 <dir_sdi>
 80129a0:	4603      	mov	r3, r0
 80129a2:	75fb      	strb	r3, [r7, #23]
 80129a4:	e07c      	b.n	8012aa0 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80129a6:	463b      	mov	r3, r7
 80129a8:	4619      	mov	r1, r3
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f7ff fe18 	bl	80125e0 <create_name>
 80129b0:	4603      	mov	r3, r0
 80129b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80129b4:	7dfb      	ldrb	r3, [r7, #23]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d16d      	bne.n	8012a96 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f7ff fb36 	bl	801202c <dir_find>
 80129c0:	4603      	mov	r3, r0
 80129c2:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80129ca:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80129cc:	7dfb      	ldrb	r3, [r7, #23]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00a      	beq.n	80129e8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80129d2:	7dfb      	ldrb	r3, [r7, #23]
 80129d4:	2b04      	cmp	r3, #4
 80129d6:	d160      	bne.n	8012a9a <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80129d8:	7afb      	ldrb	r3, [r7, #11]
 80129da:	f003 0304 	and.w	r3, r3, #4
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d15b      	bne.n	8012a9a <follow_path+0x14a>
 80129e2:	2305      	movs	r3, #5
 80129e4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80129e6:	e058      	b.n	8012a9a <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80129e8:	7afb      	ldrb	r3, [r7, #11]
 80129ea:	f003 0304 	and.w	r3, r3, #4
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d155      	bne.n	8012a9e <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80129f2:	693b      	ldr	r3, [r7, #16]
 80129f4:	799b      	ldrb	r3, [r3, #6]
 80129f6:	f003 0310 	and.w	r3, r3, #16
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d102      	bne.n	8012a04 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 80129fe:	2305      	movs	r3, #5
 8012a00:	75fb      	strb	r3, [r7, #23]
 8012a02:	e04d      	b.n	8012aa0 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	2b04      	cmp	r3, #4
 8012a0a:	d12f      	bne.n	8012a6c <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	689a      	ldr	r2, [r3, #8]
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8012a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012a1e:	693a      	ldr	r2, [r7, #16]
 8012a20:	79d2      	ldrb	r2, [r2, #7]
 8012a22:	431a      	orrs	r2, r3
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	695b      	ldr	r3, [r3, #20]
 8012a34:	3334      	adds	r3, #52	; 0x34
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7fd f9a2 	bl	800fd80 <ld_dword>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	695b      	ldr	r3, [r3, #20]
 8012a46:	3321      	adds	r3, #33	; 0x21
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	f003 0302 	and.w	r3, r3, #2
 8012a4e:	b2da      	uxtb	r2, r3
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	695b      	ldr	r3, [r3, #20]
 8012a58:	3338      	adds	r3, #56	; 0x38
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f7fd f9b3 	bl	800fdc6 <ld_qword>
 8012a60:	4603      	mov	r3, r0
 8012a62:	460c      	mov	r4, r1
 8012a64:	693a      	ldr	r2, [r7, #16]
 8012a66:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8012a6a:	e79c      	b.n	80129a6 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a76:	68fa      	ldr	r2, [r7, #12]
 8012a78:	8992      	ldrh	r2, [r2, #12]
 8012a7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8012a7e:	fb02 f200 	mul.w	r2, r2, r0
 8012a82:	1a9b      	subs	r3, r3, r2
 8012a84:	440b      	add	r3, r1
 8012a86:	4619      	mov	r1, r3
 8012a88:	68f8      	ldr	r0, [r7, #12]
 8012a8a:	f7fe fdb7 	bl	80115fc <ld_clust>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012a94:	e787      	b.n	80129a6 <follow_path+0x56>
			if (res != FR_OK) break;
 8012a96:	bf00      	nop
 8012a98:	e002      	b.n	8012aa0 <follow_path+0x150>
				break;
 8012a9a:	bf00      	nop
 8012a9c:	e000      	b.n	8012aa0 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012a9e:	bf00      	nop
			}
		}
	}

	return res;
 8012aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	371c      	adds	r7, #28
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd90      	pop	{r4, r7, pc}

08012aaa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012aaa:	b480      	push	{r7}
 8012aac:	b087      	sub	sp, #28
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ab6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d031      	beq.n	8012b24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	617b      	str	r3, [r7, #20]
 8012ac6:	e002      	b.n	8012ace <get_ldnumber+0x24>
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	3301      	adds	r3, #1
 8012acc:	617b      	str	r3, [r7, #20]
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	2b1f      	cmp	r3, #31
 8012ad4:	d903      	bls.n	8012ade <get_ldnumber+0x34>
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	2b3a      	cmp	r3, #58	; 0x3a
 8012adc:	d1f4      	bne.n	8012ac8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	2b3a      	cmp	r3, #58	; 0x3a
 8012ae4:	d11c      	bne.n	8012b20 <get_ldnumber+0x76>
			tp = *path;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	1c5a      	adds	r2, r3, #1
 8012af0:	60fa      	str	r2, [r7, #12]
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	3b30      	subs	r3, #48	; 0x30
 8012af6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	2b09      	cmp	r3, #9
 8012afc:	d80e      	bhi.n	8012b1c <get_ldnumber+0x72>
 8012afe:	68fa      	ldr	r2, [r7, #12]
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	429a      	cmp	r2, r3
 8012b04:	d10a      	bne.n	8012b1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d107      	bne.n	8012b1c <get_ldnumber+0x72>
					vol = (int)i;
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	3301      	adds	r3, #1
 8012b14:	617b      	str	r3, [r7, #20]
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	697a      	ldr	r2, [r7, #20]
 8012b1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	e002      	b.n	8012b26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012b20:	2300      	movs	r3, #0
 8012b22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012b24:	693b      	ldr	r3, [r7, #16]
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	371c      	adds	r7, #28
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b30:	4770      	bx	lr
	...

08012b34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b082      	sub	sp, #8
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2200      	movs	r2, #0
 8012b42:	70da      	strb	r2, [r3, #3]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f04f 32ff 	mov.w	r2, #4294967295
 8012b4a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012b4c:	6839      	ldr	r1, [r7, #0]
 8012b4e:	6878      	ldr	r0, [r7, #4]
 8012b50:	f7fd fcf2 	bl	8010538 <move_window>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d001      	beq.n	8012b5e <check_fs+0x2a>
 8012b5a:	2304      	movs	r3, #4
 8012b5c:	e044      	b.n	8012be8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	333c      	adds	r3, #60	; 0x3c
 8012b62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fd f8f2 	bl	800fd50 <ld_word>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	461a      	mov	r2, r3
 8012b70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d001      	beq.n	8012b7c <check_fs+0x48>
 8012b78:	2303      	movs	r3, #3
 8012b7a:	e035      	b.n	8012be8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b82:	2be9      	cmp	r3, #233	; 0xe9
 8012b84:	d009      	beq.n	8012b9a <check_fs+0x66>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b8c:	2beb      	cmp	r3, #235	; 0xeb
 8012b8e:	d11e      	bne.n	8012bce <check_fs+0x9a>
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012b96:	2b90      	cmp	r3, #144	; 0x90
 8012b98:	d119      	bne.n	8012bce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	333c      	adds	r3, #60	; 0x3c
 8012b9e:	3336      	adds	r3, #54	; 0x36
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7fd f8ed 	bl	800fd80 <ld_dword>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012bac:	4a10      	ldr	r2, [pc, #64]	; (8012bf0 <check_fs+0xbc>)
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	d101      	bne.n	8012bb6 <check_fs+0x82>
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	e018      	b.n	8012be8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	333c      	adds	r3, #60	; 0x3c
 8012bba:	3352      	adds	r3, #82	; 0x52
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7fd f8df 	bl	800fd80 <ld_dword>
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	4b0b      	ldr	r3, [pc, #44]	; (8012bf4 <check_fs+0xc0>)
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d101      	bne.n	8012bce <check_fs+0x9a>
 8012bca:	2300      	movs	r3, #0
 8012bcc:	e00c      	b.n	8012be8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	333c      	adds	r3, #60	; 0x3c
 8012bd2:	220b      	movs	r2, #11
 8012bd4:	4908      	ldr	r1, [pc, #32]	; (8012bf8 <check_fs+0xc4>)
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7fd fabb 	bl	8010152 <mem_cmp>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d101      	bne.n	8012be6 <check_fs+0xb2>
 8012be2:	2301      	movs	r3, #1
 8012be4:	e000      	b.n	8012be8 <check_fs+0xb4>
#endif
	return 2;
 8012be6:	2302      	movs	r3, #2
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	3708      	adds	r7, #8
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	00544146 	.word	0x00544146
 8012bf4:	33544146 	.word	0x33544146
 8012bf8:	08015748 	.word	0x08015748

08012bfc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012bfc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012c00:	b098      	sub	sp, #96	; 0x60
 8012c02:	af00      	add	r7, sp, #0
 8012c04:	60f8      	str	r0, [r7, #12]
 8012c06:	60b9      	str	r1, [r7, #8]
 8012c08:	4613      	mov	r3, r2
 8012c0a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012c12:	68f8      	ldr	r0, [r7, #12]
 8012c14:	f7ff ff49 	bl	8012aaa <get_ldnumber>
 8012c18:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	da01      	bge.n	8012c24 <find_volume+0x28>
 8012c20:	230b      	movs	r3, #11
 8012c22:	e368      	b.n	80132f6 <find_volume+0x6fa>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012c24:	4aaa      	ldr	r2, [pc, #680]	; (8012ed0 <find_volume+0x2d4>)
 8012c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c2c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d101      	bne.n	8012c38 <find_volume+0x3c>
 8012c34:	230c      	movs	r3, #12
 8012c36:	e35e      	b.n	80132f6 <find_volume+0x6fa>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c3c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012c3e:	79fb      	ldrb	r3, [r7, #7]
 8012c40:	f023 0301 	bic.w	r3, r3, #1
 8012c44:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d01a      	beq.n	8012c84 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8012c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c50:	785b      	ldrb	r3, [r3, #1]
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7fc ffde 	bl	800fc14 <disk_status>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012c5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012c62:	f003 0301 	and.w	r3, r3, #1
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d10c      	bne.n	8012c84 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012c6a:	79fb      	ldrb	r3, [r7, #7]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d007      	beq.n	8012c80 <find_volume+0x84>
 8012c70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012c74:	f003 0304 	and.w	r3, r3, #4
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d001      	beq.n	8012c80 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8012c7c:	230a      	movs	r3, #10
 8012c7e:	e33a      	b.n	80132f6 <find_volume+0x6fa>
			}
			return FR_OK;				/* The file system object is valid */
 8012c80:	2300      	movs	r3, #0
 8012c82:	e338      	b.n	80132f6 <find_volume+0x6fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c86:	2200      	movs	r2, #0
 8012c88:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c8c:	b2da      	uxtb	r2, r3
 8012c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c90:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c94:	785b      	ldrb	r3, [r3, #1]
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7fc ffd6 	bl	800fc48 <disk_initialize>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012ca2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012ca6:	f003 0301 	and.w	r3, r3, #1
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d001      	beq.n	8012cb2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012cae:	2303      	movs	r3, #3
 8012cb0:	e321      	b.n	80132f6 <find_volume+0x6fa>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012cb2:	79fb      	ldrb	r3, [r7, #7]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d007      	beq.n	8012cc8 <find_volume+0xcc>
 8012cb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012cbc:	f003 0304 	and.w	r3, r3, #4
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d001      	beq.n	8012cc8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8012cc4:	230a      	movs	r3, #10
 8012cc6:	e316      	b.n	80132f6 <find_volume+0x6fa>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cca:	7858      	ldrb	r0, [r3, #1]
 8012ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cce:	330c      	adds	r3, #12
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	2102      	movs	r1, #2
 8012cd4:	f7fd f81e 	bl	800fd14 <disk_ioctl>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d001      	beq.n	8012ce2 <find_volume+0xe6>
 8012cde:	2301      	movs	r3, #1
 8012ce0:	e309      	b.n	80132f6 <find_volume+0x6fa>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ce4:	899b      	ldrh	r3, [r3, #12]
 8012ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012cea:	d80d      	bhi.n	8012d08 <find_volume+0x10c>
 8012cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cee:	899b      	ldrh	r3, [r3, #12]
 8012cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012cf4:	d308      	bcc.n	8012d08 <find_volume+0x10c>
 8012cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cf8:	899b      	ldrh	r3, [r3, #12]
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cfe:	899b      	ldrh	r3, [r3, #12]
 8012d00:	3b01      	subs	r3, #1
 8012d02:	4013      	ands	r3, r2
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d001      	beq.n	8012d0c <find_volume+0x110>
 8012d08:	2301      	movs	r3, #1
 8012d0a:	e2f4      	b.n	80132f6 <find_volume+0x6fa>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012d10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012d14:	f7ff ff0e 	bl	8012b34 <check_fs>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d22:	2b02      	cmp	r3, #2
 8012d24:	d14b      	bne.n	8012dbe <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012d26:	2300      	movs	r3, #0
 8012d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d2a:	e01f      	b.n	8012d6c <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d2e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8012d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d34:	011b      	lsls	r3, r3, #4
 8012d36:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012d3a:	4413      	add	r3, r2
 8012d3c:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d40:	3304      	adds	r3, #4
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d006      	beq.n	8012d56 <find_volume+0x15a>
 8012d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4a:	3308      	adds	r3, #8
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fd f817 	bl	800fd80 <ld_dword>
 8012d52:	4602      	mov	r2, r0
 8012d54:	e000      	b.n	8012d58 <find_volume+0x15c>
 8012d56:	2200      	movs	r2, #0
 8012d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8012d60:	440b      	add	r3, r1
 8012d62:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d68:	3301      	adds	r3, #1
 8012d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d6e:	2b03      	cmp	r3, #3
 8012d70:	d9dc      	bls.n	8012d2c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012d72:	2300      	movs	r3, #0
 8012d74:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8012d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d002      	beq.n	8012d82 <find_volume+0x186>
 8012d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d7e:	3b01      	subs	r3, #1
 8012d80:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d84:	009b      	lsls	r3, r3, #2
 8012d86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012d8a:	4413      	add	r3, r2
 8012d8c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8012d90:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d005      	beq.n	8012da4 <find_volume+0x1a8>
 8012d98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d9a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012d9c:	f7ff feca 	bl	8012b34 <check_fs>
 8012da0:	4603      	mov	r3, r0
 8012da2:	e000      	b.n	8012da6 <find_volume+0x1aa>
 8012da4:	2303      	movs	r3, #3
 8012da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012daa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d905      	bls.n	8012dbe <find_volume+0x1c2>
 8012db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012db4:	3301      	adds	r3, #1
 8012db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8012db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dba:	2b03      	cmp	r3, #3
 8012dbc:	d9e1      	bls.n	8012d82 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012dbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012dc2:	2b04      	cmp	r3, #4
 8012dc4:	d101      	bne.n	8012dca <find_volume+0x1ce>
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	e295      	b.n	80132f6 <find_volume+0x6fa>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d901      	bls.n	8012dd6 <find_volume+0x1da>
 8012dd2:	230d      	movs	r3, #13
 8012dd4:	e28f      	b.n	80132f6 <find_volume+0x6fa>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8012dd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012dda:	2b01      	cmp	r3, #1
 8012ddc:	f040 8101 	bne.w	8012fe2 <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8012de0:	230b      	movs	r3, #11
 8012de2:	64bb      	str	r3, [r7, #72]	; 0x48
 8012de4:	e002      	b.n	8012dec <find_volume+0x1f0>
 8012de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012de8:	3301      	adds	r3, #1
 8012dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8012dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dee:	2b3f      	cmp	r3, #63	; 0x3f
 8012df0:	d806      	bhi.n	8012e00 <find_volume+0x204>
 8012df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012df6:	4413      	add	r3, r2
 8012df8:	333c      	adds	r3, #60	; 0x3c
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d0f2      	beq.n	8012de6 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8012e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e02:	2b3f      	cmp	r3, #63	; 0x3f
 8012e04:	d801      	bhi.n	8012e0a <find_volume+0x20e>
 8012e06:	230d      	movs	r3, #13
 8012e08:	e275      	b.n	80132f6 <find_volume+0x6fa>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8012e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e0c:	333c      	adds	r3, #60	; 0x3c
 8012e0e:	3368      	adds	r3, #104	; 0x68
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7fc ff9d 	bl	800fd50 <ld_word>
 8012e16:	4603      	mov	r3, r0
 8012e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e1c:	d001      	beq.n	8012e22 <find_volume+0x226>
 8012e1e:	230d      	movs	r3, #13
 8012e20:	e269      	b.n	80132f6 <find_volume+0x6fa>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8012e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e24:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8012e28:	461a      	mov	r2, r3
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	4093      	lsls	r3, r2
 8012e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e30:	8992      	ldrh	r2, [r2, #12]
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d001      	beq.n	8012e3a <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 8012e36:	230d      	movs	r3, #13
 8012e38:	e25d      	b.n	80132f6 <find_volume+0x6fa>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8012e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e3c:	333c      	adds	r3, #60	; 0x3c
 8012e3e:	3348      	adds	r3, #72	; 0x48
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7fc ffc0 	bl	800fdc6 <ld_qword>
 8012e46:	460a      	mov	r2, r1
 8012e48:	4601      	mov	r1, r0
 8012e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e4c:	469b      	mov	fp, r3
 8012e4e:	f04f 0c00 	mov.w	ip, #0
 8012e52:	eb1b 0301 	adds.w	r3, fp, r1
 8012e56:	eb4c 0402 	adc.w	r4, ip, r2
 8012e5a:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8012e5e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012e62:	2c01      	cmp	r4, #1
 8012e64:	bf08      	it	eq
 8012e66:	2b00      	cmpeq	r3, #0
 8012e68:	d301      	bcc.n	8012e6e <find_volume+0x272>
 8012e6a:	230d      	movs	r3, #13
 8012e6c:	e243      	b.n	80132f6 <find_volume+0x6fa>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8012e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e70:	333c      	adds	r3, #60	; 0x3c
 8012e72:	3354      	adds	r3, #84	; 0x54
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7fc ff83 	bl	800fd80 <ld_dword>
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e7e:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8012e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e82:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8012e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e88:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8012e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e8c:	789b      	ldrb	r3, [r3, #2]
 8012e8e:	2b01      	cmp	r3, #1
 8012e90:	d001      	beq.n	8012e96 <find_volume+0x29a>
 8012e92:	230d      	movs	r3, #13
 8012e94:	e22f      	b.n	80132f6 <find_volume+0x6fa>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8012e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e98:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	4093      	lsls	r3, r2
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ea6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8012ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eaa:	895b      	ldrh	r3, [r3, #10]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d101      	bne.n	8012eb4 <find_volume+0x2b8>
 8012eb0:	230d      	movs	r3, #13
 8012eb2:	e220      	b.n	80132f6 <find_volume+0x6fa>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8012eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eb6:	333c      	adds	r3, #60	; 0x3c
 8012eb8:	335c      	adds	r3, #92	; 0x5c
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7fc ff60 	bl	800fd80 <ld_dword>
 8012ec0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8012ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec4:	4a03      	ldr	r2, [pc, #12]	; (8012ed4 <find_volume+0x2d8>)
 8012ec6:	4293      	cmp	r3, r2
 8012ec8:	d906      	bls.n	8012ed8 <find_volume+0x2dc>
 8012eca:	230d      	movs	r3, #13
 8012ecc:	e213      	b.n	80132f6 <find_volume+0x6fa>
 8012ece:	bf00      	nop
 8012ed0:	24000284 	.word	0x24000284
 8012ed4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8012ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eda:	1c9a      	adds	r2, r3, #2
 8012edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ede:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8012ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ee4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8012ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ee8:	333c      	adds	r3, #60	; 0x3c
 8012eea:	3358      	adds	r3, #88	; 0x58
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fc ff47 	bl	800fd80 <ld_dword>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ef6:	441a      	add	r2, r3
 8012ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012efa:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8012efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012efe:	333c      	adds	r3, #60	; 0x3c
 8012f00:	3350      	adds	r3, #80	; 0x50
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7fc ff3c 	bl	800fd80 <ld_dword>
 8012f08:	4602      	mov	r2, r0
 8012f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f0c:	441a      	add	r2, r3
 8012f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f10:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8012f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f16:	4619      	mov	r1, r3
 8012f18:	f04f 0200 	mov.w	r2, #0
 8012f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f1e:	895b      	ldrh	r3, [r3, #10]
 8012f20:	4618      	mov	r0, r3
 8012f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f24:	fb03 f300 	mul.w	r3, r3, r0
 8012f28:	469b      	mov	fp, r3
 8012f2a:	f04f 0c00 	mov.w	ip, #0
 8012f2e:	eb1b 0301 	adds.w	r3, fp, r1
 8012f32:	eb4c 0402 	adc.w	r4, ip, r2
 8012f36:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012f3a:	42a2      	cmp	r2, r4
 8012f3c:	bf08      	it	eq
 8012f3e:	4299      	cmpeq	r1, r3
 8012f40:	d201      	bcs.n	8012f46 <find_volume+0x34a>
 8012f42:	230d      	movs	r3, #13
 8012f44:	e1d7      	b.n	80132f6 <find_volume+0x6fa>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8012f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f48:	333c      	adds	r3, #60	; 0x3c
 8012f4a:	3360      	adds	r3, #96	; 0x60
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7fc ff17 	bl	800fd80 <ld_dword>
 8012f52:	4602      	mov	r2, r0
 8012f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f56:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8012f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012f60:	f7fd fb88 	bl	8010674 <clust2sect>
 8012f64:	4603      	mov	r3, r0
 8012f66:	4619      	mov	r1, r3
 8012f68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012f6a:	f7fd fae5 	bl	8010538 <move_window>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d001      	beq.n	8012f78 <find_volume+0x37c>
 8012f74:	2301      	movs	r3, #1
 8012f76:	e1be      	b.n	80132f6 <find_volume+0x6fa>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8012f78:	2300      	movs	r3, #0
 8012f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f7c:	e015      	b.n	8012faa <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8012f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f82:	4413      	add	r3, r2
 8012f84:	333c      	adds	r3, #60	; 0x3c
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	2b81      	cmp	r3, #129	; 0x81
 8012f8a:	d10b      	bne.n	8012fa4 <find_volume+0x3a8>
 8012f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f8e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8012f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f94:	3314      	adds	r3, #20
 8012f96:	4413      	add	r3, r2
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7fc fef1 	bl	800fd80 <ld_dword>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	2b02      	cmp	r3, #2
 8012fa2:	d009      	beq.n	8012fb8 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8012fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fa6:	3320      	adds	r3, #32
 8012fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fac:	899b      	ldrh	r3, [r3, #12]
 8012fae:	461a      	mov	r2, r3
 8012fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fb2:	4293      	cmp	r3, r2
 8012fb4:	d3e3      	bcc.n	8012f7e <find_volume+0x382>
 8012fb6:	e000      	b.n	8012fba <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8012fb8:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8012fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fbc:	899b      	ldrh	r3, [r3, #12]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fc2:	4293      	cmp	r3, r2
 8012fc4:	d101      	bne.n	8012fca <find_volume+0x3ce>
 8012fc6:	230d      	movs	r3, #13
 8012fc8:	e195      	b.n	80132f6 <find_volume+0x6fa>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8012fd0:	61da      	str	r2, [r3, #28]
 8012fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fd4:	69da      	ldr	r2, [r3, #28]
 8012fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fd8:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8012fda:	2304      	movs	r3, #4
 8012fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012fe0:	e177      	b.n	80132d2 <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fe4:	333c      	adds	r3, #60	; 0x3c
 8012fe6:	330b      	adds	r3, #11
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7fc feb1 	bl	800fd50 <ld_word>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ff4:	899b      	ldrh	r3, [r3, #12]
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d001      	beq.n	8012ffe <find_volume+0x402>
 8012ffa:	230d      	movs	r3, #13
 8012ffc:	e17b      	b.n	80132f6 <find_volume+0x6fa>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013000:	333c      	adds	r3, #60	; 0x3c
 8013002:	3316      	adds	r3, #22
 8013004:	4618      	mov	r0, r3
 8013006:	f7fc fea3 	bl	800fd50 <ld_word>
 801300a:	4603      	mov	r3, r0
 801300c:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801300e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013010:	2b00      	cmp	r3, #0
 8013012:	d106      	bne.n	8013022 <find_volume+0x426>
 8013014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013016:	333c      	adds	r3, #60	; 0x3c
 8013018:	3324      	adds	r3, #36	; 0x24
 801301a:	4618      	mov	r0, r3
 801301c:	f7fc feb0 	bl	800fd80 <ld_dword>
 8013020:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 8013022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013026:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801302a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 801302e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013030:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013034:	789b      	ldrb	r3, [r3, #2]
 8013036:	2b01      	cmp	r3, #1
 8013038:	d005      	beq.n	8013046 <find_volume+0x44a>
 801303a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801303c:	789b      	ldrb	r3, [r3, #2]
 801303e:	2b02      	cmp	r3, #2
 8013040:	d001      	beq.n	8013046 <find_volume+0x44a>
 8013042:	230d      	movs	r3, #13
 8013044:	e157      	b.n	80132f6 <find_volume+0x6fa>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013048:	789b      	ldrb	r3, [r3, #2]
 801304a:	461a      	mov	r2, r3
 801304c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801304e:	fb02 f303 	mul.w	r3, r2, r3
 8013052:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013056:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801305a:	b29a      	uxth	r2, r3
 801305c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801305e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013062:	895b      	ldrh	r3, [r3, #10]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d008      	beq.n	801307a <find_volume+0x47e>
 8013068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801306a:	895b      	ldrh	r3, [r3, #10]
 801306c:	461a      	mov	r2, r3
 801306e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013070:	895b      	ldrh	r3, [r3, #10]
 8013072:	3b01      	subs	r3, #1
 8013074:	4013      	ands	r3, r2
 8013076:	2b00      	cmp	r3, #0
 8013078:	d001      	beq.n	801307e <find_volume+0x482>
 801307a:	230d      	movs	r3, #13
 801307c:	e13b      	b.n	80132f6 <find_volume+0x6fa>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801307e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013080:	333c      	adds	r3, #60	; 0x3c
 8013082:	3311      	adds	r3, #17
 8013084:	4618      	mov	r0, r3
 8013086:	f7fc fe63 	bl	800fd50 <ld_word>
 801308a:	4603      	mov	r3, r0
 801308c:	461a      	mov	r2, r3
 801308e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013090:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013094:	891b      	ldrh	r3, [r3, #8]
 8013096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013098:	8992      	ldrh	r2, [r2, #12]
 801309a:	0952      	lsrs	r2, r2, #5
 801309c:	b292      	uxth	r2, r2
 801309e:	fbb3 f1f2 	udiv	r1, r3, r2
 80130a2:	fb02 f201 	mul.w	r2, r2, r1
 80130a6:	1a9b      	subs	r3, r3, r2
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d001      	beq.n	80130b2 <find_volume+0x4b6>
 80130ae:	230d      	movs	r3, #13
 80130b0:	e121      	b.n	80132f6 <find_volume+0x6fa>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80130b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130b4:	333c      	adds	r3, #60	; 0x3c
 80130b6:	3313      	adds	r3, #19
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fc fe49 	bl	800fd50 <ld_word>
 80130be:	4603      	mov	r3, r0
 80130c0:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80130c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d106      	bne.n	80130d6 <find_volume+0x4da>
 80130c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130ca:	333c      	adds	r3, #60	; 0x3c
 80130cc:	3320      	adds	r3, #32
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7fc fe56 	bl	800fd80 <ld_dword>
 80130d4:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80130d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130d8:	333c      	adds	r3, #60	; 0x3c
 80130da:	330e      	adds	r3, #14
 80130dc:	4618      	mov	r0, r3
 80130de:	f7fc fe37 	bl	800fd50 <ld_word>
 80130e2:	4603      	mov	r3, r0
 80130e4:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80130e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d101      	bne.n	80130f0 <find_volume+0x4f4>
 80130ec:	230d      	movs	r3, #13
 80130ee:	e102      	b.n	80132f6 <find_volume+0x6fa>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80130f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80130f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130f4:	4413      	add	r3, r2
 80130f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130f8:	8911      	ldrh	r1, [r2, #8]
 80130fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130fc:	8992      	ldrh	r2, [r2, #12]
 80130fe:	0952      	lsrs	r2, r2, #5
 8013100:	b292      	uxth	r2, r2
 8013102:	fbb1 f2f2 	udiv	r2, r1, r2
 8013106:	b292      	uxth	r2, r2
 8013108:	4413      	add	r3, r2
 801310a:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801310c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013110:	429a      	cmp	r2, r3
 8013112:	d201      	bcs.n	8013118 <find_volume+0x51c>
 8013114:	230d      	movs	r3, #13
 8013116:	e0ee      	b.n	80132f6 <find_volume+0x6fa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311c:	1ad3      	subs	r3, r2, r3
 801311e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013120:	8952      	ldrh	r2, [r2, #10]
 8013122:	fbb3 f3f2 	udiv	r3, r3, r2
 8013126:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801312a:	2b00      	cmp	r3, #0
 801312c:	d101      	bne.n	8013132 <find_volume+0x536>
 801312e:	230d      	movs	r3, #13
 8013130:	e0e1      	b.n	80132f6 <find_volume+0x6fa>
		fmt = FS_FAT32;
 8013132:	2303      	movs	r3, #3
 8013134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801313e:	4293      	cmp	r3, r2
 8013140:	d802      	bhi.n	8013148 <find_volume+0x54c>
 8013142:	2302      	movs	r3, #2
 8013144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801314a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801314e:	4293      	cmp	r3, r2
 8013150:	d802      	bhi.n	8013158 <find_volume+0x55c>
 8013152:	2301      	movs	r3, #1
 8013154:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801315a:	1c9a      	adds	r2, r3, #2
 801315c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801315e:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8013160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013162:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013164:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013166:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013168:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801316a:	441a      	add	r2, r3
 801316c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801316e:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8013170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013174:	441a      	add	r2, r3
 8013176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013178:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 801317a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801317e:	2b03      	cmp	r3, #3
 8013180:	d11e      	bne.n	80131c0 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013184:	333c      	adds	r3, #60	; 0x3c
 8013186:	332a      	adds	r3, #42	; 0x2a
 8013188:	4618      	mov	r0, r3
 801318a:	f7fc fde1 	bl	800fd50 <ld_word>
 801318e:	4603      	mov	r3, r0
 8013190:	2b00      	cmp	r3, #0
 8013192:	d001      	beq.n	8013198 <find_volume+0x59c>
 8013194:	230d      	movs	r3, #13
 8013196:	e0ae      	b.n	80132f6 <find_volume+0x6fa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801319a:	891b      	ldrh	r3, [r3, #8]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d001      	beq.n	80131a4 <find_volume+0x5a8>
 80131a0:	230d      	movs	r3, #13
 80131a2:	e0a8      	b.n	80132f6 <find_volume+0x6fa>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80131a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131a6:	333c      	adds	r3, #60	; 0x3c
 80131a8:	332c      	adds	r3, #44	; 0x2c
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fc fde8 	bl	800fd80 <ld_dword>
 80131b0:	4602      	mov	r2, r0
 80131b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131b4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80131b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131b8:	6a1b      	ldr	r3, [r3, #32]
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80131be:	e01f      	b.n	8013200 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80131c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131c2:	891b      	ldrh	r3, [r3, #8]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d101      	bne.n	80131cc <find_volume+0x5d0>
 80131c8:	230d      	movs	r3, #13
 80131ca:	e094      	b.n	80132f6 <find_volume+0x6fa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80131cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131d2:	441a      	add	r2, r3
 80131d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131d6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80131d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131dc:	2b02      	cmp	r3, #2
 80131de:	d103      	bne.n	80131e8 <find_volume+0x5ec>
 80131e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131e2:	6a1b      	ldr	r3, [r3, #32]
 80131e4:	005b      	lsls	r3, r3, #1
 80131e6:	e00a      	b.n	80131fe <find_volume+0x602>
 80131e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ea:	6a1a      	ldr	r2, [r3, #32]
 80131ec:	4613      	mov	r3, r2
 80131ee:	005b      	lsls	r3, r3, #1
 80131f0:	4413      	add	r3, r2
 80131f2:	085a      	lsrs	r2, r3, #1
 80131f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131f6:	6a1b      	ldr	r3, [r3, #32]
 80131f8:	f003 0301 	and.w	r3, r3, #1
 80131fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80131fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013206:	899b      	ldrh	r3, [r3, #12]
 8013208:	4619      	mov	r1, r3
 801320a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801320c:	440b      	add	r3, r1
 801320e:	3b01      	subs	r3, #1
 8013210:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013212:	8989      	ldrh	r1, [r1, #12]
 8013214:	fbb3 f3f1 	udiv	r3, r3, r1
 8013218:	429a      	cmp	r2, r3
 801321a:	d201      	bcs.n	8013220 <find_volume+0x624>
 801321c:	230d      	movs	r3, #13
 801321e:	e06a      	b.n	80132f6 <find_volume+0x6fa>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013222:	f04f 32ff 	mov.w	r2, #4294967295
 8013226:	61da      	str	r2, [r3, #28]
 8013228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801322a:	69da      	ldr	r2, [r3, #28]
 801322c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801322e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8013230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013232:	2280      	movs	r2, #128	; 0x80
 8013234:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801323a:	2b03      	cmp	r3, #3
 801323c:	d149      	bne.n	80132d2 <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801323e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013240:	333c      	adds	r3, #60	; 0x3c
 8013242:	3330      	adds	r3, #48	; 0x30
 8013244:	4618      	mov	r0, r3
 8013246:	f7fc fd83 	bl	800fd50 <ld_word>
 801324a:	4603      	mov	r3, r0
 801324c:	2b01      	cmp	r3, #1
 801324e:	d140      	bne.n	80132d2 <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013252:	3301      	adds	r3, #1
 8013254:	4619      	mov	r1, r3
 8013256:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013258:	f7fd f96e 	bl	8010538 <move_window>
 801325c:	4603      	mov	r3, r0
 801325e:	2b00      	cmp	r3, #0
 8013260:	d137      	bne.n	80132d2 <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 8013262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013264:	2200      	movs	r2, #0
 8013266:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801326a:	333c      	adds	r3, #60	; 0x3c
 801326c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013270:	4618      	mov	r0, r3
 8013272:	f7fc fd6d 	bl	800fd50 <ld_word>
 8013276:	4603      	mov	r3, r0
 8013278:	461a      	mov	r2, r3
 801327a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801327e:	429a      	cmp	r2, r3
 8013280:	d127      	bne.n	80132d2 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013284:	333c      	adds	r3, #60	; 0x3c
 8013286:	4618      	mov	r0, r3
 8013288:	f7fc fd7a 	bl	800fd80 <ld_dword>
 801328c:	4602      	mov	r2, r0
 801328e:	4b1c      	ldr	r3, [pc, #112]	; (8013300 <find_volume+0x704>)
 8013290:	429a      	cmp	r2, r3
 8013292:	d11e      	bne.n	80132d2 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013296:	333c      	adds	r3, #60	; 0x3c
 8013298:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801329c:	4618      	mov	r0, r3
 801329e:	f7fc fd6f 	bl	800fd80 <ld_dword>
 80132a2:	4602      	mov	r2, r0
 80132a4:	4b17      	ldr	r3, [pc, #92]	; (8013304 <find_volume+0x708>)
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d113      	bne.n	80132d2 <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80132aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132ac:	333c      	adds	r3, #60	; 0x3c
 80132ae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7fc fd64 	bl	800fd80 <ld_dword>
 80132b8:	4602      	mov	r2, r0
 80132ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132bc:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80132be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132c0:	333c      	adds	r3, #60	; 0x3c
 80132c2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7fc fd5a 	bl	800fd80 <ld_dword>
 80132cc:	4602      	mov	r2, r0
 80132ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132d0:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80132d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132d4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80132d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80132da:	4b0b      	ldr	r3, [pc, #44]	; (8013308 <find_volume+0x70c>)
 80132dc:	881b      	ldrh	r3, [r3, #0]
 80132de:	3301      	adds	r3, #1
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	4b09      	ldr	r3, [pc, #36]	; (8013308 <find_volume+0x70c>)
 80132e4:	801a      	strh	r2, [r3, #0]
 80132e6:	4b08      	ldr	r3, [pc, #32]	; (8013308 <find_volume+0x70c>)
 80132e8:	881a      	ldrh	r2, [r3, #0]
 80132ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132ec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80132ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80132f0:	f7fd f8ba 	bl	8010468 <clear_lock>
#endif
	return FR_OK;
 80132f4:	2300      	movs	r3, #0
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3760      	adds	r7, #96	; 0x60
 80132fa:	46bd      	mov	sp, r7
 80132fc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8013300:	41615252 	.word	0x41615252
 8013304:	61417272 	.word	0x61417272
 8013308:	24000288 	.word	0x24000288

0801330c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b084      	sub	sp, #16
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013316:	2309      	movs	r3, #9
 8013318:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d01c      	beq.n	801335a <validate+0x4e>
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d018      	beq.n	801335a <validate+0x4e>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d013      	beq.n	801335a <validate+0x4e>
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	889a      	ldrh	r2, [r3, #4]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	88db      	ldrh	r3, [r3, #6]
 801333c:	429a      	cmp	r2, r3
 801333e:	d10c      	bne.n	801335a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	785b      	ldrb	r3, [r3, #1]
 8013346:	4618      	mov	r0, r3
 8013348:	f7fc fc64 	bl	800fc14 <disk_status>
 801334c:	4603      	mov	r3, r0
 801334e:	f003 0301 	and.w	r3, r3, #1
 8013352:	2b00      	cmp	r3, #0
 8013354:	d101      	bne.n	801335a <validate+0x4e>
			res = FR_OK;
 8013356:	2300      	movs	r3, #0
 8013358:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801335a:	7bfb      	ldrb	r3, [r7, #15]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d102      	bne.n	8013366 <validate+0x5a>
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	e000      	b.n	8013368 <validate+0x5c>
 8013366:	2300      	movs	r3, #0
 8013368:	683a      	ldr	r2, [r7, #0]
 801336a:	6013      	str	r3, [r2, #0]
	return res;
 801336c:	7bfb      	ldrb	r3, [r7, #15]
}
 801336e:	4618      	mov	r0, r3
 8013370:	3710      	adds	r7, #16
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}
	...

08013378 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b088      	sub	sp, #32
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	4613      	mov	r3, r2
 8013384:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801338a:	f107 0310 	add.w	r3, r7, #16
 801338e:	4618      	mov	r0, r3
 8013390:	f7ff fb8b 	bl	8012aaa <get_ldnumber>
 8013394:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013396:	69fb      	ldr	r3, [r7, #28]
 8013398:	2b00      	cmp	r3, #0
 801339a:	da01      	bge.n	80133a0 <f_mount+0x28>
 801339c:	230b      	movs	r3, #11
 801339e:	e02b      	b.n	80133f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80133a0:	4a17      	ldr	r2, [pc, #92]	; (8013400 <f_mount+0x88>)
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80133aa:	69bb      	ldr	r3, [r7, #24]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d005      	beq.n	80133bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80133b0:	69b8      	ldr	r0, [r7, #24]
 80133b2:	f7fd f859 	bl	8010468 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80133b6:	69bb      	ldr	r3, [r7, #24]
 80133b8:	2200      	movs	r2, #0
 80133ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d002      	beq.n	80133c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2200      	movs	r2, #0
 80133c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80133c8:	68fa      	ldr	r2, [r7, #12]
 80133ca:	490d      	ldr	r1, [pc, #52]	; (8013400 <f_mount+0x88>)
 80133cc:	69fb      	ldr	r3, [r7, #28]
 80133ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d002      	beq.n	80133de <f_mount+0x66>
 80133d8:	79fb      	ldrb	r3, [r7, #7]
 80133da:	2b01      	cmp	r3, #1
 80133dc:	d001      	beq.n	80133e2 <f_mount+0x6a>
 80133de:	2300      	movs	r3, #0
 80133e0:	e00a      	b.n	80133f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80133e2:	f107 010c 	add.w	r1, r7, #12
 80133e6:	f107 0308 	add.w	r3, r7, #8
 80133ea:	2200      	movs	r2, #0
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7ff fc05 	bl	8012bfc <find_volume>
 80133f2:	4603      	mov	r3, r0
 80133f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80133f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3720      	adds	r7, #32
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}
 8013400:	24000284 	.word	0x24000284

08013404 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013404:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8013408:	b0a4      	sub	sp, #144	; 0x90
 801340a:	af00      	add	r7, sp, #0
 801340c:	60f8      	str	r0, [r7, #12]
 801340e:	60b9      	str	r1, [r7, #8]
 8013410:	4613      	mov	r3, r2
 8013412:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d101      	bne.n	801341e <f_open+0x1a>
 801341a:	2309      	movs	r3, #9
 801341c:	e2bd      	b.n	801399a <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801341e:	79fb      	ldrb	r3, [r7, #7]
 8013420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013424:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013426:	79fa      	ldrb	r2, [r7, #7]
 8013428:	f107 0114 	add.w	r1, r7, #20
 801342c:	f107 0308 	add.w	r3, r7, #8
 8013430:	4618      	mov	r0, r3
 8013432:	f7ff fbe3 	bl	8012bfc <find_volume>
 8013436:	4603      	mov	r3, r0
 8013438:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 801343c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013440:	2b00      	cmp	r3, #0
 8013442:	f040 82a1 	bne.w	8013988 <f_open+0x584>
		dj.obj.fs = fs;
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 801344a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 801344e:	f001 fb2f 	bl	8014ab0 <ff_memalloc>
 8013452:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013456:	2b00      	cmp	r3, #0
 8013458:	d101      	bne.n	801345e <f_open+0x5a>
 801345a:	2311      	movs	r3, #17
 801345c:	e29d      	b.n	801399a <f_open+0x596>
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013462:	611a      	str	r2, [r3, #16]
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013468:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801346c:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 801346e:	68ba      	ldr	r2, [r7, #8]
 8013470:	f107 0318 	add.w	r3, r7, #24
 8013474:	4611      	mov	r1, r2
 8013476:	4618      	mov	r0, r3
 8013478:	f7ff fa6a 	bl	8012950 <follow_path>
 801347c:	4603      	mov	r3, r0
 801347e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013482:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013486:	2b00      	cmp	r3, #0
 8013488:	d11a      	bne.n	80134c0 <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801348a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801348e:	b25b      	sxtb	r3, r3
 8013490:	2b00      	cmp	r3, #0
 8013492:	da03      	bge.n	801349c <f_open+0x98>
				res = FR_INVALID_NAME;
 8013494:	2306      	movs	r3, #6
 8013496:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 801349a:	e011      	b.n	80134c0 <f_open+0xbc>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801349c:	79fb      	ldrb	r3, [r7, #7]
 801349e:	f023 0301 	bic.w	r3, r3, #1
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	bf14      	ite	ne
 80134a6:	2301      	movne	r3, #1
 80134a8:	2300      	moveq	r3, #0
 80134aa:	b2db      	uxtb	r3, r3
 80134ac:	461a      	mov	r2, r3
 80134ae:	f107 0318 	add.w	r3, r7, #24
 80134b2:	4611      	mov	r1, r2
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fc fe8f 	bl	80101d8 <chk_lock>
 80134ba:	4603      	mov	r3, r0
 80134bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80134c0:	79fb      	ldrb	r3, [r7, #7]
 80134c2:	f003 031c 	and.w	r3, r3, #28
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	f000 8109 	beq.w	80136de <f_open+0x2da>
			if (res != FR_OK) {					/* No file, create new */
 80134cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d017      	beq.n	8013504 <f_open+0x100>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80134d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80134d8:	2b04      	cmp	r3, #4
 80134da:	d10e      	bne.n	80134fa <f_open+0xf6>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80134dc:	f7fc fed8 	bl	8010290 <enq_lock>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d006      	beq.n	80134f4 <f_open+0xf0>
 80134e6:	f107 0318 	add.w	r3, r7, #24
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7fe fec8 	bl	8012280 <dir_register>
 80134f0:	4603      	mov	r3, r0
 80134f2:	e000      	b.n	80134f6 <f_open+0xf2>
 80134f4:	2312      	movs	r3, #18
 80134f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80134fa:	79fb      	ldrb	r3, [r7, #7]
 80134fc:	f043 0308 	orr.w	r3, r3, #8
 8013500:	71fb      	strb	r3, [r7, #7]
 8013502:	e010      	b.n	8013526 <f_open+0x122>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013504:	7fbb      	ldrb	r3, [r7, #30]
 8013506:	f003 0311 	and.w	r3, r3, #17
 801350a:	2b00      	cmp	r3, #0
 801350c:	d003      	beq.n	8013516 <f_open+0x112>
					res = FR_DENIED;
 801350e:	2307      	movs	r3, #7
 8013510:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8013514:	e007      	b.n	8013526 <f_open+0x122>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013516:	79fb      	ldrb	r3, [r7, #7]
 8013518:	f003 0304 	and.w	r3, r3, #4
 801351c:	2b00      	cmp	r3, #0
 801351e:	d002      	beq.n	8013526 <f_open+0x122>
 8013520:	2308      	movs	r3, #8
 8013522:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013526:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801352a:	2b00      	cmp	r3, #0
 801352c:	f040 80f1 	bne.w	8013712 <f_open+0x30e>
 8013530:	79fb      	ldrb	r3, [r7, #7]
 8013532:	f003 0308 	and.w	r3, r3, #8
 8013536:	2b00      	cmp	r3, #0
 8013538:	f000 80eb 	beq.w	8013712 <f_open+0x30e>
				dw = GET_FATTIME();
 801353c:	f7f9 feea 	bl	800d314 <get_fattime>
 8013540:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	781b      	ldrb	r3, [r3, #0]
 8013546:	2b04      	cmp	r3, #4
 8013548:	f040 8082 	bne.w	8013650 <f_open+0x24c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 801354c:	697a      	ldr	r2, [r7, #20]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	695b      	ldr	r3, [r3, #20]
 8013556:	3334      	adds	r3, #52	; 0x34
 8013558:	4618      	mov	r0, r3
 801355a:	f7fc fc11 	bl	800fd80 <ld_dword>
 801355e:	4602      	mov	r2, r0
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	695b      	ldr	r3, [r3, #20]
 8013568:	3338      	adds	r3, #56	; 0x38
 801356a:	4618      	mov	r0, r3
 801356c:	f7fc fc2b 	bl	800fdc6 <ld_qword>
 8013570:	4603      	mov	r3, r0
 8013572:	460c      	mov	r4, r1
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	695b      	ldr	r3, [r3, #20]
 801357e:	3321      	adds	r3, #33	; 0x21
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	f003 0302 	and.w	r3, r3, #2
 8013586:	b2da      	uxtb	r2, r3
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	2200      	movs	r2, #0
 8013590:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	695b      	ldr	r3, [r3, #20]
 8013596:	3308      	adds	r3, #8
 8013598:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801359a:	4618      	mov	r0, r3
 801359c:	f7fc fceb 	bl	800ff76 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	695b      	ldr	r3, [r3, #20]
 80135a4:	3314      	adds	r3, #20
 80135a6:	2200      	movs	r2, #0
 80135a8:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	695b      	ldr	r3, [r3, #20]
 80135ae:	330c      	adds	r3, #12
 80135b0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7fc fcdf 	bl	800ff76 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80135b8:	697b      	ldr	r3, [r7, #20]
 80135ba:	695b      	ldr	r3, [r3, #20]
 80135bc:	3315      	adds	r3, #21
 80135be:	2200      	movs	r2, #0
 80135c0:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	695b      	ldr	r3, [r3, #20]
 80135c6:	3304      	adds	r3, #4
 80135c8:	2220      	movs	r2, #32
 80135ca:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	695b      	ldr	r3, [r3, #20]
 80135d0:	3334      	adds	r3, #52	; 0x34
 80135d2:	2100      	movs	r1, #0
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7fc fcce 	bl	800ff76 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	695b      	ldr	r3, [r3, #20]
 80135de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80135e2:	f04f 0200 	mov.w	r2, #0
 80135e6:	f04f 0300 	mov.w	r3, #0
 80135ea:	4608      	mov	r0, r1
 80135ec:	f7fc fcef 	bl	800ffce <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	695b      	ldr	r3, [r3, #20]
 80135f4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80135f8:	f04f 0200 	mov.w	r2, #0
 80135fc:	f04f 0300 	mov.w	r3, #0
 8013600:	4608      	mov	r0, r1
 8013602:	f7fc fce4 	bl	800ffce <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	695b      	ldr	r3, [r3, #20]
 801360a:	3321      	adds	r3, #33	; 0x21
 801360c:	2201      	movs	r2, #1
 801360e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8013610:	f107 0318 	add.w	r3, r7, #24
 8013614:	4618      	mov	r0, r3
 8013616:	f7fe fb80 	bl	8011d1a <store_xdir>
 801361a:	4603      	mov	r3, r0
 801361c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8013620:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013624:	2b00      	cmp	r3, #0
 8013626:	d174      	bne.n	8013712 <f_open+0x30e>
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	689b      	ldr	r3, [r3, #8]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d070      	beq.n	8013712 <f_open+0x30e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8013630:	68f8      	ldr	r0, [r7, #12]
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	689b      	ldr	r3, [r3, #8]
 8013636:	2200      	movs	r2, #0
 8013638:	4619      	mov	r1, r3
 801363a:	f7fd fc0d 	bl	8010e58 <remove_chain>
 801363e:	4603      	mov	r3, r0
 8013640:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	689a      	ldr	r2, [r3, #8]
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	3a01      	subs	r2, #1
 801364c:	619a      	str	r2, [r3, #24]
 801364e:	e060      	b.n	8013712 <f_open+0x30e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013652:	330e      	adds	r3, #14
 8013654:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013656:	4618      	mov	r0, r3
 8013658:	f7fc fc8d 	bl	800ff76 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801365c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801365e:	3316      	adds	r3, #22
 8013660:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013662:	4618      	mov	r0, r3
 8013664:	f7fc fc87 	bl	800ff76 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801366a:	330b      	adds	r3, #11
 801366c:	2220      	movs	r2, #32
 801366e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013674:	4611      	mov	r1, r2
 8013676:	4618      	mov	r0, r3
 8013678:	f7fd ffc0 	bl	80115fc <ld_clust>
 801367c:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013682:	2200      	movs	r2, #0
 8013684:	4618      	mov	r0, r3
 8013686:	f7fd ffd8 	bl	801163a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801368a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801368c:	331c      	adds	r3, #28
 801368e:	2100      	movs	r1, #0
 8013690:	4618      	mov	r0, r3
 8013692:	f7fc fc70 	bl	800ff76 <st_dword>
					fs->wflag = 1;
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	2201      	movs	r2, #1
 801369a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801369c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d037      	beq.n	8013712 <f_open+0x30e>
						dw = fs->winsect;
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136a6:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 80136a8:	f107 0318 	add.w	r3, r7, #24
 80136ac:	2200      	movs	r2, #0
 80136ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7fd fbd1 	bl	8010e58 <remove_chain>
 80136b6:	4603      	mov	r3, r0
 80136b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 80136bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d126      	bne.n	8013712 <f_open+0x30e>
							res = move_window(fs, dw);
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7fc ff35 	bl	8010538 <move_window>
 80136ce:	4603      	mov	r3, r0
 80136d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80136d8:	3a01      	subs	r2, #1
 80136da:	619a      	str	r2, [r3, #24]
 80136dc:	e019      	b.n	8013712 <f_open+0x30e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80136de:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d115      	bne.n	8013712 <f_open+0x30e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80136e6:	7fbb      	ldrb	r3, [r7, #30]
 80136e8:	f003 0310 	and.w	r3, r3, #16
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d003      	beq.n	80136f8 <f_open+0x2f4>
					res = FR_NO_FILE;
 80136f0:	2304      	movs	r3, #4
 80136f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80136f6:	e00c      	b.n	8013712 <f_open+0x30e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80136f8:	79fb      	ldrb	r3, [r7, #7]
 80136fa:	f003 0302 	and.w	r3, r3, #2
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d007      	beq.n	8013712 <f_open+0x30e>
 8013702:	7fbb      	ldrb	r3, [r7, #30]
 8013704:	f003 0301 	and.w	r3, r3, #1
 8013708:	2b00      	cmp	r3, #0
 801370a:	d002      	beq.n	8013712 <f_open+0x30e>
						res = FR_DENIED;
 801370c:	2307      	movs	r3, #7
 801370e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013712:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013716:	2b00      	cmp	r3, #0
 8013718:	d128      	bne.n	801376c <f_open+0x368>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801371a:	79fb      	ldrb	r3, [r7, #7]
 801371c:	f003 0308 	and.w	r3, r3, #8
 8013720:	2b00      	cmp	r3, #0
 8013722:	d003      	beq.n	801372c <f_open+0x328>
				mode |= FA_MODIFIED;
 8013724:	79fb      	ldrb	r3, [r7, #7]
 8013726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801372a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8013734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801373a:	79fb      	ldrb	r3, [r7, #7]
 801373c:	f023 0301 	bic.w	r3, r3, #1
 8013740:	2b00      	cmp	r3, #0
 8013742:	bf14      	ite	ne
 8013744:	2301      	movne	r3, #1
 8013746:	2300      	moveq	r3, #0
 8013748:	b2db      	uxtb	r3, r3
 801374a:	461a      	mov	r2, r3
 801374c:	f107 0318 	add.w	r3, r7, #24
 8013750:	4611      	mov	r1, r2
 8013752:	4618      	mov	r0, r3
 8013754:	f7fc fdbe 	bl	80102d4 <inc_lock>
 8013758:	4602      	mov	r2, r0
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013762:	2b00      	cmp	r3, #0
 8013764:	d102      	bne.n	801376c <f_open+0x368>
 8013766:	2302      	movs	r3, #2
 8013768:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801376c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013770:	2b00      	cmp	r3, #0
 8013772:	f040 8106 	bne.w	8013982 <f_open+0x57e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	781b      	ldrb	r3, [r3, #0]
 801377a:	2b04      	cmp	r3, #4
 801377c:	d12b      	bne.n	80137d6 <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 801377e:	6a3a      	ldr	r2, [r7, #32]
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8013784:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8013788:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801378c:	7ffa      	ldrb	r2, [r7, #31]
 801378e:	431a      	orrs	r2, r3
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8013794:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	695b      	ldr	r3, [r3, #20]
 801379e:	3334      	adds	r3, #52	; 0x34
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7fc faed 	bl	800fd80 <ld_dword>
 80137a6:	4602      	mov	r2, r0
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	695b      	ldr	r3, [r3, #20]
 80137b0:	3338      	adds	r3, #56	; 0x38
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fc fb07 	bl	800fdc6 <ld_qword>
 80137b8:	4603      	mov	r3, r0
 80137ba:	460c      	mov	r4, r1
 80137bc:	68fa      	ldr	r2, [r7, #12]
 80137be:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	695b      	ldr	r3, [r3, #20]
 80137c6:	3321      	adds	r3, #33	; 0x21
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	f003 0302 	and.w	r3, r3, #2
 80137ce:	b2da      	uxtb	r2, r3
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	71da      	strb	r2, [r3, #7]
 80137d4:	e013      	b.n	80137fe <f_open+0x3fa>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80137da:	4611      	mov	r1, r2
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fd ff0d 	bl	80115fc <ld_clust>
 80137e2:	4602      	mov	r2, r0
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80137e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137ea:	331c      	adds	r3, #28
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7fc fac7 	bl	800fd80 <ld_dword>
 80137f2:	4603      	mov	r3, r0
 80137f4:	f04f 0400 	mov.w	r4, #0
 80137f8:	68fa      	ldr	r2, [r7, #12]
 80137fa:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	2200      	movs	r2, #0
 8013802:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013804:	697a      	ldr	r2, [r7, #20]
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801380a:	697b      	ldr	r3, [r7, #20]
 801380c:	88da      	ldrh	r2, [r3, #6]
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	79fa      	ldrb	r2, [r7, #7]
 8013816:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	2200      	movs	r2, #0
 801381e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	2200      	movs	r2, #0
 8013826:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013828:	68fa      	ldr	r2, [r7, #12]
 801382a:	f04f 0300 	mov.w	r3, #0
 801382e:	f04f 0400 	mov.w	r4, #0
 8013832:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	3354      	adds	r3, #84	; 0x54
 801383a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801383e:	2100      	movs	r1, #0
 8013840:	4618      	mov	r0, r3
 8013842:	f7fc fc6c 	bl	801011e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013846:	79fb      	ldrb	r3, [r7, #7]
 8013848:	f003 0320 	and.w	r3, r3, #32
 801384c:	2b00      	cmp	r3, #0
 801384e:	f000 8098 	beq.w	8013982 <f_open+0x57e>
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013858:	4323      	orrs	r3, r4
 801385a:	f000 8092 	beq.w	8013982 <f_open+0x57e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013864:	68fa      	ldr	r2, [r7, #12]
 8013866:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	895b      	ldrh	r3, [r3, #10]
 801386e:	461a      	mov	r2, r3
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	899b      	ldrh	r3, [r3, #12]
 8013874:	fb03 f302 	mul.w	r3, r3, r2
 8013878:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	689b      	ldr	r3, [r3, #8]
 801387e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013888:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 801388c:	e024      	b.n	80138d8 <f_open+0x4d4>
					clst = get_fat(&fp->obj, clst);
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8013894:	4618      	mov	r0, r3
 8013896:	f7fc ff0d 	bl	80106b4 <get_fat>
 801389a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 801389e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80138a2:	2b01      	cmp	r3, #1
 80138a4:	d802      	bhi.n	80138ac <f_open+0x4a8>
 80138a6:	2302      	movs	r3, #2
 80138a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80138ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80138b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138b4:	d102      	bne.n	80138bc <f_open+0x4b8>
 80138b6:	2301      	movs	r3, #1
 80138b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80138bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80138be:	469b      	mov	fp, r3
 80138c0:	f04f 0c00 	mov.w	ip, #0
 80138c4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80138c8:	460b      	mov	r3, r1
 80138ca:	4614      	mov	r4, r2
 80138cc:	ebb3 030b 	subs.w	r3, r3, fp
 80138d0:	eb64 040c 	sbc.w	r4, r4, ip
 80138d4:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 80138d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d109      	bne.n	80138f4 <f_open+0x4f0>
 80138e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80138e2:	4619      	mov	r1, r3
 80138e4:	f04f 0200 	mov.w	r2, #0
 80138e8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80138ec:	42a2      	cmp	r2, r4
 80138ee:	bf08      	it	eq
 80138f0:	4299      	cmpeq	r1, r3
 80138f2:	d3cc      	bcc.n	801388e <f_open+0x48a>
				}
				fp->clust = clst;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80138fa:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80138fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013900:	2b00      	cmp	r3, #0
 8013902:	d13e      	bne.n	8013982 <f_open+0x57e>
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	899b      	ldrh	r3, [r3, #12]
 8013908:	b29b      	uxth	r3, r3
 801390a:	f04f 0400 	mov.w	r4, #0
 801390e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8013912:	461a      	mov	r2, r3
 8013914:	4623      	mov	r3, r4
 8013916:	f7ec fcdf 	bl	80002d8 <__aeabi_uldivmod>
 801391a:	461c      	mov	r4, r3
 801391c:	4613      	mov	r3, r2
 801391e:	4323      	orrs	r3, r4
 8013920:	d02f      	beq.n	8013982 <f_open+0x57e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8013928:	4618      	mov	r0, r3
 801392a:	f7fc fea3 	bl	8010674 <clust2sect>
 801392e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8013930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013932:	2b00      	cmp	r3, #0
 8013934:	d103      	bne.n	801393e <f_open+0x53a>
						res = FR_INT_ERR;
 8013936:	2302      	movs	r3, #2
 8013938:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 801393c:	e021      	b.n	8013982 <f_open+0x57e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	899b      	ldrh	r3, [r3, #12]
 8013942:	b29b      	uxth	r3, r3
 8013944:	f04f 0400 	mov.w	r4, #0
 8013948:	461a      	mov	r2, r3
 801394a:	4623      	mov	r3, r4
 801394c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8013950:	f7ec fcc2 	bl	80002d8 <__aeabi_uldivmod>
 8013954:	4603      	mov	r3, r0
 8013956:	460c      	mov	r4, r1
 8013958:	461a      	mov	r2, r3
 801395a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801395c:	441a      	add	r2, r3
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	7858      	ldrb	r0, [r3, #1]
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013970:	2301      	movs	r3, #1
 8013972:	f7fc f98f 	bl	800fc94 <disk_read>
 8013976:	4603      	mov	r3, r0
 8013978:	2b00      	cmp	r3, #0
 801397a:	d002      	beq.n	8013982 <f_open+0x57e>
 801397c:	2301      	movs	r3, #1
 801397e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 8013982:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013984:	f001 f8a0 	bl	8014ac8 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013988:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801398c:	2b00      	cmp	r3, #0
 801398e:	d002      	beq.n	8013996 <f_open+0x592>
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	2200      	movs	r2, #0
 8013994:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013996:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 801399a:	4618      	mov	r0, r3
 801399c:	3790      	adds	r7, #144	; 0x90
 801399e:	46bd      	mov	sp, r7
 80139a0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080139a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80139a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139a6:	b091      	sub	sp, #68	; 0x44
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	60f8      	str	r0, [r7, #12]
 80139ac:	60b9      	str	r1, [r7, #8]
 80139ae:	607a      	str	r2, [r7, #4]
 80139b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	2200      	movs	r2, #0
 80139ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	f107 0214 	add.w	r2, r7, #20
 80139c2:	4611      	mov	r1, r2
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7ff fca1 	bl	801330c <validate>
 80139ca:	4603      	mov	r3, r0
 80139cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80139d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d108      	bne.n	80139ea <f_read+0x46>
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80139e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d002      	beq.n	80139f0 <f_read+0x4c>
 80139ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139ee:	e16a      	b.n	8013cc6 <f_read+0x322>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139f6:	f003 0301 	and.w	r3, r3, #1
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d101      	bne.n	8013a02 <f_read+0x5e>
 80139fe:	2307      	movs	r3, #7
 8013a00:	e161      	b.n	8013cc6 <f_read+0x322>
	remain = fp->obj.objsize - fp->fptr;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 8013a0e:	460b      	mov	r3, r1
 8013a10:	4614      	mov	r4, r2
 8013a12:	1b5b      	subs	r3, r3, r5
 8013a14:	eb64 0406 	sbc.w	r4, r4, r6
 8013a18:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f04f 0400 	mov.w	r4, #0
 8013a22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013a26:	42a2      	cmp	r2, r4
 8013a28:	bf08      	it	eq
 8013a2a:	4299      	cmpeq	r1, r3
 8013a2c:	f080 8146 	bcs.w	8013cbc <f_read+0x318>
 8013a30:	6a3b      	ldr	r3, [r7, #32]
 8013a32:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013a34:	e142      	b.n	8013cbc <f_read+0x318>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	899b      	ldrh	r3, [r3, #12]
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	f04f 0400 	mov.w	r4, #0
 8013a46:	461a      	mov	r2, r3
 8013a48:	4623      	mov	r3, r4
 8013a4a:	f7ec fc45 	bl	80002d8 <__aeabi_uldivmod>
 8013a4e:	461c      	mov	r4, r3
 8013a50:	4613      	mov	r3, r2
 8013a52:	4323      	orrs	r3, r4
 8013a54:	f040 80eb 	bne.w	8013c2e <f_read+0x28a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	899b      	ldrh	r3, [r3, #12]
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	f04f 0400 	mov.w	r4, #0
 8013a68:	461a      	mov	r2, r3
 8013a6a:	4623      	mov	r3, r4
 8013a6c:	f7ec fc34 	bl	80002d8 <__aeabi_uldivmod>
 8013a70:	4603      	mov	r3, r0
 8013a72:	460c      	mov	r4, r1
 8013a74:	461a      	mov	r2, r3
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	895b      	ldrh	r3, [r3, #10]
 8013a7a:	3b01      	subs	r3, #1
 8013a7c:	4013      	ands	r3, r2
 8013a7e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d134      	bne.n	8013af0 <f_read+0x14c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013a8c:	4323      	orrs	r3, r4
 8013a8e:	d103      	bne.n	8013a98 <f_read+0xf4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	689b      	ldr	r3, [r3, #8]
 8013a94:	63bb      	str	r3, [r7, #56]	; 0x38
 8013a96:	e015      	b.n	8013ac4 <f_read+0x120>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d009      	beq.n	8013ab4 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	4623      	mov	r3, r4
 8013aaa:	68f8      	ldr	r0, [r7, #12]
 8013aac:	f7fd fb89 	bl	80111c2 <clmt_clust>
 8013ab0:	63b8      	str	r0, [r7, #56]	; 0x38
 8013ab2:	e007      	b.n	8013ac4 <f_read+0x120>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013aba:	4619      	mov	r1, r3
 8013abc:	4610      	mov	r0, r2
 8013abe:	f7fc fdf9 	bl	80106b4 <get_fat>
 8013ac2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac6:	2b01      	cmp	r3, #1
 8013ac8:	d805      	bhi.n	8013ad6 <f_read+0x132>
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2202      	movs	r2, #2
 8013ace:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013ad2:	2302      	movs	r3, #2
 8013ad4:	e0f7      	b.n	8013cc6 <f_read+0x322>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013adc:	d105      	bne.n	8013aea <f_read+0x146>
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	2201      	movs	r2, #1
 8013ae2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	e0ed      	b.n	8013cc6 <f_read+0x322>
				fp->clust = clst;				/* Update current cluster */
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013aee:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013af0:	697a      	ldr	r2, [r7, #20]
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013af6:	4619      	mov	r1, r3
 8013af8:	4610      	mov	r0, r2
 8013afa:	f7fc fdbb 	bl	8010674 <clust2sect>
 8013afe:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013b00:	69bb      	ldr	r3, [r7, #24]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d105      	bne.n	8013b12 <f_read+0x16e>
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	2202      	movs	r2, #2
 8013b0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013b0e:	2302      	movs	r3, #2
 8013b10:	e0d9      	b.n	8013cc6 <f_read+0x322>
			sect += csect;
 8013b12:	69ba      	ldr	r2, [r7, #24]
 8013b14:	69fb      	ldr	r3, [r7, #28]
 8013b16:	4413      	add	r3, r2
 8013b18:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	899b      	ldrh	r3, [r3, #12]
 8013b1e:	461a      	mov	r2, r3
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b26:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d043      	beq.n	8013bb6 <f_read+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013b2e:	69fa      	ldr	r2, [r7, #28]
 8013b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b32:	4413      	add	r3, r2
 8013b34:	697a      	ldr	r2, [r7, #20]
 8013b36:	8952      	ldrh	r2, [r2, #10]
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d905      	bls.n	8013b48 <f_read+0x1a4>
					cc = fs->csize - csect;
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	895b      	ldrh	r3, [r3, #10]
 8013b40:	461a      	mov	r2, r3
 8013b42:	69fb      	ldr	r3, [r7, #28]
 8013b44:	1ad3      	subs	r3, r2, r3
 8013b46:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	7858      	ldrb	r0, [r3, #1]
 8013b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4e:	69ba      	ldr	r2, [r7, #24]
 8013b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b52:	f7fc f89f 	bl	800fc94 <disk_read>
 8013b56:	4603      	mov	r3, r0
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d005      	beq.n	8013b68 <f_read+0x1c4>
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2201      	movs	r2, #1
 8013b60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013b64:	2301      	movs	r3, #1
 8013b66:	e0ae      	b.n	8013cc6 <f_read+0x322>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b6e:	b25b      	sxtb	r3, r3
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	da18      	bge.n	8013ba6 <f_read+0x202>
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013b78:	69bb      	ldr	r3, [r7, #24]
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d911      	bls.n	8013ba6 <f_read+0x202>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	1ad3      	subs	r3, r2, r3
 8013b8a:	697a      	ldr	r2, [r7, #20]
 8013b8c:	8992      	ldrh	r2, [r2, #12]
 8013b8e:	fb02 f303 	mul.w	r3, r2, r3
 8013b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b94:	18d0      	adds	r0, r2, r3
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	899b      	ldrh	r3, [r3, #12]
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	f7fc fa9b 	bl	80100dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	899b      	ldrh	r3, [r3, #12]
 8013baa:	461a      	mov	r2, r3
 8013bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bae:	fb02 f303 	mul.w	r3, r2, r3
 8013bb2:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 8013bb4:	e067      	b.n	8013c86 <f_read+0x2e2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bba:	69ba      	ldr	r2, [r7, #24]
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d033      	beq.n	8013c28 <f_read+0x284>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013bc6:	b25b      	sxtb	r3, r3
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	da1b      	bge.n	8013c04 <f_read+0x260>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	7858      	ldrb	r0, [r3, #1]
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013bda:	2301      	movs	r3, #1
 8013bdc:	f7fc f87a 	bl	800fcd4 <disk_write>
 8013be0:	4603      	mov	r3, r0
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d005      	beq.n	8013bf2 <f_read+0x24e>
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	2201      	movs	r2, #1
 8013bea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013bee:	2301      	movs	r3, #1
 8013bf0:	e069      	b.n	8013cc6 <f_read+0x322>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bfc:	b2da      	uxtb	r2, r3
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	7858      	ldrb	r0, [r3, #1]
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013c0e:	2301      	movs	r3, #1
 8013c10:	69ba      	ldr	r2, [r7, #24]
 8013c12:	f7fc f83f 	bl	800fc94 <disk_read>
 8013c16:	4603      	mov	r3, r0
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d005      	beq.n	8013c28 <f_read+0x284>
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	2201      	movs	r2, #1
 8013c20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013c24:	2301      	movs	r3, #1
 8013c26:	e04e      	b.n	8013cc6 <f_read+0x322>
			}
#endif
			fp->sect = sect;
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	69ba      	ldr	r2, [r7, #24]
 8013c2c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	899b      	ldrh	r3, [r3, #12]
 8013c32:	4618      	mov	r0, r3
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013c3a:	697a      	ldr	r2, [r7, #20]
 8013c3c:	8992      	ldrh	r2, [r2, #12]
 8013c3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c42:	fb02 f201 	mul.w	r2, r2, r1
 8013c46:	1a9b      	subs	r3, r3, r2
 8013c48:	1ac3      	subs	r3, r0, r3
 8013c4a:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	429a      	cmp	r2, r3
 8013c52:	d901      	bls.n	8013c58 <f_read+0x2b4>
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	899b      	ldrh	r3, [r3, #12]
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	f04f 0400 	mov.w	r4, #0
 8013c6e:	461a      	mov	r2, r3
 8013c70:	4623      	mov	r3, r4
 8013c72:	f7ec fb31 	bl	80002d8 <__aeabi_uldivmod>
 8013c76:	461c      	mov	r4, r3
 8013c78:	4613      	mov	r3, r2
 8013c7a:	442b      	add	r3, r5
 8013c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c7e:	4619      	mov	r1, r3
 8013c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c82:	f7fc fa2b 	bl	80100dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c8a:	4413      	add	r3, r2
 8013c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c96:	461d      	mov	r5, r3
 8013c98:	f04f 0600 	mov.w	r6, #0
 8013c9c:	186b      	adds	r3, r5, r1
 8013c9e:	eb46 0402 	adc.w	r4, r6, r2
 8013ca2:	68fa      	ldr	r2, [r7, #12]
 8013ca4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cae:	441a      	add	r2, r3
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	601a      	str	r2, [r3, #0]
 8013cb4:	687a      	ldr	r2, [r7, #4]
 8013cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cb8:	1ad3      	subs	r3, r2, r3
 8013cba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	f47f aeb9 	bne.w	8013a36 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013cc4:	2300      	movs	r3, #0
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	3744      	adds	r7, #68	; 0x44
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013cce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cd0:	b08d      	sub	sp, #52	; 0x34
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	60f8      	str	r0, [r7, #12]
 8013cd6:	60b9      	str	r1, [r7, #8]
 8013cd8:	607a      	str	r2, [r7, #4]
 8013cda:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	f107 0210 	add.w	r2, r7, #16
 8013cec:	4611      	mov	r1, r2
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7ff fb0c 	bl	801330c <validate>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d108      	bne.n	8013d14 <f_write+0x46>
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d002      	beq.n	8013d1a <f_write+0x4c>
 8013d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d18:	e1ab      	b.n	8014072 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d20:	f003 0302 	and.w	r3, r3, #2
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d101      	bne.n	8013d2c <f_write+0x5e>
 8013d28:	2307      	movs	r3, #7
 8013d2a:	e1a2      	b.n	8014072 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	781b      	ldrb	r3, [r3, #0]
 8013d30:	2b04      	cmp	r3, #4
 8013d32:	f000 818e 	beq.w	8014052 <f_write+0x384>
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	441a      	add	r2, r3
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	f080 8182 	bcs.w	8014052 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013d54:	43db      	mvns	r3, r3
 8013d56:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013d58:	e17b      	b.n	8014052 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	899b      	ldrh	r3, [r3, #12]
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	f04f 0400 	mov.w	r4, #0
 8013d6a:	461a      	mov	r2, r3
 8013d6c:	4623      	mov	r3, r4
 8013d6e:	f7ec fab3 	bl	80002d8 <__aeabi_uldivmod>
 8013d72:	461c      	mov	r4, r3
 8013d74:	4613      	mov	r3, r2
 8013d76:	4323      	orrs	r3, r4
 8013d78:	f040 810c 	bne.w	8013f94 <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	899b      	ldrh	r3, [r3, #12]
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	f04f 0400 	mov.w	r4, #0
 8013d8c:	461a      	mov	r2, r3
 8013d8e:	4623      	mov	r3, r4
 8013d90:	f7ec faa2 	bl	80002d8 <__aeabi_uldivmod>
 8013d94:	4603      	mov	r3, r0
 8013d96:	460c      	mov	r4, r1
 8013d98:	461a      	mov	r2, r3
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	895b      	ldrh	r3, [r3, #10]
 8013d9e:	3b01      	subs	r3, #1
 8013da0:	4013      	ands	r3, r2
 8013da2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013da4:	69bb      	ldr	r3, [r7, #24]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d148      	bne.n	8013e3c <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013db0:	4323      	orrs	r3, r4
 8013db2:	d10c      	bne.n	8013dce <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	689b      	ldr	r3, [r3, #8]
 8013db8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d11c      	bne.n	8013dfa <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2100      	movs	r1, #0
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7fd f8fb 	bl	8010fc0 <create_chain>
 8013dca:	62b8      	str	r0, [r7, #40]	; 0x28
 8013dcc:	e015      	b.n	8013dfa <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d009      	beq.n	8013dea <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013ddc:	461a      	mov	r2, r3
 8013dde:	4623      	mov	r3, r4
 8013de0:	68f8      	ldr	r0, [r7, #12]
 8013de2:	f7fd f9ee 	bl	80111c2 <clmt_clust>
 8013de6:	62b8      	str	r0, [r7, #40]	; 0x28
 8013de8:	e007      	b.n	8013dfa <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013dea:	68fa      	ldr	r2, [r7, #12]
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013df0:	4619      	mov	r1, r3
 8013df2:	4610      	mov	r0, r2
 8013df4:	f7fd f8e4 	bl	8010fc0 <create_chain>
 8013df8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	f000 812d 	beq.w	801405c <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d105      	bne.n	8013e14 <f_write+0x146>
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	2202      	movs	r2, #2
 8013e0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013e10:	2302      	movs	r3, #2
 8013e12:	e12e      	b.n	8014072 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e1a:	d105      	bne.n	8013e28 <f_write+0x15a>
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	2201      	movs	r2, #1
 8013e20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013e24:	2301      	movs	r3, #1
 8013e26:	e124      	b.n	8014072 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e2c:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	689b      	ldr	r3, [r3, #8]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d102      	bne.n	8013e3c <f_write+0x16e>
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e3a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e42:	b25b      	sxtb	r3, r3
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	da1b      	bge.n	8013e80 <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	7858      	ldrb	r0, [r3, #1]
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013e56:	2301      	movs	r3, #1
 8013e58:	f7fb ff3c 	bl	800fcd4 <disk_write>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d005      	beq.n	8013e6e <f_write+0x1a0>
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	2201      	movs	r2, #1
 8013e66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	e101      	b.n	8014072 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e78:	b2da      	uxtb	r2, r3
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013e80:	693a      	ldr	r2, [r7, #16]
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e86:	4619      	mov	r1, r3
 8013e88:	4610      	mov	r0, r2
 8013e8a:	f7fc fbf3 	bl	8010674 <clust2sect>
 8013e8e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d105      	bne.n	8013ea2 <f_write+0x1d4>
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	2202      	movs	r2, #2
 8013e9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013e9e:	2302      	movs	r3, #2
 8013ea0:	e0e7      	b.n	8014072 <f_write+0x3a4>
			sect += csect;
 8013ea2:	697a      	ldr	r2, [r7, #20]
 8013ea4:	69bb      	ldr	r3, [r7, #24]
 8013ea6:	4413      	add	r3, r2
 8013ea8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	899b      	ldrh	r3, [r3, #12]
 8013eae:	461a      	mov	r2, r3
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8013eb6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013eb8:	6a3b      	ldr	r3, [r7, #32]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d046      	beq.n	8013f4c <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013ebe:	69ba      	ldr	r2, [r7, #24]
 8013ec0:	6a3b      	ldr	r3, [r7, #32]
 8013ec2:	4413      	add	r3, r2
 8013ec4:	693a      	ldr	r2, [r7, #16]
 8013ec6:	8952      	ldrh	r2, [r2, #10]
 8013ec8:	4293      	cmp	r3, r2
 8013eca:	d905      	bls.n	8013ed8 <f_write+0x20a>
					cc = fs->csize - csect;
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	895b      	ldrh	r3, [r3, #10]
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	69bb      	ldr	r3, [r7, #24]
 8013ed4:	1ad3      	subs	r3, r2, r3
 8013ed6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ed8:	693b      	ldr	r3, [r7, #16]
 8013eda:	7858      	ldrb	r0, [r3, #1]
 8013edc:	6a3b      	ldr	r3, [r7, #32]
 8013ede:	697a      	ldr	r2, [r7, #20]
 8013ee0:	69f9      	ldr	r1, [r7, #28]
 8013ee2:	f7fb fef7 	bl	800fcd4 <disk_write>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d005      	beq.n	8013ef8 <f_write+0x22a>
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	2201      	movs	r2, #1
 8013ef0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	e0bc      	b.n	8014072 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	1ad3      	subs	r3, r2, r3
 8013f00:	6a3a      	ldr	r2, [r7, #32]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d91a      	bls.n	8013f3c <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	693a      	ldr	r2, [r7, #16]
 8013f16:	8992      	ldrh	r2, [r2, #12]
 8013f18:	fb02 f303 	mul.w	r3, r2, r3
 8013f1c:	69fa      	ldr	r2, [r7, #28]
 8013f1e:	18d1      	adds	r1, r2, r3
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	899b      	ldrh	r3, [r3, #12]
 8013f24:	461a      	mov	r2, r3
 8013f26:	f7fc f8d9 	bl	80100dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f34:	b2da      	uxtb	r2, r3
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013f3c:	693b      	ldr	r3, [r7, #16]
 8013f3e:	899b      	ldrh	r3, [r3, #12]
 8013f40:	461a      	mov	r2, r3
 8013f42:	6a3b      	ldr	r3, [r7, #32]
 8013f44:	fb02 f303 	mul.w	r3, r2, r3
 8013f48:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013f4a:	e058      	b.n	8013ffe <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f50:	697a      	ldr	r2, [r7, #20]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d01b      	beq.n	8013f8e <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013f62:	42a2      	cmp	r2, r4
 8013f64:	bf08      	it	eq
 8013f66:	4299      	cmpeq	r1, r3
 8013f68:	d211      	bcs.n	8013f8e <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	7858      	ldrb	r0, [r3, #1]
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013f74:	2301      	movs	r3, #1
 8013f76:	697a      	ldr	r2, [r7, #20]
 8013f78:	f7fb fe8c 	bl	800fc94 <disk_read>
 8013f7c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d005      	beq.n	8013f8e <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	2201      	movs	r2, #1
 8013f86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	e071      	b.n	8014072 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	697a      	ldr	r2, [r7, #20]
 8013f92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	899b      	ldrh	r3, [r3, #12]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013fa0:	693a      	ldr	r2, [r7, #16]
 8013fa2:	8992      	ldrh	r2, [r2, #12]
 8013fa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8013fa8:	fb02 f201 	mul.w	r2, r2, r1
 8013fac:	1a9b      	subs	r3, r3, r2
 8013fae:	1ac3      	subs	r3, r0, r3
 8013fb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d901      	bls.n	8013fbe <f_write+0x2f0>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	899b      	ldrh	r3, [r3, #12]
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	f04f 0400 	mov.w	r4, #0
 8013fd4:	461a      	mov	r2, r3
 8013fd6:	4623      	mov	r3, r4
 8013fd8:	f7ec f97e 	bl	80002d8 <__aeabi_uldivmod>
 8013fdc:	461c      	mov	r4, r3
 8013fde:	4613      	mov	r3, r2
 8013fe0:	442b      	add	r3, r5
 8013fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fe4:	69f9      	ldr	r1, [r7, #28]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fc f878 	bl	80100dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013ff6:	b2da      	uxtb	r2, r3
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013ffe:	69fa      	ldr	r2, [r7, #28]
 8014000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014002:	4413      	add	r3, r2
 8014004:	61fb      	str	r3, [r7, #28]
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400e:	461d      	mov	r5, r3
 8014010:	f04f 0600 	mov.w	r6, #0
 8014014:	186b      	adds	r3, r5, r1
 8014016:	eb46 0402 	adc.w	r4, r6, r2
 801401a:	68fa      	ldr	r2, [r7, #12]
 801401c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014026:	68fa      	ldr	r2, [r7, #12]
 8014028:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 801402c:	4294      	cmp	r4, r2
 801402e:	bf08      	it	eq
 8014030:	428b      	cmpeq	r3, r1
 8014032:	d201      	bcs.n	8014038 <f_write+0x36a>
 8014034:	460b      	mov	r3, r1
 8014036:	4614      	mov	r4, r2
 8014038:	68fa      	ldr	r2, [r7, #12]
 801403a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	681a      	ldr	r2, [r3, #0]
 8014042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014044:	441a      	add	r2, r3
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	601a      	str	r2, [r3, #0]
 801404a:	687a      	ldr	r2, [r7, #4]
 801404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404e:	1ad3      	subs	r3, r2, r3
 8014050:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2b00      	cmp	r3, #0
 8014056:	f47f ae80 	bne.w	8013d5a <f_write+0x8c>
 801405a:	e000      	b.n	801405e <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801405c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014068:	b2da      	uxtb	r2, r3
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8014070:	2300      	movs	r3, #0
}
 8014072:	4618      	mov	r0, r3
 8014074:	3734      	adds	r7, #52	; 0x34
 8014076:	46bd      	mov	sp, r7
 8014078:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801407a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801407a:	b590      	push	{r4, r7, lr}
 801407c:	b09d      	sub	sp, #116	; 0x74
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8014088:	4611      	mov	r1, r2
 801408a:	4618      	mov	r0, r3
 801408c:	f7ff f93e 	bl	801330c <validate>
 8014090:	4603      	mov	r3, r0
 8014092:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8014096:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801409a:	2b00      	cmp	r3, #0
 801409c:	f040 811d 	bne.w	80142da <f_sync+0x260>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80140a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	f000 8115 	beq.w	80142da <f_sync+0x260>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80140b6:	b25b      	sxtb	r3, r3
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	da17      	bge.n	80140ec <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80140bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140be:	7858      	ldrb	r0, [r3, #1]
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80140ca:	2301      	movs	r3, #1
 80140cc:	f7fb fe02 	bl	800fcd4 <disk_write>
 80140d0:	4603      	mov	r3, r0
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d001      	beq.n	80140da <f_sync+0x60>
 80140d6:	2301      	movs	r3, #1
 80140d8:	e101      	b.n	80142de <f_sync+0x264>
				fp->flag &= (BYTE)~FA_DIRTY;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80140e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140e4:	b2da      	uxtb	r2, r3
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80140ec:	f7f9 f912 	bl	800d314 <get_fattime>
 80140f0:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80140f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140f4:	781b      	ldrb	r3, [r3, #0]
 80140f6:	2b04      	cmp	r3, #4
 80140f8:	f040 80a4 	bne.w	8014244 <f_sync+0x1ca>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	4618      	mov	r0, r3
 8014100:	f7fc fe4a 	bl	8010d98 <fill_first_frag>
 8014104:	4603      	mov	r3, r0
 8014106:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 801410a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801410e:	2b00      	cmp	r3, #0
 8014110:	d10a      	bne.n	8014128 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014118:	f04f 32ff 	mov.w	r2, #4294967295
 801411c:	4619      	mov	r1, r3
 801411e:	f7fc fe6a 	bl	8010df6 <fill_last_frag>
 8014122:	4603      	mov	r3, r0
 8014124:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 8014128:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801412c:	2b00      	cmp	r3, #0
 801412e:	f040 80d4 	bne.w	80142da <f_sync+0x260>
					INIT_NAMBUF(fs);
 8014132:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8014136:	f000 fcbb 	bl	8014ab0 <ff_memalloc>
 801413a:	6638      	str	r0, [r7, #96]	; 0x60
 801413c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801413e:	2b00      	cmp	r3, #0
 8014140:	d101      	bne.n	8014146 <f_sync+0xcc>
 8014142:	2311      	movs	r3, #17
 8014144:	e0cb      	b.n	80142de <f_sync+0x264>
 8014146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801414a:	611a      	str	r2, [r3, #16]
 801414c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801414e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014150:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8014154:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	f107 0308 	add.w	r3, r7, #8
 801415c:	4611      	mov	r1, r2
 801415e:	4618      	mov	r0, r3
 8014160:	f7fd fd9e 	bl	8011ca0 <load_obj_dir>
 8014164:	4603      	mov	r3, r0
 8014166:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 801416a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801416e:	2b00      	cmp	r3, #0
 8014170:	d164      	bne.n	801423c <f_sync+0x1c2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8014172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014174:	695b      	ldr	r3, [r3, #20]
 8014176:	3304      	adds	r3, #4
 8014178:	781a      	ldrb	r2, [r3, #0]
 801417a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801417c:	695b      	ldr	r3, [r3, #20]
 801417e:	3304      	adds	r3, #4
 8014180:	f042 0220 	orr.w	r2, r2, #32
 8014184:	b2d2      	uxtb	r2, r2
 8014186:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	79da      	ldrb	r2, [r3, #7]
 801418c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801418e:	695b      	ldr	r3, [r3, #20]
 8014190:	3321      	adds	r3, #33	; 0x21
 8014192:	f042 0201 	orr.w	r2, r2, #1
 8014196:	b2d2      	uxtb	r2, r2
 8014198:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 801419a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801419c:	695b      	ldr	r3, [r3, #20]
 801419e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	4619      	mov	r1, r3
 80141a8:	4610      	mov	r0, r2
 80141aa:	f7fb fee4 	bl	800ff76 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80141ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141b0:	695b      	ldr	r3, [r3, #20]
 80141b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80141bc:	461a      	mov	r2, r3
 80141be:	4623      	mov	r3, r4
 80141c0:	4608      	mov	r0, r1
 80141c2:	f7fb ff04 	bl	800ffce <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80141c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141c8:	695b      	ldr	r3, [r3, #20]
 80141ca:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80141d4:	461a      	mov	r2, r3
 80141d6:	4623      	mov	r3, r4
 80141d8:	4608      	mov	r0, r1
 80141da:	f7fb fef8 	bl	800ffce <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80141de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141e0:	695b      	ldr	r3, [r3, #20]
 80141e2:	330c      	adds	r3, #12
 80141e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7fb fec5 	bl	800ff76 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80141ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141ee:	695b      	ldr	r3, [r3, #20]
 80141f0:	3315      	adds	r3, #21
 80141f2:	2200      	movs	r2, #0
 80141f4:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80141f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141f8:	695b      	ldr	r3, [r3, #20]
 80141fa:	3310      	adds	r3, #16
 80141fc:	2100      	movs	r1, #0
 80141fe:	4618      	mov	r0, r3
 8014200:	f7fb feb9 	bl	800ff76 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8014204:	f107 0308 	add.w	r3, r7, #8
 8014208:	4618      	mov	r0, r3
 801420a:	f7fd fd86 	bl	8011d1a <store_xdir>
 801420e:	4603      	mov	r3, r0
 8014210:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 8014214:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014218:	2b00      	cmp	r3, #0
 801421a:	d10f      	bne.n	801423c <f_sync+0x1c2>
							res = sync_fs(fs);
 801421c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801421e:	4618      	mov	r0, r3
 8014220:	f7fc f9b8 	bl	8010594 <sync_fs>
 8014224:	4603      	mov	r3, r0
 8014226:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014234:	b2da      	uxtb	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 801423c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801423e:	f000 fc43 	bl	8014ac8 <ff_memfree>
 8014242:	e04a      	b.n	80142da <f_sync+0x260>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801424a:	4619      	mov	r1, r3
 801424c:	4610      	mov	r0, r2
 801424e:	f7fc f973 	bl	8010538 <move_window>
 8014252:	4603      	mov	r3, r0
 8014254:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8014258:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801425c:	2b00      	cmp	r3, #0
 801425e:	d13c      	bne.n	80142da <f_sync+0x260>
					dir = fp->dir_ptr;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014264:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014268:	330b      	adds	r3, #11
 801426a:	781a      	ldrb	r2, [r3, #0]
 801426c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801426e:	330b      	adds	r3, #11
 8014270:	f042 0220 	orr.w	r2, r2, #32
 8014274:	b2d2      	uxtb	r2, r2
 8014276:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6818      	ldr	r0, [r3, #0]
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	689b      	ldr	r3, [r3, #8]
 8014280:	461a      	mov	r2, r3
 8014282:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014284:	f7fd f9d9 	bl	801163a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801428a:	f103 021c 	add.w	r2, r3, #28
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014294:	4619      	mov	r1, r3
 8014296:	4610      	mov	r0, r2
 8014298:	f7fb fe6d 	bl	800ff76 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801429c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801429e:	3316      	adds	r3, #22
 80142a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7fb fe67 	bl	800ff76 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80142a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80142aa:	3312      	adds	r3, #18
 80142ac:	2100      	movs	r1, #0
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7fb fe46 	bl	800ff40 <st_word>
					fs->wflag = 1;
 80142b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142b6:	2201      	movs	r2, #1
 80142b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80142ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142bc:	4618      	mov	r0, r3
 80142be:	f7fc f969 	bl	8010594 <sync_fs>
 80142c2:	4603      	mov	r3, r0
 80142c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80142ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80142d2:	b2da      	uxtb	r2, r3
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80142da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3774      	adds	r7, #116	; 0x74
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd90      	pop	{r4, r7, pc}

080142e6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80142e6:	b580      	push	{r7, lr}
 80142e8:	b084      	sub	sp, #16
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f7ff fec3 	bl	801407a <f_sync>
 80142f4:	4603      	mov	r3, r0
 80142f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80142f8:	7bfb      	ldrb	r3, [r7, #15]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d118      	bne.n	8014330 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	f107 0208 	add.w	r2, r7, #8
 8014304:	4611      	mov	r1, r2
 8014306:	4618      	mov	r0, r3
 8014308:	f7ff f800 	bl	801330c <validate>
 801430c:	4603      	mov	r3, r0
 801430e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014310:	7bfb      	ldrb	r3, [r7, #15]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d10c      	bne.n	8014330 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801431a:	4618      	mov	r0, r3
 801431c:	f7fc f868 	bl	80103f0 <dec_lock>
 8014320:	4603      	mov	r3, r0
 8014322:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014324:	7bfb      	ldrb	r3, [r7, #15]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d102      	bne.n	8014330 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2200      	movs	r2, #0
 801432e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014330:	7bfb      	ldrb	r3, [r7, #15]
}
 8014332:	4618      	mov	r0, r3
 8014334:	3710      	adds	r7, #16
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}

0801433a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801433a:	b580      	push	{r7, lr}
 801433c:	b084      	sub	sp, #16
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
 8014342:	460b      	mov	r3, r1
 8014344:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8014346:	78fb      	ldrb	r3, [r7, #3]
 8014348:	2b0a      	cmp	r3, #10
 801434a:	d103      	bne.n	8014354 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801434c:	210d      	movs	r1, #13
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f7ff fff3 	bl	801433a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	2b00      	cmp	r3, #0
 801435e:	db25      	blt.n	80143ac <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	1c5a      	adds	r2, r3, #1
 8014364:	60fa      	str	r2, [r7, #12]
 8014366:	687a      	ldr	r2, [r7, #4]
 8014368:	4413      	add	r3, r2
 801436a:	78fa      	ldrb	r2, [r7, #3]
 801436c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	2b3c      	cmp	r3, #60	; 0x3c
 8014372:	dd12      	ble.n	801439a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6818      	ldr	r0, [r3, #0]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f103 010c 	add.w	r1, r3, #12
 801437e:	68fa      	ldr	r2, [r7, #12]
 8014380:	f107 0308 	add.w	r3, r7, #8
 8014384:	f7ff fca3 	bl	8013cce <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8014388:	68ba      	ldr	r2, [r7, #8]
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	429a      	cmp	r2, r3
 801438e:	d101      	bne.n	8014394 <putc_bfd+0x5a>
 8014390:	2300      	movs	r3, #0
 8014392:	e001      	b.n	8014398 <putc_bfd+0x5e>
 8014394:	f04f 33ff 	mov.w	r3, #4294967295
 8014398:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	68fa      	ldr	r2, [r7, #12]
 801439e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	689b      	ldr	r3, [r3, #8]
 80143a4:	1c5a      	adds	r2, r3, #1
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	609a      	str	r2, [r3, #8]
 80143aa:	e000      	b.n	80143ae <putc_bfd+0x74>
	if (i < 0) return;
 80143ac:	bf00      	nop
}
 80143ae:	3710      	adds	r7, #16
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b084      	sub	sp, #16
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	685b      	ldr	r3, [r3, #4]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	db17      	blt.n	80143f4 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6818      	ldr	r0, [r3, #0]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	f103 010c 	add.w	r1, r3, #12
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	685b      	ldr	r3, [r3, #4]
 80143d2:	461a      	mov	r2, r3
 80143d4:	f107 030c 	add.w	r3, r7, #12
 80143d8:	f7ff fc79 	bl	8013cce <f_write>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d108      	bne.n	80143f4 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	461a      	mov	r2, r3
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d102      	bne.n	80143f4 <putc_flush+0x40>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	689b      	ldr	r3, [r3, #8]
 80143f2:	e001      	b.n	80143f8 <putc_flush+0x44>
	return EOF;
 80143f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3710      	adds	r7, #16
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8014400:	b480      	push	{r7}
 8014402:	b083      	sub	sp, #12
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
 8014408:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	683a      	ldr	r2, [r7, #0]
 801440e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2200      	movs	r2, #0
 8014414:	605a      	str	r2, [r3, #4]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	685a      	ldr	r2, [r3, #4]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	609a      	str	r2, [r3, #8]
}
 801441e:	bf00      	nop
 8014420:	370c      	adds	r7, #12
 8014422:	46bd      	mov	sp, r7
 8014424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014428:	4770      	bx	lr
	...

0801442c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801442c:	b40e      	push	{r1, r2, r3}
 801442e:	b580      	push	{r7, lr}
 8014430:	b0a7      	sub	sp, #156	; 0x9c
 8014432:	af00      	add	r7, sp, #0
 8014434:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8014436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801443a:	6879      	ldr	r1, [r7, #4]
 801443c:	4618      	mov	r0, r3
 801443e:	f7ff ffdf 	bl	8014400 <putc_init>

	va_start(arp, fmt);
 8014442:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014446:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8014448:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801444c:	1c5a      	adds	r2, r3, #1
 801444e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8014458:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801445c:	2b00      	cmp	r3, #0
 801445e:	f000 81f4 	beq.w	801484a <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8014462:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014466:	2b25      	cmp	r3, #37	; 0x25
 8014468:	d008      	beq.n	801447c <f_printf+0x50>
			putc_bfd(&pb, c);
 801446a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801446e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014472:	4611      	mov	r1, r2
 8014474:	4618      	mov	r0, r3
 8014476:	f7ff ff60 	bl	801433a <putc_bfd>
			continue;
 801447a:	e1e5      	b.n	8014848 <f_printf+0x41c>
		}
		w = f = 0;
 801447c:	2300      	movs	r3, #0
 801447e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8014482:	2300      	movs	r3, #0
 8014484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8014488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801448c:	1c5a      	adds	r2, r3, #1
 801448e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8014498:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801449c:	2b30      	cmp	r3, #48	; 0x30
 801449e:	d10b      	bne.n	80144b8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 80144a0:	2301      	movs	r3, #1
 80144a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80144a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80144aa:	1c5a      	adds	r2, r3, #1
 80144ac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80144b6:	e024      	b.n	8014502 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80144b8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80144bc:	2b2d      	cmp	r3, #45	; 0x2d
 80144be:	d120      	bne.n	8014502 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80144c0:	2302      	movs	r3, #2
 80144c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80144c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80144ca:	1c5a      	adds	r2, r3, #1
 80144cc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80144d6:	e014      	b.n	8014502 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80144d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80144dc:	4613      	mov	r3, r2
 80144de:	009b      	lsls	r3, r3, #2
 80144e0:	4413      	add	r3, r2
 80144e2:	005b      	lsls	r3, r3, #1
 80144e4:	461a      	mov	r2, r3
 80144e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80144ea:	4413      	add	r3, r2
 80144ec:	3b30      	subs	r3, #48	; 0x30
 80144ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80144f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80144f6:	1c5a      	adds	r2, r3, #1
 80144f8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80144fc:	781b      	ldrb	r3, [r3, #0]
 80144fe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8014502:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014506:	2b2f      	cmp	r3, #47	; 0x2f
 8014508:	d903      	bls.n	8014512 <f_printf+0xe6>
 801450a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801450e:	2b39      	cmp	r3, #57	; 0x39
 8014510:	d9e2      	bls.n	80144d8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8014512:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014516:	2b6c      	cmp	r3, #108	; 0x6c
 8014518:	d003      	beq.n	8014522 <f_printf+0xf6>
 801451a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801451e:	2b4c      	cmp	r3, #76	; 0x4c
 8014520:	d10d      	bne.n	801453e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8014522:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014526:	f043 0304 	orr.w	r3, r3, #4
 801452a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801452e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014532:	1c5a      	adds	r2, r3, #1
 8014534:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 801453e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014542:	2b00      	cmp	r3, #0
 8014544:	f000 8183 	beq.w	801484e <f_printf+0x422>
		d = c;
 8014548:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801454c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8014550:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014554:	2b60      	cmp	r3, #96	; 0x60
 8014556:	d908      	bls.n	801456a <f_printf+0x13e>
 8014558:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801455c:	2b7a      	cmp	r3, #122	; 0x7a
 801455e:	d804      	bhi.n	801456a <f_printf+0x13e>
 8014560:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014564:	3b20      	subs	r3, #32
 8014566:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 801456a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801456e:	3b42      	subs	r3, #66	; 0x42
 8014570:	2b16      	cmp	r3, #22
 8014572:	f200 8098 	bhi.w	80146a6 <f_printf+0x27a>
 8014576:	a201      	add	r2, pc, #4	; (adr r2, 801457c <f_printf+0x150>)
 8014578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801457c:	08014687 	.word	0x08014687
 8014580:	0801466f 	.word	0x0801466f
 8014584:	08014697 	.word	0x08014697
 8014588:	080146a7 	.word	0x080146a7
 801458c:	080146a7 	.word	0x080146a7
 8014590:	080146a7 	.word	0x080146a7
 8014594:	080146a7 	.word	0x080146a7
 8014598:	080146a7 	.word	0x080146a7
 801459c:	080146a7 	.word	0x080146a7
 80145a0:	080146a7 	.word	0x080146a7
 80145a4:	080146a7 	.word	0x080146a7
 80145a8:	080146a7 	.word	0x080146a7
 80145ac:	080146a7 	.word	0x080146a7
 80145b0:	0801468f 	.word	0x0801468f
 80145b4:	080146a7 	.word	0x080146a7
 80145b8:	080146a7 	.word	0x080146a7
 80145bc:	080146a7 	.word	0x080146a7
 80145c0:	080145d9 	.word	0x080145d9
 80145c4:	080146a7 	.word	0x080146a7
 80145c8:	08014697 	.word	0x08014697
 80145cc:	080146a7 	.word	0x080146a7
 80145d0:	080146a7 	.word	0x080146a7
 80145d4:	0801469f 	.word	0x0801469f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80145d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80145da:	1d1a      	adds	r2, r3, #4
 80145dc:	67ba      	str	r2, [r7, #120]	; 0x78
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80145e2:	2300      	movs	r3, #0
 80145e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80145e8:	e004      	b.n	80145f4 <f_printf+0x1c8>
 80145ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80145ee:	3301      	adds	r3, #1
 80145f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80145f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80145f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80145fa:	4413      	add	r3, r2
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d1f3      	bne.n	80145ea <f_printf+0x1be>
			if (!(f & 2)) {
 8014602:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014606:	f003 0302 	and.w	r3, r3, #2
 801460a:	2b00      	cmp	r3, #0
 801460c:	d11a      	bne.n	8014644 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 801460e:	e005      	b.n	801461c <f_printf+0x1f0>
 8014610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014614:	2120      	movs	r1, #32
 8014616:	4618      	mov	r0, r3
 8014618:	f7ff fe8f 	bl	801433a <putc_bfd>
 801461c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014620:	1c5a      	adds	r2, r3, #1
 8014622:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014626:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801462a:	429a      	cmp	r2, r3
 801462c:	d8f0      	bhi.n	8014610 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 801462e:	e009      	b.n	8014644 <f_printf+0x218>
 8014630:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014632:	1c5a      	adds	r2, r3, #1
 8014634:	67fa      	str	r2, [r7, #124]	; 0x7c
 8014636:	781a      	ldrb	r2, [r3, #0]
 8014638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801463c:	4611      	mov	r1, r2
 801463e:	4618      	mov	r0, r3
 8014640:	f7ff fe7b 	bl	801433a <putc_bfd>
 8014644:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d1f1      	bne.n	8014630 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 801464c:	e005      	b.n	801465a <f_printf+0x22e>
 801464e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014652:	2120      	movs	r1, #32
 8014654:	4618      	mov	r0, r3
 8014656:	f7ff fe70 	bl	801433a <putc_bfd>
 801465a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801465e:	1c5a      	adds	r2, r3, #1
 8014660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014664:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014668:	429a      	cmp	r2, r3
 801466a:	d8f0      	bhi.n	801464e <f_printf+0x222>
			continue;
 801466c:	e0ec      	b.n	8014848 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801466e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014670:	1d1a      	adds	r2, r3, #4
 8014672:	67ba      	str	r2, [r7, #120]	; 0x78
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	b2da      	uxtb	r2, r3
 8014678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801467c:	4611      	mov	r1, r2
 801467e:	4618      	mov	r0, r3
 8014680:	f7ff fe5b 	bl	801433a <putc_bfd>
 8014684:	e0e0      	b.n	8014848 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8014686:	2302      	movs	r3, #2
 8014688:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801468c:	e014      	b.n	80146b8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801468e:	2308      	movs	r3, #8
 8014690:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8014694:	e010      	b.n	80146b8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8014696:	230a      	movs	r3, #10
 8014698:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801469c:	e00c      	b.n	80146b8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801469e:	2310      	movs	r3, #16
 80146a0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80146a4:	e008      	b.n	80146b8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80146a6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80146aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80146ae:	4611      	mov	r1, r2
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7ff fe42 	bl	801433a <putc_bfd>
 80146b6:	e0c7      	b.n	8014848 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80146b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80146bc:	f003 0304 	and.w	r3, r3, #4
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d004      	beq.n	80146ce <f_printf+0x2a2>
 80146c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80146c6:	1d1a      	adds	r2, r3, #4
 80146c8:	67ba      	str	r2, [r7, #120]	; 0x78
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	e00c      	b.n	80146e8 <f_printf+0x2bc>
 80146ce:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80146d2:	2b44      	cmp	r3, #68	; 0x44
 80146d4:	d104      	bne.n	80146e0 <f_printf+0x2b4>
 80146d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80146d8:	1d1a      	adds	r2, r3, #4
 80146da:	67ba      	str	r2, [r7, #120]	; 0x78
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	e003      	b.n	80146e8 <f_printf+0x2bc>
 80146e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80146e2:	1d1a      	adds	r2, r3, #4
 80146e4:	67ba      	str	r2, [r7, #120]	; 0x78
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80146ec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80146f0:	2b44      	cmp	r3, #68	; 0x44
 80146f2:	d10e      	bne.n	8014712 <f_printf+0x2e6>
 80146f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	da0a      	bge.n	8014712 <f_printf+0x2e6>
			v = 0 - v;
 80146fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014700:	425b      	negs	r3, r3
 8014702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8014706:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801470a:	f043 0308 	orr.w	r3, r3, #8
 801470e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8014712:	2300      	movs	r3, #0
 8014714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8014718:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 801471c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014720:	fbb3 f1f2 	udiv	r1, r3, r2
 8014724:	fb02 f201 	mul.w	r2, r2, r1
 8014728:	1a9b      	subs	r3, r3, r2
 801472a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 801472e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8014732:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014736:	fbb2 f3f3 	udiv	r3, r2, r3
 801473a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801473e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014742:	2b09      	cmp	r3, #9
 8014744:	d90b      	bls.n	801475e <f_printf+0x332>
 8014746:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801474a:	2b78      	cmp	r3, #120	; 0x78
 801474c:	d101      	bne.n	8014752 <f_printf+0x326>
 801474e:	2227      	movs	r2, #39	; 0x27
 8014750:	e000      	b.n	8014754 <f_printf+0x328>
 8014752:	2207      	movs	r2, #7
 8014754:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014758:	4413      	add	r3, r2
 801475a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 801475e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014762:	1c5a      	adds	r2, r3, #1
 8014764:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014768:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801476c:	3230      	adds	r2, #48	; 0x30
 801476e:	b2d2      	uxtb	r2, r2
 8014770:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8014774:	440b      	add	r3, r1
 8014776:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 801477a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801477e:	2b00      	cmp	r3, #0
 8014780:	d003      	beq.n	801478a <f_printf+0x35e>
 8014782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014786:	2b1f      	cmp	r3, #31
 8014788:	d9c6      	bls.n	8014718 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 801478a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801478e:	f003 0308 	and.w	r3, r3, #8
 8014792:	2b00      	cmp	r3, #0
 8014794:	d00a      	beq.n	80147ac <f_printf+0x380>
 8014796:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801479a:	1c5a      	adds	r2, r3, #1
 801479c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80147a0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80147a4:	4413      	add	r3, r2
 80147a6:	222d      	movs	r2, #45	; 0x2d
 80147a8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80147ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80147b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80147b8:	f003 0301 	and.w	r3, r3, #1
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d001      	beq.n	80147c4 <f_printf+0x398>
 80147c0:	2330      	movs	r3, #48	; 0x30
 80147c2:	e000      	b.n	80147c6 <f_printf+0x39a>
 80147c4:	2320      	movs	r3, #32
 80147c6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80147ca:	e007      	b.n	80147dc <f_printf+0x3b0>
 80147cc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80147d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80147d4:	4611      	mov	r1, r2
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7ff fdaf 	bl	801433a <putc_bfd>
 80147dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80147e0:	f003 0302 	and.w	r3, r3, #2
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d108      	bne.n	80147fa <f_printf+0x3ce>
 80147e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80147ec:	1c5a      	adds	r2, r3, #1
 80147ee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80147f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d8e8      	bhi.n	80147cc <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 80147fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147fe:	3b01      	subs	r3, #1
 8014800:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014804:	f107 020c 	add.w	r2, r7, #12
 8014808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801480c:	4413      	add	r3, r2
 801480e:	781a      	ldrb	r2, [r3, #0]
 8014810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014814:	4611      	mov	r1, r2
 8014816:	4618      	mov	r0, r3
 8014818:	f7ff fd8f 	bl	801433a <putc_bfd>
		} while (i);
 801481c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014820:	2b00      	cmp	r3, #0
 8014822:	d1ea      	bne.n	80147fa <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8014824:	e007      	b.n	8014836 <f_printf+0x40a>
 8014826:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801482a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801482e:	4611      	mov	r1, r2
 8014830:	4618      	mov	r0, r3
 8014832:	f7ff fd82 	bl	801433a <putc_bfd>
 8014836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801483a:	1c5a      	adds	r2, r3, #1
 801483c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014840:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014844:	429a      	cmp	r2, r3
 8014846:	d8ee      	bhi.n	8014826 <f_printf+0x3fa>
		c = *fmt++;
 8014848:	e5fe      	b.n	8014448 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801484a:	bf00      	nop
 801484c:	e000      	b.n	8014850 <f_printf+0x424>
		if (!c) break;
 801484e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8014850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014854:	4618      	mov	r0, r3
 8014856:	f7ff fdad 	bl	80143b4 <putc_flush>
 801485a:	4603      	mov	r3, r0
}
 801485c:	4618      	mov	r0, r3
 801485e:	379c      	adds	r7, #156	; 0x9c
 8014860:	46bd      	mov	sp, r7
 8014862:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014866:	b003      	add	sp, #12
 8014868:	4770      	bx	lr
 801486a:	bf00      	nop

0801486c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801486c:	b480      	push	{r7}
 801486e:	b087      	sub	sp, #28
 8014870:	af00      	add	r7, sp, #0
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	4613      	mov	r3, r2
 8014878:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801487a:	2301      	movs	r3, #1
 801487c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801487e:	2300      	movs	r3, #0
 8014880:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014882:	4b1f      	ldr	r3, [pc, #124]	; (8014900 <FATFS_LinkDriverEx+0x94>)
 8014884:	7a5b      	ldrb	r3, [r3, #9]
 8014886:	b2db      	uxtb	r3, r3
 8014888:	2b00      	cmp	r3, #0
 801488a:	d131      	bne.n	80148f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801488c:	4b1c      	ldr	r3, [pc, #112]	; (8014900 <FATFS_LinkDriverEx+0x94>)
 801488e:	7a5b      	ldrb	r3, [r3, #9]
 8014890:	b2db      	uxtb	r3, r3
 8014892:	461a      	mov	r2, r3
 8014894:	4b1a      	ldr	r3, [pc, #104]	; (8014900 <FATFS_LinkDriverEx+0x94>)
 8014896:	2100      	movs	r1, #0
 8014898:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801489a:	4b19      	ldr	r3, [pc, #100]	; (8014900 <FATFS_LinkDriverEx+0x94>)
 801489c:	7a5b      	ldrb	r3, [r3, #9]
 801489e:	b2db      	uxtb	r3, r3
 80148a0:	4a17      	ldr	r2, [pc, #92]	; (8014900 <FATFS_LinkDriverEx+0x94>)
 80148a2:	009b      	lsls	r3, r3, #2
 80148a4:	4413      	add	r3, r2
 80148a6:	68fa      	ldr	r2, [r7, #12]
 80148a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80148aa:	4b15      	ldr	r3, [pc, #84]	; (8014900 <FATFS_LinkDriverEx+0x94>)
 80148ac:	7a5b      	ldrb	r3, [r3, #9]
 80148ae:	b2db      	uxtb	r3, r3
 80148b0:	461a      	mov	r2, r3
 80148b2:	4b13      	ldr	r3, [pc, #76]	; (8014900 <FATFS_LinkDriverEx+0x94>)
 80148b4:	4413      	add	r3, r2
 80148b6:	79fa      	ldrb	r2, [r7, #7]
 80148b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80148ba:	4b11      	ldr	r3, [pc, #68]	; (8014900 <FATFS_LinkDriverEx+0x94>)
 80148bc:	7a5b      	ldrb	r3, [r3, #9]
 80148be:	b2db      	uxtb	r3, r3
 80148c0:	1c5a      	adds	r2, r3, #1
 80148c2:	b2d1      	uxtb	r1, r2
 80148c4:	4a0e      	ldr	r2, [pc, #56]	; (8014900 <FATFS_LinkDriverEx+0x94>)
 80148c6:	7251      	strb	r1, [r2, #9]
 80148c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80148ca:	7dbb      	ldrb	r3, [r7, #22]
 80148cc:	3330      	adds	r3, #48	; 0x30
 80148ce:	b2da      	uxtb	r2, r3
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	3301      	adds	r3, #1
 80148d8:	223a      	movs	r2, #58	; 0x3a
 80148da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	3302      	adds	r3, #2
 80148e0:	222f      	movs	r2, #47	; 0x2f
 80148e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	3303      	adds	r3, #3
 80148e8:	2200      	movs	r2, #0
 80148ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148ec:	2300      	movs	r3, #0
 80148ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	371c      	adds	r7, #28
 80148f6:	46bd      	mov	sp, r7
 80148f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fc:	4770      	bx	lr
 80148fe:	bf00      	nop
 8014900:	240002ac 	.word	0x240002ac

08014904 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b082      	sub	sp, #8
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
 801490c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801490e:	2200      	movs	r2, #0
 8014910:	6839      	ldr	r1, [r7, #0]
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f7ff ffaa 	bl	801486c <FATFS_LinkDriverEx>
 8014918:	4603      	mov	r3, r0
}
 801491a:	4618      	mov	r0, r3
 801491c:	3708      	adds	r7, #8
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}
	...

08014924 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014924:	b480      	push	{r7}
 8014926:	b085      	sub	sp, #20
 8014928:	af00      	add	r7, sp, #0
 801492a:	4603      	mov	r3, r0
 801492c:	6039      	str	r1, [r7, #0]
 801492e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014930:	88fb      	ldrh	r3, [r7, #6]
 8014932:	2b7f      	cmp	r3, #127	; 0x7f
 8014934:	d802      	bhi.n	801493c <ff_convert+0x18>
		c = chr;
 8014936:	88fb      	ldrh	r3, [r7, #6]
 8014938:	81fb      	strh	r3, [r7, #14]
 801493a:	e025      	b.n	8014988 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d00b      	beq.n	801495a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014942:	88fb      	ldrh	r3, [r7, #6]
 8014944:	2bff      	cmp	r3, #255	; 0xff
 8014946:	d805      	bhi.n	8014954 <ff_convert+0x30>
 8014948:	88fb      	ldrh	r3, [r7, #6]
 801494a:	3b80      	subs	r3, #128	; 0x80
 801494c:	4a12      	ldr	r2, [pc, #72]	; (8014998 <ff_convert+0x74>)
 801494e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014952:	e000      	b.n	8014956 <ff_convert+0x32>
 8014954:	2300      	movs	r3, #0
 8014956:	81fb      	strh	r3, [r7, #14]
 8014958:	e016      	b.n	8014988 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801495a:	2300      	movs	r3, #0
 801495c:	81fb      	strh	r3, [r7, #14]
 801495e:	e009      	b.n	8014974 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014960:	89fb      	ldrh	r3, [r7, #14]
 8014962:	4a0d      	ldr	r2, [pc, #52]	; (8014998 <ff_convert+0x74>)
 8014964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014968:	88fa      	ldrh	r2, [r7, #6]
 801496a:	429a      	cmp	r2, r3
 801496c:	d006      	beq.n	801497c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801496e:	89fb      	ldrh	r3, [r7, #14]
 8014970:	3301      	adds	r3, #1
 8014972:	81fb      	strh	r3, [r7, #14]
 8014974:	89fb      	ldrh	r3, [r7, #14]
 8014976:	2b7f      	cmp	r3, #127	; 0x7f
 8014978:	d9f2      	bls.n	8014960 <ff_convert+0x3c>
 801497a:	e000      	b.n	801497e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801497c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801497e:	89fb      	ldrh	r3, [r7, #14]
 8014980:	3380      	adds	r3, #128	; 0x80
 8014982:	b29b      	uxth	r3, r3
 8014984:	b2db      	uxtb	r3, r3
 8014986:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014988:	89fb      	ldrh	r3, [r7, #14]
}
 801498a:	4618      	mov	r0, r3
 801498c:	3714      	adds	r7, #20
 801498e:	46bd      	mov	sp, r7
 8014990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014994:	4770      	bx	lr
 8014996:	bf00      	nop
 8014998:	08015898 	.word	0x08015898

0801499c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801499c:	b480      	push	{r7}
 801499e:	b087      	sub	sp, #28
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	4603      	mov	r3, r0
 80149a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80149a6:	88fb      	ldrh	r3, [r7, #6]
 80149a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80149ac:	d201      	bcs.n	80149b2 <ff_wtoupper+0x16>
 80149ae:	4b3e      	ldr	r3, [pc, #248]	; (8014aa8 <ff_wtoupper+0x10c>)
 80149b0:	e000      	b.n	80149b4 <ff_wtoupper+0x18>
 80149b2:	4b3e      	ldr	r3, [pc, #248]	; (8014aac <ff_wtoupper+0x110>)
 80149b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80149b6:	697b      	ldr	r3, [r7, #20]
 80149b8:	1c9a      	adds	r2, r3, #2
 80149ba:	617a      	str	r2, [r7, #20]
 80149bc:	881b      	ldrh	r3, [r3, #0]
 80149be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80149c0:	8a7b      	ldrh	r3, [r7, #18]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d068      	beq.n	8014a98 <ff_wtoupper+0xfc>
 80149c6:	88fa      	ldrh	r2, [r7, #6]
 80149c8:	8a7b      	ldrh	r3, [r7, #18]
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d364      	bcc.n	8014a98 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	1c9a      	adds	r2, r3, #2
 80149d2:	617a      	str	r2, [r7, #20]
 80149d4:	881b      	ldrh	r3, [r3, #0]
 80149d6:	823b      	strh	r3, [r7, #16]
 80149d8:	8a3b      	ldrh	r3, [r7, #16]
 80149da:	0a1b      	lsrs	r3, r3, #8
 80149dc:	81fb      	strh	r3, [r7, #14]
 80149de:	8a3b      	ldrh	r3, [r7, #16]
 80149e0:	b2db      	uxtb	r3, r3
 80149e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80149e4:	88fa      	ldrh	r2, [r7, #6]
 80149e6:	8a79      	ldrh	r1, [r7, #18]
 80149e8:	8a3b      	ldrh	r3, [r7, #16]
 80149ea:	440b      	add	r3, r1
 80149ec:	429a      	cmp	r2, r3
 80149ee:	da49      	bge.n	8014a84 <ff_wtoupper+0xe8>
			switch (cmd) {
 80149f0:	89fb      	ldrh	r3, [r7, #14]
 80149f2:	2b08      	cmp	r3, #8
 80149f4:	d84f      	bhi.n	8014a96 <ff_wtoupper+0xfa>
 80149f6:	a201      	add	r2, pc, #4	; (adr r2, 80149fc <ff_wtoupper+0x60>)
 80149f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149fc:	08014a21 	.word	0x08014a21
 8014a00:	08014a33 	.word	0x08014a33
 8014a04:	08014a49 	.word	0x08014a49
 8014a08:	08014a51 	.word	0x08014a51
 8014a0c:	08014a59 	.word	0x08014a59
 8014a10:	08014a61 	.word	0x08014a61
 8014a14:	08014a69 	.word	0x08014a69
 8014a18:	08014a71 	.word	0x08014a71
 8014a1c:	08014a79 	.word	0x08014a79
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014a20:	88fa      	ldrh	r2, [r7, #6]
 8014a22:	8a7b      	ldrh	r3, [r7, #18]
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	005b      	lsls	r3, r3, #1
 8014a28:	697a      	ldr	r2, [r7, #20]
 8014a2a:	4413      	add	r3, r2
 8014a2c:	881b      	ldrh	r3, [r3, #0]
 8014a2e:	80fb      	strh	r3, [r7, #6]
 8014a30:	e027      	b.n	8014a82 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014a32:	88fa      	ldrh	r2, [r7, #6]
 8014a34:	8a7b      	ldrh	r3, [r7, #18]
 8014a36:	1ad3      	subs	r3, r2, r3
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	f003 0301 	and.w	r3, r3, #1
 8014a3e:	b29b      	uxth	r3, r3
 8014a40:	88fa      	ldrh	r2, [r7, #6]
 8014a42:	1ad3      	subs	r3, r2, r3
 8014a44:	80fb      	strh	r3, [r7, #6]
 8014a46:	e01c      	b.n	8014a82 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014a48:	88fb      	ldrh	r3, [r7, #6]
 8014a4a:	3b10      	subs	r3, #16
 8014a4c:	80fb      	strh	r3, [r7, #6]
 8014a4e:	e018      	b.n	8014a82 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014a50:	88fb      	ldrh	r3, [r7, #6]
 8014a52:	3b20      	subs	r3, #32
 8014a54:	80fb      	strh	r3, [r7, #6]
 8014a56:	e014      	b.n	8014a82 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014a58:	88fb      	ldrh	r3, [r7, #6]
 8014a5a:	3b30      	subs	r3, #48	; 0x30
 8014a5c:	80fb      	strh	r3, [r7, #6]
 8014a5e:	e010      	b.n	8014a82 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014a60:	88fb      	ldrh	r3, [r7, #6]
 8014a62:	3b1a      	subs	r3, #26
 8014a64:	80fb      	strh	r3, [r7, #6]
 8014a66:	e00c      	b.n	8014a82 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014a68:	88fb      	ldrh	r3, [r7, #6]
 8014a6a:	3308      	adds	r3, #8
 8014a6c:	80fb      	strh	r3, [r7, #6]
 8014a6e:	e008      	b.n	8014a82 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014a70:	88fb      	ldrh	r3, [r7, #6]
 8014a72:	3b50      	subs	r3, #80	; 0x50
 8014a74:	80fb      	strh	r3, [r7, #6]
 8014a76:	e004      	b.n	8014a82 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014a78:	88fb      	ldrh	r3, [r7, #6]
 8014a7a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8014a7e:	80fb      	strh	r3, [r7, #6]
 8014a80:	bf00      	nop
			}
			break;
 8014a82:	e008      	b.n	8014a96 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014a84:	89fb      	ldrh	r3, [r7, #14]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d195      	bne.n	80149b6 <ff_wtoupper+0x1a>
 8014a8a:	8a3b      	ldrh	r3, [r7, #16]
 8014a8c:	005b      	lsls	r3, r3, #1
 8014a8e:	697a      	ldr	r2, [r7, #20]
 8014a90:	4413      	add	r3, r2
 8014a92:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014a94:	e78f      	b.n	80149b6 <ff_wtoupper+0x1a>
			break;
 8014a96:	bf00      	nop
	}

	return chr;
 8014a98:	88fb      	ldrh	r3, [r7, #6]
}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	371c      	adds	r7, #28
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa4:	4770      	bx	lr
 8014aa6:	bf00      	nop
 8014aa8:	08015998 	.word	0x08015998
 8014aac:	08015b8c 	.word	0x08015b8c

08014ab0 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f000 fd41 	bl	8015540 <malloc>
 8014abe:	4603      	mov	r3, r0
}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3708      	adds	r7, #8
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}

08014ac8 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f000 fd3d 	bl	8015550 <free>
}
 8014ad6:	bf00      	nop
 8014ad8:	3708      	adds	r7, #8
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}
	...

08014ae0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	4913      	ldr	r1, [pc, #76]	; (8014b34 <MX_USB_DEVICE_Init+0x54>)
 8014ae8:	4813      	ldr	r0, [pc, #76]	; (8014b38 <MX_USB_DEVICE_Init+0x58>)
 8014aea:	f7f9 ffcc 	bl	800ea86 <USBD_Init>
 8014aee:	4603      	mov	r3, r0
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d001      	beq.n	8014af8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014af4:	f7ec f9c2 	bl	8000e7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8014af8:	4910      	ldr	r1, [pc, #64]	; (8014b3c <MX_USB_DEVICE_Init+0x5c>)
 8014afa:	480f      	ldr	r0, [pc, #60]	; (8014b38 <MX_USB_DEVICE_Init+0x58>)
 8014afc:	f7f9 ffee 	bl	800eadc <USBD_RegisterClass>
 8014b00:	4603      	mov	r3, r0
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d001      	beq.n	8014b0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014b06:	f7ec f9b9 	bl	8000e7c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8014b0a:	490d      	ldr	r1, [pc, #52]	; (8014b40 <MX_USB_DEVICE_Init+0x60>)
 8014b0c:	480a      	ldr	r0, [pc, #40]	; (8014b38 <MX_USB_DEVICE_Init+0x58>)
 8014b0e:	f7f8 ff95 	bl	800da3c <USBD_MSC_RegisterStorage>
 8014b12:	4603      	mov	r3, r0
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d001      	beq.n	8014b1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014b18:	f7ec f9b0 	bl	8000e7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014b1c:	4806      	ldr	r0, [pc, #24]	; (8014b38 <MX_USB_DEVICE_Init+0x58>)
 8014b1e:	f7f9 fff7 	bl	800eb10 <USBD_Start>
 8014b22:	4603      	mov	r3, r0
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d001      	beq.n	8014b2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014b28:	f7ec f9a8 	bl	8000e7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014b2c:	f7ee ff2e 	bl	800398c <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014b30:	bf00      	nop
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	240000c0 	.word	0x240000c0
 8014b38:	24007754 	.word	0x24007754
 8014b3c:	2400001c 	.word	0x2400001c
 8014b40:	24000110 	.word	0x24000110

08014b44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b44:	b480      	push	{r7}
 8014b46:	b083      	sub	sp, #12
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	6039      	str	r1, [r7, #0]
 8014b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	2212      	movs	r2, #18
 8014b54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014b56:	4b03      	ldr	r3, [pc, #12]	; (8014b64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014b58:	4618      	mov	r0, r3
 8014b5a:	370c      	adds	r7, #12
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b62:	4770      	bx	lr
 8014b64:	240000dc 	.word	0x240000dc

08014b68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b68:	b480      	push	{r7}
 8014b6a:	b083      	sub	sp, #12
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	4603      	mov	r3, r0
 8014b70:	6039      	str	r1, [r7, #0]
 8014b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	2204      	movs	r2, #4
 8014b78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014b7a:	4b03      	ldr	r3, [pc, #12]	; (8014b88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	370c      	adds	r7, #12
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr
 8014b88:	240000f0 	.word	0x240000f0

08014b8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b082      	sub	sp, #8
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	4603      	mov	r3, r0
 8014b94:	6039      	str	r1, [r7, #0]
 8014b96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014b98:	79fb      	ldrb	r3, [r7, #7]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d105      	bne.n	8014baa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014b9e:	683a      	ldr	r2, [r7, #0]
 8014ba0:	4907      	ldr	r1, [pc, #28]	; (8014bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8014ba2:	4808      	ldr	r0, [pc, #32]	; (8014bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8014ba4:	f7fa ff76 	bl	800fa94 <USBD_GetString>
 8014ba8:	e004      	b.n	8014bb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014baa:	683a      	ldr	r2, [r7, #0]
 8014bac:	4904      	ldr	r1, [pc, #16]	; (8014bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8014bae:	4805      	ldr	r0, [pc, #20]	; (8014bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8014bb0:	f7fa ff70 	bl	800fa94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014bb4:	4b02      	ldr	r3, [pc, #8]	; (8014bc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3708      	adds	r7, #8
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	24007a18 	.word	0x24007a18
 8014bc4:	08015788 	.word	0x08015788

08014bc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	4603      	mov	r3, r0
 8014bd0:	6039      	str	r1, [r7, #0]
 8014bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014bd4:	683a      	ldr	r2, [r7, #0]
 8014bd6:	4904      	ldr	r1, [pc, #16]	; (8014be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014bd8:	4804      	ldr	r0, [pc, #16]	; (8014bec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014bda:	f7fa ff5b 	bl	800fa94 <USBD_GetString>
  return USBD_StrDesc;
 8014bde:	4b02      	ldr	r3, [pc, #8]	; (8014be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3708      	adds	r7, #8
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}
 8014be8:	24007a18 	.word	0x24007a18
 8014bec:	0801579c 	.word	0x0801579c

08014bf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	6039      	str	r1, [r7, #0]
 8014bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	221a      	movs	r2, #26
 8014c00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014c02:	f000 f843 	bl	8014c8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014c06:	4b02      	ldr	r3, [pc, #8]	; (8014c10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3708      	adds	r7, #8
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	240000f4 	.word	0x240000f4

08014c14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	6039      	str	r1, [r7, #0]
 8014c1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014c20:	79fb      	ldrb	r3, [r7, #7]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d105      	bne.n	8014c32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014c26:	683a      	ldr	r2, [r7, #0]
 8014c28:	4907      	ldr	r1, [pc, #28]	; (8014c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014c2a:	4808      	ldr	r0, [pc, #32]	; (8014c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014c2c:	f7fa ff32 	bl	800fa94 <USBD_GetString>
 8014c30:	e004      	b.n	8014c3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014c32:	683a      	ldr	r2, [r7, #0]
 8014c34:	4904      	ldr	r1, [pc, #16]	; (8014c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014c36:	4805      	ldr	r0, [pc, #20]	; (8014c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014c38:	f7fa ff2c 	bl	800fa94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014c3c:	4b02      	ldr	r3, [pc, #8]	; (8014c48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3708      	adds	r7, #8
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
 8014c46:	bf00      	nop
 8014c48:	24007a18 	.word	0x24007a18
 8014c4c:	080157b0 	.word	0x080157b0

08014c50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	4603      	mov	r3, r0
 8014c58:	6039      	str	r1, [r7, #0]
 8014c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014c5c:	79fb      	ldrb	r3, [r7, #7]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d105      	bne.n	8014c6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014c62:	683a      	ldr	r2, [r7, #0]
 8014c64:	4907      	ldr	r1, [pc, #28]	; (8014c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014c66:	4808      	ldr	r0, [pc, #32]	; (8014c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014c68:	f7fa ff14 	bl	800fa94 <USBD_GetString>
 8014c6c:	e004      	b.n	8014c78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014c6e:	683a      	ldr	r2, [r7, #0]
 8014c70:	4904      	ldr	r1, [pc, #16]	; (8014c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014c72:	4805      	ldr	r0, [pc, #20]	; (8014c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014c74:	f7fa ff0e 	bl	800fa94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014c78:	4b02      	ldr	r3, [pc, #8]	; (8014c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	3708      	adds	r7, #8
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	bd80      	pop	{r7, pc}
 8014c82:	bf00      	nop
 8014c84:	24007a18 	.word	0x24007a18
 8014c88:	080157bc 	.word	0x080157bc

08014c8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b084      	sub	sp, #16
 8014c90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014c92:	4b0f      	ldr	r3, [pc, #60]	; (8014cd0 <Get_SerialNum+0x44>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014c98:	4b0e      	ldr	r3, [pc, #56]	; (8014cd4 <Get_SerialNum+0x48>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014c9e:	4b0e      	ldr	r3, [pc, #56]	; (8014cd8 <Get_SerialNum+0x4c>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014ca4:	68fa      	ldr	r2, [r7, #12]
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	4413      	add	r3, r2
 8014caa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d009      	beq.n	8014cc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014cb2:	2208      	movs	r2, #8
 8014cb4:	4909      	ldr	r1, [pc, #36]	; (8014cdc <Get_SerialNum+0x50>)
 8014cb6:	68f8      	ldr	r0, [r7, #12]
 8014cb8:	f000 f814 	bl	8014ce4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014cbc:	2204      	movs	r2, #4
 8014cbe:	4908      	ldr	r1, [pc, #32]	; (8014ce0 <Get_SerialNum+0x54>)
 8014cc0:	68b8      	ldr	r0, [r7, #8]
 8014cc2:	f000 f80f 	bl	8014ce4 <IntToUnicode>
  }
}
 8014cc6:	bf00      	nop
 8014cc8:	3710      	adds	r7, #16
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	1ff1e800 	.word	0x1ff1e800
 8014cd4:	1ff1e804 	.word	0x1ff1e804
 8014cd8:	1ff1e808 	.word	0x1ff1e808
 8014cdc:	240000f6 	.word	0x240000f6
 8014ce0:	24000106 	.word	0x24000106

08014ce4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	b087      	sub	sp, #28
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	60f8      	str	r0, [r7, #12]
 8014cec:	60b9      	str	r1, [r7, #8]
 8014cee:	4613      	mov	r3, r2
 8014cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	75fb      	strb	r3, [r7, #23]
 8014cfa:	e027      	b.n	8014d4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	0f1b      	lsrs	r3, r3, #28
 8014d00:	2b09      	cmp	r3, #9
 8014d02:	d80b      	bhi.n	8014d1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	0f1b      	lsrs	r3, r3, #28
 8014d08:	b2da      	uxtb	r2, r3
 8014d0a:	7dfb      	ldrb	r3, [r7, #23]
 8014d0c:	005b      	lsls	r3, r3, #1
 8014d0e:	4619      	mov	r1, r3
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	440b      	add	r3, r1
 8014d14:	3230      	adds	r2, #48	; 0x30
 8014d16:	b2d2      	uxtb	r2, r2
 8014d18:	701a      	strb	r2, [r3, #0]
 8014d1a:	e00a      	b.n	8014d32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	0f1b      	lsrs	r3, r3, #28
 8014d20:	b2da      	uxtb	r2, r3
 8014d22:	7dfb      	ldrb	r3, [r7, #23]
 8014d24:	005b      	lsls	r3, r3, #1
 8014d26:	4619      	mov	r1, r3
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	440b      	add	r3, r1
 8014d2c:	3237      	adds	r2, #55	; 0x37
 8014d2e:	b2d2      	uxtb	r2, r2
 8014d30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	011b      	lsls	r3, r3, #4
 8014d36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014d38:	7dfb      	ldrb	r3, [r7, #23]
 8014d3a:	005b      	lsls	r3, r3, #1
 8014d3c:	3301      	adds	r3, #1
 8014d3e:	68ba      	ldr	r2, [r7, #8]
 8014d40:	4413      	add	r3, r2
 8014d42:	2200      	movs	r2, #0
 8014d44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014d46:	7dfb      	ldrb	r3, [r7, #23]
 8014d48:	3301      	adds	r3, #1
 8014d4a:	75fb      	strb	r3, [r7, #23]
 8014d4c:	7dfa      	ldrb	r2, [r7, #23]
 8014d4e:	79fb      	ldrb	r3, [r7, #7]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d3d3      	bcc.n	8014cfc <IntToUnicode+0x18>
  }
}
 8014d54:	bf00      	nop
 8014d56:	371c      	adds	r7, #28
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr

08014d60 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8014d60:	b480      	push	{r7}
 8014d62:	b083      	sub	sp, #12
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	4603      	mov	r3, r0
 8014d68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8014d6a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	370c      	adds	r7, #12
 8014d70:	46bd      	mov	sp, r7
 8014d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d76:	4770      	bx	lr

08014d78 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b084      	sub	sp, #16
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	4603      	mov	r3, r0
 8014d80:	60b9      	str	r1, [r7, #8]
 8014d82:	607a      	str	r2, [r7, #4]
 8014d84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 8014d86:	490b      	ldr	r1, [pc, #44]	; (8014db4 <STORAGE_GetCapacity_FS+0x3c>)
 8014d88:	480b      	ldr	r0, [pc, #44]	; (8014db8 <STORAGE_GetCapacity_FS+0x40>)
 8014d8a:	f7f2 fdfd 	bl	8007988 <HAL_SD_GetCardInfo>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d10a      	bne.n	8014daa <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 8014d94:	4b07      	ldr	r3, [pc, #28]	; (8014db4 <STORAGE_GetCapacity_FS+0x3c>)
 8014d96:	699a      	ldr	r2, [r3, #24]
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 8014d9c:	4b05      	ldr	r3, [pc, #20]	; (8014db4 <STORAGE_GetCapacity_FS+0x3c>)
 8014d9e:	69db      	ldr	r3, [r3, #28]
 8014da0:	b29a      	uxth	r2, r3
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8014da6:	2300      	movs	r3, #0
 8014da8:	e7ff      	b.n	8014daa <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3710      	adds	r7, #16
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	24002518 	.word	0x24002518
 8014db8:	240013f0 	.word	0x240013f0

08014dbc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8014dbc:	b480      	push	{r7}
 8014dbe:	b083      	sub	sp, #12
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014dc6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	370c      	adds	r7, #12
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd2:	4770      	bx	lr

08014dd4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8014dd4:	b480      	push	{r7}
 8014dd6:	b083      	sub	sp, #12
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	4603      	mov	r3, r0
 8014ddc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8014dde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014de0:	4618      	mov	r0, r3
 8014de2:	370c      	adds	r7, #12
 8014de4:	46bd      	mov	sp, r7
 8014de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dea:	4770      	bx	lr

08014dec <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b086      	sub	sp, #24
 8014df0:	af02      	add	r7, sp, #8
 8014df2:	60b9      	str	r1, [r7, #8]
 8014df4:	607a      	str	r2, [r7, #4]
 8014df6:	461a      	mov	r2, r3
 8014df8:	4603      	mov	r3, r0
 8014dfa:	73fb      	strb	r3, [r7, #15]
 8014dfc:	4613      	mov	r3, r2
 8014dfe:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 8014e00:	89ba      	ldrh	r2, [r7, #12]
 8014e02:	230a      	movs	r3, #10
 8014e04:	9300      	str	r3, [sp, #0]
 8014e06:	4613      	mov	r3, r2
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	68b9      	ldr	r1, [r7, #8]
 8014e0c:	4805      	ldr	r0, [pc, #20]	; (8014e24 <STORAGE_Read_FS+0x38>)
 8014e0e:	f7f2 f83d 	bl	8006e8c <HAL_SD_ReadBlocks>
 8014e12:	4603      	mov	r3, r0
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d101      	bne.n	8014e1c <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 8014e18:	2300      	movs	r3, #0
 8014e1a:	e7ff      	b.n	8014e1c <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3710      	adds	r7, #16
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	240013f0 	.word	0x240013f0

08014e28 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b086      	sub	sp, #24
 8014e2c:	af02      	add	r7, sp, #8
 8014e2e:	60b9      	str	r1, [r7, #8]
 8014e30:	607a      	str	r2, [r7, #4]
 8014e32:	461a      	mov	r2, r3
 8014e34:	4603      	mov	r3, r0
 8014e36:	73fb      	strb	r3, [r7, #15]
 8014e38:	4613      	mov	r3, r2
 8014e3a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 8014e3c:	89ba      	ldrh	r2, [r7, #12]
 8014e3e:	230a      	movs	r3, #10
 8014e40:	9300      	str	r3, [sp, #0]
 8014e42:	4613      	mov	r3, r2
 8014e44:	687a      	ldr	r2, [r7, #4]
 8014e46:	68b9      	ldr	r1, [r7, #8]
 8014e48:	4805      	ldr	r0, [pc, #20]	; (8014e60 <STORAGE_Write_FS+0x38>)
 8014e4a:	f7f2 f9a9 	bl	80071a0 <HAL_SD_WriteBlocks>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d101      	bne.n	8014e58 <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 8014e54:	2300      	movs	r3, #0
 8014e56:	e7ff      	b.n	8014e58 <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 8014e58:	4618      	mov	r0, r3
 8014e5a:	3710      	adds	r7, #16
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	bd80      	pop	{r7, pc}
 8014e60:	240013f0 	.word	0x240013f0

08014e64 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8014e64:	b480      	push	{r7}
 8014e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8014e68:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e72:	4770      	bx	lr

08014e74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b08a      	sub	sp, #40	; 0x28
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e7c:	f107 0314 	add.w	r3, r7, #20
 8014e80:	2200      	movs	r2, #0
 8014e82:	601a      	str	r2, [r3, #0]
 8014e84:	605a      	str	r2, [r3, #4]
 8014e86:	609a      	str	r2, [r3, #8]
 8014e88:	60da      	str	r2, [r3, #12]
 8014e8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	4a1e      	ldr	r2, [pc, #120]	; (8014f0c <HAL_PCD_MspInit+0x98>)
 8014e92:	4293      	cmp	r3, r2
 8014e94:	d136      	bne.n	8014f04 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e96:	4b1e      	ldr	r3, [pc, #120]	; (8014f10 <HAL_PCD_MspInit+0x9c>)
 8014e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e9c:	4a1c      	ldr	r2, [pc, #112]	; (8014f10 <HAL_PCD_MspInit+0x9c>)
 8014e9e:	f043 0301 	orr.w	r3, r3, #1
 8014ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014ea6:	4b1a      	ldr	r3, [pc, #104]	; (8014f10 <HAL_PCD_MspInit+0x9c>)
 8014ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014eac:	f003 0301 	and.w	r3, r3, #1
 8014eb0:	613b      	str	r3, [r7, #16]
 8014eb2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8014eb4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8014eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014eba:	2302      	movs	r3, #2
 8014ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014ec6:	230a      	movs	r3, #10
 8014ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014eca:	f107 0314 	add.w	r3, r7, #20
 8014ece:	4619      	mov	r1, r3
 8014ed0:	4810      	ldr	r0, [pc, #64]	; (8014f14 <HAL_PCD_MspInit+0xa0>)
 8014ed2:	f7ed f8c7 	bl	8002064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014ed6:	4b0e      	ldr	r3, [pc, #56]	; (8014f10 <HAL_PCD_MspInit+0x9c>)
 8014ed8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014edc:	4a0c      	ldr	r2, [pc, #48]	; (8014f10 <HAL_PCD_MspInit+0x9c>)
 8014ede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014ee2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014ee6:	4b0a      	ldr	r3, [pc, #40]	; (8014f10 <HAL_PCD_MspInit+0x9c>)
 8014ee8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014ef0:	60fb      	str	r3, [r7, #12]
 8014ef2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	2100      	movs	r1, #0
 8014ef8:	2065      	movs	r0, #101	; 0x65
 8014efa:	f7ec fc68 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014efe:	2065      	movs	r0, #101	; 0x65
 8014f00:	f7ec fc7f 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014f04:	bf00      	nop
 8014f06:	3728      	adds	r7, #40	; 0x28
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}
 8014f0c:	40080000 	.word	0x40080000
 8014f10:	58024400 	.word	0x58024400
 8014f14:	58020000 	.word	0x58020000

08014f18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	4610      	mov	r0, r2
 8014f30:	f7f9 fe4d 	bl	800ebce <USBD_LL_SetupStage>
}
 8014f34:	bf00      	nop
 8014f36:	3708      	adds	r7, #8
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	460b      	mov	r3, r1
 8014f46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014f4e:	78fa      	ldrb	r2, [r7, #3]
 8014f50:	6879      	ldr	r1, [r7, #4]
 8014f52:	4613      	mov	r3, r2
 8014f54:	00db      	lsls	r3, r3, #3
 8014f56:	1a9b      	subs	r3, r3, r2
 8014f58:	009b      	lsls	r3, r3, #2
 8014f5a:	440b      	add	r3, r1
 8014f5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014f60:	681a      	ldr	r2, [r3, #0]
 8014f62:	78fb      	ldrb	r3, [r7, #3]
 8014f64:	4619      	mov	r1, r3
 8014f66:	f7f9 fe7d 	bl	800ec64 <USBD_LL_DataOutStage>
}
 8014f6a:	bf00      	nop
 8014f6c:	3708      	adds	r7, #8
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}

08014f72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f72:	b580      	push	{r7, lr}
 8014f74:	b082      	sub	sp, #8
 8014f76:	af00      	add	r7, sp, #0
 8014f78:	6078      	str	r0, [r7, #4]
 8014f7a:	460b      	mov	r3, r1
 8014f7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014f84:	78fa      	ldrb	r2, [r7, #3]
 8014f86:	6879      	ldr	r1, [r7, #4]
 8014f88:	4613      	mov	r3, r2
 8014f8a:	00db      	lsls	r3, r3, #3
 8014f8c:	1a9b      	subs	r3, r3, r2
 8014f8e:	009b      	lsls	r3, r3, #2
 8014f90:	440b      	add	r3, r1
 8014f92:	3348      	adds	r3, #72	; 0x48
 8014f94:	681a      	ldr	r2, [r3, #0]
 8014f96:	78fb      	ldrb	r3, [r7, #3]
 8014f98:	4619      	mov	r1, r3
 8014f9a:	f7f9 fed4 	bl	800ed46 <USBD_LL_DataInStage>
}
 8014f9e:	bf00      	nop
 8014fa0:	3708      	adds	r7, #8
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}

08014fa6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fa6:	b580      	push	{r7, lr}
 8014fa8:	b082      	sub	sp, #8
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7f9 ffe7 	bl	800ef88 <USBD_LL_SOF>
}
 8014fba:	bf00      	nop
 8014fbc:	3708      	adds	r7, #8
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}

08014fc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8014fc2:	b580      	push	{r7, lr}
 8014fc4:	b084      	sub	sp, #16
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014fca:	2301      	movs	r3, #1
 8014fcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	68db      	ldr	r3, [r3, #12]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d102      	bne.n	8014fdc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	73fb      	strb	r3, [r7, #15]
 8014fda:	e008      	b.n	8014fee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	68db      	ldr	r3, [r3, #12]
 8014fe0:	2b02      	cmp	r3, #2
 8014fe2:	d102      	bne.n	8014fea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	73fb      	strb	r3, [r7, #15]
 8014fe8:	e001      	b.n	8014fee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014fea:	f7eb ff47 	bl	8000e7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014ff4:	7bfa      	ldrb	r2, [r7, #15]
 8014ff6:	4611      	mov	r1, r2
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7f9 ff8a 	bl	800ef12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015004:	4618      	mov	r0, r3
 8015006:	f7f9 ff43 	bl	800ee90 <USBD_LL_Reset>
}
 801500a:	bf00      	nop
 801500c:	3710      	adds	r7, #16
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
	...

08015014 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015022:	4618      	mov	r0, r3
 8015024:	f7f9 ff85 	bl	800ef32 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	687a      	ldr	r2, [r7, #4]
 8015034:	6812      	ldr	r2, [r2, #0]
 8015036:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801503a:	f043 0301 	orr.w	r3, r3, #1
 801503e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	6a1b      	ldr	r3, [r3, #32]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d005      	beq.n	8015054 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015048:	4b04      	ldr	r3, [pc, #16]	; (801505c <HAL_PCD_SuspendCallback+0x48>)
 801504a:	691b      	ldr	r3, [r3, #16]
 801504c:	4a03      	ldr	r2, [pc, #12]	; (801505c <HAL_PCD_SuspendCallback+0x48>)
 801504e:	f043 0306 	orr.w	r3, r3, #6
 8015052:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015054:	bf00      	nop
 8015056:	3708      	adds	r7, #8
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	e000ed00 	.word	0xe000ed00

08015060 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b082      	sub	sp, #8
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801506e:	4618      	mov	r0, r3
 8015070:	f7f9 ff74 	bl	800ef5c <USBD_LL_Resume>
}
 8015074:	bf00      	nop
 8015076:	3708      	adds	r7, #8
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}

0801507c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b082      	sub	sp, #8
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	460b      	mov	r3, r1
 8015086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801508e:	78fa      	ldrb	r2, [r7, #3]
 8015090:	4611      	mov	r1, r2
 8015092:	4618      	mov	r0, r3
 8015094:	f7f9 ff9f 	bl	800efd6 <USBD_LL_IsoOUTIncomplete>
}
 8015098:	bf00      	nop
 801509a:	3708      	adds	r7, #8
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}

080150a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	460b      	mov	r3, r1
 80150aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80150b2:	78fa      	ldrb	r2, [r7, #3]
 80150b4:	4611      	mov	r1, r2
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7f9 ff80 	bl	800efbc <USBD_LL_IsoINIncomplete>
}
 80150bc:	bf00      	nop
 80150be:	3708      	adds	r7, #8
 80150c0:	46bd      	mov	sp, r7
 80150c2:	bd80      	pop	{r7, pc}

080150c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b082      	sub	sp, #8
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7f9 ff8c 	bl	800eff0 <USBD_LL_DevConnected>
}
 80150d8:	bf00      	nop
 80150da:	3708      	adds	r7, #8
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}

080150e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7f9 ff89 	bl	800f006 <USBD_LL_DevDisconnected>
}
 80150f4:	bf00      	nop
 80150f6:	3708      	adds	r7, #8
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b082      	sub	sp, #8
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d13e      	bne.n	801518a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801510c:	4a21      	ldr	r2, [pc, #132]	; (8015194 <USBD_LL_Init+0x98>)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	4a1f      	ldr	r2, [pc, #124]	; (8015194 <USBD_LL_Init+0x98>)
 8015118:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801511c:	4b1d      	ldr	r3, [pc, #116]	; (8015194 <USBD_LL_Init+0x98>)
 801511e:	4a1e      	ldr	r2, [pc, #120]	; (8015198 <USBD_LL_Init+0x9c>)
 8015120:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015122:	4b1c      	ldr	r3, [pc, #112]	; (8015194 <USBD_LL_Init+0x98>)
 8015124:	2209      	movs	r2, #9
 8015126:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015128:	4b1a      	ldr	r3, [pc, #104]	; (8015194 <USBD_LL_Init+0x98>)
 801512a:	2202      	movs	r2, #2
 801512c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801512e:	4b19      	ldr	r3, [pc, #100]	; (8015194 <USBD_LL_Init+0x98>)
 8015130:	2200      	movs	r2, #0
 8015132:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015134:	4b17      	ldr	r3, [pc, #92]	; (8015194 <USBD_LL_Init+0x98>)
 8015136:	2202      	movs	r2, #2
 8015138:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801513a:	4b16      	ldr	r3, [pc, #88]	; (8015194 <USBD_LL_Init+0x98>)
 801513c:	2200      	movs	r2, #0
 801513e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015140:	4b14      	ldr	r3, [pc, #80]	; (8015194 <USBD_LL_Init+0x98>)
 8015142:	2200      	movs	r2, #0
 8015144:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015146:	4b13      	ldr	r3, [pc, #76]	; (8015194 <USBD_LL_Init+0x98>)
 8015148:	2200      	movs	r2, #0
 801514a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801514c:	4b11      	ldr	r3, [pc, #68]	; (8015194 <USBD_LL_Init+0x98>)
 801514e:	2200      	movs	r2, #0
 8015150:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015152:	4b10      	ldr	r3, [pc, #64]	; (8015194 <USBD_LL_Init+0x98>)
 8015154:	2200      	movs	r2, #0
 8015156:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015158:	4b0e      	ldr	r3, [pc, #56]	; (8015194 <USBD_LL_Init+0x98>)
 801515a:	2200      	movs	r2, #0
 801515c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801515e:	480d      	ldr	r0, [pc, #52]	; (8015194 <USBD_LL_Init+0x98>)
 8015160:	f7ed f9a1 	bl	80024a6 <HAL_PCD_Init>
 8015164:	4603      	mov	r3, r0
 8015166:	2b00      	cmp	r3, #0
 8015168:	d001      	beq.n	801516e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801516a:	f7eb fe87 	bl	8000e7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801516e:	2180      	movs	r1, #128	; 0x80
 8015170:	4808      	ldr	r0, [pc, #32]	; (8015194 <USBD_LL_Init+0x98>)
 8015172:	f7ee fb90 	bl	8003896 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015176:	2240      	movs	r2, #64	; 0x40
 8015178:	2100      	movs	r1, #0
 801517a:	4806      	ldr	r0, [pc, #24]	; (8015194 <USBD_LL_Init+0x98>)
 801517c:	f7ee fb44 	bl	8003808 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015180:	2280      	movs	r2, #128	; 0x80
 8015182:	2101      	movs	r1, #1
 8015184:	4803      	ldr	r0, [pc, #12]	; (8015194 <USBD_LL_Init+0x98>)
 8015186:	f7ee fb3f 	bl	8003808 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801518a:	2300      	movs	r3, #0
}
 801518c:	4618      	mov	r0, r3
 801518e:	3708      	adds	r7, #8
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}
 8015194:	24007c18 	.word	0x24007c18
 8015198:	40080000 	.word	0x40080000

0801519c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b084      	sub	sp, #16
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151a4:	2300      	movs	r3, #0
 80151a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151a8:	2300      	movs	r3, #0
 80151aa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7ed fa9b 	bl	80026ee <HAL_PCD_Start>
 80151b8:	4603      	mov	r3, r0
 80151ba:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80151bc:	7bfb      	ldrb	r3, [r7, #15]
 80151be:	4618      	mov	r0, r3
 80151c0:	f000 f968 	bl	8015494 <USBD_Get_USB_Status>
 80151c4:	4603      	mov	r3, r0
 80151c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80151c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3710      	adds	r7, #16
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}

080151d2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80151d2:	b580      	push	{r7, lr}
 80151d4:	b084      	sub	sp, #16
 80151d6:	af00      	add	r7, sp, #0
 80151d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151da:	2300      	movs	r3, #0
 80151dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151de:	2300      	movs	r3, #0
 80151e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7ed fab3 	bl	8002754 <HAL_PCD_Stop>
 80151ee:	4603      	mov	r3, r0
 80151f0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80151f2:	7bfb      	ldrb	r3, [r7, #15]
 80151f4:	4618      	mov	r0, r3
 80151f6:	f000 f94d 	bl	8015494 <USBD_Get_USB_Status>
 80151fa:	4603      	mov	r3, r0
 80151fc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80151fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8015200:	4618      	mov	r0, r3
 8015202:	3710      	adds	r7, #16
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}

08015208 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	4608      	mov	r0, r1
 8015212:	4611      	mov	r1, r2
 8015214:	461a      	mov	r2, r3
 8015216:	4603      	mov	r3, r0
 8015218:	70fb      	strb	r3, [r7, #3]
 801521a:	460b      	mov	r3, r1
 801521c:	70bb      	strb	r3, [r7, #2]
 801521e:	4613      	mov	r3, r2
 8015220:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015222:	2300      	movs	r3, #0
 8015224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015226:	2300      	movs	r3, #0
 8015228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015230:	78bb      	ldrb	r3, [r7, #2]
 8015232:	883a      	ldrh	r2, [r7, #0]
 8015234:	78f9      	ldrb	r1, [r7, #3]
 8015236:	f7ed fec1 	bl	8002fbc <HAL_PCD_EP_Open>
 801523a:	4603      	mov	r3, r0
 801523c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801523e:	7bfb      	ldrb	r3, [r7, #15]
 8015240:	4618      	mov	r0, r3
 8015242:	f000 f927 	bl	8015494 <USBD_Get_USB_Status>
 8015246:	4603      	mov	r3, r0
 8015248:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801524a:	7bbb      	ldrb	r3, [r7, #14]
}
 801524c:	4618      	mov	r0, r3
 801524e:	3710      	adds	r7, #16
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}

08015254 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b084      	sub	sp, #16
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	460b      	mov	r3, r1
 801525e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015260:	2300      	movs	r3, #0
 8015262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015264:	2300      	movs	r3, #0
 8015266:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801526e:	78fa      	ldrb	r2, [r7, #3]
 8015270:	4611      	mov	r1, r2
 8015272:	4618      	mov	r0, r3
 8015274:	f7ed ff0a 	bl	800308c <HAL_PCD_EP_Close>
 8015278:	4603      	mov	r3, r0
 801527a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801527c:	7bfb      	ldrb	r3, [r7, #15]
 801527e:	4618      	mov	r0, r3
 8015280:	f000 f908 	bl	8015494 <USBD_Get_USB_Status>
 8015284:	4603      	mov	r3, r0
 8015286:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015288:	7bbb      	ldrb	r3, [r7, #14]
}
 801528a:	4618      	mov	r0, r3
 801528c:	3710      	adds	r7, #16
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}

08015292 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015292:	b580      	push	{r7, lr}
 8015294:	b084      	sub	sp, #16
 8015296:	af00      	add	r7, sp, #0
 8015298:	6078      	str	r0, [r7, #4]
 801529a:	460b      	mov	r3, r1
 801529c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801529e:	2300      	movs	r3, #0
 80152a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152a2:	2300      	movs	r3, #0
 80152a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80152ac:	78fa      	ldrb	r2, [r7, #3]
 80152ae:	4611      	mov	r1, r2
 80152b0:	4618      	mov	r0, r3
 80152b2:	f7ee f89c 	bl	80033ee <HAL_PCD_EP_Flush>
 80152b6:	4603      	mov	r3, r0
 80152b8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80152ba:	7bfb      	ldrb	r3, [r7, #15]
 80152bc:	4618      	mov	r0, r3
 80152be:	f000 f8e9 	bl	8015494 <USBD_Get_USB_Status>
 80152c2:	4603      	mov	r3, r0
 80152c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80152c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	3710      	adds	r7, #16
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}

080152d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
 80152d8:	460b      	mov	r3, r1
 80152da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152dc:	2300      	movs	r3, #0
 80152de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152e0:	2300      	movs	r3, #0
 80152e2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80152ea:	78fa      	ldrb	r2, [r7, #3]
 80152ec:	4611      	mov	r1, r2
 80152ee:	4618      	mov	r0, r3
 80152f0:	f7ed ffc3 	bl	800327a <HAL_PCD_EP_SetStall>
 80152f4:	4603      	mov	r3, r0
 80152f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152f8:	7bfb      	ldrb	r3, [r7, #15]
 80152fa:	4618      	mov	r0, r3
 80152fc:	f000 f8ca 	bl	8015494 <USBD_Get_USB_Status>
 8015300:	4603      	mov	r3, r0
 8015302:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015304:	7bbb      	ldrb	r3, [r7, #14]
}
 8015306:	4618      	mov	r0, r3
 8015308:	3710      	adds	r7, #16
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}

0801530e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801530e:	b580      	push	{r7, lr}
 8015310:	b084      	sub	sp, #16
 8015312:	af00      	add	r7, sp, #0
 8015314:	6078      	str	r0, [r7, #4]
 8015316:	460b      	mov	r3, r1
 8015318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801531a:	2300      	movs	r3, #0
 801531c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801531e:	2300      	movs	r3, #0
 8015320:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015328:	78fa      	ldrb	r2, [r7, #3]
 801532a:	4611      	mov	r1, r2
 801532c:	4618      	mov	r0, r3
 801532e:	f7ee f808 	bl	8003342 <HAL_PCD_EP_ClrStall>
 8015332:	4603      	mov	r3, r0
 8015334:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8015336:	7bfb      	ldrb	r3, [r7, #15]
 8015338:	4618      	mov	r0, r3
 801533a:	f000 f8ab 	bl	8015494 <USBD_Get_USB_Status>
 801533e:	4603      	mov	r3, r0
 8015340:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015342:	7bbb      	ldrb	r3, [r7, #14]
}
 8015344:	4618      	mov	r0, r3
 8015346:	3710      	adds	r7, #16
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}

0801534c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801534c:	b480      	push	{r7}
 801534e:	b085      	sub	sp, #20
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	460b      	mov	r3, r1
 8015356:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801535e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015364:	2b00      	cmp	r3, #0
 8015366:	da0b      	bge.n	8015380 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015368:	78fb      	ldrb	r3, [r7, #3]
 801536a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801536e:	68f9      	ldr	r1, [r7, #12]
 8015370:	4613      	mov	r3, r2
 8015372:	00db      	lsls	r3, r3, #3
 8015374:	1a9b      	subs	r3, r3, r2
 8015376:	009b      	lsls	r3, r3, #2
 8015378:	440b      	add	r3, r1
 801537a:	333e      	adds	r3, #62	; 0x3e
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	e00b      	b.n	8015398 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015380:	78fb      	ldrb	r3, [r7, #3]
 8015382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015386:	68f9      	ldr	r1, [r7, #12]
 8015388:	4613      	mov	r3, r2
 801538a:	00db      	lsls	r3, r3, #3
 801538c:	1a9b      	subs	r3, r3, r2
 801538e:	009b      	lsls	r3, r3, #2
 8015390:	440b      	add	r3, r1
 8015392:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015396:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015398:	4618      	mov	r0, r3
 801539a:	3714      	adds	r7, #20
 801539c:	46bd      	mov	sp, r7
 801539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a2:	4770      	bx	lr

080153a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b084      	sub	sp, #16
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
 80153ac:	460b      	mov	r3, r1
 80153ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153b0:	2300      	movs	r3, #0
 80153b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153b4:	2300      	movs	r3, #0
 80153b6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80153be:	78fa      	ldrb	r2, [r7, #3]
 80153c0:	4611      	mov	r1, r2
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7ed fdd5 	bl	8002f72 <HAL_PCD_SetAddress>
 80153c8:	4603      	mov	r3, r0
 80153ca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80153cc:	7bfb      	ldrb	r3, [r7, #15]
 80153ce:	4618      	mov	r0, r3
 80153d0:	f000 f860 	bl	8015494 <USBD_Get_USB_Status>
 80153d4:	4603      	mov	r3, r0
 80153d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80153d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3710      	adds	r7, #16
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80153e2:	b580      	push	{r7, lr}
 80153e4:	b086      	sub	sp, #24
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	60f8      	str	r0, [r7, #12]
 80153ea:	607a      	str	r2, [r7, #4]
 80153ec:	461a      	mov	r2, r3
 80153ee:	460b      	mov	r3, r1
 80153f0:	72fb      	strb	r3, [r7, #11]
 80153f2:	4613      	mov	r3, r2
 80153f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153f6:	2300      	movs	r3, #0
 80153f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153fa:	2300      	movs	r3, #0
 80153fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015404:	893b      	ldrh	r3, [r7, #8]
 8015406:	7af9      	ldrb	r1, [r7, #11]
 8015408:	687a      	ldr	r2, [r7, #4]
 801540a:	f7ed feec 	bl	80031e6 <HAL_PCD_EP_Transmit>
 801540e:	4603      	mov	r3, r0
 8015410:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8015412:	7dfb      	ldrb	r3, [r7, #23]
 8015414:	4618      	mov	r0, r3
 8015416:	f000 f83d 	bl	8015494 <USBD_Get_USB_Status>
 801541a:	4603      	mov	r3, r0
 801541c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801541e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015420:	4618      	mov	r0, r3
 8015422:	3718      	adds	r7, #24
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b086      	sub	sp, #24
 801542c:	af00      	add	r7, sp, #0
 801542e:	60f8      	str	r0, [r7, #12]
 8015430:	607a      	str	r2, [r7, #4]
 8015432:	461a      	mov	r2, r3
 8015434:	460b      	mov	r3, r1
 8015436:	72fb      	strb	r3, [r7, #11]
 8015438:	4613      	mov	r3, r2
 801543a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801543c:	2300      	movs	r3, #0
 801543e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015440:	2300      	movs	r3, #0
 8015442:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801544a:	893b      	ldrh	r3, [r7, #8]
 801544c:	7af9      	ldrb	r1, [r7, #11]
 801544e:	687a      	ldr	r2, [r7, #4]
 8015450:	f7ed fe66 	bl	8003120 <HAL_PCD_EP_Receive>
 8015454:	4603      	mov	r3, r0
 8015456:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015458:	7dfb      	ldrb	r3, [r7, #23]
 801545a:	4618      	mov	r0, r3
 801545c:	f000 f81a 	bl	8015494 <USBD_Get_USB_Status>
 8015460:	4603      	mov	r3, r0
 8015462:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015464:	7dbb      	ldrb	r3, [r7, #22]
}
 8015466:	4618      	mov	r0, r3
 8015468:	3718      	adds	r7, #24
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}

0801546e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801546e:	b580      	push	{r7, lr}
 8015470:	b082      	sub	sp, #8
 8015472:	af00      	add	r7, sp, #0
 8015474:	6078      	str	r0, [r7, #4]
 8015476:	460b      	mov	r3, r1
 8015478:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015480:	78fa      	ldrb	r2, [r7, #3]
 8015482:	4611      	mov	r1, r2
 8015484:	4618      	mov	r0, r3
 8015486:	f7ed fe96 	bl	80031b6 <HAL_PCD_EP_GetRxCount>
 801548a:	4603      	mov	r3, r0
}
 801548c:	4618      	mov	r0, r3
 801548e:	3708      	adds	r7, #8
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015494:	b480      	push	{r7}
 8015496:	b085      	sub	sp, #20
 8015498:	af00      	add	r7, sp, #0
 801549a:	4603      	mov	r3, r0
 801549c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801549e:	2300      	movs	r3, #0
 80154a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80154a2:	79fb      	ldrb	r3, [r7, #7]
 80154a4:	2b03      	cmp	r3, #3
 80154a6:	d817      	bhi.n	80154d8 <USBD_Get_USB_Status+0x44>
 80154a8:	a201      	add	r2, pc, #4	; (adr r2, 80154b0 <USBD_Get_USB_Status+0x1c>)
 80154aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154ae:	bf00      	nop
 80154b0:	080154c1 	.word	0x080154c1
 80154b4:	080154c7 	.word	0x080154c7
 80154b8:	080154cd 	.word	0x080154cd
 80154bc:	080154d3 	.word	0x080154d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80154c0:	2300      	movs	r3, #0
 80154c2:	73fb      	strb	r3, [r7, #15]
    break;
 80154c4:	e00b      	b.n	80154de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80154c6:	2302      	movs	r3, #2
 80154c8:	73fb      	strb	r3, [r7, #15]
    break;
 80154ca:	e008      	b.n	80154de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80154cc:	2301      	movs	r3, #1
 80154ce:	73fb      	strb	r3, [r7, #15]
    break;
 80154d0:	e005      	b.n	80154de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80154d2:	2302      	movs	r3, #2
 80154d4:	73fb      	strb	r3, [r7, #15]
    break;
 80154d6:	e002      	b.n	80154de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80154d8:	2302      	movs	r3, #2
 80154da:	73fb      	strb	r3, [r7, #15]
    break;
 80154dc:	bf00      	nop
  }
  return usb_status;
 80154de:	7bfb      	ldrb	r3, [r7, #15]
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	3714      	adds	r7, #20
 80154e4:	46bd      	mov	sp, r7
 80154e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ea:	4770      	bx	lr

080154ec <__errno>:
 80154ec:	4b01      	ldr	r3, [pc, #4]	; (80154f4 <__errno+0x8>)
 80154ee:	6818      	ldr	r0, [r3, #0]
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop
 80154f4:	24000130 	.word	0x24000130

080154f8 <__libc_init_array>:
 80154f8:	b570      	push	{r4, r5, r6, lr}
 80154fa:	4e0d      	ldr	r6, [pc, #52]	; (8015530 <__libc_init_array+0x38>)
 80154fc:	4c0d      	ldr	r4, [pc, #52]	; (8015534 <__libc_init_array+0x3c>)
 80154fe:	1ba4      	subs	r4, r4, r6
 8015500:	10a4      	asrs	r4, r4, #2
 8015502:	2500      	movs	r5, #0
 8015504:	42a5      	cmp	r5, r4
 8015506:	d109      	bne.n	801551c <__libc_init_array+0x24>
 8015508:	4e0b      	ldr	r6, [pc, #44]	; (8015538 <__libc_init_array+0x40>)
 801550a:	4c0c      	ldr	r4, [pc, #48]	; (801553c <__libc_init_array+0x44>)
 801550c:	f000 f8ea 	bl	80156e4 <_init>
 8015510:	1ba4      	subs	r4, r4, r6
 8015512:	10a4      	asrs	r4, r4, #2
 8015514:	2500      	movs	r5, #0
 8015516:	42a5      	cmp	r5, r4
 8015518:	d105      	bne.n	8015526 <__libc_init_array+0x2e>
 801551a:	bd70      	pop	{r4, r5, r6, pc}
 801551c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015520:	4798      	blx	r3
 8015522:	3501      	adds	r5, #1
 8015524:	e7ee      	b.n	8015504 <__libc_init_array+0xc>
 8015526:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801552a:	4798      	blx	r3
 801552c:	3501      	adds	r5, #1
 801552e:	e7f2      	b.n	8015516 <__libc_init_array+0x1e>
 8015530:	08015c74 	.word	0x08015c74
 8015534:	08015c74 	.word	0x08015c74
 8015538:	08015c74 	.word	0x08015c74
 801553c:	08015c78 	.word	0x08015c78

08015540 <malloc>:
 8015540:	4b02      	ldr	r3, [pc, #8]	; (801554c <malloc+0xc>)
 8015542:	4601      	mov	r1, r0
 8015544:	6818      	ldr	r0, [r3, #0]
 8015546:	f000 b861 	b.w	801560c <_malloc_r>
 801554a:	bf00      	nop
 801554c:	24000130 	.word	0x24000130

08015550 <free>:
 8015550:	4b02      	ldr	r3, [pc, #8]	; (801555c <free+0xc>)
 8015552:	4601      	mov	r1, r0
 8015554:	6818      	ldr	r0, [r3, #0]
 8015556:	f000 b80b 	b.w	8015570 <_free_r>
 801555a:	bf00      	nop
 801555c:	24000130 	.word	0x24000130

08015560 <memset>:
 8015560:	4402      	add	r2, r0
 8015562:	4603      	mov	r3, r0
 8015564:	4293      	cmp	r3, r2
 8015566:	d100      	bne.n	801556a <memset+0xa>
 8015568:	4770      	bx	lr
 801556a:	f803 1b01 	strb.w	r1, [r3], #1
 801556e:	e7f9      	b.n	8015564 <memset+0x4>

08015570 <_free_r>:
 8015570:	b538      	push	{r3, r4, r5, lr}
 8015572:	4605      	mov	r5, r0
 8015574:	2900      	cmp	r1, #0
 8015576:	d045      	beq.n	8015604 <_free_r+0x94>
 8015578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801557c:	1f0c      	subs	r4, r1, #4
 801557e:	2b00      	cmp	r3, #0
 8015580:	bfb8      	it	lt
 8015582:	18e4      	addlt	r4, r4, r3
 8015584:	f000 f8ac 	bl	80156e0 <__malloc_lock>
 8015588:	4a1f      	ldr	r2, [pc, #124]	; (8015608 <_free_r+0x98>)
 801558a:	6813      	ldr	r3, [r2, #0]
 801558c:	4610      	mov	r0, r2
 801558e:	b933      	cbnz	r3, 801559e <_free_r+0x2e>
 8015590:	6063      	str	r3, [r4, #4]
 8015592:	6014      	str	r4, [r2, #0]
 8015594:	4628      	mov	r0, r5
 8015596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801559a:	f000 b8a2 	b.w	80156e2 <__malloc_unlock>
 801559e:	42a3      	cmp	r3, r4
 80155a0:	d90c      	bls.n	80155bc <_free_r+0x4c>
 80155a2:	6821      	ldr	r1, [r4, #0]
 80155a4:	1862      	adds	r2, r4, r1
 80155a6:	4293      	cmp	r3, r2
 80155a8:	bf04      	itt	eq
 80155aa:	681a      	ldreq	r2, [r3, #0]
 80155ac:	685b      	ldreq	r3, [r3, #4]
 80155ae:	6063      	str	r3, [r4, #4]
 80155b0:	bf04      	itt	eq
 80155b2:	1852      	addeq	r2, r2, r1
 80155b4:	6022      	streq	r2, [r4, #0]
 80155b6:	6004      	str	r4, [r0, #0]
 80155b8:	e7ec      	b.n	8015594 <_free_r+0x24>
 80155ba:	4613      	mov	r3, r2
 80155bc:	685a      	ldr	r2, [r3, #4]
 80155be:	b10a      	cbz	r2, 80155c4 <_free_r+0x54>
 80155c0:	42a2      	cmp	r2, r4
 80155c2:	d9fa      	bls.n	80155ba <_free_r+0x4a>
 80155c4:	6819      	ldr	r1, [r3, #0]
 80155c6:	1858      	adds	r0, r3, r1
 80155c8:	42a0      	cmp	r0, r4
 80155ca:	d10b      	bne.n	80155e4 <_free_r+0x74>
 80155cc:	6820      	ldr	r0, [r4, #0]
 80155ce:	4401      	add	r1, r0
 80155d0:	1858      	adds	r0, r3, r1
 80155d2:	4282      	cmp	r2, r0
 80155d4:	6019      	str	r1, [r3, #0]
 80155d6:	d1dd      	bne.n	8015594 <_free_r+0x24>
 80155d8:	6810      	ldr	r0, [r2, #0]
 80155da:	6852      	ldr	r2, [r2, #4]
 80155dc:	605a      	str	r2, [r3, #4]
 80155de:	4401      	add	r1, r0
 80155e0:	6019      	str	r1, [r3, #0]
 80155e2:	e7d7      	b.n	8015594 <_free_r+0x24>
 80155e4:	d902      	bls.n	80155ec <_free_r+0x7c>
 80155e6:	230c      	movs	r3, #12
 80155e8:	602b      	str	r3, [r5, #0]
 80155ea:	e7d3      	b.n	8015594 <_free_r+0x24>
 80155ec:	6820      	ldr	r0, [r4, #0]
 80155ee:	1821      	adds	r1, r4, r0
 80155f0:	428a      	cmp	r2, r1
 80155f2:	bf04      	itt	eq
 80155f4:	6811      	ldreq	r1, [r2, #0]
 80155f6:	6852      	ldreq	r2, [r2, #4]
 80155f8:	6062      	str	r2, [r4, #4]
 80155fa:	bf04      	itt	eq
 80155fc:	1809      	addeq	r1, r1, r0
 80155fe:	6021      	streq	r1, [r4, #0]
 8015600:	605c      	str	r4, [r3, #4]
 8015602:	e7c7      	b.n	8015594 <_free_r+0x24>
 8015604:	bd38      	pop	{r3, r4, r5, pc}
 8015606:	bf00      	nop
 8015608:	240002b8 	.word	0x240002b8

0801560c <_malloc_r>:
 801560c:	b570      	push	{r4, r5, r6, lr}
 801560e:	1ccd      	adds	r5, r1, #3
 8015610:	f025 0503 	bic.w	r5, r5, #3
 8015614:	3508      	adds	r5, #8
 8015616:	2d0c      	cmp	r5, #12
 8015618:	bf38      	it	cc
 801561a:	250c      	movcc	r5, #12
 801561c:	2d00      	cmp	r5, #0
 801561e:	4606      	mov	r6, r0
 8015620:	db01      	blt.n	8015626 <_malloc_r+0x1a>
 8015622:	42a9      	cmp	r1, r5
 8015624:	d903      	bls.n	801562e <_malloc_r+0x22>
 8015626:	230c      	movs	r3, #12
 8015628:	6033      	str	r3, [r6, #0]
 801562a:	2000      	movs	r0, #0
 801562c:	bd70      	pop	{r4, r5, r6, pc}
 801562e:	f000 f857 	bl	80156e0 <__malloc_lock>
 8015632:	4a21      	ldr	r2, [pc, #132]	; (80156b8 <_malloc_r+0xac>)
 8015634:	6814      	ldr	r4, [r2, #0]
 8015636:	4621      	mov	r1, r4
 8015638:	b991      	cbnz	r1, 8015660 <_malloc_r+0x54>
 801563a:	4c20      	ldr	r4, [pc, #128]	; (80156bc <_malloc_r+0xb0>)
 801563c:	6823      	ldr	r3, [r4, #0]
 801563e:	b91b      	cbnz	r3, 8015648 <_malloc_r+0x3c>
 8015640:	4630      	mov	r0, r6
 8015642:	f000 f83d 	bl	80156c0 <_sbrk_r>
 8015646:	6020      	str	r0, [r4, #0]
 8015648:	4629      	mov	r1, r5
 801564a:	4630      	mov	r0, r6
 801564c:	f000 f838 	bl	80156c0 <_sbrk_r>
 8015650:	1c43      	adds	r3, r0, #1
 8015652:	d124      	bne.n	801569e <_malloc_r+0x92>
 8015654:	230c      	movs	r3, #12
 8015656:	6033      	str	r3, [r6, #0]
 8015658:	4630      	mov	r0, r6
 801565a:	f000 f842 	bl	80156e2 <__malloc_unlock>
 801565e:	e7e4      	b.n	801562a <_malloc_r+0x1e>
 8015660:	680b      	ldr	r3, [r1, #0]
 8015662:	1b5b      	subs	r3, r3, r5
 8015664:	d418      	bmi.n	8015698 <_malloc_r+0x8c>
 8015666:	2b0b      	cmp	r3, #11
 8015668:	d90f      	bls.n	801568a <_malloc_r+0x7e>
 801566a:	600b      	str	r3, [r1, #0]
 801566c:	50cd      	str	r5, [r1, r3]
 801566e:	18cc      	adds	r4, r1, r3
 8015670:	4630      	mov	r0, r6
 8015672:	f000 f836 	bl	80156e2 <__malloc_unlock>
 8015676:	f104 000b 	add.w	r0, r4, #11
 801567a:	1d23      	adds	r3, r4, #4
 801567c:	f020 0007 	bic.w	r0, r0, #7
 8015680:	1ac3      	subs	r3, r0, r3
 8015682:	d0d3      	beq.n	801562c <_malloc_r+0x20>
 8015684:	425a      	negs	r2, r3
 8015686:	50e2      	str	r2, [r4, r3]
 8015688:	e7d0      	b.n	801562c <_malloc_r+0x20>
 801568a:	428c      	cmp	r4, r1
 801568c:	684b      	ldr	r3, [r1, #4]
 801568e:	bf16      	itet	ne
 8015690:	6063      	strne	r3, [r4, #4]
 8015692:	6013      	streq	r3, [r2, #0]
 8015694:	460c      	movne	r4, r1
 8015696:	e7eb      	b.n	8015670 <_malloc_r+0x64>
 8015698:	460c      	mov	r4, r1
 801569a:	6849      	ldr	r1, [r1, #4]
 801569c:	e7cc      	b.n	8015638 <_malloc_r+0x2c>
 801569e:	1cc4      	adds	r4, r0, #3
 80156a0:	f024 0403 	bic.w	r4, r4, #3
 80156a4:	42a0      	cmp	r0, r4
 80156a6:	d005      	beq.n	80156b4 <_malloc_r+0xa8>
 80156a8:	1a21      	subs	r1, r4, r0
 80156aa:	4630      	mov	r0, r6
 80156ac:	f000 f808 	bl	80156c0 <_sbrk_r>
 80156b0:	3001      	adds	r0, #1
 80156b2:	d0cf      	beq.n	8015654 <_malloc_r+0x48>
 80156b4:	6025      	str	r5, [r4, #0]
 80156b6:	e7db      	b.n	8015670 <_malloc_r+0x64>
 80156b8:	240002b8 	.word	0x240002b8
 80156bc:	240002bc 	.word	0x240002bc

080156c0 <_sbrk_r>:
 80156c0:	b538      	push	{r3, r4, r5, lr}
 80156c2:	4c06      	ldr	r4, [pc, #24]	; (80156dc <_sbrk_r+0x1c>)
 80156c4:	2300      	movs	r3, #0
 80156c6:	4605      	mov	r5, r0
 80156c8:	4608      	mov	r0, r1
 80156ca:	6023      	str	r3, [r4, #0]
 80156cc:	f7eb fe18 	bl	8001300 <_sbrk>
 80156d0:	1c43      	adds	r3, r0, #1
 80156d2:	d102      	bne.n	80156da <_sbrk_r+0x1a>
 80156d4:	6823      	ldr	r3, [r4, #0]
 80156d6:	b103      	cbz	r3, 80156da <_sbrk_r+0x1a>
 80156d8:	602b      	str	r3, [r5, #0]
 80156da:	bd38      	pop	{r3, r4, r5, pc}
 80156dc:	24008020 	.word	0x24008020

080156e0 <__malloc_lock>:
 80156e0:	4770      	bx	lr

080156e2 <__malloc_unlock>:
 80156e2:	4770      	bx	lr

080156e4 <_init>:
 80156e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156e6:	bf00      	nop
 80156e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156ea:	bc08      	pop	{r3}
 80156ec:	469e      	mov	lr, r3
 80156ee:	4770      	bx	lr

080156f0 <_fini>:
 80156f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156f2:	bf00      	nop
 80156f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156f6:	bc08      	pop	{r3}
 80156f8:	469e      	mov	lr, r3
 80156fa:	4770      	bx	lr
